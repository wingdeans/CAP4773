. LFB 0 : leaq - 6 0 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 movl $ 6 0 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 5 2 , % rsp movq % rdi , - 5 5 2 (% rbp ) leaq - 5 4 4 (% rbp ), % rax movl $ 2 , % esi movq % rax , % rdi call go . Solution . Constructor leaq - 5 4 4 (% rbp ), % rax movl $ 2 , % esi movq % rax , % rdi call go . Solution . LRUCache . Get movq % rax , % rbx leaq int .. d (% rip ), % rax movq % rax , - 5 9 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 7 2 (% rbp ) movq - 4 7 2 (% rbp ), % rax movq % rbx , (% rax ) movq - 4 7 2 (% rbp ), % rax movq % rax , - 5 8 4 (% rbp ) movdqa - 5 9 2 (% rbp ), % xmm 0 movups % xmm 0 , - 4 6 4 (% rbp ) leaq - 4 6 4 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 1 , - 2 9 6 (% rbp ) movq $ 1 , - 2 8 8 (% rbp ) leaq - 2 7 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 8 8 (% rbp ) pushq - 2 9 6 (% rbp ) pushq - 3 0 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) leaq - 5 4 4 (% rbp ), % rax movl $ 6 , % edx movl $ 2 , % esi movq % rax , % rdi call go . Solution . LRUCache . Put leaq - 5 4 4 (% rbp ), % rax movl $ 1 , % esi movq % rax , % rdi call go . Solution . LRUCache . Get movq % rax , % rbx leaq int .. d (% rip ), % rax movq % rax , - 5 7 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 2 4 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq % rbx , (% rax ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 5 6 8 (% rbp ) movdqa - 5 7 6 (% rbp ), % xmm 1 movups % xmm 1 , - 4 1 6 (% rbp ) leaq - 4 1 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 , - 2 3 2 (% rbp ) movq $ 1 , - 2 2 4 (% rbp ) leaq - 2 0 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) leaq - 5 4 4 (% rbp ), % rax movl $ 5 , % edx movl $ 1 , % esi movq % rax , % rdi call go . Solution . LRUCache . Put leaq - 5 4 4 (% rbp ), % rax movl $ 2 , % edx movl $ 1 , % esi movq % rax , % rdi call go . Solution . LRUCache . Put leaq - 5 4 4 (% rbp ), % rax movl $ 1 , % esi movq % rax , % rdi call go . Solution . LRUCache . Get movq % rax , % rbx leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 3 7 6 (% rbp ), % rax movq % rbx , (% rax ) movq - 3 7 6 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 3 6 8 (% rbp ) movq % r 1 5 , - 3 6 0 (% rbp ) leaq - 3 6 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) leaq - 5 4 4 (% rbp ), % rax movl $ 2 , % esi movq % rax , % rdi call go . Solution . LRUCache . Get movq % rax , % rbx leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movq - 3 2 8 (% rbp ), % rax movq % rbx , (% rax ) movq - 3 2 8 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 3 2 0 (% rbp ) movq % r 1 3 , - 3 1 2 (% rbp ) leaq - 3 2 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 1 movl $ 3 1 2 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 8 0 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jne . L 4 . LBB 7 : . LBB 8 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 5 : movq 1 6 (% rbp ), % rax movq (% rax ), % rbx leaq main . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq % rbx , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 9 : movq - 2 8 0 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 5 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 9 : jmp . L 7 . L 6 : . LBB 1 0 : movq - 2 8 0 (% rbp ), % rax leaq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi leaq main . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 1 0 : movq - 2 8 0 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 3 . L 4 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 1 1 : movq $ 0 , - 4 8 (% rbp ) . LBB 1 2 : . LBB 1 3 : . LBB 1 4 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rcx movl $ 0 , % eax . LBE 1 4 : jmp . L 8 . L 4 0 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : movq % rax , - 4 8 (% rbp ) . LBB 1 7 : . LBB 1 8 : movq 4 8 (% rbp ), % rdx cmpq $ 0 , - 4 8 (% rbp ) js . L 9 cmpq % rdx , - 4 8 (% rbp ) jl . L 3 4 . L 9 : movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq 2 4 (% rbp ), % rdx cmpq $ 1 , % rdx jg . L 1 1 movq % rdx , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 1 : movq 4 0 (% rbp ), % rsi movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rsi , % rdx movq (% rdx ), % rsi movq 1 6 (% rbp ), % rdx addq $ 8 , % rdx movq (% rdx ), % rdx cmpq % rdx , % rsi jne . L 1 2 . LBB 1 9 : . LBB 2 0 : movq - 4 8 (% rbp ), % rax leaq 2 (% rax ), % rsi movq % rsi , - 2 9 6 (% rbp ) movq 3 2 (% rbp ), % rax testq % rsi , % rsi js . L 1 3 cmpq % rax , % rsi jg . L 1 3 testq % rsi , % rsi jg . L 1 4 jmp . L 3 5 . L 1 3 : movq % rax , % rsi movq - 2 9 6 (% rbp ), % rdi call runtime . goPanicSliceAcap @ PLT . L 3 5 : movq - 2 9 6 (% rbp ), % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 1 4 : movq - 4 8 (% rbp ), % rax leaq 1 (% rax ), % rdi movq 5 6 (% rbp ), % rax testq % rdi , % rdi js . L 1 6 cmpq % rax , % rdi jg . L 1 6 testq % rdi , % rdi jns . L 1 7 jmp . L 3 6 . L 1 6 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 3 6 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 7 : movq 4 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq % rdi , - 1 6 8 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 3 , % rax addq % rdx , % rax movq % rax , - 1 4 4 (% rbp ) movq - 2 9 6 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 3 6 (% rbp ) movq 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 2 8 (% rbp ) pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) call main . constructFromPrePost addq $ 4 8 , % rsp movq % rax , % r 1 2 movq 4 8 (% rbp ), % rcx movq - 4 8 (% rbp ), % rax addq $ 2 , % rax movq 3 2 (% rbp ), % rdx testq % rax , % rax js . L 1 9 cmpq % rdx , % rax jle . L 3 7 . L 1 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 3 7 : movq - 4 8 (% rbp ), % rdx addq $ 1 , % rdx leaq - 1 (% rcx ), % rdi movq 5 6 (% rbp ), % rcx testq % rdi , % rdi js . L 2 1 cmpq % rcx , % rdi jg . L 2 1 testq % rdx , % rdx jns . L 2 2 jmp . L 2 3 . L 2 1 : movq % rcx , % rsi call runtime . goPanicSliceAcap @ PLT . L 2 2 : cmpq % rdi , % rdx jle . L 3 8 . L 2 3 : movq % rdi , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 3 8 : movq 4 0 (% rbp ), % rsi movq 5 6 (% rbp ), % rcx cmpq % rcx , % rdx je . L 2 5 movq % rdx , % rcx salq $ 3 , % rcx jmp . L 2 6 . L 2 5 : movl $ 0 , % ecx . L 2 6 : addq % rsi , % rcx movq % rcx , - 1 1 2 (% rbp ) subq % rdx , % rdi movq % rdi , % rcx movq % rcx , - 1 0 4 (% rbp ) movq 5 6 (% rbp ), % rcx subq % rdx , % rcx movq % rcx , - 9 6 (% rbp ) movq 1 6 (% rbp ), % rcx movq 3 2 (% rbp ), % rdx cmpq % rdx , % rax je . L 2 7 movq % rax , % rdx salq $ 3 , % rdx jmp . L 2 8 . L 2 7 : movl $ 0 , % edx . L 2 8 : addq % rcx , % rdx movq % rdx , - 8 0 (% rbp ) movq 2 4 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 6 4 (% rbp ) pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) call main . constructFromPrePost addq $ 4 8 , % rsp movq % rax , % rbx movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 9 : movq 1 6 (% rbp ), % rax movq (% rax ), % r 1 3 leaq main . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq % r 1 3 , - 2 0 8 (% rbp ) movq % r 1 2 , - 2 0 0 (% rbp ) movq % rbx , - 1 9 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 0 . LBB 2 1 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 9 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 1 : jmp . L 3 1 . L 3 0 : . LBB 2 2 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq main . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 1 : . LBE 2 2 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 3 . L 1 2 : . LBE 2 0 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 2 3 : addq $ 1 , % rax . L 8 : . LBE 2 3 : cmpq % rcx , % rax jl . L 4 0 . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 2 4 : movq $ 0 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 3 : . LBE 2 4 : . LBE 2 : leaq - 2 4 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 7 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 7 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) movb $ 0 , - 1 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movb $ 0 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : . LBB 7 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax sete % al testb % al , % al je . L 4 . LBB 8 : movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax sete % al . L 4 : . LBE 8 : . LBE 7 : testb % al , % al je . L 5 . LBB 9 : . LBB 1 0 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , - 3 2 (% rbp ) sete % al movb % al , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 3 . L 5 : . LBE 1 0 : . LBE 9 : . LBE 6 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rax subq % rax , - 3 2 (% rbp ) . LBB 1 1 : . LBB 1 2 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq - 3 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call go . leetcode . hasPathSum movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 6 . LBB 1 3 : movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq - 3 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call go . leetcode . hasPathSum . L 6 : . LBE 1 3 : . LBE 1 2 : movb % al , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax . L 3 : . LBE 1 1 : . LBE 2 : leave ret
. LFB 0 : leaq - 5 8 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 5 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 3 6 , % rsp movq % rdi , - 5 3 6 (% rbp ) leaq type ... 6 4 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) leaq . LC 4 4 (% rip ), % rbx movq % rbx , - 5 7 6 (% rbp ) movq $ 8 , - 5 6 8 (% rbp ) movdqa - 5 7 6 (% rbp ), % xmm 0 movups % xmm 0 , - 4 6 4 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 9 6 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 1 , 3 2 (% rax ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq $ 5 , - 4 4 0 (% rbp ) movq $ 5 , - 4 3 2 (% rbp ) movq $ 2 , - 4 2 4 (% rbp ) movq % rbx , - 5 6 0 (% rbp ) movq $ 8 , - 5 5 2 (% rbp ) movdqa - 5 6 0 (% rbp ), % xmm 1 movups % xmm 1 , - 4 1 6 (% rbp ) leaq type ... 6 7 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 8 (% rbp ) movq - 4 8 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 1 , 3 2 (% rax ) movq $ 4 , 4 0 (% rax ) movq $ 2 , 4 8 (% rax ) movq - 4 8 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 7 , - 3 9 2 (% rbp ) movq $ 7 , - 3 8 4 (% rbp ) movq $ 6 , - 3 7 6 (% rbp ) leaq . LC 4 4 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 3 6 8 (% rbp ) movq % r 1 5 , - 3 6 0 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 0 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq $ 1 , (% rax ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 1 , - 3 4 4 (% rbp ) movq $ 1 , - 3 3 6 (% rbp ) movq $ 1 , - 3 2 8 (% rbp ) leaq . LC 4 4 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 2 0 (% rbp ) movq % r 1 3 , - 3 1 2 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 7 2 (% rbp ) movq - 4 7 2 (% rbp ), % rax movq $ 1 0 , (% rax ) movq $ 1 0 , 8 (% rax ) movq - 4 7 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 2 , - 2 9 6 (% rbp ) movq $ 2 , - 2 8 8 (% rbp ) movq $ 2 , - 2 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 5 0 4 (% rbp ), % rax movq - 4 6 4 (% rbp ), % rcx movq - 4 5 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 1 4 4 (% rax ) movq % rbx , 1 5 2 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 1 6 0 (% rax ) movq % rbx , 1 6 8 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 1 7 6 (% rax ) movq % rbx , 1 8 4 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 5 0 4 (% rbp ), % rax leaq - 4 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 5 0 4 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 4 , - 5 2 0 (% rbp ) movq $ 4 , - 5 1 2 (% rbp ) . LBB 4 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 2 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 4 5 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 5 3 6 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 5 3 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 : pushq % rbp movq % rsp , % rbp movq % rdi , - 2 4 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 3 : . LBE 6 : . LBE 2 : popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 4 movl $ 1 8 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 6 0 , % rsp movq % rdi , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 2 cmpq % rdx , % rax jge . L 2 movq - 3 2 (% rbp ), % rdx subq $ 1 , % rdx movq 2 4 (% rbp ), % rcx testq % rdx , % rdx jns . L 3 jmp . L 4 . L 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 : cmpq % rcx , % rdx jl . L 2 7 . L 4 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq 1 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax addq $ 1 , % rdx movq % rdx , (% rax ) . LBB 3 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 2 4 (% rbp ) . LBB 4 : jmp . L 6 . L 3 3 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 7 cmpq % rax , - 2 4 (% rbp ) jl . L 2 8 . L 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq $ 9 , % rax jle . L 3 2 . LBE 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 1 cmpq % rax , - 2 4 (% rbp ) jge . L 1 1 movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) jns . L 1 2 jmp . L 1 3 . L 1 1 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : cmpq % rax , - 2 4 (% rbp ) jl . L 2 9 . L 1 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax subq $ 1 0 , % rdx movq % rdx , (% rax ) movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 5 cmpq % rdx , % rax jge . L 1 5 movq - 2 4 (% rbp ), % rdx subq $ 1 , % rdx movq 2 4 (% rbp ), % rcx testq % rdx , % rdx jns . L 1 6 jmp . L 1 7 . L 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : cmpq % rcx , % rdx jl . L 3 0 . L 1 7 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq 1 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax addq $ 1 , % rdx movq % rdx , (% rax ) . LBE 6 : . LBB 1 0 : subq $ 1 , - 2 4 (% rbp ) . L 6 : . LBE 1 0 : cmpq $ 0 , - 2 4 (% rbp ) jg . L 3 3 jmp . L 1 0 . L 3 2 : . LBB 1 1 : . LBB 9 : . LBB 8 : nop . L 1 0 : . LBE 8 : . LBE 9 : . LBE 1 1 : . LBE 4 : . LBE 3 : . LBB 1 2 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 0 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 0 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax cmpq $ 9 , % rax jle . L 2 1 . LBB 1 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 2 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 3 : movq 1 6 (% rbp ), % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rax subq $ 1 0 , % rdx movq % rdx , (% rax ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq $ 1 , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rbx movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % r 1 2 leaq (% rbx ,% r 1 2 ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 4 movq - 1 2 8 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) jmp . L 2 5 . L 2 4 : movq - 1 2 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rdx movq % rcx , - 1 2 8 (% rbp ) movq % rax , - 1 2 0 (% rbp ) movq % rdx , - 1 1 2 (% rbp ) . L 2 5 : movq % r 1 2 , % rax leaq 0 (,% rax , 8 ), % rdx movq - 9 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rcx movq % rbx , % rsi salq $ 3 , % rsi addq % rsi , % rcx movq % rax , % rsi movq % rcx , % rdi call memmove @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , 1 6 (% rbp ) movq % rdx , 2 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , 3 2 (% rbp ) . L 2 1 : . LBE 1 3 : . LBE 1 2 : . LBB 1 4 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 4 : . LBE 2 : movq - 1 6 8 (% rbp ), % rax addq $ 1 6 0 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 0 3 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 9 : ret . L 1 0 3 : pushq % rbp movq % rsp , % rbp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 1 4 0 : . LBB 1 4 1 : cmpq $ 0 , - 4 0 (% rbp ) jne . L 9 8 . LBB 1 4 2 : . LBB 1 4 3 : movq $ 0 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 9 9 . L 9 8 : . LBE 1 4 3 : . LBE 1 4 2 : . LBE 1 4 1 : movq $ 0 , - 8 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 1 4 4 : movq - 4 0 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax je . L 1 0 0 . LBB 1 4 5 : movq - 4 0 (% rbp ), % rax movq 1 6 (% rax ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) . L 1 0 0 : . LBE 1 4 5 : . LBE 1 4 4 : . LBB 1 4 6 : movq - 4 0 (% rbp ), % rax movq 2 4 (% rax ), % rax testq % rax , % rax je . L 1 0 1 . LBB 1 4 7 : movq - 4 0 (% rbp ), % rax movq 2 4 (% rax ), % rax movq 8 (% rax ), % rax movq % rax , - 1 6 (% rbp ) . L 1 0 1 : . LBE 1 4 7 : . LBE 1 4 6 : movq - 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . LBB 1 4 8 : movq - 1 6 (% rbp ), % rax cmpq - 8 (% rbp ), % rax jle . L 1 0 2 . LBB 1 4 9 : movq - 1 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . L 1 0 2 : . LBE 1 4 9 : . LBE 1 4 8 : . LBB 1 5 0 : movq - 2 4 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 9 9 : . LBE 1 5 0 : . LBE 1 4 0 : popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , % rdi call go . Solution . sumNums movq - 2 4 (% rbp ), % rdx addq % rdx , % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 3 : . LBE 6 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 , % rsp . L 2 : . LBB 2 : . LBB 3 : . LBB 4 : call runtime . printlock @ PLT leaq . LC 0 (% rip ), % r 1 2 movl $ 1 2 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . printstring @ PLT call runtime . printnl @ PLT call runtime . printunlock @ PLT movl $ 1 0 0 0 0 0 0 0 0 0 , % edi call time . Sleep @ PLT . LBE 4 : jmp . L 2 . LBE 3 : . LBE 2 :
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 1 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 1 : pushq % rbp movq % rsp , % rbp subq $ 1 6 0 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) . LBB 2 : leaq - 8 0 (% rbp ), % rax movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdx movl $ 6 4 , % r 8 d movl $ 1 0 , % ecx movq % rax , % rdi call strconv . ParseUint @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 1 0 4 (% rbp ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 4 0 (% rbp ), % rax testq % rax , % rax js . L 2 pxor % xmm 3 , % xmm 3 cvtsi 2 sdq % rax , % xmm 3 movq % xmm 3 , % rax jmp . L 3 . L 2 : movq % rax , % rdx shrq % rdx andl $ 1 , % eax orq % rax , % rdx pxor % xmm 0 , % xmm 0 cvtsi 2 sdq % rdx , % xmm 0 addsd % xmm 0 , % xmm 0 movq % xmm 0 , % rax . L 3 : movq % rax , % xmm 0 call math . Log 2 @ PLT cvttsd 2 siq % xmm 0 , % rax movq % rax , - 4 8 (% rbp ) . LBB 3 : movq - 4 8 (% rbp ), % rax movq % rax , - 8 (% rbp ) . LBB 4 : jmp . L 4 . L 2 0 : . LBB 5 : nop . LBE 5 : . LBB 6 : pxor % xmm 1 , % xmm 1 cvtsi 2 sdq - 8 (% rbp ), % xmm 1 movsd . LC 0 (% rip ), % xmm 0 movapd % xmm 0 , % xmm 2 divsd % xmm 1 , % xmm 2 movq - 4 0 (% rbp ), % rax testq % rax , % rax js . L 5 pxor % xmm 4 , % xmm 4 cvtsi 2 sdq % rax , % xmm 4 movq % xmm 4 , % rax jmp . L 6 . L 5 : movq % rax , % rdx shrq % rdx andl $ 1 , % eax orq % rax , % rdx pxor % xmm 0 , % xmm 0 cvtsi 2 sdq % rdx , % xmm 0 addsd % xmm 0 , % xmm 0 movq % xmm 0 , % rax . L 6 : movapd % xmm 2 , % xmm 1 movq % rax , % xmm 0 call math . Pow @ PLT comisd . LC 1 (% rip ), % xmm 0 jnb . L 7 cvttsd 2 siq % xmm 0 , % rax movq % rax , - 5 6 (% rbp ) jmp . L 8 . L 7 : movsd . LC 1 (% rip ), % xmm 1 subsd % xmm 1 , % xmm 0 cvttsd 2 siq % xmm 0 , % rax movq % rax , - 5 6 (% rbp ) movabsq $- 9 2 2 3 3 7 2 0 3 6 8 5 4 7 7 5 8 0 8 , % rax xorq % rax , - 5 6 (% rbp ) . L 8 : movq - 5 6 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq $ 1 , - 1 6 (% rbp ) movq $ 1 , - 2 4 (% rbp ) . LBB 7 : movq $ 1 , - 3 2 (% rbp ) . LBB 8 : jmp . L 9 . L 1 9 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : movq - 2 4 (% rbp ), % rax imulq - 5 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax addq % rax , - 1 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : addq $ 1 , - 3 2 (% rbp ) . L 9 : . LBE 1 1 : movq - 3 2 (% rbp ), % rax cmpq - 8 (% rbp ), % rax jle . L 1 9 . LBE 8 : . LBE 7 : . LBB 1 2 : movq - 1 6 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jne . L 1 2 . LBB 1 3 : . LBB 1 4 : movq - 5 6 (% rbp ), % rax movl $ 1 0 , % esi movq % rax , % rdi call strconv . FormatUint @ PLT movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx jmp . L 1 6 . L 1 2 : . LBE 1 4 : . LBE 1 3 : . LBE 1 2 : . LBE 6 : . LBB 1 5 : subq $ 1 , - 8 (% rbp ) . L 4 : . LBE 1 5 : cmpq $ 0 , - 8 (% rbp ) jg . L 2 0 . LBE 4 : . LBE 3 : . LBB 1 6 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movl $ 1 0 , % esi movq % rax , % rdi call strconv . FormatUint @ PLT movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx . L 1 6 : . LBE 1 6 : . LBE 2 : leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 2 5 3 movl $ 2 3 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 9 : ret . L 2 5 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 0 0 , % rsp movq $ 0 , - 5 6 (% rbp ) . LBB 2 8 6 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 3 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 3 9 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 4 0 (% rbp ) movq $ 0 , - 4 8 (% rbp ) call runtime . makemap_small @ PLT movq % rax , - 6 4 (% rbp ) . LBB 2 8 7 : movq $ 0 , - 7 2 (% rbp ) . LBB 2 8 8 : . LBB 2 8 9 : . LBB 2 9 0 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 2 9 0 : jmp . L 2 4 0 . L 2 5 1 : . LBB 2 9 1 : nop . LBE 2 9 1 : . LBB 2 9 2 : . LBB 2 9 3 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 2 4 1 cmpq % rax , % rbx jge . L 2 4 1 movq - 2 2 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 2 9 3 : . LBB 2 9 4 : movq % rax , - 7 2 (% rbp ) . LBE 2 9 4 : . LBB 2 9 5 : . LBB 2 9 6 : movq - 7 2 (% rbp ), % rax movq % rax , - 2 0 0 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) leaq - 9 6 (% rbp ), % rax movq (% rax ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 3 leaq - 2 0 0 (% rbp ), % rax movq (% rax ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . LBE 2 9 6 : . LBE 2 9 5 : . LBE 2 9 2 : . LBB 2 9 8 : addq $ 1 , % rbx jmp . L 2 4 0 . L 2 4 1 : . LBE 2 9 8 : . LBB 2 9 9 : . LBB 2 9 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 0 : . LBE 2 9 7 : . LBE 2 9 9 : cmpq % r 1 2 , % rbx jl . L 2 5 1 . LBE 2 8 9 : . LBE 2 8 8 : . LBE 2 8 7 : . LBB 3 0 0 : movq $ 0 , - 8 0 (% rbp ) movq $ 0 , - 8 8 (% rbp ) . LBB 3 0 1 : . LBB 3 0 2 : . LBB 3 0 3 : leaq - 1 9 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 3 0 3 : jmp . L 2 4 4 . L 2 5 2 : . LBB 3 0 4 : nop . LBE 3 0 4 : . LBB 3 0 5 : . LBB 3 0 6 : movq - 1 9 2 (% rbp ), % rax movq (% rax ), % rdx movq - 1 8 4 (% rbp ), % rax movq (% rax ), % rax . LBE 3 0 6 : . LBB 3 0 7 : movq % rdx , - 8 0 (% rbp ) movq % rax , - 8 8 (% rbp ) . LBE 3 0 7 : . LBB 3 0 8 : . LBB 3 0 9 : movq - 8 8 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jle . L 2 4 5 . LBB 3 1 0 : movq - 8 0 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 8 8 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . L 2 4 5 : . LBE 3 1 0 : . LBE 3 0 9 : . LBE 3 0 8 : . LBE 3 0 5 : . LBB 3 1 1 : leaq - 1 9 2 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 2 4 4 : . LBE 3 1 1 : movq - 1 9 2 (% rbp ), % rax testq % rax , % rax jne . L 2 5 2 . LBE 3 0 2 : . LBE 3 0 1 : . LBE 3 0 0 : . LBB 3 1 2 : movq - 4 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax . LBE 3 1 2 : . LBE 2 8 6 : addq $ 2 0 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 5 2 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 4 movl $ 5 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 7 2 , % rsp movq % rdi , - 3 2 8 (% rbp ) call go . list . New movq % rax , - 5 6 (% rbp ) leaq int .. d (% rip ), % r 1 2 leaq go .. C 6 (% rip ), % r 1 3 movq - 5 6 (% rbp ), % rsi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rsi , % rdx movq % rcx , % rdi movq % rax , % rsi call go . list . Insert movq % rax , - 5 6 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq go .. C 7 (% rip ), % r 1 5 movq - 5 6 (% rbp ), % rsi movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax movq % rsi , % rdx movq % rcx , % rdi movq % rax , % rsi call go . list . Insert movq % rax , - 5 6 (% rbp ) leaq int .. d (% rip ), % r 1 5 movq % r 1 5 , - 4 4 8 (% rbp ) leaq go .. C 8 (% rip ), % rax movq % rax , - 4 4 0 (% rbp ) movq - 5 6 (% rbp ), % rsi movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rsi , % rdx movq % rcx , % rdi movq % rax , % rsi call go . list . Insert movq % rax , - 5 6 (% rbp ) movq % r 1 5 , - 4 3 2 (% rbp ) leaq go .. C 9 (% rip ), % rax movq % rax , - 4 2 4 (% rbp ) movq - 5 6 (% rbp ), % rsi movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rsi , % rdx movq % rcx , % rdi movq % rax , % rsi call go . list . Insert movq % rax , - 5 6 (% rbp ) movq % r 1 5 , - 4 1 6 (% rbp ) leaq go .. C 1 0 (% rip ), % rax movq % rax , - 4 0 8 (% rbp ) movq - 5 6 (% rbp ), % rsi movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rsi , % rdx movq % rcx , % rdi movq % rax , % rsi call go . list . Insert movq % rax , - 5 6 (% rbp ) movq % r 1 5 , - 4 0 0 (% rbp ) leaq go .. C 1 1 (% rip ), % rax movq % rax , - 3 9 2 (% rbp ) movq - 5 6 (% rbp ), % rsi movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rsi , % rdx movq % rcx , % rdi movq % rax , % rsi call go . list . Insert movq % rax , - 5 6 (% rbp ) movq % r 1 5 , - 3 8 4 (% rbp ) leaq go .. C 1 2 (% rip ), % rax movq % rax , - 3 7 6 (% rbp ) movq - 5 6 (% rbp ), % rsi movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rsi , % rdx movq % rcx , % rdi movq % rax , % rsi call go . list . Has movb % al , - 5 7 (% rbp ) . LBB 2 : movzbl - 5 7 (% rbp ), % eax xorl $ 1 , % eax testb % al , % al je . L 2 . LBB 3 : leaq string .. d (% rip ), % rax movq % rax , - 5 1 2 (% rbp ) leaq go .. C 1 8 (% rip ), % rax movq % rax , - 5 0 4 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movdqa - 5 1 2 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 . LBB 4 : movq - 3 1 2 (% rbp ), % rcx movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 : jmp . L 4 . L 3 : . LBB 5 : movq - 3 1 2 (% rbp ), % rax leaq - 3 0 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 : . LBE 5 : movq - 3 1 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq $ 1 , - 1 8 4 (% rbp ) movq $ 1 , - 1 7 6 (% rbp ) movq - 3 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 7 6 (% rbp ) pushq - 1 8 4 (% rbp ) pushq - 1 9 2 (% rbp ) movq % rax , % rdi call testing . T . Error .. stub @ PLT addq $ 3 2 , % rsp . L 2 : . LBE 3 : . LBE 2 : . LBB 6 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call go . list . Length cmpq $ 6 , % rax je . L 5 . LBB 7 : leaq string .. d (% rip ), % rax movq % rax , - 4 9 6 (% rbp ) leaq go .. C 2 3 (% rip ), % rax movq % rax , - 4 8 8 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movdqa - 4 9 6 (% rbp ), % xmm 1 movups % xmm 1 , - 2 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 8 : movq - 2 8 0 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 8 : jmp . L 7 . L 6 : . LBB 9 : movq - 2 8 0 (% rbp ), % rax leaq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 9 : movq - 2 8 0 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 1 , - 1 5 2 (% rbp ) movq $ 1 , - 1 4 4 (% rbp ) movq - 3 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rax , % rdi call testing . T . Error .. stub @ PLT addq $ 3 2 , % rsp . L 5 : . LBE 7 : . LBE 6 : leaq int .. d (% rip ), % r 1 4 movq % r 1 4 , - 3 6 8 (% rbp ) leaq go .. C 2 4 (% rip ), % rax movq % rax , - 3 6 0 (% rbp ) movq - 5 6 (% rbp ), % rax movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rcx movq % rax , % rdx movq % rsi , % rdi movq % rcx , % rsi call go . list . Remove movq % rax , - 5 6 (% rbp ) movq % r 1 4 , - 3 5 2 (% rbp ) leaq go .. C 2 5 (% rip ), % rax movq % rax , - 3 4 4 (% rbp ) movq - 5 6 (% rbp ), % rax movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rcx movq % rax , % rdx movq % rsi , % rdi movq % rcx , % rsi call go . list . Has movb % al , - 5 7 (% rbp ) . LBB 1 0 : cmpb $ 0 , - 5 7 (% rbp ) je . L 8 . LBB 1 1 : leaq string .. d (% rip ), % rax movq % rax , - 4 8 0 (% rbp ) leaq go .. C 2 6 (% rip ), % rax movq % rax , - 4 7 2 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movdqa - 4 8 0 (% rbp ), % xmm 2 movups % xmm 2 , - 2 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 2 : movq - 2 4 8 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 2 : jmp . L 1 0 . L 9 : . LBB 1 3 : movq - 2 4 8 (% rbp ), % rax leaq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 3 : movq - 2 4 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) movq - 3 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rax , % rdi call testing . T . Error .. stub @ PLT addq $ 3 2 , % rsp . L 8 : . LBE 1 1 : . LBE 1 0 : . LBB 1 4 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call go . list . Length cmpq $ 5 , % rax je . L 1 . LBB 1 5 : leaq string .. d (% rip ), % rax movq % rax , - 4 6 4 (% rbp ) leaq go .. C 2 7 (% rip ), % rax movq % rax , - 4 5 6 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movdqa - 4 6 4 (% rbp ), % xmm 3 movups % xmm 3 , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 2 . LBB 1 6 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 6 : jmp . L 1 3 . L 1 2 : . LBB 1 7 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 3 : . LBE 1 7 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) movq - 3 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rax , % rdi call testing . T . Error .. stub @ PLT addq $ 3 2 , % rsp . L 1 : . LBE 1 5 : . LBE 1 4 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 1 5 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 0 movl $ 1 5 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 5 2 8 , % rsp movq % rdi , - 1 2 7 2 (% rbp ) leaq . LC 6 (% rip ), % rax movl $ 1 1 , % edx movq % rax , - 1 2 3 2 (% rbp ) movq % rdx , - 1 2 2 4 (% rbp ) leaq . LC 7 (% rip ), % rcx movl $ 2 , % ebx movq % rcx , - 1 2 4 8 (% rbp ) movq % rbx , - 1 2 4 0 (% rbp ) movq - 1 2 3 2 (% rbp ), % rdx movq - 1 2 2 4 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . problem 0 5 8 . lengthOfLastWord movq % rax , % rbx leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 1 9 2 (% rbp ) movq - 1 1 9 2 (% rbp ), % rax movq % rbx , (% rax ) movq - 1 1 9 2 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 1 1 8 4 (% rbp ) movq % r 1 3 , - 1 1 7 6 (% rbp ) leaq - 1 1 8 4 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) movq $ 1 , - 6 1 6 (% rbp ) movq $ 1 , - 6 0 8 (% rbp ) leaq - 5 9 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 0 8 (% rbp ) pushq - 6 1 6 (% rbp ) pushq - 6 2 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 1 2 1 6 (% rbp ) movq % rdx , - 1 2 0 8 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 1 2 0 0 (% rbp ) movq - 1 2 4 8 (% rbp ), % rdx movq - 1 2 4 0 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . problem 0 5 8 . lengthOfLastWord movq % rax , % rbx leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 1 4 4 (% rbp ) movq - 1 1 4 4 (% rbp ), % rax movq % rbx , (% rax ) movq - 1 1 4 4 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 1 1 3 6 (% rbp ) movq % r 1 5 , - 1 1 2 8 (% rbp ) leaq - 1 1 3 6 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 1 , - 5 5 2 (% rbp ) movq $ 1 , - 5 4 4 (% rbp ) leaq - 5 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 5 4 4 (% rbp ) pushq - 5 5 2 (% rbp ) pushq - 5 6 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 1 1 6 8 (% rbp ) movq % rdx , - 1 1 6 0 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 1 1 5 2 (% rbp ) movq - 1 2 3 2 (% rbp ), % rdx movq - 1 2 2 4 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . problem 0 5 8 . lengthOfLastWord 2 movq % rax , % rbx leaq int .. d (% rip ), % r 1 4 movq % r 1 4 , - 1 5 6 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 9 6 (% rbp ) movq - 1 0 9 6 (% rbp ), % rax movq % rbx , (% rax ) movq - 1 0 9 6 (% rbp ), % rax movq % rax , - 1 5 6 0 (% rbp ) movdqa - 1 5 6 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 0 8 8 (% rbp ) leaq - 1 0 8 8 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq $ 1 , - 4 8 8 (% rbp ) movq $ 1 , - 4 8 0 (% rbp ) leaq - 4 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 4 8 0 (% rbp ) pushq - 4 8 8 (% rbp ) pushq - 4 9 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 1 1 2 0 (% rbp ) movq % rdx , - 1 1 1 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 1 1 0 4 (% rbp ) movq - 1 2 4 8 (% rbp ), % rdx movq - 1 2 4 0 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . problem 0 5 8 . lengthOfLastWord 2 movq % rax , % rbx movq % r 1 4 , - 1 5 5 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 8 (% rbp ) movq - 1 0 4 8 (% rbp ), % rax movq % rbx , (% rax ) movq - 1 0 4 8 (% rbp ), % rax movq % rax , - 1 5 4 4 (% rbp ) movdqa - 1 5 5 2 (% rbp ), % xmm 1 movups % xmm 1 , - 1 0 4 0 (% rbp ) leaq - 1 0 4 0 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq $ 1 , - 4 2 4 (% rbp ) movq $ 1 , - 4 1 6 (% rbp ) leaq - 4 0 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 4 1 6 (% rbp ) pushq - 4 2 4 (% rbp ) pushq - 4 3 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 1 0 7 2 (% rbp ) movq % rdx , - 1 0 6 4 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 1 0 5 6 (% rbp ) leaq . LC 8 (% rip ), % rax movq % rax , - 1 3 6 0 (% rbp ) movq $ 1 2 , - 1 3 5 2 (% rbp ) movdqa - 1 3 6 0 (% rbp ), % xmm 2 movups % xmm 2 , - 1 2 6 4 (% rbp ) movq - 1 2 5 6 (% rbp ), % rbx movq % r 1 4 , - 1 5 3 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 0 0 (% rbp ) movq - 1 0 0 0 (% rbp ), % rax movq % rbx , (% rax ) movq - 1 0 0 0 (% rbp ), % rax movq % rax , - 1 5 2 8 (% rbp ) movdqa - 1 5 3 6 (% rbp ), % xmm 3 movups % xmm 3 , - 9 9 2 (% rbp ) leaq - 9 9 2 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq $ 1 , - 3 6 0 (% rbp ) movq $ 1 , - 3 5 2 (% rbp ) leaq - 3 3 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 3 5 2 (% rbp ) pushq - 3 6 0 (% rbp ) pushq - 3 6 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 1 0 2 4 (% rbp ) movq % rdx , - 1 0 1 6 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 1 0 0 8 (% rbp ) movl $ 0 , % ebx movq - 1 2 5 6 (% rbp ), % rax testq % rbx , % rbx js . L 2 cmpq % rax , % rbx jl . L 1 4 . L 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : movl $ 0 , % r 1 2 d movq - 1 2 5 6 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 4 cmpq % rax , % r 1 2 jl . L 1 5 . L 4 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : movl $ 0 , % r 1 3 d movq - 1 2 5 6 (% rbp ), % rax testq % r 1 3 , % r 1 3 js . L 6 cmpq % rax , % r 1 3 jl . L 1 6 . L 6 : movq % rax , % rsi movq % r 1 3 , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : leaq uint 8 .. d (% rip ), % r 1 4 movq % r 1 4 , - 1 5 2 0 (% rbp ) leaq uint 8 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 5 2 (% rbp ) movq - 1 2 6 4 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movq - 9 5 2 (% rbp ), % rdx movzbl (% rax ), % eax movb % al , (% rdx ) movq - 9 5 2 (% rbp ), % rax movq % rax , - 1 5 1 2 (% rbp ) movq % r 1 4 , % rbx movq % rbx , - 1 5 0 4 (% rbp ) leaq uint 8 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 4 4 (% rbp ) movq - 1 2 6 4 (% rbp ), % rax movq % r 1 2 , % rdx addq % rdx , % rax movq - 9 4 4 (% rbp ), % rdx movzbl (% rax ), % eax movb % al , (% rdx ) movq - 9 4 4 (% rbp ), % rax movq % rax , - 1 4 9 6 (% rbp ) movq % rbx , - 1 4 8 8 (% rbp ) leaq uint 8 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 3 6 (% rbp ) movq - 1 2 6 4 (% rbp ), % rax movq % r 1 3 , % rdx addq % rdx , % rax movq - 9 3 6 (% rbp ), % rdx movzbl (% rax ), % eax movb % al , (% rdx ) movq - 9 3 6 (% rbp ), % rax movq % rax , - 1 4 8 0 (% rbp ) movdqa - 1 5 2 0 (% rbp ), % xmm 4 movups % xmm 4 , - 9 2 8 (% rbp ) movdqa - 1 5 0 4 (% rbp ), % xmm 5 movups % xmm 5 , - 9 1 2 (% rbp ) movdqa - 1 4 8 8 (% rbp ), % xmm 6 movups % xmm 6 , - 8 9 6 (% rbp ) leaq - 9 2 8 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 3 , - 2 9 6 (% rbp ) movq $ 3 , - 2 8 8 (% rbp ) leaq . LC 9 (% rip ), % rax movq % rax , - 1 3 4 4 (% rbp ) movq $ 9 , - 1 3 3 6 (% rbp ) leaq - 2 7 2 (% rbp ), % rdi movq - 1 3 4 4 (% rbp ), % rax movq - 1 3 3 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 2 8 8 (% rbp ) pushq - 2 9 6 (% rbp ) pushq - 3 0 4 (% rbp ) movq % rcx , % rsi movq % rax , % rdx call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 9 7 6 (% rbp ) movq % rdx , - 9 6 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 9 6 0 (% rbp ) movl $ 6 , % ebx movq - 1 2 5 6 (% rbp ), % rax testq % rbx , % rbx js . L 8 cmpq % rax , % rbx jl . L 1 7 . L 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : movl $ 6 , % r 1 2 d movq - 1 2 5 6 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 1 0 cmpq % rax , % r 1 2 jl . L 1 8 . L 1 0 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : movl $ 6 , % r 1 3 d movq - 1 2 5 6 (% rbp ), % rax testq % r 1 3 , % r 1 3 js . L 1 2 cmpq % rax , % r 1 3 jl . L 1 9 . L 1 2 : movq % rax , % rsi movq % r 1 3 , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : leaq uint 8 .. d (% rip ), % r 1 5 movq % r 1 5 , - 1 4 7 2 (% rbp ) leaq uint 8 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 5 6 (% rbp ) movq - 1 2 6 4 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movq - 8 5 6 (% rbp ), % rdx movzbl (% rax ), % eax movb % al , (% rdx ) movq - 8 5 6 (% rbp ), % rax movq % rax , - 1 4 6 4 (% rbp ) movq % r 1 5 , % rbx movq % rbx , - 1 4 5 6 (% rbp ) leaq uint 8 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 4 8 (% rbp ) movq - 1 2 6 4 (% rbp ), % rax movq % r 1 2 , % rdx addq % rdx , % rax movq - 8 4 8 (% rbp ), % rdx movzbl (% rax ), % eax movb % al , (% rdx ) movq - 8 4 8 (% rbp ), % rax movq % rax , - 1 4 4 8 (% rbp ) movq % rbx , - 1 4 4 0 (% rbp ) leaq uint 8 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 4 0 (% rbp ) movq - 1 2 6 4 (% rbp ), % rax movq % r 1 3 , % rdx addq % rdx , % rax movq - 8 4 0 (% rbp ), % rdx movzbl (% rax ), % eax movb % al , (% rdx ) movq - 8 4 0 (% rbp ), % rax movq % rax , - 1 4 3 2 (% rbp ) movdqa - 1 4 7 2 (% rbp ), % xmm 7 movups % xmm 7 , - 8 3 2 (% rbp ) movdqa - 1 4 5 6 (% rbp ), % xmm 0 movups % xmm 0 , - 8 1 6 (% rbp ) movdqa - 1 4 4 0 (% rbp ), % xmm 1 movups % xmm 1 , - 8 0 0 (% rbp ) leaq - 8 3 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 3 , - 2 3 2 (% rbp ) movq $ 3 , - 2 2 4 (% rbp ) leaq . LC 9 (% rip ), % rax movq % rax , - 1 3 2 8 (% rbp ) movq $ 9 , - 1 3 2 0 (% rbp ) leaq - 2 0 8 (% rbp ), % rdi movq - 1 3 2 8 (% rbp ), % rax movq - 1 3 2 0 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdx call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 8 8 0 (% rbp ) movq % rdx , - 8 7 2 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 8 6 4 (% rbp ) movl $ 2 0 0 1 3 , - 5 2 (% rbp ) movl $ 1 0 3 , - 5 6 (% rbp ) leaq int 3 2 .. d (% rip ), % r 1 5 movq % r 1 5 , - 1 4 2 4 (% rbp ) leaq int 3 2 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 5 2 (% rbp ) movq - 7 5 2 (% rbp ), % rax movl - 5 2 (% rbp ), % edx movl % edx , (% rax ) movq - 7 5 2 (% rbp ), % rax movq % rax , - 1 4 1 6 (% rbp ) movq % r 1 5 , - 1 4 0 8 (% rbp ) leaq int 3 2 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 4 4 (% rbp ) movq - 7 4 4 (% rbp ), % rax movl - 5 2 (% rbp ), % edx movl % edx , (% rax ) movq - 7 4 4 (% rbp ), % rax movq % rax , - 1 4 0 0 (% rbp ) movdqa - 1 4 2 4 (% rbp ), % xmm 2 movups % xmm 2 , - 7 3 6 (% rbp ) movdqa - 1 4 0 8 (% rbp ), % xmm 3 movups % xmm 3 , - 7 2 0 (% rbp ) leaq - 7 3 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 1 0 (% rip ), % rax movq % rax , - 1 3 1 2 (% rbp ) movq $ 6 , - 1 3 0 4 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq - 1 3 1 2 (% rbp ), % rcx movq - 1 3 0 4 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 7 8 4 (% rbp ) movq % rdx , - 7 7 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 7 6 8 (% rbp ) movq % r 1 5 , - 1 3 9 2 (% rbp ) leaq int 3 2 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 7 2 (% rbp ) movq - 6 7 2 (% rbp ), % rax movl - 5 6 (% rbp ), % edx movl % edx , (% rax ) movq - 6 7 2 (% rbp ), % rax movq % rax , - 1 3 8 4 (% rbp ) movq % r 1 5 , - 1 3 7 6 (% rbp ) leaq int 3 2 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 6 4 (% rbp ) movq - 6 6 4 (% rbp ), % rax movl - 5 6 (% rbp ), % edx movl % edx , (% rax ) movq - 6 6 4 (% rbp ), % rax movq % rax , - 1 3 6 8 (% rbp ) movdqa - 1 3 9 2 (% rbp ), % xmm 4 movups % xmm 4 , - 6 5 6 (% rbp ) movdqa - 1 3 7 6 (% rbp ), % xmm 5 movups % xmm 5 , - 6 4 0 (% rbp ) leaq - 6 5 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 2 , - 1 0 4 (% rbp ) movq $ 2 , - 9 6 (% rbp ) leaq . LC 1 1 (% rip ), % rax movq % rax , - 1 2 9 6 (% rbp ) movq $ 6 , - 1 2 8 8 (% rbp ) leaq - 8 0 (% rbp ), % rax movq - 1 2 9 6 (% rbp ), % rcx movq - 1 2 8 8 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 7 0 4 (% rbp ) movq % rdx , - 6 9 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 6 8 8 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 7 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 7 2 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 8 0 , % rsp movq % rdi , - 6 3 2 (% rbp ) leaq . LC 1 4 (% rip ), % rax movl $ 1 , % edx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) leaq . LC 1 5 (% rip ), % rcx movl $ 1 , % ebx movq % rcx , - 5 6 0 (% rbp ) movq % rbx , - 5 5 2 (% rbp ) movb $ 0 , - 5 4 4 (% rbp ) leaq . LC 1 6 (% rip ), % r 8 movl $ 2 , % r 9 d movq % r 8 , - 5 3 6 (% rbp ) movq % r 9 , - 5 2 8 (% rbp ) leaq . LC 1 7 (% rip ), % r 1 4 movl $ 2 , % r 1 5 d movq % r 1 4 , - 5 2 0 (% rbp ) movq % r 1 5 , - 5 1 2 (% rbp ) movb $ 0 , - 5 0 4 (% rbp ) leaq . LC 1 6 (% rip ), % r 1 2 movl $ 2 , % r 1 3 d movq % r 1 2 , - 4 9 6 (% rbp ) movq % r 1 3 , - 4 8 8 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 0 movl $ 3 , % r 1 1 d movq % r 1 0 , - 4 8 0 (% rbp ) movq % r 1 1 , - 4 7 2 (% rbp ) movb $ 1 , - 4 6 4 (% rbp ) . LBB 2 : movq $ 0 , - 6 2 4 (% rbp ) movq $ 0 , - 6 1 6 (% rbp ) movq $ 0 , - 6 0 8 (% rbp ) movq $ 0 , - 6 0 0 (% rbp ) movq $ 0 , - 5 9 2 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movl $ 3 , % r 1 3 d movl $ 0 , % r 1 2 d . LBE 5 : jmp . L 2 . L 1 5 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : testq % r 1 2 , % r 1 2 js . L 3 cmpq $ 2 , % r 1 2 jg . L 3 movq % r 1 2 , % rax salq $ 2 , % rax addq % r 1 2 , % rax salq $ 3 , % rax leaq - 4 8 (% rbp ), % rbx addq % rbx , % rax leaq - 3 5 2 (% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq 3 2 (% rcx ), % rax movq % rax , - 4 1 6 (% rbp ) . LBE 8 : . LBB 9 : movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 6 0 8 (% rbp ) movq % rdx , - 6 0 0 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq - 6 2 4 (% rbp ), % rdi movq - 6 1 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call go . problem 3 8 3 . canConstruct movb % al , - 4 9 (% rbp ) . LBB 1 1 : movzbl - 5 9 2 (% rbp ), % eax cmpb % al , - 4 9 (% rbp ) jne . L 4 jmp . L 5 . L 3 : . LBE 1 1 : . LBE 1 0 : . LBB 2 0 : movl $ 3 , % esi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 2 0 : . LBB 2 1 : . LBB 1 9 : . LBB 1 2 : leaq string .. d (% rip ), % rax movq % rax , - 7 2 0 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 1 3 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 3 : jmp . L 7 . L 6 : . LBB 1 4 : movq - 2 3 2 (% rbp ), % rax leaq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 1 4 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 7 1 2 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 7 0 4 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 . LBB 1 5 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 5 : jmp . L 9 . L 8 : . LBB 1 6 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 : . LBE 1 6 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 6 9 6 (% rbp ) leaq bool .. d (% rip ), % rbx movq % rbx , - 6 8 8 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movzbl - 4 9 (% rbp ), % edx movb % dl , (% rax ) movq - 1 6 8 (% rbp ), % rax movq % rax , - 6 8 0 (% rbp ) movq % rbx , - 6 7 2 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movzbl - 5 9 2 (% rbp ), % edx movb % dl , (% rax ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 6 6 4 (% rbp ) leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movdqa - 7 2 0 (% rbp ), % xmm 0 movups % xmm 0 , - 1 4 4 (% rbp ) movdqa - 7 0 4 (% rbp ), % xmm 1 movups % xmm 1 , - 1 2 8 (% rbp ) movdqa - 6 8 8 (% rbp ), % xmm 2 movups % xmm 2 , - 1 1 2 (% rbp ) movdqa - 6 7 2 (% rbp ), % xmm 3 movups % xmm 3 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 . LBB 1 7 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) . LBE 1 7 : jmp . L 1 1 . L 1 0 : . LBB 1 8 : movq - 1 5 2 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 1 : . LBE 1 8 : movq - 1 5 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 4 , - 7 2 (% rbp ) movq $ 4 , - 6 4 (% rbp ) leaq . LC 1 9 (% rip ), % rax movq % rax , - 6 5 6 (% rbp ) movq $ 2 8 , - 6 4 8 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 6 3 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 5 : . LBE 1 2 : . LBE 1 9 : . LBE 2 1 : . LBE 7 : . LBB 2 2 : addq $ 1 , % r 1 2 . L 2 : . LBE 2 2 : cmpq % r 1 3 , % r 1 2 jl . L 1 5 . LBE 4 : . LBE 3 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 9 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 8 movl $ 3 9 2 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 6 0 , % rsp movq % rdi , - 3 7 6 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) . LBB 2 : movq $ 0 , - 4 0 (% rbp ) leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq - 2 8 0 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq $ 0 , - 3 2 8 (% rbp ) movq $ 0 , - 3 2 0 (% rbp ) . LBB 3 : movq $ 0 , - 4 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rcx movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 4 6 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 6 4 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 9 : . LBB 1 0 : movq % rdx , - 4 8 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 4 8 (% rbp ), % rdx andl $ 1 , % edx testq % rdx , % rdx je . L 4 jmp . L 5 . L 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 5 : . LBB 1 6 : . LBB 1 4 : . LBB 1 3 : movq - 4 8 (% rbp ), % rdx addq % rdx , - 4 0 (% rbp ) . L 5 : . LBE 1 3 : . LBE 1 4 : . LBE 1 6 : . LBE 8 : . LBB 1 7 : addq $ 1 , % rax . L 2 : . LBE 1 7 : cmpq % rcx , % rax jl . L 4 6 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 8 : movq $ 0 , - 3 6 8 (% rbp ) movq $ 0 , - 3 6 0 (% rbp ) movq $ 0 , - 3 5 2 (% rbp ) . LBB 1 9 : . LBB 2 0 : . LBB 2 1 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 2 1 : jmp . L 8 . L 4 7 : . LBB 2 2 : nop . LBE 2 2 : . LBB 2 3 : . LBB 2 4 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 9 cmpq % rax , % rbx jge . L 9 movq - 2 0 8 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) . LBE 2 4 : . LBB 2 5 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) . LBE 2 5 : . LBB 2 6 : . LBB 2 7 : movq - 3 6 0 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 0 jmp . L 3 8 . L 9 : . LBE 2 7 : . LBE 2 6 : . LBB 3 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : . LBE 3 5 : . LBB 3 6 : . LBB 2 9 : movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 0 : movq - 3 6 8 (% rbp ), % rax movq 8 (% rax ), % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 2 cmpq % rdx , % rax jl . L 3 9 . L 1 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax andl $ 1 , % eax testq % rax , % rax jne . L 1 4 . LBB 2 8 : movq - 3 6 0 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 5 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 5 : movq - 3 6 8 (% rbp ), % rax movq 8 (% rax ), % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 6 cmpq % rdx , % rax jl . L 4 0 . L 1 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax subq % rax , - 4 0 (% rbp ) . L 1 4 : . LBE 2 8 : . LBE 2 9 : . LBB 3 0 : movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 8 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 8 : movq - 1 4 4 (% rbp ), % rax movq 8 (% rax ), % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 9 cmpq % rdx , % rax jl . L 4 1 . L 1 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq - 1 3 6 (% rbp ), % rdx cmpq $ 1 , % rdx jg . L 2 1 movq % rdx , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 1 : movq - 1 4 4 (% rbp ), % rdx movq 8 (% rdx ), % rdx movq 2 4 (% rbp ), % rcx testq % rdx , % rdx js . L 2 2 cmpq % rcx , % rdx jl . L 4 2 . L 2 2 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq - 3 6 0 (% rbp ), % rcx testq % rcx , % rcx jg . L 2 4 movq % rcx , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 4 : movq 1 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 3 6 8 (% rbp ), % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rsi salq $ 3 , % rax addq % rsi , % rax addq % rcx , % rdx movq % rdx , (% rax ) . LBE 3 0 : . LBB 3 1 : movq - 3 6 0 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 5 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 5 : movq - 3 6 8 (% rbp ), % rax movq 8 (% rax ), % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 2 6 cmpq % rdx , % rax jl . L 4 3 . L 2 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax andl $ 1 , % eax testq % rax , % rax jne . L 2 8 . LBB 3 2 : movq - 3 6 0 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 9 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 3 6 8 (% rbp ), % rax movq 8 (% rax ), % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 3 0 cmpq % rdx , % rax jl . L 4 4 . L 3 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq % rax , - 4 0 (% rbp ) . L 2 8 : . LBE 3 2 : . LBE 3 1 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 3 2 . LBB 3 3 : movq - 1 1 2 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) . LBE 3 3 : jmp . L 3 3 . L 3 2 : . LBB 3 4 : movq - 1 1 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rcx , - 3 3 6 (% rbp ) movq % rax , - 3 2 8 (% rbp ) movq % rdx , - 3 2 0 (% rbp ) . L 3 3 : . LBE 3 4 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 4 0 (% rbp ), % rax movq % rax , (% rdx ) . LBE 3 6 : . LBE 2 3 : . LBB 3 7 : addq $ 1 , % rbx . L 8 : . LBE 3 7 : cmpq % r 1 3 , % rbx jl . L 4 7 . LBE 2 0 : . LBE 1 9 : . LBE 1 8 : . LBB 3 8 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 3 7 6 (% rbp ), % rcx movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 8 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 8 : . LBE 2 : movq - 3 7 6 (% rbp ), % rax addq $ 3 6 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 1 6 0 0 8 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 4 movl $ 1 6 0 0 8 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 4 : pushq % rbp movq % rsp , % rbp subq $ 1 6 0 0 8 0 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : leaq - 1 6 0 0 8 0 (% rbp ), % rax movl $ 1 6 0 0 0 8 , % edx movl $ 0 , % esi movq % rax , % rdi call memset @ PLT . LBB 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 3 1 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 2 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jl . L 2 5 . L 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq - 6 4 (% rbp ), % rdx movq % rax , % rcx salq $ 3 , % rcx addq % rcx , % rdx movq (% rdx ), % rdx addq $ 1 0 0 0 0 , % rdx testq % rdx , % rdx js . L 5 cmpq $ 2 0 0 0 0 , % rdx jle . L 2 6 . L 5 : movl $ 2 0 0 0 1 , % esi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq - 5 6 (% rbp ), % rcx testq % rax , % rax js . L 7 cmpq % rcx , % rax jl . L 2 7 . L 7 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq - 6 4 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax addq $ 1 0 0 0 0 , % rax testq % rax , % rax js . L 9 cmpq $ 2 0 0 0 0 , % rax jg . L 9 movq - 1 6 0 0 8 0 (% rbp ,% rax , 8 ), % rax addq $ 1 , % rax movq % rax , - 1 6 0 0 8 0 (% rbp ,% rdx , 8 ) . LBE 7 : . LBE 6 : . LBB 9 : addq $ 1 , - 2 4 (% rbp ) jmp . L 2 . L 9 : . LBE 9 : . LBB 1 0 : . LBB 8 : movl $ 2 0 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 8 : . LBE 1 0 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 3 1 . LBE 4 : . LBE 3 : movb $ 1 , - 1 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 1 1 : movq $ 0 , - 3 2 (% rbp ) . LBB 1 2 : jmp . L 1 2 . L 3 3 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : . LBB 1 5 : . LBB 1 6 : jmp . L 1 3 . L 3 2 : . LBB 1 7 : nop . LBE 1 7 : . LBB 1 8 : . LBB 1 9 : cmpb $ 0 , - 1 (% rbp ) je . L 1 4 . LBB 2 0 : movq - 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax addq % rdx , % rax subq $ 1 0 0 0 0 , % rax movq % rax , - 1 6 (% rbp ) . L 1 4 : . LBE 2 0 : . LBE 1 9 : xorb $ 1 , - 1 (% rbp ) cmpq $ 0 , - 3 2 (% rbp ) js . L 1 5 cmpq $ 2 0 0 0 0 , - 3 2 (% rbp ) jg . L 1 5 cmpq $ 0 , - 3 2 (% rbp ) jns . L 1 6 jmp . L 1 7 . L 1 5 : movq - 3 2 (% rbp ), % rax movl $ 2 0 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : cmpq $ 2 0 0 0 0 , - 3 2 (% rbp ) jg . L 1 7 movq - 3 2 (% rbp ), % rax movq - 1 6 0 0 8 0 (% rbp ,% rax , 8 ), % rax leaq - 1 (% rax ), % rdx movq - 3 2 (% rbp ), % rax movq % rdx , - 1 6 0 0 8 0 (% rbp ,% rax , 8 ) jmp . L 1 3 . L 1 7 : movq - 3 2 (% rbp ), % rax movl $ 2 0 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : . LBE 1 8 : cmpq $ 0 , - 3 2 (% rbp ) js . L 1 8 cmpq $ 2 0 0 0 0 , - 3 2 (% rbp ) jg . L 1 8 movq - 3 2 (% rbp ), % rax movq - 1 6 0 0 8 0 (% rbp ,% rax , 8 ), % rax testq % rax , % rax jg . L 3 2 jmp . L 2 9 . L 1 8 : movq - 3 2 (% rbp ), % rax movl $ 2 0 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBB 2 1 : addq $ 1 , - 3 2 (% rbp ) . L 1 2 : . LBE 2 1 : cmpq $ 2 0 0 0 0 , - 3 2 (% rbp ) jle . L 3 3 . LBE 1 2 : . LBE 1 1 : . LBB 2 2 : movq - 1 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 2 2 : . LBE 2 : leave ret
. LFB 4 1 3 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 0 7 5 6 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 5 1 2 : ret . L 1 0 7 5 6 : pushq % rbp movq % rsp , % rbp movq % rdi , - 2 4 (% rbp ) movb $ 0 , - 1 (% rbp ) . LBB 8 6 0 5 : . LBB 8 6 0 6 : cmpq $ 0 , - 2 4 (% rbp ) jg . L 1 0 7 4 8 . LBB 8 6 0 7 : . LBB 8 6 0 8 : movb $ 0 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 1 0 7 4 7 . L 1 0 7 5 5 : . LBE 8 6 0 8 : . LBE 8 6 0 7 : . LBE 8 6 0 6 : . LBB 8 6 0 9 : . LBB 8 6 1 0 : . LBB 8 6 1 1 : nop . LBE 8 6 1 1 : . LBB 8 6 1 2 : . LBB 8 6 1 3 : movq - 2 4 (% rbp ), % rax andl $ 1 , % eax testq % rax , % rax jne . L 1 0 7 4 9 . LBB 8 6 1 4 : movq - 2 4 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , - 2 4 (% rbp ) . LBE 8 6 1 4 : jmp . L 1 0 7 4 8 . L 1 0 7 4 9 : . LBB 8 6 1 5 : . LBB 8 6 1 6 : movq - 2 4 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rsi sarq $ 6 3 , % rsi movq % rdx , % rax subq % rsi , % rax movq % rax , % rdx addq % rdx , % rdx addq % rax , % rdx movq % rcx , % rax subq % rdx , % rax testq % rax , % rax jne . L 1 0 7 5 0 . LBB 8 6 1 7 : movq - 2 4 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx sarq $ 6 3 , % rcx movq % rdx , % rax subq % rcx , % rax movq % rax , - 2 4 (% rbp ) . LBE 8 6 1 7 : jmp . L 1 0 7 4 8 . L 1 0 7 5 0 : . LBB 8 6 1 8 : . LBB 8 6 1 9 : movq - 2 4 (% rbp ), % rcx movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rdx salq $ 2 , % rdx addq % rax , % rdx movq % rcx , % rax subq % rdx , % rax testq % rax , % rax jne . L 1 0 7 5 1 . LBB 8 6 2 0 : movq - 2 4 (% rbp ), % rcx movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq % rax sarq $ 6 3 , % rcx movq % rcx , % rdx subq % rdx , % rax movq % rax , - 2 4 (% rbp ) . LBE 8 6 2 0 : jmp . L 1 0 7 4 8 . L 1 0 7 5 1 : . LBB 8 6 2 1 : . LBB 8 6 2 2 : movb $ 0 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 1 0 7 4 7 . L 1 0 7 4 8 : . LBE 8 6 2 2 : . LBE 8 6 2 1 : . LBE 8 6 1 9 : . LBE 8 6 1 8 : . LBE 8 6 1 6 : . LBE 8 6 1 5 : . LBE 8 6 1 3 : . LBE 8 6 1 2 : cmpq $ 1 , - 2 4 (% rbp ) jg . L 1 0 7 5 5 . LBE 8 6 1 0 : . LBE 8 6 0 9 : . LBB 8 6 2 3 : movb $ 1 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax . L 1 0 7 4 7 : . LBE 8 6 2 3 : . LBE 8 6 0 5 : popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 5 movl $ 2 3 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 subq $ 1 9 2 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq $ 0 , - 4 8 (% rbp ) . LBB 3 : jmp . L 2 . L 2 4 : . LBB 4 : nop . LBE 4 : . LBB 5 : movq $ 0 , - 5 6 (% rbp ) . LBB 6 : movq $ 1 , - 6 4 (% rbp ) . LBB 7 : jmp . L 3 . L 2 3 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 6 4 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 7 2 (% rbp ) . LBB 1 1 : jmp . L 4 . L 2 2 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq - 7 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 8 0 (% rbp ) . LBB 1 5 : jmp . L 5 . L 2 1 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : . LBB 1 8 : . LBB 1 9 : movq - 6 4 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax addq % rax , % rdx movq - 8 0 (% rbp ), % rax addq % rdx , % rax cmpq % rax , - 4 8 (% rbp ) sete % al testb % al , % al je . L 6 . LBB 2 0 : movq - 6 4 (% rbp ), % rax imulq % rax , % rax movq % rax , % rdx movq - 7 2 (% rbp ), % rax imulq % rax , % rax addq % rax , % rdx movq - 8 0 (% rbp ), % rax imulq % rax , % rax cmpq % rax , % rdx sete % al . L 6 : . LBE 2 0 : . LBE 1 9 : testb % al , % al je . L 7 . LBB 2 1 : addq $ 1 , - 5 6 (% rbp ) . L 7 : . LBE 2 1 : . LBE 1 8 : . LBE 1 7 : . LBB 2 2 : addq $ 1 , - 8 0 (% rbp ) . L 5 : . LBE 2 2 : movq - 8 0 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 2 1 . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 2 3 : addq $ 1 , - 7 2 (% rbp ) . L 4 : . LBE 2 3 : movq - 7 2 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 2 2 . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 2 4 : addq $ 1 , - 6 4 (% rbp ) . L 3 : . LBE 2 4 : movq - 6 4 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 2 3 . LBE 7 : . LBE 6 : . LBB 2 5 : movq - 5 6 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jle . L 1 4 . LBB 2 6 : movq - 5 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 9 2 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 9 2 (% rbp ), % rax movq % rax , % r 1 5 leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq - 4 8 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 8 4 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 4 , - 1 7 6 (% rbp ) movq % r 1 5 , - 1 6 8 (% rbp ) movq % r 1 2 , - 1 6 0 (% rbp ) movq % r 1 3 , - 1 5 2 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 2 , - 1 3 6 (% rbp ) movq $ 2 , - 1 2 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) . L 1 4 : . LBE 2 6 : . LBE 2 5 : . LBE 5 : . LBB 2 7 : addq $ 1 , - 4 8 (% rbp ) . L 2 : . LBE 2 7 : cmpq $ 9 9 9 , - 4 8 (% rbp ) jle . L 2 4 . LBE 3 : . LBE 2 : leaq - 3 2 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 8 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 8 movl $ 8 3 4 4 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 3 1 2 , % rsp movq % rdi , - 8 3 2 8 (% rbp ) movq $ 0 , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) . LBB 2 : leaq - 8 3 2 0 (% rbp ), % rdx movl $ 0 , % eax movl $ 1 0 0 1 , % ecx movq % rdx , % rdi rep stosq . LBB 3 : movq $ 0 , - 4 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rcx movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 4 3 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 3 2 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 9 : . LBB 1 0 : movq % rdx , - 4 8 (% rbp ) . LBE 1 0 : . LBB 1 1 : cmpq $ 0 , - 4 8 (% rbp ) jns . L 4 jmp . L 5 . L 3 : . LBE 1 1 : . LBB 1 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 2 : . LBB 1 3 : cmpq $ 1 0 0 0 , - 4 8 (% rbp ) jg . L 5 cmpq $ 0 , - 4 8 (% rbp ) jns . L 6 jmp . L 7 . L 5 : movq - 4 8 (% rbp ), % rax movl $ 1 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 : cmpq $ 1 0 0 0 , - 4 8 (% rbp ) jg . L 7 movq - 4 8 (% rbp ), % rdx movq - 8 3 2 0 (% rbp ,% rdx , 8 ), % rdx leaq 1 (% rdx ), % rsi movq - 4 8 (% rbp ), % rdx movq % rsi , - 8 3 2 0 (% rbp ,% rdx , 8 ) . LBE 1 3 : . LBE 8 : . LBB 1 5 : addq $ 1 , % rax jmp . L 2 . L 7 : . LBE 1 5 : . LBB 1 6 : . LBB 1 4 : movq - 4 8 (% rbp ), % rax movl $ 1 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 4 : . LBE 1 6 : cmpq % rcx , % rax jl . L 4 3 . LBE 5 : . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq % rbx , - 2 8 8 (% rbp ) . LBB 1 7 : movq $ 0 , - 5 6 (% rbp ) . LBB 1 8 : . LBB 1 9 : . LBB 2 0 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 2 0 : jmp . L 1 0 . L 4 5 : . LBB 2 1 : nop . LBE 2 1 : . LBB 2 2 : . LBB 2 3 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 1 1 cmpq % rax , % rbx jge . L 1 1 movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 2 3 : . LBB 2 4 : movq % rax , - 5 6 (% rbp ) . LBE 2 4 : . LBB 2 5 : . LBB 2 6 : . LBB 2 7 : jmp . L 1 2 . L 1 1 : . LBE 2 7 : . LBE 2 6 : . LBE 2 5 : . LBB 3 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : . LBE 3 4 : . LBB 3 5 : . LBB 3 3 : . LBB 3 2 : . LBB 2 8 : nop . LBE 2 8 : . LBB 2 9 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 3 . LBB 3 0 : movq - 1 7 6 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 3 0 : jmp . L 1 4 . L 1 3 : . LBB 3 1 : movq - 1 7 6 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 1 4 : . LBE 3 1 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 5 6 (% rbp ), % rax movq % rax , (% rdx ) cmpq $ 0 , - 5 6 (% rbp ) js . L 1 5 cmpq $ 1 0 0 0 , - 5 6 (% rbp ) jg . L 1 5 cmpq $ 0 , - 5 6 (% rbp ) jns . L 1 6 jmp . L 1 7 . L 1 5 : movq - 5 6 (% rbp ), % rax movl $ 1 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : cmpq $ 1 0 0 0 , - 5 6 (% rbp ) jg . L 1 7 movq - 5 6 (% rbp ), % rax movq - 8 3 2 0 (% rbp ,% rax , 8 ), % rax leaq - 1 (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rdx , - 8 3 2 0 (% rbp ,% rax , 8 ) jmp . L 1 2 . L 1 7 : movq - 5 6 (% rbp ), % rax movl $ 1 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : . LBE 2 9 : cmpq $ 0 , - 5 6 (% rbp ) js . L 1 8 cmpq $ 1 0 0 0 , - 5 6 (% rbp ) jg . L 1 8 movq - 5 6 (% rbp ), % rax movq - 8 3 2 0 (% rbp ,% rax , 8 ), % rax testq % rax , % rax jg . L 4 4 jmp . L 3 9 . L 1 8 : movq - 5 6 (% rbp ), % rax movl $ 1 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : . LBE 3 2 : . LBE 3 3 : . LBE 3 5 : . LBE 2 2 : . LBB 3 6 : addq $ 1 , % rbx . L 1 0 : . LBE 3 6 : cmpq % r 1 3 , % rbx jl . L 4 5 . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBB 3 7 : movq $ 0 , - 4 0 (% rbp ) . LBB 3 8 : jmp . L 2 4 . L 4 7 : . LBB 3 9 : nop . LBE 3 9 : . LBB 4 0 : . LBB 4 1 : . LBB 4 2 : jmp . L 2 5 . L 4 6 : . LBB 4 3 : nop . LBE 4 3 : . LBB 4 4 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 6 . LBB 4 5 : movq - 1 4 4 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 4 5 : jmp . L 2 7 . L 2 6 : . LBB 4 6 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 2 7 : . LBE 4 6 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 4 0 (% rbp ), % rax movq % rax , (% rdx ) cmpq $ 0 , - 4 0 (% rbp ) js . L 2 8 cmpq $ 1 0 0 0 , - 4 0 (% rbp ) jg . L 2 8 cmpq $ 0 , - 4 0 (% rbp ) jns . L 2 9 jmp . L 3 0 . L 2 8 : movq - 4 0 (% rbp ), % rax movl $ 1 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : cmpq $ 1 0 0 0 , - 4 0 (% rbp ) jg . L 3 0 movq - 4 0 (% rbp ), % rax movq - 8 3 2 0 (% rbp ,% rax , 8 ), % rax leaq - 1 (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rdx , - 8 3 2 0 (% rbp ,% rax , 8 ) jmp . L 2 5 . L 3 0 : movq - 4 0 (% rbp ), % rax movl $ 1 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : . LBE 4 4 : cmpq $ 0 , - 4 0 (% rbp ) js . L 3 1 cmpq $ 1 0 0 0 , - 4 0 (% rbp ) jg . L 3 1 movq - 4 0 (% rbp ), % rax movq - 8 3 2 0 (% rbp ,% rax , 8 ), % rax testq % rax , % rax jg . L 4 6 jmp . L 4 1 . L 3 1 : movq - 4 0 (% rbp ), % rax movl $ 1 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : . LBE 4 2 : . LBE 4 1 : . LBE 4 0 : . LBB 4 7 : addq $ 1 , - 4 0 (% rbp ) . L 2 4 : . LBE 4 7 : cmpq $ 1 0 0 0 , - 4 0 (% rbp ) jle . L 4 7 . LBE 3 8 : . LBE 3 7 : . LBB 4 8 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 8 3 2 8 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 5 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 8 : . LBE 2 : movq - 8 3 2 8 (% rbp ), % rax addq $ 8 3 1 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 5 2 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 5 movl $ 5 2 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 7 2 , % rsp movq % rdi , - 5 0 4 (% rbp ) movq $ 0 , - 4 0 0 (% rbp ) movq $ 0 , - 3 9 2 (% rbp ) movq $ 0 , - 3 8 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rbx movq % rbx , % rdx movl $ 0 , % esi leaq string .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 3 2 (% rbp ) movq $ 0 , - 4 2 4 (% rbp ) movq % rbx , - 4 1 6 (% rbp ) leaq type ... 6 0 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 3 7 6 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq $ 0 , - 4 5 6 (% rbp ) movq $ 0 , - 4 4 8 (% rbp ) . LBB 3 : movq $ 0 , - 4 8 0 (% rbp ) movq $ 0 , - 4 7 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 3 6 0 (% rbp ), % r 1 5 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 3 3 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 3 6 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 3 6 8 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 4 8 0 (% rbp ), % rcx movq - 4 7 2 (% rbp ), % rax movl $ 3 2 , % edx movq % rcx , % rdi movq % rax , % rsi call strings . IndexByte @ PLT addq $ 1 , % rax movq - 4 7 2 (% rbp ), % rdx testq % rax , % rax jns . L 4 jmp . L 5 . L 3 : . LBE 1 2 : . LBE 1 1 : . LBB 2 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 2 4 : . LBB 2 5 : . LBB 2 3 : cmpq % rdx , % rax jge . L 5 movq - 4 8 0 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 5 7 , % al jbe . L 6 jmp . L 2 9 . L 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBB 1 3 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 2 8 (% rbp ), % r 1 4 leaq 1 (% r 1 4 ), % rax movq - 3 2 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 8 . LBB 1 4 : movq - 3 3 6 (% rbp ), % rsi leaq - 1 4 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 4 , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) . LBE 1 4 : jmp . L 9 . L 8 : . LBB 1 5 : movq - 3 3 6 (% rbp ), % rcx movq - 3 2 0 (% rbp ), % rdx movq % rcx , - 4 6 4 (% rbp ) movq % rax , - 4 5 6 (% rbp ) movq % rdx , - 4 4 8 (% rbp ) . L 9 : . LBE 1 5 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % r 1 4 , % rdx salq $ 4 , % rdx addq % rdx , % rax movq - 4 7 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 0 . LBB 1 6 : movq - 4 8 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 1 . L 1 0 : . LBE 1 6 : . LBB 1 7 : movq - 4 8 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 1 1 . L 2 9 : . LBE 1 7 : . LBE 1 3 : . LBB 1 8 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % r 1 4 leaq 1 (% r 1 4 ), % rax movq - 2 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 2 . LBB 1 9 : movq - 3 0 4 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 4 , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) . LBE 1 9 : jmp . L 1 3 . L 1 2 : . LBB 2 0 : movq - 3 0 4 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rdx movq % rcx , - 4 3 2 (% rbp ) movq % rax , - 4 2 4 (% rbp ) movq % rdx , - 4 1 6 (% rbp ) . L 1 3 : . LBE 2 0 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % r 1 4 , % rdx salq $ 4 , % rdx addq % rdx , % rax movq - 4 7 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 4 . LBB 2 1 : movq - 4 8 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 1 . L 1 4 : . LBE 2 1 : . LBB 2 2 : movq - 4 8 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 1 : . LBE 2 2 : . LBE 1 8 : . LBE 2 3 : . LBE 2 5 : . LBE 8 : . LBB 2 6 : addq $ 1 , % rbx . L 2 : . LBE 2 6 : cmpq % r 1 5 , % rbx jl . L 3 3 . LBE 5 : . LBE 4 : . LBE 3 : leaq go . leetcode 0 9 3 7 . reorderLogFiles .. func 1 (% rip ), % rcx leaq - 4 3 2 (% rbp ), % rdx movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movq % rax , - 2 1 6 (% rbp ) movq - 2 1 6 (% rbp ), % rax movq % rcx , (% rax ) movq % rdx , 8 (% rax ) movq - 2 1 6 (% rbp ), % rbx leaq type ... 6 . 7 string (% rip ), % r 1 2 leaq type ... 6 . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 7 . LBB 2 7 : movq - 2 8 0 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 5 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 7 : jmp . L 1 8 . L 1 7 : . LBB 2 8 : movq - 2 8 0 (% rbp ), % rax leaq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 8 : . LBE 2 8 : movq - 2 8 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call sort . Slice @ PLT . LBB 2 9 : movq $ 0 , - 4 9 6 (% rbp ) movq $ 0 , - 4 8 8 (% rbp ) . LBB 3 0 : . LBB 3 1 : . LBB 3 2 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 3 2 : jmp . L 1 9 . L 3 4 : . LBB 3 3 : nop . LBE 3 3 : . LBB 3 4 : . LBB 3 5 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 2 0 cmpq % rax , % rbx jge . L 2 0 movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 3 5 : . LBB 3 6 : movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) . LBE 3 6 : . LBB 3 7 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 2 1 jmp . L 3 1 . L 2 0 : . LBE 3 7 : . LBB 4 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : . LBE 4 2 : . LBB 4 3 : . LBB 3 8 : movq - 1 7 6 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) . LBE 3 8 : jmp . L 2 3 . L 3 1 : . LBB 3 9 : movq - 1 7 6 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rdx movq % rcx , - 4 3 2 (% rbp ) movq % rax , - 4 2 4 (% rbp ) movq % rdx , - 4 1 6 (% rbp ) . L 2 3 : . LBE 3 9 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 4 , % rdx addq % rdx , % rax movq - 4 8 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 4 . LBB 4 0 : movq - 4 9 6 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 2 5 . L 2 4 : . LBE 4 0 : . LBB 4 1 : movq - 4 9 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 5 : . LBE 4 1 : . LBE 4 3 : . LBE 3 4 : . LBB 4 4 : addq $ 1 , % rbx . L 1 9 : . LBE 4 4 : cmpq % r 1 3 , % rbx jl . L 3 4 . LBE 3 1 : . LBE 3 0 : . LBE 2 9 : . LBB 4 5 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 5 0 4 (% rbp ), % rcx movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 8 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 5 : . LBE 2 : movq - 5 0 4 (% rbp ), % rax addq $ 4 7 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 8 1 movl $ 3 4 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 8 1 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 3 2 8 , % rsp movq % rdi , - 3 2 8 (% rbp ) movq % rsi , - 3 3 6 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 1 4 : movq - 3 2 8 (% rbp ), % rax movq % rax , % rdi call math .. z 2 frand . Intn @ PLT movq % rax , - 4 8 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 0 cmpq % rax , - 4 8 (% rbp ) jl . L 6 0 . L 1 0 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 0 : movq 1 6 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 1 5 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 4 8 (% rbp ), % rax movq 1 6 (% rbp ), % rcx movq 2 4 (% rbp ), % rbx movq % rcx , - 2 8 8 (% rbp ) movq % rbx , - 2 8 0 (% rbp ) movq 3 2 (% rbp ), % rdx movq % rdx , - 2 7 2 (% rbp ) movq - 3 2 8 (% rbp ), % rdx subq $ 1 , % rdx movq - 3 2 8 (% rbp ), % rcx subq $ 1 , % rcx movq 2 4 (% rbp ), % rsi testq % rcx , % rcx js . L 1 2 cmpq % rsi , % rcx jl . L 6 1 . L 1 2 : movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 6 1 : movq 1 6 (% rbp ), % rsi salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rdi movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 4 8 (% rbp ) js . L 1 4 cmpq % rcx , - 4 8 (% rbp ) jl . L 6 2 . L 1 4 : movq - 4 8 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 2 : movq 1 6 (% rbp ), % rsi movq - 4 8 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rsi movq - 3 1 2 (% rbp ), % rcx testq % rax , % rax js . L 1 6 cmpq % rcx , % rax jl . L 6 3 . L 1 6 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 3 : movq - 3 2 0 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq % rdi , (% rax ) movq - 2 8 0 (% rbp ), % rax testq % rdx , % rdx js . L 1 8 cmpq % rax , % rdx jl . L 6 4 . L 1 8 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 4 : movq - 2 8 8 (% rbp ), % rax salq $ 3 , % rdx addq % rdx , % rax movq % rsi , (% rax ) . LBE 1 5 : . LBB 1 6 : movq $ 0 , - 3 2 (% rbp ) . LBB 1 7 : jmp . L 2 0 . L 8 0 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : . LBB 2 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 1 cmpq % rax , - 3 2 (% rbp ) jl . L 6 5 . L 2 1 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 5 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 5 6 (% rbp ) jl . L 2 3 . LBB 2 1 : . LBB 2 2 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 3 2 (% rbp ), % rdx movq 1 6 (% rbp ), % rcx movq 2 4 (% rbp ), % rbx movq % rcx , - 2 2 4 (% rbp ) movq % rbx , - 2 1 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 4 (% rbp ), % rax movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 2 4 (% rbp ) js . L 2 4 cmpq % rcx , - 2 4 (% rbp ) jl . L 6 6 . L 2 4 : movq - 2 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 6 : movq 1 6 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rdi movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 3 2 (% rbp ) js . L 2 6 cmpq % rcx , - 3 2 (% rbp ) jl . L 6 7 . L 2 6 : movq - 3 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 7 : movq 1 6 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rsi movq - 2 4 8 (% rbp ), % rcx testq % rdx , % rdx js . L 2 8 cmpq % rcx , % rdx jl . L 6 8 . L 2 8 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 8 : movq - 2 5 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq % rdi , (% rdx ) movq - 2 1 6 (% rbp ), % rdx testq % rax , % rax js . L 3 0 cmpq % rdx , % rax jl . L 6 9 . L 3 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 9 : movq - 2 2 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . LBE 2 2 : addq $ 1 , - 2 4 (% rbp ) . L 2 3 : . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBB 2 3 : addq $ 1 , - 3 2 (% rbp ) . L 2 0 : . LBE 2 3 : movq - 3 2 8 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 3 2 (% rbp ) jl . L 8 0 . LBE 1 7 : . LBE 1 6 : . LBB 2 4 : movq - 2 4 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 3 2 8 (% rbp ) jg . L 3 4 . LBB 2 5 : . LBB 2 6 : movq - 3 2 8 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 3 5 cmpq % rdx , % rax jl . L 7 1 . L 3 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 1 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 3 7 . L 3 4 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBB 2 7 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 2 4 (% rbp ), % rax leaq 1 (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq 2 4 (% rbp ), % rbx movq % rcx , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 3 2 8 (% rbp ), % rax subq $ 1 , % rax movq - 3 2 8 (% rbp ), % rcx subq $ 1 , % rcx movq 2 4 (% rbp ), % rsi testq % rcx , % rcx js . L 3 8 cmpq % rsi , % rcx jl . L 7 2 . L 3 8 : movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 7 2 : movq 1 6 (% rbp ), % rsi salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rdi movq - 2 4 (% rbp ), % rcx addq $ 1 , % rcx movq 2 4 (% rbp ), % rsi testq % rcx , % rcx js . L 4 0 cmpq % rsi , % rcx jl . L 7 3 . L 4 0 : movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 7 3 : movq 1 6 (% rbp ), % rsi salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rsi movq - 1 8 4 (% rbp ), % rcx testq % rdx , % rdx js . L 4 2 cmpq % rcx , % rdx jl . L 7 4 . L 4 2 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 4 : movq - 1 9 2 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq % rdi , (% rdx ) movq - 1 5 2 (% rbp ), % rdx testq % rax , % rax js . L 4 4 cmpq % rdx , % rax jl . L 7 5 . L 4 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 5 : movq - 1 6 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . LBE 2 7 : movq - 2 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBB 2 8 : cmpq $ 1 , - 6 4 (% rbp ) jg . L 4 6 . LBB 2 9 : . LBB 3 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 4 7 cmpq % rax , - 6 4 (% rbp ) jl . L 7 6 . L 4 7 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 6 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 3 7 . L 4 6 : . LBE 3 0 : . LBE 2 9 : . LBE 2 8 : . LBB 3 1 : movq - 6 4 (% rbp ), % rax cmpq - 3 3 6 (% rbp ), % rax jne . L 4 9 . LBB 3 2 : . LBB 3 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 5 0 cmpq % rax , - 6 4 (% rbp ) jl . L 7 7 . L 5 0 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 7 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 3 7 . L 4 9 : . LBE 3 3 : . LBE 3 2 : . LBB 3 4 : . LBB 3 5 : movq - 6 4 (% rbp ), % rax cmpq - 3 3 6 (% rbp ), % rax jle . L 5 2 . LBB 3 6 : . LBB 3 7 : movq 3 2 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 5 3 cmpq % rax , - 6 4 (% rbp ) jg . L 5 3 cmpq $ 0 , - 6 4 (% rbp ) jns . L 5 4 jmp . L 7 8 . L 5 3 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 7 8 : movq - 6 4 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 5 4 : movq - 6 4 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq 1 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 3 3 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rax , % rsi movq % rdx , % rdi call go . rselect . RSelect addq $ 3 2 , % rsp movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 3 7 . L 5 2 : . LBE 3 7 : . LBE 3 6 : . LBB 3 8 : . LBB 3 9 : movq 3 2 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 5 6 cmpq % rax , - 6 4 (% rbp ) jle . L 7 9 . L 5 6 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 7 9 : movq - 3 3 6 (% rbp ), % rax subq - 6 4 (% rbp ), % rax movq % rax , % rdx movq - 3 2 8 (% rbp ), % rax subq - 6 4 (% rbp ), % rax movq 1 6 (% rbp ), % rsi movq 3 2 (% rbp ), % rcx cmpq % rcx , - 6 4 (% rbp ) je . L 5 8 movq - 6 4 (% rbp ), % rcx salq $ 3 , % rcx jmp . L 5 9 . L 5 8 : movl $ 0 , % ecx . L 5 9 : addq % rsi , % rcx movq % rcx , - 9 6 (% rbp ) movq 2 4 (% rbp ), % rcx subq - 6 4 (% rbp ), % rcx movq % rcx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rcx subq - 6 4 (% rbp ), % rcx movq % rcx , - 8 0 (% rbp ) subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rdx , % rsi movq % rax , % rdi call go . rselect . RSelect addq $ 3 2 , % rsp movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 3 7 : . LBE 3 9 : . LBE 3 8 : . LBE 3 5 : . LBE 3 4 : . LBE 3 1 : . LBE 1 4 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 0 movl $ 1 5 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 2 0 , % rsp movq $ 0 , - 6 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) . LBB 3 : cmpq $ 0 , - 7 2 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : leaq go . leetcode 0 4 3 5 . eraseOverlapIntervals .. func 1 (% rip ), % rdx leaq 1 6 (% rbp ), % rcx movq $ 0 , - 9 6 (% rbp ) movq $ 0 , - 8 8 (% rbp ) leaq - 9 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rdx , (% rax ) movq % rcx , 8 (% rax ) movq - 8 0 (% rbp ), % rbx leaq type ... 6 . 7 go . leetcode 0 4 3 5 . Interval (% rip ), % r 1 2 leaq type ... 6 . 7 go . leetcode 0 4 3 5 . Interval (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 6 : movq - 1 3 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 : jmp . L 5 . L 4 : . LBB 7 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 go . leetcode 0 4 3 5 . Interval (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 7 : movq - 1 3 6 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call sort . Slice @ PLT movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 6 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 0 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 8 : movq $ 1 , - 5 6 (% rbp ) . LBB 9 : jmp . L 7 . L 1 9 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 8 cmpq % rax , - 5 6 (% rbp ) jl . L 1 6 . L 8 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) jg . L 1 0 . LBB 1 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 1 cmpq % rax , - 5 6 (% rbp ) jl . L 1 7 . L 1 1 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rax movq % rax , - 4 0 (% rbp ) . LBE 1 3 : jmp . L 1 3 . L 1 0 : . LBB 1 4 : addq $ 1 , - 4 8 (% rbp ) . L 1 3 : . LBE 1 4 : . LBE 1 2 : . LBE 1 1 : . LBB 1 5 : addq $ 1 , - 5 6 (% rbp ) . L 7 : . LBE 1 5 : movq - 5 6 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jl . L 1 9 . LBE 9 : . LBE 8 : . LBB 1 6 : movq - 4 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax . L 3 : . LBE 1 6 : . LBE 2 : addq $ 1 2 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 5 : leaq - 1 0 1 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 3 7 movl $ 1 0 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 5 : ret . L 1 3 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 6 8 , % rsp movq % rdi , - 8 8 8 (% rbp ) movq - 8 8 8 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 5 8 : movq $ 0 , - 7 6 8 (% rbp ) movq $ 0 , - 7 6 0 (% rbp ) movq $ 0 , - 7 5 2 (% rbp ) . LBB 5 9 : . LBB 6 0 : . LBB 6 1 : movq go . day 3 6 5 . testcases (% rip ), % rax movq 8 + go . day 3 6 5 . testcases (% rip ), % rdx movq % rax , - 7 0 4 (% rbp ) movq % rdx , - 6 9 6 (% rbp ) movq 1 6 + go . day 3 6 5 . testcases (% rip ), % rax movq % rax , - 6 8 8 (% rbp ) movq - 6 9 6 (% rbp ), % rax movq % rax , - 8 9 6 (% rbp ) movl $ 0 , % r 1 5 d . LBE 6 1 : jmp . L 8 2 . L 1 3 6 : . LBB 6 2 : nop . LBE 6 2 : . LBB 6 3 : . LBB 6 4 : movq - 6 9 6 (% rbp ), % rax testq % r 1 5 , % r 1 5 js . L 8 3 cmpq % rax , % r 1 5 jge . L 8 3 movq - 7 0 4 (% rbp ), % rcx movq % r 1 5 , % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 7 3 6 (% rbp ) movq % rdx , - 7 2 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 7 2 0 (% rbp ) . LBE 6 4 : . LBB 6 5 : movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , - 6 7 2 (% rbp ) movq % rdx , - 6 6 4 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq % rax , - 6 5 6 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 7 6 8 (% rbp ) movq % rdx , - 7 6 0 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq % rax , - 7 5 2 (% rbp ) . LBE 6 5 : . LBB 6 6 : movq $ 0 , - 6 4 0 (% rbp ) movq $ 0 , - 6 3 2 (% rbp ) movq $ 0 , - 6 2 4 (% rbp ) movq $ 0 , - 6 1 6 (% rbp ) movq $ 0 , - 6 0 8 (% rbp ) movq $ 0 , - 6 0 0 (% rbp ) movq $ 0 , - 5 9 2 (% rbp ) movq $ 0 , - 5 8 4 (% rbp ) movq $ 0 , - 5 7 6 (% rbp ) leaq - 6 4 0 (% rbp ), % rax movq % rax , - 5 6 8 (% rbp ) movq - 5 6 8 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq $ 0 , 3 2 (% rax ) movq $ 0 , 4 0 (% rax ) movq $ 0 , 4 8 (% rax ) movq $ 0 , 5 6 (% rax ) movq $ 0 , 6 4 (% rax ) movq - 5 6 8 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 6 7 : movq $ 0 , - 8 8 0 (% rbp ) movq $ 0 , - 8 7 2 (% rbp ) movq $ 0 , - 8 6 4 (% rbp ) movq $ 0 , - 8 5 6 (% rbp ) movq $ 0 , - 8 4 8 (% rbp ) movq $ 0 , - 8 4 0 (% rbp ) . LBB 6 8 : movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) . LBB 6 9 : . LBB 7 0 : movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq - 4 7 2 (% rbp ), % rax movq % rax , - 1 0 0 0 (% rbp ) movl $ 0 , % r 1 4 d . LBE 7 0 : jmp . L 8 4 . L 8 3 : . LBE 6 9 : . LBE 6 8 : . LBE 6 7 : . LBE 6 6 : . LBB 1 0 4 : movq % rax , % rsi movq % r 1 5 , % rdi call runtime . goPanicIndex @ PLT . L 1 3 5 : . LBE 1 0 4 : . LBB 1 0 5 : . LBB 1 0 3 : . LBB 1 0 2 : . LBB 1 0 1 : . LBB 7 1 : nop . LBE 7 1 : . LBB 7 2 : . LBB 7 3 : movq - 4 7 2 (% rbp ), % rax testq % r 1 4 , % r 1 4 js . L 8 5 cmpq % rax , % r 1 4 jge . L 8 5 movq - 4 8 0 (% rbp ), % rcx movq % r 1 4 , % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 4 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) . LBE 7 3 : . LBB 7 4 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 8 8 0 (% rbp ) movq % rdx , - 8 7 2 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 8 6 4 (% rbp ) movq % rdx , - 8 5 6 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 8 4 8 (% rbp ) movq % rdx , - 8 4 0 (% rbp ) . LBE 7 4 : . LBB 7 5 : . LBB 7 6 : . LBB 7 7 : movq - 8 8 0 (% rbp ), % r 1 2 movq - 8 7 2 (% rbp ), % r 1 3 movq % r 1 3 , % rax cmpq $ 4 , % rax je . L 8 6 jmp . L 1 2 5 . L 8 5 : . LBE 7 7 : . LBE 7 6 : . LBE 7 5 : . LBB 9 8 : movq % rax , % rsi movq % r 1 4 , % rdi call runtime . goPanicIndex @ PLT . L 8 6 : . LBE 9 8 : . LBB 9 9 : . LBB 9 7 : . LBB 9 6 : movq % r 1 2 , % rdx leaq . LC 4 8 (% rip ), % rax cmpq % rax , % rdx jne . L 8 8 movl $ 0 , % eax jmp . L 9 0 . L 8 8 : movq % r 1 2 , % rax movl $ 4 , % edx leaq . LC 4 8 (% rip ), % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax setne % al jmp . L 9 0 . L 1 2 5 : movl $ 1 , % eax . L 9 0 : testb % al , % al jne . L 1 3 0 . LBB 7 8 : movq - 8 6 4 (% rbp ), % rcx movq - 8 5 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . day 3 6 5 . Quack . Push . LBE 7 8 : jmp . L 9 3 . L 1 3 0 : . LBB 7 9 : nop . LBE 7 9 : movq % r 1 3 , % rax cmpq $ 3 , % rax jne . L 9 4 movq % r 1 2 , % rdx leaq . LC 4 9 (% rip ), % rax cmpq % rax , % rdx jne . L 9 5 movl $ 0 , % eax jmp . L 9 7 . L 9 5 : movq % r 1 2 , % rax movl $ 3 , % edx leaq . LC 4 9 (% rip ), % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax setne % al jmp . L 9 7 . L 9 4 : movl $ 1 , % eax . L 9 7 : testb % al , % al jne . L 1 3 1 . LBB 8 0 : . LBB 8 1 : leaq - 1 7 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi movq % rdx , % rdi call go . day 3 6 5 . Quack . Pop movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 7 8 4 (% rbp ) movq % rdx , - 7 7 6 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 8 0 0 (% rbp ) movq % rdx , - 7 9 2 (% rbp ) . LBB 8 2 : movq - 8 6 4 (% rbp ), % rax movq - 8 5 6 (% rbp ), % rdx movq - 7 8 4 (% rbp ), % rdi movq - 7 7 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . efaceeq @ PLT xorl $ 1 , % eax movl % eax , % edx movl % edx , % eax xorl $ 1 , % eax testb % al , % al je . L 1 0 0 . LBB 8 3 : movq - 8 4 8 (% rbp ), % rax movq - 8 4 0 (% rbp ), % rdx movq - 8 0 0 (% rbp ), % rdi movq - 7 9 2 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . ifaceeq @ PLT xorl $ 1 , % eax movl % eax , % edx . L 1 0 0 : . LBE 8 3 : . LBE 8 2 : testb % dl , % dl je . L 1 3 2 . LBB 8 4 : movq - 8 4 8 (% rbp ), % rcx movq - 8 4 0 (% rbp ), % rbx movq - 8 6 4 (% rbp ), % r 1 2 movq - 8 5 6 (% rbp ), % r 1 3 movq % rcx , % rax testq % rax , % rax jne . L 1 0 2 movl $ 0 , % eax jmp . L 1 0 3 . L 1 0 2 : movq % rcx , % rax movq (% rax ), % rax . L 1 0 3 : movq % rax , - 9 9 2 (% rbp ) movq % rbx , % rax movq % rax , - 9 8 4 (% rbp ) movq - 8 0 0 (% rbp ), % rax testq % rax , % rax jne . L 1 0 4 movl $ 0 , % eax jmp . L 1 0 5 . L 1 0 4 : movq - 8 0 0 (% rbp ), % rax movq (% rax ), % rax . L 1 0 5 : movq % rax , - 9 7 6 (% rbp ) movq - 7 9 2 (% rbp ), % rax movq % rax , - 9 6 8 (% rbp ) leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq % r 1 2 , - 3 5 2 (% rbp ) movq % r 1 3 , - 3 4 4 (% rbp ) movdqa - 9 9 2 (% rbp ), % xmm 0 movups % xmm 0 , - 3 3 6 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movdqa - 9 7 6 (% rbp ), % xmm 1 movups % xmm 1 , - 3 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 6 . LBB 8 5 : movq - 3 6 0 (% rbp ), % rcx movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) . LBE 8 5 : jmp . L 1 0 7 . L 1 0 6 : . LBB 8 6 : movq - 3 6 0 (% rbp ), % rcx leaq - 3 5 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 7 : . LBE 8 6 : movq - 3 6 0 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 4 , - 1 3 6 (% rbp ) movq $ 4 , - 1 2 8 (% rbp ) leaq . LC 5 0 (% rip ), % rax movq % rax , - 9 2 8 (% rbp ) movq $ 2 9 , - 9 2 0 (% rbp ) movq - 9 2 8 (% rbp ), % rax movq - 9 2 0 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 8 8 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . LBE 8 4 : . LBE 8 1 : . LBE 8 0 : jmp . L 1 3 2 . L 1 3 1 : . LBB 8 7 : nop . LBE 8 7 : movq % r 1 3 , % rax cmpq $ 4 , % rax jne . L 1 0 8 movq % r 1 2 , % rdx leaq . LC 5 1 (% rip ), % rax cmpq % rax , % rdx jne . L 1 0 9 movl $ 0 , % eax jmp . L 1 1 1 . L 1 0 9 : movq % r 1 2 , % rax movl $ 4 , % edx leaq . LC 5 1 (% rip ), % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax setne % al jmp . L 1 1 1 . L 1 0 8 : movl $ 1 , % eax . L 1 1 1 : testb % al , % al jne . L 1 3 3 . LBB 8 8 : . LBB 8 9 : leaq - 1 1 2 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi movq % rdx , % rdi call go . day 3 6 5 . Quack . Pull movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 8 1 6 (% rbp ) movq % rdx , - 8 0 8 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 8 3 2 (% rbp ) movq % rdx , - 8 2 4 (% rbp ) . LBB 9 0 : movq - 8 6 4 (% rbp ), % rax movq - 8 5 6 (% rbp ), % rdx movq - 8 1 6 (% rbp ), % rdi movq - 8 0 8 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . efaceeq @ PLT xorl $ 1 , % eax movl % eax , % edx movl % edx , % eax xorl $ 1 , % eax testb % al , % al je . L 1 1 3 . LBB 9 1 : movq - 8 4 8 (% rbp ), % rax movq - 8 4 0 (% rbp ), % rdx movq - 8 3 2 (% rbp ), % rdi movq - 8 2 4 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . ifaceeq @ PLT xorl $ 1 , % eax movl % eax , % edx . L 1 1 3 : . LBE 9 1 : . LBE 9 0 : testb % dl , % dl je . L 1 3 4 . LBB 9 2 : movq - 8 4 8 (% rbp ), % rcx movq - 8 4 0 (% rbp ), % rbx movq - 8 6 4 (% rbp ), % r 1 2 movq - 8 5 6 (% rbp ), % r 1 3 movq % rcx , % rax testq % rax , % rax jne . L 1 1 5 movl $ 0 , % eax jmp . L 1 1 6 . L 1 1 5 : movq % rcx , % rax movq (% rax ), % rax . L 1 1 6 : movq % rax , - 9 6 0 (% rbp ) movq % rbx , % rax movq % rax , - 9 5 2 (% rbp ) movq - 8 3 2 (% rbp ), % rax testq % rax , % rax jne . L 1 1 7 movl $ 0 , % eax jmp . L 1 1 8 . L 1 1 7 : movq - 8 3 2 (% rbp ), % rax movq (% rax ), % rax . L 1 1 8 : movq % rax , - 9 4 4 (% rbp ) movq - 8 2 4 (% rbp ), % rax movq % rax , - 9 3 6 (% rbp ) leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq % r 1 2 , - 2 4 0 (% rbp ) movq % r 1 3 , - 2 3 2 (% rbp ) movdqa - 9 6 0 (% rbp ), % xmm 2 movups % xmm 2 , - 2 2 4 (% rbp ) movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movdqa - 9 4 4 (% rbp ), % xmm 3 movups % xmm 3 , - 1 9 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 9 . LBB 9 3 : movq - 2 4 8 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) . LBE 9 3 : jmp . L 1 2 0 . L 1 1 9 : . LBB 9 4 : movq - 2 4 8 (% rbp ), % rcx leaq - 2 4 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 0 : . LBE 9 4 : movq - 2 4 8 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 4 , - 7 2 (% rbp ) movq $ 4 , - 6 4 (% rbp ) leaq . LC 5 0 (% rip ), % rax movq % rax , - 9 1 2 (% rbp ) movq $ 2 9 , - 9 0 4 (% rbp ) movq - 9 1 2 (% rbp ), % rax movq - 9 0 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 8 8 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . LBE 9 2 : . LBE 8 9 : . LBE 8 8 : jmp . L 1 3 4 . L 1 3 2 : nop jmp . L 9 3 . L 1 3 3 : . LBB 9 5 : nop jmp . L 9 3 . L 1 3 4 : . LBE 9 5 : nop . L 9 3 : . LBE 9 6 : . LBE 9 7 : . LBE 9 9 : . LBE 7 2 : . LBB 1 0 0 : addq $ 1 , % r 1 4 . L 8 4 : . LBE 1 0 0 : cmpq - 1 0 0 0 (% rbp ), % r 1 4 jl . L 1 3 5 . LBE 1 0 1 : . LBE 1 0 2 : . LBE 1 0 3 : . LBE 1 0 5 : . LBE 6 3 : . LBB 1 0 6 : addq $ 1 , % r 1 5 . L 8 2 : . LBE 1 0 6 : cmpq - 8 9 6 (% rbp ), % r 1 5 jl . L 1 3 6 . LBE 6 0 : . LBE 5 9 : . LBE 5 8 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 7 1 : leaq - 8 1 3 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 0 2 1 movl $ 8 1 3 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 7 3 : ret . L 1 0 2 1 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 8 1 2 0 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 8 1 2 8 (% rbp ) movq % rdx , - 8 1 2 0 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 8 9 3 : leaq - 8 1 1 2 (% rbp ), % rdx movl $ 0 , % eax movl $ 1 0 0 0 , % ecx movq % rdx , % rdi rep stosq . LBB 8 9 4 : movq $ 0 , - 3 2 (% rbp ) . LBB 8 9 5 : jmp . L 9 8 9 . L 1 0 1 9 : . LBB 8 9 6 : nop . LBE 8 9 6 : . LBB 8 9 7 : . LBB 8 9 8 : movq - 3 2 (% rbp ), % rbx movq - 8 1 2 0 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 9 9 0 cmpq % rax , - 3 2 (% rbp ) jge . L 9 9 0 movq - 8 1 2 8 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax movq % rax , % rsi movl $ 0 , % edi call runtime . intstring @ PLT leaq - 8 0 (% rbp ), % rcx movq % rax , % rsi movq % rdx , % rdi movq % rdx , % rax movq % rax , % rdx movq % rcx , % rdi call strconv . Atoi @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax testq % rbx , % rbx jns . L 9 9 1 jmp . L 9 9 2 . L 9 9 0 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 9 9 1 : cmpq $ 9 9 9 , % rbx jle . L 1 0 1 1 . L 9 9 2 : movl $ 1 0 0 0 , % esi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 1 1 : movq % rax , - 8 1 1 2 (% rbp ,% rbx , 8 ) . LBE 8 9 8 : . LBE 8 9 7 : . LBB 8 9 9 : addq $ 1 , - 3 2 (% rbp ) . L 9 8 9 : . LBE 8 9 9 : movq - 8 1 2 0 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) jl . L 1 0 1 9 . LBE 8 9 5 : . LBE 8 9 4 : movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 9 0 0 : movq $ 0 , - 4 0 (% rbp ) . LBB 9 0 1 : jmp . L 9 9 6 . L 1 0 2 0 : . LBB 9 0 2 : nop . LBE 9 0 2 : . LBB 9 0 3 : cmpq $ 0 , - 4 0 (% rbp ) js . L 9 9 7 cmpq $ 9 9 9 , - 4 0 (% rbp ) jle . L 1 0 1 3 . L 9 9 7 : movq - 4 0 (% rbp ), % rax movl $ 1 0 0 0 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 0 1 3 : movq - 4 0 (% rbp ), % rax leaq 1 (% rax ), % rdi testq % rdi , % rdi js . L 9 9 9 cmpq $ 9 9 9 , % rdi jle . L 1 0 1 4 . L 9 9 9 : movl $ 1 0 0 0 , % esi call runtime . goPanicIndex @ PLT . L 1 0 1 4 : movq - 4 0 (% rbp ), % rax leaq 2 (% rax ), % rcx testq % rcx , % rcx js . L 1 0 0 1 cmpq $ 9 9 9 , % rcx jle . L 1 0 1 5 . L 1 0 0 1 : movl $ 1 0 0 0 , % esi movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 1 5 : movq - 4 0 (% rbp ), % rax leaq 3 (% rax ), % rdx testq % rdx , % rdx js . L 1 0 0 3 cmpq $ 9 9 9 , % rdx jle . L 1 0 1 6 . L 1 0 0 3 : movl $ 1 0 0 0 , % esi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 1 6 : movq - 4 0 (% rbp ), % rax addq $ 4 , % rax testq % rax , % rax js . L 1 0 0 5 cmpq $ 9 9 9 , % rax jle . L 1 0 1 7 . L 1 0 0 5 : movl $ 1 0 0 0 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 0 1 7 : movq - 4 0 (% rbp ), % rsi movq - 8 1 1 2 (% rbp ,% rsi , 8 ), % r 8 movq - 8 1 1 2 (% rbp ,% rdi , 8 ), % rsi imulq % r 8 , % rsi movq - 8 1 1 2 (% rbp ,% rcx , 8 ), % rcx imulq % rsi , % rcx movq - 8 1 1 2 (% rbp ,% rdx , 8 ), % rdx imulq % rcx , % rdx movq - 8 1 1 2 (% rbp ,% rax , 8 ), % rax imulq % rdx , % rax movq % rax , - 5 6 (% rbp ) . LBB 9 0 4 : movq - 2 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jge . L 1 0 0 7 . LBB 9 0 5 : movq - 5 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . L 1 0 0 7 : . LBE 9 0 5 : . LBE 9 0 4 : . LBE 9 0 3 : . LBB 9 0 6 : addq $ 1 , - 4 0 (% rbp ) . L 9 9 6 : . LBE 9 0 6 : movq - 8 1 2 0 (% rbp ), % rax subq $ 5 , % rax cmpq % rax , - 4 0 (% rbp ) jle . L 1 0 2 0 . LBE 9 0 1 : . LBE 9 0 0 : . LBB 9 0 7 : movq - 2 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax . LBE 9 0 7 : . LBE 8 9 3 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 5 movl $ 2 8 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 3 2 , % rsp movq % rdi , - 2 1 6 (% rbp ) movq % rsi , % rax movq % rdx , % rsi movq % rsi , % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq % rcx , % rax movq % r 8 , % rcx movq % rcx , % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) . LBB 2 : call runtime . makemap_small @ PLT movq % rax , - 6 4 (% rbp ) . LBB 3 : movl $ 0 , - 6 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 3 2 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 3 2 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 2 4 0 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 4 jmp . L 2 7 . L 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBB 1 0 : addq $ 1 , % rbx . LBE 1 0 : jmp . L 6 . L 2 7 : . LBB 1 1 : movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movl % ecx , % eax . L 6 : . LBE 1 1 : . LBE 9 : . LBB 1 2 : movl % eax , - 6 8 (% rbp ) . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movl - 6 8 (% rbp ), % eax movl % eax , - 1 5 2 (% rbp ) movl - 6 8 (% rbp ), % eax movl % eax , - 1 2 0 (% rbp ) leaq - 1 2 0 (% rbp ), % rax movl (% rax ), % edx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax addq $ 1 , % rax movq % rax , - 2 6 4 (% rbp ) leaq - 1 5 2 (% rbp ), % rax movl (% rax ), % edx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapassign_fast 3 2 @ PLT movq - 2 6 4 (% rbp ), % rdi movq % rdi , (% rax ) . L 2 : . LBE 1 4 : . LBE 1 3 : . LBE 8 : cmpq - 2 2 4 (% rbp ), % rbx jl . L 3 2 . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 2 0 8 (% rbp ) movq $ 0 , - 2 0 0 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) . LBB 1 5 : movq $ 0 , - 8 0 (% rbp ) . LBB 1 6 : . LBB 1 7 : . LBB 1 8 : movq - 2 4 8 (% rbp ), % rax movq % rax , - 2 6 4 (% rbp ) movl $ 0 , % ebx . LBE 1 8 : jmp . L 9 . L 3 4 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : . LBB 2 1 : movq - 2 4 8 (% rbp ), % rax testq % rbx , % rbx js . L 1 0 cmpq % rax , % rbx jge . L 1 0 movq - 2 5 6 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 1 1 jmp . L 2 9 . L 1 0 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 1 : . LBB 2 2 : leaq 1 (% rbx ), % rax movq % rax , - 2 2 4 (% rbp ) . LBE 2 2 : jmp . L 1 3 . L 2 9 : . LBB 2 3 : movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rdx , - 2 2 4 (% rbp ) . L 1 3 : . LBE 2 3 : . LBE 2 1 : movq % rbx , - 8 0 (% rbp ) . LBB 2 4 : call runtime . makemap_small @ PLT movq % rax , - 8 8 (% rbp ) . LBB 2 5 : movq - 8 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 2 6 : jmp . L 1 4 . L 3 3 : . LBB 2 7 : nop . LBE 2 7 : . LBB 2 8 : . LBB 2 9 : movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq - 5 6 (% rbp ), % rax . LBB 3 0 : movq % rbx , % rdx testq % rax , % rax js . L 1 5 cmpq % rdx , % rax jge . L 1 5 movq % rcx , % rsi movq % rax , % rdx addq % rsi , % rdx movzbl (% rdx ), % edx movzbl % dl , % edx movl % edx , - 1 4 8 (% rbp ) movq % rbx , % rdx testq % rax , % rax jns . L 1 6 jmp . L 1 7 . L 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : cmpq % rdx , % rax jge . L 1 7 movq % rcx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax movl % eax , - 1 1 6 (% rbp ) leaq - 1 1 6 (% rbp ), % rax movl (% rax ), % edx movq - 8 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % rbx leaq - 1 4 8 (% rbp ), % rax movl (% rax ), % edx movq - 8 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapassign_fast 3 2 @ PLT movq % rbx , (% rax ) . LBE 3 0 : . LBE 2 9 : . LBE 2 8 : . LBB 3 3 : addq $ 1 , - 5 6 (% rbp ) jmp . L 1 4 . L 1 7 : . LBE 3 3 : . LBB 3 4 : . LBB 3 2 : . LBB 3 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : . LBE 3 1 : . LBE 3 2 : . LBE 3 4 : . LBB 3 5 : movq - 2 4 8 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) setl % al testb % al , % al je . L 1 8 . LBB 3 6 : movq - 2 3 2 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax addq % rdx , % rax cmpq % rax , - 5 6 (% rbp ) setl % al . L 1 8 : . LBE 3 6 : . LBE 3 5 : testb % al , % al jne . L 3 3 . LBE 2 6 : . LBE 2 5 : . LBB 3 7 : leaq type .. map . 6 int 3 2 . 7 int (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 5 leaq type .. map . 6 int 3 2 . 7 int (% rip ), % r 1 2 movq - 8 8 (% rbp ), % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rcx , % rsi movq % rdx , % rax movq % r 1 4 , % rdx movq % r 1 5 , % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT testb % al , % al je . L 2 1 . LBB 3 8 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 2 . LBB 3 9 : movq - 1 4 4 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) . LBE 3 9 : jmp . L 2 3 . L 2 2 : . LBB 4 0 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq % rcx , - 2 0 8 (% rbp ) movq % rax , - 2 0 0 (% rbp ) movq % rdx , - 1 9 2 (% rbp ) . L 2 3 : . LBE 4 0 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 8 0 (% rbp ), % rax movq % rax , (% rdx ) . L 2 1 : . LBE 3 8 : . LBE 3 7 : . LBE 2 4 : . LBE 2 0 : . LBB 4 1 : movq - 2 2 4 (% rbp ), % rbx . L 9 : . LBE 4 1 : cmpq - 2 6 4 (% rbp ), % rbx jl . L 3 4 . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBB 4 2 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 2 1 6 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 2 : . LBE 2 : movq - 2 1 6 (% rbp ), % rax addq $ 2 3 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 9 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 9 : pushq % rbp movq % rsp , % rbp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 2 : movq - 2 4 (% rbp ), % rax xorq - 3 2 (% rbp ), % rax movq % rax , - 8 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 8 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 8 (% rbp ), % rax subq $ 1 , % rax andq % rax , - 8 (% rbp ) . L 2 : . LBE 6 : movq - 8 (% rbp ), % rax subq $ 1 , % rax andq - 8 (% rbp ), % rax testq % rax , % rax jne . L 8 . LBE 4 : . LBE 3 : . LBB 7 : cmpq $ 0 , - 8 (% rbp ) je . L 5 . LBB 8 : movq - 8 (% rbp ), % rax subq $ 1 , % rax orq % rax , - 8 (% rbp ) . L 5 : . LBE 8 : . LBE 7 : . LBB 9 : movq - 2 4 (% rbp ), % rax andq - 3 2 (% rbp ), % rax movq % rax , % rdx movq - 8 (% rbp ), % rax notq % rax andq % rdx , % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax . LBE 9 : . LBE 2 : popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 7 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 7 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 : . LBB 3 : . LBB 4 : movq - 4 0 (% rbp ), % rax andl $ 1 , % eax testq % rax , % rax sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 . LBB 5 : movq - 4 0 (% rbp ), % rcx movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rdx salq $ 2 , % rdx addq % rax , % rdx movq % rcx , % rax subq % rdx , % rax testq % rax , % rax sete % al . L 2 : . LBE 5 : . LBE 4 : testb % al , % al je . L 3 . LBB 6 : . LBB 7 : movq $- 1 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 4 . L 3 : . LBE 7 : . LBE 6 : . LBE 3 : cmpq $- 1 , - 4 0 (% rbp ) je . L 5 cmpq $ 0 , - 4 0 (% rbp ) jne . L 6 call runtime . panicdivide @ PLT . L 6 : movl $ 1 , % eax cqto idivq - 4 0 (% rbp ) movq % rdx , % rax jmp . L 7 . L 5 : movl $ 0 , % eax . L 7 : movq % rax , - 8 (% rbp ) movq $ 1 , - 1 6 (% rbp ) . LBB 8 : . LBB 9 : jmp . L 8 . L 1 6 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : movq - 8 (% rbp ), % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax addq $ 1 , % rax cmpq $- 1 , - 4 0 (% rbp ) jne . L 9 movl $ 0 , % eax jmp . L 1 0 . L 9 : cmpq $ 0 , - 4 0 (% rbp ) jne . L 1 1 call runtime . panicdivide @ PLT . L 1 1 : cqto idivq - 4 0 (% rbp ) movq % rdx , % rax . L 1 0 : movq % rax , - 8 (% rbp ) addq $ 1 , - 1 6 (% rbp ) . L 8 : . LBE 1 1 : . LBB 1 2 : cmpq $ 0 , - 8 (% rbp ) setne % al testb % al , % al je . L 1 2 . LBB 1 3 : movq - 1 6 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax setle % al . L 1 2 : . LBE 1 3 : . LBE 1 2 : testb % al , % al jne . L 1 6 . LBE 9 : . LBE 8 : . LBB 1 4 : movq - 1 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 4 : . LBE 1 4 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 6 3 movl $ 1 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 6 3 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 0 4 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 2 : movq - 1 0 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 9 6 (% rbp ) movq % rbx , - 8 8 (% rbp ) movq % rbx , - 8 0 (% rbp ) . LBB 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 5 9 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 8 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 cmpq % rax , - 2 4 (% rbp ) jl . L 4 3 . L 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq - 9 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq - 2 4 (% rbp ), % rdx subq $ 1 , % rdx movq % rdx , (% rax ) . LBE 6 : . LBB 7 : addq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 7 : movq - 6 4 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 2 4 (% rbp ) jl . L 5 9 . LBE 4 : . LBE 3 : . LBB 8 : movq $ 0 , - 3 2 (% rbp ) . LBB 9 : jmp . L 7 . L 6 2 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq $ 0 , - 4 0 (% rbp ) . LBB 1 3 : jmp . L 8 . L 6 0 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : movq - 3 2 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax leaq 1 (% rax ), % rdx movq - 8 8 (% rbp ), % rax testq % rdx , % rdx js . L 9 cmpq % rax , % rdx jl . L 4 5 . L 9 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 3 2 (% rbp ), % rax subq - 4 0 (% rbp ), % rax movq - 8 8 (% rbp ), % rcx testq % rax , % rax js . L 1 1 cmpq % rcx , % rax jl . L 4 6 . L 1 1 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq - 9 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax leaq 1 (% rax ), % rcx movq - 9 6 (% rbp ), % rax salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax movq % rcx , % rsi movq % rax , % rdi call go . leetcode 0 1 3 2 . min movq % rax , % rcx movq - 3 2 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax addq $ 1 , % rax movq - 8 8 (% rbp ), % rdx testq % rax , % rax js . L 1 3 cmpq % rdx , % rax jl . L 4 7 . L 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : movq - 9 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rcx , (% rax ) . LBE 1 5 : . LBB 1 6 : addq $ 1 , - 4 0 (% rbp ) . L 8 : . LBE 1 6 : . LBB 1 7 : . LBB 1 8 : movq - 3 2 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax setge % al testb % al , % al je . L 1 5 . LBB 1 9 : movq - 3 2 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax cmpq % rax , - 6 4 (% rbp ) setg % al . L 1 5 : . LBE 1 9 : . LBE 1 8 : testb % al , % al je . L 1 6 . LBB 2 0 : movq - 3 2 (% rbp ), % rax subq - 4 0 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 1 7 cmpq % rdx , % rax jl . L 4 8 . L 1 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : movq - 3 2 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx addq % rcx , % rdx movq - 1 0 4 (% rbp ), % rcx testq % rdx , % rdx js . L 1 9 cmpq % rcx , % rdx jl . L 4 9 . L 1 9 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : movq - 1 1 2 (% rbp ), % rcx addq % rcx , % rax movzbl (% rax ), % ecx movq - 1 1 2 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb % al , % cl sete % al . L 1 6 : . LBE 2 0 : . LBE 1 7 : testb % al , % al jne . L 6 0 . LBE 1 3 : . LBE 1 2 : . LBB 2 1 : movq $ 1 , - 4 8 (% rbp ) . LBB 2 2 : jmp . L 2 3 . L 6 1 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : movq - 3 2 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax addq % rdx , % rax addq $ 1 , % rax movq - 8 8 (% rbp ), % rdx testq % rax , % rax js . L 2 4 cmpq % rdx , % rax jl . L 5 1 . L 2 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : movq - 3 2 (% rbp ), % rdx subq - 4 8 (% rbp ), % rdx addq $ 1 , % rdx movq - 8 8 (% rbp ), % rcx testq % rdx , % rdx js . L 2 6 cmpq % rcx , % rdx jl . L 5 2 . L 2 6 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : movq - 9 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx addq $ 1 , % rdx movq - 9 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call go . leetcode 0 1 3 2 . min movq % rax , % rcx movq - 3 2 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax addq % rdx , % rax addq $ 1 , % rax movq - 8 8 (% rbp ), % rdx testq % rax , % rax js . L 2 8 cmpq % rdx , % rax jl . L 5 3 . L 2 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 3 : movq - 9 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rcx , (% rax ) . LBE 2 4 : . LBB 2 5 : addq $ 1 , - 4 8 (% rbp ) . L 2 3 : . LBE 2 5 : . LBB 2 6 : . LBB 2 7 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 4 8 (% rbp ) setle % al testb % al , % al je . L 3 0 . LBB 2 8 : movq - 3 2 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax addq % rdx , % rax cmpq % rax , - 6 4 (% rbp ) setg % al . L 3 0 : . LBE 2 8 : . LBE 2 7 : testb % al , % al je . L 3 1 . LBB 2 9 : movq - 3 2 (% rbp ), % rax subq - 4 8 (% rbp ), % rax leaq 1 (% rax ), % rdx movq - 1 0 4 (% rbp ), % rax testq % rdx , % rdx js . L 3 2 cmpq % rax , % rdx jl . L 5 4 . L 3 2 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : movq - 3 2 (% rbp ), % rcx movq - 4 8 (% rbp ), % rax addq % rcx , % rax movq - 1 0 4 (% rbp ), % rcx testq % rax , % rax js . L 3 4 cmpq % rcx , % rax jl . L 5 5 . L 3 4 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 5 : movq - 1 1 2 (% rbp ), % rcx addq % rcx , % rdx movzbl (% rdx ), % edx movq - 1 1 2 (% rbp ), % rcx addq % rcx , % rax movzbl (% rax ), % eax cmpb % al , % dl sete % al . L 3 1 : . LBE 2 9 : . LBE 2 6 : testb % al , % al jne . L 6 1 . LBE 2 2 : . LBE 2 1 : . LBE 1 1 : . LBB 3 0 : addq $ 1 , - 3 2 (% rbp ) . L 7 : . LBE 3 0 : movq - 3 2 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax jl . L 6 2 . LBE 9 : . LBE 8 : . LBB 3 1 : movq - 8 8 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 4 0 cmpq % rax , - 6 4 (% rbp ) jl . L 5 8 . L 4 0 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 8 : movq - 9 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax . LBE 3 1 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 9 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 1 9 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 3 2 (% rbp ) movq % rdi , - 2 4 (% rbp ) movq % rdx , - 4 8 (% rbp ) movq % rcx , - 4 0 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 3 : . LBB 2 4 : movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rdi movq - 2 4 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call strings . Index @ PLT movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . LBE 2 4 : . LBE 2 3 : leave ret
. LFB 0 : leaq - 4 2 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 movl $ 4 2 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 7 6 , % rsp leaq pimt .. interface . 4 Read . 0 func . 8 . 6 . 7 uint 8 . 9 . 8 int . 3 error . 9 . 5 .. os . File (% rip ), % rax movq os . Stdin (% rip ), % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call bufio . NewReader @ PLT movq % rax , - 5 6 (% rbp ) leaq string .. d (% rip ), % r 1 4 leaq go .. C 6 (% rip ), % r 1 5 movq % r 1 4 , - 3 3 6 (% rbp ) movq % r 1 5 , - 3 2 8 (% rbp ) leaq - 3 3 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 1 , - 2 0 0 (% rbp ) movq $ 1 , - 1 9 2 (% rbp ) leaq - 1 7 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 9 2 (% rbp ) pushq - 2 0 0 (% rbp ) pushq - 2 0 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rcx movl $ 1 0 , % edx movq % rcx , % rsi movq % rax , % rdi call bufio . Reader . ReadString @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) leaq string .. d (% rip ), % r 1 2 leaq go .. C 7 (% rip ), % r 1 3 leaq string .. d (% rip ), % rax movq % rax , - 4 1 6 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 2 6 4 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 4 0 8 (% rbp ) movq % r 1 2 , - 2 4 0 (% rbp ) movq % r 1 3 , - 2 3 2 (% rbp ) movdqa - 4 1 6 (% rbp ), % xmm 0 movups % xmm 0 , - 2 2 4 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 2 , - 1 0 4 (% rbp ) movq $ 2 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 2 movl $ 2 8 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 3 2 , % rsp movq $ 0 , - 8 8 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jne . L 2 . LBB 4 : . LBB 5 : movq $ 1 , - 8 8 (% rbp ) movq - 8 8 (% rbp ), % rax jmp . L 3 0 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 7 2 (% rbp ) movq % rbx , - 2 6 4 (% rbp ) movq % rbx , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq - 2 7 2 (% rbp ), % rax movq $ 1 , (% rax ) movq - 2 6 4 (% rbp ), % rax testq % rax , % rax jg . L 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 5 : movq - 2 7 2 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) . LBB 6 : movq $ 1 , - 6 4 (% rbp ) . LBB 7 : jmp . L 6 . L 4 1 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq - 6 4 (% rbp ), % rax subq $ 1 , % rax movq - 2 6 4 (% rbp ), % rdx testq % rax , % rax js . L 7 cmpq % rdx , % rax jl . L 3 1 . L 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq - 2 7 2 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 7 2 (% rbp ) . LBB 1 0 : movq $ 0 , - 8 0 (% rbp ) . LBB 1 1 : jmp . L 9 . L 4 0 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 0 cmpq % rax , - 6 4 (% rbp ) jl . L 3 2 . L 1 0 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 1 2 cmpq % rax , - 8 0 (% rbp ) jl . L 3 3 . L 1 2 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jle . L 1 4 . LBB 1 5 : movq - 2 6 4 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 1 5 cmpq % rax , - 8 0 (% rbp ) jl . L 3 4 . L 1 5 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq - 2 7 2 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq $ 1 , % rax movq % rax , - 7 2 (% rbp ) . L 1 4 : . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 1 6 : addq $ 1 , - 8 0 (% rbp ) . L 9 : . LBE 1 6 : movq - 8 0 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax jle . L 4 0 . LBE 1 1 : . LBE 1 0 : movq - 2 6 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 9 cmpq % rax , - 6 4 (% rbp ) jl . L 3 6 . L 1 9 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq - 2 7 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 7 2 (% rbp ), % rax movq % rax , (% rdx ) . LBB 1 7 : movq - 2 6 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 2 1 cmpq % rax , - 6 4 (% rbp ) jl . L 3 7 . L 2 1 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 2 7 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 5 6 (% rbp ) jge . L 2 3 . LBB 1 8 : movq - 2 6 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 2 4 cmpq % rax , - 6 4 (% rbp ) jl . L 3 8 . L 2 4 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 2 7 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) . L 2 3 : . LBE 1 8 : . LBE 1 7 : . LBE 9 : . LBB 1 9 : addq $ 1 , - 6 4 (% rbp ) . L 6 : . LBE 1 9 : movq 2 4 (% rbp ), % rax cmpq % rax , - 6 4 (% rbp ) jl . L 4 1 . LBE 7 : . LBE 6 : leaq string .. d (% rip ), % r 1 2 leaq go .. C 1 1 (% rip ), % r 1 3 leaq type ... 6 . 7 int (% rip ), % r 1 4 leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 8 . LBB 2 0 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 9 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 0 : jmp . L 2 9 . L 2 8 : . LBB 2 1 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 9 : . LBE 2 1 : movq - 2 1 6 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 2 , - 1 7 6 (% rbp ) movq % r 1 3 , - 1 6 8 (% rbp ) movq % r 1 4 , - 1 6 0 (% rbp ) movq % r 1 5 , - 1 5 2 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 2 , - 1 3 6 (% rbp ) movq $ 2 , - 1 2 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) . LBB 2 2 : movq - 5 6 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) movq - 8 8 (% rbp ), % rax . L 3 0 : . LBE 2 2 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 2 movl $ 2 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 1 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 subq $ 2 5 6 , % rsp movq $ 1 , - 2 8 0 (% rbp ) . LBB 4 : movq - 2 8 0 (% rbp ), % rcx cmpq $ 1 , % rcx jne . L 9 . LBB 5 : leaq string .. d (% rip ), % rax leaq go .. C 2 6 (% rip ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 1 , - 1 5 2 (% rbp ) movq $ 1 , - 1 4 4 (% rbp ) leaq - 1 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) . L 9 : . LBE 5 : . LBE 4 : movq $ 2 , - 2 8 0 (% rbp ) leaq - 2 8 0 (% rbp ), % rax movq % rax , % rdi call main . Level . String movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq string .. d (% rip ), % r 1 4 leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq % r 1 2 , - 1 9 2 (% rbp ) movq % r 1 3 , - 1 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 . LBB 6 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 6 : jmp . L 1 1 . L 1 0 : . LBB 7 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 1 : . LBE 7 : movq - 2 0 0 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 1 7 6 (% rbp ) movq % r 1 5 , - 1 6 8 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq - 3 2 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 2 movl $ 1 2 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 9 6 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq $ 0 , - 2 4 (% rbp ) . LBB 3 : movq $ 0 , - 4 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 2 1 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq % rbx , - 4 8 (% rbp ) . LBB 9 : . LBB 1 0 : movq $ 0 , - 3 2 (% rbp ) . LBB 1 1 : jmp . L 3 . L 2 0 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 4 cmpq % rax , - 4 8 (% rbp ) jl . L 1 6 . L 4 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : movq 1 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 6 cmpq % rax , - 3 2 (% rbp ) jge . L 6 movq - 8 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq $ 1 , % rax je . L 7 jmp . L 8 . L 6 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 : . LBB 1 5 : movq - 3 2 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rdx , % rsi movq % rax , % rdi call go . day 1 3 6 . areaOfOnes addq $ 3 2 , % rsp movq % rax , - 5 6 (% rbp ) movq - 2 4 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . day 1 3 6 . max movq % rax , - 2 4 (% rbp ) . L 8 : . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 1 6 : addq $ 1 , - 3 2 (% rbp ) . L 3 : . LBE 1 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 9 cmpq % rax , - 4 8 (% rbp ) jl . L 1 7 . L 9 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : movq 1 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rcx , % rax movq 8 (% rax ), % rax cmpq % rax , - 3 2 (% rbp ) jl . L 2 0 . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBE 8 : . LBB 1 7 : addq $ 1 , % rbx . L 2 : . LBE 1 7 : cmpq % r 1 2 , % rbx jl . L 2 1 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 8 : movq - 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 1 8 : . LBE 2 : leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 3 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 1 3 : pushq % rbp movq % rsp , % rbp movq % rdi , - 2 4 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 1 0 : . LBB 1 1 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . LBE 1 1 : . LBE 1 0 : popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 8 movl $ 2 3 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 : ret . L 5 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 0 0 , % rsp movq % rdi , - 2 0 0 (% rbp ) movq % rdx , % rcx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) . LBB 3 6 : movl $ 0 , % edx movl $ 0 , % esi leaq string .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) . LBB 3 7 : movq - 2 1 6 (% rbp ), % rax cmpq $ 9 , % rax jg . L 3 9 . LBB 3 8 : . LBB 3 9 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 2 0 0 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 3 8 . L 3 9 : . LBE 3 9 : . LBE 3 8 : . LBE 3 7 : call runtime . makemap_small @ PLT movq % rax , - 4 8 (% rbp ) . LBB 4 0 : movq $ 0 , - 4 0 (% rbp ) . LBB 4 1 : jmp . L 4 1 . L 5 7 : . LBB 4 2 : nop . LBE 4 2 : . LBB 4 3 : movq - 4 0 (% rbp ), % rax leaq 1 0 (% rax ), % rdi movq - 2 1 6 (% rbp ), % rax testq % rdi , % rdi js . L 4 2 cmpq % rax , % rdi jg . L 4 2 cmpq $ 0 , - 4 0 (% rbp ) jns . L 4 3 jmp . L 4 4 . L 4 2 : movq % rax , % rsi call runtime . goPanicSliceAlen @ PLT . L 4 3 : cmpq % rdi , - 4 0 (% rbp ) jg . L 4 4 movq - 2 2 4 (% rbp ), % rdx cmpq - 4 0 (% rbp ), % rdi jne . L 4 5 jmp . L 5 5 . L 4 4 : movq - 4 0 (% rbp ), % rax movq % rdi , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 4 5 : movq - 4 0 (% rbp ), % rax jmp . L 4 7 . L 5 5 : movl $ 0 , % eax . L 4 7 : addq % rdx , % rax movq % rax , - 1 9 2 (% rbp ) movq % rdi , % rax subq - 4 0 (% rbp ), % rax movq % rax , - 1 8 4 (% rbp ) . LBB 4 4 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq - 4 8 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq (% rax ), % rax cmpq $ 1 , % rax jne . L 4 8 . LBB 4 5 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 9 . LBB 4 6 : movq - 1 1 2 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) . LBE 4 6 : jmp . L 5 0 . L 4 9 : . LBB 4 7 : movq - 1 1 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rcx , - 1 7 6 (% rbp ) movq % rax , - 1 6 8 (% rbp ) movq % rdx , - 1 6 0 (% rbp ) . L 5 0 : . LBE 4 7 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq - 1 8 4 (% rbp ), % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 1 . LBB 4 8 : movq - 1 9 2 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 4 8 . L 5 1 : . LBE 4 8 : . LBB 4 9 : movq - 1 9 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 4 8 : . LBE 4 9 : . LBE 4 5 : . LBE 4 4 : . LBB 5 0 : movq - 1 9 2 (% rbp ), % r 1 2 movq - 1 8 4 (% rbp ), % r 1 3 movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq - 4 8 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq (% rax ), % rax leaq 1 (% rax ), % rbx movq - 4 8 (% rbp ), % rax movq % r 1 2 , % rdx movq % r 1 3 , % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq % rbx , (% rax ) . LBE 5 0 : . LBE 4 3 : . LBB 5 1 : addq $ 1 , - 4 0 (% rbp ) . L 4 1 : . LBE 5 1 : movq - 2 1 6 (% rbp ), % rax subq $ 1 0 , % rax cmpq % rax , - 4 0 (% rbp ) jle . L 5 7 . LBE 4 1 : . LBE 4 0 : . LBB 5 2 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 2 0 0 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 3 8 : . LBE 5 2 : . LBE 3 6 : movq - 2 0 0 (% rbp ), % rax addq $ 2 0 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 3 movl $ 1 8 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 5 2 , % rsp movq % rdi , - 1 6 8 (% rbp ) movq % rsi , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 4 0 (% rbp ) . LBB 3 : movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 2 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 1 2 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 1 2 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rbx , - 4 8 (% rbp ) movq % rax , - 5 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq $ 0 , - 6 4 (% rbp ) movb $ 0 , - 6 5 (% rbp ) . LBB 1 3 : movq - 1 7 6 (% rbp ), % rax subq - 5 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) leaq - 9 6 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movb % dl , - 6 5 (% rbp ) . LBE 1 3 : cmpb $ 0 , - 6 5 (% rbp ) jne . L 4 jmp . L 1 0 . L 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 8 : . LBB 1 9 : . LBB 1 6 : . LBB 1 4 : . LBB 1 5 : leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq - 8 8 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 4 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 8 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 2 , - 1 5 2 (% rbp ) movq $ 2 , - 1 4 4 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 1 0 : . LBE 1 5 : . LBE 1 4 : . LBE 1 6 : . LBB 1 7 : movq - 5 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 4 8 (% rbp ), % r 1 2 leaq - 8 0 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 2 , (% rax ) . LBE 1 7 : . LBE 1 9 : . LBE 8 : . LBB 2 0 : addq $ 1 , % rbx . L 2 : . LBE 2 0 : cmpq % r 1 3 , % rbx jl . L 1 2 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 2 1 : movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 2 1 : . LBE 2 : movq - 1 6 8 (% rbp ), % rax addq $ 1 5 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 3 9 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 8 movl $ 3 9 2 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 6 0 , % rsp movq % rdi , - 3 7 6 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) . LBB 2 : movq $ 0 , - 4 0 (% rbp ) . LBB 3 : movq $ 0 , - 4 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rcx movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 4 6 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 6 4 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 9 : . LBB 1 0 : movq % rdx , - 4 8 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 4 8 (% rbp ), % rdx andl $ 1 , % edx testq % rdx , % rdx je . L 4 jmp . L 5 . L 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 5 : . LBB 1 6 : . LBB 1 4 : . LBB 1 3 : movq - 4 8 (% rbp ), % rdx addq % rdx , - 4 0 (% rbp ) . L 5 : . LBE 1 3 : . LBE 1 4 : . LBE 1 6 : . LBE 8 : . LBB 1 7 : addq $ 1 , % rax . L 2 : . LBE 1 7 : cmpq % rcx , % rax jl . L 4 6 . LBE 5 : . LBE 4 : . LBE 3 : leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq - 2 4 8 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq $ 0 , - 3 2 8 (% rbp ) movq $ 0 , - 3 2 0 (% rbp ) . LBB 1 8 : movq $ 0 , - 3 6 8 (% rbp ) movq $ 0 , - 3 6 0 (% rbp ) movq $ 0 , - 3 5 2 (% rbp ) . LBB 1 9 : . LBB 2 0 : . LBB 2 1 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 2 1 : jmp . L 8 . L 4 7 : . LBB 2 2 : nop . LBE 2 2 : . LBB 2 3 : . LBB 2 4 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 9 cmpq % rax , % rbx jge . L 9 movq - 2 0 8 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) . LBE 2 4 : . LBB 2 5 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) . LBE 2 5 : . LBB 2 6 : . LBB 2 7 : movq - 3 6 0 (% rbp ), % rax testq % rax , % rax jg . L 1 0 jmp . L 3 8 . L 9 : . LBE 2 7 : . LBE 2 6 : . LBB 3 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : . LBE 3 5 : . LBB 3 6 : . LBB 2 9 : movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 0 : movq - 3 6 8 (% rbp ), % rax movq (% rax ), % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 2 cmpq % rdx , % rax jl . L 3 9 . L 1 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax andl $ 1 , % eax testq % rax , % rax jne . L 1 4 . LBB 2 8 : movq - 3 6 0 (% rbp ), % rax testq % rax , % rax jg . L 1 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 5 : movq - 3 6 8 (% rbp ), % rax movq (% rax ), % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 6 cmpq % rdx , % rax jl . L 4 0 . L 1 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax subq % rax , - 4 0 (% rbp ) . L 1 4 : . LBE 2 8 : . LBE 2 9 : . LBB 3 0 : movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax testq % rax , % rax jg . L 1 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 8 : movq - 1 4 4 (% rbp ), % rax movq (% rax ), % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 9 cmpq % rdx , % rax jl . L 4 1 . L 1 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq - 1 3 6 (% rbp ), % rdx testq % rdx , % rdx jg . L 2 1 movq % rdx , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 1 : movq - 1 4 4 (% rbp ), % rdx movq (% rdx ), % rdx movq 2 4 (% rbp ), % rcx testq % rdx , % rdx js . L 2 2 cmpq % rcx , % rdx jl . L 4 2 . L 2 2 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq - 3 6 0 (% rbp ), % rcx cmpq $ 1 , % rcx jg . L 2 4 movq % rcx , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 4 : movq 1 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 3 6 8 (% rbp ), % rdx addq $ 8 , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rsi salq $ 3 , % rax addq % rsi , % rax addq % rcx , % rdx movq % rdx , (% rax ) . LBE 3 0 : . LBB 3 1 : movq - 3 6 0 (% rbp ), % rax testq % rax , % rax jg . L 2 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 5 : movq - 3 6 8 (% rbp ), % rax movq (% rax ), % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 2 6 cmpq % rdx , % rax jl . L 4 3 . L 2 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax andl $ 1 , % eax testq % rax , % rax jne . L 2 8 . LBB 3 2 : movq - 3 6 0 (% rbp ), % rax testq % rax , % rax jg . L 2 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 3 6 8 (% rbp ), % rax movq (% rax ), % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 3 0 cmpq % rdx , % rax jl . L 4 4 . L 3 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq % rax , - 4 0 (% rbp ) . L 2 8 : . LBE 3 2 : . LBE 3 1 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 3 2 . LBB 3 3 : movq - 1 1 2 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) . LBE 3 3 : jmp . L 3 3 . L 3 2 : . LBB 3 4 : movq - 1 1 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rcx , - 3 3 6 (% rbp ) movq % rax , - 3 2 8 (% rbp ) movq % rdx , - 3 2 0 (% rbp ) . L 3 3 : . LBE 3 4 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 4 0 (% rbp ), % rax movq % rax , (% rdx ) . LBE 3 6 : . LBE 2 3 : . LBB 3 7 : addq $ 1 , % rbx . L 8 : . LBE 3 7 : cmpq % r 1 3 , % rbx jl . L 4 7 . LBE 2 0 : . LBE 1 9 : . LBE 1 8 : . LBB 3 8 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 3 7 6 (% rbp ), % rcx movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 8 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 8 : . LBE 2 : movq - 3 7 6 (% rbp ), % rax addq $ 3 6 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
leaq - 3 9 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 9 movl $ 3 9 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 4 4 , % rsp movq % rdi , - 3 7 6 (% rbp ) leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) leaq . LC 2 7 (% rip ), % r 1 4 movl $ 1 1 , % r 1 5 d movq % r 1 4 , - 3 2 0 (% rbp ) movq % r 1 5 , - 3 1 2 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 3 6 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 4 , - 2 9 6 (% rbp ) movq $ 4 , - 2 8 8 (% rbp ) movq $ 4 , - 2 8 0 (% rbp ) leaq . LC 2 7 (% rip ), % r 1 2 movl $ 1 1 , % r 1 3 d movq % r 1 2 , - 2 7 2 (% rbp ) movq % r 1 3 , - 2 6 4 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movq - 3 2 8 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 7 , 8 (% rax ) movq $ 9 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 1 , 3 2 (% rax ) movq - 3 2 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq $ 5 , - 2 4 8 (% rbp ) movq $ 5 , - 2 4 0 (% rbp ) movq $ 1 2 , - 2 3 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 5 . LBB 2 6 : movq - 3 4 4 (% rbp ), % rax movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) . LBE 2 6 : jmp . L 2 6 . L 2 5 : . LBB 2 7 : movq - 3 4 4 (% rbp ), % rax leaq - 3 2 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 6 : . LBE 2 7 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq $ 2 , - 3 6 0 (% rbp ) movq $ 2 , - 3 5 2 (% rbp ) . LBB 2 8 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) . LBB 2 9 : . LBB 3 0 : . LBB 3 1 : movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 3 1 : jmp . L 2 7 . L 3 8 : . LBB 3 2 : nop . LBE 3 2 : . LBB 3 3 : . LBB 3 4 : movq - 1 6 8 (% rbp ), % rax testq % rbx , % rbx js . L 2 8 cmpq % rax , % rbx jge . L 2 8 movq - 1 7 6 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 2 4 (% rbp ) movq % rdi , - 2 1 6 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 0 8 (% rbp ) movq % rdi , - 2 0 0 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) . LBE 3 4 : . LBB 3 5 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 5 6 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 2 9 jmp . L 3 6 . L 2 8 : . LBE 3 5 : . LBB 3 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : . LBE 3 8 : . LBB 3 9 : . LBB 3 6 : movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 3 1 . L 3 6 : . LBE 3 6 : . LBB 3 7 : leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 1 : . LBE 3 7 : . LBE 3 9 : . LBB 4 0 : leaq go . Solution . TestSolution 2 .. func 1 (% rip ), % r 1 4 movq - 5 6 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 2 . LBB 4 1 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 1 : jmp . L 3 3 . L 3 2 : . LBB 4 2 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 3 : . LBE 4 2 : movq - 8 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 3 7 6 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 4 0 : . LBE 3 3 : . LBB 4 3 : addq $ 1 , % rbx . L 2 7 : . LBE 4 3 : cmpq % r 1 3 , % rbx jl . L 3 8 . LBE 3 0 : . LBE 2 9 : . LBE 2 8 : addq $ 3 4 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 2 movl $ 2 6 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 3 2 , % rsp movq % rdi , - 2 4 8 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 . LBB 4 : . LBB 5 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 2 4 8 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movl $ 0 , % esi leaq string .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) movq % rbx , - 2 0 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rbx movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq 1 6 (% rbp ), % rax movq (% rax ), % r 1 2 movq 8 (% rax ), % r 1 3 leaq 1 (% rbx ), % rax movq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 5 . LBB 6 : movq - 1 6 0 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) . LBE 6 : jmp . L 6 . L 5 : . LBB 7 : movq - 1 6 0 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rdx movq % rcx , - 2 2 4 (% rbp ) movq % rax , - 2 1 6 (% rbp ) movq % rdx , - 2 0 8 (% rbp ) . L 6 : . LBE 7 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq % r 1 3 , % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 7 . LBB 8 : movq % r 1 2 , % rdx movq % rdx , (% rax ) jmp . L 8 . L 7 : . LBE 8 : . LBB 9 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 8 : . LBE 9 : movq 2 4 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 map . 6 string . 7 struct . 4 . 5 (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 4 8 (% rbp ) . LBB 1 0 : movq $ 1 , - 4 0 (% rbp ) . LBB 1 1 : jmp . L 9 . L 2 1 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 0 cmpq % rax , - 4 0 (% rbp ) jl . L 1 9 . L 1 0 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movl $ 0 , % eax movq - 2 3 2 (% rbp ), % rdx testq % rax , % rax js . L 1 2 cmpq % rdx , % rax jge . L 1 2 movq - 2 4 0 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax movl % eax , - 5 2 (% rbp ) . LBB 1 4 : movb $ 0 , - 5 3 (% rbp ) . LBB 1 5 : movl - 5 2 (% rbp ), % eax movl % eax , - 1 3 6 (% rbp ) leaq - 1 3 6 (% rbp ), % rax movl (% rax ), % edx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 map . 6 string . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapaccess 2 _fast 3 2 @ PLT movl % edx , % eax movb % al , - 5 3 (% rbp ) . LBE 1 5 : movzbl - 5 3 (% rbp ), % eax xorl $ 1 , % eax testb % al , % al jne . L 1 3 . LBB 1 6 : . LBB 1 7 : jmp . L 1 4 . L 1 2 : . LBE 1 7 : . LBE 1 6 : . LBE 1 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : . LBB 2 2 : . LBB 2 1 : . LBB 2 0 : movl - 5 2 (% rbp ), % eax movl % eax , - 1 3 2 (% rbp ) call runtime . makemap_small @ PLT movq % rax , % rbx leaq - 1 3 2 (% rbp ), % rax movl (% rax ), % edx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 map . 6 string . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapassign_fast 3 2 @ PLT leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 5 . LBB 1 8 : movq % rbx , (% rax ) jmp . L 1 4 . L 1 5 : . LBE 1 8 : . LBB 1 9 : movq % rbx , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 4 : . LBE 1 9 : . LBE 2 0 : . LBE 2 1 : . LBE 2 2 : . LBB 2 3 : movq - 4 8 (% rbp ), % rax movl - 5 2 (% rbp ), % edx movq - 2 4 0 (% rbp ), % r 1 2 movq - 2 3 2 (% rbp ), % r 1 3 movl % edx , - 6 0 (% rbp ) leaq - 6 0 (% rbp ), % rdx movl (% rdx ), % edx movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 map . 6 string . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax movq % r 1 2 , % rdx movq % r 1 3 , % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapassign_faststr @ PLT . LBE 2 3 : . LBE 1 3 : . LBB 2 4 : addq $ 1 , - 4 0 (% rbp ) . L 9 : . LBE 2 4 : movq 2 4 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 2 1 . LBE 1 1 : . LBE 1 0 : . LBB 2 5 : leaq - 1 2 8 (% rbp ), % rax movq - 4 8 (% rbp ), % rdx subq $ 8 , % rsp pushq - 2 0 8 (% rbp ) pushq - 2 1 6 (% rbp ) pushq - 2 2 4 (% rbp ) movq % rdx , % rsi movq % rax , % rdi call go . day 2 4 6 . circleWords addq $ 3 2 , % rsp movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 2 4 8 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 2 5 : . LBE 2 : movq - 2 4 8 (% rbp ), % rax leaq - 2 4 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 5 movl $ 2 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 6 4 , % rsp movq % rdi , % rcx movq % rsi , % rax movq % rax , % rbx movq % rcx , - 2 7 2 (% rbp ) movq % rbx , - 2 6 4 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 1 , - 2 8 0 (% rbp ) jle . L 2 . LBB 4 : leaq - 8 0 (% rbp ), % rdi movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rdx , % rcx movq % rax , % rdx movl $ 0 , % esi call runtime . stringtoslicebyte @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) leaq go . leetcode 0 8 9 9 . orderlyQueue .. func 1 (% rip ), % rcx leaq - 2 0 8 (% rbp ), % rdx movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq % rax , - 1 2 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq % rcx , (% rax ) movq % rdx , 8 (% rax ) movq - 1 2 0 (% rbp ), % rbx leaq type ... 6 . 7 uint 8 (% rip ), % r 1 2 leaq type ... 6 . 7 uint 8 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 . LBB 5 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 5 : jmp . L 4 . L 3 : . LBB 6 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 uint 8 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 : . LBE 6 : movq - 1 8 4 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call sort . Slice @ PLT . LBB 7 : subq $ 8 , % rsp pushq - 1 9 2 (% rbp ) pushq - 2 0 0 (% rbp ) pushq - 2 0 8 (% rbp ) movl $ 0 , % edi call runtime . slicebytetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx jmp . L 2 0 . L 2 : . LBE 7 : . LBE 4 : . LBE 3 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . LBB 8 : movq $ 1 , - 4 0 (% rbp ) . LBB 9 : jmp . L 6 . L 2 4 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : movq - 2 6 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 7 cmpq % rax , - 4 0 (% rbp ) jle . L 2 1 . L 7 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 2 1 : movl $ 0 , % eax movq - 2 6 4 (% rbp ), % rdx cmpq $ 0 , - 4 0 (% rbp ) js . L 9 cmpq % rdx , - 4 0 (% rbp ) jg . L 9 testq % rax , % rax jns . L 1 0 jmp . L 1 1 . L 9 : movq - 4 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAlen @ PLT . L 1 0 : cmpq - 4 0 (% rbp ), % rax jle . L 2 2 . L 1 1 : movq - 4 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 2 2 : movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rdx cmpq % rdx , - 4 0 (% rbp ) je . L 1 3 movq - 4 0 (% rbp ), % rdx jmp . L 1 4 . L 1 3 : movl $ 0 , % edx . L 1 4 : addq % rcx , % rdx movq % rdx , - 1 1 2 (% rbp ) movq - 2 6 4 (% rbp ), % rdx subq - 4 0 (% rbp ), % rdx movq % rdx , - 1 0 4 (% rbp ) movq - 2 7 2 (% rbp ), % rdx cmpq % rax , - 4 0 (% rbp ) je . L 1 5 movq % rax , % rcx jmp . L 1 6 . L 1 5 : movl $ 0 , % ecx . L 1 6 : addq % rcx , % rdx movq % rdx , - 9 6 (% rbp ) movq - 4 0 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 8 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) . LBB 1 2 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq - 2 4 0 (% rbp ), % rdi movq - 2 3 2 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . cmpstring @ PLT testq % rax , % rax jle . L 1 7 . LBB 1 3 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . L 1 7 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 4 : addq $ 1 , - 4 0 (% rbp ) . L 6 : . LBE 1 4 : movq - 4 0 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 2 4 . LBE 9 : . LBE 8 : . LBB 1 5 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx . L 2 0 : . LBE 1 5 : . LBE 2 : leaq - 2 4 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 1 4 1 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 4 movl $ 1 4 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 3 6 8 , % rsp movq % rdi , - 1 1 2 8 (% rbp ) leaq main . Node .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 5 2 (% rbp ) cmpq $ 0 , - 1 1 2 8 (% rbp ) jne . L 2 call runtime . panicmem @ PLT . L 2 : movq - 1 1 2 8 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 . LBB 2 : movq - 5 5 2 (% rbp ), % rcx movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 2 : jmp . L 4 . L 3 : . LBB 3 : movq - 5 5 2 (% rbp ), % rcx leaq - 5 4 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq main . Node .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 : . LBE 3 : movq - 5 5 2 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq $ 0 , - 1 0 8 8 (% rbp ) movq $ 0 , - 1 0 8 0 (% rbp ) . LBB 4 : movq $ 0 , - 1 1 2 0 (% rbp ) movq $ 0 , - 1 1 1 2 (% rbp ) movq $ 0 , - 1 1 0 4 (% rbp ) movq $ 0 , - 1 0 9 6 (% rbp ) leaq type ... 1 main . Node (% rip ), % r 1 4 movq - 5 6 (% rbp ), % r 1 5 leaq int .. d (% rip ), % rbx movq % rbx , - 1 4 0 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 0 (% rbp ) movq - 1 0 4 0 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , (% rdx ) movq - 1 0 4 0 (% rbp ), % rax movq % rax , - 1 4 0 0 (% rbp ) movq % rbx , - 1 3 9 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 3 2 (% rbp ) movq - 1 0 3 2 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq 4 0 (% rax ), % rax movq % rax , (% rdx ) movq - 1 0 3 2 (% rbp ), % rax movq % rax , - 1 3 8 4 (% rbp ) movq % r 1 4 , - 1 0 2 4 (% rbp ) movq % r 1 5 , - 1 0 1 6 (% rbp ) movdqa - 1 4 0 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 0 0 8 (% rbp ) movdqa - 1 3 9 2 (% rbp ), % xmm 1 movups % xmm 1 , - 9 9 2 (% rbp ) leaq - 1 0 2 4 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq $ 3 , - 4 8 8 (% rbp ) movq $ 3 , - 4 8 0 (% rbp ) leaq . LC 4 4 (% rip ), % r 1 2 movl $ 2 1 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax subq $ 8 , % rsp pushq - 4 8 0 (% rbp ) pushq - 4 8 8 (% rbp ) pushq - 4 9 6 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp leaq - 4 6 4 (% rbp ), % rdi leaq - 1 1 2 0 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call strings . Builder . WriteString @ PLT movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 1 0 7 2 (% rbp ) movq % rdx , - 1 0 6 4 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 1 0 5 6 (% rbp ) . LBB 5 : movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax jne . L 5 . LBB 6 : leaq . LC 4 5 (% rip ), % rax movq % rax , - 1 2 6 4 (% rbp ) movq $ 1 2 , - 1 2 5 6 (% rbp ) leaq - 4 3 2 (% rbp ), % rdi leaq - 1 1 2 0 (% rbp ), % rax movq - 1 2 6 4 (% rbp ), % rdx movq - 1 2 5 6 (% rbp ), % rcx movq % rax , % rsi call strings . Builder . WriteString @ PLT movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 9 7 6 (% rbp ) movq % rdx , - 9 6 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 9 6 0 (% rbp ) . LBE 6 : jmp . L 6 . L 5 : . LBB 7 : leaq int .. d (% rip ), % rbx movq % rbx , - 1 3 7 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 1 2 (% rbp ) movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax movq - 9 1 2 (% rbp ), % rdx movq (% rax ), % rax movq % rax , (% rdx ) movq - 9 1 2 (% rbp ), % rax movq % rax , - 1 3 6 8 (% rbp ) movq % rbx , - 1 3 6 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 0 4 (% rbp ) movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax movq - 9 0 4 (% rbp ), % rdx movq 4 0 (% rax ), % rax movq % rax , (% rdx ) movq - 9 0 4 (% rbp ), % rax movq % rax , - 1 3 5 2 (% rbp ) movdqa - 1 3 7 6 (% rbp ), % xmm 2 movups % xmm 2 , - 8 9 6 (% rbp ) movdqa - 1 3 6 0 (% rbp ), % xmm 3 movups % xmm 3 , - 8 8 0 (% rbp ) leaq - 8 9 6 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 2 , - 3 9 2 (% rbp ) movq $ 2 , - 3 8 4 (% rbp ) leaq . LC 4 6 (% rip ), % rax movq % rax , - 1 2 4 8 (% rbp ) movq $ 1 6 , - 1 2 4 0 (% rbp ) movq - 1 2 4 8 (% rbp ), % rax movq - 1 2 4 0 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 3 8 4 (% rbp ) pushq - 3 9 2 (% rbp ) pushq - 4 0 0 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp leaq - 3 6 8 (% rbp ), % rdi leaq - 1 1 2 0 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call strings . Builder . WriteString @ PLT movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 9 4 4 (% rbp ) movq % rdx , - 9 3 6 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 9 2 8 (% rbp ) . L 6 : . LBE 7 : . LBE 5 : . LBB 8 : movq - 5 6 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax jne . L 7 . LBB 9 : leaq . LC 4 7 (% rip ), % rax movq % rax , - 1 2 3 2 (% rbp ) movq $ 1 3 , - 1 2 2 4 (% rbp ) leaq - 3 3 6 (% rbp ), % rdi leaq - 1 1 2 0 (% rbp ), % rax movq - 1 2 3 2 (% rbp ), % rdx movq - 1 2 2 4 (% rbp ), % rcx movq % rax , % rsi call strings . Builder . WriteString @ PLT movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 8 6 4 (% rbp ) movq % rdx , - 8 5 6 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 8 4 8 (% rbp ) . LBE 9 : jmp . L 8 . L 7 : . LBB 1 0 : leaq int .. d (% rip ), % rbx movq % rbx , - 1 3 4 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 0 0 (% rbp ) movq - 5 6 (% rbp ), % rax movq 1 6 (% rax ), % rax movq - 8 0 0 (% rbp ), % rdx movq (% rax ), % rax movq % rax , (% rdx ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 1 3 3 6 (% rbp ) movq % rbx , - 1 3 2 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 9 2 (% rbp ) movq - 5 6 (% rbp ), % rax movq 1 6 (% rax ), % rax movq - 7 9 2 (% rbp ), % rdx movq 4 0 (% rax ), % rax movq % rax , (% rdx ) movq - 7 9 2 (% rbp ), % rax movq % rax , - 1 3 2 0 (% rbp ) movdqa - 1 3 4 4 (% rbp ), % xmm 4 movups % xmm 4 , - 7 8 4 (% rbp ) movdqa - 1 3 2 8 (% rbp ), % xmm 5 movups % xmm 5 , - 7 6 8 (% rbp ) leaq - 7 8 4 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 2 , - 2 9 6 (% rbp ) movq $ 2 , - 2 8 8 (% rbp ) leaq . LC 4 8 (% rip ), % rax movq % rax , - 1 2 1 6 (% rbp ) movq $ 1 7 , - 1 2 0 8 (% rbp ) movq - 1 2 1 6 (% rbp ), % rax movq - 1 2 0 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 2 8 8 (% rbp ) pushq - 2 9 6 (% rbp ) pushq - 3 0 4 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp leaq - 2 7 2 (% rbp ), % rdi leaq - 1 1 2 0 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call strings . Builder . WriteString @ PLT movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 8 3 2 (% rbp ) movq % rdx , - 8 2 4 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 8 1 6 (% rbp ) . L 8 : . LBE 1 0 : . LBE 8 : . LBB 1 1 : movq - 5 6 (% rbp ), % rax movq 2 4 (% rax ), % rax testq % rax , % rax jne . L 9 . LBB 1 2 : leaq . LC 4 9 (% rip ), % rax movq % rax , - 1 2 0 0 (% rbp ) movq $ 1 4 , - 1 1 9 2 (% rbp ) leaq - 2 4 0 (% rbp ), % rax leaq - 1 1 2 0 (% rbp ), % rsi movq - 1 2 0 0 (% rbp ), % rdx movq - 1 1 9 2 (% rbp ), % rcx movq % rax , % rdi call strings . Builder . WriteString @ PLT movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 7 5 2 (% rbp ) movq % rdx , - 7 4 4 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 7 3 6 (% rbp ) . LBE 1 2 : jmp . L 1 0 . L 9 : . LBB 1 3 : leaq int .. d (% rip ), % rbx movq % rbx , - 1 3 1 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 8 8 (% rbp ) movq - 5 6 (% rbp ), % rax movq 2 4 (% rax ), % rdx movq - 6 8 8 (% rbp ), % rax movq (% rdx ), % rdx movq % rdx , (% rax ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 1 3 0 4 (% rbp ) movq % rbx , - 1 2 9 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 8 0 (% rbp ) movq - 5 6 (% rbp ), % rax movq 2 4 (% rax ), % rdx movq - 6 8 0 (% rbp ), % rax movq 4 0 (% rdx ), % rdx movq % rdx , (% rax ) movq - 6 8 0 (% rbp ), % rax movq % rax , - 1 2 8 8 (% rbp ) movdqa - 1 3 1 2 (% rbp ), % xmm 6 movups % xmm 6 , - 6 7 2 (% rbp ) movdqa - 1 2 9 6 (% rbp ), % xmm 7 movups % xmm 7 , - 6 5 6 (% rbp ) leaq - 6 7 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 2 , - 2 0 0 (% rbp ) movq $ 2 , - 1 9 2 (% rbp ) leaq . LC 5 0 (% rip ), % rax movq % rax , - 1 1 8 4 (% rbp ) movq $ 1 8 , - 1 1 7 6 (% rbp ) movq - 1 1 8 4 (% rbp ), % rax movq - 1 1 7 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 9 2 (% rbp ) pushq - 2 0 0 (% rbp ) pushq - 2 0 8 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp leaq - 1 7 6 (% rbp ), % rdi leaq - 1 1 2 0 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call strings . Builder . WriteString @ PLT movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 7 2 0 (% rbp ) movq % rdx , - 7 1 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 7 0 4 (% rbp ) . L 1 0 : . LBE 1 3 : . LBE 1 1 : . LBB 1 4 : movq - 5 6 (% rbp ), % rax movq 3 2 (% rax ), % rax testq % rax , % rax jne . L 1 1 . LBB 1 5 : leaq . LC 5 1 (% rip ), % rax movq % rax , - 1 1 6 8 (% rbp ) movq $ 1 4 , - 1 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax leaq - 1 1 2 0 (% rbp ), % rsi movq - 1 1 6 8 (% rbp ), % rdx movq - 1 1 6 0 (% rbp ), % rcx movq % rax , % rdi call strings . Builder . WriteString @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) . LBE 1 5 : jmp . L 1 2 . L 1 1 : . LBB 1 6 : leaq int .. d (% rip ), % rax movq % rax , - 1 2 8 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 8 4 (% rbp ) movq - 5 6 (% rbp ), % rax movq 3 2 (% rax ), % rdx movq - 5 8 4 (% rbp ), % rax movq (% rdx ), % rdx movq % rdx , (% rax ) movq - 5 8 4 (% rbp ), % rax movq % rax , - 1 2 7 2 (% rbp ) movdqa - 1 2 8 0 (% rbp ), % xmm 0 movups % xmm 0 , - 5 7 6 (% rbp ) leaq - 5 7 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq . LC 5 2 (% rip ), % rax movq % rax , - 1 1 5 2 (% rbp ) movq $ 1 3 , - 1 1 4 4 (% rbp ) movq - 1 1 5 2 (% rbp ), % rax movq - 1 1 4 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp leaq - 8 0 (% rbp ), % rdi leaq - 1 1 2 0 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call strings . Builder . WriteString @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 6 0 8 (% rbp ) movq % rdx , - 6 0 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) . L 1 2 : . LBE 1 6 : . LBE 1 4 : . LBB 1 7 : leaq - 1 1 2 0 (% rbp ), % rax movq % rax , % rdi call strings . Builder . String @ PLT movq % rax , - 1 0 8 8 (% rbp ) movq % rdx , - 1 0 8 0 (% rbp ) movq - 1 0 8 8 (% rbp ), % rax movq - 1 0 8 0 (% rbp ), % rdx . LBE 1 7 : . LBE 4 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 7 movl $ 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 7 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 7 2 , % rsp movq % rdi , - 7 2 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 7 2 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 6 : movq - 7 2 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : addq $ 1 , - 2 4 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 4 0 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 4 0 (% rbp ) . L 4 : . LBE 1 0 : cmpq $ 0 , - 4 0 (% rbp ) jne . L 1 5 . LBE 7 : . LBE 6 : . LBB 1 1 : movq - 7 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . LBB 1 2 : jmp . L 7 . L 1 6 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : addq $ 1 , - 3 2 (% rbp ) . LBE 1 4 : . LBB 1 5 : movq - 4 8 (% rbp ), % rax movq 2 4 (% rax ), % rax movq % rax , - 4 8 (% rbp ) . L 7 : . LBE 1 5 : cmpq $ 0 , - 4 8 (% rbp ) jne . L 1 6 . LBE 1 2 : . LBE 1 1 : . LBB 1 6 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jne . L 1 0 . LBB 1 7 : . LBB 1 8 : movq - 2 4 (% rbp ), % rax cmpq $ 6 3 , % rax ja . L 1 1 movl $ 1 , % edx movl % eax , % ecx salq % cl , % rdx movq % rdx , % rax subq $ 1 , % rax jmp . L 1 2 . L 1 1 : movq $- 1 , % rax . L 1 2 : movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax jmp . L 3 . L 1 0 : . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 1 9 : movq - 7 2 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , % rdi call go . day 2 0 4 . CountCompleteBinaryTree movq % rax , % rbx movq - 7 2 (% rbp ), % rax movq 2 4 (% rax ), % rax movq % rax , % rdi call go . day 2 0 4 . CountCompleteBinaryTree addq % rbx , % rax addq $ 1 , % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax . L 3 : . LBE 1 9 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 7 movl $ 7 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 2 : ret . L 5 7 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq % rdi , - 5 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 4 5 : movq $ 0 , - 8 (% rbp ) movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . LBB 4 6 : . LBB 4 7 : jmp . L 4 6 . L 5 6 : . LBB 4 8 : nop . LBE 4 8 : . LBB 4 9 : movq - 1 6 (% rbp ), % rdx movq - 8 (% rbp ), % rax addq % rdx , % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , - 3 2 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 4 7 cmpq % rax , - 3 2 (% rbp ) jl . L 5 4 . L 4 7 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 4 0 (% rbp ) . LBB 5 0 : movq - 5 6 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jne . L 4 9 . LBB 5 1 : . LBB 5 2 : movq - 3 2 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 5 0 . L 4 9 : . LBE 5 2 : . LBE 5 1 : . LBE 5 0 : . LBB 5 3 : movq - 4 0 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jge . L 5 1 . LBB 5 4 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 8 (% rbp ) . LBE 5 4 : jmp . L 4 6 . L 5 1 : . LBB 5 5 : . LBB 5 6 : movq - 4 0 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jle . L 4 6 . LBB 5 7 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . L 4 6 : . LBE 5 7 : . LBE 5 6 : . LBE 5 5 : . LBE 5 3 : . LBE 4 9 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jle . L 5 6 . LBE 4 7 : . LBE 4 6 : . LBB 5 8 : movq $- 1 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 5 0 : . LBE 5 8 : . LBE 4 5 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 movl $ 1 3 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 subq $ 1 1 2 , % rsp movl $ 6 , % edi call main . nthPrime movq % rax , - 2 4 (% rbp ) leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 (% rbp ) movq - 1 0 4 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 0 4 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 9 6 (% rbp ) movq % r 1 3 , - 8 8 (% rbp ) leaq - 9 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 1 , - 7 2 (% rbp ) movq $ 1 , - 6 4 (% rbp ) leaq - 4 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) leaq - 1 6 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 4 7 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 7 movl $ 4 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : . LEHB 0 : ret . L 2 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 2 4 , % rsp . LEHE 0 : movb $ 0 , - 3 3 7 (% rbp ) . LBB 2 : . LBB 3 : movq $ 0 , - 3 6 8 (% rbp ) movq $ 0 , - 3 6 0 (% rbp ) . LBB 4 : movq 1 6 + os . Args (% rip ), % rax testq % rax , % rax jg . L 2 movq % rax , % rsi movl $ 1 , % edi . LEHB 1 : call runtime . goPanicSliceB @ PLT . L 2 : movq os . Args (% rip ), % rdx movq 1 6 + os . Args (% rip ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 4 , % rax addq % rdx , % rax movq % rax , - 3 3 6 (% rbp ) movq 8 + os . Args (% rip ), % rax subq $ 1 , % rax movq % rax , - 3 2 8 (% rbp ) movq 1 6 + os . Args (% rip ), % rax subq $ 1 , % rax movq % rax , - 3 2 0 (% rbp ) . LBB 5 : . LBB 6 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % rax movq % rax , - 4 5 6 (% rbp ) movl $ 0 , % r 1 4 d . LBE 6 : jmp . L 3 . L 2 6 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 9 6 (% rbp ), % rax testq % r 1 4 , % r 1 4 js . L 4 cmpq % rax , % r 1 4 jge . L 4 movq - 3 0 4 (% rbp ), % rax movq % r 1 4 , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : leaq - 1 4 4 (% rbp ), % rax movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call os . Open @ PLT jmp . L 2 3 . L 4 : . LBE 1 1 : . LBB 1 9 : movq % rax , % rsi movq % r 1 4 , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : . LBE 1 9 : . LBB 2 0 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq - 2 5 6 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) . LBB 1 2 : movq - 3 8 4 (% rbp ), % rax testq % rax , % rax je . L 6 . LBB 1 3 : movq - 3 8 4 (% rbp ), % rax movq 8 (% rax ), % rdx movq - 3 7 6 (% rbp ), % rax movq % rax , % rdi call *% rdx . LVL 1 : movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq string .. d (% rip ), % rax movq % rax , - 4 4 8 (% rbp ) leaq go .. C 6 (% rip ), % rbx movq % rbx , - 4 4 0 (% rbp ) movq % rax , - 4 3 2 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq % r 1 2 , - 2 4 0 (% rbp ) movq % r 1 3 , - 2 3 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 . LBB 1 4 : movq - 2 4 8 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 4 : jmp . L 8 . L 7 : . LBB 1 5 : movq - 2 4 8 (% rbp ), % rax leaq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 5 : movq - 2 4 8 (% rbp ), % rax movq % rax , - 4 2 4 (% rbp ) movdqa - 4 4 8 (% rbp ), % xmm 0 movups % xmm 0 , - 2 2 4 (% rbp ) movdqa - 4 3 2 (% rbp ), % xmm 1 movups % xmm 1 , - 2 0 8 (% rbp ) leaq - 2 2 4 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 2 , - 1 0 4 (% rbp ) movq $ 2 , - 9 6 (% rbp ) subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) call log . Fatalln @ PLT addq $ 3 2 , % rsp . L 6 : . LBE 1 3 : . LBE 1 2 : . LBB 1 6 : leaq type .. struct . 4 . 4 x . 5 a 0 . 0 . 1 os . File . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 9 2 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 1 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 1 8 4 (% rbp ), % rax movq % rax , % rdx movq - 1 9 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 0 : . LBE 1 8 : movq - 1 9 2 (% rbp ), % rdx leaq main . main .. thunk 0 (% rip ), % rcx leaq - 3 3 7 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . deferproc @ PLT . LBE 1 6 : leaq pimt .. interface . 4 Read . 0 func . 8 . 6 . 7 uint 8 . 9 . 8 int . 3 error . 9 . 5 .. os . File (% rip ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 4 0 8 (% rbp ) leaq pimt .. interface . 4 Write . 0 func . 8 . 6 . 7 uint 8 . 9 . 8 int . 3 error . 9 . 5 .. os . File (% rip ), % rax movq % rax , - 4 0 0 (% rbp ) movq os . Stdout (% rip ), % rax movq % rax , - 3 9 2 (% rbp ) leaq - 8 0 (% rbp ), % r 9 movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rdi movq % rdx , % r 8 movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % rax movq % rdi , % rcx movq % rax , % rdx movq % r 9 , % rdi call io . Copy @ PLT . LEHE 1 : movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) . LBE 2 0 : . LBE 8 : . LBB 2 1 : addq $ 1 , % r 1 4 . L 3 : . LBE 2 1 : cmpq - 4 5 6 (% rbp ), % r 1 4 jl . L 2 6 . L 1 5 : . LBE 5 : . LBE 4 : . LBE 3 : . LBE 2 : movl $ 1 , % ebx . L 1 9 : leaq - 3 3 7 (% rbp ), % rax movq % rax , % rdi . LEHB 2 : call runtime . deferreturn @ PLT . LEHE 2 : cmpl $ 1 , % ebx jne . L 1 3 jmp . L 2 5 . L 2 0 : leaq - 3 3 7 (% rbp ), % rax movq % rax , % rdi . LEHB 3 : call runtime . checkdefer @ PLT . LEHE 3 : jmp . L 1 5 . L 2 1 : movq % rax , % r 1 5 movl $ 0 , % ebx jmp . L 1 9 . L 1 3 : movq % r 1 5 , % rax movq % rax , % rdi . LEHB 4 : call _Unwind_Resume @ PLT . L 2 2 : leaq - 3 3 7 (% rbp ), % rax movq % rax , % rdi call runtime . checkdefer @ PLT jmp . L 1 9 . L 2 5 : leaq - 4 0 (% rbp ), % rsp . LEHE 4 : popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 9 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 8 movl $ 3 9 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 5 2 , % rsp movq % rdi , - 3 7 6 (% rbp ) leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 3 6 (% rbp ) leaq . LC 2 3 (% rip ), % r 1 2 movl $ 1 1 , % r 1 3 d movq % r 1 2 , - 2 5 6 (% rbp ) movq % r 1 3 , - 2 4 8 (% rbp ) leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 0 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 3 , - 2 9 6 (% rbp ) movq $ 3 , - 2 8 8 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq $ 4 , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 2 8 0 (% rbp ) movq $ 1 , - 2 7 2 (% rbp ) movq $ 1 , - 2 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 3 2 8 (% rbp ), % rax movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 3 2 8 (% rbp ), % rax leaq - 3 0 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 3 2 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 2 , - 2 3 2 (% rbp ) movq $ 2 , - 2 2 4 (% rbp ) movq $ 7 , - 2 1 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 3 3 6 (% rbp ), % rax movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 2 2 4 (% rbp ), % rcx movq - 2 1 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 3 3 6 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 3 3 6 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq $ 1 , - 3 6 0 (% rbp ) movq $ 1 , - 3 5 2 (% rbp ) . LBB 6 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 (% rbp ) . LBB 7 : . LBB 8 : . LBB 9 : movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 9 : jmp . L 6 . L 1 7 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 7 cmpq % rax , % rbx jge . L 7 movq - 1 6 0 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 0 8 (% rbp ) movq % rdi , - 2 0 0 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 1 9 2 (% rbp ) movq % rdi , - 1 8 4 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) . LBE 1 2 : . LBB 1 3 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 4 0 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 8 jmp . L 1 5 . L 7 : . LBE 1 3 : . LBB 1 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 8 : . LBE 1 6 : . LBB 1 7 : . LBB 1 4 : movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 1 0 . L 1 5 : . LBE 1 4 : . LBB 1 5 : leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 5 : . LBE 1 7 : . LBB 1 8 : leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 4 0 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq % r 1 4 , - 6 4 (% rbp ) movq % r 1 2 , - 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 . LBB 1 9 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 9 : jmp . L 1 2 . L 1 1 : . LBB 2 0 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 : . LBE 2 0 : movq - 7 2 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 3 7 6 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 8 : . LBE 1 1 : . LBB 2 1 : addq $ 1 , % rbx . L 6 : . LBE 2 1 : cmpq % r 1 3 , % rbx jl . L 1 7 . LBE 8 : . LBE 7 : . LBE 6 : addq $ 3 5 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 0 2 movl $ 3 7 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 5 : ret . L 1 0 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 2 8 , % rsp movq % rsi , % rax movq % rdi , % r 1 0 movq % r 1 0 , % rsi movq % r 1 1 , % rdi movq % rax , % rdi movq % rsi , - 3 2 0 (% rbp ) movq % rdi , - 3 1 2 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) . LBB 3 8 : . LBB 3 9 : movq 2 4 (% rbp ), % rax cmpq $ 4 , % rax sete % al testb % al , % al je . L 4 2 . LBB 4 0 : movq - 3 1 2 (% rbp ), % rax testq % rax , % rax sete % al . L 4 2 : . LBE 4 0 : . LBE 3 9 : testb % al , % al je . L 4 3 . LBB 4 1 : leaq . LC 2 5 (% rip ), % rcx movl $ 1 , % ebx movq % rcx , % rsi movq % rbx , % rdi movq % rcx , % rax movq % rbx , % rdx movq % rsi , % rcx movq % rdx , % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call strings . Join @ PLT addq $ 3 2 , % rsp movq % rax , % r 1 2 movq % rdx , % r 1 3 movq - 3 2 8 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % r 1 4 leaq 1 (% r 1 4 ), % rax movq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 4 . LBB 4 2 : movq - 3 2 8 (% rbp ), % rbx movq - 2 8 8 (% rbp ), % rsi leaq - 1 6 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 4 , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 5 . LBB 4 3 : movq - 2 5 6 (% rbp ), % rax movq % rax , (% rbx ) . LBE 4 3 : jmp . L 4 6 . L 4 5 : . LBB 4 4 : movq - 2 5 6 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 4 6 . L 4 4 : . LBE 4 4 : . LBE 4 2 : . LBB 4 5 : movq - 2 8 8 (% rbp ), % rsi movq - 2 7 2 (% rbp ), % rdx movq - 3 2 8 (% rbp ), % rcx movq % rsi , (% rcx ) movq - 3 2 8 (% rbp ), % rcx movq % rax , 8 (% rcx ) movq - 3 2 8 (% rbp ), % rax movq % rdx , 1 6 (% rax ) . L 4 6 : . LBE 4 5 : movq - 3 2 8 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % r 1 4 , % rdx salq $ 4 , % rdx addq % rdx , % rax movq % r 1 3 , % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 4 7 . LBB 4 6 : movq % r 1 2 , % rdx movq % rdx , (% rax ) . LBE 4 6 : jmp . L 4 1 . L 4 7 : . LBB 4 7 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . LBE 4 7 : jmp . L 4 1 . L 4 3 : . LBE 4 1 : . LBE 3 8 : . LBB 4 8 : . LBB 4 9 : . LBB 5 0 : movq 2 4 (% rbp ), % rax cmpq $ 4 , % rax sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 5 0 . LBB 5 1 : movq - 3 1 2 (% rbp ), % rdx movq 2 4 (% rbp ), % rax movq % rax , % rsi leaq 0 (,% rax , 4 ), % rcx movq % rsi , % rax subq % rcx , % rax addq $ 1 2 , % rax cmpq % rax , % rdx setg % al . L 5 0 : . LBE 5 1 : . LBE 5 0 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 5 1 . LBB 5 2 : movq - 3 1 2 (% rbp ), % rax movq 2 4 (% rbp ), % rcx movl $ 4 , % edx subq % rcx , % rdx cmpq % rdx , % rax setl % al . L 5 1 : . LBE 5 2 : . LBE 4 9 : testb % al , % al jne . L 9 8 . LBE 4 8 : . LBB 5 4 : movq $ 1 , - 5 6 (% rbp ) . LBB 5 5 : jmp . L 5 3 . L 1 0 1 : . LBB 5 6 : nop . LBE 5 6 : . LBB 5 7 : . LBB 5 8 : movq - 3 1 2 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jg . L 9 9 . LBE 5 8 : movl $ 0 , % eax movq - 3 1 2 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 5 6 cmpq % rdx , - 5 6 (% rbp ) jg . L 5 6 testq % rax , % rax jns . L 5 7 jmp . L 5 8 . L 5 6 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAlen @ PLT . L 5 7 : cmpq - 5 6 (% rbp ), % rax jg . L 5 8 movq - 3 2 0 (% rbp ), % rdx cmpq % rax , - 5 6 (% rbp ) jne . L 5 9 jmp . L 9 2 . L 5 8 : movq - 5 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 5 9 : movq % rax , % rcx jmp . L 6 1 . L 9 2 : movl $ 0 , % ecx . L 6 1 : addq % rcx , % rdx movq % rdx , - 3 6 8 (% rbp ) movq - 5 6 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 3 6 0 (% rbp ) leaq - 1 2 8 (% rbp ), % rax movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx movq % rax , % rdi call strconv . Atoi @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 2 1 6 (% rbp ), % rax movq - 2 0 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) . LBB 6 0 : . LBB 6 1 : movl $ 0 , % eax movq - 3 1 2 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 6 2 cmpq % rdx , - 5 6 (% rbp ) jg . L 6 2 testq % rax , % rax jns . L 6 3 jmp . L 6 4 . L 6 2 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAlen @ PLT . L 6 3 : cmpq - 5 6 (% rbp ), % rax jg . L 6 4 movq - 3 2 0 (% rbp ), % rdx cmpq % rax , - 5 6 (% rbp ) jne . L 6 5 jmp . L 9 3 . L 6 4 : movq - 5 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 6 5 : movq % rax , % rcx jmp . L 6 7 . L 9 3 : movl $ 0 , % ecx . L 6 7 : addq % rcx , % rdx movq % rdx , % r 1 4 movq - 5 6 (% rbp ), % rdx subq % rax , % rdx movq % rdx , % r 1 5 movq - 6 4 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq % r 1 5 , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jne . L 6 8 movq % r 1 4 , % rsi movq % rax , % rcx cmpq % rcx , % rsi je . L 6 9 movq % rdx , % rcx movq % rcx , % rsi movq % rax , % rcx movq % r 1 4 , % rax movq % rsi , % rdx movq % rcx , % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax je . L 6 9 . L 6 8 : movl $ 1 , % eax jmp . L 7 0 . L 6 9 : movl $ 0 , % eax . L 7 0 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 7 1 . LBB 6 2 : cmpq $ 2 5 5 , - 6 4 (% rbp ) setg % al . L 7 1 : . LBE 6 2 : . LBE 6 1 : testb % al , % al jne . L 1 0 0 . LBE 6 0 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rbx movl $ 0 , % eax movq - 3 1 2 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 7 3 cmpq % rdx , - 5 6 (% rbp ) jg . L 7 3 testq % rax , % rax jns . L 7 4 jmp . L 7 5 . L 7 3 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAlen @ PLT . L 7 4 : cmpq - 5 6 (% rbp ), % rax jg . L 7 5 movq - 3 2 0 (% rbp ), % rdx cmpq % rax , - 5 6 (% rbp ) jne . L 7 6 jmp . L 9 4 . L 7 5 : movq - 5 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 7 6 : movq % rax , % rcx jmp . L 7 8 . L 9 4 : movl $ 0 , % ecx . L 7 8 : addq % rcx , % rdx movq % rdx , % r 1 2 movq - 5 6 (% rbp ), % rdx subq % rax , % rdx movq % rdx , % r 1 3 leaq 1 (% rbx ), % rax movq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 7 9 . LBB 6 4 : movq - 1 9 2 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rbp ) movq % rdx , 2 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , 3 2 (% rbp ) . LBE 6 4 : jmp . L 8 0 . L 7 9 : . LBB 6 5 : movq - 1 9 2 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rdx movq % rcx , 1 6 (% rbp ) movq % rax , 2 4 (% rbp ) movq % rdx , 3 2 (% rbp ) . L 8 0 : . LBE 6 5 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq % r 1 3 , % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 8 1 . LBB 6 6 : movq % r 1 2 , % rdx movq % rdx , (% rax ) jmp . L 8 2 . L 8 1 : . LBE 6 6 : . LBB 6 7 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 8 2 : . LBE 6 7 : movq - 3 1 2 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 8 3 cmpq % rax , - 5 6 (% rbp ) jg . L 8 3 movq - 3 2 0 (% rbp ), % rdx movq - 3 1 2 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 8 4 jmp . L 9 5 . L 8 3 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 8 4 : movq - 5 6 (% rbp ), % rax jmp . L 8 6 . L 9 5 : movl $ 0 , % eax . L 8 6 : addq % rdx , % rax movq % rax , - 3 5 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax subq - 5 6 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) movq - 3 2 8 (% rbp ), % rax movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rcx subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdx movq % rsi , % rdi movq % rcx , % rsi call go . Solution . dfs addq $ 3 2 , % rsp movq 2 4 (% rbp ), % rax leaq - 1 (% rax ), % rdi movq 3 2 (% rbp ), % rax testq % rdi , % rdi js . L 8 7 cmpq % rax , % rdi jg . L 8 7 testq % rdi , % rdi jns . L 8 8 jmp . L 9 6 . L 8 7 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 9 6 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 8 8 : movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax movq % rdx , 1 6 (% rbp ) movq % rdi , 2 4 (% rbp ) movq % rax , 3 2 (% rbp ) jmp . L 9 0 . L 9 9 : . LBB 6 8 : . LBB 5 9 : nop jmp . L 9 0 . L 1 0 0 : . LBE 5 9 : . LBE 6 8 : . LBB 6 9 : . LBB 6 3 : nop . L 9 0 : . LBE 6 3 : . LBE 6 9 : . LBE 5 7 : . LBB 7 0 : addq $ 1 , - 5 6 (% rbp ) . L 5 3 : . LBE 7 0 : cmpq $ 3 , - 5 6 (% rbp ) jle . L 1 0 1 jmp . L 4 1 . L 9 8 : . LBE 5 5 : . LBE 5 4 : . LBB 7 1 : . LBB 5 3 : nop . L 4 1 : . LBE 5 3 : . LBE 7 1 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 5 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 8 (% rbp ) movq $ 0 , - 1 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 2 : . LBB 3 : jmp . L 2 . L 2 4 : . LBB 4 : nop . LBE 4 : . LBB 5 : . LBB 6 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax jne . L 3 . LBB 7 : . LBB 8 : . LBB 9 : cmpq $ 0 , - 8 (% rbp ) setne % al testb % al , % al je . L 4 . LBB 1 0 : movq - 4 0 (% rbp ), % rax movq (% rax ), % rdx movq - 8 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx setle % al . L 4 : . LBE 1 0 : . LBE 9 : testb % al , % al je . L 5 . LBB 1 1 : . LBB 1 2 : cmpq $ 0 , - 1 6 (% rbp ) jne . L 6 . LBB 1 3 : movq - 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) . L 6 : . LBE 1 3 : . LBE 1 2 : movq - 4 0 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . L 5 : . LBE 1 1 : . LBE 8 : movq - 4 0 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 4 0 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 4 0 (% rbp ) . LBE 7 : jmp . L 2 . L 3 : . LBB 1 4 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 3 2 (% rbp ) . LBB 1 5 : . LBB 1 6 : jmp . L 7 . L 2 3 : . LBB 1 7 : nop . LBE 1 7 : . LBB 1 8 : movq - 3 2 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 3 2 (% rbp ) . L 7 : . LBE 1 8 : . LBB 1 9 : movq - 3 2 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax setne % al testb % al , % al je . L 8 . LBB 2 0 : movq - 3 2 (% rbp ), % rax movq 1 6 (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) setne % al . L 8 : . LBE 2 0 : . LBE 1 9 : testb % al , % al jne . L 2 3 . LBE 1 6 : . LBE 1 5 : . LBB 2 1 : movq - 3 2 (% rbp ), % rax movq 1 6 (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) je . L 1 1 . LBB 2 2 : movq - 3 2 (% rbp ), % rax addq $ 1 6 , % rax movq - 4 0 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 1 2 . LBB 2 3 : movq % rdx , (% rax ) . LBE 2 3 : jmp . L 1 3 . L 1 2 : . LBB 2 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 3 : . LBE 2 4 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 0 (% rbp ) . LBE 2 2 : jmp . L 2 . L 1 1 : . LBB 2 5 : movq - 3 2 (% rbp ), % rax addq $ 1 6 , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 4 . LBB 2 6 : movq $ 0 , (% rax ) . LBE 2 6 : jmp . L 1 5 . L 1 4 : . LBB 2 7 : movl $ 0 , % esi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 5 : . LBE 2 7 : . LBB 2 8 : . LBB 2 9 : cmpq $ 0 , - 8 (% rbp ) setne % al testb % al , % al je . L 1 6 . LBB 3 0 : movq - 4 0 (% rbp ), % rax movq (% rax ), % rdx movq - 8 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx setle % al . L 1 6 : . LBE 3 0 : . LBE 2 9 : testb % al , % al je . L 1 7 . LBB 3 1 : . LBB 3 2 : cmpq $ 0 , - 1 6 (% rbp ) jne . L 1 8 . LBB 3 3 : movq - 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) . L 1 8 : . LBE 3 3 : . LBE 3 2 : movq - 4 0 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . L 1 7 : . LBE 3 1 : . LBE 2 8 : movq - 4 0 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 4 0 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 4 0 (% rbp ) . L 2 : . LBE 2 5 : . LBE 2 1 : . LBE 1 4 : . LBE 6 : . LBE 5 : cmpq $ 0 , - 4 0 (% rbp ) jne . L 2 4 . LBE 3 : . LBE 2 : . LBB 3 4 : movq - 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq (% rdx ), % rsi movq - 1 6 (% rbp ), % rdx movq (% rdx ), % rdx movq % rsi , (% rcx ) movq % rdx , (% rax ) . LBE 3 4 : leave ret
. LFB 0 : leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 9 movl $ 2 9 6 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 5 6 , % rsp movq % rdi , - 2 8 0 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) . LBB 2 : call runtime . makemap_small @ PLT movq % rax , - 4 0 (% rbp ) . LBB 3 : movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 7 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rbx , - 4 8 (% rbp ) movq % rax , - 5 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 5 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 4 8 (% rbp ), % r 1 2 leaq - 1 7 6 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 2 , (% rax ) . LBE 1 2 : . LBE 1 1 : . LBE 8 : . LBB 1 4 : addq $ 1 , % rbx jmp . L 2 . L 3 : . LBE 1 4 : . LBB 1 5 : . LBB 1 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 3 : . LBE 1 5 : cmpq % r 1 3 , % rbx jl . L 1 7 . LBE 5 : . LBE 4 : . LBE 3 : leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) . LBB 1 6 : movq $ 0 , - 6 4 (% rbp ) . LBB 1 7 : . LBB 1 8 : . LBB 1 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 1 9 : jmp . L 6 . L 1 8 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 7 cmpq % rax , % rbx jge . L 7 movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 2 2 : . LBB 2 3 : movq % rax , - 6 4 (% rbp ) . LBE 2 3 : . LBB 2 4 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 1 2 movq - 6 4 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) leaq - 1 0 4 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 8 jmp . L 1 5 . L 7 : . LBE 2 4 : . LBB 2 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 8 : . LBE 2 7 : . LBB 2 8 : . LBB 2 5 : movq - 1 2 8 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) . LBE 2 5 : jmp . L 1 0 . L 1 5 : . LBB 2 6 : movq - 1 2 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rdx movq % rcx , - 2 7 2 (% rbp ) movq % rax , - 2 6 4 (% rbp ) movq % rdx , - 2 5 6 (% rbp ) . L 1 0 : . LBE 2 6 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 3 , (% rax ) . LBE 2 8 : . LBE 2 1 : . LBB 2 9 : addq $ 1 , % rbx . L 6 : . LBE 2 9 : cmpq % r 1 4 , % rbx jl . L 1 8 . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 3 0 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 8 0 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 2 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 0 : . LBE 2 : movq - 2 8 0 (% rbp ), % rax addq $ 2 5 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
leaq - 5 0 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 9 movl $ 5 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 5 6 , % rsp movq % rdi , - 4 7 2 (% rbp ) leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 3 2 (% rbp ) leaq . LC 2 1 (% rip ), % rax movq % rax , - 4 9 6 (% rbp ) movq $ 8 , - 4 8 8 (% rbp ) movdqa - 4 9 6 (% rbp ), % xmm 0 movups % xmm 0 , - 4 0 0 (% rbp ) leaq type ... 6 6 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 2 4 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq $ 7 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 5 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 6 , 3 2 (% rax ) movq $ 4 , 4 0 (% rax ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 6 , - 3 7 6 (% rbp ) movq $ 6 , - 3 6 8 (% rbp ) movq $ 7 , - 3 6 0 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 3 5 2 (% rbp ) movq % r 1 5 , - 3 4 4 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 1 6 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq $ 5 , 3 2 (% rax ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq $ 5 , - 3 2 8 (% rbp ) movq $ 5 , - 3 2 0 (% rbp ) movq $ 4 , - 3 1 2 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 0 4 (% rbp ) movq % r 1 3 , - 2 9 6 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 8 (% rbp ) movq - 4 0 8 (% rbp ), % rax movq $ 7 , (% rax ) movq $ 6 , 8 (% rax ) movq $ 4 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 1 , 3 2 (% rax ) movq - 4 0 8 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 5 , - 2 8 0 (% rbp ) movq $ 5 , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 5 . LBB 2 6 : movq - 4 3 2 (% rbp ), % rax movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) . LBE 2 6 : jmp . L 2 6 . L 2 5 : . LBB 2 7 : movq - 4 3 2 (% rbp ), % rax leaq - 4 0 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 6 : . LBE 2 7 : movq - 4 3 2 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq $ 3 , - 4 5 6 (% rbp ) movq $ 3 , - 4 4 8 (% rbp ) . LBB 2 8 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 2 9 : . LBB 3 0 : . LBB 3 1 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 3 1 : jmp . L 2 7 . L 3 8 : . LBB 3 2 : nop . LBE 3 2 : . LBB 3 3 : . LBB 3 4 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 2 8 cmpq % rax , % rbx jge . L 2 8 movq - 2 0 8 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 4 0 (% rbp ) movq % rdi , - 2 3 2 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) . LBE 3 4 : . LBB 3 5 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 2 9 jmp . L 3 6 . L 2 8 : . LBE 3 5 : . LBB 3 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : . LBE 3 8 : . LBB 3 9 : . LBB 3 6 : movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 3 1 . L 3 6 : . LBE 3 6 : . LBB 3 7 : leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 1 : . LBE 3 7 : . LBE 3 9 : . LBB 4 0 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 2 8 (% rbp ) movq % rdi , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution 2 .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 2 . LBB 4 1 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 1 : jmp . L 3 3 . L 3 2 : . LBB 4 2 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 3 : . LBE 4 2 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 2 8 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 4 7 2 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 4 0 : . LBE 3 3 : . LBB 4 3 : addq $ 1 , % rbx . L 2 7 : . LBE 4 3 : cmpq % r 1 3 , % rbx jl . L 3 8 . LBE 3 0 : . LBE 2 9 : . LBE 2 8 : addq $ 4 5 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 6 movl $ 1 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 5 6 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 6 8 , % rsp movq % rdi , - 1 6 8 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) . LBB 3 2 : movb $ 0 , - 1 7 (% rbp ) . LBB 3 3 : cmpq $ 0 , - 1 6 8 (% rbp ) jns . L 3 1 . LBB 3 4 : movb $ 1 , - 1 7 (% rbp ) negq - 1 6 8 (% rbp ) . L 3 1 : . LBE 3 4 : . LBE 3 3 : leaq . LC 3 0 (% rip ), % rax movl $ 0 , % edx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call bytes . NewBufferString @ PLT movq % rax , - 4 8 (% rbp ) . LBB 3 5 : . LBB 3 6 : jmp . L 3 2 . L 5 4 : . LBB 3 7 : nop . LBE 3 7 : . LBB 3 8 : movq - 1 6 8 (% rbp ), % rcx movabsq $ 5 2 7 0 4 9 8 3 0 6 7 7 4 1 5 7 6 0 5 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rdx salq $ 3 , % rdx subq % rax , % rdx movq % rcx , % rax subq % rdx , % rax movq % rax , - 5 6 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movabsq $ 5 2 7 0 4 9 8 3 0 6 7 7 4 1 5 7 6 0 5 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq % rax sarq $ 6 3 , % rcx movq % rcx , % rdx subq % rdx , % rax movq % rax , - 1 6 8 (% rbp ) movq - 5 6 (% rbp ), % rax leal 4 8 (% rax ), % edx movq - 4 8 (% rbp ), % rax movl % edx , % esi movq % rax , % rdi call bytes . Buffer . WriteByte @ PLT . L 3 2 : . LBE 3 8 : cmpq $ 6 , - 1 6 8 (% rbp ) jg . L 5 4 . LBE 3 6 : . LBE 3 5 : movq - 1 6 8 (% rbp ), % rax leal 4 8 (% rax ), % edx movq - 4 8 (% rbp ), % rax movl % edx , % esi movq % rax , % rdi call bytes . Buffer . WriteByte @ PLT . LBB 3 9 : cmpb $ 0 , - 1 7 (% rbp ) je . L 3 5 . LBB 4 0 : movq - 4 8 (% rbp ), % rax movl $ 4 5 , % esi movq % rax , % rdi call bytes . Buffer . WriteByte @ PLT . L 3 5 : . LBE 4 0 : . LBE 3 9 : leaq - 1 6 0 (% rbp ), % rax movq - 4 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call bytes . Buffer . Bytes @ PLT . LBB 4 1 : movq $ 0 , - 3 2 (% rbp ) movq - 1 5 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 4 0 (% rbp ) . LBB 4 2 : jmp . L 3 6 . L 5 5 : . LBB 4 3 : nop . LBE 4 3 : . LBB 4 4 : . LBB 4 5 : movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 3 2 (% rbp ), % rdx movq - 1 6 0 (% rbp ), % rcx movq - 1 5 2 (% rbp ), % rbx movq % rcx , - 8 0 (% rbp ) movq % rbx , - 7 2 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 4 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rcx cmpq $ 0 , - 4 0 (% rbp ) js . L 3 7 cmpq % rcx , - 4 0 (% rbp ) jl . L 4 9 . L 3 7 : movq - 4 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : movq - 1 6 0 (% rbp ), % rsi movq - 4 0 (% rbp ), % rcx addq % rsi , % rcx movzbl (% rcx ), % edi movq - 1 5 2 (% rbp ), % rcx cmpq $ 0 , - 3 2 (% rbp ) js . L 3 9 cmpq % rcx , - 3 2 (% rbp ) jl . L 5 0 . L 3 9 : movq - 3 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 0 : movq - 1 6 0 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx addq % rsi , % rcx movzbl (% rcx ), % esi movq - 1 0 4 (% rbp ), % rcx testq % rdx , % rdx js . L 4 1 cmpq % rcx , % rdx jl . L 5 1 . L 4 1 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : movq - 1 1 2 (% rbp ), % rcx addq % rcx , % rdx movb % dil , (% rdx ) movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 4 3 cmpq % rdx , % rax jl . L 5 2 . L 4 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : movq - 8 0 (% rbp ), % rdx addq % rdx , % rax movb % sil , (% rax ) . LBE 4 5 : . LBE 4 4 : . LBB 4 6 : . LBB 4 7 : movq - 3 2 (% rbp ), % rax leaq 1 (% rax ), % rdx movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq % rdx , - 3 2 (% rbp ) movq % rax , - 4 0 (% rbp ) . L 3 6 : . LBE 4 7 : . LBE 4 6 : movq - 3 2 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jl . L 5 5 . LBE 4 2 : . LBE 4 1 : . LBB 4 8 : subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movl $ 0 , % edi call runtime . slicebytetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx . LBE 4 8 : . LBE 3 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 3 movl $ 2 1 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 8 4 , % rsp movq % rdi , - 2 0 0 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) . LBB 2 : leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) . LBB 3 : movq $ 0 , - 4 0 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 2 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 1 2 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 1 2 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 4 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 4 jmp . L 1 0 . L 3 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 9 6 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) . LBE 1 2 : jmp . L 6 . L 1 0 : . LBB 1 3 : movq - 9 6 (% rbp ), % rcx movq - 8 0 (% rbp ), % rdx movq % rcx , - 1 9 2 (% rbp ) movq % rax , - 1 8 4 (% rbp ) movq % rdx , - 1 7 6 (% rbp ) . L 6 : . LBE 1 3 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 4 0 (% rbp ), % rax movq % rax , (% rdx ) . LBE 1 5 : . LBE 8 : . LBB 1 6 : addq $ 1 , % rbx . L 2 : . LBE 1 6 : cmpq % r 1 3 , % rbx jl . L 1 2 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 7 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 2 0 0 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 7 : . LBE 2 : movq - 2 0 0 (% rbp ), % rax addq $ 1 8 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 1 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 0 movl $ 3 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 4 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 6 4 , % rsp movq % rdi , - 2 8 0 (% rbp ) movq - 2 8 0 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 1 9 : movq $ 0 , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) . LBB 2 0 : . LBB 2 1 : . LBB 2 2 : movq go . day 7 6 . testcases (% rip ), % rax movq 8 + go . day 7 6 . testcases (% rip ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 + go . day 7 6 . testcases (% rip ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movl $ 0 , % ebx . LBE 2 2 : jmp . L 3 0 . L 3 9 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 1 cmpq % rax , % rbx jge . L 3 1 movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) . LBE 2 5 : . LBB 2 6 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) . LBE 2 6 : . LBB 2 7 : . LBB 2 8 : subq $ 8 , % rsp pushq - 2 5 6 (% rbp ) pushq - 2 6 4 (% rbp ) pushq - 2 7 2 (% rbp ) call go . day 7 6 . MinRemoveColumns addq $ 3 2 , % rsp movq % rax , - 5 6 (% rbp ) movq - 2 4 8 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 3 2 jmp . L 3 3 . L 3 1 : . LBE 2 8 : . LBE 2 7 : . LBB 3 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : . LBE 3 3 : . LBB 3 4 : . LBB 3 2 : . LBB 2 9 : leaq int .. d (% rip ), % rax movq % rax , - 3 0 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 2 9 6 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 2 8 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movdqa - 3 0 4 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 4 . LBB 3 0 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 3 0 : jmp . L 3 5 . L 3 4 : . LBB 3 1 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 5 : . LBE 3 1 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) leaq . LC 5 (% rip ), % r 1 2 movl $ 1 8 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 2 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 3 3 : . LBE 2 9 : . LBE 3 2 : . LBE 3 4 : . LBE 2 4 : . LBB 3 5 : addq $ 1 , % rbx . L 3 0 : . LBE 3 5 : cmpq - 2 8 8 (% rbp ), % rbx jl . L 3 9 . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 5 0 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 5 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 5 6 , % rsp movq % rdi , - 4 7 2 (% rbp ) leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 3 2 (% rbp ) leaq . LC 2 2 (% rip ), % rax movq % rax , - 4 9 6 (% rbp ) movq $ 8 , - 4 8 8 (% rbp ) movdqa - 4 9 6 (% rbp ), % xmm 0 movups % xmm 0 , - 4 0 0 (% rbp ) leaq type ... 6 6 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 2 4 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 7 , 8 (% rax ) movq $ 4 , 1 6 (% rax ) movq $ 9 , 2 4 (% rax ) movq $ 2 , 3 2 (% rax ) movq $ 5 , 4 0 (% rax ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 6 , - 3 7 6 (% rbp ) movq $ 6 , - 3 6 8 (% rbp ) movq $ 6 , - 3 6 0 (% rbp ) leaq . LC 2 2 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 3 5 2 (% rbp ) movq % r 1 5 , - 3 4 4 (% rbp ) leaq type ... 6 1 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 1 6 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 1 7 , 8 (% rax ) movq $ 5 , 1 6 (% rax ) movq $ 1 0 , 2 4 (% rax ) movq $ 1 3 , 3 2 (% rax ) movq $ 1 5 , 4 0 (% rax ) movq $ 1 0 , 4 8 (% rax ) movq $ 5 , 5 6 (% rax ) movq $ 1 6 , 6 4 (% rax ) movq $ 8 , 7 2 (% rax ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq $ 1 0 , - 3 2 8 (% rbp ) movq $ 1 0 , - 3 2 0 (% rbp ) movq $ 7 , - 3 1 2 (% rbp ) leaq . LC 2 2 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 0 4 (% rbp ) movq % r 1 3 , - 2 9 6 (% rbp ) leaq type ... 6 9 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 8 (% rbp ) movq - 4 0 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq $ 5 , 3 2 (% rax ) movq $ 6 , 4 0 (% rax ) movq $ 7 , 4 8 (% rax ) movq $ 8 , 5 6 (% rax ) movq $ 9 , 6 4 (% rax ) movq - 4 0 8 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 9 , - 2 8 0 (% rbp ) movq $ 9 , - 2 7 2 (% rbp ) movq $ 2 , - 2 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 4 3 2 (% rbp ), % rax movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 4 3 2 (% rbp ), % rax leaq - 4 0 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 4 3 2 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq $ 3 , - 4 5 6 (% rbp ) movq $ 3 , - 4 4 8 (% rbp ) . LBB 4 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 0 8 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 4 0 (% rbp ) movq % rdi , - 2 3 2 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 2 8 (% rbp ) movq % rdi , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 2 8 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 4 7 2 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 4 5 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 4 8 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 4 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 4 0 , % rsp movq % rdi , - 4 7 2 (% rbp ) leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 int . 2 . go . Solution . input 2 . 0 int . 2 . go . Solution . expect . 0 float 6 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 0 (% rbp ) leaq . LC 2 4 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 4 1 6 (% rbp ) movq % r 1 5 , - 4 0 8 (% rbp ) leaq type ... 6 6 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 3 2 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 1 2 , 8 (% rax ) movq $- 5 , 1 6 (% rax ) movq $- 6 , 2 4 (% rax ) movq $ 5 0 , 3 2 (% rax ) movq $ 3 , 4 0 (% rax ) movq - 4 3 2 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 6 , - 3 9 2 (% rbp ) movq $ 6 , - 3 8 4 (% rbp ) movq $ 4 , - 3 7 6 (% rbp ) movsd . LC 2 5 (% rip ), % xmm 0 movsd % xmm 0 , - 3 6 8 (% rbp ) leaq . LC 2 4 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 6 0 (% rbp ) movq % r 1 3 , - 3 5 2 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 2 4 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq $ 5 , (% rax ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) movq $ 1 , - 3 3 6 (% rbp ) movq $ 1 , - 3 2 8 (% rbp ) movq $ 1 , - 3 2 0 (% rbp ) movsd . LC 2 6 (% rip ), % xmm 0 movsd % xmm 0 , - 3 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 4 4 0 (% rbp ), % rax movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 4 4 0 (% rbp ), % rax leaq - 4 1 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 int . 2 . go . Solution . input 2 . 0 int . 2 . go . Solution . expect . 0 float 6 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 4 4 0 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq $ 2 , - 4 5 6 (% rbp ) movq $ 2 , - 4 4 8 (% rbp ) . LBB 4 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 int . 2 . go . Solution . input 2 . 0 int . 2 . go . Solution . expect . 0 float 6 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 3 2 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 4 0 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 3 , % rax subq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 3 0 4 (% rbp ) movq % rdi , - 2 9 6 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 8 8 (% rbp ) movq % rdi , - 2 8 0 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 4 8 (% rax ), % rax movq % rax , - 2 5 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 2 0 8 (% rbp ), % rsi movq - 2 0 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 1 6 0 (% rbp ), % rdx movq % rdx , 4 8 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 int . 2 . go . Solution . input 2 . 0 int . 2 . go . Solution . expect . 0 float 6 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 2 7 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 int . 2 . go . Solution . input 2 . 0 int . 2 . go . Solution . expect . 0 float 6 4 . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 int . 2 . go . Solution . input 2 . 0 int . 2 . go . Solution . expect . 0 float 6 4 . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 4 7 2 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 4 4 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 9 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 7 movl $ 3 9 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 4 4 , % rsp leaq . LC 2 (% rip ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 3 , - 2 9 6 (% rbp ) leaq . LC 3 (% rip ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 4 , - 2 8 0 (% rbp ) leaq . LC 4 (% rip ), % rax movq % rax , - 2 7 2 (% rbp ) movq $ 3 , - 2 6 4 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq $ 3 , - 3 2 8 (% rbp ) movq $ 3 , - 3 2 0 (% rbp ) movq - 3 2 8 (% rbp ), % rax testq % rax , % rax jg . L 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq - 3 3 6 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) . LBB 2 : movq $ 0 , - 3 6 8 (% rbp ) movq $ 0 , - 3 6 0 (% rbp ) . LBB 3 : movq - 3 2 0 (% rbp ), % rax testq % rax , % rax jg . L 3 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 3 : movq - 3 3 6 (% rbp ), % rdx movq - 3 2 0 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 4 , % rax addq % rdx , % rax movq % rax , - 2 5 6 (% rbp ) movq - 3 2 8 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 2 4 8 (% rbp ) movq - 3 2 0 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 2 4 0 (% rbp ) . LBB 4 : . LBB 5 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 5 : jmp . L 4 . L 3 6 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : movq - 2 1 6 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 5 cmpq % rax , % r 1 2 jge . L 5 movq - 2 2 4 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 8 : . LBB 9 : movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 3 6 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 1 1 : movq $ 0 , - 6 4 (% rbp ) . LBB 1 2 : . LBB 1 3 : . LBB 1 4 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 3 7 6 (% rbp ) movl $ 0 , % ebx . LBE 1 4 : jmp . L 6 . L 5 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : . LBB 2 9 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : . LBE 2 9 : . LBB 3 0 : . LBB 2 8 : . LBB 2 7 : . LBB 2 6 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 3 4 4 (% rbp ), % rax testq % rbx , % rbx js . L 7 cmpq % rax , % rbx jge . L 7 movq - 3 5 2 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 8 jmp . L 2 9 . L 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 8 : . LBB 1 8 : leaq 1 (% rbx ), % rcx . LBE 1 8 : jmp . L 1 0 . L 2 9 : . LBB 1 9 : movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rdx , % rcx . L 1 0 : . LBE 1 9 : . LBE 1 7 : movq % rbx , - 6 4 (% rbp ) . LBB 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 6 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax setge % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 1 . LBB 2 3 : movq - 3 4 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 2 cmpq % rax , - 6 4 (% rbp ) jl . L 3 0 . L 1 2 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq - 3 6 0 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 4 cmpq % rax , - 6 4 (% rbp ) jl . L 3 1 . L 1 4 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq - 3 5 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % edx movq - 3 6 8 (% rbp ), % rsi movq - 6 4 (% rbp ), % rax addq % rsi , % rax movzbl (% rax ), % eax cmpb % al , % dl setne % al . L 1 1 : . LBE 2 3 : . LBE 2 2 : testb % al , % al je . L 1 6 . LBB 2 4 : movl $ 0 , % eax movq - 3 4 4 (% rbp ), % rdx cmpq $ 0 , - 6 4 (% rbp ) js . L 1 7 cmpq % rdx , - 6 4 (% rbp ) jg . L 1 7 testq % rax , % rax jns . L 1 8 jmp . L 1 9 . L 1 7 : movq - 6 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAlen @ PLT . L 1 8 : cmpq - 6 4 (% rbp ), % rax jg . L 1 9 movq - 3 5 2 (% rbp ), % rdx cmpq % rax , - 6 4 (% rbp ) jne . L 2 0 jmp . L 3 2 . L 1 9 : movq - 6 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 2 0 : movq % rax , % rsi jmp . L 2 2 . L 3 2 : movl $ 0 , % esi . L 2 2 : addq % rdx , % rsi movq - 6 4 (% rbp ), % rdx subq % rax , % rdx movq % rsi , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) . L 1 6 : . LBE 2 4 : . LBE 2 1 : . LBE 2 0 : . LBE 1 6 : . LBB 2 5 : movq % rcx , % rbx . L 6 : . LBE 2 5 : cmpq - 3 7 6 (% rbp ), % rbx jl . L 3 5 . LBE 2 6 : . LBE 2 7 : . LBE 2 8 : . LBE 3 0 : . LBE 7 : . LBB 3 1 : addq $ 1 , % r 1 2 . L 4 : . LBE 3 1 : cmpq % r 1 3 , % r 1 2 jl . L 3 6 . LBE 4 : . LBE 3 : . LBE 2 : leaq string .. d (% rip ), % r 1 4 leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 7 . LBB 3 2 : movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 3 2 : jmp . L 2 8 . L 2 7 : . LBB 3 3 : movq - 1 6 8 (% rbp ), % rax leaq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 8 : . LBE 3 3 : movq - 1 6 8 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 1 4 4 (% rbp ) movq % r 1 5 , - 1 3 6 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) leaq - 9 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 3 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 7 2 , % rsp movq % rdi , - 2 9 6 (% rbp ) leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 2 5 6 (% rbp ) movq % r 1 3 , - 2 4 8 (% rbp ) movq $ 1 0 , - 2 4 0 (% rbp ) movq $ 1 0 , - 2 3 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 2 6 4 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 1 , - 2 8 0 (% rbp ) movq $ 1 , - 2 7 2 (% rbp ) . LBB 4 : movq $ 0 , - 4 0 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 1 8 4 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 1 9 2 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq % rbx , - 4 0 (% rbp ) movq - 4 8 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 4 0 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 4 8 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 2 8 (% rbp ) movq % rdi , - 1 2 0 (% rbp ) leaq . LC 1 9 (% rip ), % rcx movq % rcx , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 4 8 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq % r 1 4 , - 6 4 (% rbp ) movq % r 1 2 , - 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 7 2 (% rbp ), % r 1 2 leaq - 1 2 8 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 2 9 6 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 2 7 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 7 5 movl $ 2 0 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 7 5 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 8 4 , % rsp movq % rdi , - 1 8 4 (% rbp ) movq % rsi , - 1 9 2 (% rbp ) movq $ 0 , - 8 0 (% rbp ) movq $ 0 , - 7 2 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . LBB 3 : cmpq $ 1 , - 1 9 2 (% rbp ) jg . L 2 . LBB 4 : . LBB 5 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 1 8 4 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 6 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 1 9 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 5 6 (% rbp ) movq - 4 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 1 2 (% rbp ) movq % rbx , - 1 0 4 (% rbp ) movq % rbx , - 9 6 (% rbp ) . LBB 6 : movq $ 0 , - 2 4 (% rbp ) . LBB 7 : jmp . L 4 . L 7 2 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : cmpq $- 1 , - 5 6 (% rbp ) je . L 5 cmpq $ 0 , - 5 6 (% rbp ) jne . L 6 call runtime . panicdivide @ PLT . L 6 : movq - 2 4 (% rbp ), % rax cqto idivq - 5 6 (% rbp ) movq % rdx , % rax testq % rax , % rax sete % al jmp . L 7 . L 5 : movl $ 1 , % eax . L 7 : testb % al , % al je . L 8 . LBB 1 1 : movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 9 cmpq % rax , - 2 4 (% rbp ) jl . L 5 4 . L 9 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 1 cmpq % rax , - 2 4 (% rbp ) jl . L 5 5 . L 1 1 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 5 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq - 1 1 2 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . LBE 1 1 : jmp . L 1 3 . L 8 : . LBB 1 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 4 cmpq % rax , - 2 4 (% rbp ) jl . L 5 6 . L 1 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 6 : movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 1 6 cmpq % rdx , % rax jl . L 5 7 . L 1 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 7 : movq - 1 1 2 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 0 2 3 9 . max movq % rax , % rdx movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 8 cmpq % rax , - 2 4 (% rbp ) jl . L 5 8 . L 1 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 8 : movq - 1 1 2 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq % rdx , (% rax ) . L 1 3 : . LBE 1 2 : . LBE 1 0 : . LBE 9 : . LBB 1 3 : addq $ 1 , - 2 4 (% rbp ) . L 4 : . LBE 1 3 : movq - 2 4 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 7 2 . LBE 7 : . LBE 6 : movq - 4 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 4 4 (% rbp ) movq % rbx , - 1 3 6 (% rbp ) movq % rbx , - 1 2 8 (% rbp ) movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 1 3 6 (% rbp ), % rdx testq % rax , % rax js . L 2 2 cmpq % rdx , % rax jl . L 6 0 . L 2 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 0 : movq - 4 8 (% rbp ), % rdx subq $ 1 , % rdx movq 2 4 (% rbp ), % rcx testq % rdx , % rdx js . L 2 4 cmpq % rcx , % rdx jl . L 6 1 . L 2 4 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 1 : movq 1 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rdx , % rcx movq - 1 4 4 (% rbp ), % rdx salq $ 3 , % rax addq % rax , % rdx movq (% rcx ), % rax movq % rax , (% rdx ) . LBB 1 4 : movq - 4 8 (% rbp ), % rax subq $ 2 , % rax movq % rax , - 3 2 (% rbp ) . LBB 1 5 : jmp . L 2 6 . L 7 3 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : . LBB 1 8 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax cmpq $- 1 , - 5 6 (% rbp ) je . L 2 7 cmpq $ 0 , - 5 6 (% rbp ) jne . L 2 8 call runtime . panicdivide @ PLT . L 2 8 : cqto idivq - 5 6 (% rbp ) movq % rdx , % rax testq % rax , % rax sete % al jmp . L 2 9 . L 2 7 : movl $ 1 , % eax . L 2 9 : testb % al , % al je . L 3 0 . LBB 1 9 : movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 1 cmpq % rax , - 3 2 (% rbp ) jl . L 6 2 . L 3 1 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 3 cmpq % rax , - 3 2 (% rbp ) jl . L 6 3 . L 3 3 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 3 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq - 1 4 4 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . LBE 1 9 : jmp . L 3 5 . L 3 0 : . LBB 2 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 6 cmpq % rax , - 3 2 (% rbp ) jl . L 6 4 . L 3 6 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 4 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq - 1 3 6 (% rbp ), % rdx testq % rax , % rax js . L 3 8 cmpq % rdx , % rax jl . L 6 5 . L 3 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 5 : movq - 1 4 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 0 2 3 9 . max movq % rax , % rdx movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 4 0 cmpq % rax , - 3 2 (% rbp ) jl . L 6 6 . L 4 0 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 6 : movq - 1 4 4 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq % rdx , (% rax ) . L 3 5 : . LBE 2 0 : . LBE 1 8 : . LBE 1 7 : . LBB 2 1 : subq $ 1 , - 3 2 (% rbp ) . L 2 6 : . LBE 2 1 : cmpq $ 0 , - 3 2 (% rbp ) jns . L 7 3 . LBE 1 5 : . LBE 1 4 : movq - 4 8 (% rbp ), % rax subq - 1 9 2 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 7 6 (% rbp ) movq % rbx , - 1 6 8 (% rbp ) movq % rbx , - 1 6 0 (% rbp ) . LBB 2 2 : movq $ 0 , - 4 0 (% rbp ) . LBB 2 3 : jmp . L 4 4 . L 7 4 : . LBB 2 4 : nop . LBE 2 4 : . LBB 2 5 : movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 4 5 cmpq % rax , - 4 0 (% rbp ) jl . L 6 8 . L 4 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 8 : movq - 4 0 (% rbp ), % rdx movq - 1 9 2 (% rbp ), % rax addq % rdx , % rax subq $ 1 , % rax movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 4 7 cmpq % rdx , % rax jl . L 6 9 . L 4 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 9 : movq - 1 1 2 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 1 4 4 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 0 2 3 9 . max movq % rax , % rdx movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 4 9 cmpq % rax , - 4 0 (% rbp ) jl . L 7 0 . L 4 9 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 0 : movq - 1 7 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq % rdx , (% rax ) . LBE 2 5 : . LBB 2 6 : addq $ 1 , - 4 0 (% rbp ) . L 4 4 : . LBE 2 6 : movq - 4 8 (% rbp ), % rax subq - 1 9 2 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) jle . L 7 4 . LBE 2 3 : . LBE 2 2 : . LBB 2 7 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 1 8 4 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 6 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 2 7 : . LBE 2 : movq - 1 8 4 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 1 : leaq - 7 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 1 movl $ 7 4 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 2 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 9 6 , % rsp movq % rdi , - 6 8 0 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 7 6 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq $ 1 2 , (% rax ) movq $ 3 4 5 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 6 , 2 4 (% rax ) movq $ 7 8 9 6 , 3 2 (% rax ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 5 , - 5 5 2 (% rbp ) movq $ 5 , - 5 4 4 (% rbp ) movq $ 2 , - 5 3 6 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 8 (% rbp ) movq - 5 6 8 (% rbp ), % rax movq $ 5 5 5 , (% rax ) movq $ 9 0 1 , 8 (% rax ) movq $ 4 8 2 , 1 6 (% rax ) movq $ 1 7 7 1 , 2 4 (% rax ) movq - 5 6 8 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 4 , - 5 2 0 (% rbp ) movq $ 4 , - 5 1 2 (% rbp ) movq $ 1 , - 5 0 4 (% rbp ) leaq - 5 6 0 (% rbp ), % rax movq % rax , - 6 0 8 (% rbp ) movq $ 2 , - 6 0 0 (% rbp ) movq $ 2 , - 5 9 2 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 1 6 (% rip ), % rax movq % rax , - 7 0 4 (% rbp ) movq $ 7 0 , - 6 9 6 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 7 0 4 (% rbp ), % rcx movq - 6 9 6 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) . LBB 1 6 : movq $ 0 , - 6 7 2 (% rbp ) movq $ 0 , - 6 6 4 (% rbp ) movq $ 0 , - 6 5 6 (% rbp ) movq $ 0 , - 6 4 8 (% rbp ) . LBB 1 7 : . LBB 1 8 : . LBB 1 9 : movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 7 0 4 (% rbp ) movl $ 0 , % ebx . LBE 1 9 : jmp . L 1 1 . L 2 0 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 4 2 4 (% rbp ), % rax testq % rbx , % rbx js . L 1 2 cmpq % rax , % rbx jge . L 1 2 movq - 4 3 2 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) . LBE 2 2 : . LBB 2 3 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 6 7 2 (% rbp ) movq % rdx , - 6 6 4 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 6 5 6 (% rbp ) movq % rdx , - 6 4 8 (% rbp ) . LBE 2 3 : . LBB 2 4 : movq - 6 4 8 (% rbp ), % rax movq % rax , - 6 1 6 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) subq $ 8 , % rsp pushq - 6 2 4 (% rbp ) pushq - 6 3 2 (% rbp ) pushq - 6 4 0 (% rbp ) call go . leetcode . findNumbers addq $ 3 2 , % rsp movq % rax , - 6 8 8 (% rbp ) leaq go . leetcode .. go . leetcode . para 1 2 9 5 .. d (% rip ), % rax movq % rax , - 7 3 6 (% rbp ) leaq go . leetcode .. go . leetcode . para 1 2 9 5 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 1 3 jmp . L 1 8 . L 1 2 : . LBE 2 4 : . LBB 2 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : . LBE 2 7 : . LBB 2 8 : . LBB 2 5 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 5 : jmp . L 1 5 . L 1 8 : . LBB 2 6 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 1 2 9 5 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 5 : . LBE 2 6 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 7 2 8 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 7 2 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 6 8 8 (% rbp ), % rdi movq % rdi , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 7 1 2 (% rbp ) movdqa - 7 3 6 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 7 2 0 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 1 7 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) . LBE 2 8 : . LBE 2 1 : . LBB 2 9 : addq $ 1 , % rbx . L 1 1 : . LBE 2 9 : cmpq - 7 0 4 (% rbp ), % rbx jl . L 2 0 . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
leaq - 5 2 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 5 3 movl $ 5 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 2 : ret . L 4 5 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 7 2 , % rsp movq % rdi , - 4 8 8 (% rbp ) movq $ 5 , - 4 1 6 (% rbp ) movq $ 4 , - 4 0 8 (% rbp ) movq $ 8 , - 4 0 0 (% rbp ) movq $ 3 , - 3 9 2 (% rbp ) movq $ 8 , - 3 8 4 (% rbp ) movq $ 8 , - 3 7 6 (% rbp ) movq $ 8 , - 3 6 8 (% rbp ) movq $ 5 , - 3 6 0 (% rbp ) movq $ 8 , - 3 5 2 (% rbp ) movq $ 8 , - 3 4 4 (% rbp ) movq $ 5 , - 3 3 6 (% rbp ) movq $ 8 , - 3 2 8 (% rbp ) movq $ 2 , - 3 2 0 (% rbp ) movq $ 1 4 , - 3 1 2 (% rbp ) movq $ 1 4 , - 3 0 4 (% rbp ) movq $ 1 3 , - 2 9 6 (% rbp ) movq $ 5 6 , - 2 8 8 (% rbp ) movq $ 5 8 , - 2 8 0 (% rbp ) movq $ 7 , - 2 7 2 (% rbp ) movq $ 5 , - 2 6 4 (% rbp ) movq $ 5 , - 2 5 6 (% rbp ) leaq - 4 1 6 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq $ 7 , - 4 4 0 (% rbp ) movq $ 7 , - 4 3 2 (% rbp ) . LBB 4 1 4 : movq $ 0 , - 4 8 0 (% rbp ) movq $ 0 , - 4 7 2 (% rbp ) movq $ 0 , - 4 6 4 (% rbp ) . LBB 4 1 5 : . LBB 4 1 6 : . LBB 4 1 7 : movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movl $ 0 , % ebx . LBE 4 1 7 : jmp . L 4 4 3 . L 4 5 2 : . LBB 4 1 8 : nop . LBE 4 1 8 : . LBB 4 1 9 : . LBB 4 2 0 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 4 4 4 cmpq % rax , % rbx jge . L 4 4 4 movq - 2 0 8 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) . LBE 4 2 0 : . LBB 4 2 1 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) . LBE 4 2 1 : . LBB 4 2 2 : call go . linkedlist . NewCyclic movq % rax , - 5 6 (% rbp ) movq - 4 6 4 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . linkedlist . fillList movq - 4 8 0 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . linkedlist . JosephusProblem movq % rax , - 6 4 (% rbp ) . LBB 4 2 3 : movq - 4 7 2 (% rbp ), % rax cmpq % rax , - 6 4 (% rbp ) jne . L 4 4 5 jmp . L 4 4 6 . L 4 4 4 : . LBE 4 2 3 : . LBE 4 2 2 : . LBB 4 2 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 4 5 : . LBE 4 2 8 : . LBB 4 2 9 : . LBB 4 2 7 : . LBB 4 2 4 : leaq int .. d (% rip ), % rax movq % rax , - 5 1 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 5 0 4 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 4 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 4 4 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 5 1 2 (% rbp ), % xmm 0 movups % xmm 0 , - 1 2 8 (% rbp ) movq % r 1 4 , - 1 1 2 (% rbp ) movq % r 1 5 , - 1 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 4 7 . LBB 4 2 5 : movq - 1 3 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 4 2 5 : jmp . L 4 4 8 . L 4 4 7 : . LBB 4 2 6 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 4 8 : . LBE 4 2 6 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 2 , - 8 8 (% rbp ) movq $ 2 , - 8 0 (% rbp ) leaq . LC 9 9 (% rip ), % r 1 2 movl $ 1 7 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 4 8 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 4 4 6 : . LBE 4 2 4 : . LBE 4 2 7 : . LBE 4 2 9 : . LBE 4 1 9 : . LBB 4 3 0 : addq $ 1 , % rbx . L 4 4 3 : . LBE 4 3 0 : cmpq - 4 9 6 (% rbp ), % rbx jl . L 4 5 2 . LBE 4 1 6 : . LBE 4 1 5 : . LBE 4 1 4 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 3 movl $ 2 3 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 0 8 , % rsp movq % rdi , - 2 1 6 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 2 1 6 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 2 6 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq $ 1 , - 2 4 (% rbp ) movq - 2 1 6 (% rbp ), % rax movq % rax , - 1 8 4 (% rbp ) leaq - 1 8 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 1 , - 2 0 0 (% rbp ) movq $ 1 , - 1 9 2 (% rbp ) . LBB 6 : . LBB 7 : jmp . L 4 . L 3 2 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . LBB 1 0 : movq $ 0 , - 3 2 (% rbp ) . LBB 1 1 : jmp . L 5 . L 3 1 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : movq - 2 0 0 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 6 cmpq % rax , - 3 2 (% rbp ) jl . L 2 7 . L 6 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq - 2 0 8 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) . LBB 1 4 : . LBB 1 5 : movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax sete % al testb % al , % al je . L 8 . LBB 1 6 : movq - 5 6 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax sete % al . L 8 : . LBE 1 6 : . LBE 1 5 : testb % al , % al je . L 9 . LBB 1 7 : . LBB 1 8 : movq - 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 2 6 . L 9 : . LBE 1 8 : . LBE 1 7 : . LBE 1 4 : . LBB 1 9 : movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax je . L 1 0 . LBB 2 0 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rbx movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 1 . LBB 2 1 : movq - 1 7 6 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 1 go . leetcode . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) . LBE 2 1 : jmp . L 1 2 . L 1 1 : . LBB 2 2 : movq - 1 7 6 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rdx movq % rcx , - 2 0 8 (% rbp ) movq % rax , - 2 0 0 (% rbp ) movq % rdx , - 1 9 2 (% rbp ) . L 1 2 : . LBE 2 2 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 3 . LBB 2 3 : movq % r 1 2 , (% rax ) jmp . L 1 0 . L 1 3 : . LBE 2 3 : . LBB 2 4 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 0 : . LBE 2 4 : . LBE 2 0 : . LBE 1 9 : . LBB 2 5 : movq - 5 6 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax je . L 1 4 . LBB 2 6 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rbx movq - 5 6 (% rbp ), % rax movq 1 6 (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 5 . LBB 2 7 : movq - 1 4 4 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 1 go . leetcode . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) . LBE 2 7 : jmp . L 1 6 . L 1 5 : . LBB 2 8 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq % rcx , - 2 0 8 (% rbp ) movq % rax , - 2 0 0 (% rbp ) movq % rdx , - 1 9 2 (% rbp ) . L 1 6 : . LBE 2 8 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 7 . LBB 2 9 : movq % r 1 2 , (% rax ) jmp . L 1 4 . L 1 7 : . LBE 2 9 : . LBB 3 0 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 4 : . LBE 3 0 : . LBE 2 6 : . LBE 2 5 : . LBE 1 3 : . LBB 3 1 : addq $ 1 , - 3 2 (% rbp ) . L 5 : . LBE 3 1 : movq - 3 2 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 3 1 . LBE 1 1 : . LBE 1 0 : addq $ 1 , - 2 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 0 cmpq % rax , - 4 8 (% rbp ) jle . L 2 9 . L 2 0 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 2 9 : movq - 2 0 8 (% rbp ), % rdx movq - 1 9 2 (% rbp ), % rax cmpq % rax , - 4 8 (% rbp ) je . L 2 2 movq - 4 8 (% rbp ), % rax salq $ 3 , % rax jmp . L 2 3 . L 2 2 : movl $ 0 , % eax . L 2 3 : leaq (% rdx ,% rax ), % rcx movq - 2 0 0 (% rbp ), % rax subq - 4 8 (% rbp ), % rax movq % rax , % rdx movq - 1 9 2 (% rbp ), % rax subq - 4 8 (% rbp ), % rax movq % rcx , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq % rax , - 1 9 2 (% rbp ) . L 4 : . LBE 9 : movq - 2 0 0 (% rbp ), % rax testq % rax , % rax jg . L 3 2 . LBE 7 : . LBE 6 : . LBB 3 2 : movq - 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 2 6 : . LBE 3 2 : . LBE 2 : addq $ 2 0 8 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 5 0 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 : ret . L 5 0 : pushq % rbp movq % rsp , % rbp movl % edi , - 2 0 (% rbp ) pxor % xmm 0 , % xmm 0 movsd % xmm 0 , - 8 (% rbp ) . LBB 1 8 : . LBB 1 9 : movzbl - 2 0 (% rbp ), % eax movzbl % al , % eax pxor % xmm 1 , % xmm 1 cvtsi 2 sdl % eax , % xmm 1 movsd . LC 5 (% rip ), % xmm 0 mulsd % xmm 0 , % xmm 1 movzbl - 1 9 (% rbp ), % eax movzbl % al , % eax pxor % xmm 2 , % xmm 2 cvtsi 2 sdl % eax , % xmm 2 movsd . LC 6 (% rip ), % xmm 0 mulsd % xmm 2 , % xmm 0 addsd % xmm 0 , % xmm 1 movzbl - 1 8 (% rbp ), % eax movzbl % al , % eax pxor % xmm 2 , % xmm 2 cvtsi 2 sdl % eax , % xmm 2 movsd . LC 7 (% rip ), % xmm 0 mulsd % xmm 2 , % xmm 0 addsd % xmm 1 , % xmm 0 movsd % xmm 0 , - 8 (% rbp ) movsd - 8 (% rbp ), % xmm 0 movq % xmm 0 , % rax . LBE 1 9 : . LBE 1 8 : movq % rax , % xmm 0 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 1 movl $ 1 0 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 1 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 8 8 , % rsp movq % rdi , - 8 8 (% rbp ) movq % rsi , - 9 6 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 8 8 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : cmpq $ 1 , - 8 8 (% rbp ) jne . L 4 . LBB 7 : . LBB 8 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 5 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 4 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 9 : movq $ 0 , - 4 0 (% rbp ) movb $ 0 , - 4 1 (% rbp ) . LBB 1 0 : movq - 8 8 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) leaq - 7 2 (% rbp ), % rax movq (% rax ), % rdx movq - 9 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 4 0 (% rbp ) movb % dl , - 4 1 (% rbp ) . LBE 1 0 : cmpb $ 0 , - 4 1 (% rbp ) je . L 6 . LBB 1 1 : . LBB 1 2 : movq - 4 0 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 6 : . LBE 1 2 : . LBE 1 1 : . LBE 9 : movq - 8 8 (% rbp ), % rax leaq - 1 (% rax ), % rbx movq 2 4 (% rbp ), % rax testq % rbx , % rbx js . L 7 cmpq % rax , % rbx jl . L 1 0 . L 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : movq - 8 8 (% rbp ), % rax leaq - 2 (% rax ), % rdx movq - 9 6 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rsi movq % rdx , % rdi call main . recusiveRob addq $ 3 2 , % rsp movq % rax , % rdx movq 1 6 (% rbp ), % rax movq % rbx , % rcx salq $ 3 , % rcx addq % rcx , % rax movq (% rax ), % rax addq % rdx , % rax movq % rax , - 2 4 (% rbp ) movq - 8 8 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 9 6 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rsi movq % rdx , % rdi call main . recusiveRob addq $ 3 2 , % rsp movq % rax , - 5 6 (% rbp ) . LBB 1 3 : movq - 5 6 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax jle . L 9 . LBB 1 4 : movq - 5 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . L 9 : . LBE 1 4 : . LBE 1 3 : . LBB 1 5 : movq - 8 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 2 4 (% rbp ), % rbx leaq - 6 4 (% rbp ), % rax movq (% rax ), % rdx movq - 9 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % rbx , (% rax ) . LBE 1 5 : . LBB 1 6 : movq - 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 3 : . LBE 1 6 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 1 : leaq - 7 9 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 4 movl $ 7 9 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 7 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 7 4 4 , % rsp movq % rdi , - 6 9 6 (% rbp ) leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rcx movq $ 1 , - 5 9 2 (% rbp ) movq $ 0 , - 5 8 4 (% rbp ) movq $ 0 , - 5 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 4 . LBB 3 4 : movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 4 5 . L 4 4 : . LBE 3 4 : . LBB 3 5 : leaq - 5 9 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 5 : . LBE 3 5 : leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rcx movl $ 2 , % edx movq - 5 6 (% rbp ), % rax movq % rdx , - 5 6 0 (% rbp ) movq % rax , - 5 5 2 (% rbp ) movq $ 0 , - 5 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 6 . LBB 3 6 : movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 4 7 . L 4 6 : . LBE 3 6 : . LBB 3 7 : leaq - 5 6 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 7 : . LBE 3 7 : leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rcx movq $ 3 , - 5 2 8 (% rbp ) movq $ 0 , - 5 2 0 (% rbp ) movq $ 0 , - 5 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 8 . LBB 3 8 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 1 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 4 9 . L 4 8 : . LBE 3 8 : . LBB 3 9 : leaq - 5 2 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 9 : . LBE 3 9 : leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 0 (% rbp ) movq - 8 0 (% rbp ), % rcx movl $ 4 , % edx movq - 7 2 (% rbp ), % rax movq % rdx , - 4 9 6 (% rbp ) movq % rax , - 4 8 8 (% rbp ) movq $ 0 , - 4 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 0 . LBB 4 0 : movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 8 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 5 1 . L 5 0 : . LBE 4 0 : . LBB 4 1 : leaq - 4 9 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 1 : . LBE 4 1 : leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq - 8 8 (% rbp ), % rcx movq $ 5 , - 4 6 4 (% rbp ) movq $ 0 , - 4 5 6 (% rbp ) movq $ 0 , - 4 4 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 2 . LBB 4 2 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 4 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 5 3 . L 5 2 : . LBE 4 2 : . LBB 4 3 : leaq - 4 6 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 3 : . LBE 4 3 : leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 6 (% rbp ) movq - 9 6 (% rbp ), % rsi movl $ 6 , % ecx movq - 8 0 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movq % rcx , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq % rax , - 4 1 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 4 . LBB 4 4 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , (% rsi ) movq % rdx , 8 (% rsi ) movq - 4 1 6 (% rbp ), % rax movq % rax , 1 6 (% rsi ) jmp . L 5 5 . L 5 4 : . LBE 4 4 : . LBB 4 5 : leaq - 4 3 2 (% rbp ), % rax movq % rax , % rdx leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 5 : . LBE 4 5 : leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 (% rbp ) movq - 1 0 4 (% rbp ), % rsi movl $ 7 , % ecx movq - 9 6 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax movq % rcx , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq % rax , - 3 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 6 . LBB 4 6 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , (% rsi ) movq % rdx , 8 (% rsi ) movq - 3 8 4 (% rbp ), % rax movq % rax , 1 6 (% rsi ) jmp . L 5 7 . L 5 6 : . LBE 4 6 : . LBB 4 7 : leaq - 4 0 0 (% rbp ), % rax movq % rax , % rdx leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 7 : . LBE 4 7 : leaq - 6 2 4 (% rbp ), % rdx movq - 1 0 4 (% rbp ), % rax movq % rax , % rsi movq % rdx , % rdi call go . Solution . postorderTraversal leaq - 6 5 6 (% rbp ), % rdx movq - 1 0 4 (% rbp ), % rax movq % rax , % rsi movq % rdx , % rdi call go . Solution . postorderTraversal 2 leaq type ... 6 7 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 8 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 4 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 2 , 2 4 (% rax ) movq $ 6 , 3 2 (% rax ) movq $ 5 , 4 0 (% rax ) movq $ 7 , 4 8 (% rax ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 6 8 8 (% rbp ) movq $ 7 , - 6 8 0 (% rbp ) movq $ 7 , - 6 7 2 (% rbp ) . LBB 4 8 : . LBB 4 9 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 7 5 2 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 8 . LBB 5 0 : movq - 3 2 8 (% rbp ), % rcx movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 0 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 5 0 : jmp . L 5 9 . L 5 8 : . LBB 5 1 : movq - 3 2 8 (% rbp ), % rcx leaq - 3 2 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 9 : . LBE 5 1 : movq - 3 2 8 (% rbp ), % rax movq % rax , - 7 4 4 (% rbp ) leaq type ... 6 . 7 int (% rip ), % r 1 2 leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 0 . LBB 5 2 : movq - 3 6 0 (% rbp ), % rcx movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 3 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 5 2 : jmp . L 6 1 . L 6 0 : . LBB 5 3 : movq - 3 6 0 (% rbp ), % rcx leaq - 3 5 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 1 : . LBE 5 3 : movq - 3 6 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rcx , % rsi movq % rdx , % rax movq - 7 5 2 (% rbp ), % rdx movq - 7 4 4 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT xorl $ 1 , % eax testb % al , % al je . L 6 2 . LBB 5 4 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 7 3 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 3 . LBB 5 5 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 5 5 : jmp . L 6 4 . L 6 3 : . LBB 5 6 : movq - 2 6 4 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 4 : . LBE 5 6 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 7 2 8 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 7 2 0 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 9 6 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 5 . LBB 5 7 : movq - 2 9 6 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 7 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 5 7 : jmp . L 6 6 . L 6 5 : . LBB 5 8 : movq - 2 9 6 (% rbp ), % rax leaq - 2 8 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 6 : . LBE 5 8 : movq - 2 9 6 (% rbp ), % rax movq % rax , - 7 1 2 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % rax movq - 7 3 6 (% rbp ), % rdx movq - 7 2 8 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT xorl $ 1 , % eax . L 6 2 : . LBE 5 4 : . LBE 4 9 : testb % al , % al je . L 4 3 . LBB 5 9 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 7 8 4 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 8 . LBB 6 0 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 0 : jmp . L 6 9 . L 6 8 : . LBB 6 1 : movq - 2 3 2 (% rbp ), % rax leaq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 9 : . LBE 6 1 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 7 7 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 7 6 8 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 0 . LBB 6 2 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 2 : jmp . L 7 1 . L 7 0 : . LBB 6 3 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 1 : . LBE 6 3 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 7 6 0 (% rbp ) leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movdqa - 7 8 4 (% rbp ), % xmm 0 movups % xmm 0 , - 1 6 0 (% rbp ) movdqa - 7 6 8 (% rbp ), % xmm 1 movups % xmm 1 , - 1 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 2 . LBB 6 4 : movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 6 4 : jmp . L 7 3 . L 7 2 : . LBB 6 5 : movq - 1 6 8 (% rbp ), % rax leaq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 3 : . LBE 6 5 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 2 , - 1 2 0 (% rbp ) movq $ 2 , - 1 1 2 (% rbp ) leaq . LC 4 1 (% rip ), % r 1 4 movl $ 2 5 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 6 9 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 4 3 : . LBE 5 9 : . LBE 4 8 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 7 movl $ 1 3 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 1 2 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : . LBB 3 : movq $ 0 , - 2 4 (% rbp ) movq $ 1 , - 3 2 (% rbp ) . LBB 4 : jmp . L 2 . L 2 6 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 cmpq % rax , - 3 2 (% rbp ) jl . L 2 1 . L 3 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 5 cmpq % rax , - 2 4 (% rbp ) jl . L 2 2 . L 5 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jne . L 7 . LBB 8 : movq 3 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 8 cmpq % rax , - 2 4 (% rbp ) jg . L 8 cmpq $ 0 , - 2 4 (% rbp ) jns . L 9 jmp . L 2 3 . L 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 2 3 : movq - 2 4 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 9 : movq - 2 4 (% rbp ), % rax addq $ 1 , % rax movq 3 2 (% rbp ), % rdx testq % rax , % rax js . L 1 1 cmpq % rdx , % rax jle . L 2 4 . L 1 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 2 4 : movq 1 6 (% rbp ), % rdx movq % rdx , - 1 2 8 (% rbp ) movq - 2 4 (% rbp ), % rdx movq % rdx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rdx movq % rdx , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rbx movq 1 6 (% rbp ), % rcx movq 3 2 (% rbp ), % rdx cmpq % rdx , % rax je . L 1 3 movq % rax , % rdx salq $ 3 , % rdx jmp . L 1 4 . L 1 3 : movl $ 0 , % edx . L 1 4 : addq % rcx , % rdx movq % rdx , - 9 6 (% rbp ) movq 2 4 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % r 1 2 leaq (% rbx ,% r 1 2 ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 5 movq - 1 2 8 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) jmp . L 1 6 . L 1 5 : movq - 1 2 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rdx movq % rcx , - 1 2 8 (% rbp ) movq % rax , - 1 2 0 (% rbp ) movq % rdx , - 1 1 2 (% rbp ) . L 1 6 : movq % r 1 2 , % rax leaq 0 (,% rax , 8 ), % rdx movq - 9 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rcx movq % rbx , % rsi salq $ 3 , % rsi addq % rsi , % rcx movq % rax , % rsi movq % rcx , % rdi call memmove @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , 1 6 (% rbp ) movq % rdx , 2 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , 3 2 (% rbp ) subq $ 1 , - 3 2 (% rbp ) subq $ 1 , - 2 4 (% rbp ) . L 7 : . LBE 8 : . LBE 7 : addq $ 1 , - 3 2 (% rbp ) addq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 6 : . LBB 9 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax setl % al testb % al , % al je . L 1 7 . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) setl % al . L 1 7 : . LBE 1 0 : . LBE 9 : testb % al , % al jne . L 2 6 . LBE 4 : . LBE 3 : . LBB 1 1 : movq 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 1 1 : . LBE 2 : addq $ 1 1 2 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 5 8 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 5 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 3 6 , % rsp movq % rdi , - 5 3 6 (% rbp ) leaq type ... 6 4 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 5 7 6 (% rbp ) movq $ 9 , - 5 6 8 (% rbp ) movdqa - 5 7 6 (% rbp ), % xmm 0 movups % xmm 0 , - 4 6 4 (% rbp ) movq $ 1 , - 4 4 8 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 9 6 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq $ 1 , (% rax ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 4 4 0 (% rbp ) movq $ 1 , - 4 3 2 (% rbp ) movq $ 1 , - 4 2 4 (% rbp ) leaq . LC 2 4 (% rip ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 9 , - 5 5 2 (% rbp ) movdqa - 5 6 0 (% rbp ), % xmm 1 movups % xmm 1 , - 4 1 6 (% rbp ) movq $ 1 4 , - 4 0 0 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 8 (% rbp ) movq - 4 8 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 4 , 1 6 (% rax ) movq $ 1 4 , 2 4 (% rax ) movq - 4 8 8 (% rbp ), % rax movq % rax , - 3 9 2 (% rbp ) movq $ 4 , - 3 8 4 (% rbp ) movq $ 4 , - 3 7 6 (% rbp ) leaq . LC 2 5 (% rip ), % r 1 4 movl $ 9 , % r 1 5 d movq % r 1 4 , - 3 6 8 (% rbp ) movq % r 1 5 , - 3 6 0 (% rbp ) movq $ 2 6 , - 3 5 2 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 0 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 6 , 1 6 (% rax ) movq $ 1 0 , 2 4 (% rax ) movq $ 2 6 , 3 2 (% rax ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) movq $ 5 , - 3 3 6 (% rbp ) movq $ 5 , - 3 2 8 (% rbp ) leaq . LC 2 6 (% rip ), % r 1 2 movl $ 9 , % r 1 3 d movq % r 1 2 , - 3 2 0 (% rbp ) movq % r 1 3 , - 3 1 2 (% rbp ) movq $ 1 2 3 4 , - 3 0 4 (% rbp ) leaq type ... 6 1 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 7 2 (% rbp ) movq - 4 7 2 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 4 , 1 6 (% rax ) movq $ 1 4 , 2 4 (% rax ) movq $ 1 9 , 3 2 (% rax ) movq $ 5 7 , 4 0 (% rax ) movq $ 7 7 , 4 8 (% rax ) movq $ 2 2 9 , 5 6 (% rax ) movq $ 3 0 8 , 6 4 (% rax ) movq $ 9 1 8 , 7 2 (% rax ) movq $ 1 2 3 4 , 8 0 (% rax ) movq - 4 7 2 (% rbp ), % rax movq % rax , - 2 9 6 (% rbp ) movq $ 1 1 , - 2 8 8 (% rbp ) movq $ 1 1 , - 2 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 5 0 4 (% rbp ), % rax movq - 4 6 4 (% rbp ), % rcx movq - 4 5 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 1 4 4 (% rax ) movq % rbx , 1 5 2 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 1 6 0 (% rax ) movq % rbx , 1 6 8 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 1 7 6 (% rax ) movq % rbx , 1 8 4 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 5 0 4 (% rbp ), % rax leaq - 4 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 5 0 4 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 4 , - 5 2 0 (% rbp ) movq $ 4 , - 5 1 2 (% rbp ) . LBB 4 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 2 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 2 7 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 5 3 6 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 5 3 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 3 3 movl $ 3 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 0 : ret . L 4 3 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 6 4 , % rsp movq % rdi , - 2 6 4 (% rbp ) call go . linkedlist . NewCyclic movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax movl $ 3 , % esi movq % rax , % rdi call go . linkedlist . fillList movq $ 2 , - 6 4 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , % rdi call go . linkedlist . Cyclic . Delete movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) . LBB 3 9 8 : movq - 6 4 (% rbp ), % rax movq % rax , - 1 3 6 (% rbp ) leaq - 1 3 6 (% rbp ), % rdx movq - 2 5 6 (% rbp ), % rsi movq - 2 4 8 (% rbp ), % rax movq % rdx , % rcx leaq int .. d (% rip ), % rdx movq % rsi , % rdi movq % rax , % rsi call runtime . efacevaleq @ PLT xorl $ 1 , % eax testb % al , % al je . L 4 2 7 . LBB 3 9 9 : leaq int .. d (% rip ), % rax movq % rax , - 3 0 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 0 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 2 9 6 (% rbp ) leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movdqa - 3 0 4 (% rbp ), % xmm 0 movups % xmm 0 , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 2 8 . LBB 4 0 0 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 4 0 0 : jmp . L 4 2 9 . L 4 2 8 : . LBB 4 0 1 : movq - 2 3 2 (% rbp ), % rax leaq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 2 9 : . LBE 4 0 1 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 2 , - 1 2 0 (% rbp ) movq $ 2 , - 1 1 2 (% rbp ) leaq . LC 9 9 (% rip ), % r 1 4 movl $ 1 7 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 2 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 4 2 7 : . LBE 3 9 9 : . LBE 3 9 8 : . LBB 4 0 2 : movq - 5 6 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , - 7 2 (% rbp ) je . L 4 2 6 . LBB 4 0 3 : leaq int .. d (% rip ), % rax movq % rax , - 2 8 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 9 2 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 2 8 0 (% rbp ) leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movdqa - 2 8 8 (% rbp ), % xmm 1 movups % xmm 1 , - 1 6 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 3 1 . LBB 4 0 4 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 4 0 4 : jmp . L 4 3 2 . L 4 3 1 : . LBB 4 0 5 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 3 2 : . LBE 4 0 5 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 2 , - 8 8 (% rbp ) movq $ 2 , - 8 0 (% rbp ) leaq . LC 9 9 (% rip ), % r 1 2 movl $ 1 7 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq - 2 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 4 2 6 : . LBE 4 0 3 : . LBE 4 0 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 8 7 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 2 movl $ 8 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 2 4 , % rsp movq % rdi , - 8 0 8 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 9 6 (% rbp ) movq - 6 9 6 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 1 , 8 (% rax ) movq - 6 9 6 (% rbp ), % rax movq % rax , - 6 7 2 (% rbp ) movq $ 2 , - 6 6 4 (% rbp ) movq $ 2 , - 6 5 6 (% rbp ) movq $ 1 , - 6 4 8 (% rbp ) movq $ 1 , - 6 4 0 (% rbp ) leaq type ... 6 7 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 8 8 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq $ 4 , (% rax ) movq $ 5 , 8 (% rax ) movq $ 6 , 1 6 (% rax ) movq $ 7 , 2 4 (% rax ) movq $ 0 , 3 2 (% rax ) movq $ 1 , 4 0 (% rax ) movq $ 2 , 4 8 (% rax ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 6 3 2 (% rbp ) movq $ 7 , - 6 2 4 (% rbp ) movq $ 7 , - 6 1 6 (% rbp ) movq $ 0 , - 6 0 8 (% rbp ) movq $ 4 , - 6 0 0 (% rbp ) leaq type ... 6 7 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 8 0 (% rbp ) movq - 6 8 0 (% rbp ), % rax movq $ 4 , (% rax ) movq $ 5 , 8 (% rax ) movq $ 6 , 1 6 (% rax ) movq $ 7 , 2 4 (% rax ) movq $ 0 , 3 2 (% rax ) movq $ 1 , 4 0 (% rax ) movq $ 2 , 4 8 (% rax ) movq - 6 8 0 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 7 , - 5 8 4 (% rbp ) movq $ 7 , - 5 7 6 (% rbp ) movq $ 3 , - 5 6 8 (% rbp ) movq $- 1 , - 5 6 0 (% rbp ) leaq - 6 7 2 (% rbp ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 3 , - 7 1 2 (% rbp ) movq $ 3 , - 7 0 4 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 1 8 (% rip ), % rax movq % rax , - 8 3 2 (% rbp ) movq $ 6 8 , - 8 2 4 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 8 3 2 (% rbp ), % rcx movq - 8 2 4 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) . LBB 2 : movq $ 0 , - 7 6 8 (% rbp ) movq $ 0 , - 7 6 0 (% rbp ) movq $ 0 , - 7 5 2 (% rbp ) movq $ 0 , - 7 4 4 (% rbp ) movq $ 0 , - 7 3 6 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 5 6 (% rbp ), % rax movq % rax , - 8 3 2 (% rbp ) movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 1 1 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : movq - 4 5 6 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 4 6 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 2 , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 5 1 2 (% rbp ) movq % rdi , - 5 0 4 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 4 9 6 (% rbp ) movq % rdi , - 4 8 8 (% rbp ) movq 3 2 (% rax ), % rax movq % rax , - 4 8 0 (% rbp ) . LBE 8 : . LBB 9 : movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 7 6 8 (% rbp ) movq % rdx , - 7 6 0 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 7 5 2 (% rbp ) movq % rdx , - 7 4 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 7 3 6 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 7 3 6 (% rbp ), % rax movq % rax , - 7 2 8 (% rbp ) movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , - 8 0 0 (% rbp ) movq % rdx , - 7 9 2 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , - 7 8 4 (% rbp ) movq % rdx , - 7 7 6 (% rbp ) movq - 7 7 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 7 8 4 (% rbp ) pushq - 7 9 2 (% rbp ) pushq - 8 0 0 (% rbp ) movq % rax , % rdi call go . leetcode . search 3 3 addq $ 3 2 , % rsp movq % rax , - 8 1 6 (% rbp ) leaq go . leetcode .. go . leetcode . para 3 3 .. d (% rip ), % rax movq % rax , - 8 6 4 (% rbp ) leaq go . leetcode .. go . leetcode . para 3 3 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 4 jmp . L 9 . L 3 : . LBE 1 0 : . LBB 1 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 3 : . LBB 1 4 : . LBB 1 1 : movq - 3 6 0 (% rbp ), % rcx movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 1 1 : jmp . L 6 . L 9 : . LBB 1 2 : movq - 3 6 0 (% rbp ), % rax leaq - 3 5 2 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 3 3 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 : . LBE 1 2 : movq - 3 6 0 (% rbp ), % rax movq % rax , - 8 5 6 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 8 4 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 8 1 6 (% rbp ), % rdi movq % rdi , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 8 4 0 (% rbp ) movdqa - 8 6 4 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 8 4 8 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 1 9 (% rip ), % r 1 4 movl $ 3 4 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) . LBE 1 4 : . LBE 7 : . LBB 1 5 : addq $ 1 , % rbx . L 2 : . LBE 1 5 : cmpq - 8 3 2 (% rbp ), % rbx jl . L 1 1 . LBE 4 : . LBE 3 : . LBE 2 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 2 0 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 3 : leaq - 4 4 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 6 movl $ 4 4 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 5 : ret . L 7 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 9 2 , % rsp movq $ 0 , - 7 2 (% rbp ) . LBB 4 4 : call runtime . makemap_small @ PLT movq % rax , - 8 0 (% rbp ) . LBB 4 5 : movq $ 0 , - 8 8 (% rbp ) . LBB 4 6 : . LBB 4 7 : . LBB 4 8 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 3 9 2 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 4 8 : jmp . L 4 4 . L 7 3 : . LBB 4 9 : nop . LBE 4 9 : . LBB 5 0 : . LBB 5 1 : movq - 3 9 2 (% rbp ), % rax testq % rbx , % rbx js . L 4 5 cmpq % rax , % rbx jge . L 4 5 movq - 4 0 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 5 1 : . LBB 5 2 : movq % rax , - 8 8 (% rbp ) . LBE 5 2 : . LBB 5 3 : . LBB 5 4 : movq $ 0 , - 1 2 0 (% rbp ) movb $ 0 , - 1 2 1 (% rbp ) . LBB 5 5 : movq - 8 8 (% rbp ), % rax movq % rax , - 3 7 6 (% rbp ) leaq - 3 7 6 (% rbp ), % rax movq (% rax ), % rdx movq - 8 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 1 2 0 (% rbp ) movb % dl , - 1 2 1 (% rbp ) . LBE 5 5 : cmpb $ 0 , - 1 2 1 (% rbp ) jne . L 4 6 jmp . L 6 8 . L 4 5 : . LBE 5 4 : . LBE 5 3 : . LBB 6 1 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : . LBE 6 1 : . LBB 6 2 : . LBB 6 0 : . LBB 5 6 : . LBB 5 7 : movq - 8 8 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 1 2 0 (% rbp ), % rax leaq 1 (% rax ), % r 1 5 leaq - 3 6 8 (% rbp ), % rax movq (% rax ), % rdx movq - 8 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 5 , (% rax ) jmp . L 4 8 . L 6 8 : . LBE 5 7 : . LBE 5 6 : . LBB 5 8 : . LBB 5 9 : movq - 8 8 (% rbp ), % rax movq % rax , - 3 6 0 (% rbp ) movl $ 1 , % r 1 5 d leaq - 3 6 0 (% rbp ), % rax movq (% rax ), % rdx movq - 8 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 5 , (% rax ) . L 4 8 : . LBE 5 9 : . LBE 5 8 : . LBE 6 0 : . LBE 6 2 : . LBE 5 0 : . LBB 6 3 : addq $ 1 , % rbx . L 4 4 : . LBE 6 3 : cmpq % r 1 4 , % rbx jl . L 7 3 . LBE 4 7 : . LBE 4 6 : . LBE 4 5 : cmpq $ 0 , - 8 0 (% rbp ) je . L 5 1 movq - 8 0 (% rbp ), % rax movq (% rax ), % rbx jmp . L 5 2 . L 5 1 : movl $ 0 , % ebx . L 5 2 : movq % rbx , % rdx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 3 2 (% rbp ) movq $ 0 , - 4 2 4 (% rbp ) movq % rbx , - 4 1 6 (% rbp ) . LBB 6 4 : movq $ 0 , - 9 6 (% rbp ) . LBB 6 5 : . LBB 6 6 : . LBB 6 7 : leaq - 3 5 2 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 6 7 : jmp . L 5 3 . L 7 4 : . LBB 6 8 : nop . LBE 6 8 : . LBB 6 9 : . LBB 7 0 : movq - 3 5 2 (% rbp ), % rax movq (% rax ), % rax movq - 3 4 4 (% rbp ), % rax movq (% rax ), % rax . LBE 7 0 : . LBB 7 1 : movq % rax , - 9 6 (% rbp ) . LBE 7 1 : . LBB 7 2 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 5 4 . LBB 7 3 : movq - 2 5 6 (% rbp ), % rsi leaq - 1 6 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) . LBE 7 3 : jmp . L 5 5 . L 5 4 : . LBB 7 4 : movq - 2 5 6 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rdx movq % rcx , - 4 3 2 (% rbp ) movq % rax , - 4 2 4 (% rbp ) movq % rdx , - 4 1 6 (% rbp ) . L 5 5 : . LBE 7 4 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 9 6 (% rbp ), % rax movq % rax , (% rdx ) . LBE 7 2 : . LBE 6 9 : . LBB 7 5 : leaq - 3 5 2 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 5 3 : . LBE 7 5 : movq - 3 5 2 (% rbp ), % rax testq % rax , % rax jne . L 7 4 . LBE 6 6 : . LBE 6 5 : . LBE 6 4 : leaq imt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. sort . IntSlice (% rip ), % r 1 2 leaq sort . IntSlice .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 8 . LBB 7 6 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 7 6 : jmp . L 5 9 . L 5 8 : . LBB 7 7 : movq - 2 3 2 (% rbp ), % rax leaq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi leaq sort . IntSlice .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 9 : . LBE 7 7 : movq - 2 3 2 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call sort . Reverse @ PLT movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call sort . Sort @ PLT movq 2 4 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 7 8 : movq $ 0 , - 1 1 2 (% rbp ) . LBB 7 9 : . LBB 8 0 : . LBB 8 1 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rcx movl $ 0 , % eax . LBE 8 1 : jmp . L 6 0 . L 7 5 : . LBB 8 2 : nop . LBE 8 2 : . LBB 8 3 : . LBB 8 4 : movq - 1 8 4 (% rbp ), % rdx testq % rax , % rax js . L 6 1 cmpq % rdx , % rax jge . L 6 1 movq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 8 4 : . LBB 8 5 : movq % rdx , - 1 1 2 (% rbp ) . LBE 8 5 : . LBB 8 6 : movq - 1 1 2 (% rbp ), % rdx addq % rdx , - 6 4 (% rbp ) addq $ 1 , - 5 6 (% rbp ) . LBB 8 7 : movq - 1 0 4 (% rbp ), % rdx movq % rdx , % rsi shrq $ 6 3 , % rsi addq % rsi , % rdx sarq % rdx cmpq - 6 4 (% rbp ), % rdx jg . L 6 3 jmp . L 7 1 . L 6 1 : . LBE 8 7 : . LBE 8 6 : . LBB 9 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 1 : . LBE 9 1 : . LBB 9 2 : . LBB 9 0 : . LBB 8 8 : . LBB 8 9 : movq - 5 6 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax jmp . L 6 7 . L 6 3 : . LBE 8 9 : . LBE 8 8 : . LBE 9 0 : . LBE 9 2 : . LBE 8 3 : . LBB 9 3 : addq $ 1 , % rax . L 6 0 : . LBE 9 3 : cmpq % rcx , % rax jl . L 7 5 . LBE 8 0 : . LBE 7 9 : . LBE 7 8 : . LBB 9 4 : movq - 1 0 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax . L 6 7 : . LBE 9 4 : . LBE 4 4 : addq $ 3 9 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 2 3 6 movl $ 2 0 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 3 : ret . L 2 3 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 5 2 , % rsp movq % rdi , - 1 6 8 (% rbp ) movq % rsi , - 1 7 6 (% rbp ) cmpq $ 0 , - 1 6 8 (% rbp ) jne . L 2 2 7 call runtime . panicmem @ PLT . L 2 2 7 : movq - 1 6 8 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) pxor % xmm 0 , % xmm 0 movsd % xmm 0 , - 5 6 (% rbp ) . LBB 1 9 4 : . LBB 1 9 5 : movl - 1 6 0 (% rbp ), % eax cmpl $ 4 3 , % eax je . L 2 2 8 cmpl $ 4 5 , % eax je . L 2 2 9 jmp . L 2 3 5 . L 2 2 8 : . LBB 1 9 6 : . LBB 1 9 7 : movq - 1 5 2 (% rbp ), % rax movq - 1 4 4 (% rbp ), % rdx movq % rax , % rcx movq 1 6 (% rcx ), % rcx movq - 1 7 6 (% rbp ), % rax movq % rax , % rsi movq % rdx , % rdi call *% rcx . LVL 2 4 : movq % xmm 0 , % rax movq % rax , - 5 6 (% rbp ) movsd - 5 6 (% rbp ), % xmm 0 jmp . L 2 3 4 . L 2 2 9 : . LBE 1 9 7 : . LBE 1 9 6 : . LBB 1 9 8 : . LBB 1 9 9 : movq - 1 5 2 (% rbp ), % rax movq - 1 4 4 (% rbp ), % rdx movq % rax , % rcx movq 1 6 (% rcx ), % rcx movq - 1 7 6 (% rbp ), % rax movq % rax , % rsi movq % rdx , % rdi call *% rcx . LVL 2 5 : movq % xmm 0 , % rax movq . LC 1 3 6 (% rip ), % xmm 0 movq % rax , % xmm 1 xorpd % xmm 0 , % xmm 1 movapd % xmm 1 , % xmm 0 movsd % xmm 0 , - 5 6 (% rbp ) movsd - 5 6 (% rbp ), % xmm 0 jmp . L 2 3 4 . L 2 3 5 : . LBE 1 9 9 : . LBE 1 9 8 : . LBE 1 9 5 : leaq int 3 2 .. d (% rip ), % rax movq % rax , - 1 9 2 (% rbp ) leaq int 3 2 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movl - 1 6 0 (% rbp ), % edx movl % edx , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 1 8 4 (% rbp ) movdqa - 1 9 2 (% rbp ), % xmm 2 movups % xmm 2 , - 1 2 8 (% rbp ) leaq - 1 2 8 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 1 , - 7 2 (% rbp ) movq $ 1 , - 6 4 (% rbp ) leaq . LC 1 3 7 (% rip ), % r 1 4 movl $ 3 0 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq % rax , % r 1 4 movq % rdx , % r 1 5 leaq string .. d (% rip ), % r 1 2 leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 3 2 . LBB 2 0 0 : movq - 1 0 4 (% rbp ), % rcx movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 0 0 : jmp . L 2 3 3 . L 2 3 2 : . LBB 2 0 1 : movq - 1 0 4 (% rbp ), % rax leaq - 9 6 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 3 3 : . LBE 2 0 1 : movq - 1 0 4 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . gopanic @ PLT . L 2 3 4 : movq % xmm 0 , % rax . LBE 1 9 4 : movq % rax , % xmm 0 leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 6 0 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 8 6 movl $ 6 0 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 5 2 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 5 7 6 (% rbp ) movq % rdi , - 5 6 8 (% rbp ) movq % rdx , - 5 9 2 (% rbp ) movq % rcx , - 5 8 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 2 : movq - 5 6 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 5 8 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 6 4 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 5 6 0 (% rbp ) movq % rbx , - 5 5 2 (% rbp ) movq % rbx , - 5 4 4 (% rbp ) . LBB 3 : movq $ 0 , - 8 0 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) movq - 5 2 0 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 6 : jmp . L 2 . L 8 1 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq % r 1 2 , - 8 0 (% rbp ) . LBB 9 : movq - 7 2 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 5 5 2 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 3 cmpq % rax , - 8 0 (% rbp ) jl . L 6 1 . L 3 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 1 : movq - 5 6 0 (% rbp ), % rsi movq - 8 0 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 4 9 6 (% rbp ) movq % rbx , - 4 8 8 (% rbp ) movq % rbx , - 4 8 0 (% rbp ) movq - 4 8 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 4 8 0 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 . LBB 1 0 : movq - 4 9 6 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 6 . L 5 : . LBE 1 0 : . LBB 1 1 : movq - 4 9 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 : . LBE 1 1 : movq - 5 5 2 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 7 cmpq % rax , - 8 0 (% rbp ) jl . L 6 2 . L 7 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 2 : movq - 5 6 0 (% rbp ), % rcx movq - 8 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 5 6 (% rbp ), % rax testq % rax , % rax jg . L 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 9 : movq - 4 6 4 (% rbp ), % rax movq - 8 0 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 9 : . LBE 8 : . LBB 1 2 : addq $ 1 , % r 1 2 . L 2 : . LBE 1 2 : cmpq % r 1 3 , % r 1 2 jl . L 8 1 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 3 : movq $ 0 , - 8 8 (% rbp ) . LBB 1 4 : movq - 5 5 2 (% rbp ), % rax testq % rax , % rax jg . L 1 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 2 : movq - 5 6 0 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 1 6 (% rbp ) . LBB 1 5 : . LBB 1 6 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 3 9 2 (% rbp ), % rsi movl $ 0 , % eax . LBE 1 6 : jmp . L 1 3 . L 8 2 : . LBB 1 7 : nop . LBE 1 7 : . LBB 1 8 : movq % rax , - 8 8 (% rbp ) . LBB 1 9 : movq - 5 5 2 (% rbp ), % rdx testq % rdx , % rdx jg . L 1 4 movq % rdx , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 4 : movq - 5 6 0 (% rbp ), % rdx movq (% rdx ), % rcx movq 8 (% rdx ), % rbx movq % rcx , - 3 6 8 (% rbp ) movq % rbx , - 3 6 0 (% rbp ) movq 1 6 (% rdx ), % rdx movq % rdx , - 3 5 2 (% rbp ) movq - 3 6 0 (% rbp ), % rdx cmpq $ 0 , - 8 8 (% rbp ) js . L 1 5 cmpq % rdx , - 8 8 (% rbp ) jge . L 1 5 movq - 3 6 8 (% rbp ), % rcx movq - 8 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rdx , % rcx movq - 8 8 (% rbp ), % rdx movq % rdx , (% rcx ) . LBE 1 9 : . LBE 1 8 : . LBB 2 1 : addq $ 1 , % rax jmp . L 1 3 . L 1 5 : . LBE 2 1 : . LBB 2 2 : . LBB 2 0 : movq - 8 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : . LBE 2 0 : . LBE 2 2 : cmpq % rsi , % rax jl . L 8 2 . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 2 3 : movq $ 0 , - 9 6 (% rbp ) movl $ 0 , - 1 0 0 (% rbp ) . LBB 2 4 : . LBB 2 5 : . LBB 2 6 : movq - 5 6 8 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 2 6 : jmp . L 1 8 . L 8 5 : . LBB 2 7 : nop . LBE 2 7 : . LBB 2 8 : . LBB 2 9 : movq - 5 6 8 (% rbp ), % rax testq % rbx , % rbx js . L 1 9 cmpq % rax , % rbx jge . L 1 9 movq - 5 7 6 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 2 0 jmp . L 6 5 . L 1 9 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : . LBB 3 0 : leaq 1 (% rbx ), % r 1 2 . LBE 3 0 : jmp . L 2 2 . L 6 5 : . LBB 3 1 : movq - 5 7 6 (% rbp ), % rcx movq - 5 6 8 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rsi movq % rdx , % rdi movl % esi , % eax movq % rdi , % r 1 2 . L 2 2 : . LBE 3 1 : . LBE 2 9 : . LBB 3 2 : movq % rbx , - 9 6 (% rbp ) movl % eax , - 1 0 0 (% rbp ) . LBE 3 2 : . LBB 3 3 : . LBB 3 4 : movq $ 0 , - 1 1 2 (% rbp ) movl $ 0 , - 1 1 6 (% rbp ) . LBB 3 5 : . LBB 3 6 : . LBB 3 7 : movq - 5 8 4 (% rbp ), % r 1 5 movl $ 0 , % ebx . LBE 3 7 : jmp . L 2 3 . L 8 4 : . LBB 3 8 : nop . LBE 3 8 : . LBB 3 9 : . LBB 4 0 : movq - 5 8 4 (% rbp ), % rax testq % rbx , % rbx js . L 2 4 cmpq % rax , % rbx jge . L 2 4 movq - 5 9 2 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 2 5 jmp . L 6 6 . L 2 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : . LBB 4 1 : leaq 1 (% rbx ), % r 1 3 . LBE 4 1 : jmp . L 2 7 . L 6 6 : . LBB 4 2 : movq - 5 9 2 (% rbp ), % rcx movq - 5 8 4 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rsi movq % rdx , % rdi movl % esi , % eax movq % rdi , % r 1 3 . L 2 7 : . LBE 4 2 : . LBE 4 0 : . LBB 4 3 : movq % rbx , - 1 1 2 (% rbp ) movl % eax , - 1 1 6 (% rbp ) . LBE 4 3 : . LBB 4 4 : . LBB 4 5 : . LBB 4 6 : movl - 1 1 6 (% rbp ), % eax cmpl - 1 0 0 (% rbp ), % eax jne . L 8 3 . LBB 4 7 : movq - 9 6 (% rbp ), % rax addq $ 1 , % rax movq - 5 5 2 (% rbp ), % rdx testq % rax , % rax js . L 3 0 cmpq % rdx , % rax jl . L 6 8 . L 3 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 8 : movq - 5 6 0 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 1 1 2 (% rbp ), % rax leaq 1 (% rax ), % rdx movq - 3 2 8 (% rbp ), % rax testq % rdx , % rdx js . L 3 2 cmpq % rax , % rdx jl . L 6 9 . L 3 2 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 9 : movq - 5 5 2 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 3 4 cmpq % rax , - 9 6 (% rbp ) jl . L 7 0 . L 3 4 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 0 : movq - 5 6 0 (% rbp ), % rsi movq - 9 6 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 3 0 4 (% rbp ) movq % rbx , - 2 9 6 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 1 1 2 (% rbp ) js . L 3 6 cmpq % rax , - 1 1 2 (% rbp ) jge . L 3 6 movq - 3 0 4 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq - 3 3 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . LBE 4 7 : jmp . L 3 7 . L 3 6 : . LBB 4 8 : movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 3 : . LBE 4 8 : . LBB 4 9 : nop . LBE 4 9 : . LBB 5 0 : movq - 9 6 (% rbp ), % rax addq $ 1 , % rax movq - 5 5 2 (% rbp ), % rdx testq % rax , % rax js . L 3 8 cmpq % rdx , % rax jl . L 7 1 . L 3 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 1 : movq - 5 6 0 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rax cmpq $ 0 , - 1 1 2 (% rbp ) js . L 4 0 cmpq % rax , - 1 1 2 (% rbp ) jl . L 7 2 . L 4 0 : movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 2 : movq - 5 5 2 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 4 2 cmpq % rax , - 9 6 (% rbp ) jl . L 7 3 . L 4 2 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 3 : movq - 5 6 0 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax leaq 1 (% rax ), % rdx movq - 2 3 2 (% rbp ), % rax testq % rdx , % rdx js . L 4 4 cmpq % rax , % rdx jl . L 7 4 . L 4 4 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 4 : movq - 5 5 2 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 4 6 cmpq % rax , - 9 6 (% rbp ) jl . L 7 5 . L 4 6 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 5 : movq - 5 6 0 (% rbp ), % rsi movq - 9 6 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 2 0 8 (% rbp ) movq % rbx , - 2 0 0 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax cmpq $ 0 , - 1 1 2 (% rbp ) js . L 4 8 cmpq % rax , - 1 1 2 (% rbp ) jge . L 4 8 movq - 2 0 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax leaq 1 (% rax ), % rsi movq - 2 4 0 (% rbp ), % rax salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax leaq 1 (% rax ), % rcx movq - 2 7 2 (% rbp ), % rdx movq - 1 1 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq $ 1 , % rax movq % rsi , % rdx movq % rcx , % rsi movq % rax , % rdi call go . algorithms . minOfThree movq % rax , % rsi movq - 9 6 (% rbp ), % rax addq $ 1 , % rax movq - 5 5 2 (% rbp ), % rdx testq % rax , % rax jns . L 4 9 jmp . L 5 0 . L 4 8 : movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : cmpq % rdx , % rax jl . L 7 6 . L 5 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 6 : movq - 5 6 0 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 1 2 (% rbp ), % rax addq $ 1 , % rax movq - 1 6 8 (% rbp ), % rdx testq % rax , % rax js . L 5 2 cmpq % rdx , % rax jge . L 5 2 movq - 1 7 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . LBE 5 0 : jmp . L 3 7 . L 5 2 : . LBB 5 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : . LBE 5 1 : . LBE 4 6 : . LBE 4 5 : . LBE 4 4 : . LBE 3 9 : . LBB 5 2 : movq % r 1 3 , % rbx . L 2 3 : . LBE 5 2 : cmpq % r 1 5 , % rbx jl . L 8 4 . LBE 3 6 : . LBE 3 5 : . LBE 3 4 : . LBE 3 3 : . LBE 2 8 : . LBB 5 3 : movq % r 1 2 , % rbx . L 1 8 : . LBE 5 3 : cmpq % r 1 4 , % rbx jl . L 8 5 . LBE 2 5 : . LBE 2 4 : . LBE 2 3 : . LBB 5 4 : movq - 5 5 2 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 5 7 cmpq % rax , - 6 4 (% rbp ) jl . L 7 9 . L 5 7 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 9 : movq - 5 6 0 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 5 9 cmpq % rax , - 7 2 (% rbp ) jge . L 5 9 movq - 1 4 4 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax jmp . L 8 0 . L 5 9 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 0 : . LBE 5 4 : . LBE 2 : addq $ 5 5 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 4 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 4 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movb $ 0 , - 1 7 (% rbp ) . LBB 2 4 : . LBB 2 5 : cmpq $ 0 , - 4 0 (% rbp ) jne . L 2 3 . LBB 2 6 : . LBB 2 7 : movb $ 0 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax jmp . L 2 4 . L 2 3 : . LBE 2 7 : . LBE 2 6 : . LBE 2 5 : movq $ 0 , - 8 (% rbp ) . LBB 2 8 : movq $ 1 , - 1 6 (% rbp ) . LBB 2 9 : jmp . L 2 5 . L 3 3 : . LBB 3 0 : nop . LBE 3 0 : . LBB 3 1 : . LBB 3 2 : cmpq $- 1 , - 1 6 (% rbp ) je . L 2 6 cmpq $ 0 , - 1 6 (% rbp ) jne . L 2 7 call runtime . panicdivide @ PLT . L 2 7 : movq - 4 0 (% rbp ), % rax cqto idivq - 1 6 (% rbp ) movq % rdx , % rax testq % rax , % rax sete % al jmp . L 2 8 . L 2 6 : movl $ 1 , % eax . L 2 8 : testb % al , % al je . L 2 9 . LBB 3 3 : movq - 1 6 (% rbp ), % rax addq % rax , - 8 (% rbp ) . L 2 9 : . LBE 3 3 : . LBE 3 2 : . LBE 3 1 : . LBB 3 4 : addq $ 1 , - 1 6 (% rbp ) . L 2 5 : . LBE 3 4 : movq - 4 0 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax cmpq - 1 6 (% rbp ), % rax jge . L 3 3 . LBE 2 9 : . LBE 2 8 : . LBB 3 5 : movq - 8 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax sete % al movb % al , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax . L 2 4 : . LBE 3 5 : . LBE 2 4 : leave ret
. LFB 0 : leaq - 6 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 6 8 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 3 2 , % rsp movq % rdi , - 6 4 8 (% rbp ) leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 A . 0 . 6 . 7 int . 2 K . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 1 6 (% rbp ) leaq . LC 2 4 (% rip ), % rax movq % rax , - 6 7 2 (% rbp ) movq $ 8 , - 6 6 4 (% rbp ) movdqa - 6 7 2 (% rbp ), % xmm 0 movups % xmm 0 , - 5 6 0 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 8 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) movq $ 4 , - 5 3 6 (% rbp ) movq $ 4 , - 5 2 8 (% rbp ) movq $ 3 4 , - 5 2 0 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 0 (% rbp ) movq - 6 0 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq - 6 0 0 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) movq $ 4 , - 5 0 4 (% rbp ) movq $ 4 , - 4 9 6 (% rbp ) leaq . LC 2 4 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 4 8 8 (% rbp ) movq % r 1 5 , - 4 8 0 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 9 2 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq $ 0 , (% rax ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 4 7 2 (% rbp ) movq $ 1 , - 4 6 4 (% rbp ) movq $ 1 , - 4 5 6 (% rbp ) movq $ 0 , - 4 4 8 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 8 4 (% rbp ) movq - 5 8 4 (% rbp ), % rax movq $ 0 , (% rax ) movq - 5 8 4 (% rbp ), % rax movq % rax , - 4 4 0 (% rbp ) movq $ 1 , - 4 3 2 (% rbp ) movq $ 1 , - 4 2 4 (% rbp ) leaq . LC 2 4 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 4 1 6 (% rbp ) movq % r 1 3 , - 4 0 8 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 7 6 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq $ 9 , (% rax ) movq $ 9 , 8 (% rax ) movq $ 9 , 1 6 (% rax ) movq $ 9 , 2 4 (% rax ) movq $ 9 , 3 2 (% rax ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 5 , - 3 9 2 (% rbp ) movq $ 5 , - 3 8 4 (% rbp ) movq $ 1 , - 3 7 6 (% rbp ) leaq type ... 6 6 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 8 (% rbp ) movq - 5 6 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq $ 0 , 3 2 (% rax ) movq $ 0 , 4 0 (% rax ) movq - 5 6 8 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq $ 6 , - 3 6 0 (% rbp ) movq $ 6 , - 3 5 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 6 1 6 (% rbp ), % rax movq - 5 6 0 (% rbp ), % rcx movq - 5 5 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 5 4 4 (% rbp ), % rcx movq - 5 3 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 5 2 8 (% rbp ), % rcx movq - 5 2 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 5 1 2 (% rbp ), % rcx movq - 5 0 4 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 4 9 6 (% rbp ), % rcx movq - 4 8 8 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 4 8 0 (% rbp ), % rcx movq - 4 7 2 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 4 6 4 (% rbp ), % rcx movq - 4 5 6 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , 1 4 4 (% rax ) movq % rbx , 1 5 2 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 1 6 0 (% rax ) movq % rbx , 1 6 8 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 1 7 6 (% rax ) movq % rbx , 1 8 4 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 1 9 2 (% rax ) movq % rbx , 2 0 0 (% rax ) movq - 3 5 2 (% rbp ), % rdx movq % rdx , 2 0 8 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 6 1 6 (% rbp ), % rax leaq - 5 6 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 A . 0 . 6 . 7 int . 2 K . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 6 1 6 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) movq $ 3 , - 6 3 2 (% rbp ) movq $ 3 , - 6 2 4 (% rbp ) . LBB 4 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 A . 0 . 6 . 7 int . 2 K . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 4 8 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 5 6 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 3 , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 3 3 6 (% rbp ) movq % rdi , - 3 2 8 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 3 2 0 (% rbp ) movq % rdi , - 3 1 2 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 3 0 4 (% rbp ) movq % rdi , - 2 9 6 (% rbp ) movq 4 8 (% rax ), % rsi movq 5 6 (% rax ), % rdi movq % rsi , - 2 8 8 (% rbp ) movq % rdi , - 2 8 0 (% rbp ) movq 6 4 (% rax ), % rax movq % rax , - 2 7 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 2 2 4 (% rbp ), % rsi movq - 2 1 6 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 2 0 8 (% rbp ), % rsi movq - 2 0 0 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 4 8 (% rax ) movq % rdi , 5 6 (% rax ) movq - 1 6 0 (% rbp ), % rdx movq % rdx , 6 4 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 A . 0 . 6 . 7 int . 2 K . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 2 5 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 A . 0 . 6 . 7 int . 2 K . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 A . 0 . 6 . 7 int . 2 K . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 6 4 8 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 6 3 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 4 movl $ 2 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 7 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 4 8 , % rsp movq % rdi , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 5 0 : movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) . LBB 5 1 : . LBB 5 2 : . LBB 5 3 : movq go . day 1 7 . testcases (% rip ), % rax movq 8 + go . day 1 7 . testcases (% rip ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 + go . day 1 7 . testcases (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movl $ 0 , % ebx . LBE 5 3 : jmp . L 6 4 . L 7 3 : . LBB 5 4 : nop . LBE 5 4 : . LBB 5 5 : . LBB 5 6 : movq - 1 8 4 (% rbp ), % rax testq % rbx , % rbx js . L 6 5 cmpq % rax , % rbx jge . L 6 5 movq - 1 9 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) . LBE 5 6 : . LBB 5 7 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) . LBE 5 7 : . LBB 5 8 : . LBB 5 9 : movq - 2 5 6 (% rbp ), % rdx movq - 2 4 8 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . day 1 7 . FindLongestAbsolutePathLength movq % rax , - 5 6 (% rbp ) movq - 2 4 0 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 6 6 jmp . L 6 7 . L 6 5 : . LBE 5 9 : . LBE 5 8 : . LBB 6 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 6 : . LBE 6 4 : . LBB 6 5 : . LBB 6 3 : . LBB 6 0 : leaq int .. d (% rip ), % rax movq % rax , - 2 8 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 2 8 0 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 2 8 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movdqa - 2 8 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 8 . LBB 6 1 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 6 1 : jmp . L 6 9 . L 6 8 : . LBB 6 2 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 9 : . LBE 6 2 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) leaq . LC 1 0 (% rip ), % r 1 2 movl $ 2 2 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 2 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 6 7 : . LBE 6 0 : . LBE 6 3 : . LBE 6 5 : . LBE 5 5 : . LBB 6 6 : addq $ 1 , % rbx . L 6 4 : . LBE 6 6 : cmpq - 2 7 2 (% rbp ), % rbx jl . L 7 3 . LBE 5 2 : . LBE 5 1 : . LBE 5 0 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 1 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 1 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) movq % rdx , - 4 0 (% rbp ) movb $ 0 , - 1 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 4 0 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movb $ 1 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : movq - 2 4 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax addq % rdx , % rax cmpq % rax , - 4 0 (% rbp ) jle . L 4 . LBB 7 : . LBB 8 : movb $ 0 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 3 . L 4 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 9 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jle . L 5 . LBB 1 0 : . LBB 1 1 : movq - 3 2 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax movq % rdx , - 2 4 (% rbp ) movq % rax , - 3 2 (% rbp ) . L 5 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 1 2 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 7 . LBB 1 3 : . LBB 1 4 : movq - 3 2 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax sete % al movb % al , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 3 . L 2 0 : . LBE 1 4 : . LBE 1 3 : . LBE 1 2 : . LBB 1 5 : . LBB 1 6 : . LBB 1 7 : nop . LBE 1 7 : . LBB 1 8 : . LBB 1 9 : cmpq $- 1 , - 2 4 (% rbp ) je . L 8 cmpq $ 0 , - 2 4 (% rbp ) jne . L 9 call runtime . panicdivide @ PLT . L 9 : movq - 3 2 (% rbp ), % rax cqto idivq - 2 4 (% rbp ) jmp . L 1 0 . L 8 : movl $ 0 , % edx . L 1 0 : movq - 2 4 (% rbp ), % rax movq % rdx , - 2 4 (% rbp ) movq % rax , - 3 2 (% rbp ) . L 7 : . LBE 1 9 : . LBE 1 8 : cmpq $- 1 , - 2 4 (% rbp ) je . L 1 1 cmpq $ 0 , - 2 4 (% rbp ) jne . L 1 2 call runtime . panicdivide @ PLT . L 1 2 : movq - 3 2 (% rbp ), % rax cqto idivq - 2 4 (% rbp ) movq % rdx , % rax testq % rax , % rax setne % al jmp . L 1 3 . L 1 1 : movl $ 0 , % eax . L 1 3 : testb % al , % al jne . L 2 0 . LBE 1 6 : . LBE 1 5 : . LBB 2 0 : cmpq $- 1 , - 2 4 (% rbp ) je . L 1 6 cmpq $ 0 , - 2 4 (% rbp ) jne . L 1 7 call runtime . panicdivide @ PLT . L 1 7 : movq - 4 0 (% rbp ), % rax cqto idivq - 2 4 (% rbp ) movq % rdx , % rax testq % rax , % rax sete % al jmp . L 1 8 . L 1 6 : movl $ 1 , % eax . L 1 8 : movb % al , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax . L 3 : . LBE 2 0 : . LBE 2 : leave ret
leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 7 movl $ 2 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 2 4 , % rsp movq % rdi , - 2 4 8 (% rbp ) leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) leaq . LC 2 0 (% rip ), % r 1 2 movl $ 1 0 , % r 1 3 d movq % r 1 2 , - 2 0 8 (% rbp ) movq % r 1 3 , - 2 0 0 (% rbp ) movq $ 1 0 , - 1 9 2 (% rbp ) movq $ 4 , - 1 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 3 . LBB 2 4 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 2 4 : jmp . L 2 4 . L 2 3 : . LBB 2 5 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 4 : . LBE 2 5 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 , - 2 3 2 (% rbp ) movq $ 1 , - 2 2 4 (% rbp ) . LBB 2 6 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 (% rbp ) . LBB 2 7 : . LBB 2 8 : . LBB 2 9 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 2 9 : jmp . L 2 5 . L 3 6 : . LBB 3 0 : nop . LBE 3 0 : . LBB 3 1 : . LBB 3 2 : movq - 1 3 6 (% rbp ), % rax testq % rbx , % rbx js . L 2 6 cmpq % rax , % rbx jge . L 2 6 movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) . LBE 3 2 : . LBB 3 3 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 4 0 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 2 7 jmp . L 3 4 . L 2 6 : . LBE 3 3 : . LBB 3 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : . LBE 3 6 : . LBB 3 7 : . LBB 3 4 : movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) jmp . L 2 9 . L 3 4 : . LBE 3 4 : . LBB 3 5 : leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 9 : . LBE 3 5 : . LBE 3 7 : . LBB 3 8 : leaq go . Solution . TestSolution 2 .. func 1 (% rip ), % r 1 4 movq - 4 0 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq % r 1 4 , - 6 4 (% rbp ) movq % r 1 2 , - 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 0 . LBB 3 9 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 3 9 : jmp . L 3 1 . L 3 0 : . LBB 4 0 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 1 : . LBE 4 0 : movq - 7 2 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 2 4 8 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 3 8 : . LBE 3 1 : . LBB 4 1 : addq $ 1 , % rbx . L 2 5 : . LBE 4 1 : cmpq % r 1 3 , % rbx jl . L 3 6 . LBE 2 8 : . LBE 2 7 : . LBE 2 6 : addq $ 2 2 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 8 0 movl $ 2 4 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 8 0 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 3 2 , % rsp movq % rdi , - 2 3 2 (% rbp ) movq % rsi , - 2 4 0 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) . LBB 3 4 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 3 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 2 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 5 6 (% rbp ) movq 2 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 2 4 (% rbp ) movq % rbx , - 2 1 6 (% rbp ) movq % rbx , - 2 0 8 (% rbp ) . LBB 3 5 : movq $ 0 , - 2 4 (% rbp ) . LBB 3 6 : jmp . L 3 3 . L 7 7 : . LBB 3 7 : nop . LBE 3 7 : . LBB 3 8 : movq - 5 6 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 2 1 6 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 4 cmpq % rax , - 2 4 (% rbp ) jl . L 7 0 . L 3 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 0 : movq - 2 2 4 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) movq % rbx , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 4 4 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 3 6 . LBB 3 9 : movq - 1 6 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 3 7 . L 3 6 : . LBE 3 9 : . LBB 4 0 : movq - 1 6 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 7 : . LBE 4 0 : . LBE 3 8 : . LBB 4 1 : addq $ 1 , - 2 4 (% rbp ) . L 3 3 : . LBE 4 1 : movq - 2 4 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax jl . L 7 7 . LBE 3 6 : . LBE 3 5 : . LBB 4 2 : movq $ 0 , - 3 2 (% rbp ) . LBB 4 3 : jmp . L 4 0 . L 7 9 : . LBB 4 4 : nop . LBE 4 4 : . LBB 4 5 : . LBB 4 6 : movq $ 0 , - 4 0 (% rbp ) . LBB 4 7 : jmp . L 4 1 . L 7 8 : . LBB 4 8 : nop . LBE 4 8 : . LBB 4 9 : cmpq $- 1 , - 5 6 (% rbp ) jne . L 4 2 movq - 2 4 0 (% rbp ), % rax negq % rax movq % rax , % rdx jmp . L 4 3 . L 4 2 : cmpq $ 0 , - 5 6 (% rbp ) jne . L 4 4 call runtime . panicdivide @ PLT . L 4 4 : movq - 2 4 0 (% rbp ), % rax cqto idivq - 5 6 (% rbp ) movq % rax , % rdx . L 4 3 : movq - 3 2 (% rbp ), % rax addq % rdx , % rax movq % rax , - 4 8 (% rbp ) . LBB 5 0 : cmpq $- 1 , - 5 6 (% rbp ) jne . L 4 5 movl $ 0 , % edx jmp . L 4 6 . L 4 5 : cmpq $ 0 , - 5 6 (% rbp ) jne . L 4 7 call runtime . panicdivide @ PLT . L 4 7 : movq - 2 4 0 (% rbp ), % rax cqto idivq - 5 6 (% rbp ) . L 4 6 : movq - 4 0 (% rbp ), % rax addq % rdx , % rax cmpq % rax , - 5 6 (% rbp ) jg . L 4 8 . LBB 5 1 : addq $ 1 , - 4 8 (% rbp ) . L 4 8 : . LBE 5 1 : . LBE 5 0 : cmpq $- 1 , - 6 4 (% rbp ) je . L 4 9 cmpq $ 0 , - 6 4 (% rbp ) jne . L 5 0 call runtime . panicdivide @ PLT . L 5 0 : movq - 4 8 (% rbp ), % rax cqto idivq - 6 4 (% rbp ) movq % rdx , % rcx jmp . L 5 1 . L 4 9 : movl $ 0 , % ecx . L 5 1 : movq - 2 1 6 (% rbp ), % rax testq % rcx , % rcx js . L 5 2 cmpq % rax , % rcx jl . L 7 2 . L 5 2 : movq % rax , % rsi movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 7 2 : cmpq $- 1 , - 5 6 (% rbp ) jne . L 5 4 movl $ 0 , % edx jmp . L 5 5 . L 5 4 : cmpq $ 0 , - 5 6 (% rbp ) jne . L 5 6 call runtime . panicdivide @ PLT . L 5 6 : movq - 2 4 0 (% rbp ), % rax cqto idivq - 5 6 (% rbp ) . L 5 5 : movq - 4 0 (% rbp ), % rax leaq (% rdx ,% rax ), % rsi movq - 2 2 4 (% rbp ), % rdx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) cmpq $- 1 , - 5 6 (% rbp ) je . L 5 7 cmpq $ 0 , - 5 6 (% rbp ) jne . L 5 8 call runtime . panicdivide @ PLT . L 5 8 : movq % rsi , % rax cqto idivq - 5 6 (% rbp ) jmp . L 5 9 . L 5 7 : movl $ 0 , % edx . L 5 9 : movq - 1 2 0 (% rbp ), % rax testq % rdx , % rdx js . L 6 0 cmpq % rax , % rdx jl . L 7 3 . L 6 0 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 6 2 cmpq % rax , - 3 2 (% rbp ) jl . L 7 4 . L 6 2 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 4 : movq 1 6 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 9 6 (% rbp ) movq % rbx , - 8 8 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 6 4 cmpq % rax , - 4 0 (% rbp ) jge . L 6 4 movq - 9 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq - 1 2 8 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . LBE 4 9 : . LBB 5 2 : addq $ 1 , - 4 0 (% rbp ) jmp . L 4 1 . L 6 4 : . LBE 5 2 : . LBB 5 3 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : . LBE 5 3 : movq - 4 0 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jl . L 7 8 . LBE 4 7 : . LBE 4 6 : . LBE 4 5 : . LBB 5 4 : addq $ 1 , - 3 2 (% rbp ) . L 4 0 : . LBE 5 4 : movq - 3 2 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax jl . L 7 9 . LBE 4 3 : . LBE 4 2 : . LBB 5 5 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 2 3 2 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 5 5 : . LBE 3 4 : movq - 2 3 2 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 6 movl $ 2 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 : ret . L 7 6 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 8 0 , % rsp movq % rdi , - 2 6 4 (% rbp ) movq % rsi , - 2 7 2 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) movq $ 0 , - 2 0 8 (% rbp ) . LBB 3 9 : . LBB 4 0 : . LBB 4 1 : cmpq $ 0 , - 2 8 0 (% rbp ) setle % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 4 7 . LBB 4 2 : movq - 2 7 2 (% rbp ), % rax movq 3 2 (% rax ), % rax cmpq % rax , - 2 8 0 (% rbp ) setg % al . L 4 7 : . LBE 4 2 : . LBE 4 1 : testb % al , % al je . L 4 8 . LBB 4 3 : movq - 2 8 0 (% rbp ), % rbx . LBB 4 4 : movq % rbx , % rdx movq % rbx , % rsi leaq uint 8 .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 2 4 (% rbp ) movq % rbx , - 2 1 6 (% rbp ) movq % rbx , - 2 0 8 (% rbp ) movq - 2 6 4 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 4 6 . L 4 8 : . LBE 4 4 : . LBE 4 3 : . LBE 4 0 : movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq - 2 8 0 (% rbp ), % rax movl % eax , % edi call go . bytepool . log 2 Ceil movq % rax , - 2 4 (% rbp ) cmpq $ 0 , - 2 7 2 (% rbp ) jne . L 5 0 call runtime . panicmem @ PLT . L 5 0 : movq - 2 7 2 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx testq % rdx , % rdx js . L 5 1 movq - 2 4 (% rbp ), % rdx cmpq % rdx , % rax jle . L 5 1 movq - 1 9 2 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 5 , % rax addq % rdx , % rax movq % rax , - 3 2 (% rbp ) cmpq $ 0 , - 3 2 (% rbp ) je . L 5 2 jmp . L 7 2 . L 5 1 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndexU @ PLT . L 5 2 : call runtime . panicmem @ PLT . L 7 2 : movq - 3 2 (% rbp ), % rax addq $ 2 4 , % rax movq % rax , % rdi call sync . Mutex . Lock @ PLT . LBB 4 5 : movq - 3 2 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 0 (% rbp ) cmpq $ 0 , - 4 0 (% rbp ) jle . L 5 4 . LBB 4 6 : movq - 3 2 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq - 1 5 2 (% rbp ), % rdx testq % rax , % rax js . L 5 5 cmpq % rdx , % rax jge . L 5 5 movq - 1 6 0 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 3 2 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq - 1 2 0 (% rbp ), % rdx testq % rax , % rax jns . L 5 6 jmp . L 5 7 . L 5 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 6 : cmpq % rdx , % rax jge . L 5 7 movq - 1 2 8 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq $ 0 , - 9 6 (% rbp ) movq $ 0 , - 8 8 (% rbp ) movq $ 0 , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 8 0 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 5 8 jmp . L 7 3 . L 5 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 8 : . LBB 4 7 : movq - 9 6 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 6 0 . L 7 3 : . LBE 4 7 : . LBB 4 8 : movq - 9 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 0 : . LBE 4 8 : movq - 3 2 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 0 (% rbp ), % rax leaq - 1 (% rax ), % rdi movq - 4 8 (% rbp ), % rax testq % rdi , % rdi js . L 6 1 cmpq % rax , % rdi jg . L 6 1 testq % rdi , % rdi jns . L 6 2 jmp . L 7 4 . L 6 1 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 7 4 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 6 2 : movq - 6 4 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax movq % rcx , (% rax ) movq - 3 2 (% rbp ), % rax movq % rdi , 8 (% rax ) movq - 3 2 (% rbp ), % rax movq % rdx , 1 6 (% rax ) . L 5 4 : . LBE 4 6 : . LBE 4 5 : cmpq $ 0 , - 3 2 (% rbp ) jne . L 6 4 call runtime . panicmem @ PLT . L 6 4 : movq - 3 2 (% rbp ), % rax addq $ 2 4 , % rax movq % rax , % rdi call sync . Mutex . Unlock @ PLT . LBB 4 9 : movq - 2 5 6 (% rbp ), % rax testq % rax , % rax jne . L 6 5 . LBB 5 0 : cmpq $ 6 3 , - 2 4 (% rbp ) ja . L 6 6 movq - 2 4 (% rbp ), % rax movl $ 1 , % edx movq % rdx , % rbx movl % eax , % ecx salq % cl , % rbx jmp . L 6 7 . L 6 6 : movl $ 0 , % ebx . L 6 7 : movq % rbx , % rdx movq % rbx , % rsi leaq uint 8 .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 5 6 (% rbp ) movq % rbx , - 2 4 8 (% rbp ) movq % rbx , - 2 4 0 (% rbp ) . L 6 5 : . LBE 5 0 : . LBE 4 9 : . LBB 5 1 : movq - 2 4 0 (% rbp ), % rax cmpq $ 0 , - 2 8 0 (% rbp ) js . L 6 8 cmpq % rax , - 2 8 0 (% rbp ) jg . L 6 8 cmpq $ 0 , - 2 8 0 (% rbp ) jns . L 6 9 jmp . L 7 5 . L 6 8 : movq - 2 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 7 5 : movq - 2 8 0 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 6 9 : movq - 2 5 6 (% rbp ), % rdx movq - 2 4 0 (% rbp ), % rax movq % rdx , - 2 2 4 (% rbp ) movq - 2 8 0 (% rbp ), % rdx movq % rdx , - 2 1 6 (% rbp ) movq % rax , - 2 0 8 (% rbp ) movq - 2 6 4 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 4 6 : . LBE 5 1 : . LBE 3 9 : movq - 2 6 4 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 2 8 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 : ret . L 2 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 4 4 , % rsp movq % rdi , - 1 5 2 (% rbp ) movq % rsi , - 1 6 0 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) . LBB 2 6 : movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 2 4 (% rbp ) . LBB 2 7 : . LBB 2 8 : jmp . L 2 0 . L 2 7 : . LBB 2 9 : nop . LBE 2 9 : . LBB 3 0 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rbx movq - 2 4 (% rbp ), % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 1 . LBB 3 1 : movq - 8 0 (% rbp ), % rsi leaq - 4 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) . LBE 3 1 : jmp . L 2 2 . L 2 1 : . LBB 3 2 : movq - 8 0 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq % rcx , - 1 4 4 (% rbp ) movq % rax , - 1 3 6 (% rbp ) movq % rdx , - 1 2 8 (% rbp ) . L 2 2 : . LBE 3 2 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 2 4 (% rbp ) . L 2 0 : . LBE 3 0 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 2 7 . LBE 2 8 : . LBE 2 7 : . LBB 3 3 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 5 2 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 3 : . LBE 2 6 : movq - 1 5 2 (% rbp ), % rax addq $ 1 4 4 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 6 movl $ 1 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 5 2 , % rsp movq $ 0 , - 4 0 (% rbp ) movq $ 0 , - 7 2 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 2 : movq $ 1 , - 5 6 (% rbp ) . L 1 2 : . LBB 3 : . LBB 4 : . LBB 5 : movq - 5 6 (% rbp ), % rax addq $ 1 , % rax imulq - 5 6 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , % rbx pxor % xmm 1 , % xmm 1 cvtsi 2 sdq - 4 0 (% rbp ), % xmm 1 movq % xmm 1 , % rax movq % rax , % xmm 0 call math . Sqrt @ PLT cvttsd 2 siq % xmm 0 , % rax movl $ 0 , % edx movq % rbx , - 4 0 (% rbp ) movq % rax , - 7 2 (% rbp ) movq % rdx , - 4 8 (% rbp ) . LBE 5 : . LBB 6 : movq $ 1 , - 6 4 (% rbp ) . LBB 7 : jmp . L 2 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : cmpq $- 1 , - 6 4 (% rbp ) je . L 3 cmpq $ 0 , - 6 4 (% rbp ) jne . L 4 call runtime . panicdivide @ PLT . L 4 : movq - 4 0 (% rbp ), % rax cqto idivq - 6 4 (% rbp ) movq % rdx , % rax testq % rax , % rax sete % al jmp . L 5 . L 3 : movl $ 1 , % eax . L 5 : testb % al , % al je . L 6 . LBB 1 1 : addq $ 1 , - 4 8 (% rbp ) . L 6 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 1 2 : addq $ 1 , - 6 4 (% rbp ) . L 2 : . LBE 1 2 : movq - 6 4 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jl . L 1 5 . LBE 7 : . LBE 6 : salq - 4 8 (% rbp ) . LBB 1 3 : movq - 7 2 (% rbp ), % rax imulq % rax , % rax cmpq % rax , - 4 0 (% rbp ) jne . L 9 . LBB 1 4 : addq $ 1 , - 4 8 (% rbp ) . L 9 : . LBE 1 4 : . LBE 1 3 : . LBB 1 5 : cmpq $ 5 0 0 , - 4 8 (% rbp ) jle . L 1 0 . LBB 1 6 : leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 1 4 4 (% rbp ) movq % r 1 3 , - 1 3 6 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) leaq - 9 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) jmp . L 1 4 . L 1 0 : . LBE 1 6 : . LBE 1 5 : . LBE 4 : . LBB 1 7 : addq $ 1 , - 5 6 (% rbp ) . LBE 1 7 : jmp . L 1 2 . L 1 4 : . LBE 3 : . LBE 2 : leaq - 2 4 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 3 movl $ 2 1 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 3 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 0 0 , % rsp movq % rdi , - 2 0 0 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) . LBB 2 0 : leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 (% rbp ) movq - 1 0 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) movl $ 0 , % r 8 d movl $ 8 , % ecx movl $ 1 6 , % edx movl $ 0 , % esi leaq type .. map . 6 int . 7 bool (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 3 2 (% rbp ) leaq type ... 6 0 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) . LBB 2 1 : movq $ 0 , - 2 4 (% rbp ) . LBB 2 2 : jmp . L 1 8 . L 3 2 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movb $ 0 , - 3 3 (% rbp ) . LBB 2 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 9 cmpq % rax , - 2 4 (% rbp ) jl . L 2 8 . L 1 9 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 8 8 (% rbp ) leaq - 8 8 (% rbp ), % rax movq (% rax ), % rdx movq - 3 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 bool (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movl % edx , % eax movb % al , - 3 3 (% rbp ) . LBE 2 6 : cmpb $ 0 , - 3 3 (% rbp ) jne . L 3 1 . LBB 2 7 : . LBB 2 8 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 2 4 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 2 3 cmpq % rdx , % rax jl . L 2 9 . L 2 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 8 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 4 8 (% rbp ) movl $ 1 , % ebx leaq - 4 8 (% rbp ), % rax movq (% rax ), % rdx movq - 3 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 bool (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movb % bl , (% rax ) . LBE 2 8 : leaq - 1 9 2 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rdx , % rsi movq % rax , % rdi call go . leetcode . generateIncSubsets addq $ 4 8 , % rsp jmp . L 2 2 . L 3 1 : . LBE 2 7 : . LBB 2 9 : nop . L 2 2 : . LBE 2 9 : . LBE 2 5 : . LBE 2 4 : . LBB 3 0 : addq $ 1 , - 2 4 (% rbp ) . L 1 8 : . LBE 3 0 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 2 4 (% rbp ) jl . L 3 2 . LBE 2 2 : . LBE 2 1 : . LBB 3 1 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 2 0 0 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 1 : . LBE 2 0 : movq - 2 0 0 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 1 : leaq - 3 6 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 2 movl $ 3 6 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 2 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 1 2 , % rsp movq % rdi , - 3 1 2 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) movb $ 0 , - 2 4 8 (% rbp ) movq $ 9 , - 2 4 0 (% rbp ) movb $ 1 , - 2 3 2 (% rbp ) movq $ 2 7 , - 2 2 4 (% rbp ) movb $ 1 , - 2 1 6 (% rbp ) movq $ 4 5 , - 2 0 8 (% rbp ) movb $ 0 , - 2 0 0 (% rbp ) leaq - 2 5 6 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 4 , - 2 8 0 (% rbp ) movq $ 4 , - 2 7 2 (% rbp ) . LBB 1 1 : movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) . LBB 1 2 : . LBB 1 3 : . LBB 1 4 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movl $ 0 , % ebx . LBE 1 4 : jmp . L 1 2 . L 2 1 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 1 8 4 (% rbp ), % rax testq % rbx , % rbx js . L 1 3 cmpq % rax , % rbx jge . L 1 3 movq - 1 9 2 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 1 7 : . LBB 1 8 : movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) . LBE 1 8 : . LBB 1 9 : movq - 3 0 4 (% rbp ), % rax movq % rax , % rdi call go . leetcode . isPowerOfThree movb % al , - 4 9 (% rbp ) . LBB 2 0 : movzbl - 2 9 6 (% rbp ), % eax cmpb % al , - 4 9 (% rbp ) jne . L 1 4 jmp . L 1 5 . L 1 3 : . LBE 2 0 : . LBE 1 9 : . LBB 2 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : . LBE 2 5 : . LBB 2 6 : . LBB 2 4 : . LBB 2 1 : leaq int .. d (% rip ), % rax movq % rax , - 3 5 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 3 0 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) leaq bool .. d (% rip ), % rax movq % rax , - 3 3 6 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 1 5 2 (% rbp ), % rax movzbl - 4 9 (% rbp ), % edx movb % dl , (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 3 2 8 (% rbp ) leaq bool .. d (% rip ), % r 1 4 leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 4 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movzbl - 2 9 6 (% rbp ), % edx movb % dl , (% rax ) movq - 1 4 4 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 3 5 2 (% rbp ), % xmm 0 movups % xmm 0 , - 1 2 8 (% rbp ) movdqa - 3 3 6 (% rbp ), % xmm 1 movups % xmm 1 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 6 . LBB 2 2 : movq - 1 3 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) . LBE 2 2 : jmp . L 1 7 . L 1 6 : . LBB 2 3 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 7 : . LBE 2 3 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 7 (% rip ), % r 1 2 movl $ 3 7 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 3 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 1 5 : . LBE 2 1 : . LBE 2 4 : . LBE 2 6 : . LBE 1 6 : . LBB 2 7 : addq $ 1 , % rbx . L 1 2 : . LBE 2 7 : cmpq - 3 2 0 (% rbp ), % rbx jl . L 2 1 . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 9 0 movl $ 1 8 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 9 : ret . L 1 9 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 5 2 , % rsp movq % rdi , - 1 6 8 (% rbp ) movq % rsi , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) . LBB 1 7 4 : movq 2 4 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 4 0 (% rbp ) . LBB 1 7 5 : movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 1 7 6 : . LBB 1 7 7 : . LBB 1 7 8 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 1 7 8 : jmp . L 1 7 9 . L 1 8 9 : . LBB 1 7 9 : nop . LBE 1 7 9 : . LBB 1 8 0 : . LBB 1 8 1 : movq - 1 2 0 (% rbp ), % rax testq % rbx , % rbx js . L 1 8 0 cmpq % rax , % rbx jge . L 1 8 0 movq - 1 2 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 8 1 : . LBB 1 8 2 : movq % rbx , - 4 8 (% rbp ) movq % rax , - 5 6 (% rbp ) . LBE 1 8 2 : . LBB 1 8 3 : movq - 1 7 6 (% rbp ), % rax subq - 5 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBB 1 8 4 : movq $ 0 , - 7 2 (% rbp ) movb $ 0 , - 7 3 (% rbp ) . LBB 1 8 5 : movq - 6 4 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) leaq - 1 0 4 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 7 2 (% rbp ) movb % dl , - 7 3 (% rbp ) . LBE 1 8 5 : cmpb $ 0 , - 7 3 (% rbp ) jne . L 1 8 1 jmp . L 1 8 7 . L 1 8 0 : . LBE 1 8 4 : . LBE 1 8 3 : . LBB 1 9 1 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 1 : . LBE 1 9 1 : . LBB 1 9 2 : . LBB 1 9 0 : . LBB 1 8 6 : . LBB 1 8 7 : leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rdx , (% rax ) movq - 4 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 9 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 2 , - 1 5 2 (% rbp ) movq $ 2 , - 1 4 4 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 7 8 . L 1 8 7 : . LBE 1 8 7 : . LBE 1 8 6 : . LBB 1 8 8 : . LBB 1 8 9 : movq - 5 6 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) movq - 4 8 (% rbp ), % r 1 2 leaq - 8 8 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 2 , (% rax ) . LBE 1 8 9 : . LBE 1 8 8 : . LBE 1 9 0 : . LBE 1 9 2 : . LBE 1 8 0 : . LBB 1 9 3 : addq $ 1 , % rbx . L 1 7 9 : . LBE 1 9 3 : cmpq % r 1 3 , % rbx jl . L 1 8 9 . LBE 1 7 7 : . LBE 1 7 6 : . LBE 1 7 5 : . LBB 1 9 4 : movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 7 8 : . LBE 1 9 4 : . LBE 1 7 4 : movq - 1 6 8 (% rbp ), % rax addq $ 1 5 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 5 2 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 1 movl $ 5 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 1 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 5 0 4 , % rsp movq % rdi , - 5 0 4 (% rbp ) movq % rsi , - 5 1 2 (% rbp ) movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 5 0 4 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : leaq . LC 1 7 (% rip ), % rcx movl $ 1 , % ebx movq % rcx , - 4 1 6 (% rbp ) movq % rbx , - 4 0 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx jmp . L 3 5 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movb $ 4 8 , - 3 9 4 (% rbp ) movb $ 4 9 , - 3 9 3 (% rbp ) movb $ 5 0 , - 3 9 2 (% rbp ) movb $ 5 1 , - 3 9 1 (% rbp ) movb $ 5 2 , - 3 9 0 (% rbp ) movb $ 5 3 , - 3 8 9 (% rbp ) movb $ 5 4 , - 3 8 8 (% rbp ) movb $ 5 5 , - 3 8 7 (% rbp ) movb $ 5 6 , - 3 8 6 (% rbp ) movb $ 5 7 , - 3 8 5 (% rbp ) leaq - 3 9 4 (% rbp ), % rcx movq % rcx , - 4 4 8 (% rbp ) movq $ 1 0 , - 4 4 0 (% rbp ) movq $ 1 0 , - 4 3 2 (% rbp ) movq $ 0 , - 4 6 4 (% rbp ) movq $ 0 , - 4 5 6 (% rbp ) movb $ 0 , - 1 7 (% rbp ) . LBB 6 : cmpq $ 0 , - 5 0 4 (% rbp ) jns . L 4 . LBB 7 : negq - 5 0 4 (% rbp ) xorb $ 1 , - 1 7 (% rbp ) . L 4 : . LBE 7 : . LBE 6 : . LBB 8 : cmpq $ 0 , - 5 1 2 (% rbp ) jns . L 5 . LBB 9 : negq - 5 1 2 (% rbp ) xorb $ 1 , - 1 7 (% rbp ) . L 5 : . LBE 9 : . LBE 8 : . LBB 1 0 : cmpb $ 0 , - 1 7 (% rbp ) je . L 6 . LBB 1 1 : leaq . LC 1 8 (% rip ), % rax movl $ 1 , % edx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) . L 6 : . LBE 1 1 : . LBE 1 0 : cmpq $- 1 , - 5 1 2 (% rbp ) jne . L 7 movq - 5 0 4 (% rbp ), % rax negq % rax jmp . L 8 . L 7 : cmpq $ 0 , - 5 1 2 (% rbp ) jne . L 9 call runtime . panicdivide @ PLT . L 9 : movq - 5 0 4 (% rbp ), % rax cqto idivq - 5 1 2 (% rbp ) . L 8 : movq % rax , % rdi call strconv . Itoa @ PLT movq - 4 6 4 (% rbp ), % rcx movq - 4 5 6 (% rbp ), % rbx movq % rcx , - 3 8 4 (% rbp ) movq % rbx , - 3 7 6 (% rbp ) movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) leaq - 3 8 4 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) cmpq $- 1 , - 5 1 2 (% rbp ) je . L 1 0 cmpq $ 0 , - 5 1 2 (% rbp ) jne . L 1 1 call runtime . panicdivide @ PLT . L 1 1 : movq - 5 0 4 (% rbp ), % rax cqto idivq - 5 1 2 (% rbp ) movq % rdx , % rax jmp . L 1 2 . L 1 0 : movl $ 0 , % eax . L 1 2 : movq % rax , - 3 2 (% rbp ) . LBB 1 2 : cmpq $ 0 , - 3 2 (% rbp ) jne . L 1 3 . LBB 1 3 : . LBB 1 4 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx jmp . L 3 5 . L 1 3 : . LBE 1 4 : . LBE 1 3 : . LBE 1 2 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) leaq . LC 1 9 (% rip ), % rax movq % rax , - 3 3 6 (% rbp ) movq $ 1 , - 3 2 8 (% rbp ) leaq - 3 5 2 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) leaq type ... 6 0 x . 7 uint 8 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 0 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq $ 0 , - 4 8 8 (% rbp ) movq $ 0 , - 4 8 0 (% rbp ) movl $ 0 , % r 8 d movl $ 8 , % ecx movl $ 1 6 , % edx movl $ 0 , % esi leaq type .. map . 6 int . 7 int (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 4 0 (% rbp ) . LBB 1 5 : . LBB 1 6 : jmp . L 1 4 . L 4 0 : . LBB 1 7 : nop . LBE 1 7 : . LBB 1 8 : . LBB 1 9 : movq $ 0 , - 4 8 (% rbp ) movb $ 0 , - 4 9 (% rbp ) . LBB 2 0 : movq - 3 2 (% rbp ), % rax movq % rax , - 3 1 2 (% rbp ) leaq - 3 1 2 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 4 8 (% rbp ) movb % dl , - 4 9 (% rbp ) . LBE 2 0 : cmpb $ 0 , - 4 9 (% rbp ) je . L 1 5 . LBB 2 1 : . LBB 2 2 : movq - 4 8 0 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 6 cmpq % rax , - 4 8 (% rbp ) jg . L 1 6 cmpq $ 0 , - 4 8 (% rbp ) jns . L 1 7 jmp . L 3 6 . L 1 6 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 3 6 : movq - 4 8 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 7 : movq - 4 9 6 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 2 9 6 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 4 8 0 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 9 cmpq % rax , - 4 8 (% rbp ) jle . L 3 7 . L 1 9 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 3 7 : movq - 4 9 6 (% rbp ), % rdx movq - 4 8 0 (% rbp ), % rax cmpq % rax , - 4 8 (% rbp ) je . L 2 1 movq - 4 8 (% rbp ), % rax jmp . L 2 2 . L 2 1 : movl $ 0 , % eax . L 2 2 : addq % rdx , % rax movq % rax , - 2 7 2 (% rbp ) movq - 4 8 8 (% rbp ), % rax subq - 4 8 (% rbp ), % rax movq % rax , - 2 6 4 (% rbp ) movq - 4 8 0 (% rbp ), % rax subq - 4 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 9 6 (% rbp ), % rax movq % rax , - 2 1 6 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 1 , - 2 0 0 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq % rax , - 1 8 4 (% rbp ) leaq . LC 2 1 (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movl $ 5 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx jmp . L 3 5 . L 1 5 : . LBE 2 2 : . LBE 2 1 : . LBE 1 9 : . LBB 2 3 : movq - 3 2 (% rbp ), % rax movq % rax , - 1 5 2 (% rbp ) movq - 4 8 8 (% rbp ), % rbx leaq - 1 5 2 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % rbx , (% rax ) . LBE 2 3 : movq - 3 2 (% rbp ), % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax movq % rax , - 3 2 (% rbp ) cmpq $- 1 , - 5 1 2 (% rbp ) jne . L 2 3 movq - 3 2 (% rbp ), % rax negq % rax jmp . L 2 4 . L 2 3 : cmpq $ 0 , - 5 1 2 (% rbp ) jne . L 2 5 call runtime . panicdivide @ PLT . L 2 5 : movq - 3 2 (% rbp ), % rax cqto idivq - 5 1 2 (% rbp ) . L 2 4 : movq - 4 4 0 (% rbp ), % rdx testq % rax , % rax js . L 2 6 cmpq % rdx , % rax jl . L 3 8 . L 2 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 4 4 8 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 5 0 (% rbp ) cmpq $- 1 , - 5 1 2 (% rbp ) jne . L 2 8 movl $ 0 , % eax jmp . L 2 9 . L 2 8 : cmpq $ 0 , - 5 1 2 (% rbp ) jne . L 3 0 call runtime . panicdivide @ PLT . L 3 0 : movq - 3 2 (% rbp ), % rax cqto idivq - 5 1 2 (% rbp ) movq % rdx , % rax . L 2 9 : movq % rax , - 3 2 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 3 1 . LBB 2 4 : movq - 1 4 4 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq uint 8 .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) . LBE 2 4 : jmp . L 3 2 . L 3 1 : . LBB 2 5 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq % rcx , - 4 9 6 (% rbp ) movq % rax , - 4 8 8 (% rbp ) movq % rdx , - 4 8 0 (% rbp ) . L 3 2 : . LBE 2 5 : movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx addq % rax , % rdx movzbl - 5 0 (% rbp ), % eax movb % al , (% rdx ) . L 1 4 : . LBE 1 8 : cmpq $ 0 , - 3 2 (% rbp ) jne . L 4 0 . LBE 1 6 : . LBE 1 5 : . LBB 2 6 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 4 8 8 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx . L 3 5 : . LBE 2 6 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
leaq - 4 0 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 6 movl $ 4 0 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : . LEHB 0 : ret . L 6 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 6 0 , % rsp . LEHE 0 : movq % rdi , - 3 7 6 (% rbp ) movq % rdx , % rcx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movb $ 0 , - 3 0 5 (% rbp ) . LBB 3 0 : . LBB 3 1 : movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movq % rax , - 2 1 6 (% rbp ) movq - 2 1 6 (% rbp ), % rcx movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 1 6 (% rbp ), % rdx leaq main . main .. thunk 0 (% rip ), % rdi leaq - 3 0 5 (% rbp ), % rsi leaq - 3 0 4 (% rbp ), % rax movq % rdx , % rcx movq % rdi , % rdx movq % rax , % rdi . LEHB 1 : call runtime . deferprocStack @ PLT . LBE 3 1 : movq - 4 0 0 (% rbp ), % rax testq % rax , % rax jne . L 4 7 movl $ 0 , % eax jmp . L 4 8 . L 4 7 : movq - 4 0 0 (% rbp ), % rax movq (% rax ), % rax . L 4 8 : movq % rax , % rsi leaq io . Reader .. d (% rip ), % rdi call runtime . requireitab @ PLT movq % rax , % r 1 2 movq - 3 9 2 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call bufio . NewScanner @ PLT movq % rax , - 5 6 (% rbp ) . LBB 3 2 : . LBB 3 3 : jmp . L 4 9 . L 6 5 : . LBB 3 4 : nop . LBE 3 4 : . LBB 3 5 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call bufio . Scanner . Text @ PLT movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) leaq - 3 6 8 (% rbp ), % rax movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call strings . Fields @ PLT movl $ 0 , % esi leaq type .. chan . 0 string (% rip ), % rdi call runtime . makechan @ PLT movq % rax , - 6 4 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 8 4 (% rbp ) leaq - 2 0 8 (% rbp ), % rdx movq - 3 7 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . chansend 1 @ PLT leaq - 1 4 4 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . chanrecv 1 @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) leaq . LC 3 4 (% rip ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) leaq - 1 2 8 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % r 1 2 movq % rdx , % r 1 3 movq - 4 0 0 (% rbp ), % rax testq % rax , % rax jne . L 5 0 movl $ 0 , % eax jmp . L 5 1 . L 5 0 : movq - 4 0 0 (% rbp ), % rax movq (% rax ), % rax . L 5 1 : movq % rax , % rsi leaq io . Writer .. d (% rip ), % rdi call runtime . requireitab @ PLT movq % rax , % r 1 4 movq - 3 9 2 (% rbp ), % rax movq % rax , % r 1 5 leaq - 9 6 (% rbp ), % rax movq % r 1 2 , % r 8 movq % r 1 3 , % r 9 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 8 , % rcx movq % rdi , % r 1 0 movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % r 9 movq % rdi , % rdx movq % r 1 0 , % r 8 movq % r 9 , % rsi movq % rax , % rdi call io . WriteString @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) . L 4 9 : . LBE 3 5 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call bufio . Scanner . Scan @ PLT . LEHE 1 : testb % al , % al jne . L 6 5 . L 5 2 : . LBE 3 3 : . LBE 3 2 : . LBE 3 0 : movl $ 1 , % r 1 2 d . L 5 9 : leaq - 3 0 5 (% rbp ), % rax movq % rax , % rdi . LEHB 2 : call runtime . deferreturn @ PLT . LEHE 2 : cmpl $ 1 , % r 1 2 d jne . L 5 4 jmp . L 6 4 . L 6 0 : leaq - 3 0 5 (% rbp ), % rax movq % rax , % rdi . LEHB 3 : call runtime . checkdefer @ PLT . LEHE 3 : jmp . L 5 2 . L 6 1 : movq % rax , % rbx movl $ 0 , % r 1 2 d jmp . L 5 9 . L 5 4 : movq % rbx , % rax movq % rax , % rdi . LEHB 4 : call _Unwind_Resume @ PLT . L 6 2 : leaq - 3 0 5 (% rbp ), % rax movq % rax , % rdi call runtime . checkdefer @ PLT jmp . L 5 9 . L 6 4 : addq $ 3 6 0 , % rsp . LEHE 4 : popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 1 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 1 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , % rdi call go . day 1 4 6 . PruneZeroSubtrees movq % rax , % rdx movq - 2 4 (% rbp ), % rax addq $ 8 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 4 . LBB 6 : movq % rdx , (% rax ) . LBE 6 : jmp . L 5 . L 4 : . LBB 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 5 : . LBE 7 : movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , % rdi call go . day 1 4 6 . PruneZeroSubtrees movq % rax , % rdx movq - 2 4 (% rbp ), % rax addq $ 1 6 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 6 . LBB 8 : movq % rdx , (% rax ) . LBE 8 : jmp . L 7 . L 6 : . LBB 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 7 : . LBE 9 : . LBB 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rax testq % rax , % rax sete % al testb % al , % al je . L 8 . LBB 1 3 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax sete % al . L 8 : . LBE 1 3 : . LBE 1 2 : testb % al , % al je . L 9 . LBB 1 4 : movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax sete % al . L 9 : . LBE 1 4 : . LBE 1 1 : testb % al , % al je . L 1 0 . LBB 1 5 : . LBB 1 6 : movq $ 0 , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 3 . L 1 0 : . LBE 1 6 : . LBE 1 5 : . LBE 1 0 : . LBB 1 7 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 3 : . LBE 1 7 : . LBE 2 : leave ret
. LFB 2 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 9 0 movl $ 1 3 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 4 : ret . L 3 9 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 8 , % rsp leaq . LC 1 4 2 (% rip ), % rax movl $ 1 0 0 0 , % edx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) call runtime . printlock @ PLT leaq . LC 1 4 3 (% rip ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 3 4 , - 1 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . printstring @ PLT call runtime . printnl @ PLT call runtime . printunlock @ PLT movq $ 0 , - 5 6 (% rbp ) . LBB 2 4 2 : movq $ 0 , - 6 4 (% rbp ) . LBB 2 4 3 : jmp . L 3 6 7 . L 3 8 9 : . LBB 2 4 4 : nop . LBE 2 4 4 : . LBB 2 4 5 : movq - 6 4 (% rbp ), % rax leaq 1 3 (% rax ), % rdi movq - 8 8 (% rbp ), % rax testq % rdi , % rdi js . L 3 6 8 cmpq % rax , % rdi jg . L 3 6 8 cmpq $ 0 , - 6 4 (% rbp ) jns . L 3 6 9 jmp . L 3 7 0 . L 3 6 8 : movq % rax , % rsi call runtime . goPanicSliceAlen @ PLT . L 3 6 9 : cmpq % rdi , - 6 4 (% rbp ) jg . L 3 7 0 movq - 9 6 (% rbp ), % rdx cmpq - 6 4 (% rbp ), % rdi jne . L 3 7 1 jmp . L 3 8 4 . L 3 7 0 : movq - 6 4 (% rbp ), % rax movq % rdi , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 3 7 1 : movq - 6 4 (% rbp ), % rax jmp . L 3 7 3 . L 3 8 4 : movl $ 0 , % eax . L 3 7 3 : addq % rdx , % rax movq % rax , - 1 1 2 (% rbp ) movq % rdi , % rax subq - 6 4 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) movq $ 1 , - 7 2 (% rbp ) . LBB 2 4 6 : movl $ 0 , - 7 6 (% rbp ) . LBB 2 4 7 : . LBB 2 4 8 : . LBB 2 4 9 : movq - 1 0 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movl $ 0 , % eax . LBE 2 4 9 : jmp . L 3 7 4 . L 3 8 8 : . LBB 2 5 0 : nop . LBE 2 5 0 : . LBB 2 5 1 : . LBB 2 5 2 : movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 3 7 5 cmpq % rdx , % rax jge . L 3 7 5 movq - 1 1 2 (% rbp ), % rdx movq % rax , % rcx addq % rcx , % rdx movzbl (% rdx ), % edx movzbl % dl , % edx cmpl $ 1 2 7 , % edx jle . L 3 7 6 jmp . L 3 8 5 . L 3 7 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 7 6 : . LBB 2 5 3 : addq $ 1 , % rax . LBE 2 5 3 : jmp . L 3 7 8 . L 3 8 5 : . LBB 2 5 4 : movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rcx movq % rax , % rdx movq % rsi , % rdi movq % rcx , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movl % ecx , % edx movq % rbx , % rax . L 3 7 8 : . LBE 2 5 4 : . LBE 2 5 2 : . LBB 2 5 5 : movl % edx , - 7 6 (% rbp ) . LBE 2 5 5 : . LBB 2 5 6 : movl - 7 6 (% rbp ), % edx subl $ 4 8 , % edx movslq % edx , % rdx movq - 7 2 (% rbp ), % rcx imulq % rcx , % rdx movq % rdx , - 7 2 (% rbp ) . L 3 7 4 : . LBE 2 5 6 : . LBE 2 5 1 : cmpq - 1 2 8 (% rbp ), % rax jl . L 3 8 8 . LBE 2 4 8 : . LBE 2 4 7 : . LBE 2 4 6 : . LBB 2 5 7 : movq - 7 2 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jle . L 3 8 1 . LBB 2 5 8 : movq - 7 2 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) call runtime . printlock @ PLT leaq . LC 1 4 4 (% rip ), % r 1 4 movl $ 2 3 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . printstring @ PLT call runtime . printsp @ PLT movq - 1 1 2 (% rbp ), % rdx movq - 1 0 4 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call runtime . printstring @ PLT call runtime . printnl @ PLT call runtime . printunlock @ PLT . L 3 8 1 : . LBE 2 5 8 : . LBE 2 5 7 : . LBE 2 4 5 : . LBB 2 5 9 : addq $ 1 , - 6 4 (% rbp ) . L 3 6 7 : . LBE 2 5 9 : movq - 6 4 (% rbp ), % rax leaq 1 3 (% rax ), % rdx movq - 8 8 (% rbp ), % rax cmpq % rax , % rdx jl . L 3 8 9 . LBE 2 4 3 : . LBE 2 4 2 : call runtime . printlock @ PLT leaq . LC 1 4 5 (% rip ), % r 1 2 movl $ 2 1 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . printstring @ PLT call runtime . printsp @ PLT movq - 5 6 (% rbp ), % rax movq % rax , % rdi call runtime . printint @ PLT call runtime . printnl @ PLT call runtime . printunlock @ PLT addq $ 8 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 3 movl $ 2 8 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 3 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 6 4 , % rsp movq % rdi , - 2 6 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . LBB 3 : cmpq $ 0 , - 3 2 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq - 2 6 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 0 , - 2 0 0 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq - 3 2 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 4 0 (% rbp ) movq % rbx , - 2 3 2 (% rbp ) movq % rbx , - 2 2 4 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) leaq go . leetcode 0 8 0 2 . eventualSafeNodes .. func 1 (% rip ), % rsi leaq - 2 4 0 (% rbp ), % rcx leaq 1 6 (% rbp ), % rdi leaq - 2 4 8 (% rbp ), % rdx movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) movq - 1 0 4 (% rbp ), % rax movq % rsi , (% rax ) movq % rcx , 8 (% rax ) movq % rdi , 1 6 (% rax ) movq % rdx , 2 4 (% rax ) movq - 1 0 4 (% rbp ), % rax movq % rax , - 2 4 8 (% rbp ) . LBB 6 : movq $ 0 , - 2 4 (% rbp ) . LBB 7 : jmp . L 4 . L 1 2 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 4 8 (% rbp ), % rdx movq - 2 4 8 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rcx movq - 2 4 (% rbp ), % rax movq % rdx , % r 1 0 movq % rax , % rdi call *% rcx . LVL 1 : testb % al , % al je . L 5 . LBB 1 1 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 6 . LBB 1 2 : movq - 9 6 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) . LBE 1 2 : jmp . L 7 . L 6 : . LBB 1 3 : movq - 9 6 (% rbp ), % rcx movq - 8 0 (% rbp ), % rdx movq % rcx , - 2 0 8 (% rbp ) movq % rax , - 2 0 0 (% rbp ) movq % rdx , - 1 9 2 (% rbp ) . L 7 : . LBE 1 3 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rax , (% rdx ) . L 5 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 1 4 : addq $ 1 , - 2 4 (% rbp ) . L 4 : . LBE 1 4 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jl . L 1 2 . LBE 7 : . LBE 6 : . LBB 1 5 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 2 6 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 1 5 : . LBE 2 : movq - 2 6 4 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 1 : leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 7 movl $ 2 6 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 2 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 2 4 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movb $ 0 , - 3 3 (% rbp ) . LBB 8 : . LBB 9 : movq - 2 4 8 (% rbp ), % rax testq % rax , % rax jne . L 1 0 . LBB 1 0 : . LBB 1 1 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 2 1 . L 1 0 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : leaq - 8 0 (% rbp ), % rdi movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx leaq - 2 0 8 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . stringtoslicebyte @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) . LBB 1 2 : movq $ 0 , - 4 8 (% rbp ) . LBB 1 3 : . LBB 1 4 : . LBB 1 5 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 1 5 : jmp . L 1 2 . L 2 6 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : movq % rbx , - 4 8 (% rbp ) . LBB 1 8 : . LBB 1 9 : movq $ 0 , - 5 6 (% rbp ) . LBB 2 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 3 cmpq % rax , - 4 8 (% rbp ) jl . L 2 2 . L 1 3 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : movq 1 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) . LBB 2 1 : . LBB 2 2 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % r 1 4 movl $ 0 , % r 1 2 d . LBE 2 2 : jmp . L 1 5 . L 2 5 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : movq % r 1 2 , - 5 6 (% rbp ) . LBB 2 5 : . LBB 2 6 : movq - 5 6 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rdx , % rsi movq % rax , % rdi call go . Solution . dfs addq $ 4 8 , % rsp testb % al , % al je . L 1 6 . LBB 2 7 : . LBB 2 8 : movb $ 1 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 2 1 . L 1 6 : . LBE 2 8 : . LBE 2 7 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBB 2 9 : addq $ 1 , % r 1 2 . L 1 5 : . LBE 2 9 : cmpq % r 1 4 , % r 1 2 jl . L 2 5 . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBB 3 0 : addq $ 1 , % rbx . L 1 2 : . LBE 3 0 : cmpq % r 1 3 , % rbx jl . L 2 6 . LBE 1 4 : . LBE 1 3 : . LBE 1 2 : . LBB 3 1 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax . L 2 1 : . LBE 3 1 : . LBE 8 : leaq - 3 2 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jge . L 2 . LBB 4 : . LBB 5 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBB 6 : . LBB 7 : movq - 2 4 (% rbp ), % rax subq - 3 2 (% rbp ), % rax movq - 3 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call go . division . divide movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 3 : . LBE 7 : . LBE 6 : . LBE 3 : . LBE 2 : leave ret
. LFB 1 : leaq - 3 6 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 2 movl $ 3 6 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 1 2 , % rsp movq % rdi , - 3 1 2 (% rbp ) movq $ 1 3 , - 2 8 8 (% rbp ) movq $ 4 , - 2 8 0 (% rbp ) movq $ 2 , - 2 7 2 (% rbp ) movq $ 2 , - 2 6 4 (% rbp ) movq $ 1 5 , - 2 5 6 (% rbp ) movq $ 6 , - 2 4 8 (% rbp ) movq $ 2 4 , - 2 4 0 (% rbp ) movq $ 5 , - 2 3 2 (% rbp ) . LBB 3 1 : movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) . LBB 3 2 : . LBB 3 3 : . LBB 3 4 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq $ 4 , - 3 2 0 (% rbp ) movl $ 0 , % ebx . LBE 3 4 : jmp . L 2 2 . L 3 1 : . LBB 3 5 : nop . LBE 3 5 : . LBB 3 6 : . LBB 3 7 : testq % rbx , % rbx js . L 2 3 cmpq $ 3 , % rbx jg . L 2 3 movq % rbx , % rax salq $ 4 , % rax leaq - 4 8 (% rbp ), % rcx addq % rcx , % rax subq $ 1 7 6 , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 3 7 : . LBB 3 8 : movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) . LBE 3 8 : . LBB 3 9 : movq - 3 0 4 (% rbp ), % rax movq % rax , % rdi call go . problem 1 3 9 9 . countLargestGroup movq % rax , - 5 6 (% rbp ) . LBB 4 0 : movq - 2 9 6 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 2 4 jmp . L 2 5 . L 2 3 : . LBE 4 0 : . LBE 3 9 : . LBB 4 5 : movl $ 4 , % esi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : . LBE 4 5 : . LBB 4 6 : . LBB 4 4 : . LBB 4 1 : leaq int .. d (% rip ), % rax movq % rax , - 3 5 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 3 0 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 3 3 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 3 2 8 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 4 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 4 4 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 3 5 2 (% rbp ), % xmm 0 movups % xmm 0 , - 1 2 8 (% rbp ) movdqa - 3 3 6 (% rbp ), % xmm 1 movups % xmm 1 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 6 . LBB 4 2 : movq - 1 3 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) . LBE 4 2 : jmp . L 2 7 . L 2 6 : . LBB 4 3 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 7 : . LBE 4 3 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 2 5 (% rip ), % r 1 2 movl $ 2 5 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 3 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 2 5 : . LBE 4 1 : . LBE 4 4 : . LBE 4 6 : . LBE 3 6 : . LBB 4 7 : addq $ 1 , % rbx . L 2 2 : . LBE 4 7 : cmpq - 3 2 0 (% rbp ), % rbx jl . L 3 1 . LBE 3 3 : . LBE 3 2 : . LBE 3 1 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 4 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 1 1 movl $ 3 1 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 4 : ret . L 1 1 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 8 8 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 7 5 : movq 2 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . LBB 7 6 : cmpq $ 0 , - 4 8 (% rbp ) jne . L 6 6 . LBB 7 7 : . LBB 7 8 : movq $ 0 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 1 0 3 . L 6 6 : . LBE 7 8 : . LBE 7 7 : . LBE 7 6 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 6 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 6 8 : movq 1 6 (% rbp ), % rax movq (% rax ), % rbx leaq go . kit . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq % rbx , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 9 . LBB 7 9 : movq - 2 8 0 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 5 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 7 9 : jmp . L 7 0 . L 6 9 : . LBB 8 0 : movq - 2 8 0 (% rbp ), % rax leaq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi leaq go . kit . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 0 : . LBE 8 0 : movq - 2 8 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) leaq - 2 4 8 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) . LBB 8 1 : movq $ 1 , - 3 2 (% rbp ) . LBB 8 2 : jmp . L 7 1 . L 1 1 0 : . LBB 8 3 : nop . LBE 8 3 : . LBB 8 4 : . LBB 8 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 7 2 cmpq % rax , - 3 2 (% rbp ) jl . L 1 0 4 . L 7 2 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 4 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq go . kit . NULL (% rip ), % rax cmpq % rax , % rdx je . L 7 4 . LBB 8 6 : movq - 2 4 (% rbp ), % rax leaq 8 (% rax ), % rbx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 7 5 cmpq % rax , - 3 2 (% rbp ) jl . L 1 0 5 . L 7 5 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 5 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 leaq go . kit . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq % r 1 2 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 7 . LBB 8 7 : movq - 2 4 8 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 2 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 8 7 : jmp . L 7 8 . L 7 7 : . LBB 8 8 : movq - 2 4 8 (% rbp ), % rax leaq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi leaq go . kit . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 8 : . LBE 8 8 : movq - 2 4 8 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 7 9 . LBB 8 9 : movq % rax , (% rbx ) jmp . L 8 0 . L 7 9 : . LBE 8 9 : . LBB 9 0 : movq % rax , % rsi movq % rbx , % rdi call runtime . gcWriteBarrier @ PLT . L 8 0 : . LBE 9 0 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rbx movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 8 1 . LBB 9 1 : movq - 2 0 8 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 1 go . kit . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 9 1 : jmp . L 8 2 . L 8 1 : . LBB 9 2 : movq - 2 0 8 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 8 2 : . LBE 9 2 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 8 3 . LBB 9 3 : movq % r 1 2 , (% rax ) jmp . L 7 4 . L 8 3 : . LBE 9 3 : . LBB 9 4 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 7 4 : . LBE 9 4 : . LBE 8 6 : . LBE 8 5 : addq $ 1 , - 3 2 (% rbp ) . LBB 9 5 : . LBB 9 6 : movq - 3 2 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax setl % al testb % al , % al je . L 8 4 . LBB 9 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 8 5 cmpq % rax , - 3 2 (% rbp ) jl . L 1 0 6 . L 8 5 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 6 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq go . kit . NULL (% rip ), % rax cmpq % rax , % rdx setne % al . L 8 4 : . LBE 9 7 : . LBE 9 6 : testb % al , % al je . L 8 7 . LBB 9 8 : movq - 2 4 (% rbp ), % rax leaq 1 6 (% rax ), % rbx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 8 8 cmpq % rax , - 3 2 (% rbp ) jl . L 1 0 7 . L 8 8 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 7 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 leaq go . kit . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq % r 1 2 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 0 . LBB 9 9 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 9 9 : jmp . L 9 1 . L 9 0 : . LBB 1 0 0 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq go . kit . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 1 : . LBE 1 0 0 : movq - 1 8 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 9 2 . LBB 1 0 1 : movq % rax , (% rbx ) jmp . L 9 3 . L 9 2 : . LBE 1 0 1 : . LBB 1 0 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . gcWriteBarrier @ PLT . L 9 3 : . LBE 1 0 2 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rbx movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 9 4 . LBB 1 0 3 : movq - 1 4 4 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 1 go . kit . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 1 0 3 : jmp . L 9 5 . L 9 4 : . LBB 1 0 4 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 9 5 : . LBE 1 0 4 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 9 6 . LBB 1 0 5 : movq % r 1 2 , (% rax ) jmp . L 8 7 . L 9 6 : . LBE 1 0 5 : . LBB 1 0 6 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 8 7 : . LBE 1 0 6 : . LBE 9 8 : . LBE 9 5 : . LBB 1 0 7 : movq - 2 9 6 (% rbp ), % rax testq % rax , % rax jle . L 1 0 9 . LBB 1 0 8 : movq - 2 9 6 (% rbp ), % rax testq % rax , % rax jg . L 9 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 9 8 : movq - 3 0 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax testq % rax , % rax jg . L 9 9 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 9 9 : movq - 3 0 4 (% rbp ), % rdx movq - 2 8 8 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq - 2 9 6 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 2 8 8 (% rbp ), % rax subq $ 1 , % rax movq % rcx , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq % rax , - 2 8 8 (% rbp ) . LBE 1 0 8 : . LBE 1 0 7 : . LBE 8 4 : . LBB 1 1 1 : addq $ 1 , - 3 2 (% rbp ) . L 7 1 : . LBE 1 1 1 : movq - 3 2 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 1 1 0 jmp . L 1 0 1 . L 1 0 9 : . LBB 1 1 2 : . LBB 1 1 0 : . LBB 1 0 9 : nop . L 1 0 1 : . LBE 1 0 9 : . LBE 1 1 0 : . LBE 1 1 2 : . LBE 8 2 : . LBE 8 1 : . LBB 1 1 3 : movq - 5 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 1 0 3 : . LBE 1 1 3 : . LBE 7 5 : addq $ 2 8 8 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 2 4 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 6 7 movl $ 1 6 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 3 1 : ret . L 4 6 7 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 5 2 , % rsp movq $- 1 , - 2 4 (% rbp ) movq 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . LBB 4 3 0 : movq $ 0 , - 4 0 (% rbp ) . LBB 4 3 1 : jmp . L 4 2 9 . L 4 6 6 : . LBB 4 3 2 : nop . LBE 4 3 2 : . LBB 4 3 3 : . LBB 4 3 4 : . LBB 4 3 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 4 3 0 cmpq % rax , - 4 0 (% rbp ) jl . L 4 5 5 . L 4 3 0 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 5 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax testq % rax , % rax sete % al testb % al , % al je . L 4 3 2 . LBB 4 3 6 : movq - 4 0 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax setne % al . L 4 3 2 : . LBE 4 3 6 : . LBE 4 3 5 : testb % al , % al je . L 4 3 3 . LBB 4 3 7 : addq $ 1 , - 2 4 (% rbp ) . LBB 4 3 8 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 2 4 (% rbp ), % rdx movq 1 6 (% rbp ), % rcx movq 2 4 (% rbp ), % rbx movq % rcx , - 1 2 8 (% rbp ) movq % rbx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 4 0 (% rbp ), % rax movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 4 0 (% rbp ) js . L 4 3 4 cmpq % rcx , - 4 0 (% rbp ) jl . L 4 5 6 . L 4 3 4 : movq - 4 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 5 6 : movq 1 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rdi movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 2 4 (% rbp ) js . L 4 3 6 cmpq % rcx , - 2 4 (% rbp ) jl . L 4 5 7 . L 4 3 6 : movq - 2 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 5 7 : movq 1 6 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rsi movq - 1 5 2 (% rbp ), % rcx testq % rdx , % rdx js . L 4 3 8 cmpq % rcx , % rdx jl . L 4 5 8 . L 4 3 8 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 8 : movq - 1 6 0 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq % rdi , (% rdx ) movq - 1 2 0 (% rbp ), % rdx testq % rax , % rax js . L 4 4 0 cmpq % rdx , % rax jl . L 4 5 9 . L 4 4 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 5 9 : movq - 1 2 8 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . LBE 4 3 8 : . LBE 4 3 7 : jmp . L 4 2 9 . L 4 3 3 : . LBB 4 3 9 : . LBB 4 4 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 4 4 2 cmpq % rax , - 4 0 (% rbp ) jl . L 4 6 0 . L 4 4 2 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 0 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq $ 2 , % rax jne . L 4 4 4 . LBB 4 4 1 : subq $ 1 , - 3 2 (% rbp ) . LBB 4 4 2 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 3 2 (% rbp ), % rdx movq 1 6 (% rbp ), % rcx movq 2 4 (% rbp ), % rbx movq % rcx , - 6 4 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 0 (% rbp ), % rax movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 4 0 (% rbp ) js . L 4 4 5 cmpq % rcx , - 4 0 (% rbp ) jl . L 4 6 1 . L 4 4 5 : movq - 4 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 6 1 : movq 1 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rdi movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 3 2 (% rbp ) js . L 4 4 7 cmpq % rcx , - 3 2 (% rbp ) jl . L 4 6 2 . L 4 4 7 : movq - 3 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 6 2 : movq 1 6 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rsi movq - 8 8 (% rbp ), % rcx testq % rdx , % rdx js . L 4 4 9 cmpq % rcx , % rdx jl . L 4 6 3 . L 4 4 9 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 3 : movq - 9 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq % rdi , (% rdx ) movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 4 5 1 cmpq % rdx , % rax jl . L 4 6 4 . L 4 5 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 6 4 : movq - 6 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . LBE 4 4 2 : . LBE 4 4 1 : jmp . L 4 2 9 . L 4 4 4 : . LBB 4 4 3 : addq $ 1 , - 4 0 (% rbp ) . L 4 2 9 : . LBE 4 4 3 : . LBE 4 4 0 : . LBE 4 3 9 : . LBE 4 3 4 : . LBE 4 3 3 : movq - 4 0 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jl . L 4 6 6 . LBE 4 3 1 : . LBE 4 3 0 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 4 7 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 movl $ 4 7 2 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 : pushq % rbp movq % rsp , % rbp subq $ 4 6 4 , % rsp movb $ 0 , - 1 (% rbp ) . LBB 2 : leaq - 1 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call go . problem 0 8 3 6 . projecting addq $ 3 2 , % rsp movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 3 0 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 2 9 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) leaq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq 5 6 (% rbp ) pushq 4 8 (% rbp ) pushq 4 0 (% rbp ) movq % rax , % rdi call go . problem 0 8 3 6 . projecting addq $ 3 2 , % rsp movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) . LBB 3 : . LBB 4 : pushq - 4 1 6 (% rbp ) pushq - 4 2 4 (% rbp ) pushq - 4 3 2 (% rbp ) pushq - 3 5 2 (% rbp ) pushq - 3 6 0 (% rbp ) pushq - 3 6 8 (% rbp ) call go . problem 0 8 3 6 . isLineOverlap addq $ 4 8 , % rsp testb % al , % al je . L 2 . LBB 5 : pushq - 4 4 8 (% rbp ) pushq - 4 5 6 (% rbp ) pushq - 4 6 4 (% rbp ) pushq - 3 8 4 (% rbp ) pushq - 3 9 2 (% rbp ) pushq - 4 0 0 (% rbp ) call go . problem 0 8 3 6 . isLineOverlap addq $ 4 8 , % rsp . L 2 : . LBE 5 : . LBE 4 : movb % al , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax . LBE 3 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 9 movl $ 2 1 6 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 9 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 0 0 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq 1 6 (% rbp ), % rax movq (% rax ), % rbx leaq main . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq % rbx , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 . LBB 6 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 : jmp . L 6 . L 5 : . LBB 7 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq main . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 : . LBE 7 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 8 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jne . L 7 . LBB 9 : . LBB 1 0 : movq - 4 0 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 7 : . LBE 1 0 : . LBE 9 : . LBE 8 : movq $ 0 , - 2 4 (% rbp ) . LBB 1 1 : movq $ 0 , - 2 4 (% rbp ) . LBB 1 2 : jmp . L 8 . L 3 8 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : addq $ 1 , - 2 4 (% rbp ) . L 8 : . LBE 1 4 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 9 : movq 4 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 0 cmpq % rax , - 2 4 (% rbp ) jl . L 3 2 . L 1 0 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq 1 6 (% rbp ), % rax movq (% rax ), % rdx movq 4 0 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jne . L 3 8 . LBE 1 2 : . LBE 1 1 : movq - 2 4 (% rbp ), % rax leaq 1 (% rax ), % rdi movq 3 2 (% rbp ), % rax testq % rdi , % rdi js . L 1 4 cmpq % rax , % rdi jg . L 1 4 testq % rdi , % rdi jg . L 1 5 jmp . L 3 4 . L 1 4 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 3 4 : movq % rdi , % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 1 5 : movq 5 6 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 7 cmpq % rax , - 2 4 (% rbp ) jg . L 1 7 cmpq $ 0 , - 2 4 (% rbp ) jns . L 1 8 jmp . L 3 5 . L 1 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 3 5 : movq - 2 4 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 8 : movq 4 0 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 2 4 (% rbp ), % rax movq % rax , - 1 5 2 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 3 , % rax addq % rdx , % rax movq % rax , - 1 2 8 (% rbp ) leaq - 1 (% rdi ), % rax movq % rax , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 1 2 (% rbp ) pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) call main . buildTree addq $ 4 8 , % rsp movq % rax , % rdx movq - 4 0 (% rbp ), % rax addq $ 8 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 2 0 . LBB 1 5 : movq % rdx , (% rax ) . LBE 1 5 : jmp . L 2 1 . L 2 0 : . LBB 1 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 1 : . LBE 1 6 : movq - 2 4 (% rbp ), % rax addq $ 1 , % rax movq 3 2 (% rbp ), % rdx testq % rax , % rax js . L 2 2 cmpq % rdx , % rax jle . L 3 6 . L 2 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 3 6 : movq - 2 4 (% rbp ), % rdx addq $ 1 , % rdx movq 5 6 (% rbp ), % rcx testq % rdx , % rdx js . L 2 4 cmpq % rcx , % rdx jle . L 3 7 . L 2 4 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 3 7 : movq 4 0 (% rbp ), % rsi movq 5 6 (% rbp ), % rcx cmpq % rcx , % rdx je . L 2 6 movq % rdx , % rcx salq $ 3 , % rcx jmp . L 2 7 . L 2 6 : movl $ 0 , % ecx . L 2 7 : addq % rsi , % rcx movq % rcx , - 9 6 (% rbp ) movq 4 8 (% rbp ), % rcx subq % rdx , % rcx movq % rcx , - 8 8 (% rbp ) movq 5 6 (% rbp ), % rcx subq % rdx , % rcx movq % rcx , - 8 0 (% rbp ) movq 1 6 (% rbp ), % rcx movq 3 2 (% rbp ), % rdx cmpq % rdx , % rax je . L 2 8 movq % rax , % rdx salq $ 3 , % rdx jmp . L 2 9 . L 2 8 : movl $ 0 , % edx . L 2 9 : addq % rcx , % rdx movq % rdx , - 6 4 (% rbp ) movq 2 4 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 4 8 (% rbp ) pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) pushq - 4 8 (% rbp ) pushq - 5 6 (% rbp ) pushq - 6 4 (% rbp ) call main . buildTree addq $ 4 8 , % rsp movq % rax , % rdx movq - 4 0 (% rbp ), % rax addq $ 1 6 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 0 . LBB 1 7 : movq % rdx , (% rax ) . LBE 1 7 : jmp . L 3 1 . L 3 0 : . LBB 1 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 1 : . LBE 1 8 : . LBB 1 9 : movq - 4 0 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 3 : . LBE 1 9 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 6 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 2 movl $ 6 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 2 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 6 4 8 , % rsp movq % rdi , - 6 1 6 (% rbp ) movq % rsi , - 6 2 4 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) movq % rcx , - 6 4 0 (% rbp ) movq % r 8 , - 6 4 8 (% rbp ) movq $ 0 , - 5 4 4 (% rbp ) movq $ 0 , - 5 3 6 (% rbp ) movq $ 0 , - 5 2 8 (% rbp ) . LBB 2 : leaq type ... 6 0 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 2 0 (% rbp ) movq - 5 2 0 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) movq $ 0 , - 5 6 8 (% rbp ) movq $ 0 , - 5 6 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 5 1 2 (% rbp ) movq $ 1 , - 5 0 4 (% rbp ) movq $ 1 , - 4 9 6 (% rbp ) movq $ 0 , - 4 8 8 (% rbp ) movq $ 0 , - 4 8 0 (% rbp ) movq $- 1 , - 4 7 2 (% rbp ) movq $- 1 , - 4 6 4 (% rbp ) movq $ 0 , - 4 5 6 (% rbp ) leaq - 5 1 2 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq $ 2 , - 4 4 0 (% rbp ) movq $ 2 , - 4 3 2 (% rbp ) leaq - 4 9 6 (% rbp ), % rax movq % rax , - 4 2 4 (% rbp ) movq $ 2 , - 4 1 6 (% rbp ) movq $ 2 , - 4 0 8 (% rbp ) leaq - 4 8 0 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 2 , - 3 9 2 (% rbp ) movq $ 2 , - 3 8 4 (% rbp ) leaq - 4 6 4 (% rbp ), % rax movq % rax , - 3 7 6 (% rbp ) movq $ 2 , - 3 6 8 (% rbp ) movq $ 2 , - 3 6 0 (% rbp ) leaq - 4 4 8 (% rbp ), % rax movq % rax , - 6 0 8 (% rbp ) movq $ 4 , - 6 0 0 (% rbp ) movq $ 4 , - 5 9 2 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 4 4 (% rbp ), % rbx leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movq - 3 2 8 (% rbp ), % rax movq - 6 4 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 6 4 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 3 2 8 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq $ 2 , - 3 1 2 (% rbp ) movq $ 2 , - 3 0 4 (% rbp ) leaq 1 (% rbx ), % rax movq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 . LBB 3 : movq - 3 5 2 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 6 . 7 int (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) . LBE 3 : jmp . L 3 . L 2 : . LBB 4 : movq - 3 5 2 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rdx movq % rcx , - 5 7 6 (% rbp ) movq % rax , - 5 6 8 (% rbp ) movq % rdx , - 5 6 0 (% rbp ) . L 3 : . LBE 4 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 5 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , - 2 8 8 (% rbp ) movq % rbx , - 2 8 0 (% rbp ) movq - 3 0 4 (% rbp ), % rdx movq % rdx , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 2 7 2 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 4 . LBB 5 : movq - 2 8 8 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 5 . L 4 : . LBE 5 : . LBB 6 : movq - 2 8 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 5 : . LBE 6 : . LBB 7 : movq $ 0 , - 3 2 (% rbp ) . LBB 8 : jmp . L 6 . L 3 1 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : . LBB 1 1 : movq $ 0 , - 4 0 (% rbp ) . LBB 1 2 : jmp . L 7 . L 3 0 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : movq - 2 4 (% rbp ), % rax cqto shrq $ 6 2 , % rdx addq % rdx , % rax andl $ 3 , % eax subq % rdx , % rax movq - 6 0 0 (% rbp ), % rdx testq % rax , % rax js . L 8 cmpq % rdx , % rax jl . L 2 6 . L 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq - 6 0 8 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rax testq % rax , % rax jg . L 1 0 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 0 : movq - 2 5 6 (% rbp ), % rax movq (% rax ), % rax addq % rax , - 6 4 0 (% rbp ) movq - 2 4 (% rbp ), % rax cqto shrq $ 6 2 , % rdx addq % rdx , % rax andl $ 3 , % eax subq % rdx , % rax movq - 6 0 0 (% rbp ), % rdx testq % rax , % rax js . L 1 1 cmpq % rdx , % rax jl . L 2 7 . L 1 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq - 6 0 8 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 3 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 3 : movq - 2 2 4 (% rbp ), % rax addq $ 8 , % rax movq (% rax ), % rax addq % rax , - 6 4 8 (% rbp ) . LBB 1 5 : . LBB 1 6 : . LBB 1 7 : . LBB 1 8 : movq - 6 4 0 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax testb % al , % al je . L 1 4 . LBB 1 9 : movq - 6 4 0 (% rbp ), % rax cmpq - 6 2 4 (% rbp ), % rax setl % al . L 1 4 : . LBE 1 9 : . LBE 1 8 : testb % al , % al je . L 1 5 . LBB 2 0 : movq - 6 4 8 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax . L 1 5 : . LBE 2 0 : . LBE 1 7 : testb % al , % al je . L 1 6 . LBB 2 1 : movq - 6 4 8 (% rbp ), % rax cmpq - 6 3 2 (% rbp ), % rax setl % al . L 1 6 : . LBE 2 1 : . LBE 1 6 : testb % al , % al je . L 1 7 . LBB 2 2 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rbx leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq - 6 4 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 6 4 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 6 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 2 , - 1 5 2 (% rbp ) movq $ 2 , - 1 4 4 (% rbp ) leaq 1 (% rbx ), % rax movq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 8 . LBB 2 3 : movq - 1 9 2 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 6 . 7 int (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) . LBE 2 3 : jmp . L 1 9 . L 1 8 : . LBB 2 4 : movq - 1 9 2 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rdx movq % rcx , - 5 7 6 (% rbp ) movq % rax , - 5 6 8 (% rbp ) movq % rdx , - 5 6 0 (% rbp ) . L 1 9 : . LBE 2 4 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 9 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 1 6 0 (% rbp ), % rcx movq - 1 5 2 (% rbp ), % rbx movq % rcx , - 1 2 8 (% rbp ) movq % rbx , - 1 2 0 (% rbp ) movq - 1 4 4 (% rbp ), % rdx movq % rdx , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 1 2 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 0 . LBB 2 5 : movq - 1 2 8 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 7 . L 2 0 : . LBE 2 5 : . LBB 2 6 : movq - 1 2 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 7 : . LBE 2 6 : . LBE 2 2 : . LBE 1 5 : . LBE 1 4 : . LBB 2 7 : addq $ 1 , - 4 0 (% rbp ) . L 7 : . LBE 2 7 : movq - 3 2 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax addq $ 1 , % rax cmpq % rax , - 4 0 (% rbp ) jl . L 3 0 . LBE 1 2 : . LBE 1 1 : addq $ 1 , - 2 4 (% rbp ) . LBE 1 0 : . LBB 2 8 : addq $ 1 , - 3 2 (% rbp ) . L 6 : . LBE 2 8 : movq - 5 6 8 (% rbp ), % rdx movq - 6 2 4 (% rbp ), % rax imulq - 6 3 2 (% rbp ), % rax cmpq % rax , % rdx jl . L 3 1 . LBE 8 : . LBE 7 : . LBB 2 9 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq - 6 1 6 (% rbp ), % rcx movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 2 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 9 : . LBE 2 : movq - 6 1 6 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
leaq - 4 2 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 2 movl $ 4 2 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 1 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 7 6 , % rsp movq % rsi , % rax movq % rdi , % r 9 movq % r 9 , % rsi movq % r 1 0 , % rdi movq % rax , % rdi movq % rsi , - 3 8 4 (% rbp ) movq % rdi , - 3 7 6 (% rbp ) movq % rdx , - 4 0 0 (% rbp ) movq % rcx , - 3 9 2 (% rbp ) movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) . LBB 4 : leaq - 1 6 0 (% rbp ), % rax movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call image . Decode @ PLT movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) . LBB 5 : movq - 3 6 8 (% rbp ), % rax testq % rax , % rax je . L 7 . LBB 6 : . LBB 7 : movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx jmp . L 1 1 . L 7 : . LBE 7 : . LBE 6 : . LBE 5 : leaq string .. d (% rip ), % r 1 4 leaq go .. C 6 (% rip ), % r 1 5 leaq string .. d (% rip ), % rax movq % rax , - 4 1 6 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 8 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 8 : jmp . L 1 0 . L 9 : . LBB 9 : movq - 2 3 2 (% rbp ), % rax leaq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 9 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 4 0 8 (% rbp ) movq % r 1 4 , - 2 0 8 (% rbp ) movq % r 1 5 , - 2 0 0 (% rbp ) movdqa - 4 1 6 (% rbp ), % xmm 0 movups % xmm 0 , - 1 9 2 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 2 , - 1 0 4 (% rbp ) movq $ 2 , - 9 6 (% rbp ) leaq pimt .. interface . 4 Write . 0 func . 8 . 6 . 7 uint 8 . 9 . 8 int . 3 error . 9 . 5 .. os . File (% rip ), % r 1 2 movq os . Stderr (% rip ), % rax movq % rax , % r 1 3 leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Fprintln @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) . LBB 1 0 : movq $ 0 , - 1 7 6 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movq % rax , - 1 6 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq $ 9 5 , (% rax ) movq - 1 6 8 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq - 4 0 0 (% rbp ), % rdi movq - 3 9 2 (% rbp ), % rsi movq % rcx , % r 8 movq % rdx , % rcx movq % rax , % rdx call image .. z 2 fjpeg . Encode @ PLT movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx . L 1 1 : . LBE 1 0 : . LBE 4 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 4 5 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 8 movl $ 4 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 1 6 , % rsp movq % rdi , - 4 4 0 (% rbp ) leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 uint 8 . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 0 (% rbp ) leaq . LC 2 6 (% rip ), % r 1 2 movl $ 1 1 , % r 1 3 d movq % r 1 2 , - 2 5 6 (% rbp ) movq % r 1 3 , - 2 4 8 (% rbp ) leaq type ... 6 4 x . 7 . 6 . 7 uint 8 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) leaq type ... 6 5 x . 7 uint 8 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 8 4 (% rbp ) movq - 3 8 4 (% rbp ), % rax movb $ 4 9 , (% rax ) movb $ 4 8 , 1 (% rax ) movb $ 4 9 , 2 (% rax ) movb $ 4 8 , 3 (% rax ) movb $ 4 8 , 4 (% rax ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 5 , - 3 4 4 (% rbp ) movq $ 5 , - 3 3 6 (% rbp ) leaq type ... 6 5 x . 7 uint 8 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 3 7 6 (% rbp ), % rax movb $ 4 9 , (% rax ) movb $ 4 8 , 1 (% rax ) movb $ 4 9 , 2 (% rax ) movb $ 4 9 , 3 (% rax ) movb $ 4 9 , 4 (% rax ) movq - 3 7 6 (% rbp ), % rax movq % rax , - 3 2 8 (% rbp ) movq $ 5 , - 3 2 0 (% rbp ) movq $ 5 , - 3 1 2 (% rbp ) leaq type ... 6 5 x . 7 uint 8 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 8 (% rbp ) movq - 3 6 8 (% rbp ), % rax movb $ 4 9 , (% rax ) movb $ 4 9 , 1 (% rax ) movb $ 4 9 , 2 (% rax ) movb $ 4 9 , 3 (% rax ) movb $ 4 9 , 4 (% rax ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 5 , - 2 9 6 (% rbp ) movq $ 5 , - 2 8 8 (% rbp ) leaq type ... 6 5 x . 7 uint 8 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 3 6 0 (% rbp ), % rax movb $ 4 9 , (% rax ) movb $ 4 8 , 1 (% rax ) movb $ 4 8 , 2 (% rax ) movb $ 4 9 , 3 (% rax ) movb $ 4 8 , 4 (% rax ) movq - 3 6 0 (% rbp ), % rax movq % rax , - 2 8 0 (% rbp ) movq $ 5 , - 2 7 2 (% rbp ) movq $ 5 , - 2 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 3 9 2 (% rbp ), % rax movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 3 9 2 (% rbp ), % rax leaq - 3 5 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 . 6 . 7 uint 8 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 3 9 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 4 , - 2 3 2 (% rbp ) movq $ 4 , - 2 2 4 (% rbp ) movq $ 6 , - 2 1 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 4 0 0 (% rbp ), % rax movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 2 2 4 (% rbp ), % rcx movq - 2 1 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 4 0 0 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 uint 8 . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 4 0 0 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq $ 1 , - 4 2 4 (% rbp ) movq $ 1 , - 4 1 6 (% rbp ) . LBB 6 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 uint 8 . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 (% rbp ) . LBB 7 : . LBB 8 : . LBB 9 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 9 : jmp . L 6 . L 1 7 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 7 cmpq % rax , % rbx jge . L 7 movq - 1 6 0 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 0 8 (% rbp ) movq % rdi , - 2 0 0 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 1 9 2 (% rbp ) movq % rdi , - 1 8 4 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) . LBE 1 2 : . LBB 1 3 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 4 0 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 8 jmp . L 1 5 . L 7 : . LBE 1 3 : . LBB 1 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 8 : . LBE 1 6 : . LBB 1 7 : . LBB 1 4 : movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 1 0 . L 1 5 : . LBE 1 4 : . LBB 1 5 : leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 uint 8 . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 5 : . LBE 1 7 : . LBB 1 8 : leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 4 0 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 uint 8 . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq % r 1 4 , - 6 4 (% rbp ) movq % r 1 2 , - 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 . LBB 1 9 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 9 : jmp . L 1 2 . L 1 1 : . LBB 2 0 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 uint 8 . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 : . LBE 2 0 : movq - 7 2 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 4 4 0 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 8 : . LBE 1 1 : . LBB 2 1 : addq $ 1 , % rbx . L 6 : . LBE 2 1 : cmpq % r 1 3 , % rbx jl . L 1 7 . LBE 8 : . LBE 7 : . LBE 6 : addq $ 4 1 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 8 movl $ 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp pushq % rbx movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movb $ 0 , - 2 5 (% rbp ) . LBB 1 9 : . LBB 2 0 : movq - 4 0 (% rbp ), % rsi movq (% rsi ), % rsi testq % rsi , % rsi jne . L 1 6 . LBB 2 1 : . LBB 2 2 : . LBB 2 3 : movl $ 0 , % edx movl $ 0 , % eax movq % rdx , - 2 4 (% rbp ) movb % al , - 2 5 (% rbp ) . LBE 2 3 : movq - 2 4 (% rbp ), % rcx movb - 2 5 (% rbp ), % bl movq % rcx , % rax movq % rbx , % rdx jmp . L 1 7 . L 1 6 : . LBE 2 2 : . LBE 2 1 : . LBE 2 0 : . LBB 2 4 : . LBB 2 5 : movq - 4 0 (% rbp ), % rcx movq (% rcx ), % rcx movq (% rcx ), % rcx movl $ 1 , % esi movq % rcx , - 2 4 (% rbp ) movb % sil , - 2 5 (% rbp ) . LBE 2 5 : movq - 2 4 (% rbp ), % rax movb - 2 5 (% rbp ), % dl . L 1 7 : . LBE 2 4 : . LBE 1 9 : movq - 8 (% rbp ), % rbx leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 3 0 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 : ret . L 3 0 : pushq % rbp movq % rsp , % rbp movq % rdi , - 2 4 (% rbp ) movb $ 0 , - 1 (% rbp ) . LBB 2 0 : . LBB 2 1 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rax testq % rax , % rax sete % al movb % al , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax . LBE 2 1 : . LBE 2 0 : popq % rbp ret
. LFB 2 : leaq - 3 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 8 5 movl $ 3 2 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 4 : ret . L 8 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 9 6 , % rsp movq % rdi , - 2 9 6 (% rbp ) movq % rsi , - 3 0 4 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) . LBB 4 2 : movq 2 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 4 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 5 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 7 2 (% rbp ) . LBB 4 3 : movq - 6 4 (% rbp ), % rax imulq - 7 2 (% rbp ), % rax movq % rax , % rdx movq - 3 0 4 (% rbp ), % rax imulq - 3 1 2 (% rbp ), % rax cmpq % rax , % rdx je . L 4 6 . LBB 4 4 : . LBB 4 5 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 9 6 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 4 4 . L 4 6 : . LBE 4 5 : . LBE 4 4 : . LBE 4 3 : movq - 3 0 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 8 8 (% rbp ) movq % rbx , - 2 8 0 (% rbp ) movq % rbx , - 2 7 2 (% rbp ) . LBB 4 6 : movq $ 0 , - 8 0 (% rbp ) . LBB 4 7 : . LBB 4 8 : . LBB 4 9 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 4 9 : jmp . L 4 8 . L 8 2 : . LBB 5 0 : nop . LBE 5 0 : . LBB 5 1 : movq % r 1 2 , - 8 0 (% rbp ) . LBB 5 2 : movq - 3 1 2 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 2 8 0 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 4 9 cmpq % rax , - 8 0 (% rbp ) jl . L 7 5 . L 4 9 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 5 : movq - 2 8 8 (% rbp ), % rsi movq - 8 0 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 1 9 2 (% rbp ) movq % rbx , - 1 8 4 (% rbp ) movq % rbx , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 7 6 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 1 . LBB 5 3 : movq - 1 9 2 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 5 2 . L 5 1 : . LBE 5 3 : . LBB 5 4 : movq - 1 9 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 5 2 : . LBE 5 4 : . LBE 5 2 : . LBE 5 1 : . LBB 5 5 : addq $ 1 , % r 1 2 . L 4 8 : . LBE 5 5 : cmpq % r 1 3 , % r 1 2 jl . L 8 2 . LBE 4 8 : . LBE 4 7 : . LBE 4 6 : movq $ 0 , - 4 0 (% rbp ) . LBB 5 6 : movq $ 0 , - 4 8 (% rbp ) . LBB 5 7 : jmp . L 5 5 . L 8 4 : . LBB 5 8 : nop . LBE 5 8 : . LBB 5 9 : . LBB 6 0 : movq $ 0 , - 5 6 (% rbp ) . LBB 6 1 : jmp . L 5 6 . L 8 3 : . LBB 6 2 : nop . LBE 6 2 : . LBB 6 3 : cmpq $- 1 , - 3 1 2 (% rbp ) jne . L 5 7 movq - 4 0 (% rbp ), % rax negq % rax jmp . L 5 8 . L 5 7 : cmpq $ 0 , - 3 1 2 (% rbp ) jne . L 5 9 call runtime . panicdivide @ PLT . L 5 9 : movq - 4 0 (% rbp ), % rax cqto idivq - 3 1 2 (% rbp ) . L 5 8 : movq % rax , - 8 8 (% rbp ) cmpq $- 1 , - 3 1 2 (% rbp ) je . L 6 0 cmpq $ 0 , - 3 1 2 (% rbp ) jne . L 6 1 call runtime . panicdivide @ PLT . L 6 1 : movq - 4 0 (% rbp ), % rax cqto idivq - 3 1 2 (% rbp ) movq % rdx , % rax jmp . L 6 2 . L 6 0 : movl $ 0 , % eax . L 6 2 : movq % rax , - 9 6 (% rbp ) movq - 2 8 0 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 6 3 cmpq % rax , - 8 8 (% rbp ) jl . L 7 7 . L 6 3 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 7 : movq - 2 8 8 (% rbp ), % rcx movq - 8 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 6 5 cmpq % rax , - 9 6 (% rbp ) jl . L 7 8 . L 6 5 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 6 7 cmpq % rax , - 4 8 (% rbp ) jl . L 7 9 . L 6 7 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 9 : movq 1 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 6 9 cmpq % rax , - 5 6 (% rbp ) jge . L 6 9 movq - 1 2 8 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq - 1 6 0 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) addq $ 1 , - 4 0 (% rbp ) . LBE 6 3 : . LBB 6 4 : addq $ 1 , - 5 6 (% rbp ) jmp . L 5 6 . L 6 9 : . LBE 6 4 : . LBB 6 5 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 6 : . LBE 6 5 : movq - 5 6 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jl . L 8 3 . LBE 6 1 : . LBE 6 0 : . LBE 5 9 : . LBB 6 6 : addq $ 1 , - 4 8 (% rbp ) . L 5 5 : . LBE 6 6 : movq - 4 8 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax jl . L 8 4 . LBE 5 7 : . LBE 5 6 : . LBB 6 7 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 9 6 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 4 4 : . LBE 6 7 : . LBE 4 2 : movq - 2 9 6 (% rbp ), % rax addq $ 2 9 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 2 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 5 movl $ 3 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 : ret . L 3 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 6 4 , % rsp movq % rdi , - 2 8 0 (% rbp ) movq - 2 8 0 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 2 3 : movq $ 0 , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) . LBB 2 4 : . LBB 2 5 : . LBB 2 6 : movq go . day 4 1 6 . testcases (% rip ), % rax movq 8 + go . day 4 1 6 . testcases (% rip ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 + go . day 4 1 6 . testcases (% rip ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movl $ 0 , % ebx . LBE 2 6 : jmp . L 2 5 . L 3 4 : . LBB 2 7 : nop . LBE 2 7 : . LBB 2 8 : . LBB 2 9 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 2 6 cmpq % rax , % rbx jge . L 2 6 movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) . LBE 2 9 : . LBB 3 0 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) . LBE 3 0 : . LBB 3 1 : . LBB 3 2 : subq $ 8 , % rsp pushq - 2 5 6 (% rbp ) pushq - 2 6 4 (% rbp ) pushq - 2 7 2 (% rbp ) call go . day 4 1 6 . MinimumStepsPath addq $ 3 2 , % rsp movq % rax , - 5 6 (% rbp ) movq - 2 4 8 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 2 7 jmp . L 2 8 . L 2 6 : . LBE 3 2 : . LBE 3 1 : . LBB 3 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : . LBE 3 7 : . LBB 3 8 : . LBB 3 6 : . LBB 3 3 : leaq int .. d (% rip ), % rax movq % rax , - 3 0 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 2 9 6 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 2 8 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movdqa - 3 0 4 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 9 . LBB 3 4 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 3 4 : jmp . L 3 0 . L 2 9 : . LBB 3 5 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 0 : . LBE 3 5 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) leaq . LC 1 1 (% rip ), % r 1 2 movl $ 1 8 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 2 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 2 8 : . LBE 3 3 : . LBE 3 6 : . LBE 3 8 : . LBE 2 8 : . LBB 3 9 : addq $ 1 , % rbx . L 2 5 : . LBE 3 9 : cmpq - 2 8 8 (% rbp ), % rbx jl . L 3 4 . LBE 2 5 : . LBE 2 4 : . LBE 2 3 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 5 2 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 6 movl $ 5 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 8 0 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq $ 2 , - 4 8 (% rbp ) . LBB 3 : jmp . L 2 . L 2 5 : . LBB 4 : nop . LBE 4 : . LBB 5 : . LBB 6 : movq - 4 8 (% rbp ), % rax movq % rax , % rdi call main . isPrime xorl $ 1 , % eax testb % al , % al jne . L 2 2 . LBE 6 : movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) movq $ 0 , - 4 0 0 (% rbp ) leaq - 3 8 4 (% rbp ), % rax movq - 4 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call main . getDigits movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 4 4 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 5 . LBB 8 : movq - 3 5 2 (% rbp ), % rsi leaq - 1 4 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 6 . 7 int (% rip ), % rsi call runtime . growslice @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) . LBE 8 : jmp . L 6 . L 5 : . LBB 9 : movq - 3 5 2 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rdx movq % rcx , - 4 1 6 (% rbp ) movq % rax , - 4 0 8 (% rbp ) movq % rdx , - 4 0 0 (% rbp ) . L 6 : . LBE 9 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 5 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , - 3 2 0 (% rbp ) movq % rbx , - 3 1 2 (% rbp ) movq - 3 6 8 (% rbp ), % rdx movq % rdx , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 3 0 4 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 7 . LBB 1 0 : movq - 3 2 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 8 . L 7 : . LBE 1 0 : . LBB 1 1 : movq - 3 2 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 8 : . LBE 1 1 : leaq - 4 4 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 4 0 0 (% rbp ) pushq - 4 0 8 (% rbp ) pushq - 4 1 6 (% rbp ) movq % rax , % rdi call main . getPermutations addq $ 3 2 , % rsp leaq - 4 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 4 3 2 (% rbp ) pushq - 4 4 0 (% rbp ) pushq - 4 4 8 (% rbp ) movq % rax , % rdi call main . removeDuplicates addq $ 3 2 , % rsp . LBB 1 2 : movq $ 0 , - 5 1 2 (% rbp ) movq $ 0 , - 5 0 4 (% rbp ) movq $ 0 , - 4 9 6 (% rbp ) . LBB 1 3 : . LBB 1 4 : . LBB 1 5 : movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 1 5 : jmp . L 9 . L 2 4 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : . LBB 1 8 : movq - 2 4 8 (% rbp ), % rax testq % rbx , % rbx js . L 1 0 cmpq % rax , % rbx jge . L 1 0 movq - 2 5 6 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 7 2 (% rbp ) . LBE 1 8 : . LBB 1 9 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) . LBE 1 9 : . LBB 2 0 : . LBB 2 1 : subq $ 8 , % rsp pushq - 4 9 6 (% rbp ) pushq - 5 0 4 (% rbp ) pushq - 5 1 2 (% rbp ) call main . formNumber addq $ 3 2 , % rsp movq % rax , % rdi call main . isPrime xorl $ 1 , % eax testb % al , % al jne . L 2 3 jmp . L 1 9 . L 1 0 : . LBE 2 1 : . LBE 2 0 : . LBB 2 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : . LBE 2 4 : . LBB 2 5 : addq $ 1 , - 4 0 (% rbp ) jmp . L 1 3 . L 2 3 : . LBB 2 3 : . LBB 2 2 : nop . L 1 3 : . LBE 2 2 : . LBE 2 3 : . LBE 2 5 : . LBE 1 7 : . LBB 2 6 : addq $ 1 , % rbx . L 9 : . LBE 2 6 : cmpq % r 1 4 , % rbx jl . L 2 4 jmp . L 1 6 . L 2 2 : . LBE 1 4 : . LBE 1 3 : . LBE 1 2 : . LBB 2 7 : . LBB 7 : nop . L 1 6 : . LBE 7 : . LBE 2 7 : . LBE 5 : . LBB 2 8 : addq $ 1 , - 4 8 (% rbp ) . L 2 : . LBE 2 8 : cmpq $ 9 9 , - 4 8 (% rbp ) jle . L 2 5 . LBE 3 : . LBE 2 : leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 6 8 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 1 6 0 (% rbp ) movq % r 1 3 , - 1 5 2 (% rbp ) leaq - 1 6 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) leaq - 3 2 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : leaq - 3 0 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 1 movl $ 3 0 8 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 1 : pushq % rbp movq % rsp , % rbp subq $ 3 0 7 2 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : leaq - 3 0 7 2 (% rbp ), % rdx movl $ 0 , % eax movl $ 3 7 5 , % ecx movq % rdx , % rdi rep stosq movq % rdi , % rdx movb % al , (% rdx ) addq $ 1 , % rdx movb $ 1 , - 3 0 7 2 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 3 : movq $ 0 , - 4 0 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rcx movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 2 9 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq - 6 4 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 9 : . LBB 1 0 : movq % rdx , - 4 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 4 0 (% rbp ), % rdx addq % rdx , - 8 (% rbp ) . LBB 1 2 : movq - 8 (% rbp ), % rdx movq % rdx , - 2 4 (% rbp ) . LBB 1 3 : jmp . L 4 . L 3 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 2 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : . LBE 2 1 : . LBB 2 2 : . LBB 2 0 : . LBB 1 9 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : cmpq $ 0 , - 2 4 (% rbp ) js . L 5 cmpq $ 3 0 0 0 , - 2 4 (% rbp ) jle . L 2 2 . L 5 : movq - 2 4 (% rbp ), % rax movl $ 3 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : leaq - 3 0 7 2 (% rbp ), % rsi movq - 2 4 (% rbp ), % rdx addq % rsi , % rdx movzbl (% rdx ), % edx movl % edx , % esi xorl $ 1 , % esi testb % sil , % sil je . L 7 . LBB 1 7 : movq - 2 4 (% rbp ), % rdx subq - 4 0 (% rbp ), % rdx testq % rdx , % rdx js . L 8 cmpq $ 3 0 0 0 , % rdx jle . L 2 3 . L 8 : movl $ 3 0 0 1 , % esi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : movzbl - 3 0 7 2 (% rbp ,% rdx ), % edx . L 7 : . LBE 1 7 : . LBE 1 6 : cmpq $ 0 , - 2 4 (% rbp ) js . L 1 0 cmpq $ 3 0 0 0 , - 2 4 (% rbp ) jle . L 2 4 . L 1 0 : movq - 2 4 (% rbp ), % rax movl $ 3 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : leaq - 3 0 7 2 (% rbp ), % rdi movq - 2 4 (% rbp ), % rsi addq % rdi , % rsi movb % dl , (% rsi ) . LBE 1 5 : . LBB 1 8 : subq $ 1 , - 2 4 (% rbp ) . L 4 : . LBE 1 8 : movq - 2 4 (% rbp ), % rdx cmpq - 4 0 (% rbp ), % rdx jge . L 2 8 . LBE 1 9 : . LBE 2 0 : . LBE 2 2 : . LBE 8 : . LBB 2 3 : addq $ 1 , % rax . L 2 : . LBE 2 3 : cmpq % rcx , % rax jl . L 2 9 . LBE 5 : . LBE 4 : . LBE 3 : movq - 8 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , - 1 6 (% rbp ) . LBB 2 4 : . LBB 2 5 : jmp . L 1 6 . L 3 0 : . LBB 2 6 : nop . LBE 2 6 : . LBB 2 7 : subq $ 1 , - 1 6 (% rbp ) . L 1 6 : . LBE 2 7 : . LBB 2 8 : movq - 1 6 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax testb % al , % al je . L 1 7 . LBB 2 9 : cmpq $ 0 , - 1 6 (% rbp ) js . L 1 8 cmpq $ 3 0 0 0 , - 1 6 (% rbp ) jg . L 1 8 leaq - 3 0 7 2 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax xorl $ 1 , % eax jmp . L 1 7 . L 1 8 : movq - 1 6 (% rbp ), % rax movl $ 3 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : . LBE 2 9 : . LBE 2 8 : testb % al , % al jne . L 3 0 . LBE 2 5 : . LBE 2 4 : . LBB 3 0 : movq - 8 (% rbp ), % rax subq - 1 6 (% rbp ), % rax subq - 1 6 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . LBE 3 0 : . LBE 2 : leave ret
. LFB 8 4 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 1 1 0 movl $ 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 0 3 : ret . L 2 1 1 0 : pushq % rbp movq % rsp , % rbp subq $ 8 0 , % rsp movq % rdi , - 7 2 (% rbp ) movq % rsi , - 8 0 (% rbp ) movq $ 0 , - 6 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 1 7 4 7 : . LBB 1 7 4 8 : leaq - 3 2 (% rbp ), % rax movq - 8 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call go . leetcode . helper 8 9 movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq - 1 6 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 7 4 8 : . LBE 1 7 4 7 : movq - 7 2 (% rbp ), % rax leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 1 movl $ 2 0 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 1 : pushq % rbp movq % rsp , % rbp subq $ 1 9 2 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) movb $ 7 3 , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movb $ 8 6 , - 1 6 0 (% rbp ) movq $ 5 , - 1 5 2 (% rbp ) movb $ 8 8 , - 1 4 4 (% rbp ) movq $ 1 0 , - 1 3 6 (% rbp ) movb $ 7 6 , - 1 2 8 (% rbp ) movq $ 5 0 , - 1 2 0 (% rbp ) movb $ 6 7 , - 1 1 2 (% rbp ) movq $ 1 0 0 , - 1 0 4 (% rbp ) movb $ 6 8 , - 9 6 (% rbp ) movq $ 5 0 0 , - 8 8 (% rbp ) movb $ 7 7 , - 8 0 (% rbp ) movq $ 1 0 0 0 , - 7 2 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movq % rax , % r 8 movl $ 8 , % ecx movl $ 1 6 , % edx movl $ 7 , % esi leaq type .. map . 6 uint 8 . 7 int (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 4 8 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 3 : movq - 1 8 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 1 0 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 1 8 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 cmpq % rax , - 2 4 (% rbp ) jge . L 3 movq - 1 9 2 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 5 7 (% rbp ) leaq - 5 7 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 uint 8 . 7 int (% rip ), % rdi call runtime . mapaccess 1 @ PLT movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) movq $ 1 , - 3 2 (% rbp ) . LBB 7 : movq - 5 6 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jl . L 4 jmp . L 5 . L 3 : . LBE 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBB 9 : . LBB 8 : movq $- 1 , - 3 2 (% rbp ) . L 5 : . LBE 8 : . LBE 9 : movq - 3 2 (% rbp ), % rax imulq - 5 6 (% rbp ), % rax addq % rax , - 8 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) . LBE 6 : . LBB 1 0 : subq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 1 0 : cmpq $ 0 , - 2 4 (% rbp ) jns . L 1 0 . LBE 4 : . LBE 3 : . LBB 1 1 : movq - 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 1 1 : . LBE 2 : leave ret
. LFB 0 : leaq - 5 6 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 9 movl $ 5 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 2 0 , % rsp movq % rdi , - 5 3 6 (% rbp ) leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 2 0 (% rbp ) movq $ 0 , - 5 1 2 (% rbp ) movq $ 0 , - 5 0 4 (% rbp ) movq $ 0 , - 4 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 5 2 0 (% rbp ), % rcx movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 5 2 0 (% rbp ), % rax leaq - 5 1 2 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 5 2 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax movq $ 6 , (% rax ) leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 8 (% rbp ) movq $ 0 , - 4 8 0 (% rbp ) movq $ 0 , - 4 7 2 (% rbp ) movq $ 0 , - 4 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 4 8 8 (% rbp ), % rcx movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 6 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 4 8 8 (% rbp ), % rax leaq - 4 8 0 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 4 8 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq $ 2 , (% rax ) leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 5 6 (% rbp ) movq $ 0 , - 4 4 8 (% rbp ) movq $ 0 , - 4 4 0 (% rbp ) movq $ 0 , - 4 3 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 6 : movq - 4 5 6 (% rbp ), % rcx movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 3 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 : jmp . L 7 . L 6 : . LBB 7 : movq - 4 5 6 (% rbp ), % rax leaq - 4 4 8 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 7 : movq - 4 5 6 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax movq $ 8 , (% rax ) leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 2 4 (% rbp ) movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) movq $ 0 , - 4 0 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 . LBB 8 : movq - 4 2 4 (% rbp ), % rcx movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 0 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 8 : jmp . L 9 . L 8 : . LBB 9 : movq - 4 2 4 (% rbp ), % rax leaq - 4 1 6 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 : . LBE 9 : movq - 4 2 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 0 (% rbp ), % rax movq $ 0 , (% rax ) leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) movq $ 0 , - 3 8 4 (% rbp ) movq $ 0 , - 3 7 6 (% rbp ) movq $ 0 , - 3 6 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 . LBB 1 0 : movq - 3 9 2 (% rbp ), % rcx movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 6 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 0 : jmp . L 1 1 . L 1 0 : . LBB 1 1 : movq - 3 9 2 (% rbp ), % rax leaq - 3 8 4 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 1 : . LBE 1 1 : movq - 3 9 2 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) movq - 8 8 (% rbp ), % rax movq $ 4 , (% rax ) leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq $ 0 , - 3 5 2 (% rbp ) movq $ 0 , - 3 4 4 (% rbp ) movq $ 0 , - 3 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 2 . LBB 1 2 : movq - 3 6 0 (% rbp ), % rcx movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 3 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 2 : jmp . L 1 3 . L 1 2 : . LBB 1 3 : movq - 3 6 0 (% rbp ), % rax leaq - 3 5 2 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 3 : . LBE 1 3 : movq - 3 6 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq $ 7 , (% rax ) leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 4 . LBB 1 4 : movq - 3 2 8 (% rbp ), % rcx movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 0 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 4 : jmp . L 1 5 . L 1 4 : . LBB 1 5 : movq - 3 2 8 (% rbp ), % rax leaq - 3 2 0 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 5 : . LBE 1 5 : movq - 3 2 8 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) movq - 1 0 4 (% rbp ), % rax movq $ 9 , (% rax ) leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) movq $ 0 , - 2 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 6 . LBB 1 6 : movq - 2 9 6 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 7 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 6 : jmp . L 1 7 . L 1 6 : . LBB 1 7 : movq - 2 9 6 (% rbp ), % rax leaq - 2 8 8 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 7 : . LBE 1 7 : movq - 2 9 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq $ 3 , (% rax ) leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 8 . LBB 1 8 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 8 : jmp . L 1 9 . L 1 8 : . LBB 1 9 : movq - 2 6 4 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 9 : . LBE 1 9 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 1 2 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq $ 5 , (% rax ) movq - 5 6 (% rbp ), % rax addq $ 8 , % rax movq - 6 4 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 2 0 . LBB 2 0 : movq % rdx , (% rax ) . LBE 2 0 : jmp . L 2 1 . L 2 0 : . LBB 2 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 1 : . LBE 2 1 : movq - 5 6 (% rbp ), % rax addq $ 1 6 , % rax movq - 7 2 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 2 2 . LBB 2 2 : movq % rdx , (% rax ) . LBE 2 2 : jmp . L 2 3 . L 2 2 : . LBB 2 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 3 : . LBE 2 3 : movq - 6 4 (% rbp ), % rax addq $ 8 , % rax movq - 8 0 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 2 4 . LBB 2 4 : movq % rdx , (% rax ) . LBE 2 4 : jmp . L 2 5 . L 2 4 : . LBB 2 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 5 : . LBE 2 5 : movq - 6 4 (% rbp ), % rax addq $ 1 6 , % rax movq - 8 8 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 2 6 . LBB 2 6 : movq % rdx , (% rax ) . LBE 2 6 : jmp . L 2 7 . L 2 6 : . LBB 2 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 7 : . LBE 2 7 : movq - 7 2 (% rbp ), % rax addq $ 8 , % rax movq - 9 6 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 2 8 . LBB 2 8 : movq % rdx , (% rax ) . LBE 2 8 : jmp . L 2 9 . L 2 8 : . LBB 2 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 9 : . LBE 2 9 : movq - 7 2 (% rbp ), % rax addq $ 1 6 , % rax movq - 1 0 4 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 0 . LBB 3 0 : movq % rdx , (% rax ) . LBE 3 0 : jmp . L 3 1 . L 3 0 : . LBB 3 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 1 : . LBE 3 1 : movq - 8 8 (% rbp ), % rax addq $ 8 , % rax movq - 1 1 2 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 2 . LBB 3 2 : movq % rdx , (% rax ) . LBE 3 2 : jmp . L 3 3 . L 3 2 : . LBB 3 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 3 : . LBE 3 3 : movq - 8 8 (% rbp ), % rax addq $ 1 6 , % rax movq - 1 2 0 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 4 . LBB 3 4 : movq % rdx , (% rax ) . LBE 3 4 : jmp . L 3 5 . L 3 4 : . LBB 3 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 5 : . LBE 3 5 : movq - 7 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . Solution . Lowest movq % rax , - 1 2 8 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 5 6 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 2 4 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rdx movq (% rdx ), % rdx movq % rdx , (% rax ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 5 5 2 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movdqa - 5 6 0 (% rbp ), % xmm 0 movups % xmm 0 , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 6 . LBB 3 6 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 3 6 : jmp . L 3 7 . L 3 6 : . LBB 3 7 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 7 : . LBE 3 7 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq $ 1 , - 1 8 4 (% rbp ) movq $ 1 , - 1 7 6 (% rbp ) leaq . LC 1 2 (% rip ), % r 1 4 movl $ 2 0 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 5 3 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 7 6 (% rbp ) pushq - 1 8 4 (% rbp ) pushq - 1 9 2 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Logf .. stub @ PLT addq $ 3 2 , % rsp . LBB 3 8 : movq - 1 2 8 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax je . L 1 . LBB 3 9 : movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) leaq . LC 1 3 (% rip ), % r 1 2 movl $ 1 5 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq - 5 3 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 1 : . LBE 3 9 : . LBE 3 8 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 8 movl $ 3 7 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 3 6 , % rsp movq % rdi , - 3 6 0 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) . LBB 2 : leaq . LC 1 6 (% rip ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 1 0 , - 2 0 0 (% rbp ) leaq . LC 1 7 (% rip ), % rax movq % rax , - 1 9 2 (% rbp ) movq $ 9 , - 1 8 4 (% rbp ) leaq . LC 1 8 (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 7 , - 1 6 8 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq $ 3 , - 2 6 4 (% rbp ) movq $ 3 , - 2 5 6 (% rbp ) movl $ 0 , % edx movl $ 0 , % esi leaq string .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) . LBB 3 : movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 2 7 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 3 1 2 (% rbp ), % rax testq % rax , % rax je . L 2 4 jmp . L 2 1 . L 3 : . LBE 1 2 : . LBE 1 1 : . LBB 4 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : . LBE 4 5 : . LBB 4 6 : movq - 3 2 0 (% rbp ), % rdx movq - 3 1 2 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call strings . ToLower @ PLT movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movb $ 0 , - 3 3 (% rbp ) . LBB 1 4 : movq $ 0 , - 3 5 2 (% rbp ) movq $ 0 , - 3 4 4 (% rbp ) . LBB 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 1 4 movl $ 0 , % r 1 2 d . LBE 1 7 : jmp . L 7 . L 2 6 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : . LBB 2 0 : movq - 1 2 0 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 8 cmpq % rax , % r 1 2 jge . L 8 movq - 1 2 8 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 2 0 : . LBB 2 1 : movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) . LBE 2 1 : . LBB 2 2 : . LBB 2 3 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq - 3 3 6 (% rbp ), % rdi movq - 3 2 8 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call strings . ContainsAny @ PLT testb % al , % al jne . L 9 . LBB 2 4 : . LBB 2 5 : jmp . L 1 0 . L 8 : . LBE 2 5 : . LBE 2 4 : . LBE 2 3 : . LBE 2 2 : . LBB 3 3 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 9 : . LBE 3 3 : . LBB 3 4 : . LBB 3 1 : . LBB 2 9 : xorb $ 1 , - 3 3 (% rbp ) . LBB 2 7 : movzbl - 3 3 (% rbp ), % eax xorl $ 1 , % eax testb % al , % al jne . L 2 5 . L 1 0 : . LBE 2 7 : . LBE 2 9 : . LBE 3 1 : . LBE 3 4 : . LBE 1 9 : . LBB 3 6 : addq $ 1 , % r 1 2 . L 7 : . LBE 3 6 : cmpq % r 1 4 , % r 1 2 jl . L 2 6 jmp . L 1 1 . L 2 5 : . LBB 3 7 : . LBB 3 5 : . LBB 3 2 : . LBB 3 0 : . LBB 2 8 : . LBB 2 6 : nop . L 1 1 : . LBE 2 6 : . LBE 2 8 : . LBE 3 0 : . LBE 3 2 : . LBE 3 5 : . LBE 3 7 : . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBB 3 8 : cmpb $ 0 , - 3 3 (% rbp ) je . L 1 7 . LBB 3 9 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 4 . LBB 4 0 : movq - 9 6 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 4 0 : jmp . L 1 5 . L 1 4 : . LBB 4 1 : movq - 9 6 (% rbp ), % rcx movq - 8 0 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 1 5 : . LBE 4 1 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 4 , % rdx addq % rdx , % rax movq - 3 1 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 6 . LBB 4 2 : movq - 3 2 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 7 . L 1 6 : . LBE 4 2 : . LBB 4 3 : movq - 3 2 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 1 7 . L 2 4 : . LBE 4 3 : . LBE 3 9 : . LBE 3 8 : . LBB 4 4 : . LBB 1 3 : nop . L 1 7 : . LBE 1 3 : . LBE 4 4 : . LBE 4 6 : . LBE 8 : . LBB 4 7 : addq $ 1 , % rbx . L 2 : . LBE 4 7 : cmpq % r 1 3 , % rbx jl . L 2 7 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 4 8 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 3 6 0 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 2 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 8 : . LBE 2 : movq - 3 6 0 (% rbp ), % rax addq $ 3 3 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : leaq - 4 4 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 5 movl $ 4 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 5 : pushq % rbp movq % rsp , % rbp subq $ 4 3 2 , % rsp movq % rsi , % rax movq % rdi , % r 9 movq % r 9 , % rsi movq % r 1 0 , % rdi movq % rax , % rdi movq % rsi , - 4 1 6 (% rbp ) movq % rdi , - 4 0 8 (% rbp ) movq % rdx , - 4 3 2 (% rbp ) movq % rcx , - 4 2 4 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 2 : leaq - 1 1 2 (% rbp ), % rdi movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx leaq - 3 3 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . stringtoslicebyte @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) leaq - 8 0 (% rbp ), % rdi movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx leaq - 3 0 4 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . stringtoslicebyte @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movb $ 4 8 , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movb $ 4 9 , - 2 5 6 (% rbp ) movq $ 1 , - 2 4 8 (% rbp ) movb $ 5 0 , - 2 4 0 (% rbp ) movq $ 2 , - 2 3 2 (% rbp ) movb $ 5 1 , - 2 2 4 (% rbp ) movq $ 3 , - 2 1 6 (% rbp ) movb $ 5 2 , - 2 0 8 (% rbp ) movq $ 4 , - 2 0 0 (% rbp ) movb $ 5 3 , - 1 9 2 (% rbp ) movq $ 5 , - 1 8 4 (% rbp ) movb $ 5 4 , - 1 7 6 (% rbp ) movq $ 6 , - 1 6 8 (% rbp ) movb $ 5 5 , - 1 6 0 (% rbp ) movq $ 7 , - 1 5 2 (% rbp ) movb $ 5 6 , - 1 4 4 (% rbp ) movq $ 8 , - 1 3 6 (% rbp ) movb $ 5 7 , - 1 2 8 (% rbp ) movq $ 9 , - 1 2 0 (% rbp ) leaq - 2 7 2 (% rbp ), % rax movq % rax , % r 8 movl $ 8 , % ecx movl $ 1 6 , % edx movl $ 1 0 , % esi leaq type .. map . 6 uint 8 . 7 int (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 4 8 (% rbp ) movq $- 1 , - 8 (% rbp ) movq $- 1 , - 1 6 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 3 4 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 7 : addq $ 1 , - 8 (% rbp ) . LBB 8 : jmp . L 3 . L 3 2 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : movq - 3 6 0 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 4 cmpq % rax , - 8 (% rbp ) jl . L 2 5 . L 4 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq - 3 6 8 (% rbp ), % rdx movq - 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 5 0 (% rbp ) leaq - 5 0 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 uint 8 . 7 int (% rip ), % rdi call runtime . mapaccess 1 @ PLT movq % rax , % rdx movq - 2 4 (% rbp ), % rcx movq % rcx , % rax salq $ 2 , % rax addq % rcx , % rax addq % rax , % rax movq % rax , % rcx movq (% rdx ), % rax addq % rcx , % rax movq % rax , - 2 4 (% rbp ) . LBE 1 0 : . LBB 1 1 : addq $ 1 , - 8 (% rbp ) . L 3 : . LBE 1 1 : . LBB 1 2 : movq - 3 6 0 (% rbp ), % rax cmpq % rax , - 8 (% rbp ) setl % al testb % al , % al je . L 6 . LBB 1 3 : movq - 3 6 0 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 7 cmpq % rax , - 8 (% rbp ) jl . L 2 6 . L 7 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq - 3 6 8 (% rbp ), % rdx movq - 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 6 , % al setne % al . L 6 : . LBE 1 3 : . LBE 1 2 : testb % al , % al jne . L 3 2 . LBE 8 : . LBE 7 : . LBB 1 4 : addq $ 1 , - 1 6 (% rbp ) . LBB 1 5 : jmp . L 1 1 . L 3 3 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : movq - 3 9 2 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 2 cmpq % rax , - 1 6 (% rbp ) jl . L 2 8 . L 1 2 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq - 4 0 0 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 4 9 (% rbp ) leaq - 4 9 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 uint 8 . 7 int (% rip ), % rdi call runtime . mapaccess 1 @ PLT movq % rax , % rdx movq - 3 2 (% rbp ), % rcx movq % rcx , % rax salq $ 2 , % rax addq % rcx , % rax addq % rax , % rax movq % rax , % rcx movq (% rdx ), % rax addq % rcx , % rax movq % rax , - 3 2 (% rbp ) . LBE 1 7 : . LBB 1 8 : addq $ 1 , - 1 6 (% rbp ) . L 1 1 : . LBE 1 8 : . LBB 1 9 : movq - 3 9 2 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) setl % al testb % al , % al je . L 1 4 . LBB 2 0 : movq - 3 9 2 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 5 cmpq % rax , - 1 6 (% rbp ) jl . L 2 9 . L 1 5 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 4 0 0 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 6 , % al setne % al . L 1 4 : . LBE 2 0 : . LBE 1 9 : testb % al , % al jne . L 3 3 . LBE 1 5 : . LBE 1 4 : . LBB 2 1 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jle . L 1 9 . LBB 2 2 : . LBB 2 3 : movq $ 1 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 2 4 . L 1 9 : . LBE 2 3 : . LBE 2 2 : . LBB 2 4 : . LBB 2 5 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jge . L 2 . LBB 2 6 : . LBB 2 7 : movq $- 1 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 2 4 . L 2 : . LBE 2 7 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBE 2 1 : . LBE 6 : . LBB 2 8 : movq - 3 6 0 (% rbp ), % rax cmpq % rax , - 8 (% rbp ) setl % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 1 . LBB 2 9 : movq - 3 9 2 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) setl % al . L 2 1 : . LBE 2 9 : . LBE 2 8 : testb % al , % al jne . L 3 4 . LBE 4 : . LBE 3 : . LBB 3 0 : movq $ 0 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 2 4 : . LBE 3 0 : . LBE 2 : leave ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 9 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 2 9 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movsd % xmm 0 , - 2 4 (% rbp ) movq % rdi , - 3 2 (% rbp ) pxor % xmm 0 , % xmm 0 movsd % xmm 0 , - 8 (% rbp ) . LBB 1 8 : . LBB 1 9 : cmpq $ 0 , - 3 2 (% rbp ) jne . L 2 4 . LBB 2 0 : . LBB 2 1 : movsd . LC 8 (% rip ), % xmm 0 movsd % xmm 0 , - 8 (% rbp ) movsd - 8 (% rbp ), % xmm 0 jmp . L 2 5 . L 2 4 : . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBB 2 2 : cmpq $ 1 , - 3 2 (% rbp ) jne . L 2 6 . LBB 2 3 : . LBB 2 4 : movsd - 2 4 (% rbp ), % xmm 0 movsd % xmm 0 , - 8 (% rbp ) movsd - 8 (% rbp ), % xmm 0 jmp . L 2 5 . L 2 6 : . LBE 2 4 : . LBE 2 3 : . LBE 2 2 : . LBB 2 5 : cmpq $ 0 , - 3 2 (% rbp ) jns . L 2 7 . LBB 2 6 : . LBB 2 7 : movq - 3 2 (% rbp ), % rax negq % rax movq % rax , % rdx movsd . LC 8 (% rip ), % xmm 0 divsd - 2 4 (% rbp ), % xmm 0 movq % xmm 0 , % rax movq % rdx , % rdi movq % rax , % xmm 0 call go . leetcode . myPow movq % xmm 0 , % rax movq % rax , - 8 (% rbp ) movsd - 8 (% rbp ), % xmm 0 jmp . L 2 5 . L 2 7 : . LBE 2 7 : . LBE 2 6 : . LBE 2 5 : . LBB 2 8 : movq - 3 2 (% rbp ), % rax andl $ 1 , % eax testq % rax , % rax je . L 2 8 . LBB 2 9 : . LBB 3 0 : movq - 3 2 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 2 4 (% rbp ), % rax movq % rdx , % rdi movq % rax , % xmm 0 call go . leetcode . myPow movq % xmm 0 , % rax movq % rax , % xmm 0 mulsd - 2 4 (% rbp ), % xmm 0 movsd % xmm 0 , - 8 (% rbp ) movsd - 8 (% rbp ), % xmm 0 jmp . L 2 5 . L 2 8 : . LBE 3 0 : . LBE 2 9 : . LBE 2 8 : . LBB 3 1 : movq - 3 2 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , % rdx movsd - 2 4 (% rbp ), % xmm 0 mulsd % xmm 0 , % xmm 0 movq % xmm 0 , % rax movq % rdx , % rdi movq % rax , % xmm 0 call go . leetcode . myPow movq % xmm 0 , % rax movq % rax , - 8 (% rbp ) movsd - 8 (% rbp ), % xmm 0 . L 2 5 : movq % xmm 0 , % rax . LBE 3 1 : . LBE 1 8 : movq % rax , % xmm 0 leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 8 movl $ 2 1 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 8 4 , % rsp movq % rdi , - 2 0 0 (% rbp ) movq % rsi , - 2 0 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) . LBB 2 : leaq go . leetcode . KClosest .. func 1 (% rip ), % rdx leaq 1 6 (% rbp ), % rcx movq $ 0 , - 9 6 (% rbp ) movq $ 0 , - 8 8 (% rbp ) leaq - 9 6 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rdx , (% rax ) movq % rcx , 8 (% rax ) movq - 7 2 (% rbp ), % rbx leaq type ... 6 . 7 . 6 . 7 int (% rip ), % r 1 2 leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 3 : movq - 1 3 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 : jmp . L 3 . L 2 : . LBB 4 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 4 : movq - 1 3 6 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call sort . Slice @ PLT movq - 2 0 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 9 2 (% rbp ) movq % rbx , - 1 8 4 (% rbp ) movq % rbx , - 1 7 6 (% rbp ) . LBB 5 : movq $ 0 , - 4 0 (% rbp ) . LBB 6 : jmp . L 4 . L 1 7 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq - 1 8 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 5 cmpq % rax , - 4 0 (% rbp ) jl . L 1 4 . L 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : movq - 1 9 2 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax leaq (% rcx ,% rax ), % rdx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 7 cmpq % rax , - 4 0 (% rbp ) jl . L 1 5 . L 7 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : movq 1 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 6 4 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , 8 (% rdx ) movq - 4 8 (% rbp ), % rax movq % rax , 1 6 (% rdx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 9 : movq - 6 4 (% rbp ), % rax movq % rax , (% rdx ) jmp . L 1 0 . L 9 : . LBE 9 : . LBB 1 0 : movq - 6 4 (% rbp ), % rax movq % rax , % rcx movq % rdx , % rax movq % rcx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 0 : . LBE 1 0 : . LBE 8 : . LBB 1 1 : addq $ 1 , - 4 0 (% rbp ) . L 4 : . LBE 1 1 : movq - 4 0 (% rbp ), % rax cmpq - 2 0 8 (% rbp ), % rax jl . L 1 7 . LBE 6 : . LBE 5 : . LBB 1 2 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 2 0 0 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 2 : . LBE 2 : movq - 2 0 0 (% rbp ), % rax addq $ 1 8 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 3 movl $ 3 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 3 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 3 6 0 , % rsp movq % rdi , - 3 2 8 (% rbp ) movq % rsi , - 3 3 6 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq % rcx , - 3 5 2 (% rbp ) movq % r 8 , - 3 6 0 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) movq $ 0 , - 2 7 2 (% rbp ) . LBB 2 : movq - 3 3 6 (% rbp ), % rax imulq - 3 4 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 2 4 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 6 0 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq $ 0 , - 4 8 (% rbp ) movq $ 1 , - 5 6 (% rbp ) movq $ 2 , - 6 4 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq - 3 2 (% rbp ), % rdx movq % rdx , (% rax ) movq - 4 0 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 2 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq $ 2 , - 2 4 8 (% rbp ) movq $ 2 , - 2 4 0 (% rbp ) leaq type ... 6 1 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 3 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 : jmp . L 3 . L 2 : . LBB 4 : movq - 2 3 2 (% rbp ), % rax leaq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 4 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq $ 1 , - 3 1 2 (% rbp ) movq $ 1 , - 3 0 4 (% rbp ) . LBB 5 : . LBB 6 : jmp . L 4 . L 2 2 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 6 4 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , - 7 2 (% rbp ) . LBB 1 0 : jmp . L 5 . L 2 1 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : movq - 4 8 (% rbp ), % rax addq % rax , - 3 2 (% rbp ) movq - 5 6 (% rbp ), % rax addq % rax , - 4 0 (% rbp ) . LBB 1 3 : . LBB 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 3 2 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax testb % al , % al je . L 6 . LBB 1 7 : movq - 3 2 (% rbp ), % rax cmpq - 3 3 6 (% rbp ), % rax setl % al . L 6 : . LBE 1 7 : . LBE 1 6 : testb % al , % al je . L 7 . LBB 1 8 : movq - 4 0 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax . L 7 : . LBE 1 8 : . LBE 1 5 : testb % al , % al je . L 8 . LBB 1 9 : movq - 4 0 (% rbp ), % rax cmpq - 3 4 4 (% rbp ), % rax setl % al . L 8 : . LBE 1 9 : . LBE 1 4 : testb % al , % al je . L 9 . LBB 2 0 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rbx leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq - 3 2 (% rbp ), % rdx movq % rdx , (% rax ) movq - 4 0 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 6 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 2 , - 1 5 2 (% rbp ) movq $ 2 , - 1 4 4 (% rbp ) leaq 1 (% rbx ), % rax movq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 0 . LBB 2 1 : movq - 1 9 2 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 6 . 7 int (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) . LBE 2 1 : jmp . L 1 1 . L 1 0 : . LBB 2 2 : movq - 1 9 2 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rdx movq % rcx , - 3 2 0 (% rbp ) movq % rax , - 3 1 2 (% rbp ) movq % rdx , - 3 0 4 (% rbp ) . L 1 1 : . LBE 2 2 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 9 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 1 6 0 (% rbp ), % rcx movq - 1 5 2 (% rbp ), % rbx movq % rcx , - 1 2 8 (% rbp ) movq % rbx , - 1 2 0 (% rbp ) movq - 1 4 4 (% rbp ), % rdx movq % rdx , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 1 2 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 2 . LBB 2 3 : movq - 1 2 8 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 3 . L 1 2 : . LBE 2 3 : . LBB 2 4 : movq - 1 2 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 3 : . LBE 2 4 : subq $ 1 , - 2 4 (% rbp ) . L 9 : . LBE 2 0 : . LBE 1 3 : . LBE 1 2 : . LBB 2 5 : subq $ 1 , - 7 2 (% rbp ) . L 5 : . LBE 2 5 : cmpq $ 0 , - 7 2 (% rbp ) jg . L 2 1 . LBE 1 0 : . LBE 9 : addq $ 1 , - 6 4 (% rbp ) . LBB 2 6 : movq - 5 6 (% rbp ), % rax movq - 4 8 (% rbp ), % rdx negq % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 5 6 (% rbp ) . L 4 : . LBE 2 6 : . LBE 8 : cmpq $ 0 , - 2 4 (% rbp ) jg . L 2 2 . LBE 6 : . LBE 5 : . LBB 2 7 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 3 2 8 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 7 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 7 : . LBE 2 : movq - 3 2 8 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 2 : leaq - 1 5 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 1 1 movl $ 1 5 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 1 1 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 4 6 4 , % rsp movq % rdi , - 1 4 0 0 (% rbp ) movq $ 3 , - 1 1 6 8 (% rbp ) movq $ 0 , - 1 1 6 0 (% rbp ) movq $ 1 , - 1 1 5 2 (% rbp ) movq $ 4 , - 1 1 4 4 (% rbp ) movq $ 2 , - 1 1 3 6 (% rbp ) movq $ 5 , - 1 1 2 0 (% rbp ) movq $ 6 , - 1 1 1 2 (% rbp ) movq $ 3 , - 1 1 0 4 (% rbp ) movq $ 2 , - 1 0 9 6 (% rbp ) movq $ 1 , - 1 0 8 8 (% rbp ) movq $ 1 , - 1 0 7 2 (% rbp ) movq $ 2 , - 1 0 6 4 (% rbp ) movq $ 0 , - 1 0 5 6 (% rbp ) movq $ 1 , - 1 0 4 8 (% rbp ) movq $ 5 , - 1 0 4 0 (% rbp ) movq $ 4 , - 1 0 2 4 (% rbp ) movq $ 1 , - 1 0 1 6 (% rbp ) movq $ 0 , - 1 0 0 8 (% rbp ) movq $ 1 , - 1 0 0 0 (% rbp ) movq $ 7 , - 9 9 2 (% rbp ) movq $ 1 , - 9 7 6 (% rbp ) movq $ 0 , - 9 6 8 (% rbp ) movq $ 3 , - 9 6 0 (% rbp ) movq $ 0 , - 9 5 2 (% rbp ) movq $ 5 , - 9 4 4 (% rbp ) leaq - 1 1 6 8 (% rbp ), % rax movq % rax , - 9 2 8 (% rbp ) movq $ 5 , - 9 2 0 (% rbp ) movq $ 5 , - 9 1 2 (% rbp ) leaq - 1 1 2 0 (% rbp ), % rax movq % rax , - 9 0 4 (% rbp ) movq $ 5 , - 8 9 6 (% rbp ) movq $ 5 , - 8 8 8 (% rbp ) leaq - 1 0 7 2 (% rbp ), % rax movq % rax , - 8 8 0 (% rbp ) movq $ 5 , - 8 7 2 (% rbp ) movq $ 5 , - 8 6 4 (% rbp ) leaq - 1 0 2 4 (% rbp ), % rax movq % rax , - 8 5 6 (% rbp ) movq $ 5 , - 8 4 8 (% rbp ) movq $ 5 , - 8 4 0 (% rbp ) leaq - 9 7 6 (% rbp ), % rax movq % rax , - 8 3 2 (% rbp ) movq $ 5 , - 8 2 4 (% rbp ) movq $ 5 , - 8 1 6 (% rbp ) leaq - 9 2 8 (% rbp ), % rax movq % rax , - 1 2 0 0 (% rbp ) movq $ 5 , - 1 1 9 2 (% rbp ) movq $ 5 , - 1 1 8 4 (% rbp ) leaq - 1 2 3 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 8 4 (% rbp ) pushq - 1 1 9 2 (% rbp ) pushq - 1 2 0 0 (% rbp ) movq % rax , % rdi call go . rsq . Constructor addq $ 3 2 , % rsp movq $ 2 , - 8 0 0 (% rbp ) movq $ 1 , - 7 9 2 (% rbp ) movq $ 4 , - 7 8 4 (% rbp ) movq $ 3 , - 7 7 6 (% rbp ) movq $ 1 , - 7 6 8 (% rbp ) movq $ 1 , - 7 6 0 (% rbp ) movq $ 2 , - 7 5 2 (% rbp ) movq $ 2 , - 7 4 4 (% rbp ) movq $ 1 , - 7 3 6 (% rbp ) movq $ 2 , - 7 2 8 (% rbp ) movq $ 2 , - 7 2 0 (% rbp ) movq $ 4 , - 7 1 2 (% rbp ) leaq - 8 0 0 (% rbp ), % rax movq % rax , - 7 0 4 (% rbp ) movq $ 4 , - 6 9 6 (% rbp ) movq $ 4 , - 6 8 8 (% rbp ) leaq - 7 6 8 (% rbp ), % rax movq % rax , - 6 8 0 (% rbp ) movq $ 4 , - 6 7 2 (% rbp ) movq $ 4 , - 6 6 4 (% rbp ) leaq - 7 3 6 (% rbp ), % rax movq % rax , - 6 5 6 (% rbp ) movq $ 4 , - 6 4 8 (% rbp ) movq $ 4 , - 6 4 0 (% rbp ) leaq - 7 0 4 (% rbp ), % rax movq % rax , - 1 2 6 4 (% rbp ) movq $ 3 , - 1 2 5 6 (% rbp ) movq $ 3 , - 1 2 4 8 (% rbp ) movq $ 8 , - 6 2 4 (% rbp ) movq $ 1 1 , - 6 1 6 (% rbp ) movq $ 1 2 , - 6 0 8 (% rbp ) leaq - 6 2 4 (% rbp ), % rax movq % rax , - 1 2 9 6 (% rbp ) movq $ 3 , - 1 2 8 8 (% rbp ) movq $ 3 , - 1 2 8 0 (% rbp ) . LBB 2 8 : movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 1 3 2 8 (% rbp ) movq $ 0 , - 1 3 2 0 (% rbp ) movq $ 0 , - 1 3 1 2 (% rbp ) . LBB 2 9 : . LBB 3 0 : . LBB 3 1 : movq - 1 2 6 4 (% rbp ), % rax movq - 1 2 5 6 (% rbp ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq - 1 2 4 8 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) movq - 5 5 2 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 3 1 : jmp . L 8 0 . L 1 1 0 : . LBB 3 2 : nop . LBE 3 2 : . LBB 3 3 : . LBB 3 4 : movq - 5 5 2 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 8 1 cmpq % rax , % r 1 2 jge . L 8 1 movq - 5 6 0 (% rbp ), % rcx movq % r 1 2 , % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 5 7 6 (% rbp ) . LBE 3 4 : . LBB 3 5 : movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) movq % r 1 2 , - 5 6 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 1 3 2 8 (% rbp ) movq % rdx , - 1 3 2 0 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 1 3 1 2 (% rbp ) . LBE 3 5 : . LBB 3 6 : . LBB 3 7 : movq - 1 3 2 0 (% rbp ), % rax testq % rax , % rax jg . L 8 2 jmp . L 1 0 6 . L 8 1 : . LBE 3 7 : . LBE 3 6 : . LBB 4 2 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 1 0 6 : . LBE 4 2 : . LBB 4 3 : . LBB 4 1 : movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 8 2 : movq - 1 3 2 0 (% rbp ), % rax cmpq $ 1 , % rax jg . L 8 4 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 8 4 : movq - 1 3 2 0 (% rbp ), % rax cmpq $ 2 , % rax jg . L 8 5 movq % rax , % rsi movl $ 2 , % edi call runtime . goPanicIndex @ PLT . L 8 5 : movq - 1 3 2 0 (% rbp ), % rax cmpq $ 3 , % rax jg . L 8 6 movq % rax , % rsi movl $ 3 , % edi call runtime . goPanicIndex @ PLT . L 8 6 : movq - 1 3 2 8 (% rbp ), % rax addq $ 2 4 , % rax movq (% rax ), % rdi movq - 1 3 2 8 (% rbp ), % rax addq $ 1 6 , % rax movq (% rax ), % rcx movq - 1 3 2 8 (% rbp ), % rax addq $ 8 , % rax movq (% rax ), % rdx movq - 1 3 2 8 (% rbp ), % rax movq (% rax ), % rsi leaq - 1 2 3 2 (% rbp ), % rax movq % rdi , % r 8 movq % rax , % rdi call go . rsq . NumMatrix . SumRegion movq % rax , - 6 4 (% rbp ) movq - 1 2 8 8 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 8 7 cmpq % rdx , - 5 6 (% rbp ) jl . L 1 0 7 . L 8 7 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 0 7 : movq - 1 2 9 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 6 4 (% rbp ) je . L 8 9 . LBB 3 8 : movq - 1 2 8 8 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 9 0 cmpq % rdx , - 5 6 (% rbp ) jl . L 1 0 8 . L 9 0 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 0 8 : leaq int .. d (% rip ), % rbx movq % rbx , - 1 5 0 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) movq - 1 2 9 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq - 5 0 4 (% rbp ), % rdx movq (% rax ), % rax movq % rax , (% rdx ) movq - 5 0 4 (% rbp ), % rax movq % rax , - 1 4 9 6 (% rbp ) movq % rbx , - 1 4 8 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 9 6 (% rbp ) movq - 4 9 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , (% rdx ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 1 4 8 0 (% rbp ) leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 8 (% rbp ) movdqa - 1 5 0 4 (% rbp ), % xmm 0 movups % xmm 0 , - 4 8 0 (% rbp ) movdqa - 1 4 8 8 (% rbp ), % xmm 1 movups % xmm 1 , - 4 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 2 . LBB 3 9 : movq - 4 8 8 (% rbp ), % rcx movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 3 9 : jmp . L 9 3 . L 9 2 : . LBB 4 0 : movq - 4 8 8 (% rbp ), % rcx leaq - 4 8 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 3 : . LBE 4 0 : movq - 4 8 8 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq $ 2 , - 2 1 6 (% rbp ) movq $ 2 , - 2 0 8 (% rbp ) leaq . LC 1 8 (% rip ), % rax movq % rax , - 1 4 4 0 (% rbp ) movq $ 1 9 , - 1 4 3 2 (% rbp ) movq - 1 4 4 0 (% rbp ), % rax movq - 1 4 3 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 1 4 0 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 0 8 (% rbp ) pushq - 2 1 6 (% rbp ) pushq - 2 2 4 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 8 9 : . LBE 3 8 : . LBE 4 1 : . LBE 4 3 : . LBE 3 3 : . LBB 4 4 : addq $ 1 , % r 1 2 . L 8 0 : . LBE 4 4 : cmpq % r 1 3 , % r 1 2 jl . L 1 1 0 . LBE 3 0 : . LBE 2 9 : . LBE 2 8 : . LBB 4 5 : leaq type ... 6 0 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 8 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) leaq - 1 3 6 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 7 6 (% rbp ) pushq - 1 8 4 (% rbp ) pushq - 1 9 2 (% rbp ) movq % rax , % rdi call go . rsq . Constructor addq $ 3 2 , % rsp movq - 1 3 6 0 (% rbp ), % rax testq % rax , % rax je . L 9 6 . LBB 4 6 : leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rax movq % rax , - 1 4 7 2 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 0 (% rbp ) movq - 1 3 6 0 (% rbp ), % rax movq - 1 3 5 2 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 1 3 4 4 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 7 . LBB 4 7 : movq - 4 4 0 (% rbp ), % rcx movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 1 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 7 : jmp . L 9 8 . L 9 7 : . LBB 4 8 : movq - 4 4 0 (% rbp ), % rax leaq - 4 3 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 8 : . LBE 4 8 : movq - 4 4 0 (% rbp ), % rax movq % rax , - 1 4 6 4 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 8 (% rbp ) movdqa - 1 4 7 2 (% rbp ), % xmm 2 movups % xmm 2 , - 4 0 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 9 . LBB 4 9 : movq - 4 0 8 (% rbp ), % rcx movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 9 : jmp . L 1 0 0 . L 9 9 : . LBB 5 0 : movq - 4 0 8 (% rbp ), % rax leaq - 4 0 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 0 : . LBE 5 0 : movq - 4 0 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 1 , - 1 5 2 (% rbp ) movq $ 1 , - 1 4 4 (% rbp ) leaq . LC 1 9 (% rip ), % rax movq % rax , - 1 4 2 4 (% rbp ) movq $ 2 0 , - 1 4 1 6 (% rbp ) movq - 1 4 2 4 (% rbp ), % rax movq - 1 4 1 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 1 4 0 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 9 6 : . LBE 4 6 : . LBE 4 5 : . LBB 5 1 : movq $ 0 , - 3 8 4 (% rbp ) movq $ 0 , - 3 7 6 (% rbp ) movq $ 0 , - 3 6 8 (% rbp ) movq $ 0 , - 3 6 0 (% rbp ) movq $ 0 , - 3 5 2 (% rbp ) movq $ 0 , - 3 4 4 (% rbp ) movq $ 0 , - 3 3 6 (% rbp ) movq $ 0 , - 3 2 8 (% rbp ) movq $ 0 , - 3 2 0 (% rbp ) leaq - 3 8 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 3 , - 1 2 0 (% rbp ) movq $ 3 , - 1 1 2 (% rbp ) leaq - 3 0 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rax , % rdi call go . rsq . Constructor addq $ 3 2 , % rsp movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 3 9 2 (% rbp ) movq % rdx , - 1 3 8 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 3 7 6 (% rbp ) movq - 1 3 9 2 (% rbp ), % rax testq % rax , % rax je . L 7 9 . LBB 5 2 : leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rax movq % rax , - 1 4 5 6 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq - 1 3 9 2 (% rbp ), % rax movq - 1 3 8 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 1 3 7 6 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 2 . LBB 5 3 : movq - 2 8 0 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 5 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 5 3 : jmp . L 1 0 3 . L 1 0 2 : . LBB 5 4 : movq - 2 8 0 (% rbp ), % rax leaq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 3 : . LBE 5 4 : movq - 2 8 0 (% rbp ), % rax movq % rax , - 1 4 4 8 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movdqa - 1 4 5 6 (% rbp ), % xmm 3 movups % xmm 3 , - 2 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 4 . LBB 5 5 : movq - 2 4 8 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 5 5 : jmp . L 1 0 5 . L 1 0 4 : . LBB 5 6 : movq - 2 4 8 (% rbp ), % rax leaq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 5 : . LBE 5 6 : movq - 2 4 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq . LC 1 9 (% rip ), % r 1 4 movl $ 2 0 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 1 4 0 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 7 9 : . LBE 5 2 : . LBE 5 1 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 6 movl $ 7 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq % rdi , - 5 6 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) movq $ 0 , - 1 6 (% rbp ) movq $ 1 , - 2 4 (% rbp ) movq 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 1 5 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : . LBB 8 : movq - 1 6 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax setl % al testb % al , % al je . L 3 . LBB 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 4 cmpq % rax , - 1 6 (% rbp ) jl . L 1 2 . L 4 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 2 4 (% rbp ) setge % al . L 3 : . LBE 9 : . LBE 8 : testb % al , % al je . L 6 . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 7 cmpq % rax , - 1 6 (% rbp ) jl . L 1 3 . L 7 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq % rax , - 2 4 (% rbp ) addq $ 1 , - 1 6 (% rbp ) . LBE 1 0 : jmp . L 2 . L 6 : . LBB 1 1 : salq - 2 4 (% rbp ) addq $ 1 , - 8 (% rbp ) . L 2 : . LBE 1 1 : . LBE 7 : . LBE 6 : movq - 2 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jle . L 1 5 . LBE 4 : . LBE 3 : . LBB 1 2 : movq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . LBE 1 2 : . LBE 2 : leave ret
. LFB 0 : leaq - 7 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 0 movl $ 7 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 7 2 8 , % rsp movq % rdi , - 6 9 6 (% rbp ) leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . words . 0 . 6 . 7 string . 2 . go . Solution . chars . 0 string . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 5 6 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 7 6 8 (% rbp ) movq $ 8 , - 7 6 0 (% rbp ) movdqa - 7 6 8 (% rbp ), % xmm 0 movups % xmm 0 , - 4 9 6 (% rbp ) leaq type ... 6 4 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 8 (% rbp ) leaq . LC 2 4 (% rip ), % rax movq % rax , - 6 4 0 (% rbp ) movq $ 3 , - 6 3 2 (% rbp ) leaq . LC 2 5 (% rip ), % rax movq % rax , - 6 2 4 (% rbp ) movq $ 2 , - 6 1 6 (% rbp ) leaq . LC 2 6 (% rip ), % rax movq % rax , - 6 0 8 (% rbp ) movq $ 3 , - 6 0 0 (% rbp ) leaq . LC 2 7 (% rip ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 4 , - 5 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 6 4 8 (% rbp ), % rax movq - 6 4 0 (% rbp ), % rcx movq - 6 3 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 6 2 4 (% rbp ), % rcx movq - 6 1 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 6 0 8 (% rbp ), % rcx movq - 6 0 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 5 9 2 (% rbp ), % rcx movq - 5 8 4 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 6 4 8 (% rbp ), % rax leaq - 6 4 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 6 4 8 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq $ 4 , - 4 7 2 (% rbp ) movq $ 4 , - 4 6 4 (% rbp ) leaq . LC 2 8 (% rip ), % rax movq % rax , - 7 5 2 (% rbp ) movq $ 5 , - 7 4 4 (% rbp ) movdqa - 7 5 2 (% rbp ), % xmm 1 movups % xmm 1 , - 4 5 6 (% rbp ) movq $ 6 , - 4 4 0 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 7 3 6 (% rbp ) movq $ 8 , - 7 2 8 (% rbp ) movdqa - 7 3 6 (% rbp ), % xmm 2 movups % xmm 2 , - 4 3 2 (% rbp ) leaq type ... 6 3 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 8 (% rbp ) leaq . LC 2 9 (% rip ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 5 , - 5 5 2 (% rbp ) leaq . LC 3 0 (% rip ), % rax movq % rax , - 5 4 4 (% rbp ) movq $ 5 , - 5 3 6 (% rbp ) leaq . LC 3 1 (% rip ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 8 , - 5 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 5 6 8 (% rbp ), % rax movq - 5 6 0 (% rbp ), % rcx movq - 5 5 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 5 4 4 (% rbp ), % rcx movq - 5 3 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 5 2 8 (% rbp ), % rcx movq - 5 2 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 5 6 8 (% rbp ), % rax leaq - 5 6 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 5 6 8 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq $ 3 , - 4 0 8 (% rbp ) movq $ 3 , - 4 0 0 (% rbp ) leaq . LC 3 2 (% rip ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 1 4 , - 7 1 2 (% rbp ) movdqa - 7 2 0 (% rbp ), % xmm 3 movups % xmm 3 , - 3 9 2 (% rbp ) movq $ 1 0 , - 3 7 6 (% rbp ) leaq . LC 2 3 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 3 6 8 (% rbp ) movq % r 1 5 , - 3 6 0 (% rbp ) leaq type ... 6 0 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) movq - 5 0 4 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 0 , - 3 4 4 (% rbp ) movq $ 0 , - 3 3 6 (% rbp ) leaq . LC 3 3 (% rip ), % r 1 2 movl $ 4 , % r 1 3 d movq % r 1 2 , - 3 2 8 (% rbp ) movq % r 1 3 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 6 : movq - 6 5 6 (% rbp ), % rax movq - 4 9 6 (% rbp ), % rcx movq - 4 8 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 8 0 (% rbp ), % rcx movq - 4 7 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 4 6 4 (% rbp ), % rcx movq - 4 5 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 1 4 4 (% rax ) movq % rbx , 1 5 2 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 1 6 0 (% rax ) movq % rbx , 1 6 8 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 1 7 6 (% rax ) movq % rbx , 1 8 4 (% rax ) . LBE 6 : jmp . L 7 . L 6 : . LBB 7 : movq - 6 5 6 (% rbp ), % rax leaq - 4 9 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . words . 0 . 6 . 7 string . 2 . go . Solution . chars . 0 string . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 7 : movq - 6 5 6 (% rbp ), % rax movq % rax , - 6 8 8 (% rbp ) movq $ 3 , - 6 8 0 (% rbp ) movq $ 3 , - 6 7 2 (% rbp ) . LBB 8 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . words . 0 . 6 . 7 string . 2 . go . Solution . chars . 0 string . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 9 : . LBB 1 0 : . LBB 1 1 : movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 1 1 : jmp . L 8 . L 1 9 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq - 2 3 2 (% rbp ), % rax testq % rbx , % rbx js . L 9 cmpq % rax , % rbx jge . L 9 movq - 2 4 0 (% rbp ), % rax movq % rbx , % rdx salq $ 6 , % rdx addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 3 0 4 (% rbp ) movq % rdi , - 2 9 6 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 8 8 (% rbp ) movq % rdi , - 2 8 0 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 5 6 (% rax ), % rdx movq 4 8 (% rax ), % rax movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) . LBE 1 4 : . LBB 1 5 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 1 0 jmp . L 1 7 . L 9 : . LBE 1 5 : . LBB 1 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : . LBE 1 8 : . LBB 1 9 : . LBB 1 6 : movq - 2 0 8 (% rbp ), % rsi movq - 2 0 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 4 8 (% rax ) movq % rdi , 5 6 (% rax ) jmp . L 1 2 . L 1 7 : . LBE 1 6 : . LBB 1 7 : leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . words . 0 . 6 . 7 string . 2 . go . Solution . chars . 0 string . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 : . LBE 1 7 : . LBE 1 9 : . LBB 2 0 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 3 4 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . words . 0 . 6 . 7 string . 2 . go . Solution . chars . 0 string . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 3 . LBB 2 1 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 1 : jmp . L 1 4 . L 1 3 : . LBB 2 2 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . words . 0 . 6 . 7 string . 2 . go . Solution . chars . 0 string . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 4 : . LBE 2 2 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 6 9 6 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 2 0 : . LBE 1 3 : . LBB 2 3 : addq $ 1 , % rbx . L 8 : . LBE 2 3 : cmpq % r 1 3 , % rbx jl . L 1 9 . LBE 1 0 : . LBE 9 : . LBE 8 : addq $ 7 2 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 2 movl $ 1 0 4 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 8 0 , % rsp movq % rdi , - 8 8 (% rbp ) movq % rsi , - 9 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movq - 8 8 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 3 2 (% rbp ) . LBB 2 : movq $ 0 , - 4 8 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 2 1 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : movq - 7 2 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 8 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 8 : . LBB 9 : movq % rax , - 4 8 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 3 2 (% rbp ), % rdx movq - 2 4 (% rbp ), % rcx movq - 4 8 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call go . leetcode . position addq $ 3 2 , % rsp movq % rax , - 5 6 (% rbp ) . LBB 1 1 : movq - 5 6 (% rbp ), % rax leaq 1 (% rax ), % rdx movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq % rdx , - 2 4 (% rbp ) movq % rax , - 3 2 (% rbp ) . LBE 1 1 : . LBB 1 2 : movq - 8 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 1 3 : jmp . L 4 . L 3 : . LBE 1 3 : . LBE 1 2 : . LBE 1 0 : . LBB 1 9 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : . LBE 1 9 : . LBB 2 0 : . LBB 1 8 : . LBB 1 7 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 5 cmpq % rax , - 4 0 (% rbp ) jl . L 1 5 . L 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 7 cmpq % rdx , % rax jl . L 1 6 . L 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . LBE 1 5 : . LBB 1 6 : subq $ 1 , - 4 0 (% rbp ) . L 4 : . LBE 1 6 : movq - 4 0 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jg . L 2 0 . LBE 1 7 : . LBE 1 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 1 cmpq % rax , - 5 6 (% rbp ) jl . L 1 8 . L 1 1 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 4 8 (% rbp ), % rax movq % rax , (% rdx ) addq $ 1 , - 8 8 (% rbp ) . LBE 2 0 : . LBE 7 : . LBB 2 1 : addq $ 1 , % rbx . L 2 : . LBE 2 1 : cmpq % r 1 2 , % rbx jl . L 2 1 . LBE 4 : . LBE 3 : . LBE 2 : leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 7 movl $ 1 8 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 7 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 6 8 , % rsp movq $ 0 , - 4 8 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 3 : cmpq $ 0 , - 5 6 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax jmp . L 3 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : cmpq $ 1 , - 5 6 (% rbp ) jne . L 4 . LBB 7 : . LBB 8 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 5 : movq 1 6 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax testq % rax , % rax jg . L 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 6 : movq - 1 4 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax jmp . L 3 3 . L 4 : . LBE 8 : . LBE 7 : . LBE 6 : movq - 5 6 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 7 6 (% rbp ) movq % rbx , - 1 6 8 (% rbp ) movq % rbx , - 1 6 0 (% rbp ) . LBB 9 : movq $ 0 , - 2 4 (% rbp ) . LBB 1 0 : jmp . L 7 . L 4 4 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 8 cmpq % rax , - 2 4 (% rbp ) jl . L 3 4 . L 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq - 5 6 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 0 cmpq % rdx , % rax jl . L 3 5 . L 1 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq 1 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 2 cmpq % rax , - 2 4 (% rbp ) jge . L 1 2 movq - 1 1 2 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq - 1 7 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . LBE 1 2 : . LBB 1 3 : addq $ 1 , - 2 4 (% rbp ) jmp . L 7 . L 1 2 : . LBE 1 3 : . LBB 1 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 : . LBE 1 4 : movq - 2 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jl . L 4 4 . LBE 1 0 : . LBE 9 : . LBB 1 5 : movq - 5 6 (% rbp ), % rax subq $ 2 , % rax movq % rax , - 3 2 (% rbp ) . LBB 1 6 : jmp . L 1 5 . L 4 6 : . LBB 1 7 : nop . LBE 1 7 : . LBB 1 8 : . LBB 1 9 : movq $ 0 , - 4 0 (% rbp ) . LBB 2 0 : jmp . L 1 6 . L 4 5 : . LBB 2 1 : nop . LBE 2 1 : . LBB 2 2 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 7 cmpq % rax , - 4 0 (% rbp ) jl . L 3 7 . L 1 7 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 4 0 (% rbp ), % rax addq $ 1 , % rax movq - 1 6 8 (% rbp ), % rdx testq % rax , % rax js . L 1 9 cmpq % rdx , % rax jl . L 3 8 . L 1 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 1 7 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 1 7 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call main . min movq % rax , % rsi movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 1 cmpq % rax , - 4 0 (% rbp ) jl . L 3 9 . L 2 1 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 3 cmpq % rax , - 3 2 (% rbp ) jl . L 4 0 . L 2 3 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 5 cmpq % rax , - 4 0 (% rbp ) jge . L 2 5 movq - 8 0 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 1 7 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax addq % rsi , % rdx movq % rdx , (% rax ) . LBE 2 2 : . LBB 2 3 : addq $ 1 , - 4 0 (% rbp ) jmp . L 1 6 . L 2 5 : . LBE 2 3 : . LBB 2 4 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : . LBE 2 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 6 cmpq % rax , - 3 2 (% rbp ) jl . L 4 1 . L 2 6 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rcx , % rax movq 8 (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 4 5 . LBE 2 0 : . LBE 1 9 : . LBE 1 8 : . LBB 2 5 : subq $ 1 , - 3 2 (% rbp ) . L 1 5 : . LBE 2 5 : cmpq $ 0 , - 3 2 (% rbp ) jns . L 4 6 . LBE 1 6 : . LBE 1 5 : . LBB 2 6 : movq - 1 6 8 (% rbp ), % rax testq % rax , % rax jg . L 3 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 2 : movq - 1 7 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax . L 3 3 : . LBE 2 6 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 2 : leaq - 1 0 4 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 9 8 movl $ 1 0 4 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 9 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 0 0 0 , % rsp movq % rdi , - 9 8 4 (% rbp ) leaq type ... 6 1 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 9 2 (% rbp ) movq - 7 9 2 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 2 , 3 2 (% rax ) movq $ 4 , 4 0 (% rax ) movq $ 6 , 4 8 (% rax ) movq $ 7 , 5 6 (% rax ) movq $ 9 , 6 4 (% rax ) movq $ 2 , 7 2 (% rax ) movq $ 1 9 , 8 0 (% rax ) movq - 7 9 2 (% rbp ), % rax movq % rax , - 7 6 8 (% rbp ) movq $ 1 1 , - 7 6 0 (% rbp ) movq $ 1 1 , - 7 5 2 (% rbp ) leaq type ... 6 6 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 8 4 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 4 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 9 , 3 2 (% rax ) movq $ 6 , 4 0 (% rax ) movq - 7 8 4 (% rbp ), % rax movq % rax , - 7 4 4 (% rbp ) movq $ 6 , - 7 3 6 (% rbp ) movq $ 6 , - 7 2 8 (% rbp ) leaq type ... 6 1 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 7 6 (% rbp ) movq - 7 7 6 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq $ 4 , 3 2 (% rax ) movq $ 3 , 4 0 (% rax ) movq $ 3 , 4 8 (% rax ) movq $ 9 , 5 6 (% rax ) movq $ 6 , 6 4 (% rax ) movq $ 7 , 7 2 (% rax ) movq $ 1 9 , 8 0 (% rax ) movq - 7 7 6 (% rbp ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 1 1 , - 7 1 2 (% rbp ) movq $ 1 1 , - 7 0 4 (% rbp ) leaq - 7 6 8 (% rbp ), % rax movq % rax , - 8 1 6 (% rbp ) movq $ 1 , - 8 0 8 (% rbp ) movq $ 1 , - 8 0 0 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 3 2 (% rip ), % rax movq % rax , - 1 0 0 8 (% rbp ) movq $ 7 0 , - 1 0 0 0 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 1 0 0 8 (% rbp ), % rcx movq - 1 0 0 0 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 6 8 8 (% rbp ) movq % rdx , - 6 8 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 6 7 2 (% rbp ) . LBB 1 0 5 : movq $ 0 , - 9 2 8 (% rbp ) movq $ 0 , - 9 2 0 (% rbp ) movq $ 0 , - 9 1 2 (% rbp ) movq $ 0 , - 9 0 4 (% rbp ) movq $ 0 , - 8 9 6 (% rbp ) movq $ 0 , - 8 8 8 (% rbp ) movq $ 0 , - 8 8 0 (% rbp ) movq $ 0 , - 8 7 2 (% rbp ) movq $ 0 , - 8 6 4 (% rbp ) . LBB 1 0 6 : . LBB 1 0 7 : . LBB 1 0 8 : movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq - 5 6 8 (% rbp ), % rax movq % rax , - 1 0 0 8 (% rbp ) movl $ 0 , % ebx . LBE 1 0 8 : jmp . L 8 6 . L 9 7 : . LBB 1 0 9 : nop . LBE 1 0 9 : . LBB 1 1 0 : . LBB 1 1 1 : movq - 5 6 8 (% rbp ), % rax testq % rbx , % rbx js . L 8 7 cmpq % rax , % rbx jge . L 8 7 movq - 5 7 6 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 3 , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 6 5 6 (% rbp ) movq % rdi , - 6 4 8 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 6 4 0 (% rbp ) movq % rdi , - 6 3 2 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 6 2 4 (% rbp ) movq % rdi , - 6 1 6 (% rbp ) movq 4 8 (% rax ), % rsi movq 5 6 (% rax ), % rdi movq % rsi , - 6 0 8 (% rbp ) movq % rdi , - 6 0 0 (% rbp ) movq 6 4 (% rax ), % rax movq % rax , - 5 9 2 (% rbp ) . LBE 1 1 1 : . LBB 1 1 2 : movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 9 2 8 (% rbp ) movq % rdx , - 9 2 0 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 9 1 2 (% rbp ) movq % rdx , - 9 0 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 8 9 6 (% rbp ) movq % rdx , - 8 8 8 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 8 8 0 (% rbp ) movq % rdx , - 8 7 2 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 8 6 4 (% rbp ) . LBE 1 1 2 : . LBB 1 1 3 : movq - 8 8 0 (% rbp ), % rax movq - 8 7 2 (% rbp ), % rdx movq % rax , - 8 4 8 (% rbp ) movq % rdx , - 8 4 0 (% rbp ) movq - 8 6 4 (% rbp ), % rax movq % rax , - 8 3 2 (% rbp ) movq - 9 2 8 (% rbp ), % rax movq - 9 2 0 (% rbp ), % rdx movq % rax , - 9 7 6 (% rbp ) movq % rdx , - 9 6 8 (% rbp ) movq - 9 1 2 (% rbp ), % rax movq - 9 0 4 (% rbp ), % rdx movq % rax , - 9 6 0 (% rbp ) movq % rdx , - 9 5 2 (% rbp ) movq - 8 9 6 (% rbp ), % rax movq - 8 8 8 (% rbp ), % rdx movq % rax , - 9 4 4 (% rbp ) movq % rdx , - 9 3 6 (% rbp ) leaq - 4 3 2 (% rbp ), % rax pushq - 9 3 6 (% rbp ) pushq - 9 4 4 (% rbp ) pushq - 9 5 2 (% rbp ) pushq - 9 6 0 (% rbp ) pushq - 9 6 8 (% rbp ) pushq - 9 7 6 (% rbp ) movq % rax , % rdi call go . leetcode . relativeSortArray addq $ 4 8 , % rsp leaq go . leetcode .. go . leetcode . para 1 1 2 2 .. d (% rip ), % rax movq % rax , - 1 0 4 0 (% rbp ) leaq go . leetcode .. go . leetcode . para 1 1 2 2 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 8 (% rbp ) movq - 9 7 6 (% rbp ), % rax movq - 9 6 8 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 9 6 0 (% rbp ), % rax movq - 9 5 2 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 9 4 4 (% rbp ), % rax movq - 9 3 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 8 8 jmp . L 9 5 . L 8 7 : . LBE 1 1 3 : . LBB 1 1 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 8 8 : . LBE 1 1 8 : . LBB 1 1 9 : . LBB 1 1 4 : movq - 4 0 8 (% rbp ), % rax movq - 4 0 0 (% rbp ), % rsi movq - 3 9 2 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 3 8 4 (% rbp ), % rsi movq - 3 7 6 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 3 6 8 (% rbp ), % rsi movq - 3 6 0 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) . LBE 1 1 4 : jmp . L 9 0 . L 9 5 : . LBB 1 1 5 : movq - 4 0 8 (% rbp ), % rax leaq - 4 0 0 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 1 1 2 2 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 0 : . LBE 1 1 5 : movq - 4 0 8 (% rbp ), % rax movq % rax , - 1 0 3 2 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 1 0 2 4 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 1 . LBB 1 1 6 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 1 6 : jmp . L 9 2 . L 9 1 : . LBB 1 1 7 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 2 : . LBE 1 1 7 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 1 0 1 6 (% rbp ) movdqa - 1 0 4 0 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 1 0 2 4 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 3 3 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) . LBE 1 1 9 : . LBE 1 1 0 : . LBB 1 2 0 : addq $ 1 , % rbx . L 8 6 : . LBE 1 2 0 : cmpq - 1 0 0 8 (% rbp ), % rbx jl . L 9 7 . LBE 1 0 7 : . LBE 1 0 6 : . LBE 1 0 5 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 3 4 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 movl $ 2 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 : pushq % rbp movq % rsp , % rbp subq $ 1 6 , % rsp movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rsi movl $ 0 , % edi call main . helper addq $ 3 2 , % rsp movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . LBE 3 : . LBE 2 : leave ret
. LFB 0 : leaq - 3 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 4 movl $ 3 2 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 8 0 , % rsp . LBB 2 : movq $ 1 , - 5 6 (% rbp ) . LBB 3 : jmp . L 2 . L 1 3 : . LBB 4 : nop . LBE 4 : . LBB 5 : movq - 5 6 (% rbp ), % rax imulq % rax , % rax movq % rax , - 7 2 (% rbp ) . LBB 6 : movq - 5 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBB 7 : jmp . L 3 . L 1 2 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq - 6 4 (% rbp ), % rax imulq % rax , % rax movq % rax , - 8 0 (% rbp ) movq - 7 2 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax addq % rdx , % rax movq % rax , - 8 8 (% rbp ) pxor % xmm 1 , % xmm 1 cvtsi 2 sdq - 8 8 (% rbp ), % xmm 1 movq % xmm 1 , % rax movq % rax , % xmm 0 call math . Sqrt @ PLT cvttsd 2 siq % xmm 0 , % rax movq % rax , - 9 6 (% rbp ) . LBB 1 0 : . LBB 1 1 : movq - 9 6 (% rbp ), % rax imulq % rax , % rax cmpq % rax , - 8 8 (% rbp ) sete % al testb % al , % al je . L 4 . LBB 1 2 : movq - 5 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax addq % rax , % rdx movq - 9 6 (% rbp ), % rax addq % rdx , % rax cmpq $ 1 0 0 0 , % rax sete % al . L 4 : . LBE 1 2 : . LBE 1 1 : testb % al , % al je . L 5 . LBB 1 3 : leaq int .. d (% rip ), % rbx movq % rbx , - 3 2 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 5 6 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 3 1 2 (% rbp ) movq % rbx , - 3 0 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq - 2 4 8 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 4 8 (% rbp ), % rax movq % rax , - 2 9 6 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 0 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 9 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 4 0 (% rbp ), % rax movq % rax , % r 1 5 leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 5 6 (% rbp ), % rax imulq - 6 4 (% rbp ), % rax movq % rax , % rdx movq - 2 3 2 (% rbp ), % rax imulq - 9 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 3 2 (% rbp ), % rax movq % rax , % r 1 3 movdqa - 3 2 0 (% rbp ), % xmm 2 movups % xmm 2 , - 2 2 4 (% rbp ) movdqa - 3 0 4 (% rbp ), % xmm 3 movups % xmm 3 , - 2 0 8 (% rbp ) movq % r 1 4 , - 1 9 2 (% rbp ) movq % r 1 5 , - 1 8 4 (% rbp ) movq % r 1 2 , - 1 7 6 (% rbp ) movq % r 1 3 , - 1 6 8 (% rbp ) leaq - 2 2 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 4 , - 1 5 2 (% rbp ) movq $ 4 , - 1 4 4 (% rbp ) leaq - 1 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) . L 5 : . LBE 1 3 : . LBE 1 0 : . LBE 9 : . LBB 1 4 : addq $ 1 , - 6 4 (% rbp ) . L 3 : . LBE 1 4 : cmpq $ 9 9 9 , - 6 4 (% rbp ) jle . L 1 2 . LBE 7 : . LBE 6 : . LBE 5 : . LBB 1 5 : addq $ 1 , - 5 6 (% rbp ) . L 2 : . LBE 1 5 : cmpq $ 9 9 9 , - 5 6 (% rbp ) jle . L 1 3 . LBE 3 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 8 : leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 3 8 movl $ 2 8 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 8 : ret . L 2 3 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 4 8 , % rsp movq % rdi , - 2 6 4 (% rbp ) movq % rsi , - 2 7 2 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) . LBB 1 7 3 : movq $ 0 , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) movq $ 0 , - 2 0 8 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 6 8 (% rbp ) leaq - 1 6 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq $ 1 , - 2 4 8 (% rbp ) movq $ 1 , - 2 4 0 (% rbp ) . LBB 1 7 4 : . LBB 1 7 5 : jmp . L 2 1 8 . L 2 3 7 : . LBB 1 7 6 : nop . LBE 1 7 6 : . LBB 1 7 7 : movq - 2 4 8 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 1 9 cmpq % rax , - 4 0 (% rbp ) jl . L 2 3 4 . L 2 1 9 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 3 4 : movq - 2 5 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 2 1 cmpq % rax , - 4 0 (% rbp ) jg . L 2 2 1 cmpq $ 0 , - 4 0 (% rbp ) jns . L 2 2 2 jmp . L 2 3 5 . L 2 2 1 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 2 3 5 : movq - 4 0 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 2 2 2 : movq - 2 5 6 (% rbp ), % rdx movq - 2 4 0 (% rbp ), % rax movq % rdx , - 2 5 6 (% rbp ) movq - 4 0 (% rbp ), % rdx movq % rdx , - 2 4 8 (% rbp ) movq % rax , - 2 4 0 (% rbp ) . LBB 1 7 8 : cmpq $ 0 , - 2 7 2 (% rbp ) je . L 2 1 8 . LBB 1 7 9 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rbx movq - 2 7 2 (% rbp ), % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 2 4 . LBB 1 8 0 : movq - 1 6 0 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) . LBE 1 8 0 : jmp . L 2 2 5 . L 2 2 4 : . LBB 1 8 1 : movq - 1 6 0 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rdx movq % rcx , - 2 2 4 (% rbp ) movq % rax , - 2 1 6 (% rbp ) movq % rdx , - 2 0 8 (% rbp ) . L 2 2 5 : . LBE 1 8 1 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rbx movq - 2 7 2 (% rbp ), % rax movq 1 6 (% rax ), % r 1 3 movq - 2 7 2 (% rbp ), % rax movq 8 (% rax ), % r 1 2 leaq 2 (% rbx ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 2 6 . LBB 1 8 2 : movq - 1 2 8 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 1 go . tree . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) . LBE 1 8 2 : jmp . L 2 2 7 . L 2 2 6 : . LBB 1 8 3 : movq - 1 2 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rdx movq % rcx , - 2 5 6 (% rbp ) movq % rax , - 2 4 8 (% rbp ) movq % rdx , - 2 4 0 (% rbp ) . L 2 2 7 : . LBE 1 8 3 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 2 8 . LBB 1 8 4 : movq % r 1 3 , (% rax ) jmp . L 2 2 9 . L 2 2 8 : . LBE 1 8 4 : . LBB 1 8 5 : movq % r 1 3 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 2 9 : . LBE 1 8 5 : leaq 1 (% rbx ), % rax movq - 1 2 8 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 3 0 . LBB 1 8 6 : movq % r 1 2 , (% rax ) jmp . L 2 1 8 . L 2 3 0 : . LBE 1 8 6 : . LBB 1 8 7 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 1 8 : . LBE 1 8 7 : . LBE 1 7 9 : . LBE 1 7 8 : . LBE 1 7 7 : movq - 2 4 8 (% rbp ), % rax testq % rax , % rax jg . L 2 3 7 . LBE 1 7 5 : . LBE 1 7 4 : . LBB 1 8 8 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 2 6 4 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 8 8 : . LBE 1 7 3 : movq - 2 6 4 (% rbp ), % rax addq $ 2 4 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 4 movl $ 1 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 4 : pushq % rbp movq % rsp , % rbp subq $ 1 7 6 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) . LBB 2 : leaq - 8 0 (% rbp ), % rdi movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx leaq - 1 1 2 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . stringtoslicebyte @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) . LBB 3 : movq $ 0 , - 8 (% rbp ) . LBB 4 : jmp . L 2 . L 2 3 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 8 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . LBB 7 : . LBB 8 : jmp . L 3 . L 2 2 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : addq $ 1 , - 1 6 (% rbp ) . L 3 : . LBE 1 0 : . LBB 1 1 : movq - 1 5 2 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 1 6 (% rbp ) setl % al testb % al , % al je . L 4 . LBB 1 2 : movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 5 cmpq % rax , - 1 6 (% rbp ) jl . L 1 8 . L 5 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : movq - 1 6 0 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 6 , % al sete % al . L 4 : . LBE 1 2 : . LBE 1 1 : testb % al , % al jne . L 2 2 . LBE 8 : . LBE 7 : movq - 1 6 (% rbp ), % rax leaq 1 (% rax ), % rdi movq - 1 4 4 (% rbp ), % rax testq % rdi , % rdi js . L 9 cmpq % rax , % rdi jg . L 9 cmpq $ 0 , - 8 (% rbp ) jns . L 1 0 jmp . L 1 1 . L 9 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 1 0 : cmpq % rdi , - 8 (% rbp ) jle . L 2 0 . L 1 1 : movq - 8 (% rbp ), % rax movq % rdi , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 2 0 : movq - 1 6 0 (% rbp ), % rdx movq - 1 4 4 (% rbp ), % rax cmpq % rax , - 8 (% rbp ) je . L 1 3 movq - 8 (% rbp ), % rax jmp . L 1 4 . L 1 3 : movl $ 0 , % eax . L 1 4 : addq % rdx , % rax movq % rax , - 4 8 (% rbp ) movq % rdi , % rax subq - 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 1 4 4 (% rbp ), % rax subq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) subq $ 8 , % rsp pushq - 3 2 (% rbp ) pushq - 4 0 (% rbp ) pushq - 4 8 (% rbp ) call go . leetcode . push addq $ 3 2 , % rsp movq - 1 6 (% rbp ), % rax movq % rax , - 8 (% rbp ) . L 2 : . LBE 6 : movq - 1 5 2 (% rbp ), % rax cmpq % rax , - 8 (% rbp ) jl . L 2 3 . LBE 4 : . LBE 3 : . LBB 1 3 : subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movl $ 0 , % edi call runtime . slicebytetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx . LBE 1 3 : . LBE 2 : leave ret
. LFB 0 : leaq - 1 4 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 2 movl $ 1 4 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 4 4 8 , % rsp movq % rdi , - 1 4 3 2 (% rbp ) movq $ 2 , - 8 6 4 (% rbp ) leaq type ... 6 1 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 6 4 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 5 6 (% rbp ) movq - 1 2 5 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 0 , 8 (% rax ) movq - 1 2 5 6 (% rbp ), % rax movq % rax , - 1 2 4 8 (% rbp ) movq $ 2 , - 1 2 4 0 (% rbp ) movq $ 2 , - 1 2 3 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 1 2 6 4 (% rbp ), % rcx movq - 1 2 4 8 (% rbp ), % rax movq - 1 2 4 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 3 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 1 2 6 4 (% rbp ), % rax leaq - 1 2 4 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 1 2 6 4 (% rbp ), % rax movq % rax , - 8 5 6 (% rbp ) movq $ 1 , - 8 4 8 (% rbp ) movq $ 1 , - 8 4 0 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 1 6 (% rbp ) movq - 1 2 1 6 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq - 1 2 1 6 (% rbp ), % rax movq % rax , - 8 3 2 (% rbp ) movq $ 2 , - 8 2 4 (% rbp ) movq $ 2 , - 8 1 6 (% rbp ) movq $ 2 , - 8 0 8 (% rbp ) leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 8 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 0 (% rbp ) movq - 1 2 0 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 0 , 8 (% rax ) movq - 1 2 0 0 (% rbp ), % rax movq % rax , - 1 1 8 4 (% rbp ) movq $ 2 , - 1 1 7 6 (% rbp ) movq $ 2 , - 1 1 6 8 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 1 9 2 (% rbp ) movq - 1 1 9 2 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq - 1 1 9 2 (% rbp ), % rax movq % rax , - 1 1 6 0 (% rbp ) movq $ 2 , - 1 1 5 2 (% rbp ) movq $ 2 , - 1 1 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 1 2 0 8 (% rbp ), % rax movq - 1 1 8 4 (% rbp ), % rcx movq - 1 1 7 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 1 1 6 8 (% rbp ), % rcx movq - 1 1 6 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 1 1 5 2 (% rbp ), % rcx movq - 1 1 4 4 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 1 2 0 8 (% rbp ), % rax leaq - 1 1 8 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 1 2 0 8 (% rbp ), % rax movq % rax , - 8 0 0 (% rbp ) movq $ 2 , - 7 9 2 (% rbp ) movq $ 2 , - 7 8 4 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 1 3 6 (% rbp ) movq - 1 1 3 6 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq - 1 1 3 6 (% rbp ), % rax movq % rax , - 7 7 6 (% rbp ) movq $ 4 , - 7 6 8 (% rbp ) movq $ 4 , - 7 6 0 (% rbp ) movq $ 4 , - 7 5 2 (% rbp ) leaq type ... 6 4 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 1 2 8 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 1 2 0 (% rbp ) movq - 1 1 2 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 0 , 8 (% rax ) movq - 1 1 2 0 (% rbp ), % rax movq % rax , - 1 0 8 8 (% rbp ) movq $ 2 , - 1 0 8 0 (% rbp ) movq $ 2 , - 1 0 7 2 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 1 1 2 (% rbp ) movq - 1 1 1 2 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 0 , 8 (% rax ) movq - 1 1 1 2 (% rbp ), % rax movq % rax , - 1 0 6 4 (% rbp ) movq $ 2 , - 1 0 5 6 (% rbp ) movq $ 2 , - 1 0 4 8 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 1 0 4 (% rbp ) movq - 1 1 0 4 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 1 , 8 (% rax ) movq - 1 1 0 4 (% rbp ), % rax movq % rax , - 1 0 4 0 (% rbp ) movq $ 2 , - 1 0 3 2 (% rbp ) movq $ 2 , - 1 0 2 4 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 9 6 (% rbp ) movq - 1 0 9 6 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 2 , 8 (% rax ) movq - 1 0 9 6 (% rbp ), % rax movq % rax , - 1 0 1 6 (% rbp ) movq $ 2 , - 1 0 0 8 (% rbp ) movq $ 2 , - 1 0 0 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 6 : movq - 1 1 2 8 (% rbp ), % rax movq - 1 0 8 8 (% rbp ), % rcx movq - 1 0 8 0 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 1 0 7 2 (% rbp ), % rcx movq - 1 0 6 4 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 1 0 5 6 (% rbp ), % rcx movq - 1 0 4 8 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 1 0 4 0 (% rbp ), % rcx movq - 1 0 3 2 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 1 0 2 4 (% rbp ), % rcx movq - 1 0 1 6 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 1 0 0 8 (% rbp ), % rcx movq - 1 0 0 0 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) . LBE 6 : jmp . L 7 . L 6 : . LBB 7 : movq - 1 1 2 8 (% rbp ), % rax leaq - 1 0 8 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 7 : movq - 1 1 2 8 (% rbp ), % rax movq % rax , - 7 4 4 (% rbp ) movq $ 4 , - 7 3 6 (% rbp ) movq $ 4 , - 7 2 8 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 8 4 (% rbp ) movq - 9 8 4 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq - 9 8 4 (% rbp ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 4 , - 7 1 2 (% rbp ) movq $ 4 , - 7 0 4 (% rbp ) movq $ 3 , - 6 9 6 (% rbp ) leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 7 6 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 6 8 (% rbp ) movq - 9 6 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 0 , 8 (% rax ) movq - 9 6 8 (% rbp ), % rax movq % rax , - 9 4 4 (% rbp ) movq $ 2 , - 9 3 6 (% rbp ) movq $ 2 , - 9 2 8 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 6 0 (% rbp ) movq - 9 6 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq - 9 6 0 (% rbp ), % rax movq % rax , - 9 2 0 (% rbp ) movq $ 2 , - 9 1 2 (% rbp ) movq $ 2 , - 9 0 4 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 5 2 (% rbp ) movq - 9 5 2 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq - 9 5 2 (% rbp ), % rax movq % rax , - 8 9 6 (% rbp ) movq $ 2 , - 8 8 8 (% rbp ) movq $ 2 , - 8 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 . LBB 8 : movq - 9 7 6 (% rbp ), % rax movq - 9 4 4 (% rbp ), % rcx movq - 9 3 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 9 2 8 (% rbp ), % rcx movq - 9 2 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 9 1 2 (% rbp ), % rcx movq - 9 0 4 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 8 9 6 (% rbp ), % rcx movq - 8 8 8 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 8 8 0 (% rbp ), % rdx movq % rdx , 6 4 (% rax ) . LBE 8 : jmp . L 9 . L 8 : . LBB 9 : movq - 9 7 6 (% rbp ), % rax leaq - 9 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 : . LBE 9 : movq - 9 7 6 (% rbp ), % rax movq % rax , - 6 8 8 (% rbp ) movq $ 3 , - 6 8 0 (% rbp ) movq $ 3 , - 6 7 2 (% rbp ) leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 7 2 (% rbp ) movq - 8 7 2 (% rbp ), % rax movq % rax , - 6 6 4 (% rbp ) movq $ 0 , - 6 5 6 (% rbp ) movq $ 0 , - 6 4 8 (% rbp ) leaq - 8 6 4 (% rbp ), % rax movq % rax , - 1 2 9 6 (% rbp ) movq $ 4 , - 1 2 8 8 (% rbp ) movq $ 4 , - 1 2 8 0 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 1 4 5 6 (% rbp ) movq $ 6 9 , - 1 4 4 8 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 1 4 5 6 (% rbp ), % rcx movq - 1 4 4 8 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) . LBB 1 0 : movq $ 0 , - 1 3 9 2 (% rbp ) movq $ 0 , - 1 3 8 4 (% rbp ) movq $ 0 , - 1 3 7 6 (% rbp ) movq $ 0 , - 1 3 6 8 (% rbp ) movq $ 0 , - 1 3 6 0 (% rbp ) movq $ 0 , - 1 3 5 2 (% rbp ) movq $ 0 , - 1 3 4 4 (% rbp ) . LBB 1 1 : . LBB 1 2 : . LBB 1 3 : movq - 1 2 9 6 (% rbp ), % rax movq - 1 2 8 8 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 1 2 8 0 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq - 5 3 6 (% rbp ), % rax movq % rax , - 1 4 5 6 (% rbp ) movl $ 0 , % ebx . LBE 1 3 : jmp . L 1 0 . L 2 1 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 5 3 6 (% rbp ), % rax testq % rbx , % rbx js . L 1 1 cmpq % rax , % rbx jge . L 1 1 movq - 5 4 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 3 , % rax subq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 6 0 8 (% rbp ) movq % rdi , - 6 0 0 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 5 9 2 (% rbp ) movq % rdi , - 5 8 4 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 5 7 6 (% rbp ) movq % rdi , - 5 6 8 (% rbp ) movq 4 8 (% rax ), % rax movq % rax , - 5 6 0 (% rbp ) . LBE 1 6 : . LBB 1 7 : movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 1 3 9 2 (% rbp ) movq % rdx , - 1 3 8 4 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 1 3 7 6 (% rbp ) movq % rdx , - 1 3 6 8 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 1 3 6 0 (% rbp ) movq % rdx , - 1 3 5 2 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 1 3 4 4 (% rbp ) . LBE 1 7 : . LBB 1 8 : movq - 1 3 6 0 (% rbp ), % rax movq - 1 3 5 2 (% rbp ), % rdx movq % rax , - 1 3 2 8 (% rbp ) movq % rdx , - 1 3 2 0 (% rbp ) movq - 1 3 4 4 (% rbp ), % rax movq % rax , - 1 3 1 2 (% rbp ) movq - 1 3 9 2 (% rbp ), % rax movq - 1 3 8 4 (% rbp ), % rdx movq % rax , - 1 4 2 4 (% rbp ) movq % rdx , - 1 4 1 6 (% rbp ) movq - 1 3 7 6 (% rbp ), % rax movq - 1 3 6 8 (% rbp ), % rdx movq % rax , - 1 4 0 8 (% rbp ) movq % rdx , - 1 4 0 0 (% rbp ) movq - 1 4 2 4 (% rbp ), % rdx leaq - 4 1 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 4 0 0 (% rbp ) pushq - 1 4 0 8 (% rbp ) pushq - 1 4 1 6 (% rbp ) movq % rdx , % rsi movq % rax , % rdi call go . leetcode . findOrder addq $ 3 2 , % rsp leaq go . leetcode .. go . leetcode . para 2 1 0 .. d (% rip ), % rax movq % rax , - 1 4 8 8 (% rbp ) leaq go . leetcode .. go . leetcode . para 2 1 0 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) movq - 1 4 2 4 (% rbp ), % rax movq - 1 4 1 6 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 1 4 0 8 (% rbp ), % rax movq - 1 4 0 0 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 1 2 jmp . L 1 9 . L 1 1 : . LBE 1 8 : . LBB 2 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : . LBE 2 3 : . LBB 2 4 : . LBB 1 9 : movq - 3 9 2 (% rbp ), % rcx movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 1 9 : jmp . L 1 4 . L 1 9 : . LBB 2 0 : movq - 3 9 2 (% rbp ), % rax leaq - 3 8 4 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 2 1 0 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 4 : . LBE 2 0 : movq - 3 9 2 (% rbp ), % rax movq % rax , - 1 4 8 0 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 1 4 7 2 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 5 . LBB 2 1 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 1 : jmp . L 1 6 . L 1 5 : . LBB 2 2 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 6 : . LBE 2 2 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 1 4 6 4 (% rbp ) movdqa - 1 4 8 8 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 1 4 7 2 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 2 4 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) . LBE 2 4 : . LBE 1 5 : . LBB 2 5 : addq $ 1 , % rbx . L 1 0 : . LBE 2 5 : cmpq - 1 4 5 6 (% rbp ), % rbx jl . L 2 1 . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 2 5 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 6 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 1 6 movl $ 2 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 6 : ret . L 1 1 6 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 0 0 , % rsp movq % rdi , - 2 0 0 (% rbp ) movq % rsi , - 2 0 8 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) . LBB 7 4 : movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) movq - 2 0 8 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) movq % rbx , - 1 4 4 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) . LBB 7 5 : movq $ 2 , - 2 4 (% rbp ) . LBB 7 6 : jmp . L 7 6 . L 1 1 5 : . LBB 7 7 : nop . LBE 7 7 : . LBB 7 8 : . LBB 7 9 : movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 7 7 cmpq % rax , - 2 4 (% rbp ) jl . L 1 0 4 . L 7 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 4 : movq - 1 6 0 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax testq % rax , % rax jne . L 7 9 . LBB 8 0 : movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 8 0 cmpq % rax , - 2 4 (% rbp ) jl . L 1 0 5 . L 8 0 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 5 : movq - 1 6 0 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rax , (% rdx ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 8 2 . LBB 8 1 : movq - 9 6 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) . LBE 8 1 : jmp . L 8 3 . L 8 2 : . LBB 8 2 : movq - 9 6 (% rbp ), % rcx movq - 8 0 (% rbp ), % rdx movq % rcx , - 1 9 2 (% rbp ) movq % rax , - 1 8 4 (% rbp ) movq % rdx , - 1 7 6 (% rbp ) . L 8 3 : . LBE 8 2 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rax , (% rdx ) . L 7 9 : . LBE 8 0 : . LBE 7 9 : . LBB 8 3 : movq $ 0 , - 3 2 (% rbp ) . LBB 8 4 : jmp . L 8 4 . L 1 1 4 : . LBB 8 5 : nop . LBE 8 5 : . LBB 8 6 : movq - 1 8 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 8 5 cmpq % rax , - 3 2 (% rbp ) jl . L 1 0 6 . L 8 5 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 6 : movq - 1 9 2 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax imulq - 2 4 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx testq % rax , % rax js . L 8 7 cmpq % rdx , % rax jl . L 1 0 7 . L 8 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 0 7 : movq - 1 8 4 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 8 9 cmpq % rdx , - 3 2 (% rbp ) jl . L 1 0 8 . L 8 9 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 0 8 : movq - 1 9 2 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rdx , % rcx movq - 1 6 0 (% rbp ), % rdx salq $ 3 , % rax addq % rax , % rdx movq (% rcx ), % rax movq % rax , (% rdx ) . LBE 8 6 : . LBB 8 7 : addq $ 1 , - 3 2 (% rbp ) . L 8 4 : . LBE 8 7 : . LBB 8 8 : . LBB 8 9 : movq - 1 8 4 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) setl % al testb % al , % al je . L 9 1 . LBB 9 0 : movq - 1 8 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 9 2 cmpq % rax , - 3 2 (% rbp ) jl . L 1 0 9 . L 9 2 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 9 : movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 9 4 cmpq % rax , - 2 4 (% rbp ) jl . L 1 1 0 . L 9 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 1 0 : movq - 1 9 2 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 1 6 0 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setle % al . L 9 1 : . LBE 9 0 : . LBE 8 9 : testb % al , % al je . L 9 6 . LBB 9 1 : movq - 1 8 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 9 7 cmpq % rax , - 3 2 (% rbp ) jl . L 1 1 1 . L 9 7 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 1 1 : movq - 1 9 2 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax imulq - 2 4 (% rbp ), % rax cmpq % rax , - 2 0 8 (% rbp ) setge % al . L 9 6 : . LBE 9 1 : . LBE 8 8 : testb % al , % al jne . L 1 1 4 . LBE 8 4 : . LBE 8 3 : . LBE 7 8 : . LBB 9 2 : addq $ 1 , - 2 4 (% rbp ) . L 7 6 : . LBE 9 2 : movq - 2 4 (% rbp ), % rax cmpq - 2 0 8 (% rbp ), % rax jle . L 1 1 5 . LBE 7 6 : . LBE 7 5 : . LBB 9 3 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 2 0 0 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 9 3 : . LBE 7 4 : movq - 2 0 0 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 1 : leaq - 1 3 8 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 6 movl $ 1 3 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 2 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 3 3 6 , % rsp movq % rdi , - 1 0 3 2 (% rbp ) leaq int .. d (% rip ), % rcx leaq go .. C 4 2 (% rip ), % rbx movl $ 0 , % r 8 d movl $ 0 , % r 9 d leaq int .. d (% rip ), % rax leaq go .. C 4 3 (% rip ), % rdx movq % rcx , - 9 4 4 (% rbp ) movq % rbx , - 9 3 6 (% rbp ) movq % r 8 , - 9 2 8 (% rbp ) movq % r 9 , - 9 2 0 (% rbp ) movq % rax , - 9 1 2 (% rbp ) movq % rdx , - 9 0 4 (% rbp ) leaq - 9 4 4 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 3 , - 1 3 6 (% rbp ) movq $ 3 , - 1 2 8 (% rbp ) subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) call go . leetcode . newTree addq $ 3 2 , % rsp movq % rax , - 1 0 4 0 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 1 3 7 6 (% rbp ) leaq go .. C 4 4 (% rip ), % rdi movq % rdi , - 1 3 6 8 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq go .. C 4 5 (% rip ), % r 1 5 movq $ 0 , - 1 3 6 0 (% rbp ) movq $ 0 , - 1 3 5 2 (% rbp ) leaq int .. d (% rip ), % r 1 2 leaq go .. C 4 6 (% rip ), % r 1 3 movdqa - 1 3 7 6 (% rbp ), % xmm 0 movups % xmm 0 , - 8 9 6 (% rbp ) movq % r 1 4 , - 8 8 0 (% rbp ) movq % r 1 5 , - 8 7 2 (% rbp ) movdqa - 1 3 6 0 (% rbp ), % xmm 1 movups % xmm 1 , - 8 6 4 (% rbp ) movq % r 1 2 , - 8 4 8 (% rbp ) movq % r 1 3 , - 8 4 0 (% rbp ) leaq - 8 9 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 4 , - 1 0 4 (% rbp ) movq $ 4 , - 9 6 (% rbp ) subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) call go . leetcode . newTree addq $ 3 2 , % rsp movq % rax , % rbx leaq int .. d (% rip ), % rax movq % rax , - 1 3 4 4 (% rbp ) leaq go .. C 4 7 (% rip ), % rdi movq % rdi , - 1 3 3 6 (% rbp ) movq % rax , - 1 3 2 8 (% rbp ) leaq go .. C 4 8 (% rip ), % rdi movq % rdi , - 1 3 2 0 (% rbp ) movq % rax , - 1 3 1 2 (% rbp ) leaq go .. C 4 9 (% rip ), % rax movq % rax , - 1 3 0 4 (% rbp ) leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 2 4 (% rbp ) movdqa - 1 3 4 4 (% rbp ), % xmm 2 movups % xmm 2 , - 8 1 6 (% rbp ) movdqa - 1 3 2 8 (% rbp ), % xmm 3 movups % xmm 3 , - 8 0 0 (% rbp ) movdqa - 1 3 1 2 (% rbp ), % xmm 4 movups % xmm 4 , - 7 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 2 . LBB 1 7 : movq - 8 2 4 (% rbp ), % rcx movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 1 7 : jmp . L 1 3 . L 1 2 : . LBB 1 8 : movq - 8 2 4 (% rbp ), % rcx leaq - 8 1 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 3 : . LBE 1 8 : movq - 8 2 4 (% rbp ), % rax movq % rax , - 7 6 8 (% rbp ) movq $ 3 , - 7 6 0 (% rbp ) movq $ 3 , - 7 5 2 (% rbp ) movl $ 1 , % r 1 3 d movl $ 2 , % r 1 2 d leaq int .. d (% rip ), % rax movq % rax , - 1 2 9 6 (% rbp ) leaq go .. C 5 1 (% rip ), % rsi movq % rsi , - 1 2 8 8 (% rbp ) movq % rax , - 1 2 8 0 (% rbp ) leaq go .. C 5 2 (% rip ), % rdi movq % rdi , - 1 2 7 2 (% rbp ) movq % rax , - 1 2 6 4 (% rbp ) leaq go .. C 5 3 (% rip ), % rsi movq % rsi , - 1 2 5 6 (% rbp ) movq $ 0 , - 1 2 4 8 (% rbp ) movq $ 0 , - 1 2 4 0 (% rbp ) movq % rax , - 1 2 3 2 (% rbp ) leaq go .. C 5 4 (% rip ), % rdi movq % rdi , - 1 2 2 4 (% rbp ) movq $ 0 , - 1 2 1 6 (% rbp ) movq $ 0 , - 1 2 0 8 (% rbp ) movq $ 0 , - 1 2 0 0 (% rbp ) movq $ 0 , - 1 1 9 2 (% rbp ) movq % rax , - 1 1 8 4 (% rbp ) leaq go .. C 5 5 (% rip ), % rax movq % rax , - 1 1 7 6 (% rbp ) leaq type ... 6 8 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 4 4 (% rbp ) movdqa - 1 2 9 6 (% rbp ), % xmm 5 movups % xmm 5 , - 7 3 6 (% rbp ) movdqa - 1 2 8 0 (% rbp ), % xmm 6 movups % xmm 6 , - 7 2 0 (% rbp ) movdqa - 1 2 6 4 (% rbp ), % xmm 7 movups % xmm 7 , - 7 0 4 (% rbp ) movdqa - 1 2 4 8 (% rbp ), % xmm 0 movups % xmm 0 , - 6 8 8 (% rbp ) movdqa - 1 2 3 2 (% rbp ), % xmm 1 movups % xmm 1 , - 6 7 2 (% rbp ) movdqa - 1 2 1 6 (% rbp ), % xmm 2 movups % xmm 2 , - 6 5 6 (% rbp ) movdqa - 1 2 0 0 (% rbp ), % xmm 3 movups % xmm 3 , - 6 4 0 (% rbp ) movdqa - 1 1 8 4 (% rbp ), % xmm 4 movups % xmm 4 , - 6 2 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 4 . LBB 1 9 : movq - 7 4 4 (% rbp ), % rcx movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , 6 4 (% rcx ) movq % rdx , 7 2 (% rcx ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , 8 0 (% rcx ) movq % rdx , 8 8 (% rcx ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , 9 6 (% rcx ) movq % rdx , 1 0 4 (% rcx ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , 1 1 2 (% rcx ) movq % rdx , 1 2 0 (% rcx ) . LBE 1 9 : jmp . L 1 5 . L 1 4 : . LBB 2 0 : movq - 7 4 4 (% rbp ), % rcx leaq - 7 3 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 8 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 5 : . LBE 2 0 : movq - 7 4 4 (% rbp ), % rax movq % rax , - 6 0 8 (% rbp ) movq $ 8 , - 6 0 0 (% rbp ) movq $ 8 , - 5 9 2 (% rbp ) movl $ 1 , % esi movl $ 3 , % ecx movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq % r 1 3 , - 5 5 2 (% rbp ) movq % r 1 2 , - 5 4 4 (% rbp ) movq - 1 0 4 0 (% rbp ), % rax movq % rax , - 5 3 6 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) movq % rsi , - 5 0 4 (% rbp ) movq % rcx , - 4 9 6 (% rbp ) movq % rbx , - 4 8 8 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) leaq - 4 8 0 (% rbp ), % rax movq % rax , - 9 7 6 (% rbp ) movq $ 2 , - 9 6 8 (% rbp ) movq $ 2 , - 9 6 0 (% rbp ) . LBB 2 1 : movq $ 0 , - 1 0 2 4 (% rbp ) movq $ 0 , - 1 0 1 6 (% rbp ) movq $ 0 , - 1 0 0 8 (% rbp ) movq $ 0 , - 1 0 0 0 (% rbp ) movq $ 0 , - 9 9 2 (% rbp ) movq $ 0 , - 9 8 4 (% rbp ) . LBB 2 2 : . LBB 2 3 : . LBB 2 4 : movq - 9 7 6 (% rbp ), % rax movq - 9 6 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 9 6 0 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 2 8 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 2 4 : jmp . L 1 6 . L 2 5 : . LBB 2 5 : nop . LBE 2 5 : . LBB 2 6 : . LBB 2 7 : movq - 3 2 8 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 1 7 cmpq % rax , % r 1 2 jge . L 1 7 movq - 3 3 6 (% rbp ), % rcx movq % r 1 2 , % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 4 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) . LBE 2 7 : . LBB 2 8 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 0 2 4 (% rbp ) movq % rdx , - 1 0 1 6 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 0 0 8 (% rbp ) movq % rdx , - 1 0 0 0 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 9 9 2 (% rbp ) movq % rdx , - 9 8 4 (% rbp ) . LBE 2 8 : . LBB 2 9 : subq $ 8 , % rsp pushq - 1 0 0 8 (% rbp ) pushq - 1 0 1 6 (% rbp ) pushq - 1 0 2 4 (% rbp ) call go . leetcode . newTree addq $ 3 2 , % rsp movq % rax , % rcx movq - 9 9 2 (% rbp ), % rdx movq - 1 0 0 0 (% rbp ), % rax movq % rax , % rsi movq % rcx , % rdi call go . leetcode . trimBST movq % rax , - 5 6 (% rbp ) . LBB 3 0 : leaq type ... 1 go . leetcode . TreeNode (% rip ), % rsi movq % rsi , - 1 0 8 8 (% rbp ) movq - 9 8 4 (% rbp ), % rax movq % rax , - 1 0 8 0 (% rbp ) movq % rsi , - 1 0 7 2 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 1 0 6 4 (% rbp ) movq - 1 0 7 2 (% rbp ), % rax movq - 1 0 6 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % rax movq - 1 0 8 8 (% rbp ), % rdx movq - 1 0 8 0 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT xorl $ 1 , % eax testb % al , % al jne . L 1 8 jmp . L 1 9 . L 1 7 : . LBE 3 0 : . LBE 2 9 : . LBB 3 5 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : . LBE 3 5 : . LBB 3 6 : . LBB 3 4 : . LBB 3 1 : subq $ 8 , % rsp pushq - 1 0 0 8 (% rbp ) pushq - 1 0 1 6 (% rbp ) pushq - 1 0 2 4 (% rbp ) call go . leetcode . newTree addq $ 3 2 , % rsp leaq type ... 1 go . leetcode . TreeNode (% rip ), % rbx movq % rbx , - 1 1 6 8 (% rbp ) movq % rax , - 1 1 6 0 (% rbp ) leaq int .. d (% rip ), % r 1 5 movq % r 1 5 , - 1 1 5 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq - 2 4 8 (% rbp ), % rdx movq - 1 0 0 0 (% rbp ), % rax movq % rax , (% rdx ) movq - 2 4 8 (% rbp ), % rax movq % rax , - 1 1 4 4 (% rbp ) movq % r 1 5 , - 1 1 3 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 0 (% rbp ) movq - 2 4 0 (% rbp ), % rdx movq - 9 9 2 (% rbp ), % rax movq % rax , (% rdx ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 1 2 8 (% rbp ) movq % rbx , - 1 1 2 0 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 1 1 1 2 (% rbp ) movq % rbx , - 1 1 0 4 (% rbp ) movq - 9 8 4 (% rbp ), % rax movq % rax , - 1 0 9 6 (% rbp ) leaq type ... 6 5 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movdqa - 1 1 6 8 (% rbp ), % xmm 5 movups % xmm 5 , - 2 2 4 (% rbp ) movdqa - 1 1 5 2 (% rbp ), % xmm 6 movups % xmm 6 , - 2 0 8 (% rbp ) movdqa - 1 1 3 6 (% rbp ), % xmm 7 movups % xmm 7 , - 1 9 2 (% rbp ) movdqa - 1 1 2 0 (% rbp ), % xmm 0 movups % xmm 0 , - 1 7 6 (% rbp ) movdqa - 1 1 0 4 (% rbp ), % xmm 1 movups % xmm 1 , - 1 6 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 0 . LBB 3 2 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , 6 4 (% rcx ) movq % rdx , 7 2 (% rcx ) . LBE 3 2 : jmp . L 2 1 . L 2 0 : . LBB 3 3 : movq - 2 3 2 (% rbp ), % rcx leaq - 2 2 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 5 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 1 : . LBE 3 3 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 5 , - 7 2 (% rbp ) movq $ 5 , - 6 4 (% rbp ) leaq . LC 2 4 (% rip ), % rax movq % rax , - 1 0 5 6 (% rbp ) movq $ 3 8 , - 1 0 4 8 (% rbp ) movq - 1 0 5 6 (% rbp ), % rax movq - 1 0 4 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 1 0 3 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 1 9 : . LBE 3 1 : . LBE 3 4 : . LBE 3 6 : . LBE 2 6 : . LBB 3 7 : addq $ 1 , % r 1 2 . L 1 6 : . LBE 3 7 : cmpq % r 1 3 , % r 1 2 jl . L 2 5 . LBE 2 3 : . LBE 2 2 : . LBE 2 1 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 7 movl $ 2 0 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 3 : ret . L 3 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 6 8 , % rsp movq % rdi , - 1 8 4 (% rbp ) movq % rsi , - 1 9 2 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) . LBB 3 1 : call runtime . makemap_small @ PLT movq % rax , - 4 0 (% rbp ) . LBB 3 2 : movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 3 3 : . LBB 3 4 : . LBB 3 5 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 3 5 : jmp . L 2 6 . L 3 6 : . LBB 3 6 : nop . LBE 3 6 : . LBB 3 7 : . LBB 3 8 : movq - 1 3 6 (% rbp ), % rax testq % rbx , % rbx js . L 2 7 cmpq % rax , % rbx jge . L 2 7 movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 3 8 : . LBB 3 9 : movq % rbx , - 4 8 (% rbp ) movq % rax , - 5 6 (% rbp ) . LBE 3 9 : . LBB 4 0 : movq - 1 9 2 (% rbp ), % rax subq - 5 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBB 4 1 : movq $ 0 , - 7 2 (% rbp ) movb $ 0 , - 7 3 (% rbp ) . LBB 4 2 : movq - 6 4 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 7 2 (% rbp ) movb % dl , - 7 3 (% rbp ) . LBE 4 2 : cmpb $ 0 , - 7 3 (% rbp ) jne . L 2 8 jmp . L 3 4 . L 2 7 : . LBE 4 1 : . LBE 4 0 : . LBB 4 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : . LBE 4 7 : . LBB 4 8 : . LBB 4 5 : . LBB 4 3 : . LBB 4 4 : leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 (% rbp ) movq - 1 0 4 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rdx , (% rax ) movq - 4 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 2 5 . L 3 4 : . LBE 4 4 : . LBE 4 3 : . LBE 4 5 : . LBB 4 6 : movq - 5 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 4 8 (% rbp ), % r 1 2 leaq - 9 6 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 2 , (% rax ) . LBE 4 6 : . LBE 4 8 : . LBE 3 7 : . LBB 4 9 : addq $ 1 , % rbx . L 2 6 : . LBE 4 9 : cmpq % r 1 3 , % rbx jl . L 3 6 . LBE 3 4 : . LBE 3 3 : . LBE 3 2 : . LBB 5 0 : leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq - 8 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 2 5 : . LBE 5 0 : . LBE 3 1 : movq - 1 8 4 (% rbp ), % rax addq $ 1 6 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 8 movl $ 1 0 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp subq $ 9 6 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 8 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 1 6 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 2 4 (% rbp ) . LBB 3 : movq $ 0 , - 4 0 (% rbp ) . LBB 4 : movq 3 2 (% rbp ), % rax testq % rax , % rax jg . L 5 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 5 : movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 3 , % rax addq % rdx , % rax movq % rax , - 9 6 (% rbp ) movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 8 0 (% rbp ) . LBB 5 : . LBB 6 : movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rsi movl $ 0 , % eax . LBE 6 : jmp . L 6 . L 1 7 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 7 cmpq % rdx , % rax jge . L 7 movq - 6 4 (% rbp ), % rdx movq % rax , % rcx salq $ 3 , % rcx addq % rcx , % rdx movq (% rdx ), % rdx . LBE 9 : . LBB 1 0 : movq % rdx , - 4 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : cmpq $ 0 , - 4 0 (% rbp ) js . L 8 jmp . L 9 . L 7 : . LBE 1 2 : . LBE 1 1 : . LBB 2 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 : . LBE 2 2 : . LBB 2 3 : . LBB 1 5 : . LBB 1 3 : . LBB 1 4 : movq - 2 4 (% rbp ), % rcx movq - 1 6 (% rbp ), % rdx movq % rcx , - 1 6 (% rbp ) movq % rdx , - 2 4 (% rbp ) . L 9 : . LBE 1 4 : . LBE 1 3 : . LBE 1 5 : movq - 1 6 (% rbp ), % rdx imulq - 4 0 (% rbp ), % rdx movq % rdx , - 1 6 (% rbp ) movq - 2 4 (% rbp ), % rdx imulq - 4 0 (% rbp ), % rdx movq % rdx , - 2 4 (% rbp ) . LBB 1 6 : movq - 4 0 (% rbp ), % rdx cmpq - 1 6 (% rbp ), % rdx jge . L 1 0 . LBB 1 7 : movq - 4 0 (% rbp ), % rdx movq % rdx , - 1 6 (% rbp ) . L 1 0 : . LBE 1 7 : . LBE 1 6 : . LBB 1 8 : movq - 4 0 (% rbp ), % rdx cmpq - 2 4 (% rbp ), % rdx jle . L 1 1 . LBB 1 9 : movq - 4 0 (% rbp ), % rdx movq % rdx , - 2 4 (% rbp ) . L 1 1 : . LBE 1 9 : . LBE 1 8 : . LBB 2 0 : movq - 2 4 (% rbp ), % rdx cmpq - 8 (% rbp ), % rdx jle . L 1 2 . LBB 2 1 : movq - 2 4 (% rbp ), % rdx movq % rdx , - 8 (% rbp ) . L 1 2 : . LBE 2 1 : . LBE 2 0 : . LBE 2 3 : . LBE 8 : . LBB 2 4 : addq $ 1 , % rax . L 6 : . LBE 2 4 : cmpq % rsi , % rax jl . L 1 7 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 2 5 : movq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . LBE 2 5 : . LBE 2 : leave ret
. LFB 0 : leaq - 5 8 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 movl $ 5 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 3 6 , % rsp movq 8 + os . Args (% rip ), % rcx cmpq $ 1 , % rcx jg . L 2 movq % rcx , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq os . Args (% rip ), % rcx movq 2 4 (% rcx ), % rbx movq 1 6 (% rcx ), % rcx movq % rcx , - 4 4 8 (% rbp ) movq % rbx , - 4 4 0 (% rbp ) movq 8 + os . Args (% rip ), % rcx cmpq $ 2 , % rcx jg . L 3 movq % rcx , % rsi movl $ 2 , % edi call runtime . goPanicIndex @ PLT . L 3 : movq os . Args (% rip ), % rcx movq 4 0 (% rcx ), % rbx movq 3 2 (% rcx ), % rcx movq % rcx , - 4 6 4 (% rbp ) movq % rbx , - 4 5 6 (% rbp ) leaq . LC 5 (% rip ), % rax movl $ 1 0 , % edx leaq - 2 0 8 (% rbp ), % rdi movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rsi movq % rax , % r 8 movq % rdx , % r 9 movq % r 8 , % r 9 movq % rdx , % rax movq % rsi , % r 8 movq % r 9 , % rsi movq % rax , % rdx call time . Parse @ PLT movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq - 4 0 8 (% rbp ), % rax movq - 4 0 0 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) leaq . LC 5 (% rip ), % r 1 2 movl $ 1 0 , % r 1 3 d leaq - 1 6 0 (% rbp ), % rax movq - 4 6 4 (% rbp ), % rdx movq - 4 5 6 (% rbp ), % r 8 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdi movq % rdx , % rcx movq % rdi , % rdx movq % rax , % rdi call time . Parse @ PLT movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq - 3 2 8 (% rbp ), % rax movq - 3 2 0 (% rbp ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) leaq - 5 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 4 8 0 (% rbp ) pushq - 4 8 8 (% rbp ) pushq - 4 9 6 (% rbp ) movq % rax , % rdi call time . Time . Sub @ PLT addq $ 3 2 , % rsp movq % rax , - 5 6 (% rbp ) leaq string .. d (% rip ), % r 1 4 leaq go .. C 6 (% rip ), % r 1 5 leaq int .. d (% rip ), % rax movq % rax , - 5 7 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq - 2 4 8 (% rbp ), % rsi movq - 5 6 (% rbp ), % rcx movabsq $ 7 5 1 2 0 0 3 5 5 6 9 0 8 0 2 6 0 8 3 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 4 5 , % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , (% rsi ) movq - 2 4 8 (% rbp ), % rax movq % rax , - 5 6 8 (% rbp ) movq % r 1 4 , - 2 4 0 (% rbp ) movq % r 1 5 , - 2 3 2 (% rbp ) movdqa - 5 7 6 (% rbp ), % xmm 0 movups % xmm 0 , - 2 2 4 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 2 , - 1 0 4 (% rbp ) movq $ 2 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 5 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 5 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movb $ 0 , - 9 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 1 , - 2 4 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movb $ 0 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : . LBB 7 : cmpq $ 2 , - 2 4 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 4 . LBB 8 : cmpq $ 3 , - 2 4 (% rbp ) sete % al . L 4 : . LBE 8 : . LBE 7 : testb % al , % al je . L 5 . LBB 9 : . LBB 1 0 : movb $ 1 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax jmp . L 3 . L 5 : . LBE 1 0 : . LBE 9 : . LBE 6 : . LBB 1 1 : movq $ 2 , - 8 (% rbp ) . LBB 1 2 : jmp . L 6 . L 1 4 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : . LBB 1 5 : cmpq $- 1 , - 8 (% rbp ) je . L 7 cmpq $ 0 , - 8 (% rbp ) jne . L 8 call runtime . panicdivide @ PLT . L 8 : movq - 2 4 (% rbp ), % rax cqto idivq - 8 (% rbp ) movq % rdx , % rax testq % rax , % rax sete % al jmp . L 9 . L 7 : movl $ 1 , % eax . L 9 : testb % al , % al je . L 1 0 . LBB 1 6 : . LBB 1 7 : movb $ 0 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax jmp . L 3 . L 1 0 : . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBB 1 8 : addq $ 1 , - 8 (% rbp ) . L 6 : . LBE 1 8 : pxor % xmm 1 , % xmm 1 cvtsi 2 sdq - 2 4 (% rbp ), % xmm 1 movq % xmm 1 , % rax movq % rax , % xmm 0 call math . Sqrt @ PLT cvttsd 2 siq % xmm 0 , % rax cmpq % rax , - 8 (% rbp ) jle . L 1 4 . LBE 1 2 : . LBE 1 1 : . LBB 1 9 : movb $ 1 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax . L 3 : . LBE 1 9 : . LBE 2 : leave ret
. LFB 0 : leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 9 movl $ 2 8 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 5 6 , % rsp movq % rdi , - 2 6 4 (% rbp ) movq % rsi , - 2 7 2 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) . LBB 2 : leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) movq $ 0 , - 2 0 8 (% rbp ) . LBB 3 : cmpq $ 0 , - 2 7 2 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 2 6 4 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : leaq type ... 6 0 x . 7 . 1 go . binary_tree_preorder_traversal . TreeNode (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . LBB 6 : . LBB 7 : jmp . L 4 . L 2 8 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : . LBB 1 1 : jmp . L 5 . L 2 7 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rbx movq - 2 4 (% rbp ), % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 6 . LBB 1 4 : movq - 1 4 4 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) . LBE 1 4 : jmp . L 7 . L 6 : . LBB 1 5 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq % rcx , - 2 2 4 (% rbp ) movq % rax , - 2 1 6 (% rbp ) movq % rdx , - 2 0 8 (% rbp ) . L 7 : . LBE 1 5 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 8 . LBB 1 6 : movq - 1 1 2 (% rbp ), % rsi leaq - 4 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 1 go . binary_tree_preorder_traversal . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) . LBE 1 6 : jmp . L 9 . L 8 : . LBB 1 7 : movq - 1 1 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rcx , - 2 5 6 (% rbp ) movq % rax , - 2 4 8 (% rbp ) movq % rdx , - 2 4 0 (% rbp ) . L 9 : . LBE 1 7 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 0 . LBB 1 8 : movq - 2 4 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 1 . L 1 0 : . LBE 1 8 : . LBB 1 9 : movq - 2 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 1 : . LBE 1 9 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 2 4 (% rbp ) . L 5 : . LBE 1 3 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 2 7 . LBE 1 1 : . LBE 1 0 : . LBB 2 0 : movq - 2 4 8 (% rbp ), % rax testq % rax , % rax je . L 4 . LBB 2 1 : movq - 2 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 2 4 8 (% rbp ), % rdx testq % rax , % rax js . L 1 4 cmpq % rdx , % rax jl . L 2 4 . L 1 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : movq - 2 5 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 8 (% rbp ), % rax leaq - 1 (% rax ), % rdi movq - 2 4 0 (% rbp ), % rax testq % rdi , % rdi js . L 1 6 cmpq % rax , % rdi jg . L 1 6 testq % rdi , % rdi jns . L 1 7 jmp . L 2 5 . L 1 6 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 2 5 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 7 : movq - 2 5 6 (% rbp ), % rdx movq - 2 4 0 (% rbp ), % rax movq % rdx , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq % rax , - 2 4 0 (% rbp ) movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 2 4 (% rbp ) . L 4 : . LBE 2 1 : . LBE 2 0 : . LBE 9 : . LBB 2 2 : movq - 2 4 8 (% rbp ), % rax testq % rax , % rax setne % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 9 . LBB 2 3 : cmpq $ 0 , - 2 4 (% rbp ) setne % al . L 1 9 : . LBE 2 3 : . LBE 2 2 : testb % al , % al jne . L 2 8 . LBE 7 : . LBE 6 : . LBB 2 4 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 2 6 4 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 2 4 : . LBE 2 : movq - 2 6 4 (% rbp ), % rax addq $ 2 5 6 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 7 movl $ 2 4 8 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 1 6 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : . LBB 3 : . LBB 4 : movq 2 4 (% rbp ), % rax testq % rax , % rax sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 . LBB 5 : movq 4 8 (% rbp ), % rax testq % rax , % rax sete % al . L 2 : . LBE 5 : . LBE 4 : testb % al , % al je . L 3 . LBB 6 : . LBB 7 : movq $ 0 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 4 . L 3 : . LBE 7 : . LBE 6 : . LBE 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 5 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax subq $ 8 , % rsp pushq 5 6 (% rbp ) pushq 4 8 (% rbp ) pushq 4 0 (% rbp ) movq % rax , % rdi call go . Solution . search addq $ 3 2 , % rsp movq % rax , - 4 8 (% rbp ) . LBB 8 : movq - 4 8 (% rbp ), % rax leaq 1 (% rax ), % rsi movq % rsi , - 2 3 2 (% rbp ) movq 3 2 (% rbp ), % rax testq % rsi , % rsi js . L 6 cmpq % rax , % rsi jg . L 6 testq % rsi , % rsi jg . L 7 jmp . L 2 3 . L 6 : movq % rax , % rsi movq - 2 3 2 (% rbp ), % rdi call runtime . goPanicSliceAcap @ PLT . L 2 3 : movq - 2 3 2 (% rbp ), % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 7 : movq - 4 8 (% rbp ), % rax leaq 1 (% rax ), % rdi movq 5 6 (% rbp ), % rax testq % rdi , % rdi js . L 9 cmpq % rax , % rdi jg . L 9 testq % rdi , % rdi jns . L 1 0 jmp . L 2 4 . L 9 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 2 4 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 0 : movq 4 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq % rdi , - 1 6 8 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 3 , % rax addq % rdx , % rax movq % rax , - 1 4 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 3 6 (% rbp ) movq 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 2 8 (% rbp ) pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) call go . Solution . buildTree addq $ 4 8 , % rsp movq % rax , % r 1 2 movq - 4 8 (% rbp ), % rax addq $ 1 , % rax movq 3 2 (% rbp ), % rdx testq % rax , % rax js . L 1 2 cmpq % rdx , % rax jle . L 2 5 . L 1 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 2 5 : movq - 4 8 (% rbp ), % rdx addq $ 1 , % rdx movq 5 6 (% rbp ), % rcx testq % rdx , % rdx js . L 1 4 cmpq % rcx , % rdx jle . L 2 6 . L 1 4 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 2 6 : movq 4 0 (% rbp ), % rsi movq 5 6 (% rbp ), % rcx cmpq % rcx , % rdx je . L 1 6 movq % rdx , % rcx salq $ 3 , % rcx jmp . L 1 7 . L 1 6 : movl $ 0 , % ecx . L 1 7 : addq % rsi , % rcx movq % rcx , - 1 1 2 (% rbp ) movq 4 8 (% rbp ), % rcx subq % rdx , % rcx movq % rcx , - 1 0 4 (% rbp ) movq 5 6 (% rbp ), % rcx subq % rdx , % rcx movq % rcx , - 9 6 (% rbp ) movq 1 6 (% rbp ), % rcx movq 3 2 (% rbp ), % rdx cmpq % rdx , % rax je . L 1 8 movq % rax , % rdx salq $ 3 , % rdx jmp . L 1 9 . L 1 8 : movl $ 0 , % edx . L 1 9 : addq % rcx , % rdx movq % rdx , - 8 0 (% rbp ) movq 2 4 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 6 4 (% rbp ) pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) call go . Solution . buildTree addq $ 4 8 , % rsp movq % rax , % rbx movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 0 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 0 : movq 1 6 (% rbp ), % rax movq (% rax ), % r 1 3 leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq % r 1 3 , - 2 0 8 (% rbp ) movq % r 1 2 , - 2 0 0 (% rbp ) movq % rbx , - 1 9 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 1 . LBB 9 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 9 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 9 : jmp . L 2 2 . L 2 1 : . LBB 1 0 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 2 : . LBE 1 0 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 4 : . LBE 8 : . LBE 2 : leaq - 2 4 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 4 movl $ 3 4 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 9 6 , % rsp movq % rdi , - 3 2 8 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) movq $ 0 , - 2 7 2 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 6 4 (% rbp ) . LBB 3 : movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 3 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 4 8 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 2 5 6 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : leaq - 1 2 8 (% rbp ), % rax movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call go . problem 0 8 1 1 . parse movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movb $ 1 , - 4 9 (% rbp ) . LBB 1 2 : . LBB 1 3 : jmp . L 4 . L 3 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 2 0 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : . LBE 2 0 : . LBB 2 1 : . LBB 1 9 : . LBB 1 8 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 3 2 0 (% rbp ), % r 1 2 movq - 3 1 2 (% rbp ), % r 1 3 movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq (% rax ), % rdx movq - 7 2 (% rbp ), % rax leaq (% rdx ,% rax ), % r 1 5 movq - 6 4 (% rbp ), % rax movq % r 1 2 , % rdx movq % r 1 3 , % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq % r 1 5 , (% rax ) . LBE 1 6 : . LBB 1 7 : leaq - 9 6 (% rbp ), % rax movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call go . problem 0 8 1 1 . cut movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movzbl - 1 7 6 (% rbp ), % ecx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movb % cl , - 4 9 (% rbp ) . L 4 : . LBE 1 7 : . LBE 1 5 : cmpb $ 0 , - 4 9 (% rbp ) jne . L 1 2 . LBE 1 8 : . LBE 1 9 : . LBE 2 1 : . LBE 8 : . LBB 2 2 : addq $ 1 , % rbx . L 2 : . LBE 2 2 : cmpq % r 1 4 , % rbx jl . L 1 3 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 2 3 : leaq - 1 6 0 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call go . problem 0 8 1 1 . getResult movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 3 2 8 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 7 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 3 : . LBE 2 : movq - 3 2 8 (% rbp ), % rax addq $ 2 9 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 7 movl $ 1 2 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 7 : pushq % rbp movq % rsp , % rbp subq $ 1 1 2 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) . LBB 3 : movq $ 0 , - 4 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rcx movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 2 4 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 9 : . LBB 1 0 : movq % rdx , - 4 8 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 4 8 (% rbp ), % rdx cmpq - 8 (% rbp ), % rdx jg . L 4 jmp . L 5 . L 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 5 : . LBB 1 6 : . LBB 1 4 : . LBB 1 3 : movq - 4 8 (% rbp ), % rdx movq % rdx , - 8 (% rbp ) . L 5 : . LBE 1 3 : . LBE 1 4 : . LBE 1 6 : . LBE 8 : . LBB 1 7 : addq $ 1 , % rax . L 2 : . LBE 1 7 : cmpq % rcx , % rax jl . L 2 4 . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 1 6 (% rbp ) . LBB 1 8 : movq $ 0 , - 2 4 (% rbp ) . LBB 1 9 : jmp . L 8 . L 2 6 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : movq $ 0 , - 3 2 (% rbp ) . LBB 2 2 : movq $ 0 , - 5 6 (% rbp ) . LBB 2 3 : . LBB 2 4 : . LBB 2 5 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rsi movl $ 0 , % eax . LBE 2 5 : jmp . L 9 . L 2 5 : . LBB 2 6 : nop . LBE 2 6 : . LBB 2 7 : . LBB 2 8 : movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 1 0 cmpq % rdx , % rax jge . L 1 0 movq - 8 0 (% rbp ), % rdx movq % rax , % rcx salq $ 3 , % rcx addq % rcx , % rdx movq (% rdx ), % rdx . LBE 2 8 : . LBB 2 9 : movq % rdx , - 5 6 (% rbp ) . LBE 2 9 : . LBB 3 0 : . LBB 3 1 : movq - 2 4 (% rbp ), % rdx cmpq $ 6 3 , % rdx jbe . L 1 1 jmp . L 2 1 . L 1 0 : . LBE 3 1 : . LBE 3 0 : . LBB 3 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 1 : . LBE 3 4 : . LBB 3 5 : . LBB 3 3 : movq - 5 6 (% rbp ), % rdi movl % edx , % ecx sarq % cl , % rdi movq % rdi , % rdx andl $ 1 , % edx testq % rdx , % rdx setne % dl jmp . L 1 3 . L 2 1 : movq - 5 6 (% rbp ), % rdx shrq $ 6 3 , % rdx cmpq $ 1 , % rdx sete % dl . L 1 3 : testb % dl , % dl je . L 1 4 . LBB 3 2 : addq $ 1 , - 3 2 (% rbp ) . L 1 4 : . LBE 3 2 : . LBE 3 3 : . LBE 3 5 : . LBE 2 7 : . LBB 3 6 : addq $ 1 , % rax . L 9 : . LBE 3 6 : cmpq % rsi , % rax jl . L 2 5 . LBE 2 4 : . LBE 2 3 : . LBE 2 2 : movq 2 4 (% rbp ), % rax subq - 3 2 (% rbp ), % rax imulq - 3 2 (% rbp ), % rax addq % rax , - 1 6 (% rbp ) sarq - 8 (% rbp ) . LBE 2 1 : . LBB 3 7 : addq $ 1 , - 2 4 (% rbp ) . L 8 : . LBE 3 7 : cmpq $ 0 , - 8 (% rbp ) jg . L 2 6 . LBE 1 9 : . LBE 1 8 : . LBB 3 8 : movq - 1 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 3 8 : . LBE 2 : leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 8 5 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 8 : ret . L 8 5 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 6 9 : . LBB 7 0 : movq - 4 0 (% rbp ), % rax movq 3 2 (% rax ), % rsi movq - 4 0 (% rbp ), % rcx movq 2 4 (% rcx ), % rax movq 3 2 (% rcx ), % rdx movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq 4 0 (% rcx ), % rax movq % rax , - 1 6 (% rbp ) leaq - 1 (% rsi ), % rax movq - 2 4 (% rbp ), % rdx testq % rax , % rax js . L 8 2 cmpq % rdx , % rax jge . L 8 2 movq - 3 2 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 8 4 . L 8 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 4 : . LBE 7 0 : . LBE 6 9 : leave ret
. LFB 0 : leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 5 movl $ 2 6 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 3 2 , % rsp movq $ 0 , - 4 8 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 5 6 (% rbp ) . LBB 3 : movq $ 0 , - 6 4 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 3 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 4 8 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 2 5 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 6 4 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 6 4 (% rbp ), % rax movq % rax , - 2 3 2 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 3 leaq - 2 3 2 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . LBE 1 2 : . LBE 1 1 : . LBE 8 : . LBB 1 4 : addq $ 1 , % rbx jmp . L 2 . L 3 : . LBE 1 4 : . LBB 1 5 : . LBB 1 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 3 : . LBE 1 5 : cmpq % r 1 2 , % rbx jl . L 1 3 . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 4 0 (% rbp ) . LBB 1 6 : movq $ 0 , - 7 2 (% rbp ) movq $ 0 , - 8 0 (% rbp ) . LBB 1 7 : . LBB 1 8 : . LBB 1 9 : leaq - 2 2 4 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 1 9 : jmp . L 6 . L 1 4 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 2 2 4 (% rbp ), % rax movq (% rax ), % rdx movq - 2 1 6 (% rbp ), % rax movq (% rax ), % rax . LBE 2 2 : . LBB 2 3 : movq % rdx , - 7 2 (% rbp ) movq % rax , - 8 0 (% rbp ) . LBE 2 3 : . LBB 2 4 : movq $ 0 , - 8 8 (% rbp ) movb $ 0 , - 8 9 (% rbp ) . LBB 2 5 : movq - 7 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 1 2 0 (% rbp ) leaq - 1 2 0 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 8 8 (% rbp ) movb % dl , - 8 9 (% rbp ) . LBE 2 5 : . LBB 2 6 : cmpb $ 0 , - 8 9 (% rbp ) je . L 7 . LBB 2 7 : movq - 8 0 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax addq % rdx , % rax movq % rax , - 1 0 4 (% rbp ) . LBB 2 8 : movq - 4 0 (% rbp ), % rax cmpq - 1 0 4 (% rbp ), % rax jge . L 7 . LBB 2 9 : movq - 1 0 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . L 7 : . LBE 2 9 : . LBE 2 8 : . LBE 2 7 : . LBE 2 6 : . LBE 2 4 : . LBE 2 1 : . LBB 3 0 : leaq - 2 2 4 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 6 : . LBE 3 0 : movq - 2 2 4 (% rbp ), % rax testq % rax , % rax jne . L 1 4 . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 3 1 : movq - 4 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax . LBE 3 1 : . LBE 2 : addq $ 2 3 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 5 movl $ 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 0 , % rsp . LBB 2 : movq $ 2 , - 4 0 (% rbp ) . L 1 1 : . LBB 3 : . LBB 4 : movq - 4 0 (% rbp ), % rax addq $ 1 , % rax imulq - 4 0 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , - 6 4 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 5 : movq $ 2 , - 5 6 (% rbp ) . LBB 6 : jmp . L 2 . L 1 4 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : cmpq $- 1 , - 5 6 (% rbp ) je . L 3 cmpq $ 0 , - 5 6 (% rbp ) jne . L 4 call runtime . panicdivide @ PLT . L 4 : movq - 6 4 (% rbp ), % rax cqto idivq - 5 6 (% rbp ) movq % rdx , % rax testq % rax , % rax sete % al jmp . L 5 . L 3 : movl $ 1 , % eax . L 5 : testb % al , % al je . L 6 . LBB 1 0 : addq $ 1 , - 4 8 (% rbp ) . L 6 : . LBE 1 0 : . LBE 9 : . LBE 8 : . LBB 1 1 : addq $ 1 , - 5 6 (% rbp ) . L 2 : . LBE 1 1 : movq - 5 6 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax jle . L 1 4 . LBE 6 : . LBE 5 : . LBB 1 2 : cmpq $ 2 0 0 , - 4 8 (% rbp ) jle . L 9 . LBB 1 3 : call runtime . printlock @ PLT leaq . LC 0 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . printstring @ PLT call runtime . printsp @ PLT movq - 6 4 (% rbp ), % rax movq % rax , % rdi call runtime . printint @ PLT call runtime . printnl @ PLT call runtime . printunlock @ PLT jmp . L 1 3 . L 9 : . LBE 1 3 : . LBE 1 2 : . LBE 4 : . LBB 1 4 : addq $ 1 , - 4 0 (% rbp ) . LBE 1 4 : jmp . L 1 1 . L 1 3 : . LBE 3 : . LBE 2 : addq $ 4 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 3 movl $ 2 1 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 6 8 , % rsp movq % rdi , - 2 0 0 (% rbp ) movq $ 0 , - 7 2 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 9 2 (% rbp ) movq % rbx , - 1 8 4 (% rbp ) movq % rbx , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq 2 4 (% rbp ), % rdx cmpq % rax , % rdx cmovle % rdx , % rax leaq 0 (,% rax , 8 ), % rdx movq 1 6 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memmove @ PLT leaq imt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. sort . IntSlice (% rip ), % r 1 4 leaq sort . IntSlice .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 3 : movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 : jmp . L 3 . L 2 : . LBB 4 : movq - 1 6 8 (% rbp ), % rax leaq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi leaq sort . IntSlice .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 4 : movq - 1 6 8 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call sort . Reverse @ PLT movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call sort . Sort @ PLT movq $ 0 , - 5 6 (% rbp ) . LBB 5 : movq $ 0 , - 8 0 (% rbp ) movq $ 0 , - 8 8 (% rbp ) . LBB 6 : . LBB 7 : . LBB 8 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rcx movl $ 0 , % eax . LBE 8 : jmp . L 4 . L 3 2 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : . LBB 1 1 : movq - 1 2 0 (% rbp ), % rdx testq % rax , % rax js . L 5 cmpq % rdx , % rax jge . L 5 movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 1 1 : . LBB 1 2 : movq % rax , - 8 0 (% rbp ) movq % rdx , - 8 8 (% rbp ) . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : cmpq $- 1 , - 8 8 (% rbp ) jne . L 6 jmp . L 7 . L 5 : . LBE 1 4 : . LBE 1 3 : . LBB 2 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 2 8 : . LBB 2 9 : . LBB 2 7 : . LBB 1 5 : . LBB 1 6 : movq - 8 8 (% rbp ), % rdx cmpq - 2 0 0 (% rbp ), % rdx jle . L 8 . LBB 1 7 : leaq string .. d (% rip ), % r 1 2 leaq go .. C 1 1 (% rip ), % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . gopanic @ PLT . L 8 : . LBE 1 7 : . LBE 1 6 : movq - 2 0 0 (% rbp ), % rdx subq - 8 8 (% rbp ), % rdx movq % rdx , - 9 6 (% rbp ) movq - 1 8 4 (% rbp ), % rdx cmpq $ 0 , - 8 0 (% rbp ) js . L 9 cmpq % rdx , - 8 0 (% rbp ) jl . L 2 5 . L 9 : movq - 8 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq - 1 9 2 (% rbp ), % rsi movq - 8 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rsi , % rdx movq $- 1 , (% rdx ) . LBB 1 8 : movq - 8 0 (% rbp ), % rdx addq $ 1 , % rdx movq % rdx , - 6 4 (% rbp ) . LBB 1 9 : jmp . L 1 1 . L 3 1 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : . LBB 2 2 : . LBB 2 3 : movq - 1 8 4 (% rbp ), % rdx cmpq $ 0 , - 6 4 (% rbp ) js . L 1 2 cmpq % rdx , - 6 4 (% rbp ) jl . L 2 6 . L 1 2 : movq - 6 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq - 1 9 2 (% rbp ), % rsi movq - 6 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rsi , % rdx movq (% rdx ), % rdx cmpq $- 1 , % rdx setne % dl testb % dl , % dl je . L 1 4 . LBB 2 4 : movq - 1 8 4 (% rbp ), % rdx cmpq $ 0 , - 6 4 (% rbp ) js . L 1 5 cmpq % rdx , - 6 4 (% rbp ) jl . L 2 7 . L 1 5 : movq - 6 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq - 1 9 2 (% rbp ), % rsi movq - 6 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rsi , % rdx movq (% rdx ), % rdx cmpq % rdx , - 9 6 (% rbp ) setge % dl . L 1 4 : . LBE 2 4 : . LBE 2 3 : testb % dl , % dl je . L 1 7 . LBB 2 5 : movq - 1 8 4 (% rbp ), % rdx cmpq $ 0 , - 6 4 (% rbp ) js . L 1 8 cmpq % rdx , - 6 4 (% rbp ) jl . L 2 8 . L 1 8 : movq - 6 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq - 1 9 2 (% rbp ), % rsi movq - 6 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rsi , % rdx movq $- 1 , (% rdx ) jmp . L 2 0 . L 1 7 : . LBE 2 5 : . LBE 2 2 : . LBE 2 1 : . LBB 2 6 : addq $ 1 , - 6 4 (% rbp ) . L 1 1 : . LBE 2 6 : movq - 1 8 4 (% rbp ), % rdx cmpq % rdx , - 6 4 (% rbp ) jl . L 3 1 . L 2 0 : . LBE 1 9 : . LBE 1 8 : addq $ 1 , - 5 6 (% rbp ) . L 7 : . LBE 1 5 : . LBE 2 7 : . LBE 2 9 : . LBE 1 0 : . LBB 3 0 : addq $ 1 , % rax . L 4 : . LBE 3 0 : cmpq % rcx , % rax jl . L 3 2 . LBE 7 : . LBE 6 : . LBE 5 : . LBB 3 1 : movq - 5 6 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax . LBE 3 1 : . LBE 2 : addq $ 1 6 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 9 movl $ 1 6 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 9 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 5 2 , % rsp movq $ 0 , - 2 4 (% rbp ) . LBB 2 : movq $ 0 , - 2 4 (% rbp ) . LBB 3 : movq $ 0 , - 3 2 (% rbp ) . LBB 4 : jmp . L 2 . L 3 8 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 cmpq % rax , - 3 2 (% rbp ) jl . L 2 7 . L 3 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 5 cmpq % rdx , % rax jl . L 2 8 . L 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jge . L 7 . LBB 8 : . LBB 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 3 2 (% rbp ), % rdx movq 1 6 (% rbp ), % rcx movq 2 4 (% rbp ), % rbx movq % rcx , - 1 2 8 (% rbp ) movq % rbx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 2 4 (% rbp ), % rax movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 2 4 (% rbp ) js . L 8 cmpq % rcx , - 2 4 (% rbp ) jl . L 2 9 . L 8 : movq - 2 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq 1 6 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rdi movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 3 2 (% rbp ) js . L 1 0 cmpq % rcx , - 3 2 (% rbp ) jl . L 3 0 . L 1 0 : movq - 3 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq 1 6 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rsi movq - 1 5 2 (% rbp ), % rcx testq % rdx , % rdx js . L 1 2 cmpq % rcx , % rdx jl . L 3 1 . L 1 2 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq - 1 6 0 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq % rdi , (% rdx ) movq - 1 2 0 (% rbp ), % rdx testq % rax , % rax js . L 1 4 cmpq % rdx , % rax jl . L 3 2 . L 1 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq - 1 2 8 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . LBE 9 : addq $ 1 , - 2 4 (% rbp ) . L 7 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 1 0 : addq $ 1 , - 3 2 (% rbp ) . L 2 : . LBE 1 0 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 3 2 (% rbp ) jl . L 3 8 . LBE 4 : . LBE 3 : . LBB 1 1 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 2 4 (% rbp ), % rax movq 2 4 (% rbp ), % rsi movq 1 6 (% rbp ), % rcx movq 2 4 (% rbp ), % rbx movq % rcx , - 6 4 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rdx movq % rdx , - 4 8 (% rbp ) leaq - 1 (% rsi ), % rdx movq 2 4 (% rbp ), % rcx subq $ 1 , % rcx movq 2 4 (% rbp ), % rsi testq % rcx , % rcx js . L 1 8 cmpq % rsi , % rcx jl . L 3 4 . L 1 8 : movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq 1 6 (% rbp ), % rsi salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rdi movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 2 4 (% rbp ) js . L 2 0 cmpq % rcx , - 2 4 (% rbp ) jl . L 3 5 . L 2 0 : movq - 2 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq 1 6 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rsi movq - 8 8 (% rbp ), % rcx testq % rax , % rax js . L 2 2 cmpq % rcx , % rax jl . L 3 6 . L 2 2 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq - 9 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq % rdi , (% rax ) movq - 5 6 (% rbp ), % rax testq % rdx , % rdx js . L 2 4 cmpq % rax , % rdx jl . L 3 7 . L 2 4 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 6 4 (% rbp ), % rax salq $ 3 , % rdx addq % rdx , % rax movq % rsi , (% rax ) . LBE 1 1 : movq - 2 4 (% rbp ), % rax . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 8 movl $ 1 5 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 addq $- 1 2 8 , % rsp movq $ 2 , - 2 4 (% rbp ) . LBB 2 : movq $ 3 , - 3 2 (% rbp ) . LBB 3 : jmp . L 2 . L 7 : . LBB 4 : nop . LBE 4 : . LBB 5 : . LBB 6 : movq - 3 2 (% rbp ), % rax movq % rax , % rdi call main . isPrime testb % al , % al je . L 3 . LBB 7 : movq - 3 2 (% rbp ), % rax addq % rax , - 2 4 (% rbp ) . L 3 : . LBE 7 : . LBE 6 : . LBE 5 : . LBB 8 : addq $ 2 , - 3 2 (% rbp ) . L 2 : . LBE 8 : cmpq $ 1 9 9 9 9 9 9 , - 3 2 (% rbp ) jle . L 7 . LBE 3 : . LBE 2 : leaq int 6 4 .. d (% rip ), % r 1 2 leaq int 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 2 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 1 1 2 (% rbp ) movq % r 1 3 , - 1 0 4 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) leaq - 1 6 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 7 movl $ 5 6 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 7 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq % rcx , - 4 8 (% rbp ) movb $ 0 , - 9 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 4 0 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movb $ 1 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : movq - 3 2 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jne . L 4 . LBB 7 : . LBB 8 : movq - 4 0 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 4 8 (% rbp ), % rax pushq 5 6 (% rbp ) pushq 4 8 (% rbp ) pushq 4 0 (% rbp ) pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rcx movl $ 0 , % esi movl $ 0 , % edi call main . helper addq $ 4 8 , % rsp movb % al , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax jmp . L 3 . L 4 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 9 : movq - 3 2 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jle . L 5 . LBB 1 0 : . LBB 1 1 : movb $ 0 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax jmp . L 3 . L 5 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 1 2 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) . LBB 1 3 : jmp . L 6 . L 2 6 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq 4 8 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 7 cmpq % rax , - 8 (% rbp ) jl . L 2 0 . L 7 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : movq 4 0 (% rbp ), % rdx movq - 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq $ 1 , % rax je . L 2 5 . LBE 1 6 : movq 4 8 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 1 1 cmpq % rax , - 8 (% rbp ) jl . L 2 1 . L 1 1 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : movq 4 0 (% rbp ), % rdx movq - 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 1 , (% rax ) . LBB 1 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 1 3 cmpq % rax , - 8 (% rbp ) jl . L 2 2 . L 1 3 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : movq 1 6 (% rbp ), % rdx movq - 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 3 2 (% rbp ), % rax leaq (% rdx ,% rax ), % rsi movq - 8 (% rbp ), % rax leaq 1 (% rax ), % rdi movq - 4 8 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax pushq 5 6 (% rbp ) pushq 4 8 (% rbp ) pushq 4 0 (% rbp ) pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rdx , % rcx movq % rax , % rdx call main . helper addq $ 4 8 , % rsp testb % al , % al je . L 1 5 . LBB 1 9 : . LBB 2 0 : movb $ 1 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax jmp . L 3 . L 1 5 : . LBE 2 0 : . LBE 1 9 : . LBE 1 8 : movq 4 8 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 1 6 cmpq % rax , - 8 (% rbp ) jl . L 2 3 . L 1 6 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : movq 4 0 (% rbp ), % rdx movq - 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 0 , (% rax ) jmp . L 1 0 . L 2 5 : . LBB 2 1 : . LBB 1 7 : nop . L 1 0 : . LBE 1 7 : . LBE 2 1 : . LBE 1 5 : . LBB 2 2 : addq $ 1 , - 8 (% rbp ) . L 6 : . LBE 2 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 8 (% rbp ) jl . L 2 6 . LBE 1 3 : . LBE 1 2 : . LBB 2 3 : movb $ 0 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax . L 3 : . LBE 2 3 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 0 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 0 : pushq % rbp movq % rsp , % rbp movq % rdi , - 2 4 (% rbp ) movb $ 0 , - 1 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 4 . LBB 4 : . LBB 5 : movb $ 0 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 3 . L 9 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : . LBB 7 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq - 2 4 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , - 2 4 (% rbp ) . L 4 : . LBE 9 : movq - 2 4 (% rbp ), % rax andl $ 1 , % eax testq % rax , % rax je . L 9 . LBE 7 : . LBE 6 : . LBB 1 0 : cmpq $ 1 , - 2 4 (% rbp ) sete % al movb % al , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax . L 3 : . LBE 1 0 : . LBE 2 : popq % rbp ret
. LFB 0 : leaq - 1 0 1 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 1 movl $ 1 0 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 6 8 , % rsp movq % rdi , - 9 2 0 (% rbp ) leaq type ... 6 3 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 8 (% rbp ) leaq . LC 1 8 (% rip ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 5 , - 7 1 2 (% rbp ) leaq . LC 1 9 (% rip ), % rax movq % rax , - 7 0 4 (% rbp ) movq $ 5 , - 6 9 6 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 6 8 8 (% rbp ) movq $ 6 , - 6 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 7 2 8 (% rbp ), % rcx movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 7 2 8 (% rbp ), % rax leaq - 7 2 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 7 2 8 (% rbp ), % rax movq % rax , - 8 3 2 (% rbp ) movq $ 3 , - 8 2 4 (% rbp ) movq $ 3 , - 8 1 6 (% rbp ) leaq type ... 6 3 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 6 4 (% rbp ) leaq . LC 2 1 (% rip ), % rax movq % rax , - 6 5 6 (% rbp ) movq $ 1 , - 6 4 8 (% rbp ) leaq . LC 2 2 (% rip ), % rax movq % rax , - 6 4 0 (% rbp ) movq $ 1 , - 6 3 2 (% rbp ) leaq . LC 2 2 (% rip ), % rax movq % rax , - 6 2 4 (% rbp ) movq $ 1 , - 6 1 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 6 6 4 (% rbp ), % rcx movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 6 6 4 (% rbp ), % rax leaq - 6 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 6 6 4 (% rbp ), % rax movq % rax , - 8 0 8 (% rbp ) movq $ 3 , - 8 0 0 (% rbp ) movq $ 3 , - 7 9 2 (% rbp ) leaq type ... 6 3 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 0 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 4 , - 5 8 4 (% rbp ) leaq . LC 2 4 (% rip ), % rax movq % rax , - 5 7 6 (% rbp ) movq $ 4 , - 5 6 8 (% rbp ) leaq . LC 2 5 (% rip ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 4 , - 5 5 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 6 : movq - 6 0 0 (% rbp ), % rcx movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 6 : jmp . L 7 . L 6 : . LBB 7 : movq - 6 0 0 (% rbp ), % rax leaq - 5 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 7 : movq - 6 0 0 (% rbp ), % rax movq % rax , - 7 8 4 (% rbp ) movq $ 3 , - 7 7 6 (% rbp ) movq $ 3 , - 7 6 8 (% rbp ) leaq type ... 6 2 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 3 6 (% rbp ) leaq . LC 2 6 (% rip ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 1 , - 5 2 0 (% rbp ) leaq . LC 2 7 (% rip ), % rax movq % rax , - 5 1 2 (% rbp ) movq $ 1 , - 5 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 . LBB 8 : movq - 5 3 6 (% rbp ), % rcx movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 8 : jmp . L 9 . L 8 : . LBB 9 : movq - 5 3 6 (% rbp ), % rax leaq - 5 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 : . LBE 9 : movq - 5 3 6 (% rbp ), % rax movq % rax , - 7 6 0 (% rbp ) movq $ 2 , - 7 5 2 (% rbp ) movq $ 2 , - 7 4 4 (% rbp ) . LBB 1 0 : movq $ 0 , - 9 1 2 (% rbp ) movq $ 0 , - 9 0 4 (% rbp ) movq $ 0 , - 8 9 6 (% rbp ) movq $ 0 , - 8 8 8 (% rbp ) movq $ 0 , - 8 8 0 (% rbp ) movq $ 0 , - 8 7 2 (% rbp ) . LBB 1 1 : . LBB 1 2 : . LBB 1 3 : movq - 8 3 2 (% rbp ), % rax movq - 8 2 4 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movl $ 2 , % r 1 3 d movl $ 0 , % r 1 2 d . LBE 1 3 : jmp . L 1 0 . L 3 0 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : testq % r 1 2 , % r 1 2 js . L 1 1 cmpq $ 1 , % r 1 2 jg . L 1 1 movq % r 1 2 , % rax addq % rax , % rax addq % r 1 2 , % rax salq $ 4 , % rax leaq - 4 8 (% rbp ), % rbx addq % rbx , % rax leaq - 4 0 0 (% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) . LBE 1 6 : . LBB 1 7 : movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 9 1 2 (% rbp ) movq % rdx , - 9 0 4 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 8 9 6 (% rbp ) movq % rdx , - 8 8 8 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 8 8 0 (% rbp ) movq % rdx , - 8 7 2 (% rbp ) . LBE 1 7 : . LBB 1 8 : leaq - 8 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 9 6 (% rbp ) pushq - 9 0 4 (% rbp ) pushq - 9 1 2 (% rbp ) movq % rax , % rdi call go . problem 1 0 0 2 . commonChars addq $ 3 2 , % rsp . LBB 1 9 : leaq type ... 6 . 7 string (% rip ), % rax movq % rax , - 9 6 0 (% rbp ) leaq type ... 6 . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 8 8 8 (% rbp ), % rax movq - 8 8 0 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 8 7 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 1 2 jmp . L 2 8 . L 1 1 : . LBE 1 9 : . LBE 1 8 : . LBB 3 4 : movl $ 2 , % esi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : . LBE 3 4 : . LBB 3 5 : . LBB 3 3 : . LBB 2 0 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 0 : jmp . L 1 4 . L 2 8 : . LBB 2 1 : movq - 2 6 4 (% rbp ), % rcx leaq - 2 5 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 4 : . LBE 2 1 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 9 5 2 (% rbp ) leaq type ... 6 . 7 string (% rip ), % rax movq % rax , - 9 4 4 (% rbp ) leaq type ... 6 . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 9 6 (% rbp ) movq - 8 6 4 (% rbp ), % rax movq - 8 5 6 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 8 4 8 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 5 . LBB 2 2 : movq - 2 9 6 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 7 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 2 : jmp . L 1 6 . L 1 5 : . LBB 2 3 : movq - 2 9 6 (% rbp ), % rcx leaq - 2 8 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 6 : . LBE 2 3 : movq - 2 9 6 (% rbp ), % rax movq % rax , - 9 3 6 (% rbp ) movq - 9 4 4 (% rbp ), % rax movq - 9 3 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % rax movq - 9 6 0 (% rbp ), % rdx movq - 9 5 2 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT xorl $ 1 , % eax testb % al , % al je . L 1 7 . LBB 2 4 : leaq type ... 6 . 7 string (% rip ), % rax movq % rax , - 1 0 0 8 (% rbp ) leaq type ... 6 . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 9 1 2 (% rbp ), % rax movq - 9 0 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 8 9 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 8 . LBB 2 5 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 5 : jmp . L 1 9 . L 1 8 : . LBB 2 6 : movq - 2 3 2 (% rbp ), % rcx leaq - 2 2 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 9 : . LBE 2 6 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 1 0 0 0 (% rbp ) leaq type ... 6 . 7 string (% rip ), % rax movq % rax , - 9 9 2 (% rbp ) leaq type ... 6 . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 8 6 4 (% rbp ), % rax movq - 8 5 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 8 4 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 0 . LBB 2 7 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 7 : jmp . L 2 1 . L 2 0 : . LBB 2 8 : movq - 2 0 0 (% rbp ), % rcx leaq - 1 9 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 1 : . LBE 2 8 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 9 8 4 (% rbp ) leaq type ... 6 . 7 string (% rip ), % rax movq % rax , - 9 7 6 (% rbp ) leaq type ... 6 . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 8 8 8 (% rbp ), % rax movq - 8 8 0 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 8 7 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 2 . LBB 2 9 : movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 9 : jmp . L 2 3 . L 2 2 : . LBB 3 0 : movq - 1 6 8 (% rbp ), % rcx leaq - 1 6 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 3 : . LBE 3 0 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 9 6 8 (% rbp ) leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 1 0 0 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 2 8 (% rbp ) movdqa - 9 9 2 (% rbp ), % xmm 1 movups % xmm 1 , - 1 1 2 (% rbp ) movdqa - 9 7 6 (% rbp ), % xmm 2 movups % xmm 2 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 4 . LBB 3 1 : movq - 1 3 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 3 1 : jmp . L 2 5 . L 2 4 : . LBB 3 2 : movq - 1 3 6 (% rbp ), % rcx leaq - 1 2 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 5 : . LBE 3 2 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 2 8 (% rip ), % r 1 4 movl $ 2 5 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 9 2 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 1 7 : . LBE 2 4 : . LBE 3 3 : . LBE 3 5 : . LBE 1 5 : . LBB 3 6 : addq $ 1 , % r 1 2 . L 1 0 : . LBE 3 6 : cmpq % r 1 3 , % r 1 2 jl . L 3 0 . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 1 movl $ 1 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 5 2 , % rsp movq % rdi , % rcx movq % rsi , % rbx movq % rcx , - 1 7 6 (% rbp ) movq % rbx , - 1 6 8 (% rbp ) movb $ 0 , - 4 9 (% rbp ) . LBB 2 : leaq . LC 0 (% rip ), % rax movl $ 1 5 , % edx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) leaq - 9 6 (% rbp ), % rax movq - 1 4 4 (% rbp ), % rcx movq - 1 3 6 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call regexp . Compile @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) leaq . LC 1 (% rip ), % r 1 2 movl $ 0 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rdi movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movq % rdi , % r 8 movq % rax , % rdi call regexp . Regexp . ReplaceAllString @ PLT movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 7 6 (% rbp ), % rdx movq - 1 6 8 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call strings . ToLower @ PLT movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) . LBB 3 : movq - 1 6 8 (% rbp ), % rax testq % rax , % rax jne . L 2 movq - 1 7 6 (% rbp ), % rax leaq . LC 1 (% rip ), % rdx cmpq % rdx , % rax jne . L 3 movl $ 1 , % eax jmp . L 5 . L 3 : movl $ 1 , % eax jmp . L 5 . L 2 : movl $ 0 , % eax . L 5 : testb % al , % al je . L 6 . LBB 4 : . LBB 5 : movb $ 1 , - 4 9 (% rbp ) movzbl - 4 9 (% rbp ), % eax jmp . L 1 6 . L 6 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 1 6 8 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 4 0 (% rbp ) . LBB 6 : movq $ 0 , - 4 8 (% rbp ) . LBB 7 : jmp . L 8 . L 2 0 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 9 cmpq % rax , - 4 8 (% rbp ) jl . L 1 7 . L 9 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 1 cmpq % rax , - 4 0 (% rbp ) jl . L 1 8 . L 1 1 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : movq - 1 7 6 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % edx movq - 1 7 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax addq % rcx , % rax movzbl (% rax ), % eax cmpb % al , % dl je . L 1 3 . LBB 1 1 : . LBB 1 2 : movb $ 0 , - 4 9 (% rbp ) movzbl - 4 9 (% rbp ), % eax jmp . L 1 6 . L 1 3 : . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : subq $ 1 , - 4 0 (% rbp ) . LBE 9 : . LBB 1 3 : addq $ 1 , - 4 8 (% rbp ) . L 8 : . LBE 1 3 : movq - 1 6 8 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax cmpq - 4 8 (% rbp ), % rax jg . L 2 0 . LBE 7 : . LBE 6 : . LBB 1 4 : movb $ 1 , - 4 9 (% rbp ) movzbl - 4 9 (% rbp ), % eax . L 1 6 : . LBE 1 4 : . LBE 2 : addq $ 1 5 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 9 5 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 2 movl $ 9 5 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 0 4 , % rsp movq % rdi , - 8 8 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 3 6 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 7 3 6 (% rbp ), % rax movq % rax , - 7 0 4 (% rbp ) movq $ 3 , - 6 9 6 (% rbp ) movq $ 3 , - 6 8 8 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 8 (% rbp ) movq - 7 2 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 1 , 8 (% rax ) movq - 7 2 8 (% rbp ), % rax movq % rax , - 6 8 0 (% rbp ) movq $ 2 , - 6 7 2 (% rbp ) movq $ 2 , - 6 6 4 (% rbp ) movq $ 1 , - 6 5 6 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 0 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq - 7 2 0 (% rbp ), % rax movq % rax , - 6 4 8 (% rbp ) movq $ 2 , - 6 4 0 (% rbp ) movq $ 2 , - 6 3 2 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 1 2 (% rbp ) movq - 7 1 2 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 7 1 2 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) movq $ 3 , - 6 1 6 (% rbp ) movq $ 3 , - 6 0 8 (% rbp ) movq $ 2 , - 6 0 0 (% rbp ) leaq - 7 0 4 (% rbp ), % rax movq % rax , - 7 6 8 (% rbp ) movq $ 2 , - 7 6 0 (% rbp ) movq $ 2 , - 7 5 2 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 1 8 (% rip ), % rax movq % rax , - 9 1 2 (% rbp ) movq $ 6 9 , - 9 0 4 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 9 1 2 (% rbp ), % rcx movq - 9 0 4 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) . LBB 2 : movq $ 0 , - 8 3 2 (% rbp ) movq $ 0 , - 8 2 4 (% rbp ) movq $ 0 , - 8 1 6 (% rbp ) movq $ 0 , - 8 0 8 (% rbp ) movq $ 0 , - 8 0 0 (% rbp ) movq $ 0 , - 7 9 2 (% rbp ) movq $ 0 , - 7 8 4 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq - 4 8 8 (% rbp ), % rax movq % rax , - 9 1 2 (% rbp ) movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 1 1 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : movq - 4 8 8 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 4 9 6 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 3 , % rax subq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 5 6 0 (% rbp ) movq % rdi , - 5 5 2 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 5 4 4 (% rbp ) movq % rdi , - 5 3 6 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 5 2 8 (% rbp ) movq % rdi , - 5 2 0 (% rbp ) movq 4 8 (% rax ), % rax movq % rax , - 5 1 2 (% rbp ) . LBE 8 : . LBB 9 : movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 8 3 2 (% rbp ) movq % rdx , - 8 2 4 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 8 1 6 (% rbp ) movq % rdx , - 8 0 8 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 8 0 0 (% rbp ) movq % rdx , - 7 9 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 7 8 4 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 7 8 4 (% rbp ), % rax movq % rax , - 7 7 6 (% rbp ) movq - 8 3 2 (% rbp ), % rax movq - 8 2 4 (% rbp ), % rdx movq % rax , - 8 8 0 (% rbp ) movq % rdx , - 8 7 2 (% rbp ) movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 8 6 4 (% rbp ) movq % rdx , - 8 5 6 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq % rax , - 8 4 8 (% rbp ) movq % rdx , - 8 4 0 (% rbp ) pushq - 8 4 0 (% rbp ) pushq - 8 4 8 (% rbp ) pushq - 8 5 6 (% rbp ) pushq - 8 6 4 (% rbp ) pushq - 8 7 2 (% rbp ) pushq - 8 8 0 (% rbp ) call go . leetcode . findContentChildren addq $ 4 8 , % rsp movq % rax , - 8 9 6 (% rbp ) leaq go . leetcode .. go . leetcode . para 4 5 5 .. d (% rip ), % rax movq % rax , - 9 4 4 (% rbp ) leaq go . leetcode .. go . leetcode . para 4 5 5 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 8 8 0 (% rbp ), % rax movq - 8 7 2 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 8 6 4 (% rbp ), % rax movq - 8 5 6 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 8 4 8 (% rbp ), % rax movq - 8 4 0 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 4 jmp . L 9 . L 3 : . LBE 1 0 : . LBB 1 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 3 : . LBB 1 4 : . LBB 1 1 : movq - 3 7 6 (% rbp ), % rax movq - 3 6 8 (% rbp ), % rsi movq - 3 6 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 3 5 2 (% rbp ), % rsi movq - 3 4 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 3 3 6 (% rbp ), % rsi movq - 3 2 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) . LBE 1 1 : jmp . L 6 . L 9 : . LBB 1 2 : movq - 3 7 6 (% rbp ), % rax leaq - 3 6 8 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 4 5 5 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 : . LBE 1 2 : movq - 3 7 6 (% rbp ), % rax movq % rax , - 9 3 6 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 9 2 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 8 9 6 (% rbp ), % rcx movq % rcx , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 9 2 0 (% rbp ) movdqa - 9 4 4 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 9 2 8 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 1 9 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) . LBE 1 4 : . LBE 7 : . LBB 1 5 : addq $ 1 , % rbx . L 2 : . LBE 1 5 : cmpq - 9 1 2 (% rbp ), % rbx jl . L 1 1 . LBE 4 : . LBE 3 : . LBE 2 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 2 0 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : leaq - 1 2 7 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 1 movl $ 1 2 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 7 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 2 2 4 , % rsp movq % rdi , - 1 2 0 8 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 9 2 (% rbp ) movq - 9 9 2 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 5 , 8 (% rax ) movq - 9 9 2 (% rbp ), % rax movq % rax , - 8 0 0 (% rbp ) movq $ 2 , - 7 9 2 (% rbp ) movq $ 2 , - 7 8 4 (% rbp ) leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 8 4 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 7 6 (% rbp ) movq - 9 7 6 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 5 , 1 6 (% rax ) movq - 9 7 6 (% rbp ), % rax movq % rax , - 9 6 0 (% rbp ) movq $ 3 , - 9 5 2 (% rbp ) movq $ 3 , - 9 4 4 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 6 8 (% rbp ) movq - 9 6 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 1 0 , 1 6 (% rax ) movq - 9 6 8 (% rbp ), % rax movq % rax , - 9 3 6 (% rbp ) movq $ 3 , - 9 2 8 (% rbp ) movq $ 3 , - 9 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 7 . LBB 6 2 : movq - 9 8 4 (% rbp ), % rax movq - 9 6 0 (% rbp ), % rcx movq - 9 5 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 9 4 4 (% rbp ), % rcx movq - 9 3 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 9 2 8 (% rbp ), % rcx movq - 9 2 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 6 2 : jmp . L 5 8 . L 5 7 : . LBB 6 3 : movq - 9 8 4 (% rbp ), % rax leaq - 9 6 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 8 : . LBE 6 3 : movq - 9 8 4 (% rbp ), % rax movq % rax , - 7 7 6 (% rbp ) movq $ 2 , - 7 6 8 (% rbp ) movq $ 2 , - 7 6 0 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 0 4 (% rbp ) movq - 9 0 4 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 2 , 8 (% rax ) movq - 9 0 4 (% rbp ), % rax movq % rax , - 7 5 2 (% rbp ) movq $ 2 , - 7 4 4 (% rbp ) movq $ 2 , - 7 3 6 (% rbp ) movq $ 1 4 , - 7 2 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 9 6 (% rbp ) movq - 8 9 6 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 4 , 1 6 (% rax ) movq - 8 9 6 (% rbp ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 3 , - 7 1 2 (% rbp ) movq $ 3 , - 7 0 4 (% rbp ) leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 8 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 0 (% rbp ) movq - 8 8 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq - 8 8 0 (% rbp ), % rax movq % rax , - 8 6 4 (% rbp ) movq $ 4 , - 8 5 6 (% rbp ) movq $ 4 , - 8 4 8 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 7 2 (% rbp ) movq - 8 7 2 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 9 , 2 4 (% rax ) movq - 8 7 2 (% rbp ), % rax movq % rax , - 8 4 0 (% rbp ) movq $ 4 , - 8 3 2 (% rbp ) movq $ 4 , - 8 2 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 9 . LBB 6 4 : movq - 8 8 8 (% rbp ), % rax movq - 8 6 4 (% rbp ), % rcx movq - 8 5 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 8 4 8 (% rbp ), % rcx movq - 8 4 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 8 3 2 (% rbp ), % rcx movq - 8 2 4 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 6 4 : jmp . L 6 0 . L 5 9 : . LBB 6 5 : movq - 8 8 8 (% rbp ), % rax leaq - 8 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 0 : . LBE 6 5 : movq - 8 8 8 (% rbp ), % rax movq % rax , - 6 9 6 (% rbp ) movq $ 2 , - 6 8 8 (% rbp ) movq $ 2 , - 6 8 0 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 0 8 (% rbp ) movq - 8 0 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq - 8 0 8 (% rbp ), % rax movq % rax , - 6 7 2 (% rbp ) movq $ 3 , - 6 6 4 (% rbp ) movq $ 3 , - 6 5 6 (% rbp ) movq $ 1 1 , - 6 4 8 (% rbp ) leaq - 8 0 0 (% rbp ), % rax movq % rax , - 1 0 2 4 (% rbp ) movq $ 2 , - 1 0 1 6 (% rbp ) movq $ 2 , - 1 0 0 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 2 2 (% rip ), % rax movq % rax , - 1 2 3 2 (% rbp ) movq $ 6 9 , - 1 2 2 4 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 1 2 3 2 (% rbp ), % rcx movq - 1 2 2 4 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) . LBB 6 6 : movq $ 0 , - 1 1 2 0 (% rbp ) movq $ 0 , - 1 1 1 2 (% rbp ) movq $ 0 , - 1 1 0 4 (% rbp ) movq $ 0 , - 1 0 9 6 (% rbp ) movq $ 0 , - 1 0 8 8 (% rbp ) movq $ 0 , - 1 0 8 0 (% rbp ) movq $ 0 , - 1 0 7 2 (% rbp ) movq $ 0 , - 1 0 6 4 (% rbp ) movq $ 0 , - 1 0 5 6 (% rbp ) movq $ 0 , - 1 0 4 8 (% rbp ) . LBB 6 7 : . LBB 6 8 : . LBB 6 9 : movq - 1 0 2 4 (% rbp ), % rax movq - 1 0 1 6 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 1 0 0 8 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) movq - 5 2 0 (% rbp ), % rax movq % rax , - 1 2 3 2 (% rbp ) movl $ 0 , % ebx . LBE 6 9 : jmp . L 6 1 . L 7 0 : . LBB 7 0 : nop . LBE 7 0 : . LBB 7 1 : . LBB 7 2 : movq - 5 2 0 (% rbp ), % rax testq % rbx , % rbx js . L 6 2 cmpq % rax , % rbx jge . L 6 2 movq - 5 2 8 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 2 , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 6 0 8 (% rbp ) movq % rdi , - 6 0 0 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 5 9 2 (% rbp ) movq % rdi , - 5 8 4 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 5 7 6 (% rbp ) movq % rdi , - 5 6 8 (% rbp ) movq 4 8 (% rax ), % rsi movq 5 6 (% rax ), % rdi movq % rsi , - 5 6 0 (% rbp ) movq % rdi , - 5 5 2 (% rbp ) movq 7 2 (% rax ), % rdx movq 6 4 (% rax ), % rax movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) . LBE 7 2 : . LBB 7 3 : movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 1 1 2 0 (% rbp ) movq % rdx , - 1 1 1 2 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 1 1 0 4 (% rbp ) movq % rdx , - 1 0 9 6 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 1 0 8 8 (% rbp ) movq % rdx , - 1 0 8 0 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 1 0 7 2 (% rbp ) movq % rdx , - 1 0 6 4 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 1 0 5 6 (% rbp ) movq % rdx , - 1 0 4 8 (% rbp ) . LBE 7 3 : . LBB 7 4 : movq - 1 0 4 8 (% rbp ), % rax movq % rax , - 1 0 3 2 (% rbp ) movq - 1 1 2 0 (% rbp ), % rax movq - 1 1 1 2 (% rbp ), % rdx movq % rax , - 1 2 0 0 (% rbp ) movq % rdx , - 1 1 9 2 (% rbp ) movq - 1 1 0 4 (% rbp ), % rax movq - 1 0 9 6 (% rbp ), % rdx movq % rax , - 1 1 8 4 (% rbp ) movq % rdx , - 1 1 7 6 (% rbp ) movq - 1 0 8 8 (% rbp ), % rax movq - 1 0 8 0 (% rbp ), % rdx movq % rax , - 1 1 6 8 (% rbp ) movq % rdx , - 1 1 6 0 (% rbp ) movq - 1 0 7 2 (% rbp ), % rax movq - 1 0 6 4 (% rbp ), % rdx movq % rax , - 1 1 5 2 (% rbp ) movq % rdx , - 1 1 4 4 (% rbp ) movq - 1 0 5 6 (% rbp ), % rax movq % rax , - 1 1 3 6 (% rbp ) subq $ 8 , % rsp pushq - 1 1 3 6 (% rbp ) pushq - 1 1 4 4 (% rbp ) pushq - 1 1 5 2 (% rbp ) pushq - 1 1 6 0 (% rbp ) pushq - 1 1 6 8 (% rbp ) pushq - 1 1 7 6 (% rbp ) pushq - 1 1 8 4 (% rbp ) pushq - 1 1 9 2 (% rbp ) pushq - 1 2 0 0 (% rbp ) call go . leetcode . shoppingOffers addq $ 8 0 , % rsp movq % rax , - 1 2 1 6 (% rbp ) leaq go . leetcode .. go . leetcode . para 6 3 8 .. d (% rip ), % rax movq % rax , - 1 2 6 4 (% rbp ) leaq go . leetcode .. go . leetcode . para 6 3 8 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) movq - 1 2 0 0 (% rbp ), % rax movq - 1 1 9 2 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 1 1 8 4 (% rbp ), % rax movq - 1 1 7 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 1 6 8 (% rbp ), % rax movq - 1 1 6 0 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 1 1 5 2 (% rbp ), % rax movq - 1 1 4 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 1 1 3 6 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 6 3 jmp . L 6 8 . L 6 2 : . LBE 7 4 : . LBB 7 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 3 : . LBE 7 7 : . LBB 7 8 : . LBB 7 5 : movq - 3 9 2 (% rbp ), % rax movq - 3 8 4 (% rbp ), % rsi movq - 3 7 6 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 3 6 8 (% rbp ), % rsi movq - 3 6 0 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 3 5 2 (% rbp ), % rsi movq - 3 4 4 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 3 3 6 (% rbp ), % rsi movq - 3 2 8 (% rbp ), % rdi movq % rsi , 4 8 (% rax ) movq % rdi , 5 6 (% rax ) movq - 3 2 0 (% rbp ), % rdx movq % rdx , 6 4 (% rax ) . LBE 7 5 : jmp . L 6 5 . L 6 8 : . LBB 7 6 : movq - 3 9 2 (% rbp ), % rax leaq - 3 8 4 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 6 3 8 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 5 : . LBE 7 6 : movq - 3 9 2 (% rbp ), % rax movq % rax , - 1 2 5 6 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 1 2 4 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 1 2 1 6 (% rbp ), % rdi movq % rdi , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 1 2 4 0 (% rbp ) movdqa - 1 2 6 4 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 1 2 4 8 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 2 3 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) . LBE 7 8 : . LBE 7 1 : . LBB 7 9 : addq $ 1 , % rbx . L 6 1 : . LBE 7 9 : cmpq - 1 2 3 2 (% rbp ), % rbx jl . L 7 0 . LBE 6 8 : . LBE 6 7 : . LBE 6 6 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 2 4 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : leaq - 4 0 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 1 movl $ 4 0 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 7 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 7 6 , % rsp movq $ 0 , - 3 3 6 (% rbp ) movq $ 0 , - 3 2 8 (% rbp ) . LBB 1 7 : . LBB 1 8 : movq 2 4 (% rbp ), % rcx testq % rcx , % rcx jne . L 2 8 . LBB 1 9 : . LBB 2 0 : leaq . LC 1 2 (% rip ), % rax movl $ 0 , % edx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx jmp . L 6 0 . L 2 8 : . LBE 2 0 : . LBE 1 9 : . LBB 2 1 : . LBB 2 2 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jne . L 3 0 . LBB 2 3 : . LBB 2 4 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 3 1 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 1 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx jmp . L 6 0 . L 3 0 : . LBE 2 4 : . LBE 2 3 : . LBE 2 2 : . LBE 2 1 : . LBE 1 8 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int 3 2 (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 6 8 (% rbp ) movq % rbx , - 3 6 0 (% rbp ) movq % rbx , - 3 5 2 (% rbp ) . LBB 2 5 : movq $ 0 , - 5 6 (% rbp ) . LBB 2 6 : . LBB 2 7 : . LBB 2 8 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 2 8 : jmp . L 3 2 . L 6 7 : . LBB 2 9 : nop . LBE 2 9 : . LBB 3 0 : movq % r 1 2 , - 5 6 (% rbp ) . LBB 3 1 : movq - 3 6 0 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 3 3 cmpq % rax , - 5 6 (% rbp ) jl . L 6 1 . L 3 3 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 1 : movq - 3 6 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax leaq (% rcx ,% rax ), % rbx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 3 5 cmpq % rax , - 5 6 (% rbp ) jl . L 6 2 . L 3 5 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 2 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax leaq - 1 2 8 (% rbp ), % rdi movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % rcx movq % rax , % rdx movl $ 0 , % esi call runtime . stringtoslicerune @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 2 7 2 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 7 . LBB 3 2 : movq - 2 8 8 (% rbp ), % rax movq % rax , (% rbx ) jmp . L 3 8 . L 3 7 : . LBE 3 2 : . LBB 3 3 : movq - 2 8 8 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 8 : . LBE 3 3 : . LBE 3 1 : . LBE 3 0 : . LBB 3 4 : addq $ 1 , % r 1 2 . L 3 2 : . LBE 3 4 : cmpq % r 1 3 , % r 1 2 jl . L 6 7 . LBE 2 7 : . LBE 2 6 : . LBE 2 5 : movq $ 0 , - 4 0 0 (% rbp ) movq $ 0 , - 3 9 2 (% rbp ) movq $ 0 , - 3 8 4 (% rbp ) movl $ 0 , - 3 6 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . L 4 1 : . L 5 9 : . LBB 3 5 : . LBB 3 6 : . LBB 3 7 : addq $ 1 , - 4 8 (% rbp ) . LBB 3 8 : movq $ 0 , - 6 4 (% rbp ) . LBB 3 9 : . LBB 4 0 : . LBB 4 1 : movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rsi movl $ 0 , % edx . LBE 4 1 : jmp . L 4 2 . L 7 0 : . LBB 4 2 : nop . LBE 4 2 : . LBB 4 3 : movq % rdx , - 6 4 (% rbp ) . LBB 4 4 : . LBB 4 5 : movq - 3 6 0 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 4 3 cmpq % rax , - 6 4 (% rbp ) jl . L 6 4 . L 4 3 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 4 : movq - 3 6 8 (% rbp ), % rdi movq - 6 4 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdi , % rax movq 8 (% rax ), % rax cmpq % rax , - 4 8 (% rbp ) jg . L 6 8 . LBE 4 5 : . LBB 4 7 : cmpq $ 0 , - 6 4 (% rbp ) jne . L 4 7 . LBB 4 8 : movq - 3 6 0 (% rbp ), % rax testq % rax , % rax jg . L 4 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 8 : movq - 3 6 8 (% rbp ), % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 2 2 4 (% rbp ) movq % rbx , - 2 1 6 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 2 1 6 (% rbp ), % rcx testq % rax , % rax js . L 4 9 cmpq % rcx , % rax jge . L 4 9 movq - 2 2 4 (% rbp ), % rcx salq $ 2 , % rax addq % rcx , % rax movl (% rax ), % eax movl % eax , - 3 6 (% rbp ) . LBE 4 8 : jmp . L 5 0 . L 4 9 : . LBB 4 9 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : . LBE 4 9 : . LBB 5 0 : . LBB 5 1 : movq - 3 6 0 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 5 1 cmpq % rax , - 6 4 (% rbp ) jl . L 6 5 . L 5 1 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 5 : movq - 3 6 8 (% rbp ), % rdi movq - 6 4 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdi , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 1 9 2 (% rbp ) movq % rbx , - 1 8 4 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 1 8 4 (% rbp ), % rcx testq % rax , % rax js . L 5 3 cmpq % rcx , % rax jge . L 5 3 movq - 1 9 2 (% rbp ), % rcx salq $ 2 , % rax addq % rcx , % rax movl (% rax ), % eax cmpl % eax , - 3 6 (% rbp ) jne . L 6 9 jmp . L 5 0 . L 5 3 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 0 : . LBE 5 1 : . LBE 5 0 : . LBE 4 7 : . LBE 4 4 : . LBE 4 3 : . LBB 5 8 : addq $ 1 , % rdx . L 4 2 : . LBE 5 8 : cmpq % rsi , % rdx jl . L 7 0 . LBE 4 0 : . LBE 3 9 : . LBE 3 8 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 5 7 . LBB 6 2 : movq - 1 6 0 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int 3 2 .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) . LBE 6 2 : jmp . L 5 8 . L 5 7 : . LBB 6 3 : movq - 1 6 0 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rdx movq % rcx , - 4 0 0 (% rbp ) movq % rax , - 3 9 2 (% rbp ) movq % rdx , - 3 8 4 (% rbp ) . L 5 8 : . LBE 6 3 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 2 , % rdx addq % rax , % rdx movl - 3 6 (% rbp ), % eax movl % eax , (% rdx ) . LBE 3 7 : jmp . L 5 9 . L 6 8 : . LBB 6 5 : . LBB 6 4 : . LBB 6 1 : . LBB 6 0 : . LBB 5 9 : . LBB 5 7 : . LBB 5 5 : . LBB 4 6 : nop jmp . L 4 6 . L 6 9 : . LBE 4 6 : . LBE 5 5 : . LBB 5 6 : . LBB 5 4 : . LBB 5 3 : . LBB 5 2 : nop . L 4 6 : . LBE 5 2 : . LBE 5 3 : . LBE 5 4 : . LBE 5 6 : . LBE 5 7 : . LBE 5 9 : . LBE 6 0 : . LBE 6 1 : . LBE 6 4 : . LBE 6 5 : . LBE 3 6 : . LBE 3 5 : . LBB 6 6 : subq $ 8 , % rsp pushq - 3 8 4 (% rbp ) pushq - 3 9 2 (% rbp ) pushq - 4 0 0 (% rbp ) movl $ 0 , % edi call runtime . slicerunetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx . L 6 0 : . LBE 6 6 : . LBE 1 7 : leaq - 2 4 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 7 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 7 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 4 , % rsp movq $ 0 , - 2 4 (% rbp ) . LBB 2 : movq $ 0 , - 3 2 (% rbp ) . LBB 3 : jmp . L 2 . L 6 : . LBB 4 : nop . LBE 4 : . LBB 5 : movq - 3 2 (% rbp ), % rax movq % rax , % rdi call main . lengthNumber addq % rax , - 2 4 (% rbp ) . LBE 5 : . LBB 6 : addq $ 1 , - 3 2 (% rbp ) . L 2 : . LBE 6 : cmpq $ 9 9 9 , - 3 2 (% rbp ) jle . L 6 . LBE 3 : . LBE 2 : movq - 2 4 (% rbp ), % rax leaq 1 1 (% rax ), % rbx call runtime . printlock @ PLT movq % rbx , % rdi call runtime . printint @ PLT call runtime . printnl @ PLT call runtime . printunlock @ PLT movq - 8 (% rbp ), % rbx leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 3 8 movl $ 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 9 : ret . L 1 3 8 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq $ 0 , - 4 8 (% rbp ) . LBB 9 6 : . LBB 9 7 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jne . L 1 1 5 . LBB 9 8 : . LBB 9 9 : movq $ 0 , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax jmp . L 1 1 6 . L 1 1 5 : . LBE 9 9 : . LBE 9 8 : . LBB 1 0 0 : . LBB 1 0 1 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 1 1 7 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 1 7 : movq 1 6 (% rbp ), % rax movq (% rax ), % rdx movq 2 4 (% rbp ), % rax cmpq % rax , % rdx jl . L 1 1 8 . LBB 1 0 2 : . LBB 1 0 3 : movq $ 1 , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax jmp . L 1 1 6 . L 1 1 8 : . LBE 1 0 3 : . LBE 1 0 2 : . LBE 1 0 1 : . LBE 1 0 0 : . LBE 9 7 : movq $ 0 , - 8 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 1 1 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 1 9 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 1 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 1 0 4 : . LBB 1 0 5 : jmp . L 1 2 0 . L 1 3 7 : . LBB 1 0 6 : nop . LBE 1 0 6 : . LBB 1 0 7 : movq $ 0 , - 3 2 (% rbp ) . LBB 1 0 8 : movq - 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 1 0 9 : jmp . L 1 2 1 . L 1 3 6 : . LBB 1 1 0 : nop . LBE 1 1 0 : . LBB 1 1 1 : . LBB 1 1 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 2 2 cmpq % rax , - 4 0 (% rbp ) jl . L 1 3 2 . L 1 2 2 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 2 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax subq - 1 6 (% rbp ), % rax addq % rdx , % rax cmpq % rax , - 3 2 (% rbp ) jg . L 1 2 4 . LBB 1 1 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 2 5 cmpq % rax , - 4 0 (% rbp ) jl . L 1 3 3 . L 1 2 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 3 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax subq - 1 6 (% rbp ), % rax addq % rdx , % rax movq % rax , - 3 2 (% rbp ) . L 1 2 4 : . LBE 1 1 3 : . LBE 1 1 2 : . LBE 1 1 1 : . LBB 1 1 4 : addq $ 1 , - 4 0 (% rbp ) . L 1 2 1 : . LBE 1 1 4 : movq - 4 0 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jle . L 1 3 6 . LBE 1 0 9 : . LBE 1 0 8 : movq - 1 6 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 3 2 (% rbp ), % rax addq % rax , - 1 6 (% rbp ) addq $ 1 , - 2 4 (% rbp ) . L 1 2 0 : . LBE 1 0 7 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 1 6 (% rbp ) jl . L 1 3 7 . LBE 1 0 5 : . LBE 1 0 4 : . LBB 1 1 5 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 8 (% rbp ) jge . L 1 3 1 . LBB 1 1 6 : addq $ 1 , - 2 4 (% rbp ) . L 1 3 1 : . LBE 1 1 6 : . LBE 1 1 5 : . LBB 1 1 7 : movq - 2 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax . L 1 1 6 : . LBE 1 1 7 : . LBE 9 6 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : movq - 3 2 (% rbp ), % rax movq % rax , % rdi call go . mathematic . Min movq - 2 4 (% rbp ), % rdx addq % rdx , % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . LBE 3 : . LBE 2 : leave ret
. LFB 2 : leaq - 6 4 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 5 movl $ 6 4 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 7 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 0 0 , % rsp movq % rdi , % rcx movq % rsi , % rax movq % rax , % rbx movq % rcx , - 6 2 4 (% rbp ) movq % rbx , - 6 1 6 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) movq $ 0 , - 5 1 2 (% rbp ) movq $ 0 , - 5 0 4 (% rbp ) . LBB 3 4 : . LBB 3 5 : . LBB 3 6 : . LBB 3 7 : cmpq $ 1 , - 6 3 2 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 3 3 . LBB 3 8 : cmpq $ 0 , - 6 3 2 (% rbp ) setle % al . L 3 3 : . LBE 3 8 : . LBE 3 7 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 3 4 . LBB 3 9 : movq - 6 1 6 (% rbp ), % rax cmpq % rax , - 6 3 2 (% rbp ) setg % al . L 3 4 : . LBE 3 9 : . LBE 3 6 : testb % al , % al je . L 3 5 . LBB 4 0 : . LBB 4 1 : movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx jmp . L 6 4 . L 3 5 : . LBE 4 1 : . LBE 4 0 : . LBE 3 5 : movq - 6 3 2 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 uint 8 (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 5 4 4 (% rbp ) movq % rbx , - 5 3 6 (% rbp ) movq % rbx , - 5 2 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) movb $ 1 , - 5 7 (% rbp ) . LBB 4 2 : movq $ 0 , - 7 2 (% rbp ) . LBB 4 3 : jmp . L 3 7 . L 7 3 : . LBB 4 4 : nop . LBE 4 4 : . LBB 4 5 : movq - 5 3 6 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 3 8 cmpq % rax , - 5 6 (% rbp ) jl . L 6 5 . L 3 8 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 5 : movq - 5 4 4 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 8 0 (% rbp ) movq - 4 8 8 (% rbp ), % r 1 2 movq - 6 1 6 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 4 0 cmpq % rax , - 7 2 (% rbp ) jge . L 4 0 movq - 6 2 4 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % r 1 3 d leaq 1 (% r 1 2 ), % rdx movq - 4 8 0 (% rbp ), % rcx movq % rdx , % rsi movq % rcx , % rax cmpq % rax , % rsi ja . L 4 1 jmp . L 6 6 . L 4 0 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : . LBB 4 6 : movq - 5 3 6 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 4 3 cmpq % rax , - 5 6 (% rbp ) jl . L 6 7 . L 4 3 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 7 : movq - 5 4 4 (% rbp ), % rdi movq - 5 6 (% rbp ), % rsi movq % rsi , % rax addq % rax , % rax addq % rsi , % rax salq $ 3 , % rax leaq (% rdi ,% rax ), % rbx movq - 4 9 6 (% rbp ), % rsi leaq - 1 9 2 (% rbp ), % rax movq % rdx , % r 9 movq % rcx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq uint 8 .. d (% rip ), % rsi movq % rax , % rdi call runtime . growslice @ PLT movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 5 6 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 4 4 8 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 5 . LBB 4 7 : movq - 4 6 4 (% rbp ), % rax movq % rax , (% rbx ) jmp . L 4 6 . L 4 5 : . LBE 4 7 : . LBB 4 8 : movq - 4 6 4 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 4 6 . L 6 6 : . LBE 4 8 : . LBE 4 6 : . LBB 4 9 : movq - 5 3 6 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 4 7 cmpq % rax , - 5 6 (% rbp ) jl . L 6 8 . L 4 7 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 8 : movq - 5 4 4 (% rbp ), % rsi movq - 5 6 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq - 4 9 6 (% rbp ), % rsi movq - 4 8 0 (% rbp ), % rcx movq % rsi , (% rax ) movq % rdx , 8 (% rax ) movq % rcx , 1 6 (% rax ) . L 4 6 : . LBE 4 9 : movq - 5 3 6 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 4 9 cmpq % rax , - 5 6 (% rbp ) jl . L 6 9 . L 4 9 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 9 : movq - 5 4 4 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 8 0 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq % r 1 2 , % rdx addq % rdx , % rax movb % r 1 3 b , (% rax ) . LBB 5 0 : cmpb $ 0 , - 5 7 (% rbp ) je . L 5 1 . LBB 5 1 : addq $ 1 , - 5 6 (% rbp ) . LBB 5 2 : movq - 6 3 2 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 5 6 (% rbp ) jne . L 5 2 . LBB 5 3 : movb $ 0 , - 5 7 (% rbp ) jmp . L 5 2 . L 5 1 : . LBE 5 3 : . LBE 5 2 : . LBE 5 1 : . LBB 5 4 : subq $ 1 , - 5 6 (% rbp ) . LBB 5 5 : cmpq $ 0 , - 5 6 (% rbp ) jne . L 5 2 . LBB 5 6 : movb $ 1 , - 5 7 (% rbp ) . L 5 2 : . LBE 5 6 : . LBE 5 5 : . LBE 5 4 : . LBE 5 0 : . LBE 4 5 : . LBB 5 7 : addq $ 1 , - 7 2 (% rbp ) . L 3 7 : . LBE 5 7 : movq - 6 1 6 (% rbp ), % rax cmpq % rax , - 7 2 (% rbp ) jl . L 7 3 . LBE 4 3 : . LBE 4 2 : leaq type ... 6 . 7 . 6 . 7 uint 8 (% rip ), % r 1 4 leaq type ... 6 . 7 . 6 . 7 uint 8 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 8 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 5 . LBB 5 8 : movq - 4 0 8 (% rbp ), % rcx movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 8 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 5 8 : jmp . L 5 6 . L 5 5 : . LBB 5 9 : movq - 4 0 8 (% rbp ), % rax leaq - 4 0 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 . 6 . 7 uint 8 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 6 : . LBE 5 9 : movq - 4 0 8 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 3 6 8 (% rbp ) movq % r 1 5 , - 3 6 0 (% rbp ) leaq - 3 6 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 1 , - 1 5 2 (% rbp ) movq $ 1 , - 1 4 4 (% rbp ) leaq - 1 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) leaq - 3 5 2 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) movq $ 0 , - 5 6 8 (% rbp ) movq $ 0 , - 5 6 0 (% rbp ) . LBB 6 0 : movq $ 0 , - 6 0 8 (% rbp ) movq $ 0 , - 6 0 0 (% rbp ) movq $ 0 , - 5 9 2 (% rbp ) . LBB 6 1 : . LBB 6 2 : . LBB 6 3 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 6 3 : jmp . L 5 7 . L 7 4 : . LBB 6 4 : nop . LBE 6 4 : . LBB 6 5 : . LBB 6 6 : movq - 3 1 2 (% rbp ), % rax testq % rbx , % rbx js . L 5 8 cmpq % rax , % rbx jge . L 5 8 movq - 3 2 0 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 3 6 (% rbp ) . LBE 6 6 : . LBB 6 7 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 6 0 8 (% rbp ) movq % rdx , - 6 0 0 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) . LBE 6 7 : . LBB 6 8 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 2 movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 leaq (% r 1 2 ,% r 1 3 ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 5 9 jmp . L 7 1 . L 5 8 : . LBE 6 8 : . LBB 7 1 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 5 9 : . LBE 7 1 : . LBB 7 2 : . LBB 6 9 : movq - 2 5 6 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq uint 8 .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) . LBE 6 9 : jmp . L 6 1 . L 7 1 : . LBB 7 0 : movq - 2 5 6 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rdx movq % rcx , - 5 7 6 (% rbp ) movq % rax , - 5 6 8 (% rbp ) movq % rdx , - 5 6 0 (% rbp ) . L 6 1 : . LBE 7 0 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq % r 1 3 , % rdx movq - 2 2 4 (% rbp ), % rax movq - 2 5 6 (% rbp ), % rcx movq % r 1 2 , % rsi addq % rsi , % rcx movq % rax , % rsi movq % rcx , % rdi call memmove @ PLT . LBE 7 2 : . LBE 6 5 : . LBB 7 3 : addq $ 1 , % rbx . L 5 7 : . LBE 7 3 : cmpq % r 1 4 , % rbx jl . L 7 4 . LBE 6 2 : . LBE 6 1 : . LBE 6 0 : . LBB 7 4 : subq $ 8 , % rsp pushq - 5 6 0 (% rbp ) pushq - 5 6 8 (% rbp ) pushq - 5 7 6 (% rbp ) movl $ 0 , % edi call runtime . slicebytetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx . L 6 4 : . LBE 7 4 : . LBE 3 4 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 6 1 movl $ 2 4 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 6 1 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 3 2 , % rsp movq 2 4 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 4 0 (% rbp ) movq % rbx , - 2 3 2 (% rbp ) movq % rbx , - 2 2 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jle . L 5 9 . LBE 2 : movq 2 4 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , - 4 8 (% rbp ) movq 3 2 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 4 cmpq % rax , - 4 8 (% rbp ) jg . L 4 cmpq $ 0 , - 4 8 (% rbp ) jns . L 5 jmp . L 4 6 . L 4 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 4 6 : movq - 4 8 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 5 : movq 1 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) call go . merge . sort addq $ 3 2 , % rsp movq 3 2 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 7 cmpq % rax , - 4 8 (% rbp ) jle . L 4 7 . L 7 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 4 7 : movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax cmpq % rax , - 4 8 (% rbp ) je . L 9 movq - 4 8 (% rbp ), % rax salq $ 3 , % rax jmp . L 1 0 . L 9 : movl $ 0 , % eax . L 1 0 : addq % rdx , % rax movq % rax , - 8 0 (% rbp ) movq 2 4 (% rbp ), % rax subq - 4 8 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax subq - 4 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) call go . merge . sort addq $ 3 2 , % rsp . LBB 4 : movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 1 cmpq % rdx , % rax jl . L 4 8 . L 1 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 4 8 (% rbp ) js . L 1 3 cmpq % rdx , - 4 8 (% rbp ) jl . L 4 9 . L 1 3 : movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jle . L 6 0 . LBE 4 : movq 3 2 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 6 cmpq % rax , - 4 8 (% rbp ) jg . L 1 6 cmpq $ 0 , - 4 8 (% rbp ) jns . L 1 7 jmp . L 5 0 . L 1 6 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 5 0 : movq - 4 8 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 7 : movq 1 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 2 0 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 3 2 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx cmpq % rax , % rdx cmovle % rdx , % rax leaq 0 (,% rax , 8 ), % rdx movq - 2 0 8 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memmove @ PLT movq $ 0 , - 2 4 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . LBB 6 : movq $ 0 , - 4 0 (% rbp ) . L 4 4 : . LBB 7 : . LBB 8 : . LBB 9 : movq - 2 3 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 9 cmpq % rax , - 2 4 (% rbp ) jl . L 5 1 . L 1 9 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 1 cmpq % rax , - 3 2 (% rbp ) jl . L 5 2 . L 2 1 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : movq - 2 4 0 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jg . L 2 3 . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 4 cmpq % rax , - 4 0 (% rbp ) jl . L 5 3 . L 2 4 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 3 : movq - 2 3 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 6 cmpq % rax , - 2 4 (% rbp ) jl . L 5 4 . L 2 6 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : movq - 2 4 0 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) addq $ 1 , - 2 4 (% rbp ) . LBB 1 1 : movq - 2 4 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jne . L 2 8 . LBB 1 2 : jmp . L 2 9 . L 2 3 : . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : . LBB 1 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 0 cmpq % rax , - 4 0 (% rbp ) jl . L 5 5 . L 3 0 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 2 cmpq % rax , - 3 2 (% rbp ) jl . L 5 6 . L 3 2 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 6 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) addq $ 1 , - 3 2 (% rbp ) . LBB 1 4 : movq 2 4 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) jne . L 2 8 . LBB 1 5 : movq - 4 0 (% rbp ), % rax addq $ 1 , % rax movq 3 2 (% rbp ), % rdx testq % rax , % rax js . L 3 4 cmpq % rdx , % rax jle . L 5 7 . L 3 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 5 7 : movq - 2 2 4 (% rbp ), % rdx cmpq $ 0 , - 4 8 (% rbp ) js . L 3 6 cmpq % rdx , - 4 8 (% rbp ) jg . L 3 6 cmpq $ 0 , - 2 4 (% rbp ) jns . L 3 7 jmp . L 3 8 . L 3 6 : movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAcap @ PLT . L 3 7 : movq - 2 4 (% rbp ), % rdx cmpq - 4 8 (% rbp ), % rdx jle . L 5 8 . L 3 8 : movq - 4 8 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 5 8 : movq 1 6 (% rbp ), % rcx movq 3 2 (% rbp ), % rdx cmpq % rdx , % rax je . L 4 0 movq % rax , % rdx salq $ 3 , % rdx jmp . L 4 1 . L 4 0 : movl $ 0 , % edx . L 4 1 : addq % rcx , % rdx movq % rdx , - 1 7 6 (% rbp ) movq 2 4 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 1 6 8 (% rbp ) movq 3 2 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 1 6 0 (% rbp ) movq - 2 4 0 (% rbp ), % rdx movq - 2 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) je . L 4 2 movq - 2 4 (% rbp ), % rax salq $ 3 , % rax jmp . L 4 3 . L 4 2 : movl $ 0 , % eax . L 4 3 : addq % rdx , % rax movq % rax , - 1 4 4 (% rbp ) movq - 4 8 (% rbp ), % rax subq - 2 4 (% rbp ), % rax movq % rax , - 1 3 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax subq - 2 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx cmpq % rax , % rdx cmovle % rdx , % rax leaq 0 (,% rax , 8 ), % rdx movq - 1 4 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memmove @ PLT jmp . L 2 9 . L 2 8 : . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBE 9 : . LBE 8 : . LBB 1 6 : addq $ 1 , - 4 0 (% rbp ) . LBE 1 6 : jmp . L 4 4 . L 2 9 : . LBE 7 : . LBE 6 : jmp . L 1 . L 5 9 : . LBB 1 7 : . LBB 3 : nop jmp . L 1 . L 6 0 : . LBE 3 : . LBE 1 7 : . LBB 1 8 : . LBB 5 : nop . L 1 : . LBE 5 : . LBE 1 8 : movq - 8 (% rbp ), % rbx leave ret
. LFB 1 : leaq - 3 6 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 4 movl $ 3 6 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 1 2 , % rsp movq % rdi , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 2 6 : movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) . LBB 2 7 : . LBB 2 8 : . LBB 2 9 : movq go . day 4 5 0 . testcases (% rip ), % rax movq 8 + go . day 4 5 0 . testcases (% rip ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 + go . day 4 5 0 . testcases (% rip ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movl $ 0 , % ebx . LBE 2 9 : jmp . L 2 2 . L 3 3 : . LBB 3 0 : nop . LBE 3 0 : . LBB 3 1 : . LBB 3 2 : movq - 2 3 2 (% rbp ), % rax testq % rbx , % rbx js . L 2 3 cmpq % rax , % rbx jge . L 2 3 movq - 2 4 0 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 5 6 (% rbp ) . LBE 3 2 : . LBB 3 3 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 3 3 : . LBB 3 4 : . LBB 3 5 : movq - 3 0 4 (% rbp ), % rdx movq - 2 9 6 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . day 4 5 0 . WildcardParens movb % al , - 4 9 (% rbp ) movzbl - 2 8 8 (% rbp ), % eax cmpb % al , - 4 9 (% rbp ) jne . L 2 4 jmp . L 2 5 . L 2 3 : . LBE 3 5 : . LBE 3 4 : . LBB 4 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : . LBE 4 2 : . LBB 4 3 : . LBB 4 1 : . LBB 3 6 : leaq string .. d (% rip ), % rax movq % rax , - 3 5 2 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 6 . LBB 3 7 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 3 7 : jmp . L 2 7 . L 2 6 : . LBB 3 8 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 7 : . LBE 3 8 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) leaq bool .. d (% rip ), % rax movq % rax , - 3 3 6 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 1 5 2 (% rbp ), % rax movzbl - 2 8 8 (% rbp ), % edx movb % dl , (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 3 2 8 (% rbp ) leaq bool .. d (% rip ), % r 1 4 leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 4 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movzbl - 4 9 (% rbp ), % edx movb % dl , (% rax ) movq - 1 4 4 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 3 5 2 (% rbp ), % xmm 0 movups % xmm 0 , - 1 2 8 (% rbp ) movdqa - 3 3 6 (% rbp ), % xmm 1 movups % xmm 1 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 8 . LBB 3 9 : movq - 1 3 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) . LBE 3 9 : jmp . L 2 9 . L 2 8 : . LBB 4 0 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 9 : . LBE 4 0 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 1 9 (% rip ), % r 1 2 movl $ 2 7 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 3 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 2 5 : . LBE 3 6 : . LBE 4 1 : . LBE 4 3 : . LBE 3 1 : . LBB 4 4 : addq $ 1 , % rbx . L 2 2 : . LBE 4 4 : cmpq - 3 2 0 (% rbp ), % rbx jl . L 3 3 . LBE 2 8 : . LBE 2 7 : . LBE 2 6 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 6 2 movl $ 8 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 2 : ret . L 6 2 : pushq % rbp movq % rsp , % rbp subq $ 8 0 , % rsp movq % rdi , - 7 2 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 4 5 : movq $ 0 , - 8 (% rbp ) movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . LBB 4 6 : . LBB 4 7 : jmp . L 4 6 . L 6 1 : . LBB 4 8 : nop . LBE 4 8 : . LBB 4 9 : movq - 1 6 (% rbp ), % rax subq - 8 (% rbp ), % rax movq % rax , % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rax sarq $ 6 3 , % rax subq % rax , % rdx movq - 8 (% rbp ), % rax addq % rdx , % rax movq % rax , - 3 2 (% rbp ) movq - 1 6 (% rbp ), % rax subq - 8 (% rbp ), % rax movq % rax , % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rax sarq $ 6 3 , % rax subq % rax , % rdx movq - 1 6 (% rbp ), % rax subq % rdx , % rax movq % rax , - 4 0 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 4 7 cmpq % rax , - 3 2 (% rbp ) jl . L 5 8 . L 4 7 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 8 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 4 8 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 4 9 cmpq % rax , - 4 0 (% rbp ) jl . L 5 9 . L 4 9 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 9 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) . LBB 5 0 : movq - 4 8 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jne . L 5 1 . LBB 5 1 : . LBB 5 2 : movq - 3 2 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 5 2 . L 5 1 : . LBE 5 2 : . LBE 5 1 : . LBB 5 3 : . LBB 5 4 : movq - 5 6 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jne . L 5 3 . LBB 5 5 : . LBB 5 6 : movq - 4 0 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 5 2 . L 5 3 : . LBE 5 6 : . LBE 5 5 : . LBE 5 4 : . LBE 5 3 : . LBE 5 0 : . LBB 5 7 : movq - 4 8 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jge . L 5 4 . LBB 5 8 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 8 (% rbp ) . LBE 5 8 : jmp . L 4 6 . L 5 4 : . LBB 5 9 : . LBB 6 0 : movq - 5 6 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jle . L 5 5 . LBB 6 1 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . LBE 6 1 : jmp . L 4 6 . L 5 5 : . LBB 6 2 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 8 (% rbp ) movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . L 4 6 : . LBE 6 2 : . LBE 6 0 : . LBE 5 9 : . LBE 5 7 : . LBE 4 9 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jle . L 6 1 . LBE 4 7 : . LBE 4 6 : . LBB 6 3 : movq $- 1 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 5 2 : . LBE 6 3 : . LBE 4 5 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 1 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 1 : pushq % rbp movq % rsp , % rbp movq % rdi , - 4 0 (% rbp ) movb $ 0 , - 1 7 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 4 0 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movb $ 0 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) movq - 4 0 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) . LBB 6 : . LBB 7 : jmp . L 4 . L 1 0 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq - 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 6 (% rbp ) movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) . LBB 1 0 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jne . L 4 . LBB 1 1 : . LBB 1 2 : movb $ 1 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax jmp . L 3 . L 4 : . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 1 3 : . LBB 1 4 : cmpq $ 0 , - 1 6 (% rbp ) setne % al testb % al , % al je . L 5 . LBB 1 5 : cmpq $ 0 , - 8 (% rbp ) setne % al . L 5 : . LBE 1 5 : . LBE 1 4 : testb % al , % al je . L 6 . LBB 1 6 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax setne % al . L 6 : . LBE 1 6 : . LBE 1 3 : testb % al , % al jne . L 1 0 . LBE 7 : . LBE 6 : . LBB 1 7 : movb $ 0 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax . L 3 : . LBE 1 7 : . LBE 2 : popq % rbp ret
. LFB 3 : leaq - 4 2 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 0 movl $ 4 2 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 : ret . L 6 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 7 6 , % rsp movq % rdi , - 3 6 0 (% rbp ) movq - 3 6 0 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT movl $ 9 9 , % edi call go . day 6 6 . NewBiasedCoin movq % rax , - 7 2 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) leaq - 2 8 8 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq $ 2 , - 3 1 2 (% rbp ) movq $ 2 , - 3 0 4 (% rbp ) . LBB 2 1 : movq $ 0 , - 5 6 (% rbp ) . LBB 2 2 : jmp . L 2 4 . L 5 8 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movq - 7 2 (% rbp ), % rax movq % rax , % rdi call go . day 6 6 . BiasedCoin . Toss movq - 3 1 2 (% rbp ), % rdx testq % rax , % rax js . L 2 5 cmpq % rdx , % rax jge . L 2 5 movq - 3 1 2 (% rbp ), % rdx testq % rax , % rax jns . L 2 6 jmp . L 2 7 . L 2 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : cmpq % rdx , % rax jl . L 5 4 . L 2 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : movq - 3 2 0 (% rbp ), % rdx movq % rax , % rcx salq $ 3 , % rcx addq % rcx , % rdx movq (% rdx ), % rdx movq - 3 2 0 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax addq $ 1 , % rdx movq % rdx , (% rax ) . LBE 2 5 : . LBE 2 4 : . LBB 2 6 : addq $ 1 , - 5 6 (% rbp ) . L 2 4 : . LBE 2 6 : cmpq $ 9 9 9 9 9 , - 5 6 (% rbp ) jle . L 5 8 . LBE 2 2 : . LBE 2 1 : . LBB 2 7 : movq - 3 1 2 (% rbp ), % rax cmpq $ 1 , % rax jg . L 3 1 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 3 1 : movq - 3 2 0 (% rbp ), % rax addq $ 8 , % rax movq (% rax ), % rax testq % rax , % rax jne . L 3 2 . LBB 2 8 : movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 3 6 , - 3 7 6 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 3 6 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 7 6 (% rbp ) pushq - 1 8 4 (% rbp ) pushq - 1 9 2 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 3 2 : . LBE 2 8 : . LBE 2 7 : . LBB 2 9 : movq - 3 1 2 (% rbp ), % rax testq % rax , % rax jg . L 3 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 3 : movq - 3 1 2 (% rbp ), % rax cmpq $ 1 , % rax jg . L 3 4 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 3 4 : movq - 3 2 0 (% rbp ), % rax movq (% rax ), % rax movq - 3 2 0 (% rbp ), % rdx movq 8 (% rdx ), % rbx cmpq $- 1 , % rbx jne . L 3 5 negq % rax jmp . L 3 6 . L 3 5 : testq % rbx , % rbx jne . L 3 7 call runtime . panicdivide @ PLT . L 3 7 : cqto idivq % rbx . L 3 6 : movq % rax , - 8 0 (% rbp ) cmpq $ 8 9 , - 8 0 (% rbp ) jg . L 3 8 . LBB 3 0 : leaq int .. d (% rip ), % rax movq % rax , - 4 1 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 7 2 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 8 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 4 0 8 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movdqa - 4 1 6 (% rbp ), % xmm 2 movups % xmm 2 , - 2 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 9 . LBB 3 1 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 3 1 : jmp . L 4 0 . L 3 9 : . LBB 3 2 : movq - 2 6 4 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 0 : . LBE 3 2 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 1 , - 1 5 2 (% rbp ) movq $ 1 , - 1 4 4 (% rbp ) leaq . LC 2 4 (% rip ), % r 1 4 movl $ 5 8 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 3 6 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 3 8 : . LBE 3 0 : . LBE 2 9 : movq - 7 2 (% rbp ), % rax movq % rax , % rdi call go . day 6 6 . NewFairTosser movq % rax , - 8 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 2 , - 3 4 4 (% rbp ) movq $ 2 , - 3 3 6 (% rbp ) . LBB 3 3 : movq $ 0 , - 6 4 (% rbp ) . LBB 3 4 : jmp . L 4 1 . L 5 9 : . LBB 3 5 : nop . LBE 3 5 : . LBB 3 6 : . LBB 3 7 : movq - 8 8 (% rbp ), % rax movq % rax , % rdi call go . day 6 6 . FairTosser . Toss movq - 3 4 4 (% rbp ), % rdx testq % rax , % rax js . L 4 2 cmpq % rdx , % rax jge . L 4 2 movq - 3 4 4 (% rbp ), % rdx testq % rax , % rax jns . L 4 3 jmp . L 4 4 . L 4 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : cmpq % rdx , % rax jl . L 5 6 . L 4 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 6 : movq - 3 5 2 (% rbp ), % rdx movq % rax , % rcx salq $ 3 , % rcx addq % rcx , % rdx movq (% rdx ), % rdx movq - 3 5 2 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax addq $ 1 , % rdx movq % rdx , (% rax ) . LBE 3 7 : . LBE 3 6 : . LBB 3 8 : addq $ 1 , - 6 4 (% rbp ) . L 4 1 : . LBE 3 8 : cmpq $ 9 9 9 9 9 , - 6 4 (% rbp ) jle . L 5 9 . LBE 3 4 : . LBE 3 3 : . LBB 3 9 : movq - 3 4 4 (% rbp ), % rax testq % rax , % rax jg . L 4 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 8 : movq - 3 4 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 4 9 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 4 9 : movq - 3 5 2 (% rbp ), % rax movq (% rax ), % rax pxor % xmm 0 , % xmm 0 cvtsi 2 sdq % rax , % xmm 0 movq - 3 5 2 (% rbp ), % rax addq $ 8 , % rax movq (% rax ), % rax pxor % xmm 1 , % xmm 1 cvtsi 2 sdq % rax , % xmm 1 divsd % xmm 1 , % xmm 0 movsd % xmm 0 , - 9 6 (% rbp ) . LBB 4 0 : movsd . LC 2 5 (% rip ), % xmm 0 comisd - 9 6 (% rbp ), % xmm 0 seta % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 5 0 . LBB 4 1 : movsd - 9 6 (% rbp ), % xmm 0 comisd . LC 2 6 (% rip ), % xmm 0 seta % al . L 5 0 : . LBE 4 1 : . LBE 4 0 : testb % al , % al je . L 2 3 . LBB 4 2 : leaq float 6 4 .. d (% rip ), % rax movq % rax , - 4 0 0 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 2 4 (% rbp ) movq - 2 2 4 (% rbp ), % rax movsd - 9 6 (% rbp ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 3 9 2 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movdqa - 4 0 0 (% rbp ), % xmm 3 movups % xmm 3 , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 2 . LBB 4 3 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 3 : jmp . L 5 3 . L 5 2 : . LBB 4 4 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 3 : . LBE 4 4 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) leaq . LC 2 7 (% rip ), % r 1 2 movl $ 5 9 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq - 3 6 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 2 3 : . LBE 4 2 : . LBE 3 9 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
leaq - 4 2 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 2 1 movl $ 4 2 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 2 : ret . L 4 2 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 8 4 , % rsp movq % rdi , - 4 0 8 (% rbp ) leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . target . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 8 (% rbp ) leaq . LC 1 0 1 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 5 2 (% rbp ) movq % r 1 3 , - 3 4 4 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 3 6 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 2 , 2 4 (% rax ) movq $ 3 , 3 2 (% rax ) movq - 3 6 0 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq $ 5 , - 3 2 8 (% rbp ) movq $ 5 , - 3 2 0 (% rbp ) movq $ 2 , - 3 1 2 (% rbp ) movq $ 3 , - 3 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 0 7 . LBB 2 7 0 : movq - 3 6 8 (% rbp ), % rax movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 3 0 4 (% rbp ), % rdx movq % rdx , 4 8 (% rax ) . LBE 2 7 0 : jmp . L 4 0 8 . L 4 0 7 : . LBB 2 7 1 : movq - 3 6 8 (% rbp ), % rax leaq - 3 5 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . target . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 0 8 : . LBE 2 7 1 : movq - 3 6 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 1 , - 3 9 2 (% rbp ) movq $ 1 , - 3 8 4 (% rbp ) . LBB 2 7 2 : movq $ 0 , - 4 0 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . target . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 (% rbp ) . LBB 2 7 3 : . LBB 2 7 4 : . LBB 2 7 5 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 2 7 5 : jmp . L 4 0 9 . L 4 2 0 : . LBB 2 7 6 : nop . LBE 2 7 6 : . LBB 2 7 7 : . LBB 2 7 8 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 4 1 0 cmpq % rax , % rbx jge . L 4 1 0 movq - 2 2 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 3 , % rax subq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 8 8 (% rbp ) movq % rdi , - 2 8 0 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 4 8 (% rax ), % rax movq % rax , - 2 4 0 (% rbp ) . LBE 2 7 8 : . LBB 2 7 9 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq % rbx , - 4 0 (% rbp ) movq - 4 8 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 4 1 1 jmp . L 4 1 8 . L 4 1 0 : . LBE 2 7 9 : . LBB 2 8 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 1 : . LBE 2 8 2 : . LBB 2 8 3 : . LBB 2 8 0 : movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 1 4 4 (% rbp ), % rdx movq % rdx , 4 8 (% rax ) jmp . L 4 1 3 . L 4 1 8 : . LBE 2 8 0 : . LBB 2 8 1 : leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . target . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 1 3 : . LBE 2 8 1 : . LBE 2 8 3 : . LBB 2 8 4 : movq - 4 0 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 4 8 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 2 8 (% rbp ) movq % rdi , - 1 2 0 (% rbp ) leaq . LC 1 0 2 (% rip ), % rcx movq % rcx , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) leaq go . Solution . TestBinarySearchRightBound .. func 1 (% rip ), % r 1 4 movq - 4 8 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . target . 0 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq % r 1 4 , - 6 4 (% rbp ) movq % r 1 2 , - 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 1 4 . LBB 2 8 5 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 8 5 : jmp . L 4 1 5 . L 4 1 4 : . LBB 2 8 6 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . target . 0 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 1 5 : . LBE 2 8 6 : movq - 7 2 (% rbp ), % r 1 2 leaq - 1 2 8 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 4 0 8 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 2 8 4 : . LBE 2 7 7 : . LBB 2 8 7 : addq $ 1 , % rbx . L 4 0 9 : . LBE 2 8 7 : cmpq % r 1 3 , % rbx jl . L 4 2 0 . LBE 2 7 4 : . LBE 2 7 3 : . LBE 2 7 2 : addq $ 3 8 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 8 movl $ 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) movq 2 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . LBB 3 : movq $ 0 , - 1 6 (% rbp ) . LBB 4 : jmp . L 2 . L 1 7 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq $ 0 , - 2 4 (% rbp ) . LBB 7 : movq $ 0 , - 3 2 (% rbp ) . LBB 8 : jmp . L 3 . L 1 6 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 4 cmpq % rax , - 3 2 (% rbp ) jl . L 1 3 . L 4 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 1 6 (% rbp ), % rax cmpq $ 6 3 , % rax ja . L 6 movl % eax , % ecx sarq % cl , % rdx movq % rdx , % rax andl $ 1 , % eax jmp . L 7 . L 6 : movq % rdx , % rax shrq $ 6 3 , % rax . L 7 : addq % rax , - 2 4 (% rbp ) . LBE 1 0 : . LBB 1 1 : addq $ 1 , - 3 2 (% rbp ) . L 3 : . LBE 1 1 : movq - 3 2 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 1 6 . LBE 8 : . LBE 7 : movq - 4 8 (% rbp ), % rax subq - 2 4 (% rbp ), % rax imulq - 2 4 (% rbp ), % rax addq % rax , - 8 (% rbp ) . LBE 6 : . LBB 1 2 : addq $ 1 , - 1 6 (% rbp ) . L 2 : . LBE 1 2 : cmpq $ 3 1 , - 1 6 (% rbp ) jle . L 1 7 . LBE 4 : . LBE 3 : . LBB 1 3 : movq - 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 1 3 : . LBE 2 : leave ret
. LFB 1 8 8 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 0 8 8 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 4 0 : ret . L 5 0 8 8 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 5 2 , % rsp movq % rdi , - 1 5 2 (% rbp ) movq % rsi , - 1 6 0 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) . LBB 4 1 3 2 : movq - 1 6 0 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 4 4 (% rbp ) movq % rbx , - 1 3 6 (% rbp ) movq % rbx , - 1 2 8 (% rbp ) . LBB 4 1 3 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 1 3 4 : jmp . L 5 0 7 9 . L 5 0 8 7 : . LBB 4 1 3 5 : nop . LBE 4 1 3 5 : . LBB 4 1 3 6 : movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 5 0 8 0 cmpq % rax , - 2 4 (% rbp ) jl . L 5 0 8 5 . L 5 0 8 0 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 0 8 5 : movq - 1 4 4 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rax , (% rdx ) . LBE 4 1 3 6 : . LBB 4 1 3 7 : addq $ 1 , - 2 4 (% rbp ) . L 5 0 7 9 : . LBE 4 1 3 7 : movq - 1 3 6 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 5 0 8 7 . LBE 4 1 3 4 : . LBE 4 1 3 3 : . LBB 4 1 3 8 : movl $ 0 , % edx movl $ 0 , % esi leaq type ... 6 . 7 string (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 8 (% rbp ) movq $ 0 , - 4 0 (% rbp ) movq $ 0 , - 3 2 (% rbp ) leaq - 8 0 (% rbp ), % rax pushq - 3 2 (% rbp ) pushq - 4 0 (% rbp ) pushq - 4 8 (% rbp ) pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movl $ 0 , % esi movq % rax , % rdi call go . leetcode . helper 5 1 addq $ 4 8 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 5 2 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 1 3 8 : . LBE 4 1 3 2 : movq - 1 5 2 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 8 movl $ 3 1 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 8 0 , % rsp movb $ 0 , - 4 9 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 0 4 (% rbp ) movq % rbx , - 2 9 6 (% rbp ) movq % rbx , - 2 8 8 (% rbp ) . LBB 3 : movq $ 0 , - 7 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 6 : jmp . L 2 . L 4 5 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq % r 1 2 , - 7 2 (% rbp ) . LBB 9 : movq - 6 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 3 cmpq % rax , - 7 2 (% rbp ) jl . L 3 3 . L 3 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq - 3 0 4 (% rbp ), % rsi movq - 7 2 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 2 4 0 (% rbp ) movq % rbx , - 2 3 2 (% rbp ) movq % rbx , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 2 2 4 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 . LBB 1 0 : movq - 2 4 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 6 . L 5 : . LBE 1 0 : . LBB 1 1 : movq - 2 4 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 : . LBE 1 1 : . LBE 9 : . LBE 8 : . LBB 1 2 : addq $ 1 , % r 1 2 . L 2 : . LBE 1 2 : cmpq % r 1 3 , % r 1 2 jl . L 4 5 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 3 : movq - 6 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 1 4 : jmp . L 9 . L 4 7 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 4 0 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 4 8 (% rbp ) . LBB 1 8 : jmp . L 1 0 . L 4 6 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 1 cmpq % rax , - 4 0 (% rbp ) jl . L 3 5 . L 1 1 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 4 0 (% rbp ), % rax addq $ 1 , % rax movq - 2 9 6 (% rbp ), % rdx testq % rax , % rax js . L 1 3 cmpq % rdx , % rax jl . L 3 6 . L 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq - 3 0 4 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 5 cmpq % rax , - 4 8 (% rbp ) jl . L 3 7 . L 1 5 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq - 2 0 8 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx subq % rdx , % rax movq % rax , - 8 0 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 7 cmpq % rax , - 4 8 (% rbp ) jl . L 3 8 . L 1 7 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 9 cmpq % rax , - 4 0 (% rbp ) jl . L 3 9 . L 1 9 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 3 0 4 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 1 6 8 (% rbp ), % rdx testq % rax , % rax js . L 2 1 cmpq % rdx , % rax jl . L 4 0 . L 2 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq 1 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq - 1 7 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rcx movq % rdx , % rax subq % rcx , % rax movq % rax , - 8 8 (% rbp ) movq - 8 8 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call main . max movq % rax , % rsi movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 3 cmpq % rax , - 4 0 (% rbp ) jl . L 4 1 . L 2 3 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq - 3 0 4 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 5 cmpq % rax , - 4 8 (% rbp ) jge . L 2 5 movq - 1 4 4 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . LBE 2 0 : . LBB 2 1 : addq $ 1 , - 4 8 (% rbp ) jmp . L 1 0 . L 2 5 : . LBE 2 1 : . LBB 2 2 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : . LBE 2 2 : movq - 4 8 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax jl . L 4 6 . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 2 3 : subq $ 1 , - 4 0 (% rbp ) . L 9 : . LBE 2 3 : cmpq $ 0 , - 4 0 (% rbp ) jns . L 4 7 . LBE 1 4 : . LBE 1 3 : . LBB 2 4 : movq - 2 9 6 (% rbp ), % rax testq % rax , % rax jg . L 3 0 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 0 : movq - 3 0 4 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 6 4 (% rbp ), % rax subq $ 1 , % rax movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 3 1 cmpq % rdx , % rax jge . L 3 1 movq - 1 1 2 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax notq % rax shrq $ 6 3 , % rax movb % al , - 4 9 (% rbp ) movzbl - 4 9 (% rbp ), % eax jmp . L 4 4 . L 3 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : . LBE 2 4 : . LBE 2 : addq $ 2 8 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 8 movl $ 3 4 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 3 2 0 , % rsp movq % rdi , - 3 2 8 (% rbp ) leaq . LC 0 (% rip ), % r 8 movl $ 8 , % r 9 d movq % r 8 , - 2 5 6 (% rbp ) movq % r 9 , - 2 4 8 (% rbp ) movb $ 1 , - 2 4 0 (% rbp ) movb $ 1 , - 2 3 9 (% rbp ) leaq . LC 0 (% rip ), % rcx movl $ 8 , % ebx movq % rcx , - 2 3 2 (% rbp ) movq % rbx , - 2 2 4 (% rbp ) movb $ 1 , - 2 1 6 (% rbp ) movb $ 1 , - 2 1 5 (% rbp ) leaq . LC 0 (% rip ), % rax movl $ 8 , % edx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movb $ 0 , - 1 9 2 (% rbp ) movb $ 0 , - 1 9 1 (% rbp ) leaq - 2 5 6 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 3 , - 2 8 0 (% rbp ) movq $ 3 , - 2 7 2 (% rbp ) . LBB 2 : movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 7 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : movq - 1 3 6 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 1 4 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) . LBE 8 : . LBB 9 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq % rbx , - 2 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 2 4 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 3 2 0 (% rbp ), % rsi movq - 3 1 2 (% rbp ), % rdi movq % rsi , - 8 0 (% rbp ) movq % rdi , - 7 2 (% rbp ) leaq . LC 1 (% rip ), % rcx movq % rcx , - 6 4 (% rbp ) movq $ 1 , - 5 6 (% rbp ) movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) leaq - 8 0 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 3 2 8 (% rbp ), % rax leaq go . Solution . TestSolution .. func 1 .. f (% rip ), % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 0 : . LBE 7 : . LBB 1 2 : addq $ 1 , % rbx jmp . L 2 . L 3 : . LBE 1 2 : . LBB 1 3 : . LBB 1 1 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 1 : . LBE 1 3 : cmpq % r 1 2 , % rbx jl . L 7 . LBE 4 : . LBE 3 : . LBE 2 : addq $ 3 2 0 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 5 0 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 5 movl $ 5 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 5 6 , % rsp movq % rdi , - 4 2 4 (% rbp ) movq % rdx , % rcx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) movq $ 0 , - 2 7 2 (% rbp ) . LBB 2 : movq - 4 4 0 (% rbp ), % rdx movl $ 1 , % eax leaq - 1 (% rdx ), % rdi movq - 4 4 0 (% rbp ), % rdx testq % rdi , % rdi js . L 2 cmpq % rdx , % rdi jg . L 2 testq % rax , % rax jns . L 3 jmp . L 4 . L 2 : movq % rdx , % rsi call runtime . goPanicSliceAlen @ PLT . L 3 : cmpq % rdi , % rax jg . L 4 movq - 4 4 8 (% rbp ), % rdx cmpq % rax , % rdi jne . L 5 jmp . L 3 5 . L 4 : movq % rdi , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 5 : movq % rax , % rcx jmp . L 7 . L 3 5 : movl $ 0 , % ecx . L 7 : addq % rdx , % rcx subq % rax , % rdi movq % rdi , % rdx movq % rcx , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) leaq type ... 6 0 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) . LBB 3 : movq $ 1 , - 5 6 (% rbp ) . LBB 4 : jmp . L 8 . L 4 4 : . LBB 5 : nop . LBE 5 : . LBB 6 : movl $ 0 , % eax movq - 4 4 0 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 9 cmpq % rdx , - 5 6 (% rbp ) jg . L 9 testq % rax , % rax jns . L 1 0 jmp . L 1 1 . L 9 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAlen @ PLT . L 1 0 : cmpq - 5 6 (% rbp ), % rax jg . L 1 1 movq - 4 4 8 (% rbp ), % rdx cmpq % rax , - 5 6 (% rbp ) jne . L 1 2 jmp . L 3 6 . L 1 1 : movq - 5 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 1 2 : movq % rax , % rcx jmp . L 1 4 . L 3 6 : movl $ 0 , % ecx . L 1 4 : addq % rcx , % rdx movq % rdx , - 4 8 0 (% rbp ) movq - 5 6 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 4 7 2 (% rbp ) leaq - 3 5 2 (% rbp ), % rax movq - 4 8 0 (% rbp ), % rcx movq - 4 7 2 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx movq % rax , % rdi call go . leetcode 0 8 1 6 . helper movq - 4 4 0 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 5 cmpq % rax , - 5 6 (% rbp ) jg . L 1 5 movq - 4 4 8 (% rbp ), % rdx movq - 4 4 0 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 1 6 jmp . L 3 7 . L 1 5 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 1 6 : movq - 5 6 (% rbp ), % rax jmp . L 1 8 . L 3 7 : movl $ 0 , % eax . L 1 8 : addq % rdx , % rax movq % rax , - 4 6 4 (% rbp ) movq - 4 4 0 (% rbp ), % rax subq - 5 6 (% rbp ), % rax movq % rax , - 4 5 6 (% rbp ) leaq - 3 8 4 (% rbp ), % rax movq - 4 6 4 (% rbp ), % rcx movq - 4 5 6 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx movq % rax , % rdi call go . leetcode 0 8 1 6 . helper . LBB 7 : movq $ 0 , - 4 0 0 (% rbp ) movq $ 0 , - 3 9 2 (% rbp ) . LBB 8 : . LBB 9 : . LBB 1 0 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movl $ 0 , % ebx . LBE 1 0 : jmp . L 1 9 . L 4 3 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : . LBB 1 3 : movq - 2 4 8 (% rbp ), % rax testq % rbx , % rbx js . L 2 0 cmpq % rax , % rbx jge . L 2 0 movq - 2 5 6 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 1 3 : . LBB 1 4 : movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) . LBB 1 7 : . LBB 1 8 : . LBB 1 9 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rax movq % rax , - 4 8 8 (% rbp ) movl $ 0 , % r 1 4 d . LBE 1 9 : jmp . L 2 1 . L 2 0 : . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBB 3 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : . LBE 3 5 : . LBB 3 6 : . LBB 3 4 : . LBB 3 3 : . LBB 3 2 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 2 1 6 (% rbp ), % rax testq % r 1 4 , % r 1 4 js . L 2 2 cmpq % rax , % r 1 4 jge . L 2 2 movq - 2 2 4 (% rbp ), % rax movq % r 1 4 , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 2 2 : . LBB 2 3 : movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) . LBE 2 3 : . LBB 2 4 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % r 1 5 leaq . LC 5 (% rip ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 1 , - 1 5 2 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) leaq . LC 6 (% rip ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 2 , - 1 2 0 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq . LC 7 (% rip ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) leaq - 1 6 0 (% rbp ), % rax movl $ 5 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq 1 (% r 1 5 ), % rcx movq - 1 7 6 (% rbp ), % rsi movq % rcx , % rdx movq % rsi , % rax cmpq % rax , % rdx ja . L 2 3 jmp . L 3 8 . L 2 2 : . LBE 2 4 : . LBB 2 9 : movq % rax , % rsi movq % r 1 4 , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : . LBE 2 9 : . LBB 3 0 : . LBB 2 5 : movq - 1 9 2 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdi movq % rcx , % r 9 movq % rsi , % r 8 movq % r 1 5 , % rcx movq % rax , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) . LBE 2 5 : jmp . L 2 5 . L 3 8 : . LBB 2 6 : movq - 1 9 2 (% rbp ), % rdx movq - 1 7 6 (% rbp ), % rax movq % rdx , - 3 2 0 (% rbp ) movq % rcx , - 3 1 2 (% rbp ) movq % rax , - 3 0 4 (% rbp ) . L 2 5 : . LBE 2 6 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % r 1 5 , % rdx salq $ 4 , % rdx addq % rdx , % rax movq % r 1 3 , % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 6 . LBB 2 7 : movq % r 1 2 , % rdx movq % rdx , (% rax ) jmp . L 2 7 . L 2 6 : . LBE 2 7 : . LBB 2 8 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 7 : . LBE 2 8 : . LBE 3 0 : . LBE 2 1 : . LBB 3 1 : addq $ 1 , % r 1 4 . L 2 1 : . LBE 3 1 : cmpq - 4 8 8 (% rbp ), % r 1 4 jl . L 4 2 . LBE 3 2 : . LBE 3 3 : . LBE 3 4 : . LBE 3 6 : . LBE 1 2 : . LBB 3 7 : addq $ 1 , % rbx . L 1 9 : . LBE 3 7 : cmpq - 4 3 2 (% rbp ), % rbx jl . L 4 3 . LBE 9 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 3 8 : addq $ 1 , - 5 6 (% rbp ) . L 8 : . LBE 3 8 : movq - 4 4 0 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jl . L 4 4 . LBE 4 : . LBE 3 : . LBB 3 9 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 4 2 4 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 7 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 9 : . LBE 2 : movq - 4 2 4 (% rbp ), % rax addq $ 4 5 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : leaq - 9 8 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 6 movl $ 9 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 3 6 , % rsp movq % rdi , - 9 3 6 (% rbp ) movq $ 2 , - 7 8 4 (% rbp ) movq $ 3 , - 7 7 6 (% rbp ) movq $ 4 , - 7 6 8 (% rbp ) movq $ 5 , - 7 6 0 (% rbp ) movq $ 7 , - 7 5 2 (% rbp ) movq $ 9 , - 7 4 4 (% rbp ) movq $ 1 0 , - 7 3 6 (% rbp ) movq $ 2 , - 7 2 0 (% rbp ) movq $ 4 , - 7 1 2 (% rbp ) movq $ 6 , - 7 0 4 (% rbp ) movq $ 8 , - 6 9 6 (% rbp ) movq $ 1 0 , - 6 8 8 (% rbp ) movq $ 1 4 , - 6 8 0 (% rbp ) movq $ 2 , - 6 7 2 (% rbp ) movq $ 3 , - 6 6 4 (% rbp ) movq $ 1 0 , - 6 5 6 (% rbp ) leaq - 7 8 4 (% rbp ), % rcx movq % rcx , - 6 4 8 (% rbp ) movq $ 7 , - 6 4 0 (% rbp ) movq $ 7 , - 6 3 2 (% rbp ) movq $ 3 , - 6 2 4 (% rbp ) movq $ 5 , - 6 1 6 (% rbp ) movq $ 1 5 , - 6 0 8 (% rbp ) leaq - 7 2 0 (% rbp ), % rcx movq % rcx , - 6 0 0 (% rbp ) movq $ 6 , - 5 9 2 (% rbp ) movq $ 6 , - 5 8 4 (% rbp ) leaq - 6 7 2 (% rbp ), % rcx movq % rcx , - 8 1 6 (% rbp ) movq $ 2 , - 8 0 8 (% rbp ) movq $ 2 , - 8 0 0 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 3 5 (% rip ), % rax movl $ 6 9 , % edx leaq - 2 0 8 (% rbp ), % rcx movq % rax , % rsi movq % rdx , % rdi movq % rdx , % rax subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdx movq % rcx , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) . LBB 3 5 : movq $ 0 , - 9 2 8 (% rbp ) movq $ 0 , - 9 2 0 (% rbp ) movq $ 0 , - 9 1 2 (% rbp ) movq $ 0 , - 9 0 4 (% rbp ) movq $ 0 , - 8 9 6 (% rbp ) movq $ 0 , - 8 8 8 (% rbp ) . LBB 3 6 : . LBB 3 7 : . LBB 3 8 : movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq - 4 8 8 (% rbp ), % rax movq % rax , - 9 4 4 (% rbp ) movl $ 0 , % ebx . LBE 3 8 : jmp . L 2 6 . L 3 5 : . LBB 3 9 : nop . LBE 3 9 : . LBB 4 0 : . LBB 4 1 : movq - 4 8 8 (% rbp ), % rax testq % rbx , % rbx js . L 2 7 cmpq % rax , % rbx jge . L 2 7 movq - 4 9 6 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 5 4 4 (% rbp ) movq % rdi , - 5 3 6 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 5 2 8 (% rbp ) movq % rdi , - 5 2 0 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) . LBE 4 1 : . LBB 4 2 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 9 2 8 (% rbp ) movq % rdx , - 9 2 0 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 9 1 2 (% rbp ) movq % rdx , - 9 0 4 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 8 9 6 (% rbp ) movq % rdx , - 8 8 8 (% rbp ) . LBE 4 2 : . LBB 4 3 : movq - 9 0 4 (% rbp ), % rax movq - 8 9 6 (% rbp ), % rdx movq % rax , - 8 4 8 (% rbp ) movq % rdx , - 8 4 0 (% rbp ) movq - 8 8 8 (% rbp ), % rax movq % rax , - 8 3 2 (% rbp ) movq - 9 2 8 (% rbp ), % rax movq - 9 2 0 (% rbp ), % rdx movq % rax , - 8 8 0 (% rbp ) movq % rdx , - 8 7 2 (% rbp ) movq - 9 1 2 (% rbp ), % rax movq % rax , - 8 6 4 (% rbp ) movq - 8 6 4 (% rbp ), % rcx movq - 8 7 2 (% rbp ), % rdx movq - 8 8 0 (% rbp ), % rsi leaq - 3 8 4 (% rbp ), % rax movq % rax , % rdi call go . leetcode . powerfulIntegers leaq go . leetcode .. go . leetcode . para 9 7 0 .. d (% rip ), % rax movq % rax , - 9 7 6 (% rbp ) leaq go . leetcode .. go . leetcode . para 9 7 0 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 5 2 (% rbp ) movq - 3 5 2 (% rbp ), % rcx movq - 8 8 0 (% rbp ), % rax movq - 8 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 8 6 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 9 6 8 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 9 6 0 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 2 8 jmp . L 3 3 . L 2 7 : . LBE 4 3 : . LBB 4 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : . LBE 4 6 : . LBB 4 7 : . LBB 4 4 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 4 : jmp . L 3 0 . L 3 3 : . LBB 4 5 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 0 : . LBE 4 5 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 9 5 2 (% rbp ) movdqa - 9 7 6 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 9 6 0 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 3 6 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) . LBE 4 7 : . LBE 4 0 : . LBB 4 8 : addq $ 1 , % rbx . L 2 6 : . LBE 4 8 : cmpq - 9 4 4 (% rbp ), % rbx jl . L 3 5 . LBE 3 7 : . LBE 3 6 : . LBE 3 5 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 3 7 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 7 movl $ 1 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 subq $ 1 6 0 , % rsp leaq . LC 2 (% rip ), % rax movl $ 1 1 , % edx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 2 4 (% rbp ) . LBB 2 : . LBB 3 : jmp . L 2 . L 2 5 : . LBB 4 : nop . LBE 4 : . LBB 5 : subq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 5 : . LBB 6 : movq - 2 4 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax testb % al , % al je . L 3 . LBB 7 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 cmpq % rax , - 2 4 (% rbp ) jge . L 4 movq - 1 7 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % edx leaq - 1 5 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . intstring @ PLT movq % rdx , % rcx cmpq $ 1 , % rcx je . L 5 jmp . L 2 1 . L 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 : movq % rax , % rsi leaq . LC 3 (% rip ), % rcx cmpq % rcx , % rsi jne . L 7 movl $ 1 , % eax jmp . L 3 . L 7 : movzbl (% rax ), % eax movzbl % al , % eax leaq . LC 3 (% rip ), % rdx movzbl (% rdx ), % edx movzbl % dl , % edx subl % edx , % eax testl % eax , % eax sete % al jmp . L 3 . L 2 1 : movl $ 0 , % eax . L 3 : . LBE 7 : . LBE 6 : testb % al , % al jne . L 2 5 . LBE 3 : . LBE 2 : movq $ 0 , - 3 2 (% rbp ) . LBB 8 : . LBB 9 : jmp . L 1 2 . L 2 6 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : addq $ 1 , - 3 2 (% rbp ) subq $ 1 , - 2 4 (% rbp ) . L 1 2 : . LBE 1 1 : . LBB 1 2 : movq - 2 4 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax testb % al , % al je . L 1 3 . LBB 1 3 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 4 cmpq % rax , - 2 4 (% rbp ) jge . L 1 4 movq - 1 7 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % edx leaq - 1 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . intstring @ PLT movq % rdx , % rcx cmpq $ 1 , % rcx jne . L 1 5 jmp . L 2 3 . L 1 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : movq % rax , % rsi leaq . LC 3 (% rip ), % rcx cmpq % rcx , % rsi je . L 1 7 movzbl (% rax ), % eax movzbl % al , % eax leaq . LC 3 (% rip ), % rdx movzbl (% rdx ), % edx movzbl % dl , % edx subl % edx , % eax testl % eax , % eax je . L 1 7 . L 1 5 : movl $ 1 , % eax jmp . L 1 3 . L 1 7 : movl $ 0 , % eax . L 1 3 : . LBE 1 3 : . LBE 1 2 : testb % al , % al jne . L 2 6 . LBE 9 : . LBE 8 : leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq - 3 2 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 2 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 1 1 2 (% rbp ) movq % r 1 3 , - 1 0 4 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) leaq - 1 6 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 3 : leaq - 9 0 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 4 movl $ 9 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 : ret . L 6 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 5 6 , % rsp movq % rdi , - 8 2 4 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 7 6 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 7 5 2 (% rbp ) movq $ 3 , - 7 4 4 (% rbp ) movq $ 3 , - 7 3 6 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 8 (% rbp ) movq - 5 6 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 5 6 8 (% rbp ), % rax movq % rax , - 7 2 8 (% rbp ) movq $ 3 , - 7 2 0 (% rbp ) movq $ 3 , - 7 1 2 (% rbp ) movb $ 1 , - 7 0 4 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 0 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 6 9 6 (% rbp ) movq $ 3 , - 6 8 8 (% rbp ) movq $ 3 , - 6 8 0 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 5 2 (% rbp ) movq - 5 5 2 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq - 5 5 2 (% rbp ), % rax movq % rax , - 6 7 2 (% rbp ) movq $ 3 , - 6 6 4 (% rbp ) movq $ 3 , - 6 5 6 (% rbp ) movb $ 1 , - 6 4 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 4 4 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 5 4 4 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) movq $ 3 , - 6 3 2 (% rbp ) movq $ 3 , - 6 2 4 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 3 6 (% rbp ) movq - 5 3 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq - 5 3 6 (% rbp ), % rax movq % rax , - 6 1 6 (% rbp ) movq $ 3 , - 6 0 8 (% rbp ) movq $ 3 , - 6 0 0 (% rbp ) movb $ 0 , - 5 9 2 (% rbp ) . LBB 5 4 : movq $ 0 , - 8 1 6 (% rbp ) movq $ 0 , - 8 0 8 (% rbp ) movq $ 0 , - 8 0 0 (% rbp ) movq $ 0 , - 7 9 2 (% rbp ) movq $ 0 , - 7 8 4 (% rbp ) movq $ 0 , - 7 7 6 (% rbp ) movq $ 0 , - 7 6 8 (% rbp ) . LBB 5 5 : . LBB 5 6 : . LBB 5 7 : movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movl $ 3 , % r 1 3 d movl $ 0 , % r 1 2 d . LBE 5 7 : jmp . L 5 0 . L 6 3 : . LBB 5 8 : nop . LBE 5 8 : . LBB 5 9 : . LBB 6 0 : testq % r 1 2 , % r 1 2 js . L 5 1 cmpq $ 2 , % r 1 2 jg . L 5 1 movq % r 1 2 , % rax salq $ 3 , % rax subq % r 1 2 , % rax salq $ 3 , % rax leaq - 4 8 (% rbp ), % rsi addq % rsi , % rax leaq - 4 1 6 (% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq 4 8 (% rcx ), % rax movq % rax , - 4 8 0 (% rbp ) . LBE 6 0 : . LBB 6 1 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 8 1 6 (% rbp ) movq % rdx , - 8 0 8 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 8 0 0 (% rbp ) movq % rdx , - 7 9 2 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 7 8 4 (% rbp ) movq % rdx , - 7 7 6 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 7 6 8 (% rbp ) . LBE 6 1 : . LBB 6 2 : pushq - 7 7 6 (% rbp ) pushq - 7 8 4 (% rbp ) pushq - 7 9 2 (% rbp ) pushq - 8 0 0 (% rbp ) pushq - 8 0 8 (% rbp ) pushq - 8 1 6 (% rbp ) call go . kit . IsEqualSliceInt addq $ 4 8 , % rsp movb % al , - 4 9 (% rbp ) . LBB 6 3 : movzbl - 7 6 8 (% rbp ), % eax cmpb % al , - 4 9 (% rbp ) jne . L 5 2 jmp . L 5 3 . L 5 1 : . LBE 6 3 : . LBE 6 2 : . LBB 7 2 : movl $ 3 , % esi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : . LBE 7 2 : . LBB 7 3 : . LBB 7 1 : . LBB 6 4 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 8 9 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 4 . LBB 6 5 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 5 : jmp . L 5 5 . L 5 4 : . LBB 6 6 : movq - 2 3 2 (% rbp ), % rax leaq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 5 : . LBE 6 6 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 8 8 8 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 8 8 0 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 7 9 2 (% rbp ), % rax movq - 7 8 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 7 7 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 6 . LBB 6 7 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 7 : jmp . L 5 7 . L 5 6 : . LBB 6 8 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 7 : . LBE 6 8 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 8 7 2 (% rbp ) leaq bool .. d (% rip ), % rbx movq % rbx , - 8 6 4 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movzbl - 4 9 (% rbp ), % edx movb % dl , (% rax ) movq - 1 6 8 (% rbp ), % rax movq % rax , - 8 5 6 (% rbp ) movq % rbx , - 8 4 8 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movzbl - 7 6 8 (% rbp ), % edx movb % dl , (% rax ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 8 4 0 (% rbp ) leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movdqa - 8 9 6 (% rbp ), % xmm 0 movups % xmm 0 , - 1 4 4 (% rbp ) movdqa - 8 8 0 (% rbp ), % xmm 1 movups % xmm 1 , - 1 2 8 (% rbp ) movdqa - 8 6 4 (% rbp ), % xmm 2 movups % xmm 2 , - 1 1 2 (% rbp ) movdqa - 8 4 8 (% rbp ), % xmm 3 movups % xmm 3 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 8 . LBB 6 9 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) . LBE 6 9 : jmp . L 5 9 . L 5 8 : . LBB 7 0 : movq - 1 5 2 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 9 : . LBE 7 0 : movq - 1 5 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 4 , - 7 2 (% rbp ) movq $ 4 , - 6 4 (% rbp ) leaq . LC 2 5 (% rip ), % r 1 4 movl $ 3 8 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 8 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 5 3 : . LBE 6 4 : . LBE 7 1 : . LBE 7 3 : . LBE 5 9 : . LBB 7 4 : addq $ 1 , % r 1 2 . L 5 0 : . LBE 7 4 : cmpq % r 1 3 , % r 1 2 jl . L 6 3 . LBE 5 6 : . LBE 5 5 : . LBE 5 4 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 0 movl $ 2 8 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 4 0 , % rsp . LBB 2 : movq $ 3 , - 4 0 (% rbp ) . L 8 : . LBB 3 : . LBB 4 : . LBB 5 : movq - 4 0 (% rbp ), % rax movq % rax , % rdi call main . isPrime xorl $ 1 , % eax testb % al , % al je . L 2 . LBB 6 : . LBB 7 : movq - 4 0 (% rbp ), % rax movq % rax , % rdi call main . passTest xorl $ 1 , % eax testb % al , % al je . L 3 . LBB 8 : leaq int .. d (% rip ), % rax movq % rax , - 2 7 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 2 3 2 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 3 2 (% rbp ), % rax movq % rax , - 2 6 4 (% rbp ) leaq string .. d (% rip ), % r 1 2 leaq go .. C 1 2 (% rip ), % r 1 3 movdqa - 2 7 2 (% rbp ), % xmm 0 movups % xmm 0 , - 2 2 4 (% rbp ) movq % r 1 2 , - 2 0 8 (% rbp ) movq % r 1 3 , - 2 0 0 (% rbp ) leaq - 2 2 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 2 , - 1 2 0 (% rbp ) movq $ 2 , - 1 1 2 (% rbp ) leaq - 9 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) jmp . L 9 . L 2 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 9 : movq main . primes (% rip ), % rax movq 8 + main . primes (% rip ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 + main . primes (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % r 1 4 leaq 1 (% r 1 4 ), % rax movq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 5 . LBB 1 0 : leaq main . primes (% rip ), % rbx movq - 1 9 2 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 4 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 1 1 : movq - 1 6 0 (% rbp ), % rax movq % rax , (% rbx ) . LBE 1 1 : jmp . L 7 . L 6 : . LBB 1 2 : movq - 1 6 0 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 7 . L 5 : . LBE 1 2 : . LBE 1 0 : . LBB 1 3 : movq - 1 9 2 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rdx movq % rcx , main . primes (% rip ) movq % rax , 8 + main . primes (% rip ) movq % rdx , 1 6 + main . primes (% rip ) . L 7 : . LBE 1 3 : movq main . primes (% rip ), % rax movq 8 + main . primes (% rip ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 + main . primes (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % r 1 4 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 4 0 (% rbp ), % rax movq % rax , (% rdx ) . L 3 : . LBE 9 : . LBE 5 : . LBE 4 : . LBB 1 4 : addq $ 2 , - 4 0 (% rbp ) . LBE 1 4 : jmp . L 8 . L 9 : . LBE 3 : . LBE 2 : leaq - 3 2 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 8 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp movq % rdi , - 5 6 (% rbp ) movq % rsi , - 6 4 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 6 4 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 2 1 4 7 4 8 3 6 4 7 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq $ 1 , - 8 (% rbp ) . LBB 6 : cmpq $ 0 , - 5 6 (% rbp ) jns . L 4 . LBB 7 : negq - 8 (% rbp ) negq - 5 6 (% rbp ) . L 4 : . LBE 7 : . LBE 6 : . LBB 8 : cmpq $ 0 , - 6 4 (% rbp ) jns . L 5 . LBB 9 : negq - 8 (% rbp ) negq - 6 4 (% rbp ) . L 5 : . LBE 9 : . LBE 8 : movq $ 0 , - 1 6 (% rbp ) . LBB 1 0 : . LBB 1 1 : jmp . L 6 . L 1 7 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : movq - 6 4 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq $ 1 , - 3 2 (% rbp ) . LBB 1 4 : . LBB 1 5 : jmp . L 7 . L 1 6 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : salq - 2 4 (% rbp ) salq - 3 2 (% rbp ) . L 7 : . LBE 1 7 : movq - 2 4 (% rbp ), % rax addq % rax , % rax cmpq % rax , - 5 6 (% rbp ) jge . L 1 6 . LBE 1 5 : . LBE 1 4 : movq - 3 2 (% rbp ), % rax addq % rax , - 1 6 (% rbp ) movq - 2 4 (% rbp ), % rax subq % rax , - 5 6 (% rbp ) . L 6 : . LBE 1 3 : movq - 6 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jle . L 1 7 . LBE 1 1 : . LBE 1 0 : . LBB 1 8 : cmpq $ 2 1 4 7 4 8 3 6 4 6 , - 1 6 (% rbp ) jle . L 1 2 . LBB 1 9 : . LBB 2 0 : cmpq $ 1 , - 8 (% rbp ) jne . L 1 3 . LBB 2 1 : . LBB 2 2 : movq $ 2 1 4 7 4 8 3 6 4 7 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 3 . L 1 3 : . LBE 2 2 : . LBE 2 1 : . LBE 2 0 : . LBB 2 3 : movq $- 2 1 4 7 4 8 3 6 4 8 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 3 . L 1 2 : . LBE 2 3 : . LBE 1 9 : . LBE 1 8 : . LBB 2 4 : movq - 1 6 (% rbp ), % rax imulq - 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 3 : . LBE 2 4 : . LBE 2 : popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 0 movl $ 2 4 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 0 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 3 2 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : movq $ 0 , - 2 4 (% rbp ) . LBB 3 : movq $ 0 , - 4 0 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rdi movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 2 9 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 1 6 8 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq - 1 7 6 (% rbp ), % rcx movq % rax , % rsi movq % rsi , % rdx addq % rdx , % rdx addq % rsi , % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq 8 (% rdx ), % rbx movq % rcx , - 2 0 8 (% rbp ) movq % rbx , - 2 0 0 (% rbp ) movq 1 6 (% rdx ), % rdx movq % rdx , - 1 9 2 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 2 0 8 (% rbp ), % rcx movq - 2 0 0 (% rbp ), % rbx movq % rcx , - 1 4 4 (% rbp ) movq % rbx , - 1 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rdx movq % rdx , - 1 2 8 (% rbp ) movq % rax , - 4 0 (% rbp ) movq - 1 4 4 (% rbp ), % rcx movq - 1 3 6 (% rbp ), % rbx movq % rcx , - 2 4 0 (% rbp ) movq % rbx , - 2 3 2 (% rbp ) movq - 1 2 8 (% rbp ), % rdx movq % rdx , - 2 2 4 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 1 3 : . LBB 1 4 : . LBB 1 5 : movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rbx movq % rcx , - 1 1 2 (% rbp ) movq % rbx , - 1 0 4 (% rbp ) movq - 2 2 4 (% rbp ), % rdx movq % rdx , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % r 8 movl $ 0 , % edx . LBE 1 5 : jmp . L 4 . L 3 : . LBE 1 4 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 3 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : . LBE 3 8 : . LBB 3 9 : . LBB 3 7 : . LBB 3 6 : . LBB 3 5 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : . LBB 1 8 : movq - 1 0 4 (% rbp ), % rcx testq % rdx , % rdx js . L 5 cmpq % rcx , % rdx jge . L 5 movq - 1 1 2 (% rbp ), % rcx movq % rdx , % rsi salq $ 3 , % rsi addq % rsi , % rcx movq (% rcx ), % rcx . LBE 1 8 : . LBB 1 9 : movq % rdx , - 4 8 (% rbp ) movq % rcx , - 5 6 (% rbp ) . LBE 1 9 : . LBB 2 0 : . LBB 2 1 : cmpq $ 0 , - 5 6 (% rbp ) je . L 2 7 jmp . L 2 2 . L 5 : . LBE 2 1 : . LBE 2 0 : . LBB 3 2 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : . LBE 3 2 : . LBB 3 3 : addq $ 4 , - 2 4 (% rbp ) . LBB 2 3 : . LBB 2 4 : cmpq $ 0 , - 4 0 (% rbp ) setg % cl testb % cl , % cl je . L 9 . LBB 2 5 : movq - 4 0 (% rbp ), % rcx subq $ 1 , % rcx movq 2 4 (% rbp ), % rsi testq % rcx , % rcx js . L 1 0 cmpq % rsi , % rcx jl . L 2 3 . L 1 0 : movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : movq 1 6 (% rbp ), % rsi movq % rcx , % r 9 movq % r 9 , % rcx addq % rcx , % rcx addq % r 9 , % rcx salq $ 3 , % rcx addq % rcx , % rsi movq (% rsi ), % rcx movq 8 (% rsi ), % rbx movq % rcx , - 8 0 (% rbp ) movq % rbx , - 7 2 (% rbp ) movq 1 6 (% rsi ), % rcx movq % rcx , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rcx cmpq $ 0 , - 4 8 (% rbp ) js . L 1 2 cmpq % rcx , - 4 8 (% rbp ) jge . L 1 2 movq - 8 0 (% rbp ), % rsi movq - 4 8 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rcx cmpq $ 1 , % rcx sete % cl jmp . L 9 . L 1 2 : movq - 4 8 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 9 : . LBE 2 5 : . LBE 2 4 : testb % cl , % cl je . L 1 3 . LBB 2 6 : subq $ 2 , - 2 4 (% rbp ) . L 1 3 : . LBE 2 6 : . LBE 2 3 : . LBB 2 7 : . LBB 2 8 : cmpq $ 0 , - 4 8 (% rbp ) setg % cl testb % cl , % cl je . L 1 4 . LBB 2 9 : movq - 4 8 (% rbp ), % rcx subq $ 1 , % rcx movq - 2 3 2 (% rbp ), % rsi testq % rcx , % rcx js . L 1 5 cmpq % rsi , % rcx jl . L 2 4 . L 1 5 : movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : movq - 2 4 0 (% rbp ), % rsi salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rcx cmpq $ 1 , % rcx sete % cl . L 1 4 : . LBE 2 9 : . LBE 2 8 : testb % cl , % cl je . L 8 . LBB 3 0 : subq $ 2 , - 2 4 (% rbp ) jmp . L 8 . L 2 7 : . LBE 3 0 : . LBE 2 7 : . LBB 3 1 : . LBB 2 2 : nop . L 8 : . LBE 2 2 : . LBE 3 1 : . LBE 3 3 : . LBE 1 7 : . LBB 3 4 : addq $ 1 , % rdx . L 4 : . LBE 3 4 : cmpq % r 8 , % rdx jl . L 2 8 . LBE 3 5 : . LBE 3 6 : . LBE 3 7 : . LBE 3 9 : . LBE 8 : . LBB 4 0 : addq $ 1 , % rax . L 2 : . LBE 4 0 : cmpq % rdi , % rax jl . L 2 9 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 4 1 : movq - 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . LBE 4 1 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 5 : cmpq % fs : 1 1 2 , % rsp jnb . L 9 0 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 5 : ret . L 9 0 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 5 2 , % rsp movq % rdi , - 1 5 2 (% rbp ) movq % rsi , - 1 6 0 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) . LBB 7 4 : . LBB 7 5 : cmpq $ 0 , - 1 6 0 (% rbp ) jne . L 8 0 . LBB 7 6 : . LBB 7 7 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) movq - 1 5 2 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 7 9 . L 8 0 : . LBE 7 7 : . LBE 7 6 : . LBE 7 5 : leaq type ... 6 1 x . 7 uint (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq - 8 8 (% rbp ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 8 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 1 , - 1 3 6 (% rbp ) movq $ 1 , - 1 2 8 (% rbp ) . LBB 7 8 : . LBB 7 9 : jmp . L 8 2 . L 8 9 : . LBB 8 0 : nop . LBE 8 0 : . LBB 8 1 : movq - 1 6 0 (% rbp ), % rax movq % rax , % rdi call go . euler . nextNum movq % rax , - 1 6 0 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 8 3 . LBB 8 2 : movq - 8 0 (% rbp ), % rsi leaq - 4 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq uint .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) . LBE 8 2 : jmp . L 8 4 . L 8 3 : . LBB 8 3 : movq - 8 0 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq % rcx , - 1 4 4 (% rbp ) movq % rax , - 1 3 6 (% rbp ) movq % rdx , - 1 2 8 (% rbp ) . L 8 4 : . LBE 8 3 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 1 6 0 (% rbp ), % rax movq % rax , (% rdx ) . L 8 2 : . LBE 8 1 : cmpq $ 1 , - 1 6 0 (% rbp ) jne . L 8 9 . LBE 7 9 : . LBE 7 8 : . LBB 8 4 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 5 2 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 7 9 : . LBE 8 4 : . LBE 7 4 : movq - 1 5 2 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 5 3 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 1 movl $ 5 3 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 8 8 , % rsp leaq - 5 1 2 (% rbp ), % rax movq % rax , % rdi call time . Now @ PLT subq $ 8 , % rsp pushq - 4 9 6 (% rbp ) pushq - 5 0 4 (% rbp ) pushq - 5 1 2 (% rbp ) call time . Since @ PLT addq $ 3 2 , % rsp movq % rax , % rbx leaq string .. d (% rip ), % r 1 2 leaq go .. C 2 7 (% rip ), % r 1 3 leaq time . Duration .. d (% rip ), % rax movq % rax , - 5 2 8 (% rbp ) leaq time . Duration .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 5 6 (% rbp ) movq - 4 5 6 (% rbp ), % rax movq % rbx , (% rax ) movq - 4 5 6 (% rbp ), % rax movq % rax , - 5 2 0 (% rbp ) movq % r 1 2 , - 4 4 8 (% rbp ) movq % r 1 3 , - 4 4 0 (% rbp ) movdqa - 5 2 8 (% rbp ), % xmm 0 movups % xmm 0 , - 4 3 2 (% rbp ) leaq - 4 4 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 2 , - 2 3 2 (% rbp ) movq $ 2 , - 2 2 4 (% rbp ) leaq - 2 0 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq $ 1 , - 5 6 (% rbp ) . LBB 2 : movq $ 0 , - 6 4 (% rbp ) . LBB 3 : jmp . L 2 . L 4 0 : . LBB 4 : nop . LBE 4 : . LBB 5 : . LBB 6 : movq $ 0 , - 7 2 (% rbp ) . LBB 7 : jmp . L 3 . L 3 9 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq $ 1 , - 8 0 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 9 6 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) . LBB 1 0 : movq $ 0 , - 1 1 2 (% rbp ) . LBB 1 1 : jmp . L 4 . L 3 8 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : movq - 7 2 (% rbp ), % rdx movq - 1 1 2 (% rbp ), % rax addq % rdx , % rax movq 8 + main . data (% rip ), % rdx testq % rax , % rax js . L 5 cmpq % rdx , % rax jl . L 3 1 . L 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq main . data (% rip ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 4 0 8 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 7 cmpq % rax , - 6 4 (% rbp ) jge . L 7 movq - 4 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq - 8 8 (% rbp ), % rdx imulq % rdx , % rax movq % rax , - 8 8 (% rbp ) movq 8 + main . data (% rip ), % rax cmpq $ 0 , - 6 4 (% rbp ) jns . L 8 jmp . L 9 . L 7 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 : cmpq % rax , - 6 4 (% rbp ) jl . L 3 2 . L 9 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq main . data (% rip ), % rcx movq - 6 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 7 2 (% rbp ), % rdx movq - 1 1 2 (% rbp ), % rax addq % rdx , % rax movq - 3 7 6 (% rbp ), % rdx testq % rax , % rax js . L 1 1 cmpq % rdx , % rax jge . L 1 1 movq - 3 8 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq - 8 0 (% rbp ), % rdx imulq % rdx , % rax movq % rax , - 8 0 (% rbp ) . LBB 1 4 : cmpq $ 1 6 , - 6 4 (% rbp ) jle . L 1 2 jmp . L 1 3 . L 1 1 : . LBE 1 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : . LBB 1 6 : . LBB 1 5 : movq - 6 4 (% rbp ), % rdx movq - 1 1 2 (% rbp ), % rax addq % rdx , % rax movq 8 + main . data (% rip ), % rdx testq % rax , % rax js . L 1 4 cmpq % rdx , % rax jl . L 3 3 . L 1 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq main . data (% rip ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 7 2 (% rbp ), % rdx movq - 1 1 2 (% rbp ), % rax addq % rdx , % rax movq - 3 4 4 (% rbp ), % rdx testq % rax , % rax js . L 1 6 cmpq % rdx , % rax jge . L 1 6 movq - 3 5 2 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq - 9 6 (% rbp ), % rdx imulq % rdx , % rax movq % rax , - 9 6 (% rbp ) movq - 6 4 (% rbp ), % rdx movq - 1 1 2 (% rbp ), % rax addq % rdx , % rax movq 8 + main . data (% rip ), % rdx testq % rax , % rax jns . L 1 7 jmp . L 1 8 . L 1 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : cmpq % rdx , % rax jl . L 3 4 . L 1 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq main . data (% rip ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 7 2 (% rbp ), % rax subq - 1 1 2 (% rbp ), % rax addq $ 3 , % rax movq - 3 1 2 (% rbp ), % rdx testq % rax , % rax js . L 2 0 cmpq % rdx , % rax jge . L 2 0 movq - 3 2 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq - 1 0 4 (% rbp ), % rdx imulq % rdx , % rax movq % rax , - 1 0 4 (% rbp ) jmp . L 1 3 . L 2 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : . LBE 1 5 : . LBE 1 6 : . LBE 1 3 : . LBB 1 7 : addq $ 1 , - 1 1 2 (% rbp ) . L 4 : . LBE 1 7 : cmpq $ 3 , - 1 1 2 (% rbp ) jle . L 3 8 . LBE 1 1 : . LBE 1 0 : . LBB 1 8 : movq - 8 0 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jle . L 2 3 . LBB 1 9 : movq - 8 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . L 2 3 : . LBE 1 9 : . LBE 1 8 : . LBB 2 0 : movq - 8 8 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jle . L 2 4 . LBB 2 1 : movq - 8 8 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . L 2 4 : . LBE 2 1 : . LBE 2 0 : . LBB 2 2 : movq - 9 6 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jle . L 2 5 . LBB 2 3 : movq - 9 6 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . L 2 5 : . LBE 2 3 : . LBE 2 2 : . LBB 2 4 : movq - 1 0 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jle . L 2 6 . LBB 2 5 : movq - 1 0 4 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . L 2 6 : . LBE 2 5 : . LBE 2 4 : . LBE 9 : . LBB 2 6 : addq $ 1 , - 7 2 (% rbp ) . L 3 : . LBE 2 6 : cmpq $ 1 6 , - 7 2 (% rbp ) jle . L 3 9 . LBE 7 : . LBE 6 : . LBE 5 : . LBB 2 7 : addq $ 1 , - 6 4 (% rbp ) . L 2 : . LBE 2 7 : cmpq $ 1 9 , - 6 4 (% rbp ) jle . L 4 0 . LBE 3 : . LBE 2 : leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 6 4 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 2 5 6 (% rbp ) movq % r 1 5 , - 2 4 8 (% rbp ) leaq - 2 5 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 1 movl $ 1 5 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 2 0 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq $ 0 , - 9 6 (% rbp ) movq $ 0 , - 8 8 (% rbp ) . LBB 2 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq 2 4 (% rbp ), % rax addq % rax , % rax movq % rax , - 4 0 (% rbp ) . LBB 3 : movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 0 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 7 2 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 8 0 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 1 4 4 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rdx subq % rdx , % rax movq % rax , % rdi call go . day 3 7 6 . abs movq % rax , % r 1 3 movq - 1 3 6 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx subq % rdx , % rax movq % rax , % rdi call go . day 3 7 6 . abs addq % r 1 3 , % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jl . L 4 jmp . L 5 . L 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 5 : . LBB 1 6 : . LBB 1 4 : . LBB 1 3 : movq - 4 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) . L 5 : . LBE 1 3 : . LBE 1 4 : . LBE 1 6 : . LBE 8 : . LBB 1 7 : addq $ 1 , % rbx . L 2 : . LBE 1 7 : cmpq % r 1 2 , % rbx jl . L 1 0 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 8 : movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx . LBE 1 8 : . LBE 2 : addq $ 1 2 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 3 4 9 : cmpq % fs : 1 1 2 , % rsp jnb . L 9 2 2 9 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 3 6 : ret . L 9 2 2 9 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 5 2 , % rsp movq % rdi , - 1 5 2 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) movq $ 0 , - 4 0 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) . LBB 7 4 1 2 : . LBB 7 4 1 3 : jmp . L 9 2 0 1 . L 9 2 2 8 : . LBB 7 4 1 4 : nop . LBE 7 4 1 4 : . LBB 7 4 1 5 : . LBB 7 4 1 6 : . LBB 7 4 1 7 : jmp . L 9 2 0 2 . L 9 2 2 6 : . LBB 7 4 1 8 : nop . LBE 7 4 1 8 : . LBB 7 4 1 9 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 9 2 0 3 . LBB 7 4 2 0 : movq - 1 1 2 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 1 go . leetcode . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) . LBE 7 4 2 0 : jmp . L 9 2 0 4 . L 9 2 0 3 : . LBB 7 4 2 1 : movq - 1 1 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rcx , - 1 4 4 (% rbp ) movq % rax , - 1 3 6 (% rbp ) movq % rdx , - 1 2 8 (% rbp ) . L 9 2 0 4 : . LBE 7 4 2 1 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 9 2 0 5 . LBB 7 4 2 2 : movq - 4 8 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 9 2 0 6 . L 9 2 0 5 : . LBE 7 4 2 2 : . LBB 7 4 2 3 : movq - 4 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 9 2 0 6 : . LBE 7 4 2 3 : movq - 4 8 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 8 (% rbp ) . L 9 2 0 2 : . LBE 7 4 1 9 : cmpq $ 0 , - 4 8 (% rbp ) jne . L 9 2 2 6 . LBE 7 4 1 7 : . LBE 7 4 1 6 : movq - 1 3 6 (% rbp ), % rax subq $ 1 , % rax movq - 1 3 6 (% rbp ), % rdx testq % rax , % rax js . L 9 2 0 9 cmpq % rdx , % rax jl . L 9 2 2 3 . L 9 2 0 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 9 2 2 3 : movq - 1 4 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 4 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax leaq - 1 (% rax ), % rdi movq - 1 2 8 (% rbp ), % rax testq % rdi , % rdi js . L 9 2 1 1 cmpq % rax , % rdi jg . L 9 2 1 1 testq % rdi , % rdi jns . L 9 2 1 2 jmp . L 9 2 2 4 . L 9 2 1 1 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 9 2 2 4 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 9 2 1 2 : movq - 1 4 4 (% rbp ), % rdx movq - 1 2 8 (% rbp ), % rax movq % rdx , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) movq % rax , - 1 2 8 (% rbp ) . LBB 7 4 2 4 : . LBB 7 4 2 5 : cmpq $ 0 , - 4 0 (% rbp ) setne % al testb % al , % al je . L 9 2 1 4 . LBB 7 4 2 6 : movq - 4 0 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx setg % al . L 9 2 1 4 : . LBE 7 4 2 6 : . LBE 7 4 2 5 : testb % al , % al je . L 9 2 1 5 . LBB 7 4 2 7 : movq - 4 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . LBB 7 4 2 8 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 9 2 2 7 . LBB 7 4 2 9 : movq - 4 0 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . L 9 2 1 5 : . LBE 7 4 2 9 : . LBE 7 4 2 8 : . LBE 7 4 2 7 : . LBE 7 4 2 4 : movq - 4 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 4 8 (% rbp ) . L 9 2 0 1 : . LBE 7 4 1 5 : . LBB 7 4 3 4 : cmpq $ 0 , - 4 8 (% rbp ) setne % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 9 2 1 8 . LBB 7 4 3 5 : movq - 1 3 6 (% rbp ), % rax testq % rax , % rax setne % al . L 9 2 1 8 : . LBE 7 4 3 5 : . LBE 7 4 3 4 : testb % al , % al jne . L 9 2 2 8 jmp . L 9 2 1 7 . L 9 2 2 7 : . LBB 7 4 3 6 : . LBB 7 4 3 3 : . LBB 7 4 3 2 : . LBB 7 4 3 1 : . LBB 7 4 3 0 : nop . L 9 2 1 7 : . LBE 7 4 3 0 : . LBE 7 4 3 1 : . LBE 7 4 3 2 : . LBE 7 4 3 3 : . LBE 7 4 3 6 : . LBE 7 4 1 3 : . LBE 7 4 1 2 : . LBB 7 4 3 7 : . LBB 7 4 3 8 : cmpq $ 0 , - 2 4 (% rbp ) setne % al testb % al , % al je . L 9 2 2 0 . LBB 7 4 3 9 : cmpq $ 0 , - 3 2 (% rbp ) setne % al . L 9 2 2 0 : . LBE 7 4 3 9 : . LBE 7 4 3 8 : testb % al , % al je . L 9 2 0 0 . LBB 7 4 4 0 : . LBB 7 4 4 1 : movq - 2 4 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax movq - 3 2 (% rbp ), % rdx movq (% rdx ), % rsi movq - 2 4 (% rbp ), % rdx movq (% rdx ), % rdx movq % rsi , (% rcx ) movq % rdx , (% rax ) . L 9 2 0 0 : . LBE 7 4 4 1 : . LBE 7 4 4 0 : . LBE 7 4 3 7 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 3 movl $ 4 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 3 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movb $ 0 , - 1 7 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . LBB 3 : cmpq $ 1 , - 3 2 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movb $ 1 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 8 (% rbp ) . LBB 6 : movq $ 1 , - 1 6 (% rbp ) . LBB 7 : jmp . L 4 . L 1 2 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq - 1 6 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 5 cmpq % rdx , % rax jl . L 1 0 . L 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax pxor % xmm 0 , % xmm 0 cvtsi 2 sdq % rax , % xmm 0 pxor % xmm 2 , % xmm 2 cvtsi 2 sdq - 8 (% rbp ), % xmm 2 movq % xmm 2 , % rax movapd % xmm 0 , % xmm 1 movq % rax , % xmm 0 call math . Max @ PLT cvttsd 2 siq % xmm 0 , % rax subq $ 1 , % rax movq % rax , - 8 (% rbp ) . LBB 1 0 : cmpq $ 0 , - 8 (% rbp ) jns . L 7 . LBB 1 1 : . LBB 1 2 : movb $ 0 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax jmp . L 3 . L 7 : . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 1 3 : addq $ 1 , - 1 6 (% rbp ) . L 4 : . LBE 1 3 : movq - 1 6 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jl . L 1 2 . LBE 7 : . LBE 6 : . LBB 1 4 : movb $ 1 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax . L 3 : . LBE 1 4 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 9 movl $ 1 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 9 6 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : leaq . LC 2 (% rip ), % rcx movl $ 3 , % ebx leaq . LC 3 (% rip ), % rax movl $ 8 8 , % edx leaq - 9 6 (% rbp ), % rdi movq % rcx , % r 8 movq % rbx , % r 9 movq % rbx , % r 9 movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % rax movq % r 8 , % rcx movq % r 9 , % r 8 movq % rax , % rdx call go . probs . ReadFileIntoArray subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) call sort . Strings @ PLT addq $ 3 2 , % rsp movq $ 0 , - 2 4 (% rbp ) . LBB 3 : movq $ 0 , - 4 0 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 8 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 5 6 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 6 4 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rbx , - 4 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 4 0 (% rbp ), % rax leaq 1 (% rax ), % rdx movq - 1 1 2 (% rbp ), % rcx movq - 1 0 4 (% rbp ), % rax movq % rcx , % rdi movq % rax , % rsi call go . probs . calculateValue addq % rax , - 2 4 (% rbp ) . LBE 1 1 : . LBE 8 : . LBB 1 3 : addq $ 1 , % rbx jmp . L 2 . L 3 : . LBE 1 3 : . LBB 1 4 : . LBB 1 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 2 : . LBE 1 4 : cmpq % r 1 2 , % rbx jl . L 8 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 5 : movq - 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . LBE 1 5 : . LBE 2 : leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 4 0 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 6 movl $ 4 0 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 7 6 , % rsp movq % rdi , - 3 9 2 (% rbp ) movq % rsi , - 4 0 0 (% rbp ) . LBB 2 : cmpq $ 0 , - 3 9 2 (% rbp ) je . L 2 5 . LBE 2 : movq - 3 9 2 (% rbp ), % rax movq (% rax ), % rax subq % rax , - 4 0 0 (% rbp ) movq main . path (% rip ), % rax movq 8 + main . path (% rip ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq 1 6 + main . path (% rip ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 4 4 (% rbp ), % r 1 2 movq - 3 9 2 (% rbp ), % rax movq (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 . LBB 4 : leaq main . path (% rip ), % rbx movq - 3 5 2 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 3 0 4 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 . LBB 5 : movq - 3 2 0 (% rbp ), % rax movq % rax , (% rbx ) . LBE 5 : jmp . L 6 . L 5 : . LBB 6 : movq - 3 2 0 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 6 . L 4 : . LBE 6 : . LBE 4 : . LBB 7 : movq - 3 5 2 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rdx movq % rcx , main . path (% rip ) movq % rax , 8 + main . path (% rip ) movq % rdx , 1 6 + main . path (% rip ) . L 6 : . LBE 7 : movq main . path (% rip ), % rax movq 8 + main . path (% rip ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq 1 6 + main . path (% rip ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 3 , (% rax ) . LBB 8 : . LBB 9 : movq - 3 9 2 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax sete % al testb % al , % al je . L 7 . LBB 1 0 : movq - 3 9 2 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax sete % al . L 7 : . LBE 1 0 : . LBE 9 : testb % al , % al je . L 8 . LBB 1 1 : . LBB 1 2 : cmpq $ 0 , - 4 0 0 (% rbp ) jne . L 9 . LBB 1 3 : movl $ 0 , % edx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 8 4 (% rbp ) movq $ 0 , - 3 7 6 (% rbp ) movq $ 0 , - 3 6 8 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % rbx movq main . path (% rip ), % rax movq 8 + main . path (% rip ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 + main . path (% rip ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 2 leaq (% rbx ,% r 1 2 ), % rax movq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 0 . LBB 1 4 : movq - 2 8 8 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) . LBE 1 4 : jmp . L 1 1 . L 1 0 : . LBB 1 5 : movq - 2 8 8 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rdx movq % rcx , - 3 8 4 (% rbp ) movq % rax , - 3 7 6 (% rbp ) movq % rdx , - 3 6 8 (% rbp ) . L 1 1 : . LBE 1 5 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq % r 1 2 , % rax leaq 0 (,% rax , 8 ), % rdx movq - 2 5 6 (% rbp ), % rax movq - 2 8 8 (% rbp ), % rcx movq % rbx , % rsi salq $ 3 , % rsi addq % rsi , % rcx movq % rax , % rsi movq % rcx , % rdi call memmove @ PLT movq main . ret (% rip ), % rax movq 8 + main . ret (% rip ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 + main . ret (% rip ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 2 . LBB 1 6 : leaq main . ret (% rip ), % rbx movq - 2 2 4 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 6 . 7 int (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 3 . LBB 1 7 : movq - 1 9 2 (% rbp ), % rax movq % rax , (% rbx ) jmp . L 1 4 . L 1 3 : . LBE 1 7 : . LBB 1 8 : movq - 1 9 2 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 1 4 . L 1 2 : . LBE 1 8 : . LBE 1 6 : . LBB 1 9 : movq - 2 2 4 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rdx movq % rcx , main . ret (% rip ) movq % rax , 8 + main . ret (% rip ) movq % rdx , 1 6 + main . ret (% rip ) . L 1 4 : . LBE 1 9 : movq main . ret (% rip ), % rax movq 8 + main . ret (% rip ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 + main . ret (% rip ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 2 4 (% rbp ), % rdx movq % r 1 2 , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) movq - 3 6 8 (% rbp ), % rdx movq % rdx , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 4 4 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 5 . LBB 2 0 : movq - 1 6 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 9 . L 1 5 : . LBE 2 0 : . LBB 2 1 : movq - 1 6 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 9 : . LBE 2 1 : . LBE 1 3 : . LBE 1 2 : movq 8 + main . path (% rip ), % rax leaq - 1 (% rax ), % rdi movq 1 6 + main . path (% rip ), % rax testq % rdi , % rdi js . L 1 7 cmpq % rax , % rdi jg . L 1 7 testq % rdi , % rdi jns . L 1 8 jmp . L 2 3 . L 1 7 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 2 3 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 8 : movq main . path (% rip ), % rdx movq 1 6 + main . path (% rip ), % rax movq % rdx , main . path (% rip ) movq % rdi , 8 + main . path (% rip ) movq % rax , 1 6 + main . path (% rip ) jmp . L 1 . L 8 : . LBE 1 1 : . LBE 8 : movq - 3 9 2 (% rbp ), % rax movq 8 (% rax ), % rax movq - 4 0 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call main . help movq - 3 9 2 (% rbp ), % rax movq 1 6 (% rax ), % rax movq - 4 0 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call main . help movq 8 + main . path (% rip ), % rax leaq - 1 (% rax ), % rdi movq 1 6 + main . path (% rip ), % rax testq % rdi , % rdi js . L 2 0 cmpq % rax , % rdi jg . L 2 0 testq % rdi , % rdi jns . L 2 1 jmp . L 2 4 . L 2 0 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 2 4 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 2 1 : movq main . path (% rip ), % rdx movq 1 6 + main . path (% rip ), % rax movq % rdx , main . path (% rip ) movq % rdi , 8 + main . path (% rip ) movq % rax , 1 6 + main . path (% rip ) jmp . L 1 . L 2 5 : . LBB 2 2 : . LBB 3 : nop . L 1 : . LBE 3 : . LBE 2 2 : addq $ 3 7 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 0 movl $ 2 6 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 3 2 , % rsp movq $ 0 , - 4 8 (% rbp ) . LBB 2 : movq $ 0 , - 4 0 (% rbp ) . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movq - 4 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : call runtime . makemap_small @ PLT movq % rax , - 5 6 (% rbp ) . LBB 6 : movq $ 0 , - 6 4 (% rbp ) . LBB 7 : . LBB 8 : . LBB 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 9 : jmp . L 4 . L 1 8 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 2 4 8 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 5 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 2 : . LBB 1 3 : movq % rax , - 6 4 (% rbp ) . LBE 1 3 : . LBB 1 4 : . LBB 1 5 : movb $ 0 , - 9 0 (% rbp ) . LBB 1 6 : movq - 6 4 (% rbp ), % rax movq % rax , - 2 3 2 (% rbp ) leaq - 2 3 2 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movl % edx , % eax movb % al , - 9 0 (% rbp ) . LBE 1 6 : cmpb $ 0 , - 9 0 (% rbp ) jne . L 6 jmp . L 1 5 . L 5 : . LBE 1 5 : . LBE 1 4 : . LBB 2 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 2 2 : . LBB 2 3 : . LBB 2 1 : . LBB 1 7 : . LBB 1 8 : movq - 6 4 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) leaq - 1 0 4 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 3 leaq - 2 2 4 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . LBE 1 8 : . LBE 1 7 : jmp . L 8 . L 1 5 : . LBB 1 9 : . LBB 2 0 : movq - 6 4 (% rbp ), % rax movq % rax , - 2 1 6 (% rbp ) movl $ 1 , % r 1 3 d leaq - 2 1 6 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . L 8 : . LBE 2 0 : . LBE 1 9 : . LBE 2 1 : . LBE 2 3 : . LBE 1 1 : . LBB 2 4 : addq $ 1 , % rbx . L 4 : . LBE 2 4 : cmpq % r 1 2 , % rbx jl . L 1 8 . LBE 8 : . LBE 7 : . LBE 6 : . LBB 2 5 : movq $ 0 , - 7 2 (% rbp ) movq $ 0 , - 8 0 (% rbp ) . LBB 2 6 : . LBB 2 7 : . LBB 2 8 : leaq - 2 0 8 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 2 8 : jmp . L 1 1 . L 1 9 : . LBB 2 9 : nop . LBE 2 9 : . LBB 3 0 : . LBB 3 1 : movq - 2 0 8 (% rbp ), % rax movq (% rax ), % rdx movq - 2 0 0 (% rbp ), % rax movq (% rax ), % rax . LBE 3 1 : . LBB 3 2 : movq % rdx , - 7 2 (% rbp ) movq % rax , - 8 0 (% rbp ) . LBE 3 2 : . LBB 3 3 : . LBB 3 4 : movq $ 0 , - 8 8 (% rbp ) movb $ 0 , - 8 9 (% rbp ) . LBB 3 5 : movq - 7 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 1 1 2 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 8 8 (% rbp ) movb % dl , - 8 9 (% rbp ) . LBE 3 5 : cmpb $ 0 , - 8 9 (% rbp ) je . L 1 2 . LBB 3 6 : . LBB 3 7 : movq - 8 0 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax addq % rdx , % rax cmpq % rax , - 4 0 (% rbp ) jge . L 1 2 . LBB 3 8 : movq - 8 0 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax addq % rdx , % rax movq % rax , - 4 0 (% rbp ) . L 1 2 : . LBE 3 8 : . LBE 3 7 : . LBE 3 6 : . LBE 3 4 : . LBE 3 3 : . LBE 3 0 : . LBB 3 9 : leaq - 2 0 8 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 1 1 : . LBE 3 9 : movq - 2 0 8 (% rbp ), % rax testq % rax , % rax jne . L 1 9 . LBE 2 7 : . LBE 2 6 : . LBE 2 5 : . LBB 4 0 : movq - 4 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax . L 3 : . LBE 4 0 : . LBE 2 : addq $ 2 3 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 8 movl $ 3 4 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 subq $ 3 0 4 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq $ 2 , - 4 8 (% rbp ) . LBB 3 : jmp . L 2 . L 7 : . LBB 4 : nop . LBE 4 : . LBB 5 : . LBB 6 : movq - 4 8 (% rbp ), % rax movq % rax , % rdi call main . isCircular testb % al , % al je . L 3 . LBB 7 : leaq string .. d (% rip ), % r 1 4 leaq go .. C 6 (% rip ), % r 1 5 leaq int .. d (% rip ), % rax movq % rax , - 3 3 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq - 2 8 0 (% rbp ), % rax movq - 4 8 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 8 0 (% rbp ), % rax movq % rax , - 3 2 8 (% rbp ) movq % r 1 4 , - 2 7 2 (% rbp ) movq % r 1 5 , - 2 6 4 (% rbp ) movdqa - 3 3 6 (% rbp ), % xmm 0 movups % xmm 0 , - 2 5 6 (% rbp ) leaq - 2 7 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) addq $ 1 , - 4 0 (% rbp ) . L 3 : . LBE 7 : . LBE 6 : . LBE 5 : . LBB 8 : addq $ 1 , - 4 8 (% rbp ) . L 2 : . LBE 8 : cmpq $ 9 9 9 9 9 9 , - 4 8 (% rbp ) jle . L 7 . LBE 3 : . LBE 2 : leaq string .. d (% rip ), % r 1 2 leaq go .. C 1 2 (% rip ), % r 1 3 leaq int .. d (% rip ), % rax movq % rax , - 3 2 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq - 2 1 6 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 1 6 (% rbp ), % rax movq % rax , - 3 1 2 (% rbp ) movq % r 1 2 , - 2 0 8 (% rbp ) movq % r 1 3 , - 2 0 0 (% rbp ) movdqa - 3 2 0 (% rbp ), % xmm 1 movups % xmm 1 , - 1 9 2 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 2 , - 1 0 4 (% rbp ) movq $ 2 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) leaq - 3 2 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 0 movl $ 2 0 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 7 6 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) leaq - 1 2 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 3 , - 1 5 2 (% rbp ) movq $ 3 , - 1 4 4 (% rbp ) . LBB 3 : movq $ 0 , - 4 0 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 2 9 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 8 8 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 9 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 4 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq $ 0 , - 6 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 4 8 (% rbp ) leaq - 6 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq $ 3 , - 1 8 4 (% rbp ) movq $ 3 , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx cmpq % rax , % rdx cmovle % rdx , % rax leaq 0 (,% rax , 8 ), % rdx movq - 1 6 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memmove @ PLT . LBB 1 2 : movq $ 0 , - 2 4 (% rbp ) . LBB 1 3 : jmp . L 4 . L 3 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 9 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : . LBE 1 9 : . LBB 2 0 : . LBB 1 8 : . LBB 1 7 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : movq - 1 8 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 5 cmpq % rax , - 2 4 (% rbp ) jl . L 2 1 . L 5 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : movq - 1 9 2 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax leaq (% rdx ,% rax ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rsi sarq $ 6 3 , % rsi movq % rdx , % rax subq % rsi , % rax movq % rax , % rdx addq % rdx , % rdx addq % rax , % rdx movq % rcx , % rax subq % rdx , % rax movq - 1 5 2 (% rbp ), % rdx testq % rax , % rax js . L 7 cmpq % rdx , % rax jl . L 2 2 . L 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : movq - 1 8 4 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) js . L 9 cmpq % rdx , - 2 4 (% rbp ) jl . L 2 3 . L 9 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : movq - 1 9 2 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 4 0 (% rbp ), % rdx addq % rcx , % rdx movq - 1 6 0 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call main . max movq % rax , % rsi movq - 1 8 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 1 cmpq % rax , - 2 4 (% rbp ) jl . L 2 4 . L 1 1 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : movq - 1 9 2 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax leaq (% rdx ,% rax ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rdi sarq $ 6 3 , % rdi movq % rdx , % rax subq % rdi , % rax movq % rax , % rdx addq % rdx , % rdx addq % rax , % rdx movq % rcx , % rax subq % rdx , % rax movq - 1 5 2 (% rbp ), % rdx testq % rax , % rax js . L 1 3 cmpq % rdx , % rax jl . L 2 5 . L 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq - 1 6 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . LBE 1 5 : . LBB 1 6 : addq $ 1 , - 2 4 (% rbp ) . L 4 : . LBE 1 6 : cmpq $ 2 , - 2 4 (% rbp ) jle . L 2 8 . LBE 1 7 : . LBE 1 8 : . LBE 2 0 : . LBE 8 : . LBB 2 1 : addq $ 1 , % rbx . L 2 : . LBE 2 1 : cmpq % r 1 2 , % rbx jl . L 2 9 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 2 2 : movq - 1 5 2 (% rbp ), % rax testq % rax , % rax jg . L 1 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 9 : movq - 1 6 0 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . LBE 2 2 : . LBE 2 : addq $ 1 7 6 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 9 7 movl $ 2 0 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 6 : ret . L 1 9 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 5 2 , % rsp movq % rdi , - 1 8 4 (% rbp ) movq % rsi , - 1 9 2 (% rbp ) cmpq $ 0 , - 1 8 4 (% rbp ) jne . L 1 9 2 call runtime . panicmem @ PLT . L 1 9 2 : movq - 1 8 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rsi movq 2 4 (% rcx ), % rdi movq % rsi , - 1 2 8 (% rbp ) movq % rdi , - 1 2 0 (% rbp ) movq 3 2 (% rcx ), % rcx movq % rcx , - 1 1 2 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) . LBB 1 5 3 : . LBB 1 5 4 : movl - 1 4 4 (% rbp ), % ecx leaq . LC 1 3 1 (% rip ), % rax movl $ 4 , % edx movq % rax , % rsi movq % rdx , % rdi movq % rdx , % rax movl % ecx , % edx movq % rsi , % rdi movq % rax , % rsi call strings . ContainsRune @ PLT xorl $ 1 , % eax testb % al , % al je . L 1 9 3 . LBB 1 5 5 : . LBB 1 5 6 : leaq int 3 2 .. d (% rip ), % r 1 4 leaq int 3 2 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 (% rbp ) movq - 1 0 4 (% rbp ), % rax movl - 1 4 4 (% rbp ), % edx movl % edx , (% rax ) movq - 1 0 4 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq - 9 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 1 , - 7 2 (% rbp ) movq $ 1 , - 6 4 (% rbp ) leaq . LC 1 3 2 (% rip ), % r 1 2 movl $ 2 3 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Errorf @ PLT addq $ 3 2 , % rsp movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx jmp . L 1 9 6 . L 1 9 3 : . LBE 1 5 6 : . LBE 1 5 5 : . LBE 1 5 4 : . LBB 1 5 7 : movq - 1 3 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rcx movq 8 (% rcx ), % rcx movq - 1 9 2 (% rbp ), % rax movq % rax , % rsi movq % rdx , % rdi call *% rcx . LVL 1 7 : movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 7 6 (% rbp ), % rax testq % rax , % rax je . L 1 9 5 . LBB 1 5 8 : . LBB 1 5 9 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx jmp . L 1 9 6 . L 1 9 5 : . LBE 1 5 9 : . LBE 1 5 8 : . LBE 1 5 7 : . LBB 1 6 0 : movq - 1 2 0 (% rbp ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rcx movq 8 (% rcx ), % rcx movq - 1 9 2 (% rbp ), % rax movq % rax , % rsi movq % rdx , % rdi call *% rcx . LVL 1 8 : movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx . L 1 9 6 : . LBE 1 6 0 : . LBE 1 5 3 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 movl $ 1 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 subq $ 9 6 , % rsp movq % rdi , - 1 0 4 (% rbp ) leaq - 9 6 (% rbp ), % rax movl $ 1 , % esi movq % rax , % rdi call go . primes . GetPrimeNumbersBelowN . LBB 2 : movq - 8 8 (% rbp ), % rax testq % rax , % rax je . L 1 . LBB 3 : leaq string .. d (% rip ), % r 1 2 leaq go .. C 6 (% rip ), % r 1 3 leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq % r 1 2 , - 6 4 (% rbp ) movq % r 1 3 , - 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 . LBB 4 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 : jmp . L 4 . L 3 : . LBB 5 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 : . LBE 5 : movq - 7 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq $ 1 , - 4 0 (% rbp ) movq $ 1 , - 3 2 (% rbp ) movq - 1 0 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 3 2 (% rbp ) pushq - 4 0 (% rbp ) pushq - 4 8 (% rbp ) movq % rax , % rdi call testing . T . Error .. stub @ PLT addq $ 3 2 , % rsp . L 1 : . LBE 3 : . LBE 2 : leaq - 1 6 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 4 2 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 4 2 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 8 4 , % rsp movq % rdi , - 4 0 8 (% rbp ) leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 uint 8 . 2 . go . Solution . input 2 . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 8 (% rbp ) leaq . LC 2 5 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 5 2 (% rbp ) movq % r 1 3 , - 3 4 4 (% rbp ) leaq type ... 6 6 x . 7 uint 8 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 3 6 0 (% rbp ), % rax movb $ 6 5 , (% rax ) movb $ 6 5 , 1 (% rax ) movb $ 6 5 , 2 (% rax ) movb $ 6 6 , 3 (% rax ) movb $ 6 6 , 4 (% rax ) movb $ 6 6 , 5 (% rax ) movq - 3 6 0 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq $ 6 , - 3 2 8 (% rbp ) movq $ 6 , - 3 2 0 (% rbp ) movq $ 2 , - 3 1 2 (% rbp ) movq $ 8 , - 3 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 3 6 8 (% rbp ), % rax movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 3 0 4 (% rbp ), % rdx movq % rdx , 4 8 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 3 6 8 (% rbp ), % rax leaq - 3 5 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 uint 8 . 2 . go . Solution . input 2 . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 3 6 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 1 , - 3 9 2 (% rbp ) movq $ 1 , - 3 8 4 (% rbp ) . LBB 4 : movq $ 0 , - 4 0 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 uint 8 . 2 . go . Solution . input 2 . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 2 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 3 , % rax subq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 8 8 (% rbp ) movq % rdi , - 2 8 0 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 4 8 (% rax ), % rax movq % rax , - 2 4 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq % rbx , - 4 0 (% rbp ) movq - 4 8 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 1 4 4 (% rbp ), % rdx movq % rdx , 4 8 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 uint 8 . 2 . go . Solution . input 2 . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 4 0 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 4 8 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 2 8 (% rbp ) movq % rdi , - 1 2 0 (% rbp ) leaq . LC 2 6 (% rip ), % rcx movq % rcx , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 4 8 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 uint 8 . 2 . go . Solution . input 2 . 0 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq % r 1 4 , - 6 4 (% rbp ) movq % r 1 2 , - 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 uint 8 . 2 . go . Solution . input 2 . 0 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 7 2 (% rbp ), % r 1 2 leaq - 1 2 8 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 4 0 8 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 3 8 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 7 9 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 0 2 5 movl $ 3 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 9 8 : ret . L 2 0 2 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 2 8 , % rsp movq % rdi , % rcx movq % rsi , % rbx movq % rcx , - 3 6 8 (% rbp ) movq % rbx , - 3 6 0 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) . LBB 1 6 3 7 : leaq . LC 3 5 2 (% rip ), % rax movl $ 1 , % edx leaq - 2 7 2 (% rbp ), % rdi movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rsi movq - 3 6 8 (% rbp ), % rdx movq - 3 6 0 (% rbp ), % rax movq % rsi , % r 8 movq % rdx , % rsi movq % rax , % rdx call strings . Split @ PLT leaq - 2 2 4 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) . LBB 1 6 3 8 : movq $ 0 , - 3 3 6 (% rbp ) movq $ 0 , - 3 2 8 (% rbp ) . LBB 1 6 3 9 : . LBB 1 6 4 0 : . LBB 1 6 4 1 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 1 6 4 1 : jmp . L 1 9 8 0 . L 2 0 2 3 : . LBB 1 6 4 2 : nop . LBE 1 6 4 2 : . LBB 1 6 4 3 : . LBB 1 6 4 4 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 1 9 8 1 cmpq % rax , % rbx jge . L 1 9 8 1 movq - 2 2 4 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 1 6 4 4 : . LBB 1 6 4 5 : movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) . LBE 1 6 4 5 : . LBB 1 6 4 6 : . LBB 1 6 4 7 : . LBB 1 6 4 8 : movq - 3 2 8 (% rbp ), % rax cmpq $ 2 , % rax je . L 1 9 8 2 jmp . L 2 0 1 9 . L 1 9 8 1 : . LBE 1 6 4 8 : . LBE 1 6 4 7 : . LBE 1 6 4 6 : . LBB 1 6 6 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 9 8 2 : . LBE 1 6 6 4 : . LBB 1 6 6 5 : . LBB 1 6 6 3 : . LBB 1 6 5 0 : movq - 3 3 6 (% rbp ), % rax leaq . LC 3 5 3 (% rip ), % rdx cmpq % rdx , % rax jne . L 1 9 8 4 movl $ 1 , % eax jmp . L 1 9 8 6 . L 1 9 8 4 : movq - 3 3 6 (% rbp ), % rax movl $ 2 , % edx leaq . LC 3 5 3 (% rip ), % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 1 9 8 6 . L 2 0 1 9 : movl $ 0 , % eax . L 1 9 8 6 : testb % al , % al je . L 1 9 8 7 . LBB 1 6 4 9 : movq - 2 9 6 (% rbp ), % rax testq % rax , % rax setg % al . L 1 9 8 7 : . LBE 1 6 4 9 : . LBE 1 6 5 0 : testb % al , % al je . L 1 9 8 8 . LBB 1 6 5 1 : movq - 2 9 6 (% rbp ), % rax leaq - 1 (% rax ), % rdi movq - 2 8 8 (% rbp ), % rax testq % rdi , % rdi js . L 1 9 8 9 cmpq % rax , % rdi jg . L 1 9 8 9 testq % rdi , % rdi jns . L 1 9 9 0 jmp . L 2 0 2 0 . L 1 9 8 9 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 2 0 2 0 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 9 9 0 : movq - 3 0 4 (% rbp ), % rdx movq - 2 8 8 (% rbp ), % rax movq % rdx , - 3 0 4 (% rbp ) movq % rdi , - 2 9 6 (% rbp ) movq % rax , - 2 8 8 (% rbp ) . LBE 1 6 5 1 : jmp . L 1 9 9 2 . L 1 9 8 8 : . LBB 1 6 5 2 : . LBB 1 6 5 3 : . LBB 1 6 5 4 : . LBB 1 6 5 5 : movq - 3 2 8 (% rbp ), % rax cmpq $ 2 , % rax jne . L 1 9 9 3 movq - 3 3 6 (% rbp ), % rax leaq . LC 3 5 3 (% rip ), % rdx cmpq % rdx , % rax je . L 1 9 9 4 movq - 3 3 6 (% rbp ), % rax movl $ 2 , % edx leaq . LC 3 5 3 (% rip ), % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax je . L 1 9 9 4 . L 1 9 9 3 : movl $ 1 , % eax jmp . L 1 9 9 5 . L 1 9 9 4 : movl $ 0 , % eax . L 1 9 9 5 : testb % al , % al je . L 1 9 9 6 . LBB 1 6 5 6 : movq - 3 2 8 (% rbp ), % rax testq % rax , % rax jne . L 1 9 9 7 movl $ 0 , % eax jmp . L 1 9 9 6 . L 1 9 9 7 : movl $ 1 , % eax . L 1 9 9 6 : . LBE 1 6 5 6 : . LBE 1 6 5 5 : testb % al , % al je . L 2 0 0 0 . LBB 1 6 5 7 : movq - 3 2 8 (% rbp ), % rax cmpq $ 1 , % rax jne . L 2 0 0 1 movq - 3 3 6 (% rbp ), % rax leaq . LC 3 5 4 (% rip ), % rdx cmpq % rdx , % rax je . L 2 0 0 2 movq - 3 3 6 (% rbp ), % rax movzbl (% rax ), % eax movzbl % al , % eax leaq . LC 3 5 4 (% rip ), % rdx movzbl (% rdx ), % edx movzbl % dl , % edx subl % edx , % eax testl % eax , % eax je . L 2 0 0 2 . L 2 0 0 1 : movl $ 1 , % eax jmp . L 2 0 0 0 . L 2 0 0 2 : movl $ 0 , % eax . L 2 0 0 0 : . LBE 1 6 5 7 : . LBE 1 6 5 4 : testb % al , % al je . L 1 9 9 2 . LBB 1 6 5 8 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 0 0 4 . LBB 1 6 5 9 : movq - 1 9 2 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 1 6 5 9 : jmp . L 2 0 0 5 . L 2 0 0 4 : . LBB 1 6 6 0 : movq - 1 9 2 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 2 0 0 5 : . LBE 1 6 6 0 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 4 , % rdx addq % rdx , % rax movq - 3 2 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 0 0 6 . LBB 1 6 6 1 : movq - 3 3 6 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 9 9 2 . L 2 0 0 6 : . LBE 1 6 6 1 : . LBB 1 6 6 2 : movq - 3 3 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 9 9 2 : . LBE 1 6 6 2 : . LBE 1 6 5 8 : . LBE 1 6 5 3 : . LBE 1 6 5 2 : . LBE 1 6 6 3 : . LBE 1 6 6 5 : . LBE 1 6 4 3 : . LBB 1 6 6 6 : addq $ 1 , % rbx . L 1 9 8 0 : . LBE 1 6 6 6 : cmpq % r 1 3 , % rbx jl . L 2 0 2 3 . LBE 1 6 4 0 : . LBE 1 6 3 9 : . LBE 1 6 3 8 : movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) . LBB 1 6 6 7 : movq $ 0 , - 3 5 2 (% rbp ) movq $ 0 , - 3 4 4 (% rbp ) . LBB 1 6 6 8 : . LBB 1 6 6 9 : . LBB 1 6 7 0 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 6 7 0 : jmp . L 2 0 0 9 . L 2 0 2 4 : . LBB 1 6 7 1 : nop . LBE 1 6 7 1 : . LBB 1 6 7 2 : . LBB 1 6 7 3 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 2 0 1 0 cmpq % rax , % rbx jge . L 2 0 1 0 movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 1 6 7 3 : . LBB 1 6 7 4 : movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) . LBE 1 6 7 4 : . LBB 1 6 7 5 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) leaq . LC 3 5 2 (% rip ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) leaq - 1 2 8 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) . LBE 1 6 7 5 : . LBE 1 6 7 2 : . LBB 1 6 7 7 : addq $ 1 , % rbx jmp . L 2 0 0 9 . L 2 0 1 0 : . LBE 1 6 7 7 : . LBB 1 6 7 8 : . LBB 1 6 7 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 0 0 9 : . LBE 1 6 7 6 : . LBE 1 6 7 8 : cmpq % r 1 2 , % rbx jl . L 2 0 2 4 . LBE 1 6 6 9 : . LBE 1 6 6 8 : . LBE 1 6 6 7 : . LBB 1 6 7 9 : movq - 3 1 2 (% rbp ), % rax testq % rax , % rax jne . L 2 0 1 3 movq - 3 2 0 (% rbp ), % rax leaq . LC 3 4 8 (% rip ), % rdx cmpq % rdx , % rax jne . L 2 0 1 4 movl $ 1 , % eax jmp . L 2 0 1 6 . L 2 0 1 4 : movl $ 1 , % eax jmp . L 2 0 1 6 . L 2 0 1 3 : movl $ 0 , % eax . L 2 0 1 6 : testb % al , % al je . L 2 0 1 7 . LBB 1 6 8 0 : leaq . LC 3 5 2 (% rip ), % r 1 4 movl $ 1 , % r 1 5 d movq % r 1 4 , - 3 2 0 (% rbp ) movq % r 1 5 , - 3 1 2 (% rbp ) . L 2 0 1 7 : . LBE 1 6 8 0 : . LBE 1 6 7 9 : . LBB 1 6 8 1 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx . LBE 1 6 8 1 : . LBE 1 6 3 7 : addq $ 3 2 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 0 movl $ 2 0 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 0 : pushq % rbp movq % rsp , % rbp subq $ 1 9 2 , % rsp movq % rdi , - 1 6 8 (% rbp ) movq % rsi , - 1 7 6 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) movq $ 0 , - 8 8 (% rbp ) movq $ 0 , - 8 0 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 1 , - 1 7 6 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 1 , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 8 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) movb $ 0 , - 1 (% rbp ) . LBB 7 : movq - 1 7 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq main . memo (% rip ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. map . 6 . 6 2 . 7 int . 7 . 6 3 . 7 int (% rip ), % rdi call runtime . mapaccess 2 @ PLT movq % rax , % rcx movl % edx , % esi movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movb % sil , - 1 (% rbp ) . LBE 7 : cmpb $ 0 , - 1 (% rbp ) je . L 4 . LBB 8 : . LBB 9 : movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 8 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 4 : . LBE 9 : . LBE 8 : . LBE 6 : movq - 1 7 6 (% rbp ), % rax leaq - 1 (% rax ), % rcx leaq - 1 2 8 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call main . trib . LBB 1 0 : movq - 1 2 0 (% rbp ), % rsi movq - 1 1 2 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq - 1 2 0 (% rbp ), % rax addq % rax , % rdx movq - 1 1 2 (% rbp ), % rax addq % rdx , % rax cmpq $- 1 , - 1 8 4 (% rbp ) je . L 5 cmpq $ 0 , - 1 8 4 (% rbp ) jne . L 6 call runtime . panicdivide @ PLT . L 6 : cqto idivq - 1 8 4 (% rbp ) movq % rdx , % rax jmp . L 9 . L 5 : movl $ 0 , % eax . L 9 : movq % rsi , - 1 2 8 (% rbp ) movq % rcx , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 1 7 6 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq main . memo (% rip ), % rax leaq - 4 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. map . 6 . 6 2 . 7 int . 7 . 6 3 . 7 int (% rip ), % rdi call runtime . mapassign @ PLT movq % rax , % rcx movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 1 : . LBB 1 2 : movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 8 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 1 2 : . LBE 2 : movq - 1 6 8 (% rbp ), % rax leave ret
. LFB 2 7 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 : pushq % rbp movq % rsp , % rbp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jle . L 2 . LBB 4 : . LBB 5 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : movq - 3 2 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 3 : . LBE 6 : . LBE 2 : popq % rbp ret
. LFB 0 : leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 9 movl $ 2 8 0 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 4 0 , % rsp movq % rdi , - 2 6 4 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) movq $ 0 , - 2 0 8 (% rbp ) . LBB 2 : movl $ 0 , % r 8 d movl $ 8 , % ecx movl $ 1 6 , % edx movl $ 0 , % esi leaq type .. map . 6 int . 7 int (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 4 0 (% rbp ) . LBB 3 : movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 7 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 1 8 4 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 1 9 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rbx , - 4 8 (% rbp ) movq % rax , - 5 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 5 6 (% rbp ), % rax movq % rax , - 1 6 8 (% rbp ) movq - 4 8 (% rbp ), % r 1 2 leaq - 1 6 8 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 2 , (% rax ) . LBE 1 2 : . LBE 1 1 : . LBE 8 : . LBB 1 4 : addq $ 1 , % rbx jmp . L 2 . L 3 : . LBE 1 4 : . LBB 1 5 : . LBB 1 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 3 : . LBE 1 5 : cmpq % r 1 3 , % rbx jl . L 1 7 . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) . LBB 1 6 : movq $ 0 , - 6 4 (% rbp ) . LBB 1 7 : . LBB 1 8 : . LBB 1 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 1 9 : jmp . L 6 . L 1 8 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 7 cmpq % rax , % rbx jge . L 7 movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 2 2 : . LBB 2 3 : movq % rax , - 6 4 (% rbp ) . LBE 2 3 : . LBB 2 4 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 1 2 movq - 6 4 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) leaq - 1 0 4 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 8 jmp . L 1 5 . L 7 : . LBE 2 4 : . LBB 2 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 8 : . LBE 2 7 : . LBB 2 8 : . LBB 2 5 : movq - 1 2 8 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) . LBE 2 5 : jmp . L 1 0 . L 1 5 : . LBB 2 6 : movq - 1 2 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rdx movq % rcx , - 2 5 6 (% rbp ) movq % rax , - 2 4 8 (% rbp ) movq % rdx , - 2 4 0 (% rbp ) . L 1 0 : . LBE 2 6 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 3 , (% rax ) . LBE 2 8 : . LBE 2 1 : . LBB 2 9 : addq $ 1 , % rbx . L 6 : . LBE 2 9 : cmpq % r 1 4 , % rbx jl . L 1 8 . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 3 0 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 6 4 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 0 : . LBE 2 : movq - 2 6 4 (% rbp ), % rax addq $ 2 4 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
leaq - 4 5 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 2 0 3 movl $ 4 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 5 3 : ret . L 1 2 0 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 0 8 , % rsp movq % rdi , - 3 6 0 (% rbp ) leaq - 3 3 6 (% rbp ), % rax movl $ 1 0 , % ecx movl $ 2 0 , % edx movl $ 0 , % esi movq % rax , % rdi call go . binaryTree . randomSlice leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq $ 0 , (% rax ) movq % rax , - 5 6 (% rbp ) call go . binaryTree . newGBT movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) . LBB 1 1 9 7 : movq $ 0 , - 6 4 (% rbp ) . LBB 1 1 9 8 : . LBB 1 1 9 9 : . LBB 1 2 0 0 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movl $ 0 , % r 1 2 d . LBE 1 2 0 0 : jmp . L 1 1 8 4 . L 1 2 0 1 : . LBB 1 2 0 1 : nop . LBE 1 2 0 1 : . LBB 1 2 0 2 : . LBB 1 2 0 3 : movq - 2 9 6 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 1 1 8 5 cmpq % rax , % r 1 2 jge . L 1 1 8 5 movq - 3 0 4 (% rbp ), % rdx movq % r 1 2 , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax . LBE 1 2 0 3 : . LBB 1 2 0 4 : movq % rax , - 6 4 (% rbp ) . LBE 1 2 0 4 : . LBB 1 2 0 5 : movq - 3 5 2 (% rbp ), % rax movq 2 4 (% rax ), % r 1 3 leaq uint 3 2 .. d (% rip ), % r 1 4 leaq uint 3 2 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq - 2 8 0 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movl % eax , (% rdx ) movq - 2 8 0 (% rbp ), % rax movq % rax , % r 1 5 movq - 3 4 4 (% rbp ), % rdi movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax movq % rcx , % rsi movq % rax , % rdx call *% r 1 3 . LVL 1 5 4 : . LBE 1 2 0 5 : . LBE 1 2 0 2 : . LBB 1 2 0 7 : addq $ 1 , % r 1 2 jmp . L 1 1 8 4 . L 1 1 8 5 : . LBE 1 2 0 7 : . LBB 1 2 0 8 : . LBB 1 2 0 6 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 1 1 8 4 : . LBE 1 2 0 6 : . LBE 1 2 0 8 : cmpq - 3 6 8 (% rbp ), % r 1 2 jl . L 1 2 0 1 . LBE 1 1 9 9 : . LBE 1 1 9 8 : . LBE 1 1 9 7 : leaq type ... 6 . 7 . 1 go . binaryTree . gbtElement (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rbx movl $ 0 , % edx movl $ 0 , % esi leaq type ... 1 go . binaryTree . gbtElement (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 2 5 6 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 8 8 . LBB 1 2 0 9 : movq - 2 7 2 (% rbp ), % rax movq % rax , (% rbx ) jmp . L 1 1 8 9 . L 1 1 8 8 : . LBE 1 2 0 9 : . LBB 1 2 1 0 : movq - 2 7 2 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 1 8 9 : . LBE 1 2 1 0 : movq - 3 5 2 (% rbp ), % rax movq 9 6 (% rax ), % rdx movq - 3 4 4 (% rbp ), % rax movq % rax , % rdi call *% rdx . LVL 1 5 5 : movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq go . binaryTree . TestGBT_RightRotate .. func 1 (% rip ), % r 1 4 movq - 7 2 (% rbp ), % rbx movq - 3 5 2 (% rbp ), % rax movq 1 6 (% rax ), % r 1 5 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . binaryTree . rightRotateNodes 1 . 0 . 1 . 6 . 7 . 1 go . binaryTree . gbtElement . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq % r 1 4 , - 2 4 0 (% rbp ) movq % rbx , - 2 3 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 9 0 . LBB 1 2 1 1 : movq - 2 4 8 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 2 1 1 : jmp . L 1 1 9 1 . L 1 1 9 0 : . LBB 1 2 1 2 : movq - 2 4 8 (% rbp ), % rcx leaq - 2 4 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . binaryTree . rightRotateNodes 1 . 0 . 1 . 6 . 7 . 1 go . binaryTree . gbtElement . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 1 9 1 : . LBE 1 2 1 2 : movq - 2 4 8 (% rbp ), % rdi movq - 3 4 4 (% rbp ), % r 8 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rcx , % rsi movq % rdx , % rax movq % rdi , % rcx movq % rax , % rdx movq % r 8 , % rdi call *% r 1 5 . LVL 1 5 6 : . LBB 1 2 1 3 : movq $ 0 , - 8 0 (% rbp ) . LBB 1 2 1 4 : . LBB 1 2 1 5 : . LBB 1 2 1 6 : movq - 7 2 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 1 2 1 6 : jmp . L 1 1 9 2 . L 1 2 0 2 : . LBB 1 2 1 7 : nop . LBE 1 2 1 7 : . LBB 1 2 1 8 : . LBB 1 2 1 9 : movq - 2 1 6 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 1 1 9 3 cmpq % rax , % r 1 2 jge . L 1 1 9 3 movq - 2 2 4 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 2 1 9 : . LBB 1 2 2 0 : movq % rax , - 8 0 (% rbp ) . LBE 1 2 2 0 : . LBB 1 2 2 1 : movq - 3 5 2 (% rbp ), % rax movq 8 8 (% rax ), % r 8 leaq type ... 1 go . binaryTree . gbtElement (% rip ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 3 7 6 (% rbp ) movq - 3 4 4 (% rbp ), % rdi movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rsi movq % rax , % rdx call *% r 8 . LVL 1 5 7 : . LBE 1 2 2 1 : . LBE 1 2 1 8 : . LBB 1 2 2 3 : addq $ 1 , % r 1 2 jmp . L 1 1 9 2 . L 1 1 9 3 : . LBE 1 2 2 3 : . LBB 1 2 2 4 : . LBB 1 2 2 2 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 1 1 9 2 : . LBE 1 2 2 2 : . LBE 1 2 2 4 : cmpq % r 1 3 , % r 1 2 jl . L 1 2 0 2 . LBE 1 2 1 5 : . LBE 1 2 1 4 : . LBE 1 2 1 3 : movq - 3 5 2 (% rbp ), % rax movq 9 6 (% rax ), % rdx movq - 3 4 4 (% rbp ), % rax movq % rax , % rdi call *% rdx . LVL 1 5 8 : movq % rax , % r 1 2 movq % rdx , % r 1 3 movq go . binaryTree . debug (% rip ), % rax movzbl (% rax ), % edx movq - 5 6 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . binaryTree . checkGBT movq % rax , % rdx movq - 3 5 2 (% rbp ), % rax movq 1 6 (% rax ), % r 8 movq - 3 4 4 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdi movq % rdx , % rcx movq % rdi , % rdx movq % rax , % rdi call *% r 8 . LVL 1 5 9 : . LBB 1 2 2 5 : movq - 5 6 (% rbp ), % rax movq (% rax ), % rdx movq - 3 2 8 (% rbp ), % rax cmpq % rax , % rdx je . L 1 1 8 3 . LBB 1 2 2 6 : movq - 3 2 8 (% rbp ), % rbx leaq string .. d (% rip ), % r 1 5 movq % r 1 5 , - 4 4 8 (% rbp ) leaq go .. C 4 3 5 (% rip ), % rax movq % rax , - 4 4 0 (% rbp ) leaq int .. d (% rip ), % r 1 4 movq % r 1 4 , - 4 3 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rbx , (% rax ) movq - 2 0 0 (% rbp ), % rax movq % rax , - 4 2 4 (% rbp ) movq % r 1 5 , - 4 1 6 (% rbp ) leaq go .. C 4 3 6 (% rip ), % rax movq % rax , - 4 0 8 (% rbp ) movq % r 1 4 , - 4 0 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 9 2 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq (% rdx ), % rdx movq % rdx , (% rax ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 3 9 2 (% rbp ) leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movdqa - 4 4 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 7 6 (% rbp ) movdqa - 4 3 2 (% rbp ), % xmm 1 movups % xmm 1 , - 1 6 0 (% rbp ) movdqa - 4 1 6 (% rbp ), % xmm 2 movups % xmm 2 , - 1 4 4 (% rbp ) movdqa - 4 0 0 (% rbp ), % xmm 3 movups % xmm 3 , - 1 2 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 9 7 . LBB 1 2 2 7 : movq - 1 8 4 (% rbp ), % rax movq - 1 7 6 (% rbp ), % rcx movq - 1 6 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 1 6 0 (% rbp ), % rcx movq - 1 5 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 1 4 4 (% rbp ), % rcx movq - 1 3 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 1 2 8 (% rbp ), % rcx movq - 1 2 0 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) . LBE 1 2 2 7 : jmp . L 1 1 9 8 . L 1 1 9 7 : . LBB 1 2 2 8 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 1 9 8 : . LBE 1 2 2 8 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 4 , - 1 0 4 (% rbp ) movq $ 4 , - 9 6 (% rbp ) movq - 3 6 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call testing . T . Log .. stub @ PLT addq $ 3 2 , % rsp movq - 3 6 0 (% rbp ), % rax movq % rax , % rdi call testing . T . Fail .. stub @ PLT . L 1 1 8 3 : . LBE 1 2 2 6 : . LBE 1 2 2 5 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 1 movl $ 2 8 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 4 0 , % rsp movq % rdi , - 2 6 4 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) movq $ 0 , - 2 0 8 (% rbp ) . LBB 2 : movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) . LBB 3 : movq $ 0 , - 4 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rcx movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 2 9 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 1 8 4 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 9 : . LBB 1 0 : movq % rdx , - 4 8 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 4 8 (% rbp ), % rdx movq % rdx , - 4 0 (% rbp ) . LBB 1 2 : cmpq $ 0 , - 4 8 (% rbp ) js . L 4 jmp . L 5 . L 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 7 : . LBB 1 8 : . LBB 1 4 : . LBB 1 3 : movq - 4 8 (% rbp ), % rdx negq % rdx movq % rdx , - 4 0 (% rbp ) . L 5 : . LBE 1 3 : . LBE 1 4 : . LBB 1 5 : subq $ 1 , - 4 0 (% rbp ) movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 4 0 (% rbp ) js . L 6 cmpq % rdx , - 4 0 (% rbp ) jl . L 2 4 . L 6 : movq - 4 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : movq 1 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rsi , % rdx movq (% rdx ), % rdx testq % rdx , % rdx jle . L 8 . LBB 1 6 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 4 0 (% rbp ) js . L 9 cmpq % rdx , - 4 0 (% rbp ) jl . L 2 5 . L 9 : movq - 4 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 4 0 (% rbp ) js . L 1 1 cmpq % rdx , - 4 0 (% rbp ) jl . L 2 6 . L 1 1 : movq - 4 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq 1 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rsi , % rdx movq (% rdx ), % rsi movq 1 6 (% rbp ), % rdi movq - 4 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rdi , % rdx negq % rsi movq % rsi , (% rdx ) . L 8 : . LBE 1 6 : . LBE 1 5 : . LBE 1 8 : . LBE 8 : . LBB 1 9 : addq $ 1 , % rax . L 2 : . LBE 1 9 : cmpq % rcx , % rax jl . L 2 9 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 2 0 : movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 2 1 : . LBB 2 2 : . LBB 2 3 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 2 3 : jmp . L 1 5 . L 3 0 : . LBB 2 4 : nop . LBE 2 4 : . LBB 2 5 : . LBB 2 6 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 1 6 cmpq % rax , % rbx jge . L 1 6 movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 2 6 : . LBB 2 7 : movq % rbx , - 5 6 (% rbp ) movq % rax , - 6 4 (% rbp ) . LBE 2 7 : . LBB 2 8 : . LBB 2 9 : cmpq $ 0 , - 6 4 (% rbp ) jg . L 1 7 jmp . L 1 8 . L 1 6 : . LBE 2 9 : . LBE 2 8 : . LBB 3 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : . LBE 3 4 : . LBB 3 5 : . LBB 3 3 : . LBB 3 0 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 1 2 movq - 5 6 (% rbp ), % rax leaq 1 (% rax ), % r 1 4 leaq 1 (% r 1 2 ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 9 . LBB 3 1 : movq - 1 2 8 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) . LBE 3 1 : jmp . L 2 0 . L 1 9 : . LBB 3 2 : movq - 1 2 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rdx movq % rcx , - 2 5 6 (% rbp ) movq % rax , - 2 4 8 (% rbp ) movq % rdx , - 2 4 0 (% rbp ) . L 2 0 : . LBE 3 2 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 4 , (% rax ) . L 1 8 : . LBE 3 0 : . LBE 3 3 : . LBE 3 5 : . LBE 2 5 : . LBB 3 6 : addq $ 1 , % rbx . L 1 5 : . LBE 3 6 : cmpq % r 1 3 , % rbx jl . L 3 0 . LBE 2 2 : . LBE 2 1 : . LBE 2 0 : . LBB 3 7 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 6 4 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 7 : . LBE 2 : movq - 2 6 4 (% rbp ), % rax addq $ 2 4 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 6 movl $ 8 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp subq $ 8 0 , % rsp movq $ 0 , - 4 8 (% rbp ) . LBB 2 : movq $- 2 1 4 7 4 8 3 6 4 8 , - 8 (% rbp ) movq $- 2 1 4 7 4 8 3 6 4 8 , - 1 6 (% rbp ) movq $- 2 1 4 7 4 8 3 6 4 8 , - 2 4 (% rbp ) movq $ 2 1 4 7 4 8 3 6 4 7 , - 3 2 (% rbp ) movq $ 2 1 4 7 4 8 3 6 4 7 , - 4 0 (% rbp ) . LBB 3 : movq $ 0 , - 5 6 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rdi movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 1 5 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq - 8 0 (% rbp ), % rdx movq % rax , % rcx salq $ 3 , % rcx addq % rcx , % rdx movq (% rdx ), % rdx . LBE 9 : . LBB 1 0 : movq % rdx , - 5 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 5 6 (% rbp ), % rdx cmpq - 8 (% rbp ), % rdx jg . L 4 jmp . L 1 3 . L 3 : . LBE 1 2 : . LBE 1 1 : . LBB 2 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 2 9 : . LBB 3 0 : . LBB 2 2 : . LBB 1 3 : . LBB 1 4 : movq - 1 6 (% rbp ), % rsi movq - 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rsi , - 2 4 (% rbp ) movq % rcx , - 1 6 (% rbp ) movq % rdx , - 8 (% rbp ) . LBE 1 4 : . LBE 1 3 : jmp . L 6 . L 1 3 : . LBB 1 5 : . LBB 1 6 : movq - 5 6 (% rbp ), % rdx cmpq - 1 6 (% rbp ), % rdx jle . L 7 . LBB 1 7 : . LBB 1 8 : movq - 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rcx , - 2 4 (% rbp ) movq % rdx , - 1 6 (% rbp ) . LBE 1 8 : . LBE 1 7 : jmp . L 6 . L 7 : . LBB 1 9 : . LBB 2 0 : movq - 5 6 (% rbp ), % rdx cmpq - 2 4 (% rbp ), % rdx jle . L 6 . LBB 2 1 : movq - 5 6 (% rbp ), % rdx movq % rdx , - 2 4 (% rbp ) . L 6 : . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBE 1 6 : . LBE 1 5 : . LBE 2 2 : . LBB 2 3 : movq - 5 6 (% rbp ), % rdx cmpq - 3 2 (% rbp ), % rdx jge . L 8 . LBB 2 4 : . LBB 2 5 : movq - 3 2 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rcx , - 4 0 (% rbp ) movq % rdx , - 3 2 (% rbp ) . LBE 2 5 : . LBE 2 4 : jmp . L 9 . L 8 : . LBB 2 6 : . LBB 2 7 : movq - 5 6 (% rbp ), % rdx cmpq - 4 0 (% rbp ), % rdx jge . L 9 . LBB 2 8 : movq - 5 6 (% rbp ), % rdx movq % rdx , - 4 0 (% rbp ) . L 9 : . LBE 2 8 : . LBE 2 7 : . LBE 2 6 : . LBE 2 3 : . LBE 3 0 : . LBE 8 : . LBB 3 1 : addq $ 1 , % rax . L 2 : . LBE 3 1 : cmpq % rdi , % rax jl . L 1 5 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 3 2 : movq - 3 2 (% rbp ), % rax imulq - 4 0 (% rbp ), % rax movq % rax , % rdx movq - 1 6 (% rbp ), % rax imulq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . leetcode 0 6 2 8 . max imulq - 8 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax . LBE 3 2 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 0 movl $ 4 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 0 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) . LBB 3 : jmp . L 2 . L 4 9 : . LBB 4 : nop . LBE 4 : . LBB 5 : movq $ 0 , - 1 6 (% rbp ) movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 2 4 (% rbp ) . LBB 6 : . LBB 7 : jmp . L 3 . L 4 8 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 4 cmpq % rax , - 1 6 (% rbp ) jl . L 3 4 . L 4 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq - 1 6 (% rbp ), % rax addq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 6 cmpq % rdx , % rax jl . L 3 5 . L 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq 1 6 (% rbp ), % rcx movq - 1 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jle . L 8 . LBB 1 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 9 cmpq % rax , - 1 6 (% rbp ) jl . L 3 6 . L 9 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 3 2 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 1 cmpq % rax , - 1 6 (% rbp ) jl . L 3 7 . L 1 1 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 1 6 (% rbp ), % rax addq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 3 cmpq % rdx , % rax jl . L 3 8 . L 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq 1 6 (% rbp ), % rcx movq - 1 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) movq - 1 6 (% rbp ), % rax addq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 5 cmpq % rdx , % rax jl . L 3 9 . L 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rax , % rdx movq - 3 2 (% rbp ), % rax movq % rax , (% rdx ) . L 8 : . LBE 1 1 : . LBE 1 0 : addq $ 1 , - 1 6 (% rbp ) . LBB 1 2 : movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 7 cmpq % rdx , % rax jl . L 4 0 . L 1 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) js . L 1 9 cmpq % rdx , - 2 4 (% rbp ) jl . L 4 1 . L 1 9 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jle . L 2 1 . LBB 1 3 : movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 2 2 cmpq % rdx , % rax jl . L 4 2 . L 2 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 3 2 (% rbp ) movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 2 4 cmpq % rdx , % rax jl . L 4 3 . L 2 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) js . L 2 6 cmpq % rdx , - 2 4 (% rbp ) jl . L 4 4 . L 2 6 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rdx , % rcx movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rax , % rdx movq (% rcx ), % rax movq % rax , (% rdx ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 8 cmpq % rax , - 2 4 (% rbp ) jl . L 4 5 . L 2 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 3 2 (% rbp ), % rax movq % rax , (% rdx ) . L 2 1 : . LBE 1 3 : . LBE 1 2 : subq $ 1 , - 2 4 (% rbp ) . L 3 : . LBE 9 : movq - 1 6 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax jle . L 4 8 . LBE 7 : . LBE 6 : . LBE 5 : . LBB 1 4 : addq $ 1 , - 8 (% rbp ) . L 2 : . LBE 1 4 : movq 2 4 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax cmpq - 8 (% rbp ), % rax jg . L 4 9 . LBE 3 : . LBE 2 : leave ret
leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 7 7 movl $ 2 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 5 : ret . L 3 7 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 subq $ 2 5 6 , % rsp movq % rdi , - 2 8 0 (% rbp ) . LBB 3 4 4 : movq - 2 8 0 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 0 (% rbp ) . LBB 3 4 5 : jmp . L 3 7 2 . L 3 7 6 : . LBB 3 4 6 : nop . LBE 3 4 6 : . LBB 3 4 7 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax leaq string .. d (% rip ), % r 1 4 leaq go .. C 1 9 4 (% rip ), % r 1 5 movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq % r 1 4 , - 2 2 4 (% rbp ) movq % r 1 5 , - 2 1 6 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 2 , - 1 5 2 (% rbp ) movq $ 2 , - 1 4 4 (% rbp ) leaq - 1 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rax , % rdi call fmt . Print @ PLT addq $ 3 2 , % rsp movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) . LBE 3 4 7 : . LBB 3 4 8 : movq - 4 0 (% rbp ), % rax movq 2 4 (% rax ), % rax movq % rax , - 4 0 (% rbp ) . L 3 7 2 : . LBE 3 4 8 : cmpq $ 0 , - 4 0 (% rbp ) jne . L 3 7 6 . LBE 3 4 5 : . LBE 3 4 4 : leaq string .. d (% rip ), % r 1 2 leaq go .. C 1 9 5 (% rip ), % r 1 3 movq % r 1 2 , - 1 7 6 (% rbp ) movq % r 1 3 , - 1 6 8 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rax , % rdi call fmt . Print @ PLT addq $ 3 2 , % rsp movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) leaq - 3 2 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 4 5 movl $ 2 1 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 2 : ret . L 4 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 9 2 , % rsp movq % rdi , - 2 0 0 (% rbp ) . LBB 2 8 : . LBB 2 9 : movq 3 2 (% rbp ), % rax testq % rax , % rax setle % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 6 . LBB 3 0 : movq 3 2 (% rbp ), % rdx movq - 2 0 0 (% rbp ), % rax movq 3 2 (% rax ), % rax cmpq % rax , % rdx setg % al . L 2 6 : . LBE 3 0 : . LBE 2 9 : testb % al , % al jne . L 4 4 . LBE 2 8 : movq 3 2 (% rbp ), % rdi movq 3 2 (% rbp ), % rax testq % rdi , % rdi js . L 2 9 cmpq % rax , % rdi jg . L 2 9 testq % rdi , % rdi jns . L 3 0 jmp . L 4 2 . L 2 9 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 4 2 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 3 0 : movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax movq % rdx , 1 6 (% rbp ) movq % rdi , 2 4 (% rbp ) movq % rax , 3 2 (% rbp ) movq 3 2 (% rbp ), % rax movl % eax , % edi call go . bytepool . log 2 Floor movq % rax , - 2 4 (% rbp ) cmpq $ 0 , - 2 0 0 (% rbp ) jne . L 3 2 call runtime . panicmem @ PLT . L 3 2 : movq - 2 0 0 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx testq % rdx , % rdx js . L 3 3 movq - 2 4 (% rbp ), % rdx cmpq % rdx , % rax jle . L 3 3 movq - 1 9 2 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 5 , % rax addq % rdx , % rax movq % rax , - 3 2 (% rbp ) cmpq $ 0 , - 3 2 (% rbp ) je . L 3 4 jmp . L 4 3 . L 3 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndexU @ PLT . L 3 4 : call runtime . panicmem @ PLT . L 4 3 : movq - 3 2 (% rbp ), % rax addq $ 2 4 , % rax movq % rax , % rdi call sync . Mutex . Lock @ PLT movq - 3 2 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 3 6 . LBB 3 2 : movq - 3 2 (% rbp ), % rbx movq - 1 6 0 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 6 . 7 uint 8 (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 1 1 2 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 7 . LBB 3 3 : movq - 1 2 8 (% rbp ), % rax movq % rax , (% rbx ) . LBE 3 3 : jmp . L 3 8 . L 3 7 : . LBB 3 4 : movq - 1 2 8 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 3 8 . L 3 6 : . LBE 3 4 : . LBE 3 2 : . LBB 3 5 : movq - 1 6 0 (% rbp ), % rsi movq - 1 4 4 (% rbp ), % rdx movq - 3 2 (% rbp ), % rcx movq % rsi , (% rcx ) movq - 3 2 (% rbp ), % rcx movq % rax , 8 (% rcx ) movq - 3 2 (% rbp ), % rax movq % rdx , 1 6 (% rax ) . L 3 8 : . LBE 3 5 : movq - 3 2 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rdx movq % r 1 2 , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq 1 6 (% rbp ), % rcx movq 2 4 (% rbp ), % rbx movq % rcx , - 9 6 (% rbp ) movq % rbx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rdx movq % rdx , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 8 0 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 3 9 . LBB 3 6 : movq - 9 6 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 3 6 : jmp . L 4 0 . L 3 9 : . LBB 3 7 : movq - 9 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 4 0 : . LBE 3 7 : cmpq $ 0 , - 3 2 (% rbp ) jne . L 4 1 call runtime . panicmem @ PLT . L 4 1 : movq - 3 2 (% rbp ), % rax addq $ 2 4 , % rax movq % rax , % rdi call sync . Mutex . Unlock @ PLT jmp . L 2 5 . L 4 4 : . LBB 3 8 : . LBB 3 1 : nop . L 2 5 : . LBE 3 1 : . LBE 3 8 : addq $ 1 9 2 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 0 movl $ 2 3 2 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 0 8 , % rsp movq % rdi , - 2 1 6 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 string . 7 bool (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 3 2 (% rbp ) movq 2 4 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 4 0 (% rbp ) movq 2 4 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 4 8 (% rbp ) . LBB 3 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 3 8 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 cmpq % rax , - 2 4 (% rbp ) jl . L 2 9 . L 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) . LBB 7 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movl $ 1 , % ebx movq - 3 2 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 bool (% rip ), % rdi call runtime . mapassign_faststr @ PLT movb % bl , (% rax ) . LBE 7 : movq - 1 9 2 (% rbp ), % rdx movq - 1 8 4 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call strings . ToLower @ PLT movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) . LBB 8 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq - 2 4 (% rbp ), % rbx movq - 4 0 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq % rbx , (% rax ) . LBE 8 : . LBB 9 : movq - 1 9 2 (% rbp ), % rdx movq - 1 8 4 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . problem 0 9 6 6 . replacingVowel movq - 2 4 (% rbp ), % rbx movq - 4 8 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq % rbx , (% rax ) . LBE 9 : . LBE 6 : . LBB 1 0 : subq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 1 0 : cmpq $ 0 , - 2 4 (% rbp ) jns . L 3 8 . LBE 4 : . LBE 3 : movq 4 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq string .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 7 6 (% rbp ) movq % rbx , - 1 6 8 (% rbp ) movq % rbx , - 1 6 0 (% rbp ) . LBB 1 1 : movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 2 0 8 (% rbp ) movq $ 0 , - 2 0 0 (% rbp ) . LBB 1 2 : . LBB 1 3 : . LBB 1 4 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 4 : jmp . L 7 . L 3 9 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 1 0 4 (% rbp ), % rax testq % rbx , % rbx js . L 8 cmpq % rax , % rbx jge . L 8 movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 1 7 : . LBB 1 8 : movq % rbx , - 5 6 (% rbp ) movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) . LBE 1 8 : . LBB 1 9 : . LBB 2 0 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 bool (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movzbl (% rax ), % eax testb % al , % al jne . L 9 jmp . L 3 1 . L 8 : . LBE 2 0 : . LBE 1 9 : . LBB 3 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 9 : . LBE 3 7 : . LBB 3 8 : . LBB 3 6 : . LBB 2 1 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 1 cmpq % rax , - 5 6 (% rbp ) jl . L 3 2 . L 1 1 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq - 1 7 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq - 2 0 0 (% rbp ), % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 3 . LBB 2 2 : movq - 2 0 8 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 4 . L 1 3 : . LBE 2 2 : . LBB 2 3 : movq - 2 0 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 1 4 . L 3 1 : . LBE 2 3 : . LBE 2 1 : . LBB 2 4 : . LBB 2 5 : movq $ 0 , - 6 4 (% rbp ) movb $ 0 , - 6 5 (% rbp ) . LBB 2 6 : movq - 2 0 8 (% rbp ), % rdx movq - 2 0 0 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call strings . ToLower @ PLT movq - 4 0 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 2 _faststr @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movb % dl , - 6 5 (% rbp ) . LBE 2 6 : cmpb $ 0 , - 6 5 (% rbp ) je . L 1 5 . LBB 2 7 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 6 cmpq % rax , - 5 6 (% rbp ) jl . L 3 3 . L 1 6 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq - 1 7 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 4 , % rax leaq (% rdx ,% rax ), % rcx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 8 cmpq % rax , - 6 4 (% rbp ) jl . L 3 4 . L 1 8 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % rsi movq % rsi , 8 (% rcx ) leaq runtime . writeBarrier (% rip ), % rsi movl (% rsi ), % esi testl % esi , % esi jne . L 2 0 . LBB 2 8 : movq % rax , (% rcx ) jmp . L 1 4 . L 2 0 : . LBE 2 8 : . LBB 2 9 : movq % rax , % rdx movq % rcx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 1 4 . L 1 5 : . LBE 2 9 : . LBE 2 7 : . LBB 3 0 : . LBB 3 1 : movq $ 0 , - 8 0 (% rbp ) movb $ 0 , - 8 1 (% rbp ) . LBB 3 2 : movq - 2 0 8 (% rbp ), % rdx movq - 2 0 0 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . problem 0 9 6 6 . replacingVowel movq - 4 8 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 2 _faststr @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 8 0 (% rbp ) movb % dl , - 8 1 (% rbp ) . LBE 3 2 : cmpb $ 0 , - 8 1 (% rbp ) je . L 1 4 . LBB 3 3 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 2 1 cmpq % rax , - 5 6 (% rbp ) jl . L 3 5 . L 2 1 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 1 7 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 4 , % rax leaq (% rdx ,% rax ), % rcx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 2 3 cmpq % rax , - 8 0 (% rbp ) jl . L 3 6 . L 2 3 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq 1 6 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % rsi movq % rsi , 8 (% rcx ) leaq runtime . writeBarrier (% rip ), % rsi movl (% rsi ), % esi testl % esi , % esi jne . L 2 5 . LBB 3 4 : movq % rax , (% rcx ) jmp . L 1 4 . L 2 5 : . LBE 3 4 : . LBB 3 5 : movq % rax , % rdx movq % rcx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 4 : . LBE 3 5 : . LBE 3 3 : . LBE 3 1 : . LBE 3 0 : . LBE 2 5 : . LBE 2 4 : . LBE 3 6 : . LBE 3 8 : . LBE 1 6 : . LBB 3 9 : addq $ 1 , % rbx . L 7 : . LBE 3 9 : cmpq % r 1 2 , % rbx jl . L 3 9 . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 4 0 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 2 1 6 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 0 : . LBE 2 : movq - 2 1 6 (% rbp ), % rax addq $ 2 0 8 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 2 6 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 5 : ret . L 2 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 2 0 , % rsp movl $ 1 0 0 , % edi call math .. z 2 frand . Intn @ PLT movq % rax , - 6 4 (% rbp ) call runtime . printlock @ PLT leaq . LC 6 (% rip ), % r 1 4 movl $ 6 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . printstring @ PLT call runtime . printsp @ PLT movq - 6 4 (% rbp ), % rax movq % rax , % rdi call runtime . printint @ PLT call runtime . printsp @ PLT leaq . LC 7 (% rip ), % r 1 2 movl $ 1 1 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . printstring @ PLT call runtime . printnl @ PLT call runtime . printunlock @ PLT . LBB 9 : movq $ 0 , - 5 6 (% rbp ) . LBB 1 0 : jmp . L 1 9 . L 2 5 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : movq - 5 6 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq uint 8 .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) movq % rbx , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rbx movl $ 4 2 , % r 1 2 d leaq 1 (% rbx ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 0 movq - 1 2 8 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq uint 8 .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) jmp . L 2 1 . L 2 0 : movq - 1 2 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rdx movq % rcx , - 1 2 8 (% rbp ) movq % rax , - 1 2 0 (% rbp ) movq % rdx , - 1 1 2 (% rbp ) . L 2 1 : movq - 1 2 8 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movb % r 1 2 b , (% rax ) . LBE 1 2 : . LBB 1 3 : addq $ 1 , - 5 6 (% rbp ) . L 1 9 : . LBE 1 3 : movq - 5 6 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax jl . L 2 5 . LBE 1 0 : . LBE 9 : addq $ 1 2 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 5 movl $ 2 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 5 : pushq % rbp movq % rsp , % rbp subq $ 1 6 , % rsp movq $ 0 , - 8 (% rbp ) . LBB 2 : leaq go . bank . mu (% rip ), % rdi call sync . Mutex . Lock @ PLT movq go . bank . balance (% rip ), % rax movq % rax , - 1 6 (% rbp ) leaq go . bank . mu (% rip ), % rdi call sync . Mutex . Unlock @ PLT . LBB 3 : movq - 1 6 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . LBE 3 : . LBE 2 : leave ret
. LFB 0 : leaq - 7 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 3 movl $ 7 2 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 8 0 , % rsp leaq - 6 4 0 (% rbp ), % rax movq % rax , % rdi call time . Now @ PLT movq $ 1 , - 5 6 (% rbp ) movq $ 1 , - 6 4 (% rbp ) movq $ 0 , - 7 2 (% rbp ) movq $ 0 , - 8 0 (% rbp ) . LBB 2 : movq $ 1 , - 8 8 (% rbp ) . LBB 3 : jmp . L 2 . L 1 2 : . LBB 4 : nop . LBE 4 : . LBB 5 : movq - 8 8 (% rbp ), % rdx movq % rdx , % rax salq $ 3 , % rax subq % rdx , % rax addq % rax , % rax movq % rax , % rcx movq - 8 8 (% rbp ), % rax imulq % rax , % rax movq % rax , % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rcx , % rax addq $ 1 , % rax movq % rax , - 9 6 (% rbp ) . LBB 6 : . LBB 7 : jmp . L 3 . L 1 1 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq - 6 4 (% rbp ), % rax leaq (% rax ,% rax ), % rdx movq - 5 6 (% rbp ), % rax addq % rdx , % rax addq $ 1 , % rax movq % rax , - 5 6 (% rbp ) addq $ 1 , - 6 4 (% rbp ) . L 3 : . LBE 9 : movq - 5 6 (% rbp ), % rax cmpq - 9 6 (% rbp ), % rax jl . L 1 1 . LBE 7 : . LBE 6 : . LBB 1 0 : movq - 9 6 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jne . L 6 . LBB 1 1 : leaq int .. d (% rip ), % rax movq % rax , - 7 2 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 7 6 (% rbp ) movq - 5 7 6 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , (% rdx ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 7 1 2 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 7 0 4 (% rbp ) leaq go .. C 1 1 (% rip ), % rax movq % rax , - 6 9 6 (% rbp ) leaq int 6 4 .. d (% rip ), % rax movq % rax , - 6 8 8 (% rbp ) leaq int 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 8 (% rbp ) movq - 5 6 8 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax movq % rax , (% rdx ) movq - 5 6 8 (% rbp ), % rax movq % rax , - 6 8 0 (% rbp ) movdqa - 7 2 0 (% rbp ), % xmm 0 movups % xmm 0 , - 5 6 0 (% rbp ) movdqa - 7 0 4 (% rbp ), % xmm 1 movups % xmm 1 , - 5 4 4 (% rbp ) movdqa - 6 8 8 (% rbp ), % xmm 2 movups % xmm 2 , - 5 2 8 (% rbp ) leaq - 5 6 0 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 3 , - 3 4 4 (% rbp ) movq $ 3 , - 3 3 6 (% rbp ) leaq - 3 2 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 3 3 6 (% rbp ) pushq - 3 4 4 (% rbp ) pushq - 3 5 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 6 0 8 (% rbp ) movq % rdx , - 6 0 0 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) addq $ 1 , - 7 2 (% rbp ) movq - 8 8 (% rbp ), % rax addq % rax , - 8 0 (% rbp ) . L 6 : . LBE 1 1 : . LBE 1 0 : . LBE 5 : . LBB 1 2 : addq $ 1 , - 8 8 (% rbp ) . L 2 : . LBE 1 2 : cmpq $ 2 9 , - 7 2 (% rbp ) jle . L 1 2 . LBE 3 : . LBE 2 : leaq string .. d (% rip ), % r 1 4 leaq go .. C 1 7 (% rip ), % r 1 5 movq % r 1 4 , - 4 8 0 (% rbp ) movq % r 1 5 , - 4 7 2 (% rbp ) leaq - 4 8 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 1 , - 2 8 0 (% rbp ) movq $ 1 , - 2 7 2 (% rbp ) leaq - 2 5 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 7 2 (% rbp ) pushq - 2 8 0 (% rbp ) pushq - 2 8 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) leaq int 6 4 .. d (% rip ), % rax movq % rax , - 6 7 2 (% rbp ) leaq int 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 0 (% rbp ) movq - 4 4 0 (% rbp ), % rax movq - 8 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 4 4 0 (% rbp ), % rax movq % rax , - 6 6 4 (% rbp ) movdqa - 6 7 2 (% rbp ), % xmm 3 movups % xmm 3 , - 4 3 2 (% rbp ) leaq - 4 3 2 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq $ 1 , - 2 1 6 (% rbp ) movq $ 1 , - 2 0 8 (% rbp ) leaq - 1 9 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 0 8 (% rbp ) pushq - 2 1 6 (% rbp ) pushq - 2 2 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) subq $ 8 , % rsp pushq - 6 2 4 (% rbp ) pushq - 6 3 2 (% rbp ) pushq - 6 4 0 (% rbp ) call time . Since @ PLT addq $ 3 2 , % rsp movq % rax , % rbx leaq string .. d (% rip ), % r 1 2 leaq go .. C 1 8 (% rip ), % r 1 3 leaq time . Duration .. d (% rip ), % rax movq % rax , - 6 5 6 (% rbp ) leaq time . Duration .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) movq - 3 9 2 (% rbp ), % rax movq % rbx , (% rax ) movq - 3 9 2 (% rbp ), % rax movq % rax , - 6 4 8 (% rbp ) movq % r 1 2 , - 3 8 4 (% rbp ) movq % r 1 3 , - 3 7 6 (% rbp ) movdqa - 6 5 6 (% rbp ), % xmm 4 movups % xmm 4 , - 3 6 8 (% rbp ) leaq - 3 8 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 2 , - 1 5 2 (% rbp ) movq $ 2 , - 1 4 4 (% rbp ) leaq - 1 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 9 1 movl $ 3 4 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 : ret . L 9 1 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 3 2 8 , % rsp movq % rdi , - 3 2 8 (% rbp ) movq % rsi , - 3 3 6 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 2 6 : movq - 3 2 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 2 0 (% rbp ) movq % rbx , - 3 1 2 (% rbp ) movq % rbx , - 3 0 4 (% rbp ) . LBB 2 7 : movq $ 0 , - 2 4 (% rbp ) . LBB 2 8 : jmp . L 3 1 . L 8 6 : . LBB 2 9 : nop . LBE 2 9 : . LBB 3 0 : movq - 3 3 6 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 3 1 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 2 cmpq % rax , - 2 4 (% rbp ) jl . L 7 1 . L 3 2 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 1 : movq - 3 2 0 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 2 8 8 (% rbp ) movq % rbx , - 2 8 0 (% rbp ) movq % rbx , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 2 7 2 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 3 4 . LBB 3 1 : movq - 2 8 8 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 3 5 . L 3 4 : . LBE 3 1 : . LBB 3 2 : movq - 2 8 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 5 : . LBE 3 2 : . LBE 3 0 : . LBB 3 3 : addq $ 1 , - 2 4 (% rbp ) . L 3 1 : . LBE 3 3 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 8 (% rbp ), % rax jl . L 8 6 . LBE 2 8 : . LBE 2 7 : . LBB 3 4 : movq $ 0 , - 3 2 (% rbp ) . LBB 3 5 : jmp . L 3 8 . L 8 7 : . LBB 3 6 : nop . LBE 3 6 : . LBB 3 7 : movq - 3 1 2 (% rbp ), % rax testq % rax , % rax jg . L 3 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 3 2 0 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 4 0 cmpq % rax , - 3 2 (% rbp ) jge . L 4 0 movq - 2 5 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 1 , (% rax ) . LBE 3 7 : . LBB 3 8 : addq $ 1 , - 3 2 (% rbp ) jmp . L 3 8 . L 4 0 : . LBE 3 8 : . LBB 3 9 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : . LBE 3 9 : movq - 3 2 (% rbp ), % rax cmpq - 3 3 6 (% rbp ), % rax jl . L 8 7 . LBE 3 5 : . LBE 3 4 : . LBB 4 0 : movq $ 0 , - 4 0 (% rbp ) . LBB 4 1 : jmp . L 4 3 . L 8 8 : . LBB 4 2 : nop . LBE 4 2 : . LBB 4 3 : movq - 3 1 2 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 4 4 cmpq % rax , - 4 0 (% rbp ) jl . L 7 4 . L 4 4 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 4 : movq - 3 2 0 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rax testq % rax , % rax jg . L 4 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 6 : movq - 2 2 4 (% rbp ), % rax movq $ 1 , (% rax ) . LBE 4 3 : . LBB 4 4 : addq $ 1 , - 4 0 (% rbp ) . L 4 3 : . LBE 4 4 : movq - 4 0 (% rbp ), % rax cmpq - 3 2 8 (% rbp ), % rax jl . L 8 8 . LBE 4 1 : . LBE 4 0 : . LBB 4 5 : movq $ 1 , - 4 8 (% rbp ) . LBB 4 6 : jmp . L 4 9 . L 9 0 : . LBB 4 7 : nop . LBE 4 7 : . LBB 4 8 : . LBB 4 9 : movq $ 1 , - 5 6 (% rbp ) . LBB 5 0 : jmp . L 5 0 . L 8 9 : . LBB 5 1 : nop . LBE 5 1 : . LBB 5 2 : movq - 3 1 2 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 5 1 cmpq % rax , - 4 8 (% rbp ) jl . L 7 6 . L 5 1 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 6 : movq - 3 2 0 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 5 3 cmpq % rax , - 5 6 (% rbp ) jl . L 7 7 . L 5 3 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 7 : movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 3 1 2 (% rbp ), % rdx testq % rax , % rax js . L 5 5 cmpq % rdx , % rax jl . L 7 8 . L 5 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 8 : movq - 3 2 0 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 5 7 cmpq % rax , - 5 6 (% rbp ) jl . L 7 9 . L 5 7 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 9 : movq - 3 1 2 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 5 9 cmpq % rax , - 4 8 (% rbp ) jl . L 8 0 . L 5 9 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 0 : movq - 3 2 0 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 5 6 (% rbp ), % rax subq $ 1 , % rax movq - 1 2 0 (% rbp ), % rdx testq % rax , % rax js . L 6 1 cmpq % rdx , % rax jl . L 8 1 . L 6 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 1 : movq - 1 6 0 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 1 2 8 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 1 9 2 (% rbp ), % rsi movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax addq % rcx , % rdx movq % rdx , (% rax ) . LBE 5 2 : . LBB 5 3 : addq $ 1 , - 5 6 (% rbp ) . L 5 0 : . LBE 5 3 : movq - 5 6 (% rbp ), % rax cmpq - 3 3 6 (% rbp ), % rax jl . L 8 9 . LBE 5 0 : . LBE 4 9 : . LBE 4 8 : . LBB 5 4 : addq $ 1 , - 4 8 (% rbp ) . L 4 9 : . LBE 5 4 : movq - 4 8 (% rbp ), % rax cmpq - 3 2 8 (% rbp ), % rax jl . L 9 0 . LBE 4 6 : . LBE 4 5 : . LBB 5 5 : movq - 3 2 8 (% rbp ), % rax subq $ 1 , % rax movq - 3 1 2 (% rbp ), % rdx testq % rax , % rax js . L 6 7 cmpq % rdx , % rax jl . L 8 4 . L 6 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 4 : movq - 3 2 0 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 8 0 (% rbp ) movq - 3 3 6 (% rbp ), % rax subq $ 1 , % rax movq - 8 8 (% rbp ), % rdx testq % rax , % rax js . L 6 9 cmpq % rdx , % rax jge . L 6 9 movq - 9 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax jmp . L 8 5 . L 6 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 5 : . LBE 5 5 : . LBE 2 6 : movq - 8 (% rbp ), % rbx leave ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 7 movl $ 2 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 4 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 6 8 , % rsp movq % rdi , - 1 8 4 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 4 1 : movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) . LBB 4 2 : . LBB 4 3 : . LBB 4 4 : movq go . day 4 1 9 . testcases (% rip ), % rax movq 8 + go . day 4 1 9 . testcases (% rip ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 + go . day 4 1 9 . testcases (% rip ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movl $ 0 , % ebx . LBE 4 4 : jmp . L 3 7 . L 4 6 : . LBB 4 5 : nop . LBE 4 5 : . LBB 4 6 : . LBB 4 7 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 3 8 cmpq % rax , % rbx jge . L 3 8 movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 4 7 : . LBB 4 8 : movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) . LBE 4 8 : . LBB 4 9 : . LBB 5 0 : movq - 1 7 6 (% rbp ), % rax movq % rax , % rdi call go . day 4 1 9 . SmallestStepsToOne movq % rax , - 5 6 (% rbp ) movq - 1 6 8 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 3 9 jmp . L 4 0 . L 3 8 : . LBE 5 0 : . LBE 4 9 : . LBB 5 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : . LBE 5 5 : . LBB 5 6 : . LBB 5 4 : . LBB 5 1 : leaq int .. d (% rip ), % rax movq % rax , - 2 0 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 2 0 0 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 2 8 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movdqa - 2 0 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 1 . LBB 5 2 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 5 2 : jmp . L 4 2 . L 4 1 : . LBB 5 3 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 2 : . LBE 5 3 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) leaq . LC 2 5 (% rip ), % r 1 2 movl $ 1 9 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 1 8 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 4 0 : . LBE 5 1 : . LBE 5 4 : . LBE 5 6 : . LBE 4 6 : . LBB 5 7 : addq $ 1 , % rbx . L 3 7 : . LBE 5 7 : cmpq - 1 9 2 (% rbp ), % rbx jl . L 4 6 . LBE 4 3 : . LBE 4 2 : . LBE 4 1 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 3 movl $ 1 8 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 6 0 , % rsp movq % rdi , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 2 4 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 2 2 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 cmpq % rax , - 2 4 (% rbp ) jge . L 3 movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) jns . L 4 jmp . L 5 . L 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 : cmpq % rax , - 2 4 (% rbp ) jl . L 1 8 . L 5 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax addq $ 1 , % rdx movq % rdx , (% rax ) . LBB 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 7 cmpq % rax , - 2 4 (% rbp ) jl . L 1 9 . L 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq $ 9 , % rax jg . L 9 . LBB 8 : . LBB 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 9 : . LBE 9 : . LBE 8 : . LBE 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 1 cmpq % rax , - 2 4 (% rbp ) jl . L 2 0 . L 1 1 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 0 , (% rax ) subq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 6 : cmpq $ 0 , - 2 4 (% rbp ) jns . L 2 2 . LBE 4 : . LBE 3 : . LBB 1 0 : leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq $ 1 , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rbx movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % r 1 2 leaq (% rbx ,% r 1 2 ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 5 movq - 1 2 8 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) jmp . L 1 6 . L 1 5 : movq - 1 2 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rdx movq % rcx , - 1 2 8 (% rbp ) movq % rax , - 1 2 0 (% rbp ) movq % rdx , - 1 1 2 (% rbp ) . L 1 6 : movq % r 1 2 , % rax leaq 0 (,% rax , 8 ), % rdx movq - 9 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rcx movq % rbx , % rsi salq $ 3 , % rsi addq % rsi , % rcx movq % rax , % rsi movq % rcx , % rdi call memmove @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 1 0 : . LBE 2 : movq - 1 6 8 (% rbp ), % rax addq $ 1 6 0 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 2 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 2 4 , % rsp movq % rdi , - 2 4 8 (% rbp ) leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input . 0 int . 2 . go . Solution . expected . 0 bool . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) leaq . LC 2 0 (% rip ), % r 1 2 movl $ 1 1 , % r 1 3 d movq % r 1 2 , - 2 0 8 (% rbp ) movq % r 1 3 , - 2 0 0 (% rbp ) movq $ 2 8 , - 1 9 2 (% rbp ) movb $ 1 , - 1 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input . 0 int . 2 . go . Solution . expected . 0 bool . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 , - 2 3 2 (% rbp ) movq $ 1 , - 2 2 4 (% rbp ) . LBB 4 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input . 0 int . 2 . go . Solution . expected . 0 bool . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 1 3 6 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 4 0 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input . 0 int . 2 . go . Solution . expected . 0 bool . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : leaq go . Solution . TestCheckPerfectNumber .. func 1 (% rip ), % r 1 4 movq - 4 0 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . testcase 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input . 0 int . 2 . go . Solution . expected . 0 bool . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq % r 1 4 , - 6 4 (% rbp ) movq % r 1 2 , - 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . testcase 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input . 0 int . 2 . go . Solution . expected . 0 bool . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 7 2 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 2 4 8 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 2 2 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 4 movl $ 2 3 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 0 8 , % rsp movq $ 0 , - 4 8 (% rbp ) . LBB 2 : movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 3 : movq $ 3 1 , - 4 0 (% rbp ) . LBB 4 : jmp . L 2 . L 2 3 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 4 0 (% rbp ), % rax cmpq $ 6 3 , % rax ja . L 3 movl $ 1 , % edx movl % eax , % ecx salq % cl , % rdx movq % rdx , % rax jmp . L 4 . L 3 : movl $ 0 , % eax . L 4 : orq % rax , - 3 2 (% rbp ) call runtime . makemap_small @ PLT movq % rax , - 5 6 (% rbp ) . LBB 7 : movq $ 0 , - 6 4 (% rbp ) . LBB 8 : . LBB 9 : . LBB 1 0 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 0 : jmp . L 5 . L 2 1 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : . LBB 1 3 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 6 cmpq % rax , % rbx jge . L 6 movq - 2 2 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 3 : . LBB 1 4 : movq % rax , - 6 4 (% rbp ) . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 6 4 (% rbp ), % rax andq - 3 2 (% rbp ), % rax movq % rax , - 2 0 0 (% rbp ) leaq - 2 0 0 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT . LBE 1 6 : . LBE 1 5 : . LBE 1 2 : . LBB 1 8 : addq $ 1 , % rbx jmp . L 5 . L 6 : . LBE 1 8 : . LBB 1 9 : . LBB 1 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 5 : . LBE 1 7 : . LBE 1 9 : cmpq % r 1 2 , % rbx jl . L 2 1 . LBE 9 : . LBE 8 : . LBE 7 : movq - 4 0 (% rbp ), % rax cmpq $ 6 3 , % rax ja . L 9 movl $ 1 , % edx movl % eax , % ecx salq % cl , % rdx movq % rdx , % rax jmp . L 1 0 . L 9 : movl $ 0 , % eax . L 1 0 : orq - 2 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) . LBB 2 0 : movq $ 0 , - 8 0 (% rbp ) . LBB 2 1 : . LBB 2 2 : . LBB 2 3 : leaq - 1 9 2 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 2 3 : jmp . L 1 1 . L 2 2 : . LBB 2 4 : nop . LBE 2 4 : . LBB 2 5 : . LBB 2 6 : movq - 1 9 2 (% rbp ), % rax movq (% rax ), % rax . LBE 2 6 : movq % rax , - 8 0 (% rbp ) . LBB 2 7 : . LBB 2 8 : movb $ 0 , - 8 1 (% rbp ) . LBB 2 9 : movq - 7 2 (% rbp ), % rax xorq - 8 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) leaq - 9 6 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movl % edx , % eax movb % al , - 8 1 (% rbp ) . LBE 2 9 : cmpb $ 0 , - 8 1 (% rbp ) je . L 1 2 . LBB 3 0 : movq - 7 2 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) jmp . L 1 3 . L 1 2 : . LBE 3 0 : . LBE 2 8 : . LBE 2 7 : . LBE 2 5 : . LBB 3 1 : leaq - 1 9 2 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 1 1 : . LBE 3 1 : movq - 1 9 2 (% rbp ), % rax testq % rax , % rax jne . L 2 2 . L 1 3 : . LBE 2 2 : . LBE 2 1 : . LBE 2 0 : . LBE 6 : . LBB 3 2 : subq $ 1 , - 4 0 (% rbp ) . L 2 : . LBE 3 2 : cmpq $ 0 , - 4 0 (% rbp ) jns . L 2 3 . LBE 4 : . LBE 3 : . LBB 3 3 : movq - 2 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax . LBE 3 3 : . LBE 2 : addq $ 2 0 8 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 5 0 2 movl $ 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 7 : ret . L 5 0 2 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq % rdi , - 5 6 (% rbp ) movq $ 0 , - 3 2 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 4 6 6 : . LBB 4 6 7 : movq - 5 6 (% rbp ), % rax movq (% rax ), % rax testq % rax , % rax jne . L 4 9 1 . LBB 4 6 8 : . LBB 4 6 9 : leaq int .. d (% rip ), % rax movq % rax , - 3 2 (% rbp ) leaq go .. C 2 0 0 (% rip ), % rax movq % rax , - 2 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx jmp . L 4 9 9 . L 4 9 1 : . LBE 4 6 9 : . LBE 4 6 8 : . LBE 4 6 7 : . LBB 4 7 0 : movq - 5 6 (% rbp ), % rax movq (% rax ), % rax movq 2 4 (% rax ), % rax testq % rax , % rax jne . L 4 9 3 . LBB 4 7 1 : . LBB 4 7 2 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call go . linkedlist . Doubly . DelAtBeg movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx jmp . L 4 9 9 . L 4 9 3 : . LBE 4 7 2 : . LBE 4 7 1 : . LBE 4 7 0 : movq - 5 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 8 (% rbp ) . LBB 4 7 3 : . LBB 4 7 4 : jmp . L 4 9 4 . L 5 0 1 : . LBB 4 7 5 : nop . LBE 4 7 5 : . LBB 4 7 6 : movq - 8 (% rbp ), % rax movq 2 4 (% rax ), % rax movq % rax , - 8 (% rbp ) . L 4 9 4 : . LBE 4 7 6 : movq - 8 (% rbp ), % rax movq 2 4 (% rax ), % rax movq 2 4 (% rax ), % rax testq % rax , % rax jne . L 5 0 1 . LBE 4 7 4 : . LBE 4 7 3 : movq - 8 (% rbp ), % rax movq 2 4 (% rax ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq - 8 (% rbp ), % rax addq $ 2 4 , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 4 9 7 . LBB 4 7 7 : movq $ 0 , (% rax ) jmp . L 4 9 8 . L 4 9 7 : . LBE 4 7 7 : . LBB 4 7 8 : movl $ 0 , % esi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 4 9 8 : . LBE 4 7 8 : . LBB 4 7 9 : movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx . L 4 9 9 : . LBE 4 7 9 : . LBE 4 6 6 : leave ret
. LFB 0 : leaq - 5 5 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 4 movl $ 5 5 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 6 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 5 2 8 , % rsp movq % rdi , - 5 3 6 (% rbp ) movq $ 0 , - 4 9 6 (% rbp ) movq $ 0 , - 4 8 8 (% rbp ) movq $ 0 , - 4 8 0 (% rbp ) . LBB 2 : leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 7 2 (% rbp ) movq - 4 7 2 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 0 , - 5 2 0 (% rbp ) movq $ 0 , - 5 1 2 (% rbp ) . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq - 5 3 6 (% rbp ), % rcx movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 8 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 2 4 (% rbp ) movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 3 2 (% rbp ) movq $ 0 , - 4 0 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax subq $ 1 , % rax movq % rax , - 4 8 (% rbp ) . LBB 6 : . LBB 7 : jmp . L 5 . L 6 3 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 4 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 1 1 : jmp . L 6 . L 5 9 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 5 6 (% rbp ), % rbx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 7 cmpq % rax , - 2 4 (% rbp ) jl . L 4 6 . L 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 9 cmpq % rax , - 5 6 (% rbp ) jge . L 9 movq - 4 3 2 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 4 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 1 0 jmp . L 4 7 . L 9 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : . LBB 1 4 : movq - 4 6 4 (% rbp ), % rsi leaq - 2 0 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) . LBE 1 4 : jmp . L 1 2 . L 4 7 : . LBB 1 5 : movq - 4 6 4 (% rbp ), % rcx movq - 4 4 8 (% rbp ), % rdx movq % rcx , - 5 2 8 (% rbp ) movq % rax , - 5 2 0 (% rbp ) movq % rdx , - 5 1 2 (% rbp ) . L 1 2 : . LBE 1 5 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) . LBE 1 3 : . LBB 1 6 : addq $ 1 , - 5 6 (% rbp ) . L 6 : . LBE 1 6 : movq - 5 6 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jle . L 5 9 . LBE 1 1 : . LBE 1 0 : addq $ 1 , - 2 4 (% rbp ) . LBB 1 7 : movq - 2 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBB 1 8 : jmp . L 1 5 . L 6 0 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 3 9 2 (% rbp ), % rbx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 6 cmpq % rax , - 6 4 (% rbp ) jl . L 4 9 . L 1 6 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : movq 1 6 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 3 6 0 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 8 cmpq % rax , - 4 8 (% rbp ) jge . L 1 8 movq - 3 6 8 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 3 8 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 1 9 jmp . L 5 0 . L 1 8 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : . LBB 2 1 : movq - 4 0 0 (% rbp ), % rsi leaq - 1 7 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) . LBE 2 1 : jmp . L 2 1 . L 5 0 : . LBB 2 2 : movq - 4 0 0 (% rbp ), % rcx movq - 3 8 4 (% rbp ), % rdx movq % rcx , - 5 2 8 (% rbp ) movq % rax , - 5 2 0 (% rbp ) movq % rdx , - 5 1 2 (% rbp ) . L 2 1 : . LBE 2 2 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) . LBE 2 0 : . LBB 2 3 : addq $ 1 , - 6 4 (% rbp ) . L 1 5 : . LBE 2 3 : movq - 6 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jle . L 6 0 . LBE 1 8 : . LBE 1 7 : subq $ 1 , - 4 8 (% rbp ) . LBB 2 4 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jg . L 2 4 . LBB 2 5 : . LBB 2 6 : movq - 4 8 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) . LBB 2 7 : jmp . L 2 5 . L 6 1 : . LBB 2 8 : nop . LBE 2 8 : . LBB 2 9 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 2 8 (% rbp ), % rbx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 6 cmpq % rax , - 3 2 (% rbp ) jl . L 5 2 . L 2 6 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 2 8 cmpq % rax , - 7 2 (% rbp ) jge . L 2 8 movq - 3 0 4 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 3 2 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 2 9 jmp . L 5 3 . L 2 8 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : . LBB 3 0 : movq - 3 3 6 (% rbp ), % rsi leaq - 1 4 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) . LBE 3 0 : jmp . L 3 1 . L 5 3 : . LBB 3 1 : movq - 3 3 6 (% rbp ), % rcx movq - 3 2 0 (% rbp ), % rdx movq % rcx , - 5 2 8 (% rbp ) movq % rax , - 5 2 0 (% rbp ) movq % rdx , - 5 1 2 (% rbp ) . L 3 1 : . LBE 3 1 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) . LBE 2 9 : . LBB 3 2 : subq $ 1 , - 7 2 (% rbp ) . L 2 5 : . LBE 3 2 : movq - 7 2 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jge . L 6 1 . L 2 4 : . LBE 2 7 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : subq $ 1 , - 3 2 (% rbp ) . LBB 3 3 : movq - 4 0 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jg . L 3 3 . LBB 3 4 : . LBB 3 5 : movq - 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) . LBB 3 6 : jmp . L 3 4 . L 6 2 : . LBB 3 7 : nop . LBE 3 7 : . LBB 3 8 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rbx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 3 5 cmpq % rax , - 8 0 (% rbp ) jl . L 5 5 . L 3 5 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 5 : movq 1 6 (% rbp ), % rcx movq - 8 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 7 cmpq % rax , - 4 0 (% rbp ) jge . L 3 7 movq - 2 4 0 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 3 8 jmp . L 5 6 . L 3 7 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : . LBB 3 9 : movq - 2 7 2 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) . LBE 3 9 : jmp . L 4 0 . L 5 6 : . LBB 4 0 : movq - 2 7 2 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rdx movq % rcx , - 5 2 8 (% rbp ) movq % rax , - 5 2 0 (% rbp ) movq % rdx , - 5 1 2 (% rbp ) . L 4 0 : . LBE 4 0 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) . LBE 3 8 : . LBB 4 1 : subq $ 1 , - 8 0 (% rbp ) . L 3 4 : . LBE 4 1 : movq - 8 0 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax jge . L 6 2 . L 3 3 : . LBE 3 6 : . LBE 3 5 : . LBE 3 4 : . LBE 3 3 : addq $ 1 , - 4 0 (% rbp ) . L 5 : . LBE 9 : . LBB 4 2 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax setle % al testb % al , % al je . L 4 2 . LBB 4 3 : movq - 4 0 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax setle % al . L 4 2 : . LBE 4 3 : . LBE 4 2 : testb % al , % al jne . L 6 3 . LBE 7 : . LBE 6 : . LBB 4 4 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq - 5 3 6 (% rbp ), % rcx movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 8 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 4 4 : . LBE 2 : movq - 5 3 6 (% rbp ), % rax addq $ 5 2 8 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 4 0 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 8 movl $ 4 0 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 6 0 , % rsp leaq - 3 6 8 (% rbp ), % rax movq % rax , % rdi call time . Now @ PLT movl $ 1 , % esi movl $ 2 , % edi call math .. z 2 fbig . NewRat @ PLT movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rax , % rdi call math .. z 2 fbig . Rat . Num @ PLT movq % rax , - 8 0 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rax , % rdi call math .. z 2 fbig . Rat . Denom @ PLT movq % rax , - 8 8 (% rbp ) movl $ 0 , % edi call math .. z 2 fbig . NewInt @ PLT movq % rax , - 9 6 (% rbp ) movl $ 1 , % esi movl $ 2 , % edi call math .. z 2 fbig . NewRat @ PLT movq % rax , - 1 0 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 2 : movq $ 0 , - 6 4 (% rbp ) . LBB 3 : jmp . L 2 . L 7 : . LBB 4 : nop . LBE 4 : . LBB 5 : movq - 7 2 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call math .. z 2 fbig . Rat . Inv @ PLT movq % rax , % rdx movq - 1 0 4 (% rbp ), % rcx movq - 7 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call math .. z 2 fbig . Rat . Add @ PLT . LBB 6 : movq - 8 8 (% rbp ), % rdx movq - 8 0 (% rbp ), % rcx movq - 9 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call math .. z 2 fbig . Int . Add @ PLT movq % rax , % rdi call math .. z 2 fbig . Int . String @ PLT movq % rdx , % rbx movq - 8 0 (% rbp ), % rax movq % rax , % rdi call math .. z 2 fbig . Int . String @ PLT movq % rdx , % rax cmpq % rax , % rbx jle . L 3 . LBB 7 : addq $ 1 , - 5 6 (% rbp ) . L 3 : . LBE 7 : . LBE 6 : . LBE 5 : . LBB 8 : addq $ 1 , - 6 4 (% rbp ) . L 2 : . LBE 8 : cmpq $ 9 9 9 , - 6 4 (% rbp ) jle . L 7 . LBE 3 : . LBE 2 : leaq int .. d (% rip ), % rax movq % rax , - 4 0 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 3 9 2 (% rbp ) movdqa - 4 0 0 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq $ 1 , - 2 1 6 (% rbp ) movq $ 1 , - 2 0 8 (% rbp ) leaq . LC 5 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 1 9 2 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 0 8 (% rbp ) pushq - 2 1 6 (% rbp ) pushq - 2 2 4 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) subq $ 8 , % rsp pushq - 3 5 2 (% rbp ) pushq - 3 6 0 (% rbp ) pushq - 3 6 8 (% rbp ) call time . Since @ PLT addq $ 3 2 , % rsp movq % rax , % rbx leaq string .. d (% rip ), % r 1 4 leaq go .. C 1 1 (% rip ), % r 1 5 leaq time . Duration .. d (% rip ), % rax movq % rax , - 3 8 4 (% rbp ) leaq time . Duration .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq % rbx , (% rax ) movq - 2 6 4 (% rbp ), % rax movq % rax , - 3 7 6 (% rbp ) movq % r 1 4 , - 2 5 6 (% rbp ) movq % r 1 5 , - 2 4 8 (% rbp ) movdqa - 3 8 4 (% rbp ), % xmm 1 movups % xmm 1 , - 2 4 0 (% rbp ) leaq - 2 5 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 2 , - 1 5 2 (% rbp ) movq $ 2 , - 1 4 4 (% rbp ) leaq - 1 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 3 movl $ 1 5 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 3 : pushq % rbp movq % rsp , % rbp subq $ 1 4 4 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 3 : cmpq $ 0 , - 4 0 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 8 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 6 : movq $ 0 , - 1 6 (% rbp ) . LBB 7 : jmp . L 5 . L 3 2 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq $ 0 , - 2 4 (% rbp ) . LBB 1 1 : jmp . L 6 . L 3 1 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : . LBB 1 5 : . LBB 1 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 7 cmpq % rax , - 1 6 (% rbp ) jl . L 2 6 . L 7 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq 1 6 (% rbp ), % rcx movq - 1 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 9 cmpq % rax , - 2 4 (% rbp ) jge . L 9 movq - 1 4 4 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 8 8 , % al sete % al testb % al , % al jne . L 1 0 jmp . L 1 1 . L 9 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : . LBB 1 7 : . LBB 1 8 : cmpq $ 0 , - 1 6 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 1 . LBB 1 9 : movq - 1 6 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 3 cmpq % rdx , % rax jl . L 2 7 . L 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq 1 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 5 cmpq % rax , - 2 4 (% rbp ) jge . L 1 5 movq - 1 1 2 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 6 , % al sete % al jmp . L 1 1 . L 1 5 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 1 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : testb % al , % al je . L 1 6 . LBB 2 0 : . LBB 2 1 : cmpq $ 0 , - 2 4 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 6 . LBB 2 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 8 cmpq % rax , - 1 6 (% rbp ) jl . L 2 8 . L 1 8 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq 1 6 (% rbp ), % rcx movq - 1 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 2 0 cmpq % rdx , % rax jge . L 2 0 movq - 8 0 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 6 , % al sete % al jmp . L 1 6 . L 2 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : . LBE 2 2 : . LBE 2 1 : . LBE 2 0 : . LBE 1 5 : testb % al , % al je . L 2 1 . LBB 2 3 : addq $ 1 , - 8 (% rbp ) . L 2 1 : . LBE 2 3 : . LBE 1 4 : . LBE 1 3 : . LBB 2 4 : addq $ 1 , - 2 4 (% rbp ) . L 6 : . LBE 2 4 : movq - 2 4 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 3 1 . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 2 5 : addq $ 1 , - 1 6 (% rbp ) . L 5 : . LBE 2 5 : movq - 1 6 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jl . L 3 2 . LBE 7 : . LBE 6 : . LBB 2 6 : movq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 3 : . LBE 2 6 : . LBE 2 : leave ret
. LFB 0 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 movl $ 3 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 2 8 , % rsp movq % rdi , - 3 4 4 (% rbp ) leaq . LC 6 (% rip ), % rcx movl $ 2 , % ebx movq % rcx , - 3 2 0 (% rbp ) movq % rbx , - 3 1 2 (% rbp ) leaq . LC 7 (% rip ), % rax movl $ 2 , % edx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq - 3 2 0 (% rbp ), % rdi movq - 3 1 2 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call go . problem 0 6 7 . addBinary movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq string .. d (% rip ), % rax movq % rax , - 3 6 8 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq % r 1 2 , - 2 7 2 (% rbp ) movq % r 1 3 , - 2 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 2 8 0 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 2 8 0 (% rbp ), % rax leaq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 2 8 0 (% rbp ), % rax movq % rax , - 3 6 0 (% rbp ) movdqa - 3 6 8 (% rbp ), % xmm 0 movups % xmm 0 , - 2 5 6 (% rbp ) leaq - 2 5 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq - 3 2 0 (% rbp ), % rdi movq - 3 1 2 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call go . problem 0 6 7 . addBinary 2 movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq string .. d (% rip ), % r 1 4 leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq % r 1 2 , - 2 0 8 (% rbp ) movq % r 1 3 , - 2 0 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 2 1 6 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 1 9 2 (% rbp ) movq % r 1 5 , - 1 8 4 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 6 2 movl $ 8 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 4 : ret . L 6 2 : pushq % rbp movq % rsp , % rbp subq $ 8 0 , % rsp movb $ 0 , - 1 7 (% rbp ) . LBB 3 2 : . LBB 3 3 : movq $ 0 , - 8 (% rbp ) . LBB 3 4 : jmp . L 3 5 . L 6 1 : . LBB 3 5 : nop . LBE 3 5 : . LBB 3 6 : . LBB 3 7 : movq $ 0 , - 1 6 (% rbp ) . LBB 3 8 : jmp . L 3 6 . L 6 0 : . LBB 3 9 : nop . LBE 3 9 : . LBB 4 0 : . LBB 4 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 3 7 cmpq % rax , - 8 (% rbp ) jl . L 5 3 . L 3 7 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 3 : movq 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 3 9 cmpq % rax , - 1 6 (% rbp ) jl . L 5 4 . L 3 9 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : movq - 8 (% rbp ), % rax addq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 4 1 cmpq % rdx , % rax jl . L 5 5 . L 4 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 5 : movq 1 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 2 (% rbp ) movq - 1 6 (% rbp ), % rax addq $ 1 , % rax movq - 4 0 (% rbp ), % rdx testq % rax , % rax js . L 4 3 cmpq % rdx , % rax jl . L 5 6 . L 4 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 6 : movq - 8 0 (% rbp ), % rcx movq - 1 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq - 4 8 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx je . L 4 5 . LBB 4 2 : . LBB 4 3 : movb $ 0 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax jmp . L 4 6 . L 4 5 : . LBE 4 3 : . LBE 4 2 : . LBE 4 1 : . LBE 4 0 : . LBB 4 4 : addq $ 1 , - 1 6 (% rbp ) . L 3 6 : . LBE 4 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 4 7 cmpq % rax , - 8 (% rbp ) jl . L 5 7 . L 4 7 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 7 : movq 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rcx , % rax movq 8 (% rax ), % rax subq $ 1 , % rax cmpq % rax , - 1 6 (% rbp ) jl . L 6 0 . LBE 3 8 : . LBE 3 7 : . LBE 3 6 : . LBB 4 5 : addq $ 1 , - 8 (% rbp ) . L 3 5 : . LBE 4 5 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 8 (% rbp ) jl . L 6 1 . LBE 3 4 : . LBE 3 3 : . LBB 4 6 : movb $ 1 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax . L 4 6 : . LBE 4 6 : . LBE 3 2 : leave ret
. LFB 0 : leaq - 3 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 5 movl $ 3 2 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 5 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 3 1 2 , % rsp movq % rdi , - 3 1 2 (% rbp ) movq $ 0 , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 3 : cmpq $ 0 , - 5 6 (% rbp ) je . L 2 . LBB 4 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 2 4 (% rbp ) . L 2 : . LBE 4 : . LBE 3 : movq - 5 6 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 0 4 (% rbp ) movq % rbx , - 2 9 6 (% rbp ) movq % rbx , - 2 8 8 (% rbp ) . LBB 5 : movq $ 0 , - 3 2 (% rbp ) . LBB 6 : jmp . L 4 . L 5 2 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq - 2 4 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 5 cmpq % rax , - 3 2 (% rbp ) jl . L 3 8 . L 5 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 3 0 4 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 2 4 0 (% rbp ) movq % rbx , - 2 3 2 (% rbp ) movq % rbx , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 2 2 4 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 7 . LBB 9 : movq - 2 4 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 8 . L 7 : . LBE 9 : . LBB 1 0 : movq - 2 4 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 8 : . LBE 1 0 : . LBE 8 : . LBB 1 1 : addq $ 1 , - 3 2 (% rbp ) . L 4 : . LBE 1 1 : movq - 5 6 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 3 2 (% rbp ) jl . L 5 2 . LBE 6 : . LBE 5 : . LBB 1 2 : movq $ 1 , - 4 0 (% rbp ) . LBB 1 3 : jmp . L 1 1 . L 5 4 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq $ 1 , - 4 8 (% rbp ) . LBB 1 7 : jmp . L 1 2 . L 5 3 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 3 cmpq % rax , - 4 0 (% rbp ) jl . L 4 0 . L 1 3 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq - 3 0 4 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 5 cmpq % rax , - 4 8 (% rbp ) jl . L 4 1 . L 1 5 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 7 cmpq % rdx , % rax jl . L 4 2 . L 1 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq 1 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 4 8 (% rbp ), % rax leaq - 1 (% rax ), % rcx movq - 1 6 8 (% rbp ), % rax testq % rcx , % rcx js . L 1 9 cmpq % rax , % rcx jl . L 4 3 . L 1 9 : movq % rax , % rsi movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq - 2 9 6 (% rbp ), % rdx testq % rax , % rax js . L 2 1 cmpq % rdx , % rax jl . L 4 4 . L 2 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq - 3 0 4 (% rbp ), % rdx movq % rax , % rsi movq % rsi , % rax addq % rax , % rax addq % rsi , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rsi movq (% rsi ), % rax movq 8 (% rsi ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rsi ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 3 cmpq % rax , - 4 8 (% rbp ) jl . L 4 5 . L 2 3 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 5 cmpq % rax , - 4 0 (% rbp ) jl . L 4 6 . L 2 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq - 3 0 4 (% rbp ), % rsi movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rsi movq (% rsi ), % rax movq 8 (% rsi ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rsi ), % rax movq % rax , - 9 6 (% rbp ) movq - 4 8 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 1 0 4 (% rbp ), % rax testq % rdx , % rdx js . L 2 7 cmpq % rax , % rdx jl . L 4 7 . L 2 7 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq - 2 9 6 (% rbp ), % rsi testq % rax , % rax js . L 2 9 cmpq % rsi , % rax jl . L 4 8 . L 2 9 : movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : movq - 3 0 4 (% rbp ), % rsi movq % rax , % rdi movq % rdi , % rax addq % rax , % rax addq % rdi , % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 8 0 (% rbp ) movq % rdi , - 7 2 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 6 4 (% rbp ) movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 7 2 (% rbp ), % rsi testq % rax , % rax js . L 3 1 cmpq % rsi , % rax jl . L 4 9 . L 3 1 : movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : movq - 1 7 6 (% rbp ), % rsi salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rsi movq - 1 4 4 (% rbp ), % rdi movq - 4 8 (% rbp ), % rcx salq $ 3 , % rcx addq % rdi , % rcx movq (% rcx ), % rcx addq % rcx , % rsi movq - 1 1 2 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx addq % rsi , % rdx movq - 8 0 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rcx movq - 2 0 8 (% rbp ), % rsi movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax subq % rcx , % rdx movq % rdx , (% rax ) . LBE 1 9 : . LBB 2 0 : addq $ 1 , - 4 8 (% rbp ) . L 1 2 : . LBE 2 0 : movq - 2 4 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 4 8 (% rbp ) jl . L 5 3 . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBB 2 1 : addq $ 1 , - 4 0 (% rbp ) . L 1 1 : . LBE 2 1 : movq - 5 6 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 4 0 (% rbp ) jl . L 5 4 . LBE 1 3 : . LBE 1 2 : . LBB 2 2 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 3 1 2 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 5 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 2 : . LBE 2 : movq - 3 1 2 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 6 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 1 6 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 9 : . LBB 1 0 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax jle . L 1 1 . LBB 1 1 : movq - 4 0 (% rbp ), % rax movq (% rax ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq - 4 0 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq (% rdx ), % rdx movq 1 6 (% rdx ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 1 2 . LBB 1 2 : movq % rdx , (% rax ) jmp . L 1 3 . L 1 2 : . LBE 1 2 : . LBB 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 3 : . LBE 1 3 : . LBB 1 4 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rdx subq $ 1 , % rdx movq % rdx , 8 (% rax ) . LBE 1 4 : . LBB 1 5 : movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rax , - 1 6 (% rbp ) movq % rdx , - 8 (% rbp ) movq - 1 6 (% rbp ), % rax movq - 8 (% rbp ), % rdx jmp . L 1 5 . L 1 1 : . LBE 1 5 : . LBE 1 1 : . LBE 1 0 : . LBB 1 6 : movq $ 0 , - 1 6 (% rbp ) movq $ 0 , - 8 (% rbp ) movq - 1 6 (% rbp ), % rax movq - 8 (% rbp ), % rdx . L 1 5 : . LBE 1 6 : . LBE 9 : leave ret
. LFB 0 : leaq - 2 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 movl $ 2 2 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 2 1 6 , % rsp leaq string .. d (% rip ), % rax leaq go .. C 6 (% rip ), % rdx movq % rax , - 1 9 2 0 (% rbp ) movq % rdx , - 1 9 1 2 (% rbp ) leaq - 1 9 2 0 (% rbp ), % rax movq % rax , - 1 1 5 2 (% rbp ) movq $ 1 , - 1 1 4 4 (% rbp ) movq $ 1 , - 1 1 3 6 (% rbp ) leaq - 1 1 2 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 3 6 (% rbp ) pushq - 1 1 4 4 (% rbp ) pushq - 1 1 5 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 1 2 0 (% rbp ), % rax movq - 1 1 1 2 (% rbp ), % rdx movq % rax , - 1 9 5 2 (% rbp ) movq % rdx , - 1 9 4 4 (% rbp ) movq - 1 1 0 4 (% rbp ), % rax movq % rax , - 1 9 3 6 (% rbp ) leaq string .. d (% rip ), % r 1 2 leaq go .. C 7 (% rip ), % r 1 3 movq % r 1 2 , - 1 8 7 2 (% rbp ) movq % r 1 3 , - 1 8 6 4 (% rbp ) leaq - 1 8 7 2 (% rbp ), % rax movq % rax , - 1 0 8 8 (% rbp ) movq $ 1 , - 1 0 8 0 (% rbp ) movq $ 1 , - 1 0 7 2 (% rbp ) leaq - 1 0 5 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 0 7 2 (% rbp ) pushq - 1 0 8 0 (% rbp ) pushq - 1 0 8 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 0 5 6 (% rbp ), % rax movq - 1 0 4 8 (% rbp ), % rdx movq % rax , - 1 9 0 4 (% rbp ) movq % rdx , - 1 8 9 6 (% rbp ) movq - 1 0 4 0 (% rbp ), % rax movq % rax , - 1 8 8 8 (% rbp ) leaq string .. d (% rip ), % r 1 4 leaq go .. C 8 (% rip ), % r 1 5 movq % r 1 4 , - 1 8 2 4 (% rbp ) movq % r 1 5 , - 1 8 1 6 (% rbp ) leaq - 1 8 2 4 (% rbp ), % rax movq % rax , - 1 0 2 4 (% rbp ) movq $ 1 , - 1 0 1 6 (% rbp ) movq $ 1 , - 1 0 0 8 (% rbp ) leaq - 9 9 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 0 0 8 (% rbp ) pushq - 1 0 1 6 (% rbp ) pushq - 1 0 2 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 9 9 2 (% rbp ), % rax movq - 9 8 4 (% rbp ), % rdx movq % rax , - 1 8 5 6 (% rbp ) movq % rdx , - 1 8 4 8 (% rbp ) movq - 9 7 6 (% rbp ), % rax movq % rax , - 1 8 4 0 (% rbp ) leaq string .. d (% rip ), % rbx movq % rbx , - 2 2 5 6 (% rbp ) leaq go .. C 9 (% rip ), % rax movq % rax , - 2 2 4 8 (% rbp ) movdqa - 2 2 5 6 (% rbp ), % xmm 3 movups % xmm 3 , - 1 7 7 6 (% rbp ) leaq - 1 7 7 6 (% rbp ), % rax movq % rax , - 9 6 0 (% rbp ) movq $ 1 , - 9 5 2 (% rbp ) movq $ 1 , - 9 4 4 (% rbp ) leaq - 9 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 4 4 (% rbp ) pushq - 9 5 2 (% rbp ) pushq - 9 6 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 9 2 8 (% rbp ), % rax movq - 9 2 0 (% rbp ), % rdx movq % rax , - 1 8 0 8 (% rbp ) movq % rdx , - 1 8 0 0 (% rbp ) movq - 9 1 2 (% rbp ), % rax movq % rax , - 1 7 9 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) leaq type ... 1 int (% rip ), % rax movq % rax , - 2 2 4 0 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 2 2 3 2 (% rbp ) movdqa - 2 2 4 0 (% rbp ), % xmm 4 movups % xmm 4 , - 1 7 2 8 (% rbp ) leaq - 1 7 2 8 (% rbp ), % rax movq % rax , - 8 9 6 (% rbp ) movq $ 1 , - 8 8 8 (% rbp ) movq $ 1 , - 8 8 0 (% rbp ) leaq - 8 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 8 0 (% rbp ) pushq - 8 8 8 (% rbp ) pushq - 8 9 6 (% rbp ) movq % rax , % rdi call fmt . Scanln @ PLT addq $ 3 2 , % rsp movq - 8 6 4 (% rbp ), % rax movq - 8 5 6 (% rbp ), % rdx movq % rax , - 1 7 6 0 (% rbp ) movq % rdx , - 1 7 5 2 (% rbp ) movq - 8 4 8 (% rbp ), % rax movq % rax , - 1 7 4 4 (% rbp ) movq % rbx , - 2 2 2 4 (% rbp ) leaq go .. C 2 0 (% rip ), % rax movq % rax , - 2 2 1 6 (% rbp ) movdqa - 2 2 2 4 (% rbp ), % xmm 5 movups % xmm 5 , - 1 6 8 0 (% rbp ) leaq - 1 6 8 0 (% rbp ), % rax movq % rax , - 8 3 2 (% rbp ) movq $ 1 , - 8 2 4 (% rbp ) movq $ 1 , - 8 1 6 (% rbp ) leaq - 8 0 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 1 6 (% rbp ) pushq - 8 2 4 (% rbp ) pushq - 8 3 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq % rax , - 1 7 1 2 (% rbp ) movq % rdx , - 1 7 0 4 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq % rax , - 1 6 9 6 (% rbp ) . LBB 2 : movq - 5 6 (% rbp ), % rax movq (% rax ), % rax cmpq $ 3 , % rax je . L 2 cmpq $ 3 , % rax jg . L 3 cmpq $ 1 , % rax je . L 4 cmpq $ 2 , % rax je . L 5 jmp . L 3 . L 4 : . LBB 3 : movq $ 0 , - 7 6 8 (% rbp ) movq $ 0 , - 7 6 0 (% rbp ) movq $ 0 , - 7 5 2 (% rbp ) leaq . LC 1 1 (% rip ), % rax movq % rax , - 2 0 4 8 (% rbp ) movq $ 9 , - 2 0 4 0 (% rbp ) leaq - 7 3 6 (% rbp ), % rax movq - 2 0 4 8 (% rbp ), % rcx movq - 2 0 4 0 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 7 5 2 (% rbp ) pushq - 7 6 0 (% rbp ) pushq - 7 6 8 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , - 1 6 6 4 (% rbp ) movq % rdx , - 1 6 5 6 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq % rax , - 1 6 4 8 (% rbp ) leaq type ... 1 float 6 4 (% rip ), % rax movq % rax , - 2 2 0 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 2 0 0 (% rbp ) movdqa - 2 2 0 8 (% rbp ), % xmm 6 movups % xmm 6 , - 1 6 0 0 (% rbp ) leaq - 1 6 0 0 (% rbp ), % rax movq % rax , - 7 0 4 (% rbp ) movq $ 1 , - 6 9 6 (% rbp ) movq $ 1 , - 6 8 8 (% rbp ) leaq - 6 7 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 8 8 (% rbp ) pushq - 6 9 6 (% rbp ) pushq - 7 0 4 (% rbp ) movq % rax , % rdi call fmt . Scanln @ PLT addq $ 3 2 , % rsp movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 1 6 3 2 (% rbp ) movq % rdx , - 1 6 2 4 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq % rax , - 1 6 1 6 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 2 1 9 2 (% rbp ) leaq go .. C 2 1 (% rip ), % rax movq % rax , - 2 1 8 4 (% rbp ) movdqa - 2 1 9 2 (% rbp ), % xmm 7 movups % xmm 7 , - 1 5 5 2 (% rbp ) leaq - 1 5 5 2 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) movq $ 1 , - 6 3 2 (% rbp ) movq $ 1 , - 6 2 4 (% rbp ) leaq - 6 0 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 2 4 (% rbp ) pushq - 6 3 2 (% rbp ) pushq - 6 4 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 1 5 8 4 (% rbp ) movq % rdx , - 1 5 7 6 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 1 5 6 8 (% rbp ) leaq float 6 4 .. d (% rip ), % rax movq % rax , - 2 1 7 6 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 1 2 (% rbp ) movq - 6 4 (% rbp ), % rax movsd (% rax ), % xmm 1 movq - 1 5 1 2 (% rbp ), % rax movsd . LC 1 2 (% rip ), % xmm 0 mulsd % xmm 1 , % xmm 0 movsd % xmm 0 , (% rax ) movq - 1 5 1 2 (% rbp ), % rax movq % rax , - 2 1 6 8 (% rbp ) movdqa - 2 1 7 6 (% rbp ), % xmm 2 movups % xmm 2 , - 1 5 0 4 (% rbp ) leaq - 1 5 0 4 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) movq $ 1 , - 5 6 8 (% rbp ) movq $ 1 , - 5 6 0 (% rbp ) leaq . LC 1 3 (% rip ), % rax movq % rax , - 2 0 3 2 (% rbp ) movq $ 2 3 , - 2 0 2 4 (% rbp ) leaq - 5 4 4 (% rbp ), % rax movq - 2 0 3 2 (% rbp ), % rcx movq - 2 0 2 4 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 5 6 0 (% rbp ) pushq - 5 6 8 (% rbp ) pushq - 5 7 6 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 1 5 3 6 (% rbp ) movq % rdx , - 1 5 2 8 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 1 5 2 0 (% rbp ) . LBE 3 : jmp . L 3 . L 5 : . LBB 4 : leaq float 6 4 .. d (% rip ), % r 1 5 movq % r 1 5 , - 2 1 6 0 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 4 6 4 (% rbp ) movq - 1 4 6 4 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movsd (% rdx ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 1 4 6 4 (% rbp ), % rax movq % rax , - 2 1 5 2 (% rbp ) movdqa - 2 1 6 0 (% rbp ), % xmm 3 movups % xmm 3 , - 1 4 5 6 (% rbp ) leaq - 1 4 5 6 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) movq $ 1 , - 5 0 4 (% rbp ) movq $ 1 , - 4 9 6 (% rbp ) leaq . LC 1 4 (% rip ), % rax movq % rax , - 2 0 1 6 (% rbp ) movq $ 2 3 , - 2 0 0 8 (% rbp ) leaq - 4 8 0 (% rbp ), % rax movq - 2 0 1 6 (% rbp ), % rcx movq - 2 0 0 8 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 4 9 6 (% rbp ) pushq - 5 0 4 (% rbp ) pushq - 5 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 1 4 8 8 (% rbp ) movq % rdx , - 1 4 8 0 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 1 4 7 2 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 2 1 4 4 (% rbp ) leaq go .. C 2 2 (% rip ), % rax movq % rax , - 2 1 3 6 (% rbp ) movdqa - 2 1 4 4 (% rbp ), % xmm 4 movups % xmm 4 , - 1 4 0 8 (% rbp ) leaq - 1 4 0 8 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq $ 1 , - 4 4 0 (% rbp ) movq $ 1 , - 4 3 2 (% rbp ) leaq - 4 1 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 4 3 2 (% rbp ) pushq - 4 4 0 (% rbp ) pushq - 4 4 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 1 4 4 0 (% rbp ) movq % rdx , - 1 4 3 2 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 1 4 2 4 (% rbp ) movq % r 1 5 , - 2 1 2 8 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 8 (% rbp ) movq - 6 4 (% rbp ), % rax movsd (% rax ), % xmm 0 movsd . LC 1 5 (% rip ), % xmm 2 movapd % xmm 0 , % xmm 1 subsd % xmm 2 , % xmm 1 movsd . LC 1 6 (% rip ), % xmm 0 mulsd % xmm 1 , % xmm 0 movq - 1 3 6 8 (% rbp ), % rax movsd . LC 1 7 (% rip ), % xmm 1 divsd % xmm 1 , % xmm 0 movsd % xmm 0 , (% rax ) movq - 1 3 6 8 (% rbp ), % rax movq % rax , - 2 1 2 0 (% rbp ) movdqa - 2 1 2 8 (% rbp ), % xmm 5 movups % xmm 5 , - 1 3 6 0 (% rbp ) leaq - 1 3 6 0 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 1 , - 3 7 6 (% rbp ) movq $ 1 , - 3 6 8 (% rbp ) leaq . LC 1 8 (% rip ), % rax movq % rax , - 2 0 0 0 (% rbp ) movq $ 2 0 , - 1 9 9 2 (% rbp ) leaq - 3 5 2 (% rbp ), % rax movq - 2 0 0 0 (% rbp ), % rcx movq - 1 9 9 2 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 3 6 8 (% rbp ) pushq - 3 7 6 (% rbp ) pushq - 3 8 4 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 1 3 9 2 (% rbp ) movq % rdx , - 1 3 8 4 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 1 3 7 6 (% rbp ) . LBE 4 : jmp . L 3 . L 2 : . LBB 5 : leaq float 6 4 .. d (% rip ), % r 1 4 movq % r 1 4 , - 2 1 1 2 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 2 0 (% rbp ) movq - 1 3 2 0 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movsd (% rdx ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 1 3 2 0 (% rbp ), % rax movq % rax , - 2 1 0 4 (% rbp ) movdqa - 2 1 1 2 (% rbp ), % xmm 6 movups % xmm 6 , - 1 3 1 2 (% rbp ) leaq - 1 3 1 2 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq $ 1 , - 3 1 2 (% rbp ) movq $ 1 , - 3 0 4 (% rbp ) leaq . LC 1 9 (% rip ), % rax movq % rax , - 1 9 8 4 (% rbp ) movq $ 1 9 , - 1 9 7 6 (% rbp ) leaq - 2 8 8 (% rbp ), % rax movq - 1 9 8 4 (% rbp ), % rcx movq - 1 9 7 6 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 3 0 4 (% rbp ) pushq - 3 1 2 (% rbp ) pushq - 3 2 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 3 4 4 (% rbp ) movq % rdx , - 1 3 3 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 3 2 8 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 2 0 9 6 (% rbp ) leaq go .. C 2 3 (% rip ), % rax movq % rax , - 2 0 8 8 (% rbp ) movdqa - 2 0 9 6 (% rbp ), % xmm 7 movups % xmm 7 , - 1 2 6 4 (% rbp ) leaq - 1 2 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq $ 1 , - 2 4 8 (% rbp ) movq $ 1 , - 2 4 0 (% rbp ) leaq - 2 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 4 0 (% rbp ) pushq - 2 4 8 (% rbp ) pushq - 2 5 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 2 9 6 (% rbp ) movq % rdx , - 1 2 8 8 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 2 8 0 (% rbp ) movq % r 1 4 , - 2 0 8 0 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 2 4 (% rbp ) movq - 6 4 (% rbp ), % rax movsd (% rax ), % xmm 1 movq - 1 2 2 4 (% rbp ), % rax movsd . LC 2 0 (% rip ), % xmm 0 mulsd % xmm 1 , % xmm 0 movsd % xmm 0 , (% rax ) movq - 1 2 2 4 (% rbp ), % rax movq % rax , - 2 0 7 2 (% rbp ) movdqa - 2 0 8 0 (% rbp ), % xmm 2 movups % xmm 2 , - 1 2 1 6 (% rbp ) leaq - 1 2 1 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq $ 1 , - 1 8 4 (% rbp ) movq $ 1 , - 1 7 6 (% rbp ) leaq . LC 2 1 (% rip ), % rax movq % rax , - 1 9 6 8 (% rbp ) movq $ 2 2 , - 1 9 6 0 (% rbp ) leaq - 1 6 0 (% rbp ), % rax movq - 1 9 6 8 (% rbp ), % rcx movq - 1 9 6 0 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 1 7 6 (% rbp ) pushq - 1 8 4 (% rbp ) pushq - 1 9 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 1 2 4 8 (% rbp ) movq % rdx , - 1 2 4 0 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 1 2 3 2 (% rbp ) . LBE 5 : nop . L 3 : . LBE 2 : leaq string .. d (% rip ), % rax movq % rax , - 2 0 6 4 (% rbp ) leaq go .. C 2 4 (% rip ), % rax movq % rax , - 2 0 5 6 (% rbp ) movdqa - 2 0 6 4 (% rbp ), % xmm 3 movups % xmm 3 , - 1 1 6 8 (% rbp ) leaq - 1 1 6 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) leaq - 9 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 1 2 0 0 (% rbp ) movq % rdx , - 1 1 9 2 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 1 1 8 4 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 1 9 movl $ 1 5 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 9 : ret . L 1 1 9 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 3 6 , % rsp movq $ 0 , - 7 2 (% rbp ) . LBB 7 4 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 1 2 (% rbp ) movq % rbx , - 1 0 4 (% rbp ) movq % rbx , - 9 6 (% rbp ) movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 4 4 (% rbp ) movq % rbx , - 1 3 6 (% rbp ) movq % rbx , - 1 2 8 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movq 2 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 6 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 6 9 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 3 2 (% rbp ) . LBB 7 5 : movq $ 1 , - 4 8 (% rbp ) . LBB 7 6 : jmp . L 7 0 . L 1 1 6 : . LBB 7 7 : nop . LBE 7 7 : . LBB 7 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 7 1 cmpq % rax , - 4 8 (% rbp ) jl . L 1 0 2 . L 7 1 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 2 : movq 1 6 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . Solution . min movq % rax , - 3 2 (% rbp ) movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 1 3 6 (% rbp ), % rdx testq % rax , % rax js . L 7 3 cmpq % rdx , % rax jl . L 1 0 3 . L 7 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 0 3 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 4 8 (% rbp ) js . L 7 5 cmpq % rdx , - 4 8 (% rbp ) jl . L 1 0 4 . L 7 5 : movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 0 4 : movq 1 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx subq - 3 2 (% rbp ), % rdx movq - 1 4 4 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call go . Solution . max movq % rax , % rdx movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 7 7 cmpq % rax , - 4 8 (% rbp ) jl . L 1 0 5 . L 7 7 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 5 : movq - 1 4 4 (% rbp ), % rcx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq % rdx , (% rax ) . LBE 7 8 : . LBB 7 9 : addq $ 1 , - 4 8 (% rbp ) . L 7 0 : . LBE 7 9 : movq - 4 8 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jl . L 1 1 6 . LBE 7 6 : . LBE 7 5 : movq - 8 0 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 8 1 cmpq % rdx , % rax jl . L 1 0 7 . L 8 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 0 7 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 4 0 (% rbp ) . LBB 8 0 : movq - 8 0 (% rbp ), % rax subq $ 2 , % rax movq % rax , - 5 6 (% rbp ) . LBB 8 1 : jmp . L 8 3 . L 1 1 7 : . LBB 8 2 : nop . LBE 8 2 : . LBB 8 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 8 4 cmpq % rax , - 5 6 (% rbp ) jl . L 1 0 8 . L 8 4 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 8 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . Solution . max movq % rax , - 4 0 (% rbp ) movq - 5 6 (% rbp ), % rax addq $ 1 , % rax movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 8 6 cmpq % rdx , % rax jl . L 1 0 9 . L 8 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 0 9 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 8 8 cmpq % rdx , - 5 6 (% rbp ) jl . L 1 1 0 . L 8 8 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 1 0 : movq 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 4 0 (% rbp ), % rdx subq % rcx , % rdx movq - 1 1 2 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call go . Solution . max movq % rax , % rdx movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 9 0 cmpq % rax , - 5 6 (% rbp ) jl . L 1 1 1 . L 9 0 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 1 1 : movq - 1 1 2 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq % rdx , (% rax ) . LBE 8 3 : . LBB 8 4 : subq $ 1 , - 5 6 (% rbp ) . L 8 3 : . LBE 8 4 : cmpq $ 0 , - 5 6 (% rbp ) jns . L 1 1 7 . LBE 8 1 : . LBE 8 0 : . LBB 8 5 : movq $ 0 , - 6 4 (% rbp ) . LBB 8 6 : jmp . L 9 4 . L 1 1 8 : . LBB 8 7 : nop . LBE 8 7 : . LBB 8 8 : movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 9 5 cmpq % rax , - 6 4 (% rbp ) jl . L 1 1 3 . L 9 5 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 1 3 : movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 9 7 cmpq % rax , - 6 4 (% rbp ) jl . L 1 1 4 . L 9 7 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 1 4 : movq - 1 4 4 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 1 1 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax addq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . Solution . max movq % rax , - 2 4 (% rbp ) . LBE 8 8 : . LBB 8 9 : addq $ 1 , - 6 4 (% rbp ) . L 9 4 : . LBE 8 9 : movq - 6 4 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jl . L 1 1 8 . LBE 8 6 : . LBE 8 5 : . LBB 9 0 : movq - 2 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax . LBE 9 0 : . LBE 7 4 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 7 movl $ 2 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 6 8 , % rsp movl $ 1 , % edi call math .. z 2 fbig . NewInt @ PLT movq % rax , - 7 2 (% rbp ) . LBB 2 : movq $ 2 , - 6 4 (% rbp ) . LBB 3 : jmp . L 2 . L 1 5 : . LBB 4 : nop . LBE 4 : . LBB 5 : movq - 6 4 (% rbp ), % rax movq % rax , % rdi call math .. z 2 fbig . NewInt @ PLT movq % rax , % rdx movq - 7 2 (% rbp ), % rcx movq - 7 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call math .. z 2 fbig . Int . Mul @ PLT . LBE 5 : . LBB 6 : addq $ 1 , - 6 4 (% rbp ) . L 2 : . LBE 6 : cmpq $ 1 0 0 , - 6 4 (% rbp ) jle . L 1 5 . LBE 3 : . LBE 2 : leaq main . main .. func 1 .. f (% rip ), % rax movq % rax , - 8 0 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 7 : movl $ 0 , - 8 4 (% rbp ) . LBB 8 : movq - 7 2 (% rbp ), % rax movq % rax , % rdi call math .. z 2 fbig . Int . String @ PLT movq % rax , % r 1 2 movq % rdx , % r 1 3 . LBB 9 : . LBB 1 0 : movq % r 1 3 , - 2 0 0 (% rbp ) movl $ 0 , % ebx . LBE 1 0 : jmp . L 5 . L 1 6 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : . LBB 1 3 : movq % r 1 3 , % rax testq % rbx , % rbx js . L 6 cmpq % rax , % rbx jge . L 6 movq % r 1 2 , % rdx movq % rbx , % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 7 jmp . L 1 3 . L 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 7 : . LBB 1 4 : addq $ 1 , % rbx . LBE 1 4 : jmp . L 9 . L 1 3 : . LBB 1 5 : movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movl % ecx , % eax . L 9 : . LBE 1 5 : . LBE 1 3 : . LBB 1 6 : movl % eax , - 8 4 (% rbp ) . LBE 1 6 : . LBB 1 7 : movq - 8 0 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rdx movl - 8 4 (% rbp ), % eax movq - 8 0 (% rbp ), % r 1 0 movl % eax , % edi call *% rdx . LVL 1 : addq % rax , - 5 6 (% rbp ) . L 5 : . LBE 1 7 : . LBE 1 2 : cmpq - 2 0 0 (% rbp ), % rbx jl . L 1 6 . LBE 9 : . LBE 8 : . LBE 7 : leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 6 8 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 1 6 0 (% rbp ) movq % r 1 5 , - 1 5 2 (% rbp ) leaq - 1 6 0 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 1 , - 1 3 6 (% rbp ) movq $ 1 , - 1 2 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 1 0 3 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 2 movl $ 1 0 3 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 8 4 , % rsp movq % rdi , - 9 6 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 2 4 (% rbp ) movq - 8 2 4 (% rbp ), % rax movq $ 7 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 8 2 4 (% rbp ), % rax movq % rax , - 7 8 4 (% rbp ) movq $ 3 , - 7 7 6 (% rbp ) movq $ 3 , - 7 6 8 (% rbp ) movq $ 2 , - 7 6 0 (% rbp ) movq $ 3 , - 7 5 2 (% rbp ) movb $ 1 , - 7 4 4 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 1 6 (% rbp ) movq - 8 1 6 (% rbp ), % rax movq $- 1 , (% rax ) movq $- 1 , 8 (% rax ) movq - 8 1 6 (% rbp ), % rax movq % rax , - 7 3 6 (% rbp ) movq $ 2 , - 7 2 8 (% rbp ) movq $ 2 , - 7 2 0 (% rbp ) movq $ 1 , - 7 1 2 (% rbp ) movq $- 1 , - 7 0 4 (% rbp ) movb $ 0 , - 6 9 6 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 0 8 (% rbp ) movq - 8 0 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq - 8 0 8 (% rbp ), % rax movq % rax , - 6 8 8 (% rbp ) movq $ 4 , - 6 8 0 (% rbp ) movq $ 4 , - 6 7 2 (% rbp ) movq $ 3 , - 6 6 4 (% rbp ) movq $ 0 , - 6 5 6 (% rbp ) movb $ 1 , - 6 4 8 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 0 0 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) movq $ 4 , - 6 3 2 (% rbp ) movq $ 4 , - 6 2 4 (% rbp ) movq $ 1 , - 6 1 6 (% rbp ) movq $ 2 , - 6 0 8 (% rbp ) movb $ 1 , - 6 0 0 (% rbp ) leaq type ... 6 6 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 9 2 (% rbp ) movq - 7 9 2 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 5 , 8 (% rax ) movq $ 9 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq $ 5 , 3 2 (% rax ) movq $ 9 , 4 0 (% rax ) movq - 7 9 2 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 6 , - 5 8 4 (% rbp ) movq $ 6 , - 5 7 6 (% rbp ) movq $ 2 , - 5 6 8 (% rbp ) movq $ 3 , - 5 6 0 (% rbp ) movb $ 0 , - 5 5 2 (% rbp ) leaq - 7 8 4 (% rbp ), % rax movq % rax , - 8 4 8 (% rbp ) movq $ 5 , - 8 4 0 (% rbp ) movq $ 5 , - 8 3 2 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 2 8 (% rip ), % rax movq % rax , - 9 9 2 (% rbp ) movq $ 6 9 , - 9 8 4 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 9 9 2 (% rbp ), % rcx movq - 9 8 4 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) . LBB 2 : movq $ 0 , - 9 1 2 (% rbp ) movq $ 0 , - 9 0 4 (% rbp ) movq $ 0 , - 8 9 6 (% rbp ) movq $ 0 , - 8 8 8 (% rbp ) movq $ 0 , - 8 8 0 (% rbp ) movq $ 0 , - 8 7 2 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 8 4 8 (% rbp ), % rax movq - 8 4 0 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 8 3 2 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 5 6 (% rbp ), % rax movq % rax , - 9 9 2 (% rbp ) movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 1 1 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : movq - 4 5 6 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 4 6 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 5 1 2 (% rbp ) movq % rdi , - 5 0 4 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 4 9 6 (% rbp ) movq % rdi , - 4 8 8 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) . LBE 8 : . LBB 9 : movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 9 1 2 (% rbp ) movq % rdx , - 9 0 4 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 8 9 6 (% rbp ) movq % rdx , - 8 8 8 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 8 8 0 (% rbp ) movq % rdx , - 8 7 2 (% rbp ) . LBE 9 : . LBB 1 0 : movzbl - 8 7 2 (% rbp ), % eax movb % al , - 8 4 9 (% rbp ) movq - 9 1 2 (% rbp ), % rax movq - 9 0 4 (% rbp ), % rdx movq % rax , - 9 6 0 (% rbp ) movq % rdx , - 9 5 2 (% rbp ) movq - 8 9 6 (% rbp ), % rax movq - 8 8 8 (% rbp ), % rdx movq % rax , - 9 4 4 (% rbp ) movq % rdx , - 9 3 6 (% rbp ) movq - 8 8 0 (% rbp ), % rax movq % rax , - 9 2 8 (% rbp ) movq - 9 2 8 (% rbp ), % rdx movq - 9 3 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 4 4 (% rbp ) pushq - 9 5 2 (% rbp ) pushq - 9 6 0 (% rbp ) movq % rdx , % rsi movq % rax , % rdi call go . leetcode . containsNearbyAlmostDuplicate addq $ 3 2 , % rsp movb % al , - 9 6 9 (% rbp ) leaq go . leetcode .. go . leetcode . para 2 2 0 .. d (% rip ), % rax movq % rax , - 1 0 2 4 (% rbp ) leaq go . leetcode .. go . leetcode . para 2 2 0 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 9 6 0 (% rbp ), % rax movq - 9 5 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 9 4 4 (% rbp ), % rax movq - 9 3 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 9 2 8 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 4 jmp . L 9 . L 3 : . LBE 1 0 : . LBB 1 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 3 : . LBB 1 4 : . LBB 1 1 : movq - 3 6 0 (% rbp ), % rax movq - 3 5 2 (% rbp ), % rsi movq - 3 4 4 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 3 3 6 (% rbp ), % rsi movq - 3 2 8 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 3 2 0 (% rbp ), % rdx movq % rdx , 3 2 (% rax ) . LBE 1 1 : jmp . L 6 . L 9 : . LBB 1 2 : movq - 3 6 0 (% rbp ), % rax leaq - 3 5 2 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 2 2 0 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 : . LBE 1 2 : movq - 3 6 0 (% rbp ), % rax movq % rax , - 1 0 1 6 (% rbp ) leaq bool .. d (% rip ), % rax movq % rax , - 1 0 0 8 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movzbl - 9 6 9 (% rbp ), % ecx movb % cl , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 1 0 0 0 (% rbp ) movdqa - 1 0 2 4 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 1 0 0 8 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 2 9 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) . LBE 1 4 : . LBE 7 : . LBB 1 5 : addq $ 1 , % rbx . L 2 : . LBE 1 5 : cmpq - 9 9 2 (% rbp ), % rbx jl . L 1 1 . LBE 4 : . LBE 3 : . LBE 2 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 3 0 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 9 5 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 8 movl $ 9 5 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 0 4 , % rsp leaq go . version . go . version .. init 0 . go . version . Newtype .. d (% rip ), % r 1 2 leaq go . version . go . version .. init 0 . go . version . Newtype .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 3 2 (% rbp ) movq - 6 3 2 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call reflect . TypeOf @ PLT movq % rax , % rcx movq 2 1 6 (% rcx ), % rcx movq % rdx , % rax movq % rax , % rdi call *% rcx . LVL 1 : movq % rax , - 6 5 6 (% rbp ) movq % rdx , - 6 4 8 (% rbp ) leaq . LC 8 (% rip ), % r 1 4 movl $ 7 , % r 1 5 d movq % r 1 4 , - 6 7 2 (% rbp ) movq % r 1 5 , - 6 6 4 (% rbp ) leaq . LC 8 (% rip ), % rax movq % rax , - 7 8 4 (% rbp ) movq $ 7 , - 7 7 6 (% rbp ) movdqa - 7 8 4 (% rbp ), % xmm 0 movups % xmm 0 , - 6 8 8 (% rbp ) movq % rax , - 7 6 8 (% rbp ) movq $ 7 , - 7 6 0 (% rbp ) movdqa - 7 6 8 (% rbp ), % xmm 1 movups % xmm 1 , - 7 0 4 (% rbp ) . LBB 2 : call runtime .. z 2 fdebug . ReadBuildInfo @ PLT movq % rax , % rcx movq % rcx , - 5 6 (% rbp ) movl % edx , % eax movb % al , - 5 7 (% rbp ) cmpb $ 0 , - 5 7 (% rbp ) je . L 2 . LBB 3 : movq - 5 6 (% rbp ), % rax movq 2 4 (% rax ), % rdx movq 1 6 (% rax ), % rax movq % rax , - 6 7 2 (% rbp ) movq % rdx , - 6 6 4 (% rbp ) movq - 5 6 (% rbp ), % rax movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 6 8 8 (% rbp ) movq % rdx , - 6 8 0 (% rbp ) . LBB 4 : movq $ 0 , - 7 2 (% rbp ) . LBB 5 : movq - 5 6 (% rbp ), % rcx movq 7 2 (% rcx ), % rax movq 8 0 (% rcx ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq 8 8 (% rcx ), % rax movq % rax , - 6 0 8 (% rbp ) movq - 6 1 6 (% rbp ), % rbx cmpq $ 0 , - 5 6 (% rbp ) jne . L 3 call runtime . panicmem @ PLT . L 3 : movq - 5 6 (% rbp ), % rax leaq 1 6 (% rax ), % r 1 2 leaq 1 (% rbx ), % rcx movq - 6 0 8 (% rbp ), % rsi movq % rcx , % rdx movq % rsi , % rax cmpq % rax , % rdx jbe . L 4 movq - 6 2 4 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdi movq % rcx , % r 9 movq % rsi , % r 8 movq % rbx , % rcx movq % rax , % rdx leaq type ... 1 runtime .. z 2 fdebug . Module (% rip ), % rsi call runtime . growslice @ PLT movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 6 0 8 (% rbp ) jmp . L 5 . L 4 : movq - 6 2 4 (% rbp ), % rax movq - 6 0 8 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rcx , - 6 1 6 (% rbp ) movq % rdx , - 6 0 8 (% rbp ) . L 5 : movq - 6 2 4 (% rbp ), % rdx movq % rbx , % rax salq $ 3 , % rax addq % rax , % rdx leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 6 : movq % r 1 2 , (% rdx ) jmp . L 7 . L 6 : . LBE 6 : . LBB 7 : movq % r 1 2 , % rax movq % rax , % rsi movq % rdx , % rdi call runtime . gcWriteBarrier @ PLT . L 7 : . LBE 7 : movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) . LBB 8 : . LBB 9 : movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) movq - 5 5 2 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 9 : jmp . L 8 . L 3 7 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 5 5 2 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 9 cmpq % rax , % r 1 2 jge . L 9 movq - 5 6 0 (% rbp ), % rdx movq % r 1 2 , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax . LBE 1 2 : . LBB 1 3 : movq % rax , - 7 2 (% rbp ) . LBE 1 3 : . LBB 1 4 : . LBB 1 5 : movq - 7 2 (% rbp ), % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rbx , % rdx movq - 6 4 8 (% rbp ), % rax cmpq % rax , % rdx je . L 1 0 jmp . L 3 5 . L 9 : . LBE 1 5 : . LBE 1 4 : . LBB 1 8 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : . LBE 1 8 : . LBB 1 9 : . LBB 1 7 : movq % rcx , % rdx movq - 6 5 6 (% rbp ), % rax cmpq % rax , % rdx jne . L 1 2 movl $ 1 , % eax jmp . L 1 4 . L 1 2 : movq - 6 4 8 (% rbp ), % rax movq % rax , % rdx movq - 6 5 6 (% rbp ), % rax movq % rax , % rsi movq % rcx , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 1 4 . L 3 5 : movl $ 0 , % eax . L 1 4 : testb % al , % al je . L 1 5 . LBB 1 6 : movq - 7 2 (% rbp ), % rax movq 2 4 (% rax ), % rdx movq 1 6 (% rax ), % rax movq % rax , - 7 0 4 (% rbp ) movq % rdx , - 6 9 6 (% rbp ) . L 1 5 : . LBE 1 6 : . LBE 1 7 : . LBE 1 9 : . LBE 1 1 : . LBB 2 0 : addq $ 1 , % r 1 2 . L 8 : . LBE 2 0 : cmpq % r 1 3 , % r 1 2 jl . L 3 7 . L 2 : . LBE 8 : . LBE 5 : . LBE 4 : . LBE 3 : . LBE 2 : leaq string .. d (% rip ), % rax movq % rax , - 9 4 4 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 3 6 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 7 . LBB 2 1 : movq - 5 3 6 (% rbp ), % rcx movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 1 : jmp . L 1 8 . L 1 7 : . LBB 2 2 : movq - 5 3 6 (% rbp ), % rcx leaq - 5 2 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 8 : . LBE 2 2 : movq - 5 3 6 (% rbp ), % rax movq % rax , - 9 3 6 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 9 2 8 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 9 . LBB 2 3 : movq - 5 0 4 (% rbp ), % rcx movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 3 : jmp . L 2 0 . L 1 9 : . LBB 2 4 : movq - 5 0 4 (% rbp ), % rcx leaq - 4 9 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 0 : . LBE 2 4 : movq - 5 0 4 (% rbp ), % rax movq % rax , - 9 2 0 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 9 1 2 (% rbp ) leaq go .. C 1 3 (% rip ), % rbx movq % rbx , - 9 0 4 (% rbp ) movq % rax , - 8 9 6 (% rbp ) leaq go .. C 1 4 (% rip ), % rbx movq % rbx , - 8 8 8 (% rbp ) movq % rax , - 8 8 0 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 7 2 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 1 . LBB 2 5 : movq - 4 7 2 (% rbp ), % rcx movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 5 : jmp . L 2 2 . L 2 1 : . LBB 2 6 : movq - 4 7 2 (% rbp ), % rcx leaq - 4 6 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 2 : . LBE 2 6 : movq - 4 7 2 (% rbp ), % rax movq % rax , - 8 7 2 (% rbp ) movdqa - 9 4 4 (% rbp ), % xmm 2 movups % xmm 2 , - 4 4 8 (% rbp ) movdqa - 9 2 8 (% rbp ), % xmm 3 movups % xmm 3 , - 4 3 2 (% rbp ) movdqa - 9 1 2 (% rbp ), % xmm 4 movups % xmm 4 , - 4 1 6 (% rbp ) movdqa - 8 9 6 (% rbp ), % xmm 5 movups % xmm 5 , - 4 0 0 (% rbp ) movdqa - 8 8 0 (% rbp ), % xmm 6 movups % xmm 6 , - 3 8 4 (% rbp ) leaq - 4 4 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 5 , - 1 5 2 (% rbp ) movq $ 5 , - 1 4 4 (% rbp ) leaq . LC 9 (% rip ), % rax movq % rax , - 7 5 2 (% rbp ) movq $ 1 6 , - 7 4 4 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq % rax , % rcx movq % rdx , % rbx leaq go . version . DefaultExtendedHandshakeClientVersion (% rip ), % rsi movq % rbx , % rax movq % rax , 8 (% rsi ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 3 . LBB 2 7 : movq % rcx , % rax movq % rax , (% rsi ) jmp . L 2 4 . L 2 3 : . LBE 2 7 : . LBB 2 8 : movq % rcx , % rax movq % rax , % rdx movq % rsi , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 4 : . LBE 2 8 : leaq string .. d (% rip ), % rax movq % rax , - 8 6 4 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 5 . LBB 2 9 : movq - 3 6 0 (% rbp ), % rcx movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 9 : jmp . L 2 6 . L 2 5 : . LBB 3 0 : movq - 3 6 0 (% rbp ), % rcx leaq - 3 5 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 6 : . LBE 3 0 : movq - 3 6 0 (% rbp ), % rax movq % rax , - 8 5 6 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 8 4 8 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 7 . LBB 3 1 : movq - 3 2 8 (% rbp ), % rcx movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 3 1 : jmp . L 2 8 . L 2 7 : . LBB 3 2 : movq - 3 2 8 (% rbp ), % rcx leaq - 3 2 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 8 : . LBE 3 2 : movq - 3 2 8 (% rbp ), % rax movq % rax , - 8 4 0 (% rbp ) movdqa - 8 6 4 (% rbp ), % xmm 7 movups % xmm 7 , - 3 0 4 (% rbp ) movdqa - 8 4 8 (% rbp ), % xmm 0 movups % xmm 0 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 2 , - 1 2 0 (% rbp ) movq $ 2 , - 1 1 2 (% rbp ) leaq . LC 1 0 (% rip ), % rax movq % rax , - 7 3 6 (% rbp ) movq $ 5 , - 7 2 8 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp leaq go . version . DefaultUpnpId (% rip ), % rcx movq % rdx , % rsi movq % rsi , 8 (% rcx ) leaq runtime . writeBarrier (% rip ), % rsi movl (% rsi ), % esi testl % esi , % esi jne . L 2 9 . LBB 3 3 : movq % rax , (% rcx ) jmp . L 3 0 . L 2 9 : . LBE 3 3 : . LBB 3 4 : movq % rax , % rdx movq % rcx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 0 : . LBE 3 4 : leaq string .. d (% rip ), % rax movq % rax , - 8 3 2 (% rbp ) leaq go .. C 1 5 (% rip ), % rbx movq % rbx , - 8 2 4 (% rbp ) movq % rax , - 8 1 6 (% rbp ) leaq go .. C 1 6 (% rip ), % rbx movq % rbx , - 8 0 8 (% rbp ) movq % rax , - 8 0 0 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 1 . LBB 3 5 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 3 5 : jmp . L 3 2 . L 3 1 : . LBB 3 6 : movq - 2 6 4 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 2 : . LBE 3 6 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 7 9 2 (% rbp ) movdqa - 8 3 2 (% rbp ), % xmm 1 movups % xmm 1 , - 2 4 0 (% rbp ) movdqa - 8 1 6 (% rbp ), % xmm 2 movups % xmm 2 , - 2 2 4 (% rbp ) movdqa - 8 0 0 (% rbp ), % xmm 3 movups % xmm 3 , - 2 0 8 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 3 , - 8 8 (% rbp ) movq $ 3 , - 8 0 (% rbp ) leaq . LC 1 1 (% rip ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 8 , - 7 1 2 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp leaq go . version . DefaultHttpUserAgent (% rip ), % rcx movq % rdx , % rsi movq % rsi , 8 (% rcx ) leaq runtime . writeBarrier (% rip ), % rsi movl (% rsi ), % esi testl % esi , % esi jne . L 3 3 . LBB 3 7 : movq % rax , (% rcx ) jmp . L 1 . L 3 3 : . LBE 3 7 : . LBB 3 8 : movq % rax , % rdx movq % rcx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 : . LBE 3 8 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 7 movl $ 3 4 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 3 2 0 , % rsp movq % rdi , - 3 2 8 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : leaq type ... 6 0 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 2 3 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq - 3 2 8 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rax cmpw $ 6 3 , % ax ja . L 4 movl $ 1 , % edx movl % eax , % ecx salq % cl , % rdx movq % rdx , % rax jmp . L 5 . L 4 : movl $ 0 , % eax . L 5 : movq % rax , - 4 8 (% rbp ) leaq type ... 6 0 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 2 4 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) movq $ 0 , - 2 7 2 (% rbp ) . LBB 6 : movq $ 0 , - 2 4 (% rbp ) . LBB 7 : jmp . L 6 . L 2 6 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq - 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq - 2 1 6 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) . LBB 1 0 : movq $ 0 , - 4 0 (% rbp ) . LBB 1 1 : jmp . L 7 . L 2 5 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq - 3 2 (% rbp ), % rax andl $ 1 , % eax testq % rax , % rax je . L 8 . LBB 1 5 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rbx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 9 cmpq % rax , - 4 0 (% rbp ) jl . L 2 2 . L 9 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 1 . LBB 1 6 : movq - 2 0 8 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) . LBE 1 6 : jmp . L 1 2 . L 1 1 : . LBB 1 7 : movq - 2 0 8 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rdx movq % rcx , - 3 2 0 (% rbp ) movq % rax , - 3 1 2 (% rbp ) movq % rdx , - 3 0 4 (% rbp ) . L 1 2 : . LBE 1 7 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) . L 8 : . LBE 1 5 : . LBE 1 4 : sarq - 3 2 (% rbp ) . LBE 1 3 : . LBB 1 8 : addq $ 1 , - 4 0 (% rbp ) . L 7 : . LBE 1 8 : movq 2 4 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 2 5 . LBE 1 1 : . LBE 1 0 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 5 . LBB 1 9 : movq - 1 7 6 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 6 . 7 int (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) . LBE 1 9 : jmp . L 1 6 . L 1 5 : . LBB 2 0 : movq - 1 7 6 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rdx movq % rcx , - 2 8 8 (% rbp ) movq % rax , - 2 8 0 (% rbp ) movq % rdx , - 2 7 2 (% rbp ) . L 1 6 : . LBE 2 0 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , - 1 4 4 (% rbp ) movq % rbx , - 1 3 6 (% rbp ) movq - 3 0 4 (% rbp ), % rdx movq % rdx , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 2 8 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 7 . LBB 2 1 : movq - 1 4 4 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 8 . L 1 7 : . LBE 2 1 : . LBB 2 2 : movq - 1 4 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 8 : . LBE 2 2 : . LBE 9 : . LBB 2 3 : addq $ 1 , - 2 4 (% rbp ) . L 6 : . LBE 2 3 : movq - 2 4 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 2 6 . LBE 7 : . LBE 6 : . LBB 2 4 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 3 2 8 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 2 4 : . LBE 2 : movq - 3 2 8 (% rbp ), % rax addq $ 3 2 0 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 1 movl $ 2 3 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 0 8 , % rsp movq % rdi , - 2 1 6 (% rbp ) movq % rsi , - 2 2 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) . LBB 4 : movl $ 0 , % edx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 0 8 (% rbp ) movq $ 0 , - 2 0 0 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) pxor % xmm 1 , % xmm 1 cvtsi 2 sdq - 2 2 4 (% rbp ), % xmm 1 movq % xmm 1 , % rax movq % rax , % xmm 0 call math . Sqrt @ PLT cvttsd 2 siq % xmm 0 , % rax movq % rax , - 2 4 (% rbp ) . LBB 5 : . LBB 6 : jmp . L 6 . L 3 0 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : cmpq $- 1 , - 2 4 (% rbp ) je . L 7 cmpq $ 0 , - 2 4 (% rbp ) jne . L 8 call runtime . panicdivide @ PLT . L 8 : movq - 2 2 4 (% rbp ), % rax cqto idivq - 2 4 (% rbp ) movq % rdx , % rax testq % rax , % rax sete % al jmp . L 9 . L 7 : movl $ 1 , % eax . L 9 : testb % al , % al je . L 1 0 . LBB 1 0 : . LBB 1 1 : cmpq $- 1 , - 2 4 (% rbp ) jne . L 1 1 movq - 2 2 4 (% rbp ), % rax negq % rax jmp . L 1 2 . L 1 1 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 1 3 call runtime . panicdivide @ PLT . L 1 3 : movq - 2 2 4 (% rbp ), % rax cqto idivq - 2 4 (% rbp ) . L 1 2 : cmpq - 2 4 (% rbp ), % rax jg . L 1 4 . LBB 1 2 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rbx cmpq $- 1 , - 2 4 (% rbp ) jne . L 1 5 movq - 2 2 4 (% rbp ), % rax negq % rax movq % rax , % r 1 2 jmp . L 1 6 . L 1 5 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 1 7 call runtime . panicdivide @ PLT . L 1 7 : movq - 2 2 4 (% rbp ), % rax cqto idivq - 2 4 (% rbp ) movq % rax , % r 1 2 . L 1 6 : leaq 2 (% rbx ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 8 . LBB 1 3 : movq - 1 4 4 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) . LBE 1 3 : jmp . L 1 9 . L 1 8 : . LBB 1 4 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq % rcx , - 2 0 8 (% rbp ) movq % rax , - 2 0 0 (% rbp ) movq % rdx , - 1 9 2 (% rbp ) . L 1 9 : . LBE 1 4 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rax , (% rdx ) leaq 1 (% rbx ), % rax movq - 1 4 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % r 1 2 , (% rax ) . LBE 1 2 : . LBE 1 1 : jmp . L 2 6 . L 1 4 : . LBB 1 8 : . LBB 1 5 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rbx cmpq $- 1 , - 2 4 (% rbp ) jne . L 2 1 movq - 2 2 4 (% rbp ), % rax negq % rax movq % rax , % r 1 2 jmp . L 2 2 . L 2 1 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 2 3 call runtime . panicdivide @ PLT . L 2 3 : movq - 2 2 4 (% rbp ), % rax cqto idivq - 2 4 (% rbp ) movq % rax , % r 1 2 . L 2 2 : leaq 2 (% rbx ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 4 . LBB 1 6 : movq - 1 1 2 (% rbp ), % rsi leaq - 4 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) . LBE 1 6 : jmp . L 2 5 . L 2 4 : . LBB 1 7 : movq - 1 1 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rcx , - 2 0 8 (% rbp ) movq % rax , - 2 0 0 (% rbp ) movq % rdx , - 1 9 2 (% rbp ) . L 2 5 : . LBE 1 7 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) leaq 1 (% rbx ), % rax movq - 1 1 2 (% rbp ), % rdx salq $ 3 , % rax addq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rax , (% rdx ) . LBE 1 5 : . LBE 1 8 : jmp . L 2 6 . L 1 0 : . LBE 1 0 : . LBB 1 9 : subq $ 1 , - 2 4 (% rbp ) . L 6 : . LBE 1 9 : . LBE 9 : . LBE 8 : cmpq $ 0 , - 2 4 (% rbp ) jg . L 3 0 . L 2 6 : . LBE 6 : . LBE 5 : . LBB 2 0 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 2 1 6 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 0 : . LBE 4 : movq - 2 1 6 (% rbp ), % rax addq $ 2 0 8 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
leaq - 4 8 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 2 5 0 movl $ 4 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 3 4 : ret . L 1 2 5 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 4 0 , % rsp movq % rdi , - 4 2 4 (% rbp ) leaq . LC 2 4 8 (% rip ), % rax movl $ 7 , % edx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq $ 1 2 3 , - 3 5 2 (% rbp ) movl $ 1 2 3 , % ebx leaq go . structs . TestValues_OmitNested . go . structs . B .. i 1 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq % rbx , - 3 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 2 3 5 . LBB 1 1 8 0 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 1 1 8 0 : jmp . L 1 2 3 6 . L 1 2 3 5 : . LBB 1 1 8 1 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq go . structs . TestValues_OmitNested . go . structs . B .. i 1 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 3 6 : . LBE 1 1 8 1 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) leaq type ... 1 go . structs . TestValues_OmitNested . B .. i 1 (% rip ), % r 1 2 movq - 5 6 (% rbp ), % r 1 3 leaq - 4 0 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx movq % rax , % rdi call go . structs . Values . LBB 1 1 8 2 : movq - 3 9 2 (% rbp ), % rax cmpq $ 2 , % rax je . L 1 2 3 7 . LBB 1 1 8 3 : movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) leaq . LC 5 6 1 (% rip ), % rax movq % rax , - 4 4 8 (% rbp ) movq $ 5 3 , - 4 4 0 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 4 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 1 2 3 7 : . LBE 1 1 8 3 : . LBE 1 1 8 2 : leaq go . structs . TestValues_OmitNested .. func 1 (% rip ), % rcx leaq - 4 0 0 (% rbp ), % rdx movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rcx , (% rax ) movq % rdx , 8 (% rax ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBB 1 1 8 4 : movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) . LBB 1 1 8 5 : leaq int .. d (% rip ), % rax movq % rax , - 4 8 0 (% rbp ) leaq go .. C 8 6 4 (% rip ), % rax movq % rax , - 4 7 2 (% rbp ) leaq go . structs . TestValues_OmitNested . go . structs . A .. d (% rip ), % rax movq % rax , - 4 6 4 (% rbp ) leaq go . structs . TestValues_OmitNested . go . structs . A .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 2 3 8 . LBB 1 1 8 6 : movq - 2 8 0 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 5 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 1 8 6 : jmp . L 1 2 3 9 . L 1 2 3 8 : . LBB 1 1 8 7 : movq - 2 8 0 (% rbp ), % rax leaq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi leaq go . structs . TestValues_OmitNested . go . structs . A .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 3 9 : . LBE 1 1 8 7 : movq - 2 8 0 (% rbp ), % rax movq % rax , - 4 5 6 (% rbp ) movdqa - 4 8 0 (% rbp ), % xmm 0 movups % xmm 0 , - 2 4 0 (% rbp ) movdqa - 4 6 4 (% rbp ), % xmm 1 movups % xmm 1 , - 2 2 4 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 2 , - 2 0 0 (% rbp ) movq $ 2 , - 1 9 2 (% rbp ) . LBB 1 1 8 8 : . LBB 1 1 8 9 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 1 8 9 : jmp . L 1 2 4 0 . L 1 2 4 9 : . LBB 1 1 9 0 : nop . LBE 1 1 9 0 : . LBB 1 1 9 1 : . LBB 1 1 9 2 : movq - 1 6 8 (% rbp ), % rax testq % rbx , % rbx js . L 1 2 4 1 cmpq % rax , % rbx jge . L 1 2 4 1 movq - 1 7 6 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 1 1 9 2 : . LBB 1 1 9 3 : movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) . LBE 1 1 9 3 : . LBB 1 1 9 4 : . LBB 1 1 9 5 : movq - 6 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rcx movq - 4 1 6 (% rbp ), % rdx movq - 4 0 8 (% rbp ), % rax movq - 6 4 (% rbp ), % r 1 0 movq % rdx , % rdi movq % rax , % rsi call *% rcx . LVL 1 3 5 : xorl $ 1 , % eax testb % al , % al jne . L 1 2 4 2 jmp . L 1 2 4 3 . L 1 2 4 1 : . LBE 1 1 9 5 : . LBE 1 1 9 4 : . LBB 1 2 0 0 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 4 2 : . LBE 1 2 0 0 : . LBB 1 2 0 1 : . LBB 1 1 9 9 : . LBB 1 1 9 6 : leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 2 4 4 . LBB 1 1 9 7 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 1 9 7 : jmp . L 1 2 4 5 . L 1 2 4 4 : . LBB 1 1 9 8 : movq - 1 5 2 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 4 5 : . LBE 1 1 9 8 : movq - 1 5 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq . LC 5 5 8 (% rip ), % r 1 4 movl $ 3 1 , % r 1 5 d movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rsi , % rcx movq - 4 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 1 2 4 3 : . LBE 1 1 9 6 : . LBE 1 1 9 9 : . LBE 1 2 0 1 : . LBE 1 1 9 1 : . LBB 1 2 0 2 : addq $ 1 , % rbx . L 1 2 4 0 : . LBE 1 2 0 2 : cmpq % r 1 2 , % rbx jl . L 1 2 4 9 . LBE 1 1 8 8 : . LBE 1 1 8 5 : . LBE 1 1 8 4 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 3 movl $ 2 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 4 8 , % rsp movq % rdi , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 2 9 : movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) . LBB 3 0 : . LBB 3 1 : . LBB 3 2 : movq go . day 3 3 1 . testcases (% rip ), % rax movq 8 + go . day 3 3 1 . testcases (% rip ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 + go . day 3 3 1 . testcases (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movl $ 0 , % ebx . LBE 3 2 : jmp . L 2 3 . L 3 2 : . LBB 3 3 : nop . LBE 3 3 : . LBB 3 4 : . LBB 3 5 : movq - 1 8 4 (% rbp ), % rax testq % rbx , % rbx js . L 2 4 cmpq % rax , % rbx jge . L 2 4 movq - 1 9 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) . LBE 3 5 : . LBB 3 6 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) . LBE 3 6 : . LBB 3 7 : . LBB 3 8 : movq - 2 5 6 (% rbp ), % rdx movq - 2 4 8 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . day 3 3 1 . FlipsXsBeforeYs movq % rax , - 5 6 (% rbp ) movq - 2 4 0 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 2 5 jmp . L 2 6 . L 2 4 : . LBE 3 8 : . LBE 3 7 : . LBB 4 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : . LBE 4 3 : . LBB 4 4 : . LBB 4 2 : . LBB 3 9 : leaq int .. d (% rip ), % rax movq % rax , - 2 8 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 2 8 0 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 2 8 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movdqa - 2 8 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 7 . LBB 4 0 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 4 0 : jmp . L 2 8 . L 2 7 : . LBB 4 1 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 8 : . LBE 4 1 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) leaq . LC 1 5 (% rip ), % r 1 2 movl $ 1 9 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 2 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 2 6 : . LBE 3 9 : . LBE 4 2 : . LBE 4 4 : . LBE 3 4 : . LBB 4 5 : addq $ 1 , % rbx . L 2 3 : . LBE 4 5 : cmpq - 2 7 2 (% rbp ), % rbx jl . L 3 2 . LBE 3 1 : . LBE 3 0 : . LBE 2 9 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 3 movl $ 4 0 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 3 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) . LBB 2 : movq - 2 4 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax addq % rdx , % rax subq $ 1 , % rax movq % rax , - 8 (% rbp ) . LBB 3 : jmp . L 2 . L 4 2 : . LBB 4 : nop . LBE 4 : . LBB 5 : . LBB 6 : . LBB 7 : cmpq $ 0 , - 2 4 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 3 . LBB 8 : cmpq $ 0 , - 3 2 (% rbp ) sete % al . L 3 : . LBE 8 : . LBE 7 : testb % al , % al je . L 4 . LBB 9 : . LBB 1 0 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 5 . LBB 1 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 6 cmpq % rax , - 8 (% rbp ) jl . L 3 1 . L 6 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq 4 8 (% rbp ), % rdx testq % rax , % rax js . L 8 cmpq % rdx , % rax jl . L 3 2 . L 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq 4 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) subq $ 1 , - 3 2 (% rbp ) . LBE 1 1 : . LBE 1 0 : jmp . L 1 5 . L 5 : . LBB 1 3 : . LBB 1 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 1 1 cmpq % rax , - 8 (% rbp ) jl . L 3 3 . L 1 1 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 3 cmpq % rdx , % rax jl . L 3 4 . L 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) subq $ 1 , - 2 4 (% rbp ) . LBE 1 2 : . LBE 1 3 : jmp . L 1 5 . L 4 : . LBE 9 : . LBE 6 : . LBB 1 4 : movq - 2 4 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq 2 4 (% rbp ), % rax testq % rdx , % rdx js . L 1 6 cmpq % rax , % rdx jl . L 3 5 . L 1 6 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq 4 8 (% rbp ), % rcx testq % rax , % rax js . L 1 8 cmpq % rcx , % rax jl . L 3 6 . L 1 8 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq 1 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 4 0 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jle . L 2 0 . LBB 1 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 2 1 cmpq % rax , - 8 (% rbp ) jl . L 3 7 . L 2 1 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 2 3 cmpq % rdx , % rax jl . L 3 8 . L 2 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) subq $ 1 , - 2 4 (% rbp ) . LBE 1 5 : jmp . L 1 5 . L 2 0 : . LBB 1 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 2 5 cmpq % rax , - 8 (% rbp ) jl . L 3 9 . L 2 5 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq 4 8 (% rbp ), % rdx testq % rax , % rax js . L 2 7 cmpq % rdx , % rax jl . L 4 0 . L 2 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq 4 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) subq $ 1 , - 3 2 (% rbp ) . L 1 5 : . LBE 1 6 : . LBE 1 4 : . LBE 5 : . LBB 1 7 : subq $ 1 , - 8 (% rbp ) . L 2 : . LBE 1 7 : cmpq $ 0 , - 8 (% rbp ) jns . L 4 2 . LBE 3 : . LBE 2 : leave ret
. LFB 0 : leaq - 9 5 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 9 movl $ 9 5 2 , % r 1 0 d movl $ 7 2 , % r 1 1 d call __morestack . LVL 0 : ret . L 7 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 0 4 , % rsp movq $ 0 , - 5 6 (% rbp ) . LBB 2 : . LBB 3 : leaq 4 0 (% rbp ), % rax movl $ 2 4 , % edx movq % rax , % rsi leaq 1 6 (% rbp ), % rdi call memcmp @ PLT testl % eax , % eax jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax jmp . L 5 7 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : movq $ 0 , - 6 4 (% rbp ) . LBB 7 : . LBB 8 : . LBB 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 8 6 4 (% rbp ) movq % rdx , - 8 5 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 4 8 (% rbp ) movl $ 3 , % esi movl $ 0 , % eax . LBE 9 : jmp . L 4 . L 7 3 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : testq % rax , % rax js . L 5 cmpq $ 2 , % rax jg . L 5 movq - 8 6 4 (% rbp ,% rax , 8 ), % rdx . LBE 1 2 : . LBB 1 3 : movq % rdx , - 6 4 (% rbp ) . LBE 1 3 : . LBB 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 6 4 (% rbp ), % rdx shrq $ 6 3 , % rdx movl % edx , % ecx xorl $ 1 , % ecx testb % cl , % cl jne . L 6 jmp . L 7 . L 5 : . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBB 2 1 : movl $ 3 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 2 1 : . LBB 2 2 : . LBB 2 0 : . LBB 1 8 : . LBB 1 7 : cmpq $ 9 , - 6 4 (% rbp ) setg % dl . L 7 : . LBE 1 7 : . LBE 1 8 : testb % dl , % dl je . L 8 . LBB 1 9 : leaq string .. d (% rip ), % rax movq % rax , - 9 4 4 (% rbp ) leaq go .. C 6 (% rip ), % rax movq % rax , - 9 3 6 (% rbp ) movq - 9 4 4 (% rbp ), % rax movq - 9 3 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . gopanic @ PLT . L 8 : . LBE 1 9 : . LBE 2 0 : . LBE 2 2 : . LBE 1 1 : . LBB 2 3 : addq $ 1 , % rax . L 4 : . LBE 2 3 : cmpq % rsi , % rax jl . L 7 3 . LBE 8 : . LBE 7 : . LBE 6 : . LBB 2 4 : movq $ 0 , - 7 2 (% rbp ) . LBB 2 5 : . LBB 2 6 : . LBB 2 7 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 8 3 2 (% rbp ) movq % rdx , - 8 2 4 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 8 1 6 (% rbp ) movl $ 3 , % esi movl $ 0 , % eax . LBE 2 7 : jmp . L 1 1 . L 7 4 : . LBB 2 8 : nop . LBE 2 8 : . LBB 2 9 : . LBB 3 0 : testq % rax , % rax js . L 1 2 cmpq $ 2 , % rax jg . L 1 2 movq - 8 3 2 (% rbp ,% rax , 8 ), % rdx . LBE 3 0 : . LBB 3 1 : movq % rdx , - 7 2 (% rbp ) . LBE 3 1 : . LBB 3 2 : . LBB 3 3 : . LBB 3 4 : movq - 7 2 (% rbp ), % rdx shrq $ 6 3 , % rdx movl % edx , % ecx xorl $ 1 , % ecx testb % cl , % cl jne . L 1 3 jmp . L 1 4 . L 1 2 : . LBE 3 4 : . LBE 3 3 : . LBE 3 2 : . LBB 3 9 : movl $ 3 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : . LBE 3 9 : . LBB 4 0 : . LBB 3 8 : . LBB 3 6 : . LBB 3 5 : cmpq $ 9 , - 7 2 (% rbp ) setg % dl . L 1 4 : . LBE 3 5 : . LBE 3 6 : testb % dl , % dl je . L 1 5 . LBB 3 7 : leaq string .. d (% rip ), % r 1 4 leaq go .. C 7 (% rip ), % r 1 5 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . gopanic @ PLT . L 1 5 : . LBE 3 7 : . LBE 3 8 : . LBE 4 0 : . LBE 2 9 : . LBB 4 1 : addq $ 1 , % rax . L 1 1 : . LBE 4 1 : cmpq % rsi , % rax jl . L 7 4 . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : leaq - 8 0 0 (% rbp ), % rdx movl $ 0 , % eax movl $ 3 0 , % ecx movq % rdx , % rdi rep stosq leaq - 8 0 0 (% rbp ), % rax movq % rax , - 8 9 6 (% rbp ) movq $ 1 0 , - 8 8 8 (% rbp ) movq $ 1 0 , - 8 8 0 (% rbp ) . LBB 4 2 : movq $ 0 , - 8 0 (% rbp ) . LBB 4 3 : . LBB 4 4 : . LBB 4 5 : movq - 8 9 6 (% rbp ), % rax movq - 8 8 8 (% rbp ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq - 8 8 0 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) movq - 5 5 2 (% rbp ), % r 1 5 movl $ 0 , % ebx . LBE 4 5 : jmp . L 1 8 . L 7 6 : . LBB 4 6 : nop . LBE 4 6 : . LBB 4 7 : movq % rbx , - 8 0 (% rbp ) . LBB 4 8 : movl $ 1 0 , % edx movl $ 1 0 , % esi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 8 8 8 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 1 9 cmpq % rax , - 8 0 (% rbp ) jl . L 6 2 . L 1 9 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 2 : movq - 8 9 6 (% rbp ), % rsi movq - 8 0 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 5 2 8 (% rbp ) movq $ 1 0 , - 5 2 0 (% rbp ) movq $ 1 0 , - 5 1 2 (% rbp ) movq - 5 2 0 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 5 1 2 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 1 . LBB 4 9 : movq - 5 2 8 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 2 2 . L 2 1 : . LBE 4 9 : . LBB 5 0 : movq - 5 2 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 2 : . LBE 5 0 : . LBB 5 1 : movq $ 0 , - 1 2 0 (% rbp ) . LBB 5 2 : movq - 8 8 8 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 2 3 cmpq % rax , - 8 0 (% rbp ) jl . L 6 3 . L 2 3 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 3 : movq - 8 9 6 (% rbp ), % rcx movq - 8 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 8 0 (% rbp ) . LBB 5 3 : . LBB 5 4 : movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 5 6 (% rbp ), % rax movq % rax , - 9 4 4 (% rbp ) movl $ 0 , % r 1 4 d . LBE 5 4 : jmp . L 2 5 . L 7 5 : . LBB 5 5 : nop . LBE 5 5 : . LBB 5 6 : movq % r 1 4 , - 1 2 0 (% rbp ) . LBB 5 7 : movl $ 1 0 , % edx movl $ 1 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rsi movq - 8 8 8 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 2 6 cmpq % rax , - 8 0 (% rbp ) jl . L 6 4 . L 2 6 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 4 : movq - 8 9 6 (% rbp ), % rcx movq - 8 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 2 4 (% rbp ), % rax cmpq $ 0 , - 1 2 0 (% rbp ) js . L 2 8 cmpq % rax , - 1 2 0 (% rbp ) jge . L 2 8 movq - 4 3 2 (% rbp ), % rcx movq - 1 2 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rcx , % rax movq % rsi , - 4 0 0 (% rbp ) movq $ 1 0 , - 3 9 2 (% rbp ) movq $ 1 0 , - 3 8 4 (% rbp ) movq - 3 9 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 3 8 4 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 2 9 jmp . L 6 5 . L 2 8 : movq - 1 2 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : . LBB 5 8 : movq - 4 0 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 3 1 . L 6 5 : . LBE 5 8 : . LBB 5 9 : movq - 4 0 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 1 : . LBE 5 9 : . LBE 5 7 : . LBE 5 6 : . LBB 6 0 : addq $ 1 , % r 1 4 . L 2 5 : . LBE 6 0 : cmpq - 9 4 4 (% rbp ), % r 1 4 jl . L 7 5 . LBE 5 3 : . LBE 5 2 : . LBE 5 1 : . LBE 4 8 : . LBE 4 7 : . LBB 6 1 : addq $ 1 , % rbx . L 1 8 : . LBE 6 1 : cmpq % r 1 5 , % rbx jl . L 7 6 . LBE 4 4 : . LBE 4 3 : . LBE 4 2 : . LBB 6 2 : movq $ 0 , - 9 2 8 (% rbp ) movq $ 0 , - 9 2 0 (% rbp ) movq $ 0 , - 9 1 2 (% rbp ) . LBB 6 3 : . LBB 6 4 : . LBB 6 5 : movq 6 4 (% rbp ), % rax movq 7 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq 8 0 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 2 8 (% rbp ), % rsi movl $ 0 , % edx . LBE 6 5 : jmp . L 3 6 . L 7 8 : . LBB 6 6 : nop . LBE 6 6 : . LBB 6 7 : . LBB 6 8 : movq - 3 2 8 (% rbp ), % rax testq % rdx , % rdx js . L 3 7 cmpq % rax , % rdx jge . L 3 7 movq - 3 3 6 (% rbp ), % rcx movq % rdx , % rdi movq % rdi , % rax addq % rax , % rax addq % rdi , % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 3 6 8 (% rbp ) movq % rbx , - 3 6 0 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 3 5 2 (% rbp ) . LBE 6 8 : . LBB 6 9 : movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , - 3 0 4 (% rbp ) movq % rbx , - 2 9 6 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , - 9 2 8 (% rbp ) movq % rbx , - 9 2 0 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 9 1 2 (% rbp ) . LBE 6 9 : . LBB 7 0 : . LBB 7 1 : movq $ 0 , - 8 8 (% rbp ) . LBB 7 2 : . LBB 7 3 : . LBB 7 4 : movq - 9 2 8 (% rbp ), % rcx movq - 9 2 0 (% rbp ), % rbx movq % rcx , - 2 7 2 (% rbp ) movq % rbx , - 2 6 4 (% rbp ) movq - 9 1 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movl $ 3 , % r 8 d movl $ 0 , % eax . LBE 7 4 : jmp . L 3 8 . L 3 7 : . LBE 7 3 : . LBE 7 2 : . LBE 7 1 : . LBE 7 0 : . LBB 9 2 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 7 : . LBE 9 2 : . LBB 9 3 : . LBB 9 1 : . LBB 9 0 : . LBB 8 9 : . LBB 7 5 : nop . LBE 7 5 : . LBB 7 6 : . LBB 7 7 : testq % rax , % rax js . L 3 9 cmpq $ 2 , % rax jg . L 3 9 movq - 2 7 2 (% rbp ,% rax , 8 ), % rcx . LBE 7 7 : . LBB 7 8 : movq % rcx , - 8 8 (% rbp ) . LBE 7 8 : . LBB 7 9 : . LBB 8 0 : . LBB 8 1 : movq - 8 8 (% rbp ), % rcx shrq $ 6 3 , % rcx movl % ecx , % edi xorl $ 1 , % edi testb % dil , % dil jne . L 4 0 jmp . L 4 1 . L 3 9 : . LBE 8 1 : . LBE 8 0 : . LBE 7 9 : . LBB 8 6 : movl $ 3 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : . LBE 8 6 : . LBB 8 7 : . LBB 8 5 : . LBB 8 3 : . LBB 8 2 : cmpq $ 9 , - 8 8 (% rbp ) setg % cl . L 4 1 : . LBE 8 2 : . LBE 8 3 : testb % cl , % cl je . L 4 2 . LBB 8 4 : leaq string .. d (% rip ), % r 1 2 leaq go .. C 1 4 (% rip ), % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . gopanic @ PLT . L 4 2 : . LBE 8 4 : . LBE 8 5 : . LBE 8 7 : . LBE 7 6 : . LBB 8 8 : addq $ 1 , % rax . L 3 8 : . LBE 8 8 : cmpq % r 8 , % rax jl . L 7 7 . LBE 8 9 : . LBE 9 0 : . LBE 9 1 : movq - 9 2 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 9 2 0 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) movq - 9 1 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 8 8 8 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 4 5 cmpq % rax , - 9 6 (% rbp ) jl . L 6 9 . L 4 5 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 9 : movq - 8 9 6 (% rbp ), % rdi movq - 9 6 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdi , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 2 4 0 (% rbp ) movq % rbx , - 2 3 2 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax cmpq $ 0 , - 1 0 4 (% rbp ) js . L 4 7 cmpq % rax , - 1 0 4 (% rbp ) jge . L 4 7 movq - 2 4 0 (% rbp ), % rdi movq - 1 0 4 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdi , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 2 0 8 (% rbp ) movq % rbx , - 2 0 0 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax cmpq $ 0 , - 1 1 2 (% rbp ) jns . L 4 8 jmp . L 4 9 . L 4 7 : movq - 1 0 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : cmpq % rax , - 1 1 2 (% rbp ) jge . L 4 9 movq - 2 0 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq $- 1 , (% rax ) . LBE 9 3 : . LBE 6 7 : . LBB 9 5 : addq $ 1 , % rdx jmp . L 3 6 . L 4 9 : . LBE 9 5 : . LBB 9 6 : . LBB 9 4 : movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : . LBE 9 4 : . LBE 9 6 : cmpq % rsi , % rdx jl . L 7 8 . LBE 6 4 : . LBE 6 3 : . LBE 6 2 : pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) pushq - 8 8 0 (% rbp ) pushq - 8 8 8 (% rbp ) pushq - 8 9 6 (% rbp ) call go . day 3 1 3 . bfs addq $ 4 8 , % rsp . LBB 9 7 : movq 4 0 (% rbp ), % rax movq - 8 8 8 (% rbp ), % rdx testq % rax , % rax js . L 5 2 cmpq % rdx , % rax jl . L 7 1 . L 5 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 1 : movq - 8 9 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) movq 4 8 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx testq % rax , % rax js . L 5 4 cmpq % rdx , % rax jl . L 7 2 . L 5 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 2 : movq - 1 7 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) movq 5 6 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx testq % rax , % rax js . L 5 6 cmpq % rdx , % rax jge . L 5 6 movq - 1 4 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax subq $ 1 , % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax jmp . L 5 7 . L 5 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 7 : . LBE 9 7 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 9 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 9 movl $ 3 9 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 9 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 3 7 6 , % rsp movq % rdi , - 3 7 6 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 2 : call runtime . makemap_small @ PLT movq % rax , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 3 : movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : leaq - 3 6 8 (% rbp ), % rdx movq - 3 7 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 6 : jmp . L 2 . L 1 8 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 3 6 8 (% rbp ), % rax movq (% rax ), % rdx movq - 3 6 0 (% rbp ), % rax movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rdx , - 4 8 (% rbp ) movq % rax , - 5 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 4 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . LBB 1 2 : movb $ 0 , - 8 1 (% rbp ) . LBB 1 3 : movq - 4 8 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) leaq - 2 7 2 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movl % edx , % eax movb % al , - 8 1 (% rbp ) . LBE 1 3 : movzbl - 8 1 (% rbp ), % eax xorl $ 1 , % eax testb % al , % al je . L 3 . LBB 1 4 : . LBB 1 5 : movq - 4 8 (% rbp ), % rax movq % rax , - 2 6 4 (% rbp ) call runtime . makemap_small @ PLT movq % rax , % rbx leaq - 2 6 4 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 4 . LBB 1 6 : movq % rbx , (% rax ) . LBE 1 6 : jmp . L 3 . L 4 : . LBB 1 7 : movq % rbx , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 : . LBE 1 7 : . LBE 1 5 : . LBE 1 4 : . LBE 1 2 : . LBB 1 8 : movq $ 0 , - 9 6 (% rbp ) . LBB 1 9 : . LBB 2 0 : . LBB 2 1 : leaq - 2 5 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 2 1 : jmp . L 5 . L 1 7 : . LBB 2 2 : nop . LBE 2 2 : . LBB 2 3 : . LBB 2 4 : movq - 2 5 6 (% rbp ), % rax movq (% rax ), % rax . LBE 2 4 : movq % rax , - 9 6 (% rbp ) . LBB 2 5 : . LBB 2 6 : movb $ 0 , - 9 7 (% rbp ) . LBB 2 7 : movq - 9 6 (% rbp ), % rax movq % rax , - 1 5 2 (% rbp ) leaq - 1 5 2 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movl % edx , % eax movb % al , - 9 7 (% rbp ) . LBE 2 7 : movzbl - 9 7 (% rbp ), % eax xorl $ 1 , % eax testb % al , % al je . L 6 . LBB 2 8 : . LBB 2 9 : movq - 9 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) call runtime . makemap_small @ PLT movq % rax , % rbx leaq - 1 4 4 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 7 . LBB 3 0 : movq % rbx , (% rax ) . LBE 3 0 : jmp . L 6 . L 7 : . LBB 3 1 : movq % rbx , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 : . LBE 3 1 : . LBE 2 9 : . LBE 2 8 : . LBE 2 6 : . LBB 3 2 : movq - 4 0 (% rbp ), % rax movq - 4 8 (% rbp ), % rdx movq - 9 6 (% rbp ), % rcx movq % rcx , - 1 3 6 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) leaq - 1 2 0 (% rbp ), % rdx movq (% rdx ), % rdx movq % rax , % rsi leaq type .. map . 6 int . 7 map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT leaq - 1 3 6 (% rbp ), % rdx movq (% rdx ), % rdx movq (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT . LBE 3 2 : . LBB 3 3 : movq - 4 0 (% rbp ), % rax movq - 9 6 (% rbp ), % rdx movq - 4 8 (% rbp ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq % rdx , - 1 1 2 (% rbp ) leaq - 1 1 2 (% rbp ), % rdx movq (% rdx ), % rdx movq % rax , % rsi leaq type .. map . 6 int . 7 map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT leaq - 1 2 8 (% rbp ), % rdx movq (% rdx ), % rdx movq (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT . LBE 3 3 : . LBE 2 5 : . LBE 2 3 : . LBB 3 4 : leaq - 2 5 6 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 5 : . LBE 3 4 : movq - 2 5 6 (% rbp ), % rax testq % rax , % rax jne . L 1 7 . LBE 2 0 : . LBE 1 9 : . LBE 1 8 : . LBE 1 1 : . LBE 8 : . LBB 3 5 : leaq - 3 6 8 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 2 : . LBE 3 5 : movq - 3 6 8 (% rbp ), % rax testq % rax , % rax jne . L 1 8 . LBE 5 : . LBE 4 : . LBE 3 : cmpq $ 0 , - 4 0 (% rbp ) je . L 1 2 movq - 4 0 (% rbp ), % rax movq (% rax ), % rax jmp . L 1 3 . L 1 2 : movl $ 0 , % eax . L 1 3 : addq $ 1 , % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rdx movq - 2 4 (% rbp ), % rsi movq - 4 0 (% rbp ), % rax movl $ 0 , % ecx movq % rax , % rdi call go . day 3 4 4 . dfs movq % rax , % rcx movq % rcx , - 7 2 (% rbp ) movq % rdx , % rax movq % rax , - 8 0 (% rbp ) . LBB 3 6 : movq - 8 0 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . LBE 3 6 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 8 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 8 movl $ 8 3 4 4 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 3 1 2 , % rsp movq % rdi , - 8 3 2 8 (% rbp ) movq $ 0 , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) . LBB 2 : leaq - 8 3 2 0 (% rbp ), % rdx movl $ 0 , % eax movl $ 1 0 0 1 , % ecx movq % rdx , % rdi rep stosq . LBB 3 : movq $ 0 , - 4 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rcx movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 4 3 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 3 2 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 9 : . LBB 1 0 : movq % rdx , - 4 8 (% rbp ) . LBE 1 0 : . LBB 1 1 : cmpq $ 0 , - 4 8 (% rbp ) jns . L 4 jmp . L 5 . L 3 : . LBE 1 1 : . LBB 1 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 2 : . LBB 1 3 : cmpq $ 1 0 0 0 , - 4 8 (% rbp ) jg . L 5 cmpq $ 0 , - 4 8 (% rbp ) jns . L 6 jmp . L 7 . L 5 : movq - 4 8 (% rbp ), % rax movl $ 1 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 : cmpq $ 1 0 0 0 , - 4 8 (% rbp ) jg . L 7 movq - 4 8 (% rbp ), % rdx movq - 8 3 2 0 (% rbp ,% rdx , 8 ), % rdx leaq 1 (% rdx ), % rsi movq - 4 8 (% rbp ), % rdx movq % rsi , - 8 3 2 0 (% rbp ,% rdx , 8 ) . LBE 1 3 : . LBE 8 : . LBB 1 5 : addq $ 1 , % rax jmp . L 2 . L 7 : . LBE 1 5 : . LBB 1 6 : . LBB 1 4 : movq - 4 8 (% rbp ), % rax movl $ 1 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 4 : . LBE 1 6 : cmpq % rcx , % rax jl . L 4 3 . LBE 5 : . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq % rbx , - 2 8 8 (% rbp ) . LBB 1 7 : movq $ 0 , - 5 6 (% rbp ) . LBB 1 8 : . LBB 1 9 : . LBB 2 0 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 2 0 : jmp . L 1 0 . L 4 5 : . LBB 2 1 : nop . LBE 2 1 : . LBB 2 2 : . LBB 2 3 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 1 1 cmpq % rax , % rbx jge . L 1 1 movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 2 3 : . LBB 2 4 : movq % rax , - 5 6 (% rbp ) . LBE 2 4 : . LBB 2 5 : . LBB 2 6 : . LBB 2 7 : jmp . L 1 2 . L 1 1 : . LBE 2 7 : . LBE 2 6 : . LBE 2 5 : . LBB 3 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : . LBE 3 4 : . LBB 3 5 : . LBB 3 3 : . LBB 3 2 : . LBB 2 8 : nop . LBE 2 8 : . LBB 2 9 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 3 . LBB 3 0 : movq - 1 7 6 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 3 0 : jmp . L 1 4 . L 1 3 : . LBB 3 1 : movq - 1 7 6 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 1 4 : . LBE 3 1 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 5 6 (% rbp ), % rax movq % rax , (% rdx ) cmpq $ 0 , - 5 6 (% rbp ) js . L 1 5 cmpq $ 1 0 0 0 , - 5 6 (% rbp ) jg . L 1 5 cmpq $ 0 , - 5 6 (% rbp ) jns . L 1 6 jmp . L 1 7 . L 1 5 : movq - 5 6 (% rbp ), % rax movl $ 1 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : cmpq $ 1 0 0 0 , - 5 6 (% rbp ) jg . L 1 7 movq - 5 6 (% rbp ), % rax movq - 8 3 2 0 (% rbp ,% rax , 8 ), % rax leaq - 1 (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rdx , - 8 3 2 0 (% rbp ,% rax , 8 ) jmp . L 1 2 . L 1 7 : movq - 5 6 (% rbp ), % rax movl $ 1 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : . LBE 2 9 : cmpq $ 0 , - 5 6 (% rbp ) js . L 1 8 cmpq $ 1 0 0 0 , - 5 6 (% rbp ) jg . L 1 8 movq - 5 6 (% rbp ), % rax movq - 8 3 2 0 (% rbp ,% rax , 8 ), % rax testq % rax , % rax jg . L 4 4 jmp . L 3 9 . L 1 8 : movq - 5 6 (% rbp ), % rax movl $ 1 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : . LBE 3 2 : . LBE 3 3 : . LBE 3 5 : . LBE 2 2 : . LBB 3 6 : addq $ 1 , % rbx . L 1 0 : . LBE 3 6 : cmpq % r 1 3 , % rbx jl . L 4 5 . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBB 3 7 : movq $ 0 , - 4 0 (% rbp ) . LBB 3 8 : jmp . L 2 4 . L 4 7 : . LBB 3 9 : nop . LBE 3 9 : . LBB 4 0 : . LBB 4 1 : . LBB 4 2 : jmp . L 2 5 . L 4 6 : . LBB 4 3 : nop . LBE 4 3 : . LBB 4 4 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 6 . LBB 4 5 : movq - 1 4 4 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 4 5 : jmp . L 2 7 . L 2 6 : . LBB 4 6 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 2 7 : . LBE 4 6 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 4 0 (% rbp ), % rax movq % rax , (% rdx ) cmpq $ 0 , - 4 0 (% rbp ) js . L 2 8 cmpq $ 1 0 0 0 , - 4 0 (% rbp ) jg . L 2 8 cmpq $ 0 , - 4 0 (% rbp ) jns . L 2 9 jmp . L 3 0 . L 2 8 : movq - 4 0 (% rbp ), % rax movl $ 1 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : cmpq $ 1 0 0 0 , - 4 0 (% rbp ) jg . L 3 0 movq - 4 0 (% rbp ), % rax movq - 8 3 2 0 (% rbp ,% rax , 8 ), % rax leaq - 1 (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rdx , - 8 3 2 0 (% rbp ,% rax , 8 ) jmp . L 2 5 . L 3 0 : movq - 4 0 (% rbp ), % rax movl $ 1 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : . LBE 4 4 : cmpq $ 0 , - 4 0 (% rbp ) js . L 3 1 cmpq $ 1 0 0 0 , - 4 0 (% rbp ) jg . L 3 1 movq - 4 0 (% rbp ), % rax movq - 8 3 2 0 (% rbp ,% rax , 8 ), % rax testq % rax , % rax jg . L 4 6 jmp . L 4 1 . L 3 1 : movq - 4 0 (% rbp ), % rax movl $ 1 0 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : . LBE 4 2 : . LBE 4 1 : . LBE 4 0 : . LBB 4 7 : addq $ 1 , - 4 0 (% rbp ) . L 2 4 : . LBE 4 7 : cmpq $ 1 0 0 0 , - 4 0 (% rbp ) jle . L 4 7 . LBE 3 8 : . LBE 3 7 : . LBB 4 8 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 8 3 2 8 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 5 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 8 : . LBE 2 : movq - 8 3 2 8 (% rbp ), % rax addq $ 8 3 1 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 7 movl $ 1 8 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 4 4 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movb $ 0 , - 4 9 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 string . 7 struct . 4 . 5 (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 6 4 (% rbp ) . LBB 3 : movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 3 4 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 1 0 4 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapassign_faststr @ PLT . LBE 1 2 : . LBE 1 1 : . LBE 8 : . LBB 1 4 : addq $ 1 , % rbx jmp . L 2 . L 3 : . LBE 1 4 : . LBB 1 5 : . LBB 1 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 3 : . LBE 1 5 : cmpq % r 1 4 , % rbx jl . L 3 4 . LBE 5 : . LBE 4 : . LBE 3 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq bool .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 4 4 (% rbp ) movq % rbx , - 1 3 6 (% rbp ) movq % rbx , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax testq % rax , % rax jg . L 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 6 : movq - 1 4 4 (% rbp ), % rax movb $ 1 , (% rax ) . LBB 1 6 : movq $ 1 , - 4 0 (% rbp ) . LBB 1 7 : jmp . L 7 . L 3 6 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : . LBB 2 0 : movq $ 0 , - 4 8 (% rbp ) . LBB 2 1 : jmp . L 8 . L 3 5 : . LBB 2 2 : nop . LBE 2 2 : . LBB 2 3 : . LBB 2 4 : movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 9 cmpq % rax , - 4 8 (% rbp ) jl . L 2 8 . L 9 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq - 1 4 4 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax testb % al , % al je . L 1 1 . LBB 2 5 : . LBB 2 6 : movb $ 0 , - 7 3 (% rbp ) . LBB 2 7 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 2 cmpq % rax , - 4 0 (% rbp ) jg . L 1 2 cmpq $ 0 , - 4 8 (% rbp ) jns . L 1 3 jmp . L 1 4 . L 1 2 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAlen @ PLT . L 1 3 : movq - 4 8 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jg . L 1 4 movq - 1 7 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jne . L 1 5 jmp . L 2 9 . L 1 4 : movq - 4 0 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 1 5 : movq - 4 8 (% rbp ), % rax jmp . L 1 7 . L 2 9 : movl $ 0 , % eax . L 1 7 : addq % rdx , % rax movq % rax , % r 1 2 movq - 4 0 (% rbp ), % rax subq - 4 8 (% rbp ), % rax movq % rax , % r 1 3 movq - 6 4 (% rbp ), % rax movq % r 1 2 , % rdx movq % r 1 3 , % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapaccess 2 _faststr @ PLT movl % edx , % eax movb % al , - 7 3 (% rbp ) . LBE 2 7 : cmpb $ 0 , - 7 3 (% rbp ) je . L 1 1 . LBB 2 8 : movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 8 cmpq % rax , - 4 0 (% rbp ) jl . L 3 0 . L 1 8 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq - 1 4 4 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax movb $ 1 , (% rax ) jmp . L 2 0 . L 1 1 : . LBE 2 8 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBE 2 3 : . LBB 2 9 : addq $ 1 , - 4 8 (% rbp ) . L 8 : . LBE 2 9 : movq - 4 8 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jl . L 3 5 . L 2 0 : . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBB 3 0 : addq $ 1 , - 4 0 (% rbp ) . L 7 : . LBE 3 0 : movq - 7 2 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 4 0 (% rbp ) jl . L 3 6 . LBE 1 7 : . LBE 1 6 : . LBB 3 1 : movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 2 4 cmpq % rax , - 7 2 (% rbp ) jl . L 3 3 . L 2 4 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq - 1 4 4 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 4 9 (% rbp ) movzbl - 4 9 (% rbp ), % eax . LBE 3 1 : . LBE 2 : addq $ 1 4 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 5 movl $ 1 0 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 5 : pushq % rbp movq % rsp , % rbp subq $ 9 6 , % rsp movq $ 0 , - 8 0 (% rbp ) movq $ 0 , - 7 2 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rcx movq % rcx , - 4 8 (% rbp ) . LBB 3 : cmpq $ 0 , - 4 8 (% rbp ) jg . L 2 . LBB 4 : . LBB 5 : leaq . LC 0 (% rip ), % rax movl $ 0 , % edx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx jmp . L 3 2 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 8 8 (% rbp ), % rax movq % rax , - 8 (% rbp ) . LBB 6 : movq $ 1 , - 2 4 (% rbp ) . LBB 7 : jmp . L 5 . L 4 1 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 6 cmpq % rax , - 2 4 (% rbp ) jl . L 3 3 . L 6 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rax cmpq % rax , - 8 (% rbp ) jle . L 8 . LBB 1 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 9 cmpq % rax , - 2 4 (% rbp ) jl . L 3 4 . L 9 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) . L 8 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 1 2 : addq $ 1 , - 2 4 (% rbp ) . L 5 : . LBE 1 2 : movq - 2 4 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 4 1 . LBE 7 : . LBE 6 : movq $ 0 , - 1 6 (% rbp ) . L 1 3 : . LBB 1 3 : movq $ 0 , - 3 2 (% rbp ) . LBB 1 4 : jmp . L 1 4 . L 4 4 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : movq - 8 8 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 5 cmpq % rax , - 3 2 (% rbp ) jge . L 1 5 movq - 9 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 4 9 (% rbp ) . LBB 1 7 : movq $ 1 , - 4 0 (% rbp ) . LBB 1 8 : jmp . L 1 6 . L 1 5 : . LBE 1 8 : . LBE 1 7 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : . LBB 2 8 : . LBB 2 6 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : . LBB 2 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 7 cmpq % rax , - 4 0 (% rbp ) jl . L 3 6 . L 1 7 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % rcx cmpq $ 0 , - 3 2 (% rbp ) js . L 1 9 cmpq % rcx , - 3 2 (% rbp ) jge . L 1 9 movq % rax , % rdx movq - 3 2 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb % al , - 4 9 (% rbp ) jne . L 4 2 jmp . L 3 7 . L 1 9 : movq - 3 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : . LBE 2 1 : . LBE 2 0 : . LBB 2 4 : addq $ 1 , - 4 0 (% rbp ) . L 1 6 : . LBE 2 4 : movq - 4 0 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 4 3 . LBE 2 6 : . LBE 2 8 : addq $ 1 , - 1 6 (% rbp ) . LBE 1 6 : . LBB 3 0 : addq $ 1 , - 3 2 (% rbp ) . L 1 4 : . LBE 3 0 : movq - 3 2 (% rbp ), % rax cmpq - 8 (% rbp ), % rax jl . L 4 4 jmp . L 2 2 . L 4 2 : . LBB 3 1 : . LBB 2 9 : . LBB 2 7 : . LBB 2 5 : . LBB 2 3 : . LBB 2 2 : nop . L 2 2 : . LBE 2 2 : . LBE 2 3 : . LBE 2 5 : . LBE 2 7 : . LBE 2 9 : . LBE 3 1 : . LBE 1 4 : . LBE 1 3 : . LBB 3 2 : movl $ 0 , % eax movq - 8 8 (% rbp ), % rdx cmpq $ 0 , - 1 6 (% rbp ) js . L 2 6 cmpq % rdx , - 1 6 (% rbp ) jg . L 2 6 testq % rax , % rax jns . L 2 7 jmp . L 2 8 . L 2 6 : movq - 1 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAlen @ PLT . L 2 7 : cmpq - 1 6 (% rbp ), % rax jg . L 2 8 movq - 9 6 (% rbp ), % rdx cmpq % rax , - 1 6 (% rbp ) jne . L 2 9 jmp . L 4 0 . L 2 8 : movq - 1 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 2 9 : movq % rax , % rcx jmp . L 3 1 . L 4 0 : movl $ 0 , % ecx . L 3 1 : addq % rdx , % rcx movq - 1 6 (% rbp ), % rdx subq % rax , % rdx movq % rcx , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx . L 3 2 : . LBE 3 2 : . LBE 2 : leave ret
. LFB 0 : leaq - 1 0 0 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 0 movl $ 1 0 0 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 5 2 , % rsp movq % rdi , - 8 2 4 (% rbp ) leaq . LC 1 2 (% rip ), % rax movl $ 1 , % edx movq % rax , - 7 5 2 (% rbp ) movq % rdx , - 7 4 4 (% rbp ) leaq . LC 1 2 (% rip ), % rcx movl $ 1 , % ebx movq % rcx , - 7 3 6 (% rbp ) movq % rbx , - 7 2 8 (% rbp ) leaq . LC 1 2 (% rip ), % r 8 movl $ 1 , % r 9 d movq % r 8 , - 7 2 0 (% rbp ) movq % r 9 , - 7 1 2 (% rbp ) leaq . LC 1 3 (% rip ), % r 1 0 movl $ 1 , % r 1 1 d movq % r 1 0 , - 7 0 4 (% rbp ) movq % r 1 1 , - 6 9 6 (% rbp ) leaq . LC 1 4 (% rip ), % r 1 2 movl $ 1 , % r 1 3 d movq % r 1 2 , - 6 8 8 (% rbp ) movq % r 1 3 , - 6 8 0 (% rbp ) leaq . LC 1 5 (% rip ), % rax movq % rax , - 9 4 4 (% rbp ) movq $ 1 , - 9 3 6 (% rbp ) movdqa - 9 4 4 (% rbp ), % xmm 0 movups % xmm 0 , - 6 7 2 (% rbp ) leaq . LC 1 6 (% rip ), % rax movq % rax , - 9 2 8 (% rbp ) movq $ 1 , - 9 2 0 (% rbp ) movdqa - 9 2 8 (% rbp ), % xmm 1 movups % xmm 1 , - 6 5 6 (% rbp ) movq % rax , - 9 1 2 (% rbp ) movq $ 1 , - 9 0 4 (% rbp ) movdqa - 9 1 2 (% rbp ), % xmm 2 movups % xmm 2 , - 6 4 0 (% rbp ) leaq . LC 1 7 (% rip ), % rax movq % rax , - 8 9 6 (% rbp ) movq $ 2 , - 8 8 8 (% rbp ) movdqa - 8 9 6 (% rbp ), % xmm 3 movups % xmm 3 , - 6 2 4 (% rbp ) leaq . LC 1 8 (% rip ), % rax movq % rax , - 8 8 0 (% rbp ) movq $ 3 , - 8 7 2 (% rbp ) movdqa - 8 8 0 (% rbp ), % xmm 4 movups % xmm 4 , - 6 0 8 (% rbp ) leaq . LC 1 9 (% rip ), % rax movq % rax , - 8 6 4 (% rbp ) movq $ 3 , - 8 5 6 (% rbp ) movdqa - 8 6 4 (% rbp ), % xmm 5 movups % xmm 5 , - 5 9 2 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 8 4 8 (% rbp ) movq $ 4 , - 8 4 0 (% rbp ) movdqa - 8 4 8 (% rbp ), % xmm 6 movups % xmm 6 , - 5 7 6 (% rbp ) . LBB 2 : movq $ 0 , - 8 1 6 (% rbp ) movq $ 0 , - 8 0 8 (% rbp ) movq $ 0 , - 8 0 0 (% rbp ) movq $ 0 , - 7 9 2 (% rbp ) movq $ 0 , - 7 8 4 (% rbp ) movq $ 0 , - 7 7 6 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movl $ 4 , % r 1 2 d movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 1 9 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : testq % rbx , % rbx js . L 3 cmpq $ 3 , % rbx jg . L 3 movq % rbx , % rax addq % rax , % rax addq % rbx , % rax salq $ 4 , % rax leaq - 4 8 (% rbp ), % rdi addq % rdi , % rax subq $ 4 6 4 , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 5 6 0 (% rbp ) movq % rdi , - 5 5 2 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 5 4 4 (% rbp ) movq % rdi , - 5 3 6 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) . LBE 8 : . LBB 9 : movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 8 1 6 (% rbp ) movq % rdx , - 8 0 8 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 8 0 0 (% rbp ) movq % rdx , - 7 9 2 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 7 8 4 (% rbp ) movq % rdx , - 7 7 6 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq - 8 1 6 (% rbp ), % rdi movq - 8 0 8 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call go . problem 4 1 5 . addStrings movq % rax , - 7 6 8 (% rbp ) movq % rdx , - 7 6 0 (% rbp ) . LBB 1 1 : movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq - 7 6 0 (% rbp ), % rcx movq % rdx , % rsi cmpq % rsi , % rcx jne . L 4 jmp . L 1 7 . L 3 : . LBE 1 1 : . LBE 1 0 : . LBB 2 2 : movl $ 4 , % esi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : . LBE 2 2 : . LBB 2 3 : . LBB 2 1 : movq - 7 6 8 (% rbp ), % rcx movq % rax , % rsi cmpq % rsi , % rcx je . L 6 movq % rdx , % rcx movq % rcx , % rsi movq % rax , % rcx movq - 7 6 8 (% rbp ), % rax movq % rsi , % rdx movq % rcx , % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax je . L 6 . L 4 : . LBB 1 2 : leaq go . problem 4 1 5 .. go . problem 4 1 5 . testType .. d (% rip ), % rax movq % rax , - 9 9 2 (% rbp ) leaq go . problem 4 1 5 .. go . problem 4 1 5 . testType .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 . LBB 1 3 : movq - 2 6 4 (% rbp ), % rax movq - 2 5 6 (% rbp ), % rsi movq - 2 4 8 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 2 4 0 (% rbp ), % rsi movq - 2 3 2 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 2 2 4 (% rbp ), % rsi movq - 2 1 6 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) . LBE 1 3 : jmp . L 8 . L 7 : . LBB 1 4 : movq - 2 6 4 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq go . problem 4 1 5 .. go . problem 4 1 5 . testType .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 4 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 9 8 4 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 9 7 6 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 5 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 5 : jmp . L 1 0 . L 9 : . LBB 1 6 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 6 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 9 6 8 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 9 6 0 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 . LBB 1 7 : movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 2 . L 1 1 : . LBB 1 8 : movq - 1 6 8 (% rbp ), % rax leaq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 : . LBE 1 8 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 9 5 2 (% rbp ) leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 9 9 2 (% rbp ), % xmm 7 movups % xmm 7 , - 1 2 8 (% rbp ) movdqa - 9 7 6 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) movdqa - 9 6 0 (% rbp ), % xmm 1 movups % xmm 1 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 3 . LBB 1 9 : movq - 1 3 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) . LBE 1 9 : jmp . L 1 4 . L 1 3 : . LBB 2 0 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 4 : . LBE 2 0 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 4 movl $ 2 5 , % r 1 5 d movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rsi , % rcx movq - 8 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 6 : . LBE 1 2 : . LBE 2 1 : . LBE 2 3 : . LBE 7 : . LBB 2 4 : addq $ 1 , % rbx . L 2 : . LBE 2 4 : cmpq % r 1 2 , % rbx jl . L 1 9 . LBE 4 : . LBE 3 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 6 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 4 4 movl $ 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 2 : ret . L 3 4 4 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 5 6 , % rsp movq % rsi , % rax movq % rdi , % r 1 0 movq % r 1 0 , % rsi movq % r 1 1 , % rdi movq % rax , % rdi movq % rsi , - 4 8 (% rbp ) movq % rdi , - 4 0 (% rbp ) movq % rdx , - 6 4 (% rbp ) movq % rcx , - 5 6 (% rbp ) movb $ 0 , - 1 7 (% rbp ) . LBB 3 3 5 : . LBB 3 3 6 : . LBB 3 3 7 : movq - 4 8 (% rbp ), % rax testq % rax , % rax sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 3 4 0 . LBB 3 3 8 : movq - 6 4 (% rbp ), % rax testq % rax , % rax sete % al . L 3 4 0 : . LBE 3 3 8 : . LBE 3 3 7 : testb % al , % al je . L 3 4 1 . LBB 3 3 9 : . LBB 3 4 0 : movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq - 4 8 (% rbp ), % rdi movq - 4 0 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . efaceeq @ PLT movb % al , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax jmp . L 3 4 3 . L 3 4 1 : . LBE 3 4 0 : . LBE 3 3 9 : . LBE 3 3 6 : leaq string .. d (% rip ), % r 8 leaq go .. C 3 0 2 (% rip ), % r 9 movq % r 8 , % rcx movq % r 9 , % rbx movq % r 8 , % rax movq % r 9 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . gopanic @ PLT . L 3 4 3 : . LBE 3 3 5 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 3 movl $ 2 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 7 2 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movb $ 0 , - 1 7 (% rbp ) . LBB 2 : leaq - 2 4 0 (% rbp ), % rdx movl $ 0 , % eax movl $ 2 6 , % ecx movq % rdx , % rdi rep stosq leaq - 2 4 0 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq $ 2 6 , - 2 6 4 (% rbp ) movq $ 2 6 , - 2 5 6 (% rbp ) . LBB 3 : movl $ 0 , - 2 4 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 2 8 0 (% rbp ), % r 1 2 movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 3 1 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 8 0 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq - 2 8 8 (% rbp ), % rdx movq % rax , % rcx addq % rcx , % rdx movzbl (% rdx ), % edx movzbl % dl , % edx cmpl $ 1 2 7 , % edx jle . L 4 jmp . L 2 5 . L 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBB 1 0 : addq $ 1 , % rax . LBE 1 0 : jmp . L 6 . L 2 5 : . LBB 1 1 : movq - 2 8 8 (% rbp ), % rsi movq - 2 8 0 (% rbp ), % rcx movq % rax , % rdx movq % rsi , % rdi movq % rcx , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movl % ecx , % edx movq % rbx , % rax . L 6 : . LBE 1 1 : . LBE 9 : . LBB 1 2 : movl % edx , - 2 4 (% rbp ) . LBE 1 2 : . LBB 1 3 : movl - 2 4 (% rbp ), % edx subl $ 9 7 , % edx movq - 2 6 4 (% rbp ), % rcx testl % edx , % edx js . L 7 movslq % edx , % rsi cmpq % rsi , % rcx jle . L 7 movl - 2 4 (% rbp ), % ecx subl $ 9 7 , % ecx movq - 2 6 4 (% rbp ), % rsi testl % ecx , % ecx jns . L 8 jmp . L 9 . L 7 : movslq % edx , % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 : movslq % ecx , % rdi cmpq % rdi , % rsi jg . L 2 6 . L 9 : movslq % ecx , % rax movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq - 2 7 2 (% rbp ), % rsi movslq % ecx , % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rcx movq - 2 7 2 (% rbp ), % rsi movslq % edx , % rdx salq $ 3 , % rdx addq % rsi , % rdx addq $ 1 , % rcx movq % rcx , (% rdx ) . L 2 : . LBE 1 3 : . LBE 8 : cmpq % r 1 2 , % rax jl . L 3 1 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 4 : movl $ 0 , - 2 8 (% rbp ) . LBB 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 2 8 0 (% rbp ), % r 1 2 movl $ 0 , % eax . LBE 1 7 : jmp . L 1 3 . L 3 2 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : . LBB 2 0 : movq - 2 8 0 (% rbp ), % rdx testq % rax , % rax js . L 1 4 cmpq % rdx , % rax jge . L 1 4 movq - 2 8 8 (% rbp ), % rdx movq % rax , % rcx addq % rcx , % rdx movzbl (% rdx ), % edx movzbl % dl , % edx cmpl $ 1 2 7 , % edx jle . L 1 5 jmp . L 2 8 . L 1 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : . LBB 2 1 : addq $ 1 , % rax . LBE 2 1 : jmp . L 1 7 . L 2 8 : . LBB 2 2 : movq - 2 8 8 (% rbp ), % rsi movq - 2 8 0 (% rbp ), % rcx movq % rax , % rdx movq % rsi , % rdi movq % rcx , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movl % ecx , % edx movq % rbx , % rax . L 1 7 : . LBE 2 2 : . LBE 2 0 : . LBB 2 3 : movl % edx , - 2 8 (% rbp ) . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movl - 2 8 (% rbp ), % edx subl $ 9 7 , % edx movq - 2 6 4 (% rbp ), % rcx testl % edx , % edx js . L 1 8 movslq % edx , % rsi cmpq % rsi , % rcx jg . L 2 9 . L 1 8 : movslq % edx , % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 2 7 2 (% rbp ), % rcx movslq % edx , % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx cmpq $ 1 , % rdx jne . L 1 3 . LBB 2 6 : . LBB 2 7 : movl - 2 8 (% rbp ), % eax movb % al , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax jmp . L 2 4 . L 1 3 : . LBE 2 7 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBE 1 9 : cmpq % r 1 2 , % rax jl . L 3 2 . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBB 2 8 : movb $ 3 2 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax . L 2 4 : . LBE 2 8 : . LBE 2 : addq $ 2 7 2 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 2 8 movl $ 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 8 : ret . L 1 2 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 subq $ 4 8 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 4 8 (% rbp ) movq % rdi , - 4 0 (% rbp ) movq % rdx , - 6 4 (% rbp ) movq % rcx , - 5 6 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 1 1 4 : . LBB 1 1 5 : movq $ 0 , - 2 4 (% rbp ) . LBB 1 1 6 : jmp . L 1 1 0 . L 1 2 7 : . LBB 1 1 7 : nop . LBE 1 1 7 : . LBB 1 1 8 : . LBB 1 1 9 : movq - 5 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax leaq (% rdx ,% rax ), % rdi movq - 4 0 (% rbp ), % rax testq % rdi , % rdi js . L 1 1 1 cmpq % rax , % rdi jg . L 1 1 1 cmpq $ 0 , - 2 4 (% rbp ) jns . L 1 1 2 jmp . L 1 1 3 . L 1 1 1 : movq % rax , % rsi call runtime . goPanicSliceAlen @ PLT . L 1 1 2 : cmpq % rdi , - 2 4 (% rbp ) jg . L 1 1 3 movq - 4 8 (% rbp ), % rdx cmpq - 2 4 (% rbp ), % rdi jne . L 1 1 4 jmp . L 1 2 5 . L 1 1 3 : movq - 2 4 (% rbp ), % rax movq % rdi , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 1 1 4 : movq - 2 4 (% rbp ), % rax jmp . L 1 1 6 . L 1 2 5 : movl $ 0 , % eax . L 1 1 6 : addq % rdx , % rax movq % rax , % r 1 2 movq % rdi , % rax subq - 2 4 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 3 , % rdx movq - 5 6 (% rbp ), % rax cmpq % rax , % rdx jne . L 1 1 7 movq % r 1 2 , % rdx movq - 6 4 (% rbp ), % rax cmpq % rax , % rdx jne . L 1 1 8 movl $ 1 , % eax jmp . L 1 2 0 . L 1 1 8 : movq - 5 6 (% rbp ), % rax movq % rax , % rdx movq - 6 4 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rsi movq % rcx , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 1 2 0 . L 1 1 7 : movl $ 0 , % eax . L 1 2 0 : testb % al , % al je . L 1 2 1 . LBB 1 2 0 : . LBB 1 2 1 : movq - 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 1 2 2 . L 1 2 1 : . LBE 1 2 1 : . LBE 1 2 0 : . LBE 1 1 9 : . LBE 1 1 8 : . LBB 1 2 2 : addq $ 1 , - 2 4 (% rbp ) . L 1 1 0 : . LBE 1 2 2 : movq - 4 0 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx subq % rdx , % rax cmpq % rax , - 2 4 (% rbp ) jle . L 1 2 7 . LBE 1 1 6 : . LBE 1 1 5 : . LBB 1 2 3 : movq $- 1 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 1 2 2 : . LBE 1 2 3 : . LBE 1 1 4 : addq $ 4 8 , % rsp popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 6 0 movl $ 1 0 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 4 : ret . L 6 0 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 8 8 , % rsp movq % rdi , - 8 8 (% rbp ) pxor % xmm 0 , % xmm 0 movsd % xmm 0 , - 4 8 (% rbp ) . LBB 2 6 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 8 0 (% rbp ) movq % rbx , - 7 2 (% rbp ) movq % rbx , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rax testq % rax , % rax jg . L 2 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 9 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 3 0 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 0 : movq 1 6 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax movq (% rdx ), % rdx movq % rdx , (% rax ) . LBB 2 7 : movq $ 1 , - 3 2 (% rbp ) . LBB 2 8 : jmp . L 3 1 . L 5 8 : . LBB 2 9 : nop . LBE 2 9 : . LBB 3 0 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 2 cmpq % rax , - 3 2 (% rbp ) jl . L 5 0 . L 3 2 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 0 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 3 4 cmpq % rdx , % rax jl . L 5 1 . L 3 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 3 6 cmpq % rdx , - 3 2 (% rbp ) jl . L 5 2 . L 3 6 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : movq - 8 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rcx movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 8 0 (% rbp ), % rsi movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax addq % rcx , % rdx movq % rdx , (% rax ) . LBE 3 0 : . LBB 3 1 : addq $ 1 , - 3 2 (% rbp ) . L 3 1 : . LBE 3 1 : movq 2 4 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) jl . L 5 8 . LBE 2 8 : . LBE 2 7 : movq - 8 8 (% rbp ), % rax subq $ 1 , % rax movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 4 0 cmpq % rdx , % rax jl . L 5 4 . L 4 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : movq - 8 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax pxor % xmm 0 , % xmm 0 cvtsi 2 sdq % rax , % xmm 0 pxor % xmm 1 , % xmm 1 cvtsi 2 sdq - 8 8 (% rbp ), % xmm 1 divsd % xmm 1 , % xmm 0 movsd % xmm 0 , - 2 4 (% rbp ) . LBB 3 2 : movq - 8 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 3 3 : jmp . L 4 2 . L 5 9 : . LBB 3 4 : nop . LBE 3 4 : . LBB 3 5 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 4 3 cmpq % rax , - 4 0 (% rbp ) jl . L 5 5 . L 4 3 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 5 : movq - 4 0 (% rbp ), % rax subq - 8 8 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 4 5 cmpq % rdx , % rax jl . L 5 6 . L 4 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 6 : movq - 8 0 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq - 8 0 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax subq % rax , % rdx pxor % xmm 0 , % xmm 0 cvtsi 2 sdq % rdx , % xmm 0 pxor % xmm 1 , % xmm 1 cvtsi 2 sdq - 8 8 (% rbp ), % xmm 1 divsd % xmm 1 , % xmm 0 movq - 2 4 (% rbp ), % rax movapd % xmm 0 , % xmm 1 movq % rax , % xmm 0 call go . Solution . max movq % xmm 0 , % rax movq % rax , - 2 4 (% rbp ) . LBE 3 5 : . LBB 3 6 : addq $ 1 , - 4 0 (% rbp ) . L 4 2 : . LBE 3 6 : movq 2 4 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 5 9 . LBE 3 3 : . LBE 3 2 : . LBB 3 7 : movsd - 2 4 (% rbp ), % xmm 0 movsd % xmm 0 , - 4 8 (% rbp ) movsd - 4 8 (% rbp ), % xmm 0 movq % xmm 0 , % rax . LBE 3 7 : . LBE 2 6 : movq % rax , % xmm 0 movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 4 movl $ 2 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 4 8 , % rsp movq % rdi , - 2 3 2 (% rbp ) movq % rsi , - 2 4 0 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) . LBB 2 : movq - 2 4 0 (% rbp ), % rbx movq % rbx , % rdx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) movq % rbx , - 2 0 8 (% rbp ) movq $ 1 , - 2 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 1 3 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq - 2 4 8 (% rbp ), % rax cqto shrq $ 6 3 , % rdx addq % rdx , % rax andl $ 1 , % eax subq % rdx , % rax cmpq $ 1 , % rax jne . L 3 . LBB 8 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 . LBB 9 : movq - 1 6 0 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) . LBE 9 : jmp . L 5 . L 4 : . LBB 1 0 : movq - 1 6 0 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rdx movq % rcx , - 2 2 4 (% rbp ) movq % rax , - 2 1 6 (% rbp ) movq % rdx , - 2 0 8 (% rbp ) . L 5 : . LBE 1 0 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rax , (% rdx ) addq $ 1 , - 2 4 (% rbp ) . LBE 8 : jmp . L 6 . L 3 : . LBB 1 1 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 7 . LBB 1 2 : movq - 1 2 8 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) . LBE 1 2 : jmp . L 8 . L 7 : . LBB 1 3 : movq - 1 2 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rdx movq % rcx , - 2 2 4 (% rbp ) movq % rax , - 2 1 6 (% rbp ) movq % rdx , - 2 0 8 (% rbp ) . L 8 : . LBE 1 3 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 3 2 (% rbp ), % rax movq % rax , (% rdx ) subq $ 1 , - 3 2 (% rbp ) . L 6 : . LBE 1 1 : . LBE 7 : . LBB 1 4 : cmpq $ 1 , - 2 4 8 (% rbp ) jle . L 2 . LBB 1 5 : subq $ 1 , - 2 4 8 (% rbp ) . L 2 : . LBE 1 5 : . LBE 1 4 : . LBE 6 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jle . L 1 3 . LBE 4 : . LBE 3 : . LBB 1 6 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 2 3 2 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 6 : . LBE 2 : movq - 2 3 2 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 2 0 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 9 : ret . L 1 2 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 4 4 , % rsp movq % rdi , - 1 5 2 (% rbp ) movq % rsi , - 1 6 0 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) . LBB 1 3 3 : movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 2 4 (% rbp ) . LBB 1 3 4 : . LBB 1 3 5 : jmp . L 1 1 2 . L 1 1 9 : . LBB 1 3 6 : nop . LBE 1 3 6 : . LBB 1 3 7 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rbx movq - 2 4 (% rbp ), % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 1 3 . LBB 1 3 8 : movq - 8 0 (% rbp ), % rsi leaq - 4 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) . LBE 1 3 8 : jmp . L 1 1 4 . L 1 1 3 : . LBB 1 3 9 : movq - 8 0 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq % rcx , - 1 4 4 (% rbp ) movq % rax , - 1 3 6 (% rbp ) movq % rdx , - 1 2 8 (% rbp ) . L 1 1 4 : . LBE 1 3 9 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 2 4 (% rbp ) . L 1 1 2 : . LBE 1 3 7 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 1 1 9 . LBE 1 3 5 : . LBE 1 3 4 : . LBB 1 4 0 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 5 2 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 4 0 : . LBE 1 3 3 : movq - 1 5 2 (% rbp ), % rax addq $ 1 4 4 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
leaq - 4 5 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 4 movl $ 4 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 9 : ret . L 7 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 0 8 , % rsp movq % rdi , - 4 4 0 (% rbp ) movq $ 0 , - 4 3 2 (% rbp ) movq $ 0 , - 4 2 4 (% rbp ) movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 5 6 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 3 9 2 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 3 8 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 5 6 . LBB 6 5 : movq - 4 0 0 (% rbp ), % rsi leaq - 2 0 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 1 go . binarytree . Node (% rip ), % rsi call runtime . growslice @ PLT movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) . LBE 6 5 : jmp . L 5 7 . L 5 6 : . LBB 6 6 : movq - 4 0 0 (% rbp ), % rcx movq - 3 8 4 (% rbp ), % rdx movq % rcx , - 4 3 2 (% rbp ) movq % rax , - 4 2 4 (% rbp ) movq % rdx , - 4 1 6 (% rbp ) . L 5 7 : . LBE 6 6 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 8 . LBB 6 7 : movq - 4 4 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 6 0 . L 5 8 : . LBE 6 7 : . LBB 6 8 : movq - 4 4 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . LBE 6 8 : . LBB 6 9 : . LBB 7 0 : jmp . L 6 0 . L 7 3 : . LBB 7 1 : nop . LBE 7 1 : . LBB 7 2 : . LBB 7 3 : movq - 4 2 4 (% rbp ), % rax testq % rax , % rax jg . L 6 1 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 6 1 : movq - 4 3 2 (% rbp ), % rax movq (% rax ), % rdx movq - 4 1 6 (% rbp ), % rax testq % rax , % rax jg . L 6 2 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 6 2 : movq - 4 3 2 (% rbp ), % rcx movq - 4 1 6 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 3 , % rax addq % rcx , % rax movq % rax , - 3 6 8 (% rbp ) movq - 4 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 3 6 0 (% rbp ) movq - 4 1 6 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) . LBE 7 3 : leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq (% rdx ), % rdx movq % rdx , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , % r 1 5 leaq string .. d (% rip ), % r 1 2 leaq go .. C 4 5 (% rip ), % r 1 3 movq % r 1 4 , - 3 0 4 (% rbp ) movq % r 1 5 , - 2 9 6 (% rbp ) movq % r 1 2 , - 2 8 8 (% rbp ) movq % r 1 3 , - 2 8 0 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Print @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) . LBB 7 4 : movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax je . L 6 3 . LBB 7 5 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rbx movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 4 8 (% rbp ) leaq 1 (% rbx ), % rax movq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 6 4 . LBB 7 6 : movq - 2 7 2 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 1 go . binarytree . Node (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) . LBE 7 6 : jmp . L 6 5 . L 6 4 : . LBB 7 7 : movq - 2 7 2 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rdx movq % rcx , - 4 3 2 (% rbp ) movq % rax , - 4 2 4 (% rbp ) movq % rdx , - 4 1 6 (% rbp ) . L 6 5 : . LBE 7 7 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 6 6 . LBB 7 8 : movq - 4 4 8 (% rbp ), % rbx movq % rbx , (% rax ) jmp . L 6 3 . L 6 6 : . LBE 7 8 : . LBB 7 9 : movq - 4 4 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 3 : . LBE 7 9 : . LBE 7 5 : . LBE 7 4 : . LBB 8 0 : movq - 5 6 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax je . L 6 0 . LBB 8 1 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rbx movq - 5 6 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 4 4 8 (% rbp ) leaq 1 (% rbx ), % rax movq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 6 7 . LBB 8 2 : movq - 2 4 0 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 1 go . binarytree . Node (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) . LBE 8 2 : jmp . L 6 8 . L 6 7 : . LBB 8 3 : movq - 2 4 0 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rdx movq % rcx , - 4 3 2 (% rbp ) movq % rax , - 4 2 4 (% rbp ) movq % rdx , - 4 1 6 (% rbp ) . L 6 8 : . LBE 8 3 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 6 9 . LBB 8 4 : movq - 4 4 8 (% rbp ), % rbx movq % rbx , (% rax ) jmp . L 6 0 . L 6 9 : . LBE 8 4 : . LBB 8 5 : movq - 4 4 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 0 : . LBE 8 5 : . LBE 8 1 : . LBE 8 0 : . LBE 7 2 : movq - 4 2 4 (% rbp ), % rax testq % rax , % rax jne . L 7 3 . LBE 7 0 : . LBE 6 9 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 2 movl $ 2 8 0 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 5 6 , % rsp movq % rdi , - 2 4 8 (% rbp ) movq % rsi , - 2 5 6 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) . LBB 2 : movq 4 8 (% rbp ), % rax cmpq % rax , - 2 6 4 (% rbp ) jne . L 2 . LBB 3 : movq 4 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 4 0 (% rbp ) movq % rbx , - 2 3 2 (% rbp ) movq % rbx , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax movq 4 8 (% rbp ), % rdx cmpq % rax , % rdx cmovle % rdx , % rax leaq 0 (,% rax , 8 ), % rdx movq 4 0 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memmove @ PLT movq main . combineRes (% rip ), % rax movq 8 + main . combineRes (% rip ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 + main . combineRes (% rip ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 3 . LBB 4 : leaq main . combineRes (% rip ), % rbx movq - 2 0 8 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 6 . 7 int (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 5 : movq - 1 7 6 (% rbp ), % rax movq % rax , (% rbx ) jmp . L 5 . L 4 : . LBE 5 : . LBB 6 : movq - 1 7 6 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 5 . L 3 : . LBE 6 : . LBE 4 : . LBB 7 : movq - 2 0 8 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rdx movq % rcx , main . combineRes (% rip ) movq % rax , 8 + main . combineRes (% rip ) movq % rdx , 1 6 + main . combineRes (% rip ) . L 5 : . LBE 7 : movq main . combineRes (% rip ), % rax movq 8 + main . combineRes (% rip ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 + main . combineRes (% rip ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rdx movq % r 1 2 , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rbx movq % rcx , - 1 4 4 (% rbp ) movq % rbx , - 1 3 6 (% rbp ) movq - 2 2 4 (% rbp ), % rdx movq % rdx , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 2 8 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 6 . LBB 8 : movq - 1 4 4 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 8 : jmp . L 1 . L 6 : . LBB 9 : movq - 1 4 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 1 . L 2 : . LBE 9 : . LBE 3 : . LBE 2 : . LBB 1 0 : movq - 2 4 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . LBB 1 1 : jmp . L 9 . L 2 1 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rbx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 0 cmpq % rax , - 2 4 (% rbp ) jl . L 1 8 . L 1 0 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 2 . LBB 1 4 : movq - 1 1 2 (% rbp ), % rsi leaq - 4 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , 4 0 (% rbp ) movq % rdx , 4 8 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , 5 6 (% rbp ) . LBE 1 4 : jmp . L 1 3 . L 1 2 : . LBB 1 5 : movq - 1 1 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rcx , 4 0 (% rbp ) movq % rax , 4 8 (% rbp ) movq % rdx , 5 6 (% rbp ) . L 1 3 : . LBE 1 5 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) movq - 2 4 (% rbp ), % rax leaq 1 (% rax ), % rcx movq - 2 6 4 (% rbp ), % rdx movq - 2 5 6 (% rbp ), % rax pushq 5 6 (% rbp ) pushq 4 8 (% rbp ) pushq 4 0 (% rbp ) pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rsi movq % rcx , % rdi call main . traceBackCombine addq $ 4 8 , % rsp movq 4 8 (% rbp ), % rax leaq - 1 (% rax ), % rdi movq 5 6 (% rbp ), % rax testq % rdi , % rdi js . L 1 4 cmpq % rax , % rdi jg . L 1 4 testq % rdi , % rdi jns . L 1 5 jmp . L 1 9 . L 1 4 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 1 9 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 5 : movq 4 0 (% rbp ), % rdx movq 5 6 (% rbp ), % rax movq % rdx , 4 0 (% rbp ) movq % rdi , 4 8 (% rbp ) movq % rax , 5 6 (% rbp ) . LBE 1 3 : . LBB 1 6 : addq $ 1 , - 2 4 (% rbp ) . L 9 : . LBE 1 6 : movq - 2 4 (% rbp ), % rax cmpq - 2 5 6 (% rbp ), % rax jle . L 2 1 . L 1 : . LBE 1 1 : . LBE 1 0 : leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 5 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 1 5 : pushq % rbp movq % rsp , % rbp movq % rdi , - 4 0 (% rbp ) movq % rsi , - 4 8 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 : . LBB 3 : . LBB 4 : cmpq $ 0 , - 4 0 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 4 . LBB 5 : cmpq $ 0 , - 4 8 (% rbp ) sete % al . L 4 : . LBE 5 : . LBE 4 : testb % al , % al je . L 5 . LBB 6 : . LBB 7 : movq $ 0 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 6 . L 5 : . LBE 7 : . LBE 6 : . LBE 3 : movq - 4 0 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) . LBB 8 : . LBB 9 : jmp . L 7 . L 1 4 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : cmpq $ 0 , - 8 (% rbp ) jne . L 8 . LBB 1 3 : movq - 4 8 (% rbp ), % rax movq % rax , - 8 (% rbp ) . LBE 1 3 : jmp . L 9 . L 8 : . LBB 1 4 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) . L 9 : . LBE 1 4 : . LBE 1 2 : . LBB 1 5 : cmpq $ 0 , - 1 6 (% rbp ) jne . L 1 0 . LBB 1 6 : movq - 4 0 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) . LBE 1 6 : jmp . L 7 . L 1 0 : . LBB 1 7 : movq - 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 6 (% rbp ) . L 7 : . LBE 1 7 : . LBE 1 5 : . LBE 1 1 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jne . L 1 4 . LBE 9 : . LBE 8 : . LBB 1 8 : movq - 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 6 : . LBE 1 8 : . LBE 2 : popq % rbp ret
. LFB 0 : leaq - 4 0 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 8 0 movl $ 4 0 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 0 : pushq % rbp movq % rsp , % rbp subq $ 4 0 0 , % rsp . LBB 2 : movq $ 0 , - 8 (% rbp ) . LBB 3 : jmp . L 2 . L 7 9 : . LBB 4 : nop . LBE 4 : . LBB 5 : movq - 8 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq 2 4 (% rbp ), % rax subq - 8 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 7 2 (% rbp ) movq 2 4 (% rbp ), % rax subq - 8 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 8 0 (% rbp ) . LBB 6 : movq $ 0 , - 1 6 (% rbp ) . LBB 7 : jmp . L 3 . L 7 8 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 4 cmpq % rax , - 5 6 (% rbp ) jl . L 5 4 . L 4 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : movq 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 3 9 2 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 6 cmpq % rax , - 6 4 (% rbp ) jge . L 6 movq - 4 0 0 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 8 8 (% rbp ) . LBB 1 0 : movq - 5 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . LBB 1 1 : jmp . L 7 . L 6 : . LBE 1 1 : . LBE 1 0 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 4 : . LBB 1 7 : . LBB 1 6 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 8 cmpq % rax , - 2 4 (% rbp ) jl . L 5 5 . L 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 5 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 3 6 0 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 0 cmpq % rax , - 6 4 (% rbp ) jl . L 5 6 . L 1 0 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 6 : movq - 2 4 (% rbp ), % rax addq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 2 cmpq % rdx , % rax jl . L 5 7 . L 1 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 7 : movq 1 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 2 8 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 4 cmpq % rax , - 6 4 (% rbp ) jge . L 1 4 movq - 3 3 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq - 3 6 8 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . LBE 1 3 : . LBB 1 4 : addq $ 1 , - 2 4 (% rbp ) jmp . L 7 . L 1 4 : . LBE 1 4 : . LBB 1 5 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 : . LBE 1 5 : movq - 2 4 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jl . L 7 4 . LBE 1 6 : . LBE 1 7 : . LBB 1 8 : movq - 6 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . LBB 1 9 : jmp . L 1 7 . L 7 5 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 1 8 cmpq % rax , - 7 2 (% rbp ) jl . L 5 9 . L 1 8 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 9 : movq 1 6 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 0 cmpq % rax , - 3 2 (% rbp ) jl . L 6 0 . L 2 0 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 2 2 cmpq % rax , - 7 2 (% rbp ) jl . L 6 1 . L 2 2 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 1 : movq 1 6 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq - 2 6 4 (% rbp ), % rdx testq % rax , % rax js . L 2 4 cmpq % rdx , % rax jge . L 2 4 movq - 2 7 2 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq - 3 0 4 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . LBE 2 1 : . LBB 2 2 : addq $ 1 , - 3 2 (% rbp ) jmp . L 1 7 . L 2 4 : . LBE 2 2 : . LBB 2 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : . LBE 2 3 : movq - 3 2 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jl . L 7 5 . LBE 1 9 : . LBE 1 8 : . LBB 2 4 : movq - 7 2 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 2 5 : jmp . L 2 7 . L 7 6 : . LBB 2 6 : nop . LBE 2 6 : . LBB 2 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 8 cmpq % rax , - 4 0 (% rbp ) jl . L 6 3 . L 2 8 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 3 : movq 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 3 0 cmpq % rax , - 8 0 (% rbp ) jl . L 6 4 . L 3 0 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 4 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 3 2 cmpq % rdx , % rax jl . L 6 5 . L 3 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 5 : movq 1 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 3 4 cmpq % rax , - 8 0 (% rbp ) jge . L 3 4 movq - 2 0 8 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq - 2 4 0 (% rbp ), % rcx movq - 8 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . LBE 2 7 : . LBB 2 8 : subq $ 1 , - 4 0 (% rbp ) jmp . L 2 7 . L 3 4 : . LBE 2 8 : . LBB 2 9 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : . LBE 2 9 : movq - 4 0 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jg . L 7 6 . LBE 2 5 : . LBE 2 4 : . LBB 3 0 : movq - 8 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . LBB 3 1 : jmp . L 3 7 . L 7 7 : . LBB 3 2 : nop . LBE 3 2 : . LBB 3 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 3 8 cmpq % rax , - 5 6 (% rbp ) jl . L 6 7 . L 3 8 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 7 : movq 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 4 0 cmpq % rax , - 4 8 (% rbp ) jl . L 6 8 . L 4 0 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 4 2 cmpq % rax , - 5 6 (% rbp ) jl . L 6 9 . L 4 2 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 9 : movq 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 1 3 6 (% rbp ), % rdx testq % rax , % rax js . L 4 4 cmpq % rdx , % rax jge . L 4 4 movq - 1 4 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq - 1 7 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . LBE 3 3 : . LBB 3 4 : subq $ 1 , - 4 8 (% rbp ) jmp . L 3 7 . L 4 4 : . LBE 3 4 : . LBB 3 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : . LBE 3 5 : movq - 6 4 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 4 8 (% rbp ) jg . L 7 7 . LBE 3 1 : . LBE 3 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 4 7 cmpq % rax , - 5 6 (% rbp ) jl . L 7 1 . L 4 7 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 1 : movq 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 6 4 (% rbp ), % rax addq $ 1 , % rax movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 4 9 cmpq % rdx , % rax jge . L 4 9 movq - 1 1 2 (% rbp ), % rdx salq $ 3 , % rax addq % rax , % rdx movq - 8 8 (% rbp ), % rax movq % rax , (% rdx ) . LBE 9 : . LBB 3 6 : addq $ 1 , - 1 6 (% rbp ) jmp . L 3 . L 4 9 : . LBE 3 6 : . LBB 3 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 : . LBE 3 7 : movq - 7 2 (% rbp ), % rax subq - 5 6 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) jl . L 7 8 . LBE 7 : . LBE 6 : . LBE 5 : . LBB 3 8 : addq $ 1 , - 8 (% rbp ) . L 2 : . LBE 3 8 : movq 2 4 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax cmpq - 8 (% rbp ), % rax jg . L 7 9 . LBE 3 : . LBE 2 : leave ret
. LFB 0 : leaq - 4 8 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 1 movl $ 4 8 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 6 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 4 0 , % rsp movq % rdi , - 4 2 4 (% rbp ) movq % rdx , % rcx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq $ 0 , - 3 3 6 (% rbp ) movq $ 0 , - 3 2 8 (% rbp ) movq $ 0 , - 3 2 0 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 6 8 (% rbp ) movq % rbx , - 3 6 0 (% rbp ) movq % rbx , - 3 5 2 (% rbp ) . LBB 3 : movq $ 0 , - 6 4 (% rbp ) movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movl $ 0 , % r 1 2 d . LBE 6 : jmp . L 2 . L 5 7 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 9 6 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 3 cmpq % rax , % r 1 2 jge . L 3 movq - 3 0 4 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % r 1 2 , - 6 4 (% rbp ) movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) . LBE 1 0 : . LBB 1 1 : call runtime . makemap_small @ PLT movq % rax , % rdx movq - 3 6 0 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) jns . L 4 jmp . L 5 . L 3 : . LBE 1 1 : . LBB 2 7 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 2 7 : . LBB 2 8 : cmpq % rax , - 6 4 (% rbp ) jl . L 4 5 . L 5 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 3 6 8 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 7 . LBB 1 2 : movq % rdx , (% rax ) jmp . L 8 . L 7 : . LBE 1 2 : . LBB 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 8 : . LBE 1 3 : . LBB 1 4 : movl $ 0 , - 1 0 0 (% rbp ) . LBB 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 4 0 8 (% rbp ), % rax movq % rax , - 4 7 2 (% rbp ) movl $ 0 , % r 1 3 d . LBE 1 7 : jmp . L 9 . L 5 6 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : . LBB 2 0 : movq - 4 0 8 (% rbp ), % rax testq % r 1 3 , % r 1 3 js . L 1 0 cmpq % rax , % r 1 3 jge . L 1 0 movq - 4 1 6 (% rbp ), % rax movq % r 1 3 , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 1 1 jmp . L 4 6 . L 1 0 : movq % rax , % rsi movq % r 1 3 , % rdi call runtime . goPanicIndex @ PLT . L 1 1 : . LBB 2 1 : addq $ 1 , % r 1 3 . LBE 2 1 : jmp . L 1 3 . L 4 6 : . LBB 2 2 : movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rax movq % r 1 3 , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movl % ecx , % eax movq % rbx , % r 1 3 . L 1 3 : . LBE 2 2 : . LBE 2 0 : . LBB 2 3 : movl % eax , - 1 0 0 (% rbp ) . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 6 4 (% rbp ), % rbx . LBB 2 6 : movl - 1 0 0 (% rbp ), % eax movl % eax , - 2 3 6 (% rbp ) movq - 2 6 4 (% rbp ), % rax testq % rbx , % rbx js . L 1 4 cmpq % rax , % rbx jl . L 4 7 . L 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : movl - 1 0 0 (% rbp ), % eax movl % eax , - 1 5 6 (% rbp ) leaq - 1 5 6 (% rbp ), % rax movl (% rax ), % edx movq - 2 7 2 (% rbp ), % rax movq % rbx , % rcx salq $ 3 , % rcx addq % rcx , % rax movq (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax addq $ 1 , % rax movq % rax , - 4 8 0 (% rbp ) movq - 2 6 4 (% rbp ), % rax testq % rbx , % rbx js . L 1 6 cmpq % rax , % rbx jl . L 4 8 . L 1 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : leaq - 2 3 6 (% rbp ), % rax movl (% rax ), % edx movq - 2 7 2 (% rbp ), % rax movq % rbx , % rcx salq $ 3 , % rcx addq % rcx , % rax movq (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapassign_fast 3 2 @ PLT movq - 4 8 0 (% rbp ), % rdi movq % rdi , (% rax ) . L 9 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBE 1 9 : cmpq - 4 7 2 (% rbp ), % r 1 3 jl . L 5 6 . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBE 2 8 : . LBE 8 : . LBB 2 9 : addq $ 1 , % r 1 2 . L 2 : . LBE 2 9 : cmpq - 4 3 2 (% rbp ), % r 1 2 jl . L 5 7 . LBE 5 : . LBE 4 : . LBE 3 : call runtime . makemap_small @ PLT movq % rax , - 7 2 (% rbp ) . LBB 3 0 : movl $ 0 , - 7 6 (% rbp ) . LBB 3 1 : . LBB 3 2 : . LBB 3 3 : movq - 4 4 0 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 3 3 : jmp . L 2 2 . L 5 8 : . LBB 3 4 : nop . LBE 3 4 : . LBB 3 5 : . LBB 3 6 : movq - 4 4 0 (% rbp ), % rax testq % rbx , % rbx js . L 2 3 cmpq % rax , % rbx jge . L 2 3 movq - 4 4 8 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 2 4 jmp . L 5 1 . L 2 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : . LBB 3 7 : addq $ 1 , % rbx . LBE 3 7 : jmp . L 2 6 . L 5 1 : . LBB 3 8 : movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movl % ecx , % eax . L 2 6 : . LBE 3 8 : . LBE 3 6 : . LBB 3 9 : movl % eax , - 7 6 (% rbp ) . LBE 3 9 : . LBB 4 0 : . LBB 4 1 : movl - 7 6 (% rbp ), % eax movl % eax , - 2 3 2 (% rbp ) movl - 7 6 (% rbp ), % eax movl % eax , - 1 5 2 (% rbp ) leaq - 1 5 2 (% rbp ), % rax movl (% rax ), % edx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 3 leaq - 2 3 2 (% rbp ), % rax movl (% rax ), % edx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapassign_fast 3 2 @ PLT movq % r 1 3 , (% rax ) . L 2 2 : . LBE 4 1 : . LBE 4 0 : . LBE 3 5 : cmpq % r 1 2 , % rbx jl . L 5 8 . LBE 3 2 : . LBE 3 1 : . LBE 3 0 : movq $ 0 , - 4 0 0 (% rbp ) movq $ 0 , - 3 9 2 (% rbp ) movq $ 0 , - 3 8 4 (% rbp ) . LBB 4 2 : movl $ 9 7 , - 5 2 (% rbp ) . LBB 4 3 : jmp . L 2 9 . L 6 0 : . LBB 4 4 : nop . LBE 4 4 : . LBB 4 5 : . LBB 4 6 : movl - 5 2 (% rbp ), % eax movl % eax , - 2 2 8 (% rbp ) movl - 5 2 (% rbp ), % eax movl % eax , - 1 4 8 (% rbp ) leaq - 1 4 8 (% rbp ), % rax movl (% rax ), % edx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % rbx leaq - 2 2 8 (% rbp ), % rax movl (% rax ), % edx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapassign_fast 3 2 @ PLT movq % rbx , (% rax ) . LBE 4 6 : . LBB 4 7 : movq $ 0 , - 8 8 (% rbp ) movq $ 0 , - 9 6 (% rbp ) . LBB 4 8 : . LBB 4 9 : . LBB 5 0 : movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rax movq % rax , - 4 7 2 (% rbp ) movl $ 0 , % ebx . LBE 5 0 : jmp . L 3 0 . L 5 9 : . LBB 5 1 : nop . LBE 5 1 : . LBB 5 2 : . LBB 5 3 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 3 1 cmpq % rax , % rbx jge . L 3 1 movq - 2 2 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 5 3 : . LBB 5 4 : movq % rbx , - 8 8 (% rbp ) movq % rax , - 9 6 (% rbp ) . LBE 5 4 : . LBB 5 5 : . LBB 5 6 : leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rax movq % rax , - 4 6 4 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rax , - 4 5 6 (% rbp ) leaq type .. map . 6 int 3 2 . 7 int (% rip ), % r 1 4 movq - 9 6 (% rbp ), % r 1 5 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax movq - 4 6 4 (% rbp ), % rdx movq - 4 5 6 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT testb % al , % al jne . L 3 2 . LBB 5 7 : jmp . L 3 3 . L 3 1 : . LBE 5 7 : . LBE 5 6 : . LBE 5 5 : . LBB 6 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : . LBE 6 4 : . LBB 6 5 : . LBB 6 3 : . LBB 6 2 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 3 4 cmpq % rax , - 8 8 (% rbp ) jl . L 5 3 . L 3 4 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 3 : movq 1 6 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 movq 8 (% rax ), % r 1 3 movq - 4 3 2 (% rbp ), % r 1 0 leaq 1 (% r 1 0 ), % rax movq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 3 6 . LBB 5 8 : movq - 1 9 2 (% rbp ), % rsi leaq - 1 4 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 0 , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) . LBE 5 8 : jmp . L 3 7 . L 3 6 : . LBB 5 9 : movq - 1 9 2 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rdx movq % rcx , - 4 0 0 (% rbp ) movq % rax , - 3 9 2 (% rbp ) movq % rdx , - 3 8 4 (% rbp ) . L 3 7 : . LBE 5 9 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 4 3 2 (% rbp ), % rdx salq $ 4 , % rdx addq % rdx , % rax movq % r 1 3 , % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 3 8 . LBB 6 0 : movq % r 1 2 , % rdx movq % rdx , (% rax ) jmp . L 3 3 . L 3 8 : . LBE 6 0 : . LBB 6 1 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 3 : . LBE 6 1 : . LBE 6 2 : . LBE 6 3 : . LBE 6 5 : . LBE 5 2 : . LBB 6 6 : addq $ 1 , % rbx . L 3 0 : . LBE 6 6 : cmpq - 4 7 2 (% rbp ), % rbx jl . L 5 9 . LBE 4 9 : . LBE 4 8 : . LBE 4 7 : . LBB 6 7 : movl - 5 2 (% rbp ), % eax movl % eax , - 1 6 0 (% rbp ) movl - 5 2 (% rbp ), % eax movl % eax , - 1 1 2 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movl (% rax ), % edx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax leaq - 1 (% rax ), % rbx leaq - 1 6 0 (% rbp ), % rax movl (% rax ), % edx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapassign_fast 3 2 @ PLT movq % rbx , (% rax ) . LBE 6 7 : . LBB 6 8 : movl - 5 2 (% rbp ), % eax movl % eax , - 1 0 8 (% rbp ) leaq - 1 0 8 (% rbp ), % rax movl (% rax ), % edx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax testq % rax , % rax jne . L 4 1 . LBB 6 9 : movq - 7 2 (% rbp ), % rax movl - 5 2 (% rbp ), % edx movl % edx , - 1 0 4 (% rbp ) leaq - 1 0 4 (% rbp ), % rdx movl (% rdx ), % edx movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapdelete_fast 3 2 @ PLT . L 4 1 : . LBE 6 9 : . LBE 6 8 : . LBE 4 5 : . LBB 7 0 : addl $ 1 , - 5 2 (% rbp ) . L 2 9 : . LBE 7 0 : cmpl $ 1 2 2 , - 5 2 (% rbp ) jle . L 6 0 . LBE 4 3 : . LBE 4 2 : . LBB 7 1 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 4 2 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 7 1 : . LBE 2 : movq - 4 2 4 (% rbp ), % rax addq $ 4 4 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 1 movl $ 4 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 4 : ret . L 4 1 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movb $ 0 , - 9 (% rbp ) . LBB 2 6 : movq 2 4 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . LBB 2 7 : cmpq $ 1 , - 2 4 (% rbp ) jne . L 2 9 . LBB 2 8 : . LBB 2 9 : movb $ 1 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax jmp . L 3 0 . L 2 9 : . LBE 2 9 : . LBE 2 8 : . LBE 2 7 : . LBB 3 0 : movq $ 0 , - 8 (% rbp ) . LBB 3 1 : jmp . L 3 1 . L 4 0 : . LBB 3 2 : nop . LBE 3 2 : . LBB 3 3 : . LBB 3 4 : movq - 2 4 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 8 (% rbp ) jne . L 3 2 . LBB 3 5 : . LBB 3 6 : movb $ 1 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax jmp . L 3 0 . L 3 2 : . LBE 3 6 : . LBE 3 5 : . LBE 3 4 : . LBB 3 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 3 3 cmpq % rax , - 8 (% rbp ) jl . L 3 8 . L 3 3 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq 1 6 (% rbp ), % rdx movq - 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax testq % rax , % rax jne . L 3 5 . LBB 3 8 : addq $ 1 , - 8 (% rbp ) . LBE 3 8 : jmp . L 3 1 . L 3 5 : . LBB 3 9 : addq $ 2 , - 8 (% rbp ) . L 3 1 : . LBE 3 9 : . LBE 3 7 : . LBE 3 3 : movq - 8 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax jl . L 4 0 . LBE 3 1 : . LBE 3 0 : . LBB 4 0 : movb $ 0 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax . L 3 0 : . LBE 4 0 : . LBE 2 6 : leave ret
. LFB 1 : leaq - 5 2 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 2 movl $ 5 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 2 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 7 2 , % rsp movq % rdi , - 4 4 0 (% rbp ) movsd . LC 1 6 (% rip ), % xmm 0 movsd % xmm 0 , - 4 0 0 (% rbp ) movq $ 1 0 , - 3 9 2 (% rbp ) movsd . LC 1 7 (% rip ), % xmm 0 movsd % xmm 0 , - 3 8 4 (% rbp ) movsd . LC 1 8 (% rip ), % xmm 0 movsd % xmm 0 , - 3 7 6 (% rbp ) movq $ 3 , - 3 6 8 (% rbp ) movsd . LC 1 9 (% rip ), % xmm 0 movsd % xmm 0 , - 3 6 0 (% rbp ) movsd . LC 1 6 (% rip ), % xmm 0 movsd % xmm 0 , - 3 5 2 (% rbp ) movq $- 2 , - 3 4 4 (% rbp ) movsd . LC 2 0 (% rip ), % xmm 0 movsd % xmm 0 , - 3 3 6 (% rbp ) . LBB 1 3 : movq $ 0 , - 4 3 2 (% rbp ) movq $ 0 , - 4 2 4 (% rbp ) movq $ 0 , - 4 1 6 (% rbp ) . LBB 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movl $ 3 , % r 1 3 d movl $ 0 , % r 1 2 d . LBE 1 6 : jmp . L 1 2 . L 2 1 : . LBB 1 7 : nop . LBE 1 7 : . LBB 1 8 : . LBB 1 9 : testq % r 1 2 , % r 1 2 js . L 1 3 cmpq $ 2 , % r 1 2 jg . L 1 3 movq % r 1 2 , % rax addq % rax , % rax addq % r 1 2 , % rax salq $ 3 , % rax leaq - 4 8 (% rbp ), % rsi addq % rsi , % rax leaq - 2 4 0 (% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 0 4 (% rbp ) . LBE 1 9 : . LBB 2 0 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) . LBE 2 0 : . LBB 2 1 : movq - 4 2 4 (% rbp ), % rdx movq - 4 3 2 (% rbp ), % rax movq % rdx , % rdi movq % rax , % xmm 0 call go . problem 5 0 . myPow movq % xmm 0 , % rax movq % rax , - 5 6 (% rbp ) movsd - 5 6 (% rbp ), % xmm 1 movsd . LC 2 1 (% rip ), % xmm 0 mulsd % xmm 0 , % xmm 1 movq % xmm 1 , % rax movq % rax , % xmm 0 call math . Trunc @ PLT movq % xmm 0 , % rax movsd . LC 2 1 (% rip ), % xmm 1 movq % rax , % xmm 0 divsd % xmm 1 , % xmm 0 movsd % xmm 0 , - 5 6 (% rbp ) . LBB 2 2 : movsd - 4 1 6 (% rbp ), % xmm 0 ucomisd - 5 6 (% rbp ), % xmm 0 jp . L 1 4 comisd - 5 6 (% rbp ), % xmm 0 jne . L 1 4 jmp . L 1 5 . L 1 3 : . LBE 2 2 : . LBE 2 1 : . LBB 2 7 : movl $ 3 , % esi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : . LBE 2 7 : . LBB 2 8 : . LBB 2 6 : . LBB 2 3 : leaq float 6 4 .. d (% rip ), % rbx movq % rbx , - 5 1 2 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 1 8 4 (% rbp ), % rax movsd - 4 3 2 (% rbp ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 5 0 4 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 4 9 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 7 6 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 4 8 8 (% rbp ) movq % rbx , - 4 8 0 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movsd - 5 6 (% rbp ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 1 6 8 (% rbp ), % rax movq % rax , - 4 7 2 (% rbp ) movq % rbx , - 4 6 4 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movsd - 4 1 6 (% rbp ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 4 5 6 (% rbp ) leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movdqa - 5 1 2 (% rbp ), % xmm 2 movups % xmm 2 , - 1 4 4 (% rbp ) movdqa - 4 9 6 (% rbp ), % xmm 3 movups % xmm 3 , - 1 2 8 (% rbp ) movdqa - 4 8 0 (% rbp ), % xmm 4 movups % xmm 4 , - 1 1 2 (% rbp ) movdqa - 4 6 4 (% rbp ), % xmm 5 movups % xmm 5 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 6 . LBB 2 4 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) . LBE 2 4 : jmp . L 1 7 . L 1 6 : . LBB 2 5 : movq - 1 5 2 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 7 : . LBE 2 5 : movq - 1 5 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 4 , - 7 2 (% rbp ) movq $ 4 , - 6 4 (% rbp ) leaq . LC 2 2 (% rip ), % r 1 4 movl $ 2 8 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 4 4 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 1 5 : . LBE 2 3 : . LBE 2 6 : . LBE 2 8 : . LBE 1 8 : . LBB 2 9 : addq $ 1 , % r 1 2 . L 1 2 : . LBE 2 9 : cmpq % r 1 3 , % r 1 2 jl . L 2 1 . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 9 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 0 movl $ 3 9 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 4 4 , % rsp movq $ 0 , - 8 0 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 9 6 (% rbp ) movq - 8 8 (% rbp ), % rax imulq - 9 6 (% rbp ), % rax movq % rax , % r 1 2 leaq go . problem 0 6 7 5 . PQ .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 (% rbp ) movq - 1 0 4 (% rbp ), % rbx movq % r 1 2 , % rdx movl $ 0 , % esi leaq type ... 1 go . problem 0 6 7 5 . tree (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) movq % r 1 2 , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 3 0 4 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 . LBB 3 : movq - 3 2 0 (% rbp ), % rax movq % rax , (% rbx ) jmp . L 4 . L 3 : . LBE 3 : . LBB 4 : movq - 3 2 0 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 4 : . LBE 4 : . LBB 5 : movq $ 0 , - 6 4 (% rbp ) . LBB 6 : jmp . L 5 . L 3 8 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq $ 0 , - 7 2 (% rbp ) . LBB 1 0 : jmp . L 6 . L 3 7 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : . LBB 1 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 7 cmpq % rax , - 6 4 (% rbp ) jl . L 3 1 . L 7 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq 1 6 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 9 cmpq % rax , - 7 2 (% rbp ) jge . L 9 movq - 2 8 8 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq $ 1 , % rax jg . L 1 0 . LBB 1 4 : jmp . L 1 1 . L 9 : . LBE 1 4 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : . LBB 2 1 : movq - 1 0 4 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 2 movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 2 cmpq % rax , - 6 4 (% rbp ) jl . L 3 2 . L 1 2 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq 1 6 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 1 4 cmpq % rax , - 7 2 (% rbp ) jge . L 1 4 movq - 2 2 4 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rbx movq - 6 4 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rax , - 3 7 6 (% rbp ) leaq go . problem 0 6 7 5 .. go . problem 0 6 7 5 . tree .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rbx , (% rax ) movdqa - 3 8 4 (% rbp ), % xmm 0 movups % xmm 0 , 8 (% rax ) movq - 2 0 0 (% rbp ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 1 5 jmp . L 3 3 . L 1 4 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : . LBB 1 5 : movq - 1 0 4 (% rbp ), % rbx movq - 2 5 6 (% rbp ), % rsi leaq - 1 6 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 go . problem 0 6 7 5 . tree (% rip ), % rsi call runtime . growslice @ PLT movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 7 . LBB 1 6 : movq - 1 9 2 (% rbp ), % rax movq % rax , (% rbx ) jmp . L 1 8 . L 1 7 : . LBE 1 6 : . LBB 1 7 : movq - 1 9 2 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 1 8 . L 3 3 : . LBE 1 7 : . LBE 1 5 : . LBB 1 8 : movq - 2 5 6 (% rbp ), % rsi movq - 2 4 0 (% rbp ), % rdx movq - 1 0 4 (% rbp ), % rcx movq % rsi , (% rcx ) movq - 1 0 4 (% rbp ), % rcx movq % rax , 8 (% rcx ) movq - 1 0 4 (% rbp ), % rax movq % rdx , 1 6 (% rax ) . L 1 8 : . LBE 1 8 : movq - 1 0 4 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 9 . LBB 1 9 : movq % r 1 3 , (% rax ) jmp . L 1 1 . L 1 9 : . LBE 1 9 : . LBB 2 0 : movq % r 1 3 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 1 : . LBE 2 0 : . LBE 2 1 : . LBE 1 3 : . LBE 1 2 : . LBB 2 2 : addq $ 1 , - 7 2 (% rbp ) . L 6 : . LBE 2 2 : movq - 7 2 (% rbp ), % rax cmpq - 9 6 (% rbp ), % rax jl . L 3 7 . LBE 1 0 : . LBE 9 : . LBE 8 : . LBB 2 3 : addq $ 1 , - 6 4 (% rbp ) . L 5 : . LBE 2 3 : movq - 6 4 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax jl . L 3 8 . LBE 6 : . LBE 5 : leaq pimt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Pop . 0 func . 8 . 9 . 8 interface . 4 . 5 . 9 . 2 Push . 0 func . 8 interface . 4 . 5 . 9 . 8 . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. go . problem 0 6 7 5 . PQ (% rip ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 1 0 4 (% rbp ), % rax movq % rax , - 3 6 0 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call container .. z 2 fheap . Init @ PLT movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 3 3 6 (% rbp ) movq $ 0 , - 3 2 8 (% rbp ) . LBB 2 4 : . LBB 2 5 : jmp . L 2 4 . L 3 9 : . LBB 2 6 : nop . LBE 2 6 : . LBB 2 7 : leaq pimt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Pop . 0 func . 8 . 9 . 8 interface . 4 . 5 . 9 . 2 Push . 0 func . 8 interface . 4 . 5 . 9 . 8 . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. go . problem 0 6 7 5 . PQ (% rip ), % r 1 4 movq - 1 0 4 (% rbp ), % r 1 5 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call container .. z 2 fheap . Pop @ PLT movq % rax , % rsi leaq type ... 1 go . problem 0 6 7 5 . tree (% rip ), % rcx cmpq % rcx , % rsi je . L 2 5 leaq type .. interface . 4 . 5 (% rip ), % rdx movq % rax , % rsi leaq type ... 1 go . problem 0 6 7 5 . tree (% rip ), % rdi call runtime . panicdottype @ PLT . L 2 5 : movq % rdx , - 1 1 2 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq 1 6 (% rax ), % rdx movq 8 (% rax ), % rax movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq - 3 3 6 (% rbp ), % rdi movq - 3 2 8 (% rbp ), % rsi subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rdx , % rcx movq % rax , % rdx call go . problem 0 6 7 5 . bfs addq $ 3 2 , % rsp movq % rax , % rcx movq % rcx , - 1 2 0 (% rbp ) movl % edx , % eax movb % al , - 1 2 1 (% rbp ) . LBB 2 8 : movzbl - 1 2 1 (% rbp ), % eax xorl $ 1 , % eax testb % al , % al je . L 2 6 . LBB 2 9 : . LBB 3 0 : movq $- 1 , - 8 0 (% rbp ) movq - 8 0 (% rbp ), % rax jmp . L 3 0 . L 2 6 : . LBE 3 0 : . LBE 2 9 : . LBE 2 8 : movq - 1 2 0 (% rbp ), % rax addq % rax , - 5 6 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) . L 2 4 : . LBE 2 7 : movq - 1 0 4 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax jg . L 3 9 . LBE 2 5 : . LBE 2 4 : . LBB 3 1 : movq - 5 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 0 (% rbp ), % rax . L 3 0 : . LBE 3 1 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 4 5 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 8 movl $ 4 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 2 4 , % rsp movq $ 0 , - 6 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 . 6 2 . 7 int . 7 bool (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 8 0 (% rbp ) . LBB 3 : movq $ 0 , - 4 4 8 (% rbp ) movq $ 0 , - 4 4 0 (% rbp ) movq $ 0 , - 4 3 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 7 6 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 4 3 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 3 7 6 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 3 8 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 0 0 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 4 4 0 (% rbp ), % rax testq % rax , % rax jg . L 4 jmp . L 3 5 . L 3 : . LBE 1 1 : . LBB 1 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : . LBE 1 3 : . LBB 1 4 : movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq - 4 4 8 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 4 4 0 (% rbp ), % rax cmpq $ 1 , % rax jg . L 6 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 6 : movq - 4 4 8 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 3 6 (% rbp ) . LBB 1 2 : movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 3 1 2 (% rbp ) movl $ 1 , % r 1 3 d leaq - 3 2 0 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 . 6 2 . 7 int . 7 bool (% rip ), % rdi call runtime . mapassign @ PLT movb % r 1 3 b , (% rax ) . LBE 1 2 : . LBE 1 4 : . LBE 8 : . LBB 1 5 : addq $ 1 , % rbx . L 2 : . LBE 1 5 : cmpq % r 1 2 , % rbx jl . L 4 3 . LBE 5 : . LBE 4 : . LBE 3 : movq $ 2 0 0 0 0 0 0 0 0 0 , - 4 0 (% rbp ) . LBB 1 6 : movq $ 0 , - 4 8 (% rbp ) . LBB 1 7 : jmp . L 9 . L 4 7 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 0 cmpq % rax , - 4 8 (% rbp ) jl . L 3 7 . L 1 0 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq 1 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % rax testq % rax , % rax jg . L 1 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 2 : movq - 3 0 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 8 8 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 3 cmpq % rax , - 4 8 (% rbp ) jl . L 3 8 . L 1 3 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq 1 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 5 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 5 : movq - 2 7 2 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 9 6 (% rbp ) . LBB 2 0 : movq - 4 8 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 5 6 (% rbp ) . LBB 2 1 : jmp . L 1 6 . L 4 6 : . LBB 2 2 : nop . LBE 2 2 : . LBB 2 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 7 cmpq % rax , - 5 6 (% rbp ) jl . L 3 9 . L 1 7 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax testq % rax , % rax jg . L 1 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 9 : movq - 2 4 0 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 1 0 4 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 2 0 cmpq % rax , - 5 6 (% rbp ) jl . L 4 0 . L 2 0 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 2 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 2 : movq - 2 0 8 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 1 2 (% rbp ) . LBB 2 4 : . LBB 2 5 : movq - 8 8 (% rbp ), % rax cmpq - 1 0 4 (% rbp ), % rax sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 3 . LBB 2 6 : movq - 9 6 (% rbp ), % rax cmpq - 1 1 2 (% rbp ), % rax sete % al . L 2 3 : . LBE 2 6 : . LBE 2 5 : testb % al , % al jne . L 4 4 . LBE 2 4 : movq - 8 8 (% rbp ), % rax subq - 1 0 4 (% rbp ), % rax movq % rax , % rdx movq - 9 6 (% rbp ), % rax subq - 1 1 2 (% rbp ), % rax imulq % rdx , % rax movq % rax , % rdi call go . problem 0 9 3 9 . abs movq % rax , - 1 2 0 (% rbp ) . LBB 2 8 : . LBB 2 9 : . LBB 3 0 : movq - 1 2 0 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax setge % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 6 . LBB 3 1 : movq - 8 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 1 6 8 (% rbp ) leaq - 1 7 6 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 . 6 2 . 7 int . 7 bool (% rip ), % rdi call runtime . mapaccess 1 @ PLT movzbl (% rax ), % eax xorl $ 1 , % eax . L 2 6 : . LBE 3 1 : . LBE 3 0 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 7 . LBB 3 2 : movq - 1 0 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 1 5 2 (% rbp ) leaq - 1 6 0 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 . 6 2 . 7 int . 7 bool (% rip ), % rdi call runtime . mapaccess 1 @ PLT movzbl (% rax ), % eax xorl $ 1 , % eax . L 2 7 : . LBE 3 2 : . LBE 2 9 : testb % al , % al jne . L 4 5 . LBE 2 8 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) jmp . L 2 5 . L 4 4 : . LBB 3 4 : . LBB 2 7 : nop jmp . L 2 5 . L 4 5 : . LBE 2 7 : . LBE 3 4 : . LBB 3 5 : . LBB 3 3 : nop . L 2 5 : . LBE 3 3 : . LBE 3 5 : . LBE 2 3 : . LBB 3 6 : addq $ 1 , - 5 6 (% rbp ) . L 1 6 : . LBE 3 6 : movq - 5 6 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jl . L 4 6 . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBB 3 7 : addq $ 1 , - 4 8 (% rbp ) . L 9 : . LBE 3 7 : movq - 4 8 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jl . L 4 7 . LBE 1 7 : . LBE 1 6 : . LBB 3 8 : cmpq $ 2 0 0 0 0 0 0 0 0 0 , - 4 0 (% rbp ) jne . L 3 3 . LBB 3 9 : . LBB 4 0 : movq $ 0 , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax jmp . L 3 4 . L 3 3 : . LBE 4 0 : . LBE 3 9 : . LBE 3 8 : . LBB 4 1 : movq - 4 0 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax . L 3 4 : . LBE 4 1 : . LBE 2 : addq $ 4 2 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
leaq - 4 5 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 5 movl $ 4 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 1 : ret . L 1 6 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 2 4 , % rsp movq % rdi , - 4 2 4 (% rbp ) movq % rsi , - 4 3 2 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) . LBB 1 0 7 : cmpq $ 0 , - 4 2 4 (% rbp ) je . L 1 6 4 . LBE 1 0 7 : . LBB 1 0 9 : movq - 4 4 0 (% rbp ), % rax movq 8 (% rax ), % rax cmpq % rax , - 4 3 2 (% rbp ) jl . L 1 4 8 . LBB 1 1 0 : movq - 4 4 0 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 4 0 8 (% rbp ), % r 1 2 leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) movq - 3 9 2 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 0 , - 3 7 6 (% rbp ) movq $ 0 , - 3 6 8 (% rbp ) leaq 1 (% r 1 2 ), % rax movq - 4 0 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 4 9 . LBB 1 1 1 : movq - 4 4 0 (% rbp ), % rbx movq - 4 1 6 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 6 . 7 int (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 4 4 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 3 3 6 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 5 0 . LBB 1 1 2 : movq - 3 5 2 (% rbp ), % rax movq % rax , (% rbx ) . LBE 1 1 2 : jmp . L 1 5 1 . L 1 5 0 : . LBB 1 1 3 : movq - 3 5 2 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 1 5 1 . L 1 4 9 : . LBE 1 1 3 : . LBE 1 1 1 : . LBB 1 1 4 : movq - 4 1 6 (% rbp ), % rsi movq - 4 0 0 (% rbp ), % rdx movq - 4 4 0 (% rbp ), % rcx movq % rsi , (% rcx ) movq - 4 4 0 (% rbp ), % rcx movq % rax , 8 (% rcx ) movq - 4 4 0 (% rbp ), % rax movq % rdx , 1 6 (% rax ) . L 1 5 1 : . LBE 1 1 4 : movq - 4 4 0 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 4 1 6 (% rbp ), % rdx movq % r 1 2 , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , - 3 2 0 (% rbp ) movq % rbx , - 3 1 2 (% rbp ) movq - 3 6 8 (% rbp ), % rdx movq % rdx , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 3 0 4 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 5 2 . LBB 1 1 5 : movq - 3 2 0 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 1 1 5 : jmp . L 1 4 8 . L 1 5 2 : . LBB 1 1 6 : movq - 3 2 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 4 8 : . LBE 1 1 6 : . LBE 1 1 0 : . LBE 1 0 9 : movq - 4 4 0 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % rax cmpq $ 0 , - 4 3 2 (% rbp ) js . L 1 5 3 cmpq % rax , - 4 3 2 (% rbp ) jge . L 1 5 3 movq - 2 8 8 (% rbp ), % rcx movq - 4 3 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 2 movq - 4 2 4 (% rbp ), % rax movq (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rdx movq - 2 4 0 (% rbp ), % rsi movq % rdx , % rcx movq % rsi , % rax cmpq % rax , % rcx ja . L 1 5 4 jmp . L 1 6 2 . L 1 5 3 : movq - 4 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 4 : . LBB 1 1 7 : movq - 4 4 0 (% rbp ), % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 2 2 4 (% rbp ) movq % rbx , - 2 1 6 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rax cmpq $ 0 , - 4 3 2 (% rbp ) js . L 1 5 6 cmpq % rax , - 4 3 2 (% rbp ) jge . L 1 5 6 movq - 2 2 4 (% rbp ), % rdi movq - 4 3 2 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdi ,% rax ), % rbx movq - 2 5 6 (% rbp ), % rdi leaq - 6 4 (% rbp ), % rax movq % rdx , % r 9 movq % rsi , % r 8 movq % r 1 2 , % rcx movq % rdi , % rdx leaq int .. d (% rip ), % rsi movq % rax , % rdi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 1 5 7 jmp . L 1 6 3 . L 1 5 6 : movq - 4 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 7 : . LBB 1 1 8 : movq - 1 9 2 (% rbp ), % rax movq % rax , (% rbx ) . LBE 1 1 8 : jmp . L 1 5 9 . L 1 6 3 : . LBB 1 1 9 : movq - 1 9 2 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 1 5 9 . L 1 6 2 : . LBE 1 1 9 : . LBE 1 1 7 : . LBB 1 2 0 : movq - 4 4 0 (% rbp ), % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 4 3 2 (% rbp ) js . L 1 6 0 cmpq % rax , - 4 3 2 (% rbp ) jge . L 1 6 0 movq - 1 6 0 (% rbp ), % rsi movq - 4 3 2 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq - 2 5 6 (% rbp ), % rsi movq - 2 4 0 (% rbp ), % rcx movq % rsi , (% rax ) movq % rdx , 8 (% rax ) movq % rcx , 1 6 (% rax ) jmp . L 1 5 9 . L 1 6 0 : movq - 4 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 9 : . LBE 1 2 0 : movq - 4 4 0 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rax cmpq $ 0 , - 4 3 2 (% rbp ) js . L 1 6 1 cmpq % rax , - 4 3 2 (% rbp ) jge . L 1 6 1 movq - 1 2 8 (% rbp ), % rcx movq - 4 3 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 3 , (% rax ) movq - 4 3 2 (% rbp ), % rax leaq 1 (% rax ), % rcx movq - 4 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call go . Solution . recLevelOrder movq - 4 3 2 (% rbp ), % rax leaq 1 (% rax ), % rcx movq - 4 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call go . Solution . recLevelOrder jmp . L 1 4 5 . L 1 6 1 : movq - 4 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 6 4 : . LBB 1 2 1 : . LBB 1 0 8 : nop . L 1 4 5 : . LBE 1 0 8 : . LBE 1 2 1 : addq $ 4 2 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 2 movl $ 1 8 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 2 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 6 8 , % rsp movq % rdi , - 1 6 8 (% rbp ) movq $ 0 , - 9 6 (% rbp ) movq $ 0 , - 8 8 (% rbp ) movq $ 0 , - 8 0 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 2 8 (% rbp ) movq % rbx , - 1 2 0 (% rbp ) movq % rbx , - 1 1 2 (% rbp ) movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) movq % rbx , - 1 4 4 (% rbp ) movq $- 1 , - 2 4 (% rbp ) . LBB 3 : movq $ 0 , - 3 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rsi movl $ 0 , % edx . LBE 6 : jmp . L 2 . L 3 1 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq % rdx , - 3 2 (% rbp ) . LBB 9 : . LBB 1 0 : . LBB 1 1 : jmp . L 3 . L 3 0 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 cmpq % rax , - 2 4 (% rbp ) jl . L 2 2 . L 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : movq - 1 6 0 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rax , - 4 0 (% rbp ) subq $ 1 , - 2 4 (% rbp ) movq - 1 2 0 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 6 cmpq % rax , - 4 0 (% rbp ) jl . L 2 3 . L 6 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : movq - 1 2 8 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rcx movq - 3 2 (% rbp ), % rax subq - 4 0 (% rbp ), % rax movq % rax , (% rcx ) . L 3 : . LBE 1 3 : . LBB 1 4 : cmpq $- 1 , - 2 4 (% rbp ) setne % al testb % al , % al je . L 8 . LBB 1 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 9 cmpq % rax , - 3 2 (% rbp ) jl . L 2 4 . L 9 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 1 cmpq % rax , - 2 4 (% rbp ) jl . L 2 5 . L 1 1 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq - 1 6 0 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq 2 4 (% rbp ), % rcx testq % rax , % rax js . L 1 3 cmpq % rcx , % rax jl . L 2 6 . L 1 3 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq 1 6 (% rbp ), % rdi movq - 3 2 (% rbp ), % rcx salq $ 3 , % rcx addq % rdi , % rcx movq (% rcx ), % rcx movq 1 6 (% rbp ), % rdi salq $ 3 , % rax addq % rdi , % rax movq (% rax ), % rax cmpq % rax , % rcx setg % al . L 8 : . LBE 1 5 : . LBE 1 4 : testb % al , % al jne . L 3 0 . LBE 1 1 : . LBE 1 0 : addq $ 1 , - 2 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 7 cmpq % rax , - 2 4 (% rbp ) jl . L 2 8 . L 1 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq - 1 6 0 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rcx movq - 3 2 (% rbp ), % rax movq % rax , (% rcx ) . LBE 9 : . LBE 8 : . LBB 1 6 : addq $ 1 , % rdx . L 2 : . LBE 1 6 : cmpq % rsi , % rdx jl . L 3 1 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 7 : movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 8 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 7 : . LBE 2 : movq - 1 6 8 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 0 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 1 0 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movb $ 0 , - 1 (% rbp ) . LBB 1 0 : . LBB 1 1 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 8 call runtime . panicmem @ PLT . L 8 : movq - 2 4 (% rbp ), % rax movq % rax , % rdi call go . volatile . LoadUint 3 2 @ PLT testl % eax , % eax setne % al movb % al , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax . LBE 1 1 : . LBE 1 0 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 0 movl $ 7 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 0 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 5 6 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : . LBB 3 : . LBB 4 : movq 1 6 (% rbp ), % rax testq % rax , % rax sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 . LBB 5 : movq 2 4 (% rbp ), % rax testq % rax , % rax sete % al . L 2 : . LBE 5 : . LBE 4 : testb % al , % al je . L 3 . LBB 6 : . LBB 7 : movq $- 1 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 2 8 . L 3 : . LBE 7 : . LBE 6 : . LBE 3 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 6 4 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq % rbx , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rax testq % rax , % rax jg . L 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 5 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 6 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movq (% rdx ), % rdx movq % rdx , (% rax ) . LBB 8 : movq $ 1 , - 2 4 (% rbp ) . LBB 9 : jmp . L 7 . L 3 8 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 8 cmpq % rax , - 2 4 (% rbp ) jl . L 2 9 . L 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 1 0 cmpq % rdx , % rax jl . L 3 0 . L 1 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) js . L 1 2 cmpq % rdx , - 2 4 (% rbp ) jl . L 3 1 . L 1 2 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq - 6 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rcx movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 6 4 (% rbp ), % rsi movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax addq % rcx , % rdx movq % rdx , (% rax ) . LBE 1 1 : . LBB 1 2 : addq $ 1 , - 2 4 (% rbp ) . L 7 : . LBE 1 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 3 8 . LBE 9 : . LBE 8 : . LBB 1 3 : movq $ 0 , - 3 2 (% rbp ) . LBB 1 4 : jmp . L 1 6 . L 3 9 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 7 cmpq % rax , - 3 2 (% rbp ) jl . L 3 3 . L 1 7 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 9 cmpq % rax , - 3 2 (% rbp ) jl . L 3 4 . L 1 9 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 2 1 cmpq % rdx , % rax jl . L 3 5 . L 2 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 5 6 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 2 3 cmpq % rdx , - 3 2 (% rbp ) jl . L 3 6 . L 2 3 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq - 6 4 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rsi movq % rdx , % rcx subq % rsi , % rcx movq - 6 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq - 6 4 (% rbp ), % rsi movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rsi , % rdx movq (% rdx ), % rdx subq % rdx , % rax cmpq % rax , % rcx jne . L 2 5 . LBB 1 8 : . LBB 1 9 : movq - 3 2 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 2 8 . L 2 5 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 2 0 : addq $ 1 , - 3 2 (% rbp ) . L 1 6 : . LBE 2 0 : movq 2 4 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) jl . L 3 9 . LBE 1 4 : . LBE 1 3 : . LBB 2 1 : movq $- 1 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 2 8 : . LBE 2 1 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
leaq - 7 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 0 9 movl $ 7 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 6 : ret . L 1 0 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 7 2 8 , % rsp movq $ 0 , - 6 2 4 (% rbp ) movq $ 0 , - 6 1 6 (% rbp ) . LBB 5 3 : leaq . LC 6 (% rip ), % rax movl $ 1 0 , % edx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call os . Getenv @ PLT movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) . LBB 5 4 : movq - 6 3 2 (% rbp ), % rax testq % rax , % rax jne . L 9 4 . LBE 5 4 : . LBB 5 9 : movq 8 + go . goenv . TINYGOROOT (% rip ), % rax testq % rax , % rax jne . L 9 8 jmp . L 1 0 7 . L 9 4 : . LBE 5 9 : . LBB 6 4 : . LBB 5 5 : . LBB 5 6 : movq - 6 4 0 (% rbp ), % rdx movq - 6 3 2 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . goenv . isSourceDir xorl $ 1 , % eax testb % al , % al je . L 9 6 . LBB 5 7 : leaq string .. d (% rip ), % rax movq % rax , - 7 6 8 (% rbp ) leaq go .. C 7 (% rip ), % rax movq % rax , - 7 6 0 (% rbp ) movdqa - 7 6 8 (% rbp ), % xmm 0 movups % xmm 0 , - 5 7 6 (% rbp ) leaq - 5 7 6 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq $ 1 , - 3 1 2 (% rbp ) movq $ 1 , - 3 0 4 (% rbp ) leaq pimt .. interface . 4 Write . 0 func . 8 . 6 . 7 uint 8 . 9 . 8 int . 3 error . 9 . 5 .. os . File (% rip ), % rax movq % rax , - 7 0 4 (% rbp ) movq os . Stderr (% rip ), % rax movq % rax , - 6 9 6 (% rbp ) leaq - 2 8 8 (% rbp ), % rax movq - 7 0 4 (% rbp ), % rcx movq - 6 9 6 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 3 0 4 (% rbp ) pushq - 3 1 2 (% rbp ) pushq - 3 2 0 (% rbp ) movq % rax , % rdi call fmt . Fprintln @ PLT addq $ 3 2 , % rsp movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 6 0 8 (% rbp ) movq % rdx , - 6 0 0 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) movl $ 1 , % edi call os . Exit @ PLT . L 9 6 : . LBE 5 7 : . LBE 5 6 : . LBB 5 8 : movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx jmp . L 1 0 6 . L 1 0 7 : . LBE 5 8 : . LBE 5 5 : . LBE 6 4 : leaq - 1 9 2 (% rbp ), % rax movq % rax , % rdi call os . Executable @ PLT movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 6 5 6 (% rbp ) movq % rdx , - 6 4 8 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 6 7 2 (% rbp ) movq % rdx , - 6 6 4 (% rbp ) . LBB 6 5 : movq - 6 7 2 (% rbp ), % rax testq % rax , % rax je . L 1 0 1 jmp . L 1 0 8 . L 9 8 : . LBE 6 5 : . LBB 6 9 : . LBB 6 0 : . LBB 6 1 : movq go . goenv . TINYGOROOT (% rip ), % rdx movq 8 + go . goenv . TINYGOROOT (% rip ), % rax movq % rdx , % rdi movq % rax , % rsi call go . goenv . isSourceDir xorl $ 1 , % eax testb % al , % al je . L 1 0 0 . LBB 6 2 : leaq string .. d (% rip ), % rax movq % rax , - 7 5 2 (% rbp ) leaq go .. C 8 (% rip ), % rax movq % rax , - 7 4 4 (% rbp ) movdqa - 7 5 2 (% rbp ), % xmm 1 movups % xmm 1 , - 5 2 8 (% rbp ) leaq - 5 2 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq $ 1 , - 2 4 8 (% rbp ) movq $ 1 , - 2 4 0 (% rbp ) leaq pimt .. interface . 4 Write . 0 func . 8 . 6 . 7 uint 8 . 9 . 8 int . 3 error . 9 . 5 .. os . File (% rip ), % rax movq % rax , - 6 8 8 (% rbp ) movq os . Stderr (% rip ), % rax movq % rax , - 6 8 0 (% rbp ) leaq - 2 2 4 (% rbp ), % rax movq - 6 8 8 (% rbp ), % rcx movq - 6 8 0 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 4 0 (% rbp ) pushq - 2 4 8 (% rbp ) pushq - 2 5 6 (% rbp ) movq % rax , % rdi call fmt . Fprintln @ PLT addq $ 3 2 , % rsp movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) movl $ 1 , % edi call os . Exit @ PLT . L 1 0 0 : . LBE 6 2 : . LBE 6 1 : . LBB 6 3 : movq go . goenv . TINYGOROOT (% rip ), % rax movq 8 + go . goenv . TINYGOROOT (% rip ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx jmp . L 1 0 6 . L 1 0 8 : . LBE 6 3 : . LBE 6 0 : . LBE 6 9 : . LBB 7 0 : . LBB 6 6 : movq - 6 7 2 (% rbp ), % rax movq 8 (% rax ), % rdx movq - 6 6 4 (% rbp ), % rax movq % rax , % rdi call *% rdx . LVL 7 : leaq . LC 2 2 (% rip ), % rcx movq % rcx , - 4 8 0 (% rbp ) movq $ 3 1 , - 4 7 2 (% rbp ) movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 7 3 6 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 0 (% rbp ) leaq - 4 8 0 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 2 . LBB 6 7 : movq - 4 4 0 (% rbp ), % rcx movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 6 7 : jmp . L 1 0 3 . L 1 0 2 : . LBB 6 8 : movq - 4 4 0 (% rbp ), % rax leaq - 4 3 2 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 3 : . LBE 6 8 : movq - 4 4 0 (% rbp ), % rax movq % rax , - 7 2 8 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . gopanic @ PLT . L 1 0 1 : . LBE 6 6 : . LBE 7 0 : movq - 6 5 6 (% rbp ), % rdx movq - 6 4 8 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call path .. z 2 ffilepath . Dir @ PLT movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call path .. z 2 ffilepath . Dir @ PLT movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) . LBB 7 1 : movq - 6 4 0 (% rbp ), % rdx movq - 6 3 2 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . goenv . isSourceDir testb % al , % al je . L 1 0 4 . LBB 7 2 : . LBB 7 3 : movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx jmp . L 1 0 6 . L 1 0 4 : . LBE 7 3 : . LBE 7 2 : . LBE 7 1 : . LBB 7 4 : leaq - 1 6 0 (% rbp ), % rax movl $ 0 , % esi movq % rax , % rdi call runtime . Caller @ PLT movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 4 0 8 (% rbp ), % rax movq - 4 0 0 (% rbp ), % rdx movq % rax , - 6 5 6 (% rbp ) movq % rdx , - 6 4 8 (% rbp ) . LBE 7 4 : movq - 6 5 6 (% rbp ), % rdx movq - 6 4 8 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call path .. z 2 ffilepath . Dir @ PLT movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call path .. z 2 ffilepath . Dir @ PLT movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) . LBB 7 5 : movq - 6 4 0 (% rbp ), % rdx movq - 6 3 2 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . goenv . isSourceDir testb % al , % al je . L 1 0 5 . LBB 7 6 : . LBB 7 7 : movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx jmp . L 1 0 6 . L 1 0 5 : . LBE 7 7 : . LBE 7 6 : . LBE 7 5 : leaq string .. d (% rip ), % rax movq % rax , - 7 2 0 (% rbp ) leaq go .. C 9 (% rip ), % rax movq % rax , - 7 1 2 (% rbp ) movdqa - 7 2 0 (% rbp ), % xmm 2 movups % xmm 2 , - 3 3 6 (% rbp ) leaq - 3 3 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq pimt .. interface . 4 Write . 0 func . 8 . 6 . 7 uint 8 . 9 . 8 int . 3 error . 9 . 5 .. os . File (% rip ), % r 1 4 movq os . Stderr (% rip ), % rax movq % rax , % r 1 5 leaq - 8 0 (% rbp ), % rax movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Fprintln @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movl $ 1 , % edi call os . Exit @ PLT leaq string .. d (% rip ), % r 1 2 leaq go .. C 1 0 (% rip ), % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . gopanic @ PLT . L 1 0 6 : . LBE 5 3 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 8 movl $ 3 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 : ret . L 5 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 6 4 , % rsp movq % rdi , - 2 9 6 (% rbp ) leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 2 5 6 (% rbp ) movq % r 1 5 , - 2 4 8 (% rbp ) movq $ 2 , - 2 4 0 (% rbp ) movq $ 2 , - 2 3 2 (% rbp ) leaq . LC 1 9 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 2 2 4 (% rbp ) movq % r 1 3 , - 2 1 6 (% rbp ) movq $ 3 , - 2 0 8 (% rbp ) movq $ 3 , - 2 0 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 4 . LBB 4 6 : movq - 2 6 4 (% rbp ), % rax movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 2 2 4 (% rbp ), % rcx movq - 2 1 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 2 0 8 (% rbp ), % rcx movq - 2 0 0 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) . LBE 4 6 : jmp . L 4 5 . L 4 4 : . LBB 4 7 : movq - 2 6 4 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 5 : . LBE 4 7 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 2 , - 2 8 0 (% rbp ) movq $ 2 , - 2 7 2 (% rbp ) . LBB 4 8 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) . LBB 4 9 : . LBB 5 0 : . LBB 5 1 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 5 1 : jmp . L 4 6 . L 5 7 : . LBB 5 2 : nop . LBE 5 2 : . LBB 5 3 : . LBB 5 4 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 4 7 cmpq % rax , % rbx jge . L 4 7 movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) . LBE 5 4 : . LBB 5 5 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 5 6 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 4 8 jmp . L 5 5 . L 4 7 : . LBE 5 5 : . LBB 5 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : . LBE 5 8 : . LBB 5 9 : . LBB 5 6 : movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) jmp . L 5 0 . L 5 5 : . LBE 5 6 : . LBB 5 7 : leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 0 : . LBE 5 7 : . LBE 5 9 : . LBB 6 0 : leaq go . Solution . TestSolution 2 .. func 1 (% rip ), % r 1 4 movq - 5 6 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 1 . LBB 6 1 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 6 1 : jmp . L 5 2 . L 5 1 : . LBB 6 2 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 2 : . LBE 6 2 : movq - 8 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 2 9 6 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 6 0 : . LBE 5 3 : . LBB 6 3 : addq $ 1 , % rbx . L 4 6 : . LBE 6 3 : cmpq % r 1 3 , % rbx jl . L 5 7 . LBE 5 0 : . LBE 4 9 : . LBE 4 8 : addq $ 2 6 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 5 movl $ 2 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 9 2 , % rsp movq % rdi , - 2 0 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 : movq - 2 0 0 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 1 container .. z 2 flist . List (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 9 2 (% rbp ) movq % rbx , - 1 8 4 (% rbp ) movq % rbx , - 1 7 6 (% rbp ) leaq main .. main . graph .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rax , - 1 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 3 : movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 3 : jmp . L 3 . L 2 : . LBB 4 : movq - 1 6 8 (% rbp ), % rax leaq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi leaq main .. main . graph .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 4 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . LBB 5 : movq $ 0 , - 4 0 (% rbp ) . LBB 6 : movq - 3 2 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) . LBB 7 : . LBB 8 : movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 8 : jmp . L 4 . L 1 4 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : movq % rbx , - 4 0 (% rbp ) . LBB 1 1 : call container .. z 2 flist . New @ PLT movq % rax , % rcx movq - 3 2 (% rbp ), % rsi movq (% rsi ), % rax movq 8 (% rsi ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq 1 6 (% rsi ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 5 cmpq % rax , - 4 0 (% rbp ) jge . L 5 movq - 6 4 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 2 . L 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBB 1 2 : movq % rcx , (% rax ) . LBE 1 2 : jmp . L 8 . L 1 2 : . LBB 1 3 : movq % rcx , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 8 : . LBE 1 3 : . LBE 1 1 : . LBE 1 0 : . LBB 1 4 : addq $ 1 , % rbx . L 4 : . LBE 1 4 : cmpq % r 1 2 , % rbx jl . L 1 4 . LBE 7 : . LBE 6 : . LBE 5 : . LBB 1 5 : movq - 3 2 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . LBE 1 5 : . LBE 2 : addq $ 1 9 2 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 0 movl $ 3 1 2 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 8 0 , % rsp movq $ 0 , - 6 4 (% rbp ) . LBB 2 : movq $ 0 , - 4 0 (% rbp ) movq 2 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq 4 8 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 7 2 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 0 4 (% rbp ) movq % rbx , - 2 9 6 (% rbp ) movq % rbx , - 2 8 8 (% rbp ) . LBB 3 : movq $ 0 , - 8 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 6 : jmp . L 2 . L 4 7 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq % r 1 2 , - 8 8 (% rbp ) . LBB 9 : movq - 8 0 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 3 cmpq % rax , - 8 8 (% rbp ) jl . L 3 6 . L 3 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq - 3 0 4 (% rbp ), % rsi movq - 8 8 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 2 4 0 (% rbp ) movq % rbx , - 2 3 2 (% rbp ) movq % rbx , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 2 2 4 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 . LBB 1 0 : movq - 2 4 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 6 . L 5 : . LBE 1 0 : . LBB 1 1 : movq - 2 4 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 : . LBE 1 1 : . LBE 9 : . LBE 8 : . LBB 1 2 : addq $ 1 , % r 1 2 . L 2 : . LBE 1 2 : cmpq % r 1 3 , % r 1 2 jl . L 4 7 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 3 : movq - 7 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 4 8 (% rbp ) . LBB 1 4 : jmp . L 9 . L 4 9 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 8 0 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 5 6 (% rbp ) . LBB 1 8 : jmp . L 1 0 . L 4 8 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : . LBB 2 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 1 cmpq % rax , - 4 8 (% rbp ) jl . L 3 8 . L 1 1 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq 4 8 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 3 cmpq % rax , - 5 6 (% rbp ) jl . L 3 9 . L 1 3 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq 1 6 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 4 0 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jne . L 1 5 . LBB 2 2 : movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 6 cmpq % rax , - 4 8 (% rbp ) jl . L 4 0 . L 1 6 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq - 3 0 4 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 8 cmpq % rax , - 5 6 (% rbp ) jl . L 4 1 . L 1 8 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq - 4 8 (% rbp ), % rax addq $ 1 , % rax movq - 2 9 6 (% rbp ), % rdx testq % rax , % rax js . L 2 0 cmpq % rdx , % rax jl . L 4 2 . L 2 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq - 3 0 4 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 5 6 (% rbp ), % rax addq $ 1 , % rax movq - 1 6 8 (% rbp ), % rdx testq % rax , % rax js . L 2 2 cmpq % rdx , % rax jge . L 2 2 movq - 1 7 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 2 0 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax addq $ 1 , % rdx movq % rdx , (% rax ) . LBB 2 3 : movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) jns . L 2 3 jmp . L 2 4 . L 2 2 : . LBE 2 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : . LBB 2 5 : cmpq % rax , - 4 8 (% rbp ) jl . L 4 3 . L 2 4 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq - 3 0 4 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 2 6 cmpq % rax , - 5 6 (% rbp ) jge . L 2 6 movq - 1 4 4 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 2 7 jmp . L 1 5 . L 2 6 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : . LBB 2 4 : movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 8 cmpq % rax , - 4 8 (% rbp ) jl . L 4 4 . L 2 8 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq - 3 0 4 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 3 0 cmpq % rax , - 5 6 (% rbp ) jge . L 3 0 movq - 1 1 2 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 4 0 (% rbp ) jmp . L 1 5 . L 3 0 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : . LBE 2 4 : . LBE 2 5 : . LBE 2 2 : . LBE 2 1 : . LBE 2 0 : . LBB 2 6 : subq $ 1 , - 5 6 (% rbp ) . L 1 0 : . LBE 2 6 : cmpq $ 0 , - 5 6 (% rbp ) jns . L 4 8 . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 2 7 : subq $ 1 , - 4 8 (% rbp ) . L 9 : . LBE 2 7 : cmpq $ 0 , - 4 8 (% rbp ) jns . L 4 9 . LBE 1 4 : . LBE 1 3 : . LBB 2 8 : movq - 4 0 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax . LBE 2 8 : . LBE 2 : addq $ 2 8 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 0 movl $ 2 4 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 0 : pushq % rbp movq % rsp , % rbp subq $ 2 4 0 , % rsp movl $ 1 2 , % edx movl $ 1 2 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx leaq main . months (% rip ), % rax movq % rdx , - 2 0 8 (% rbp ) movq $ 1 2 , - 2 0 0 (% rbp ) movq $ 1 2 , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 9 2 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 . LBB 2 : movq - 2 0 8 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 3 . L 2 : . LBE 2 : . LBB 3 : movq - 2 0 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 : . LBE 3 : movq $ 3 1 , - 1 7 6 (% rbp ) movq $ 2 9 , - 1 6 8 (% rbp ) movq $ 3 1 , - 1 6 0 (% rbp ) movq $ 3 0 , - 1 5 2 (% rbp ) movq $ 3 1 , - 1 4 4 (% rbp ) movq $ 3 0 , - 1 3 6 (% rbp ) movq $ 3 1 , - 1 2 8 (% rbp ) movq $ 3 1 , - 1 2 0 (% rbp ) movq $ 3 0 , - 1 1 2 (% rbp ) movq $ 3 1 , - 1 0 4 (% rbp ) movq $ 3 0 , - 9 6 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 1 , - 2 3 2 (% rbp ) movq $ 1 1 , - 2 2 4 (% rbp ) movq 8 + main . months (% rip ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq main . months (% rip ), % rax movq $ 0 , (% rax ) . LBB 4 : movq $ 0 , - 1 6 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % r 8 movl $ 0 , % esi . LBE 7 : jmp . L 5 . L 4 7 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq % rsi , - 1 6 (% rbp ) . LBB 1 0 : movq - 1 6 (% rbp ), % rax leaq 1 (% rax ), % rcx movq 8 + main . months (% rip ), % rax testq % rcx , % rcx js . L 6 cmpq % rax , % rcx jl . L 3 6 . L 6 : movq % rax , % rsi movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq 8 + main . months (% rip ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 8 cmpq % rax , - 1 6 (% rbp ) jl . L 3 7 . L 8 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 2 3 2 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 0 cmpq % rax , - 1 6 (% rbp ) jl . L 3 8 . L 1 0 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq main . months (% rip ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 2 4 0 (% rbp ), % rdi movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdi , % rax movq (% rax ), % rax leaq (% rdx ,% rax ), % rdi movabsq $ 5 2 7 0 4 9 8 3 0 6 7 7 4 1 5 7 6 0 5 , % rdx movq % rdi , % rax imulq % rdx movq % rdx , % rax sarq % rax movq % rdi , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rdx salq $ 3 , % rdx subq % rax , % rdx movq % rdi , % rax subq % rdx , % rax movq main . months (% rip ), % rdx salq $ 3 , % rcx addq % rcx , % rdx movq % rax , (% rdx ) . LBE 1 0 : . LBE 9 : . LBB 1 1 : addq $ 1 , % rsi . L 5 : . LBE 1 1 : cmpq % r 8 , % rsi jl . L 4 7 . LBE 6 : . LBE 5 : . LBE 4 : movq $ 0 , main . count (% rip ) . LBB 1 2 : movq $ 1 9 0 0 , - 8 (% rbp ) . LBB 1 3 : jmp . L 1 4 . L 4 9 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq $ 0 , - 2 4 (% rbp ) . LBB 1 7 : . LBB 1 8 : . LBB 1 9 : movq main . months (% rip ), % rax movq 8 + main . months (% rip ), % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq 1 6 + main . months (% rip ), % rax movq % rax , - 3 2 (% rbp ) movq - 4 0 (% rbp ), % rdi movl $ 0 , % ecx . LBE 1 9 : jmp . L 1 5 . L 4 8 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : movq % rcx , - 2 4 (% rbp ) . LBB 2 2 : . LBB 2 3 : . LBB 2 4 : . LBB 2 5 : movq - 8 (% rbp ), % rax andl $ 3 , % eax testq % rax , % rax sete % al testb % al , % al je . L 1 6 . LBB 2 6 : cmpq $ 1 , - 2 4 (% rbp ) setle % al . L 1 6 : . LBE 2 6 : . LBE 2 5 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 7 . LBB 2 7 : . LBB 2 8 : movq - 8 (% rbp ), % rax addq $ 1 , % rax andl $ 3 , % eax testq % rax , % rax sete % al testb % al , % al je . L 1 7 . LBB 2 9 : cmpq $ 1 , - 2 4 (% rbp ) setg % al . L 1 7 : . LBE 2 9 : . LBE 2 8 : . LBE 2 7 : . LBE 2 4 : testb % al , % al je . L 1 9 . LBB 3 0 : movq 8 + main . months (% rip ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 0 cmpq % rax , - 2 4 (% rbp ) jl . L 4 0 . L 2 0 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq 8 + main . months (% rip ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 2 cmpq % rax , - 2 4 (% rbp ) jl . L 4 1 . L 2 2 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq main . months (% rip ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax leaq 3 6 6 (% rax ), % rsi movabsq $ 5 2 7 0 4 9 8 3 0 6 7 7 4 1 5 7 6 0 5 , % rdx movq % rsi , % rax imulq % rdx movq % rdx , % rax sarq % rax movq % rsi , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rdx salq $ 3 , % rdx subq % rax , % rdx movq % rsi , % rax subq % rdx , % rax movq main . months (% rip ), % rsi movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rsi , % rdx movq % rax , (% rdx ) . LBE 3 0 : jmp . L 2 4 . L 1 9 : . LBB 3 1 : movq 8 + main . months (% rip ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 5 cmpq % rax , - 2 4 (% rbp ) jl . L 4 2 . L 2 5 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq 8 + main . months (% rip ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 7 cmpq % rax , - 2 4 (% rbp ) jl . L 4 3 . L 2 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq main . months (% rip ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax leaq 3 6 5 (% rax ), % rsi movabsq $ 5 2 7 0 4 9 8 3 0 6 7 7 4 1 5 7 6 0 5 , % rdx movq % rsi , % rax imulq % rdx movq % rdx , % rax sarq % rax movq % rsi , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rdx salq $ 3 , % rdx subq % rax , % rdx movq % rsi , % rax subq % rdx , % rax movq main . months (% rip ), % rsi movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rsi , % rdx movq % rax , (% rdx ) . L 2 4 : . LBE 3 1 : . LBE 2 3 : . LBB 3 2 : movq 8 + main . months (% rip ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 9 cmpq % rax , - 2 4 (% rbp ) jl . L 4 4 . L 2 9 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq main . months (% rip ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq $ 6 , % rax jne . L 3 1 . LBB 3 3 : movq main . count (% rip ), % rax addq $ 1 , % rax movq % rax , main . count (% rip ) . L 3 1 : . LBE 3 3 : . LBE 3 2 : . LBE 2 2 : . LBE 2 1 : . LBB 3 4 : addq $ 1 , % rcx . L 1 5 : . LBE 3 4 : cmpq % rdi , % rcx jl . L 4 8 . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBB 3 5 : addq $ 1 , - 8 (% rbp ) . L 1 4 : . LBE 3 5 : cmpq $ 1 9 9 9 , - 8 (% rbp ) jle . L 4 9 . LBE 1 3 : . LBE 1 2 : call runtime . printlock @ PLT movq main . count (% rip ), % rax movq % rax , % rdi call runtime . printint @ PLT call runtime . printnl @ PLT call runtime . printunlock @ PLT leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 3 7 9 movl $ 1 0 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 1 : ret . L 3 7 9 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 8 8 , % rsp movq % rdi , - 8 8 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 1 7 1 : movq - 8 8 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 8 0 (% rbp ) movq % rbx , - 7 2 (% rbp ) movq % rbx , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rax testq % rax , % rax jg . L 3 5 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 5 5 : movq - 8 0 (% rbp ), % rax movq $ 0 , (% rax ) . LBB 1 7 2 : movq $ 1 , - 2 4 (% rbp ) . LBB 1 7 3 : jmp . L 3 5 6 . L 3 7 8 : . LBB 1 7 4 : nop . LBE 1 7 4 : . LBB 1 7 5 : movq $- 1 , - 3 2 (% rbp ) . LBB 1 7 6 : movq $ 1 , - 4 0 (% rbp ) . LBB 1 7 7 : jmp . L 3 5 7 . L 3 7 7 : . LBB 1 7 8 : nop . LBE 1 7 8 : . LBB 1 7 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 5 8 cmpq % rax , - 4 0 (% rbp ) jl . L 3 7 1 . L 3 5 8 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 1 : movq - 2 4 (% rbp ), % rax subq - 4 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 3 6 0 cmpq % rdx , % rax jl . L 3 7 2 . L 3 6 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 7 2 : movq 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq - 8 0 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax addq % rax , % rdx movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . dynamic . Max movq % rax , - 3 2 (% rbp ) . LBE 1 7 9 : . LBB 1 8 0 : addq $ 1 , - 4 0 (% rbp ) . L 3 5 7 : . LBE 1 8 0 : movq - 4 0 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax jle . L 3 7 7 . LBE 1 7 7 : . LBE 1 7 6 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 6 4 cmpq % rax , - 2 4 (% rbp ) jl . L 3 7 4 . L 3 6 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 4 : movq - 8 0 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 3 2 (% rbp ), % rax movq % rax , (% rdx ) . LBE 1 7 5 : . LBB 1 8 1 : addq $ 1 , - 2 4 (% rbp ) . L 3 5 6 : . LBE 1 8 1 : movq - 2 4 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax jle . L 3 7 8 . LBE 1 7 3 : . LBE 1 7 2 : . LBB 1 8 2 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 3 6 8 cmpq % rax , - 8 8 (% rbp ) jl . L 3 7 6 . L 3 6 8 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 6 : movq - 8 0 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax . LBE 1 8 2 : . LBE 1 7 1 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 8 movl $ 3 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 8 8 , % rsp movq % rdi , - 2 8 0 (% rbp ) movq % rsi , - 2 8 8 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq $ 0 , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) . LBB 2 : . LBB 3 : movq $ 0 , - 3 2 (% rbp ) . LBB 4 : jmp . L 2 . L 1 6 : . LBB 5 : nop . LBE 5 : . LBB 6 : leaq - 2 4 0 (% rbp ), % rax movq % rax , % rdi call time . Now @ PLT leaq - 2 4 0 (% rbp ), % rax movq % rax , % rdi call time . Time . UnixNano @ PLT movq - 3 2 (% rbp ), % rdx addq % rdx , % rax movq % rax , % rdi call math .. z 2 frand . Seed @ PLT movl $ 6 5 5 3 6 , % edi call math .. z 2 frand . Intn @ PLT addq $ 1 , % rax movq % rax , - 4 8 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 3 . LBB 7 : movq - 2 0 8 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) . LBE 7 : jmp . L 4 . L 3 : . LBB 8 : movq - 2 0 8 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rdx movq % rcx , - 2 7 2 (% rbp ) movq % rax , - 2 6 4 (% rbp ) movq % rdx , - 2 5 6 (% rbp ) . L 4 : . LBE 8 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 4 8 (% rbp ), % rax movq % rax , (% rdx ) . LBE 6 : . LBB 9 : addq $ 1 , - 3 2 (% rbp ) . L 2 : . LBE 9 : movq - 2 8 8 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 3 2 (% rbp ) jl . L 1 6 . LBE 4 : . LBE 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 1 0 : movq $ 0 , - 4 0 (% rbp ) . LBB 1 1 : . LBB 1 2 : . LBB 1 3 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movl $ 0 , % eax . LBE 1 3 : jmp . L 7 . L 1 7 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 1 6 8 (% rbp ), % rdx testq % rax , % rax js . L 8 cmpq % rdx , % rax jge . L 8 movq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 1 6 : . LBB 1 7 : movq % rdx , - 4 0 (% rbp ) . LBE 1 7 : . LBB 1 8 : movq - 4 0 (% rbp ), % rdx addq % rdx , - 2 4 (% rbp ) . LBE 1 8 : . LBE 1 5 : . LBB 2 0 : addq $ 1 , % rax jmp . L 7 . L 8 : . LBE 2 0 : . LBB 2 1 : . LBB 1 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 : . LBE 1 9 : . LBE 2 1 : cmpq % rcx , % rax jl . L 1 7 . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rbx movq - 2 9 6 (% rbp ), % rax subq - 2 4 (% rbp ), % rax movq % rax , % r 1 2 leaq 1 (% rbx ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 1 . LBB 2 2 : movq - 1 4 4 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) . LBE 2 2 : jmp . L 1 2 . L 1 1 : . LBB 2 3 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq % rcx , - 2 7 2 (% rbp ) movq % rax , - 2 6 4 (% rbp ) movq % rdx , - 2 5 6 (% rbp ) . L 1 2 : . LBE 2 3 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) movq - 2 8 0 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 5 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 : movq - 2 8 0 (% rbp ), % rax addq $ 2 8 8 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 9 0 9 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 0 2 : ret . L 9 0 9 : pushq % rbp movq % rsp , % rbp movq % rdi , - 2 4 (% rbp ) movb % sil , - 2 5 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 9 1 2 : . LBB 9 1 3 : cmpb $ 0 , - 2 5 (% rbp ) je . L 9 0 7 . LBB 9 1 4 : . LBB 9 1 5 : movq - 4 0 (% rbp ), % rax movq 3 2 (% rax ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 9 0 8 . L 9 0 7 : . LBE 9 1 5 : . LBE 9 1 4 : . LBE 9 1 3 : . LBB 9 1 6 : movq - 4 0 (% rbp ), % rax movq 4 0 (% rax ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 9 0 8 : . LBE 9 1 6 : . LBE 9 1 2 : popq % rbp ret
. LFB 0 : leaq - 5 6 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 9 movl $ 5 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 2 0 , % rsp movq % rdi , - 5 2 0 (% rbp ) movq % rdx , % rcx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq $ 0 , - 4 0 0 (% rbp ) movq $ 0 , - 3 9 2 (% rbp ) movq $ 0 , - 3 8 4 (% rbp ) . LBB 2 : movl $ 0 , % edx movl $ 0 , % esi leaq string .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 3 2 (% rbp ) movq $ 0 , - 4 2 4 (% rbp ) movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 5 6 (% rbp ) leaq . LC 1 6 (% rip ), % r 1 2 movl $ 1 , % r 1 3 d leaq - 4 6 4 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rsi , % rdi movq % rbx , % r 8 movq - 5 4 4 (% rbp ), % rsi movq - 5 3 6 (% rbp ), % rdx movq % rdi , % rcx movq % rax , % rdi call strings . Split @ PLT movb $ 0 , - 5 7 (% rbp ) . LBB 3 : movq $ 0 , - 7 2 (% rbp ) movq $ 0 , - 4 8 0 (% rbp ) movq $ 0 , - 4 7 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 3 6 0 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 3 8 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 3 6 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 3 6 8 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rbx , - 7 2 (% rbp ) movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : leaq - 1 7 6 (% rbp ), % rdi movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx leaq - 3 3 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . stringtoslicerune @ PLT movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) . LBB 1 2 : . LBB 1 3 : movq - 4 7 2 (% rbp ), % rax testq % rax , % rax je . L 4 jmp . L 3 4 . L 3 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 3 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 3 4 : . LBB 3 5 : . LBB 1 7 : . LBB 1 5 : movq - 4 8 0 (% rbp ), % rax leaq . LC 1 7 (% rip ), % rdx cmpq % rdx , % rax jne . L 6 movl $ 1 , % eax jmp . L 8 . L 6 : movl $ 1 , % eax jmp . L 8 . L 3 4 : movl $ 0 , % eax . L 8 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 9 . LBB 1 4 : subq $ 8 , % rsp pushq - 4 9 6 (% rbp ) pushq - 5 0 4 (% rbp ) pushq - 5 1 2 (% rbp ) call go . day 4 3 1 . isValid addq $ 3 2 , % rsp xorl $ 1 , % eax . L 9 : . LBE 1 4 : . LBE 1 5 : testb % al , % al je . L 1 0 . LBB 1 6 : movb $ 0 , - 5 7 (% rbp ) jmp . L 3 0 . L 1 0 : . LBE 1 6 : . LBE 1 7 : . LBB 1 8 : . LBB 1 9 : movq - 5 0 4 (% rbp ), % rax testq % rax , % rax jg . L 1 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 2 : movq - 5 1 2 (% rbp ), % rax movl (% rax ), % eax cmpl $ 6 4 , % eax setg % al testb % al , % al je . L 1 3 . LBB 2 0 : movq - 5 0 4 (% rbp ), % rax testq % rax , % rax jg . L 1 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 4 : movq - 5 1 2 (% rbp ), % rax movl (% rax ), % eax cmpl $ 9 0 , % eax setle % al . L 1 3 : . LBE 2 0 : . LBE 1 9 : testb % al , % al je . L 1 5 . LBB 2 1 : movb $ 1 , - 5 7 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) jmp . L 3 0 . L 1 5 : . LBE 2 1 : . LBE 1 8 : . LBB 2 2 : movq - 5 0 4 (% rbp ), % rax subq $ 1 , % rax movq - 5 0 4 (% rbp ), % rdx testq % rax , % rax js . L 1 6 cmpq % rdx , % rax jl . L 3 5 . L 1 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 5 1 2 (% rbp ), % rdx salq $ 2 , % rax addq % rdx , % rax movl (% rax ), % eax movl % eax , - 7 6 (% rbp ) . LBB 2 3 : . LBB 2 4 : cmpl $ 4 6 , - 7 6 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 8 . LBB 2 5 : cmpl $ 3 3 , - 7 6 (% rbp ) sete % al . L 1 8 : . LBE 2 5 : . LBE 2 4 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 9 . LBB 2 6 : cmpl $ 6 3 , - 7 6 (% rbp ) sete % al . L 1 9 : . LBE 2 6 : . LBE 2 3 : testb % al , % al je . L 3 0 . LBB 2 7 : . LBB 2 8 : cmpb $ 0 , - 5 7 (% rbp ) je . L 3 0 . LBB 2 9 : movq - 7 2 (% rbp ), % rax leaq 1 (% rax ), % rdi movq - 4 4 8 (% rbp ), % rax testq % rdi , % rdi js . L 2 1 cmpq % rax , % rdi jg . L 2 1 cmpq $ 0 , - 5 6 (% rbp ) jns . L 2 2 jmp . L 2 3 . L 2 1 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 2 2 : cmpq % rdi , - 5 6 (% rbp ) jle . L 3 6 . L 2 3 : movq - 5 6 (% rbp ), % rax movq % rdi , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 3 6 : leaq . LC 1 6 (% rip ), % r 1 4 movl $ 1 , % r 1 5 d movq - 4 6 4 (% rbp ), % rdx movq - 4 4 8 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) je . L 2 5 movq - 5 6 (% rbp ), % rax salq $ 4 , % rax jmp . L 2 6 . L 2 5 : movl $ 0 , % eax . L 2 6 : addq % rdx , % rax movq % rax , - 1 4 4 (% rbp ) movq % rdi , % rax subq - 5 6 (% rbp ), % rax movq % rax , - 1 3 6 (% rbp ) movq - 4 4 8 (% rbp ), % rax subq - 5 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rsi , % rcx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call strings . Join @ PLT addq $ 3 2 , % rsp movq % rax , % r 1 2 movq % rdx , % r 1 3 movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 0 movq % r 1 0 , - 5 5 2 (% rbp ) leaq 1 (% r 1 0 ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 7 . LBB 3 0 : movq - 2 0 8 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 0 , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) . LBE 3 0 : jmp . L 2 8 . L 2 7 : . LBB 3 1 : movq - 2 0 8 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rdx movq % rcx , - 4 3 2 (% rbp ) movq % rax , - 4 2 4 (% rbp ) movq % rdx , - 4 1 6 (% rbp ) . L 2 8 : . LBE 3 1 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx salq $ 4 , % rdx addq % rdx , % rax movq % r 1 3 , % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 9 . LBB 3 2 : movq % r 1 2 , % rdx movq % rdx , (% rax ) jmp . L 3 0 . L 2 9 : . LBE 3 2 : . LBB 3 3 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 0 : . LBE 3 3 : . LBE 2 9 : . LBE 2 8 : . LBE 2 7 : . LBE 2 2 : . LBE 3 5 : . LBE 8 : . LBB 3 6 : addq $ 1 , % rbx . L 2 : . LBE 3 6 : cmpq - 5 2 8 (% rbp ), % rbx jl . L 3 8 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 3 7 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 5 2 0 (% rbp ), % rcx movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 8 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 7 : . LBE 2 : movq - 5 2 0 (% rbp ), % rax leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 9 movl $ 4 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 9 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 . LBB 4 : . LBB 5 : movq 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq $ 1 , - 8 (% rbp ) movq $ 1 , - 1 6 (% rbp ) . LBB 6 : movq $ 1 , - 2 4 (% rbp ) . LBB 7 : jmp . L 4 . L 1 8 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 5 cmpq % rax , - 2 4 (% rbp ) jl . L 1 5 . L 5 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 7 cmpq % rdx , % rax jl . L 1 6 . L 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jg . L 9 . LBB 1 1 : . LBB 1 2 : movq - 1 6 (% rbp ), % rax cmpq - 8 (% rbp ), % rax jle . L 1 0 . LBB 1 3 : movq - 1 6 (% rbp ), % rax movq % rax , - 8 (% rbp ) . L 1 0 : . LBE 1 3 : . LBE 1 2 : movq $ 1 , - 1 6 (% rbp ) . LBE 1 1 : jmp . L 1 1 . L 9 : . LBB 1 4 : addq $ 1 , - 1 6 (% rbp ) . L 1 1 : . LBE 1 4 : . LBE 1 0 : . LBB 1 5 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jge . L 1 2 . LBB 1 6 : movq - 1 6 (% rbp ), % rax movq % rax , - 8 (% rbp ) . L 1 2 : . LBE 1 6 : . LBE 1 5 : . LBE 9 : . LBB 1 7 : addq $ 1 , - 2 4 (% rbp ) . L 4 : . LBE 1 7 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 1 8 . LBE 7 : . LBE 6 : . LBB 1 8 : movq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 3 : . LBE 1 8 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 0 movl $ 2 0 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 6 8 , % rsp movq $ 0 , - 5 6 (% rbp ) . LBB 2 : leaq main . twoCitySchedCost .. func 1 (% rip ), % rdx leaq 1 6 (% rbp ), % rcx movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq % rax , - 1 2 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq % rdx , (% rax ) movq % rcx , 8 (% rax ) movq - 1 2 0 (% rbp ), % rbx leaq type ... 6 . 7 . 6 . 7 int (% rip ), % r 1 2 leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 3 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 : jmp . L 3 . L 2 : . LBB 4 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 4 : movq - 1 8 4 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call sort . Slice @ PLT movq $ 0 , - 4 0 (% rbp ) . LBB 5 : movq $ 0 , - 4 8 (% rbp ) . LBB 6 : jmp . L 4 . L 1 9 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq 2 4 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax cmpq - 4 8 (% rbp ), % rax jle . L 5 . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 6 cmpq % rax , - 4 8 (% rbp ) jl . L 1 6 . L 6 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : movq 1 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rax testq % rax , % rax jg . L 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 8 : movq - 1 1 2 (% rbp ), % rax movq (% rax ), % rax addq % rax , - 4 0 (% rbp ) . LBE 1 0 : jmp . L 9 . L 5 : . LBB 1 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 0 cmpq % rax , - 4 8 (% rbp ) jl . L 1 7 . L 1 0 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : movq 1 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 2 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 2 : movq - 8 0 (% rbp ), % rax addq $ 8 , % rax movq (% rax ), % rax addq % rax , - 4 0 (% rbp ) . L 9 : . LBE 1 1 : . LBE 9 : . LBE 8 : . LBB 1 2 : addq $ 1 , - 4 8 (% rbp ) . L 4 : . LBE 1 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 4 8 (% rbp ) jl . L 1 9 . LBE 6 : . LBE 5 : . LBB 1 3 : movq - 4 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax . LBE 1 3 : . LBE 2 : addq $ 1 6 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 6 3 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 2 movl $ 6 3 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 8 4 , % rsp movq % rdi , - 5 5 2 (% rbp ) movq $- 2 , - 3 6 8 (% rbp ) movq $ 0 , - 3 6 0 (% rbp ) movq $ 3 , - 3 5 2 (% rbp ) movq $- 5 , - 3 4 4 (% rbp ) movq $ 2 , - 3 3 6 (% rbp ) movq $- 1 , - 3 2 8 (% rbp ) leaq - 3 6 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 6 , - 3 9 2 (% rbp ) movq $ 6 , - 3 8 4 (% rbp ) leaq - 4 3 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 3 8 4 (% rbp ) pushq - 3 9 2 (% rbp ) pushq - 4 0 0 (% rbp ) movq % rax , % rdi call go . problem 3 0 3 . Constructor addq $ 3 2 , % rsp movq $ 0 , - 5 1 2 (% rbp ) movq $ 2 , - 5 0 4 (% rbp ) movq $ 1 , - 4 9 6 (% rbp ) movq $ 2 , - 4 8 8 (% rbp ) movq $ 5 , - 4 8 0 (% rbp ) movq $- 1 , - 4 7 2 (% rbp ) movq $ 0 , - 4 6 4 (% rbp ) movq $ 5 , - 4 5 6 (% rbp ) movq $- 3 , - 4 4 8 (% rbp ) . LBB 2 : movq $ 0 , - 5 4 4 (% rbp ) movq $ 0 , - 5 3 6 (% rbp ) movq $ 0 , - 5 2 8 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movl $ 3 , % r 1 3 d movl $ 0 , % r 1 2 d . LBE 5 : jmp . L 2 . L 1 1 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : testq % r 1 2 , % r 1 2 js . L 3 cmpq $ 2 , % r 1 2 jg . L 3 movq % r 1 2 , % rax addq % rax , % rax addq % r 1 2 , % rax salq $ 3 , % rax leaq - 4 8 (% rbp ), % rsi addq % rsi , % rax leaq - 2 4 0 (% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 0 4 (% rbp ) . LBE 8 : . LBB 9 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 5 3 6 (% rbp ), % rax movq - 5 4 4 (% rbp ), % rcx leaq - 4 3 2 (% rbp ), % rdi movq % rax , % rdx movq % rcx , % rsi call go . problem 3 0 3 . NumArray . SumRange movq % rax , - 5 6 (% rbp ) . LBB 1 1 : movq - 5 2 8 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 4 jmp . L 5 . L 3 : . LBE 1 1 : . LBE 1 0 : . LBB 1 6 : movl $ 3 , % esi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 6 : . LBB 1 7 : . LBB 1 5 : . LBB 1 2 : leaq int .. d (% rip ), % rbx movq % rbx , - 6 2 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq - 5 4 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 6 1 6 (% rbp ) movq % rbx , - 6 0 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 7 6 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 6 0 0 (% rbp ) movq % rbx , - 5 9 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 6 8 (% rbp ), % rax movq % rax , - 5 8 4 (% rbp ) movq % rbx , - 5 7 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 5 2 8 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 5 6 8 (% rbp ) leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movdqa - 6 2 4 (% rbp ), % xmm 0 movups % xmm 0 , - 1 4 4 (% rbp ) movdqa - 6 0 8 (% rbp ), % xmm 1 movups % xmm 1 , - 1 2 8 (% rbp ) movdqa - 5 9 2 (% rbp ), % xmm 2 movups % xmm 2 , - 1 1 2 (% rbp ) movdqa - 5 7 6 (% rbp ), % xmm 3 movups % xmm 3 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 1 3 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) . LBE 1 3 : jmp . L 7 . L 6 : . LBB 1 4 : movq - 1 5 2 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 1 4 : movq - 1 5 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 4 , - 7 2 (% rbp ) movq $ 4 , - 6 4 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 4 movl $ 2 8 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 5 5 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 5 : . LBE 1 2 : . LBE 1 5 : . LBE 1 7 : . LBE 7 : . LBB 1 8 : addq $ 1 , % r 1 2 . L 2 : . LBE 1 8 : cmpq % r 1 3 , % r 1 2 jl . L 1 1 . LBE 4 : . LBE 3 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 1 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 1 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : movq $ 0 , - 3 2 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movq - 4 0 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 1 0 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq - 4 0 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax movq (% rax ), % rax cmpq % rax , % rdx jne . L 3 . LBB 8 : movq - 4 0 (% rbp ), % rax addq $ 8 , % rax movq - 4 0 (% rbp ), % rdx movq 8 (% rdx ), % rdx movq 8 (% rdx ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 4 . LBB 9 : movq % rdx , (% rax ) jmp . L 2 . L 4 : . LBE 9 : . LBB 1 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 2 . L 3 : . LBE 1 0 : . LBE 8 : . LBB 1 1 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 0 (% rbp ) . L 2 : . LBE 1 1 : . LBE 7 : . LBE 6 : . LBB 1 2 : cmpq $ 0 , - 4 0 (% rbp ) setne % al testb % al , % al je . L 5 . LBB 1 3 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax setne % al . L 5 : . LBE 1 3 : . LBE 1 2 : testb % al , % al jne . L 1 0 . LBE 4 : . LBE 3 : . LBB 1 4 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . LBE 1 4 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 7 movl $ 1 6 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 4 4 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : leaq main . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq 1 6 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rdx , (% rax ) movq 2 4 (% rbp ), % rax movq % rax , % rsi leaq type .. chan . 0 . 1 main . TreeNode (% rip ), % rdi call runtime . makechan @ PLT movq % rax , - 4 8 (% rbp ) movq - 4 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) leaq - 8 0 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . chansend 1 @ PLT movq 3 2 (% rbp ), % rax testq % rax , % rax jg . L 5 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 5 : movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq 2 4 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rcx , 1 6 (% rbp ) movq % rdx , 2 4 (% rbp ) movq % rax , 3 2 (% rbp ) . LBB 6 : movq $ 0 , - 2 4 (% rbp ) . LBB 7 : jmp . L 6 . L 3 6 : . LBB 8 : nop . LBE 8 : . LBB 9 : leaq - 1 6 0 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . chanrecv 1 @ PLT movq - 1 6 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 7 cmpq % rax , - 2 4 (% rbp ) jl . L 3 1 . L 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq $- 1 , % rax jne . L 9 . LBB 1 1 : movq - 5 6 (% rbp ), % rax addq $ 8 , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 0 . LBB 1 2 : movq $ 0 , (% rax ) . LBE 1 2 : jmp . L 1 1 . L 1 0 : . LBB 1 3 : movl $ 0 , % esi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 1 1 . L 9 : . LBE 1 3 : . LBE 1 1 : . LBB 1 4 : movq - 5 6 (% rbp ), % rax leaq 8 (% rax ), % rbx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 2 cmpq % rax , - 2 4 (% rbp ) jl . L 3 2 . L 1 2 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 leaq main . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq % r 1 2 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 4 . LBB 1 5 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 5 : jmp . L 1 5 . L 1 4 : . LBB 1 6 : movq - 1 5 2 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq main . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 5 : . LBE 1 6 : movq - 1 5 2 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 6 . LBB 1 7 : movq % rax , (% rbx ) . LBE 1 7 : jmp . L 1 7 . L 1 6 : . LBB 1 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . gcWriteBarrier @ PLT . L 1 7 : . LBE 1 8 : movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 7 2 (% rbp ) leaq - 7 2 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . chansend 1 @ PLT . L 1 1 : . LBE 1 4 : . LBE 1 0 : addq $ 1 , - 2 4 (% rbp ) . LBB 1 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 8 cmpq % rax , - 2 4 (% rbp ) jl . L 3 3 . L 1 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq $- 1 , % rax jne . L 2 0 . LBB 2 0 : movq - 5 6 (% rbp ), % rax addq $ 1 6 , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 1 . LBB 2 1 : movq $ 0 , (% rax ) . LBE 2 1 : jmp . L 2 2 . L 2 1 : . LBB 2 2 : movl $ 0 , % esi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 2 2 . L 2 0 : . LBE 2 2 : . LBE 2 0 : . LBB 2 3 : movq - 5 6 (% rbp ), % rax leaq 1 6 (% rax ), % rbx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 3 cmpq % rax , - 2 4 (% rbp ) jl . L 3 4 . L 2 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 leaq main . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movq % r 1 2 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 5 . LBB 2 4 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 4 : jmp . L 2 6 . L 2 5 : . LBB 2 5 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq main . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 6 : . LBE 2 5 : movq - 1 2 0 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 7 . LBB 2 6 : movq % rax , (% rbx ) . LBE 2 6 : jmp . L 2 8 . L 2 7 : . LBB 2 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . gcWriteBarrier @ PLT . L 2 8 : . LBE 2 7 : movq - 5 6 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 6 4 (% rbp ) leaq - 6 4 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . chansend 1 @ PLT . L 2 2 : . LBE 2 3 : . LBE 1 9 : . LBE 9 : . LBB 2 8 : addq $ 1 , - 2 4 (% rbp ) . L 6 : . LBE 2 8 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 3 6 . LBE 7 : . LBE 6 : . LBB 2 9 : movq - 4 0 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 3 : . LBE 2 9 : . LBE 2 : addq $ 1 4 4 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 4 movl $ 8 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp subq $ 8 0 , % rsp movq % rdi , - 7 2 (% rbp ) movq % rsi , - 8 0 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) movq $ 0 , - 1 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 3 : movq $ 0 , - 4 0 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rcx movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 1 3 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq - 6 4 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 9 : . LBB 1 0 : movq % rdx , - 4 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 4 0 (% rbp ), % rdx cmpq - 7 2 (% rbp ), % rdx jl . L 4 jmp . L 1 1 . L 3 : . LBE 1 2 : . LBE 1 1 : . LBB 2 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 2 0 : . LBB 2 1 : . LBB 1 9 : . LBB 1 3 : addq $ 1 , - 1 6 (% rbp ) movq - 8 (% rbp ), % rdx addq % rdx , - 2 4 (% rbp ) . LBE 1 3 : jmp . L 6 . L 1 1 : . LBB 1 4 : . LBB 1 5 : movq - 4 0 (% rbp ), % rdx cmpq - 8 0 (% rbp ), % rdx jg . L 7 . LBB 1 6 : movq - 1 6 (% rbp ), % rsi movq - 8 (% rbp ), % rdx addq % rsi , % rdx addq $ 1 , % rdx movq % rdx , - 8 (% rbp ) movq $ 0 , - 1 6 (% rbp ) movq - 8 (% rbp ), % rdx addq % rdx , - 2 4 (% rbp ) . LBE 1 6 : jmp . L 6 . L 7 : . LBB 1 7 : . LBB 1 8 : movl $ 0 , % esi movl $ 0 , % edx movq % rsi , - 8 (% rbp ) movq % rdx , - 1 6 (% rbp ) . L 6 : . LBE 1 8 : . LBE 1 7 : . LBE 1 5 : . LBE 1 4 : . LBE 1 9 : . LBE 2 1 : . LBE 8 : . LBB 2 2 : addq $ 1 , % rax . L 2 : . LBE 2 2 : cmpq % rcx , % rax jl . L 1 3 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 2 3 : movq - 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . LBE 2 3 : . LBE 2 : leave ret
. LFB 1 8 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 9 9 1 movl $ 1 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 3 1 : ret . L 4 9 9 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 8 0 , % rsp movq % rdi , - 8 8 (% rbp ) movb $ 0 , - 1 8 (% rbp ) . LBB 4 0 0 9 : call runtime . makemap_small @ PLT movq % rax , - 3 2 (% rbp ) movb $ 0 , - 1 7 (% rbp ) . LBB 4 0 1 0 : movq - 8 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) leaq - 6 4 (% rbp ), % rax movq (% rax ), % rdx movq - 3 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 bool (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movl % edx , % eax movb % al , - 1 7 (% rbp ) . LBE 4 0 1 0 : . LBB 4 0 1 1 : . LBB 4 0 1 2 : jmp . L 4 9 7 4 . L 4 9 9 0 : . LBB 4 0 1 3 : nop . LBE 4 0 1 3 : . LBB 4 0 1 4 : . LBB 4 0 1 5 : movq - 8 8 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movl $ 1 , % ebx leaq - 5 6 (% rbp ), % rax movq (% rax ), % rdx movq - 3 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 bool (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movb % bl , (% rax ) . LBE 4 0 1 5 : movq - 8 8 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq $ 0 , - 8 8 (% rbp ) . LBB 4 0 1 6 : movl $ 0 , - 3 6 (% rbp ) . LBB 4 0 1 7 : . LBB 4 0 1 8 : . LBB 4 0 1 9 : movq - 7 2 (% rbp ), % r 1 2 movl $ 0 , % eax . LBE 4 0 1 9 : jmp . L 4 9 7 5 . L 4 9 8 9 : . LBB 4 0 2 0 : nop . LBE 4 0 2 0 : . LBB 4 0 2 1 : . LBB 4 0 2 2 : movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 4 9 7 6 cmpq % rdx , % rax jge . L 4 9 7 6 movq - 8 0 (% rbp ), % rdx movq % rax , % rcx addq % rcx , % rdx movzbl (% rdx ), % edx movzbl % dl , % edx cmpl $ 1 2 7 , % edx jle . L 4 9 7 7 jmp . L 4 9 8 6 . L 4 9 7 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 9 7 7 : . LBB 4 0 2 3 : addq $ 1 , % rax . LBE 4 0 2 3 : jmp . L 4 9 7 9 . L 4 9 8 6 : . LBB 4 0 2 4 : movq - 8 0 (% rbp ), % rsi movq - 7 2 (% rbp ), % rcx movq % rax , % rdx movq % rsi , % rdi movq % rcx , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movl % ecx , % edx movq % rbx , % rax . L 4 9 7 9 : . LBE 4 0 2 4 : . LBE 4 0 2 2 : . LBB 4 0 2 5 : movl % edx , - 3 6 (% rbp ) . LBE 4 0 2 5 : . LBB 4 0 2 6 : movl - 3 6 (% rbp ), % edx leal - 4 8 (% rdx ), % ecx movl - 3 6 (% rbp ), % edx subl $ 4 8 , % edx imull % ecx , % edx movslq % edx , % rdx addq % rdx , - 8 8 (% rbp ) . L 4 9 7 5 : . LBE 4 0 2 6 : . LBE 4 0 2 1 : cmpq % r 1 2 , % rax jl . L 4 9 8 9 . LBE 4 0 1 8 : . LBE 4 0 1 7 : . LBE 4 0 1 6 : . LBB 4 0 2 7 : movq - 8 8 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) leaq - 4 8 (% rbp ), % rax movq (% rax ), % rdx movq - 3 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 bool (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movl % edx , % eax movb % al , - 1 7 (% rbp ) . L 4 9 7 4 : . LBE 4 0 2 7 : . LBE 4 0 1 4 : . LBB 4 0 2 8 : cmpq $ 1 , - 8 8 (% rbp ) setne % al testb % al , % al je . L 4 9 8 2 . LBB 4 0 2 9 : movzbl - 1 7 (% rbp ), % eax xorl $ 1 , % eax . L 4 9 8 2 : . LBE 4 0 2 9 : . LBE 4 0 2 8 : testb % al , % al jne . L 4 9 9 0 . LBE 4 0 1 2 : . LBE 4 0 1 1 : . LBB 4 0 3 0 : cmpq $ 1 , - 8 8 (% rbp ) sete % al movb % al , - 1 8 (% rbp ) movzbl - 1 8 (% rbp ), % eax . LBE 4 0 3 0 : . LBE 4 0 0 9 : addq $ 8 0 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 8 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 8 : pushq % rbp movq % rsp , % rbp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) . LBB 3 : . LBB 4 : movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rdx , % rcx cmpq $ 1 , % rcx jne . L 2 movq % rax , % rsi leaq . LC 2 (% rip ), % rcx cmpq % rcx , % rsi jne . L 3 movl $ 0 , % ecx jmp . L 5 . L 3 : movq % rax , % rcx movzbl (% rcx ), % ecx movzbl % cl , % ecx leaq . LC 2 (% rip ), % rsi movzbl (% rsi ), % esi movzbl % sil , % esi subl % esi , % ecx testl % ecx , % ecx setne % cl jmp . L 5 . L 2 : movl $ 1 , % ecx . L 5 : testb % cl , % cl jne . L 5 1 . LBB 5 : movq $ 1 , - 8 (% rbp ) jmp . L 8 . L 5 1 : . LBE 5 : . LBB 6 : nop . LBE 6 : movq % rdx , % rcx cmpq $ 1 , % rcx jne . L 9 movq % rax , % rsi leaq . LC 3 (% rip ), % rcx cmpq % rcx , % rsi jne . L 1 0 movl $ 0 , % ecx jmp . L 1 2 . L 1 0 : movq % rax , % rcx movzbl (% rcx ), % ecx movzbl % cl , % ecx leaq . LC 3 (% rip ), % rsi movzbl (% rsi ), % esi movzbl % sil , % esi subl % esi , % ecx testl % ecx , % ecx setne % cl jmp . L 1 2 . L 9 : movl $ 1 , % ecx . L 1 2 : testb % cl , % cl jne . L 5 2 . LBB 7 : movq $ 5 , - 8 (% rbp ) jmp . L 8 . L 5 2 : . LBE 7 : . LBB 8 : nop . LBE 8 : movq % rdx , % rcx cmpq $ 1 , % rcx jne . L 1 5 movq % rax , % rsi leaq . LC 4 (% rip ), % rcx cmpq % rcx , % rsi jne . L 1 6 movl $ 0 , % ecx jmp . L 1 8 . L 1 6 : movq % rax , % rcx movzbl (% rcx ), % ecx movzbl % cl , % ecx leaq . LC 4 (% rip ), % rsi movzbl (% rsi ), % esi movzbl % sil , % esi subl % esi , % ecx testl % ecx , % ecx setne % cl jmp . L 1 8 . L 1 5 : movl $ 1 , % ecx . L 1 8 : testb % cl , % cl jne . L 5 3 . LBB 9 : movq $ 1 0 , - 8 (% rbp ) jmp . L 8 . L 5 3 : . LBE 9 : . LBB 1 0 : nop . LBE 1 0 : movq % rdx , % rcx cmpq $ 1 , % rcx jne . L 2 1 movq % rax , % rsi leaq . LC 5 (% rip ), % rcx cmpq % rcx , % rsi jne . L 2 2 movl $ 0 , % ecx jmp . L 2 4 . L 2 2 : movq % rax , % rcx movzbl (% rcx ), % ecx movzbl % cl , % ecx leaq . LC 5 (% rip ), % rsi movzbl (% rsi ), % esi movzbl % sil , % esi subl % esi , % ecx testl % ecx , % ecx setne % cl jmp . L 2 4 . L 2 1 : movl $ 1 , % ecx . L 2 4 : testb % cl , % cl jne . L 5 4 . LBB 1 1 : movq $ 5 0 , - 8 (% rbp ) jmp . L 8 . L 5 4 : . LBE 1 1 : . LBB 1 2 : nop . LBE 1 2 : movq % rdx , % rcx cmpq $ 1 , % rcx jne . L 2 7 movq % rax , % rsi leaq . LC 6 (% rip ), % rcx cmpq % rcx , % rsi jne . L 2 8 movl $ 0 , % ecx jmp . L 3 0 . L 2 8 : movq % rax , % rcx movzbl (% rcx ), % ecx movzbl % cl , % ecx leaq . LC 6 (% rip ), % rsi movzbl (% rsi ), % esi movzbl % sil , % esi subl % esi , % ecx testl % ecx , % ecx setne % cl jmp . L 3 0 . L 2 7 : movl $ 1 , % ecx . L 3 0 : testb % cl , % cl jne . L 5 5 . LBB 1 3 : movq $ 1 0 0 , - 8 (% rbp ) jmp . L 8 . L 5 5 : . LBE 1 3 : . LBB 1 4 : nop . LBE 1 4 : movq % rdx , % rcx cmpq $ 1 , % rcx jne . L 3 3 movq % rax , % rsi leaq . LC 7 (% rip ), % rcx cmpq % rcx , % rsi jne . L 3 4 movl $ 0 , % ecx jmp . L 3 6 . L 3 4 : movq % rax , % rcx movzbl (% rcx ), % ecx movzbl % cl , % ecx leaq . LC 7 (% rip ), % rsi movzbl (% rsi ), % esi movzbl % sil , % esi subl % esi , % ecx testl % ecx , % ecx setne % cl jmp . L 3 6 . L 3 3 : movl $ 1 , % ecx . L 3 6 : testb % cl , % cl jne . L 5 6 . LBB 1 5 : movq $ 5 0 0 , - 8 (% rbp ) jmp . L 8 . L 5 6 : . LBE 1 5 : . LBB 1 6 : nop . LBE 1 6 : movq % rdx , % rcx cmpq $ 1 , % rcx jne . L 3 9 movq % rax , % rsi leaq . LC 8 (% rip ), % rcx cmpq % rcx , % rsi jne . L 4 0 movl $ 0 , % eax jmp . L 4 2 . L 4 0 : movzbl (% rax ), % eax movzbl % al , % eax leaq . LC 8 (% rip ), % rdx movzbl (% rdx ), % edx movzbl % dl , % edx subl % edx , % eax testl % eax , % eax setne % al jmp . L 4 2 . L 3 9 : movl $ 1 , % eax . L 4 2 : testb % al , % al jne . L 5 7 . LBB 1 7 : movq $ 1 0 0 , - 8 (% rbp ) jmp . L 8 . L 5 7 : . LBE 1 7 : . LBB 1 8 : nop . L 8 : . LBE 1 8 : . LBE 4 : . LBE 3 : . LBB 1 9 : movq - 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax . LBE 1 9 : . LBE 2 : popq % rbp ret
. LFB 2 6 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 movl $ 8 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 : pushq % rbp movq % rsp , % rbp subq $ 8 0 , % rsp movq % rdi , - 7 2 (% rbp ) movq $ 0 , - 3 2 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 2 : movq $ 0 , - 6 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 4 8 (% rbp ) movq 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) . LBB 3 : cmpq $ 0 , - 8 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 7 2 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 8 (% rbp ), % rax leaq - 1 (% rax ), % rcx leaq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdx movq % rcx , % rsi movl $ 0 , % edi call main . helper addq $ 3 2 , % rsp . LBB 6 : movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 7 2 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 6 : . LBE 2 : movq - 7 2 (% rbp ), % rax leave ret
. LFB 1 : leaq - 1 0 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 1 0 movl $ 1 0 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 1 1 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 0 4 8 , % rsp movq % rdi , - 1 0 3 2 (% rbp ) leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 2 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 2 0 (% rbp ) movq - 9 2 0 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq - 9 2 0 (% rbp ), % rax movq % rax , - 8 9 6 (% rbp ) movq $ 3 , - 8 8 8 (% rbp ) movq $ 3 , - 8 8 0 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 1 2 (% rbp ) movq - 9 1 2 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq - 9 1 2 (% rbp ), % rax movq % rax , - 8 7 2 (% rbp ) movq $ 3 , - 8 6 4 (% rbp ) movq $ 3 , - 8 5 6 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 0 4 (% rbp ) movq - 9 0 4 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq - 9 0 4 (% rbp ), % rax movq % rax , - 8 4 8 (% rbp ) movq $ 3 , - 8 4 0 (% rbp ) movq $ 3 , - 8 3 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 4 . LBB 4 6 : movq - 9 2 8 (% rbp ), % rax movq - 8 9 6 (% rbp ), % rcx movq - 8 8 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 8 8 0 (% rbp ), % rcx movq - 8 7 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 8 6 4 (% rbp ), % rcx movq - 8 5 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 8 4 8 (% rbp ), % rcx movq - 8 4 0 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 8 3 2 (% rbp ), % rdx movq % rdx , 6 4 (% rax ) . LBE 4 6 : jmp . L 9 5 . L 9 4 : . LBB 4 7 : movq - 9 2 8 (% rbp ), % rax leaq - 8 9 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 5 : . LBE 4 7 : movq - 9 2 8 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 3 , - 5 8 4 (% rbp ) movq $ 3 , - 5 7 6 (% rbp ) movq $ 2 , - 5 6 8 (% rbp ) leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 1 6 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 0 8 (% rbp ) movq - 8 0 8 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 0 , 8 (% rax ) movq - 8 0 8 (% rbp ), % rax movq % rax , - 7 8 4 (% rbp ) movq $ 2 , - 7 7 6 (% rbp ) movq $ 2 , - 7 6 8 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 0 0 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 1 , 8 (% rax ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 7 6 0 (% rbp ) movq $ 2 , - 7 5 2 (% rbp ) movq $ 2 , - 7 4 4 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 9 2 (% rbp ) movq - 7 9 2 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 0 , 8 (% rax ) movq - 7 9 2 (% rbp ), % rax movq % rax , - 7 3 6 (% rbp ) movq $ 2 , - 7 2 8 (% rbp ) movq $ 2 , - 7 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 6 . LBB 4 8 : movq - 8 1 6 (% rbp ), % rax movq - 7 8 4 (% rbp ), % rcx movq - 7 7 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 7 6 8 (% rbp ), % rcx movq - 7 6 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 7 5 2 (% rbp ), % rcx movq - 7 4 4 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 7 3 6 (% rbp ), % rcx movq - 7 2 8 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 7 2 0 (% rbp ), % rdx movq % rdx , 6 4 (% rax ) . LBE 4 8 : jmp . L 9 7 . L 9 6 : . LBB 4 9 : movq - 8 1 6 (% rbp ), % rax leaq - 7 8 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 7 : . LBE 4 9 : movq - 8 1 6 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 3 , - 5 5 2 (% rbp ) movq $ 3 , - 5 4 4 (% rbp ) movq $ 0 , - 5 3 6 (% rbp ) leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 0 4 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 9 6 (% rbp ) movq - 6 9 6 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq - 6 9 6 (% rbp ), % rax movq % rax , - 6 7 2 (% rbp ) movq $ 4 , - 6 6 4 (% rbp ) movq $ 4 , - 6 5 6 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 8 8 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 6 4 8 (% rbp ) movq $ 4 , - 6 4 0 (% rbp ) movq $ 4 , - 6 3 2 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 8 0 (% rbp ) movq - 6 8 0 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq - 6 8 0 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) movq $ 4 , - 6 1 6 (% rbp ) movq $ 4 , - 6 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 8 . LBB 5 0 : movq - 7 0 4 (% rbp ), % rax movq - 6 7 2 (% rbp ), % rcx movq - 6 6 4 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 6 5 6 (% rbp ), % rcx movq - 6 4 8 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 6 4 0 (% rbp ), % rcx movq - 6 3 2 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 6 2 4 (% rbp ), % rcx movq - 6 1 6 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 6 0 8 (% rbp ), % rdx movq % rdx , 6 4 (% rax ) . LBE 5 0 : jmp . L 9 9 . L 9 8 : . LBB 5 1 : movq - 7 0 4 (% rbp ), % rax leaq - 6 7 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 9 : . LBE 5 1 : movq - 7 0 4 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 3 , - 5 2 0 (% rbp ) movq $ 3 , - 5 1 2 (% rbp ) movq $ 0 , - 5 0 4 (% rbp ) leaq - 5 9 2 (% rbp ), % rax movq % rax , - 9 6 0 (% rbp ) movq $ 3 , - 9 5 2 (% rbp ) movq $ 3 , - 9 4 4 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 1 0 5 6 (% rbp ) movq $ 6 8 , - 1 0 4 8 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 1 0 5 6 (% rbp ), % rcx movq - 1 0 4 8 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) . LBB 5 2 : movq $ 0 , - 1 0 2 4 (% rbp ) movq $ 0 , - 1 0 1 6 (% rbp ) movq $ 0 , - 1 0 0 8 (% rbp ) movq $ 0 , - 1 0 0 0 (% rbp ) . LBB 5 3 : . LBB 5 4 : . LBB 5 5 : movq - 9 6 0 (% rbp ), % rax movq - 9 5 2 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 9 4 4 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 1 0 5 6 (% rbp ) movl $ 0 , % ebx . LBE 5 5 : jmp . L 1 0 0 . L 1 0 9 : . LBB 5 6 : nop . LBE 5 6 : . LBB 5 7 : . LBB 5 8 : movq - 4 2 4 (% rbp ), % rax testq % rbx , % rbx js . L 1 0 1 cmpq % rax , % rbx jge . L 1 0 1 movq - 4 3 2 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) . LBE 5 8 : . LBB 5 9 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 1 0 2 4 (% rbp ) movq % rdx , - 1 0 1 6 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 1 0 0 8 (% rbp ) movq % rdx , - 1 0 0 0 (% rbp ) . LBE 5 9 : . LBB 6 0 : movq - 1 0 0 0 (% rbp ), % rax movq % rax , - 9 6 8 (% rbp ) movq - 1 0 2 4 (% rbp ), % rax movq - 1 0 1 6 (% rbp ), % rdx movq % rax , - 9 9 2 (% rbp ) movq % rdx , - 9 8 4 (% rbp ) movq - 1 0 0 8 (% rbp ), % rax movq % rax , - 9 7 6 (% rbp ) subq $ 8 , % rsp pushq - 9 7 6 (% rbp ) pushq - 9 8 4 (% rbp ) pushq - 9 9 2 (% rbp ) call go . leetcode . uniquePathsWithObstacles addq $ 3 2 , % rsp movq % rax , - 1 0 4 0 (% rbp ) leaq go . leetcode .. go . leetcode . para 6 3 .. d (% rip ), % rax movq % rax , - 1 0 8 8 (% rbp ) leaq go . leetcode .. go . leetcode . para 6 3 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 9 9 2 (% rbp ), % rax movq - 9 8 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 9 7 6 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 1 0 2 jmp . L 1 0 7 . L 1 0 1 : . LBE 6 0 : . LBB 6 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 2 : . LBE 6 3 : . LBB 6 4 : . LBB 6 1 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 1 : jmp . L 1 0 4 . L 1 0 7 : . LBB 6 2 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 6 3 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 4 : . LBE 6 2 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 1 0 8 0 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 1 0 7 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 1 0 4 0 (% rbp ), % rsi movq % rsi , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 1 0 6 4 (% rbp ) movdqa - 1 0 8 8 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 1 0 7 2 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) . LBE 6 4 : . LBE 5 7 : . LBB 6 5 : addq $ 1 , % rbx . L 1 0 0 : . LBE 6 5 : cmpq - 1 0 5 6 (% rbp ), % rbx jl . L 1 0 9 . LBE 5 4 : . LBE 5 3 : . LBE 5 2 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 2 2 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 3 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 1 3 : pushq % rbp movq % rsp , % rbp movq % rdi , - 5 6 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 9 : movq $ 0 , - 8 (% rbp ) movq $ 1 , - 1 6 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 1 0 : movq $ 1 , - 2 4 (% rbp ) . LBB 1 1 : jmp . L 7 . L 1 2 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : movq - 8 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax leaq (% rdx ,% rax ), % rcx movabsq $- 8 5 4 3 2 2 3 8 2 8 7 5 1 1 5 1 1 3 1 , % rdx movq % rcx , % rax imulq % rdx leaq (% rdx ,% rcx ), % rax sarq $ 2 9 , % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax imulq $ 1 0 0 0 0 0 0 0 0 7 , % rax , % rdx movq % rcx , % rax subq % rdx , % rax movq % rax , - 4 0 (% rbp ) movq - 1 6 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 4 0 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) . LBE 1 3 : . LBB 1 4 : addq $ 1 , - 2 4 (% rbp ) . L 7 : . LBE 1 4 : movq - 2 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jle . L 1 2 . LBE 1 1 : . LBE 1 0 : . LBB 1 5 : movq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . LBE 1 5 : . LBE 9 : popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 5 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 3 2 (% rbp ) movq % rdi , - 2 4 (% rbp ) movq % rdx , - 4 8 (% rbp ) movq % rcx , - 4 0 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 3 : . LBB 2 4 : movq - 2 4 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax cmpq % rax , % rdx jne . L 1 8 movq - 3 2 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax cmpq % rax , % rdx jne . L 1 9 movl $ 1 , % eax jmp . L 2 1 . L 1 9 : movq - 4 0 (% rbp ), % rax movq % rax , % rdx movq - 4 8 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 2 1 . L 1 8 : movl $ 0 , % eax . L 2 1 : testb % al , % al je . L 2 2 . LBB 2 5 : . LBB 2 6 : movq $- 1 , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 2 3 . L 2 2 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBB 2 7 : movq - 2 4 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax cmpq % rax , % rdx jle . L 2 4 . LBB 2 8 : . LBB 2 9 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 2 3 . L 2 4 : . LBE 2 9 : . LBE 2 8 : . LBE 2 7 : . LBB 3 0 : movq - 4 0 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 2 3 : . LBE 3 0 : . LBE 2 3 : leave ret
. LFB 0 : leaq - 6 3 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 8 movl $ 6 3 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 9 2 , % rsp movq % rdi , - 6 1 6 (% rbp ) leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 int . 2 . go . Solution . input 2 . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 7 6 (% rbp ) leaq . LC 5 1 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 4 4 8 (% rbp ) movq % r 1 3 , - 4 4 0 (% rbp ) leaq type ... 6 6 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 8 (% rbp ) movq - 5 6 8 (% rbp ), % rax movq $- 2 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $- 5 , 2 4 (% rax ) movq $ 2 , 3 2 (% rax ) movq $- 1 , 4 0 (% rax ) movq - 5 6 8 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq $ 6 , - 4 2 4 (% rbp ) movq $ 6 , - 4 1 6 (% rbp ) leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 0 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 5 2 (% rbp ) movq - 5 5 2 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 2 , 8 (% rax ) movq - 5 5 2 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 2 , - 5 2 0 (% rbp ) movq $ 2 , - 5 1 2 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 4 4 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 5 , 8 (% rax ) movq - 5 4 4 (% rbp ), % rax movq % rax , - 5 0 4 (% rbp ) movq $ 2 , - 4 9 6 (% rbp ) movq $ 2 , - 4 8 8 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 3 6 (% rbp ) movq - 5 3 6 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 5 , 8 (% rax ) movq - 5 3 6 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq $ 2 , - 4 7 2 (% rbp ) movq $ 2 , - 4 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 5 6 0 (% rbp ), % rax movq - 5 2 8 (% rbp ), % rcx movq - 5 2 0 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 5 1 2 (% rbp ), % rcx movq - 5 0 4 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 4 9 6 (% rbp ), % rcx movq - 4 8 8 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 4 8 0 (% rbp ), % rcx movq - 4 7 2 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 4 6 4 (% rbp ), % rdx movq % rdx , 6 4 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 5 6 0 (% rbp ), % rax leaq - 5 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 5 6 0 (% rbp ), % rax movq % rax , - 4 0 8 (% rbp ) movq $ 3 , - 4 0 0 (% rbp ) movq $ 3 , - 3 9 2 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 5 6 (% rbp ) movq - 4 5 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $- 1 , 8 (% rax ) movq $- 3 , 1 6 (% rax ) movq - 4 5 6 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 3 , - 3 7 6 (% rbp ) movq $ 3 , - 3 6 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 5 7 6 (% rbp ), % rax movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 3 6 8 (% rbp ), % rdx movq % rdx , 8 0 (% rax ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 5 7 6 (% rbp ), % rax leaq - 4 4 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 int . 2 . go . Solution . input 2 . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 5 7 6 (% rbp ), % rax movq % rax , - 6 0 8 (% rbp ) movq $ 1 , - 6 0 0 (% rbp ) movq $ 1 , - 5 9 2 (% rbp ) . LBB 6 : movq $ 0 , - 4 0 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 int . 2 . go . Solution . input 2 . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 (% rbp ) . LBB 7 : . LBB 8 : . LBB 9 : movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 9 : jmp . L 6 . L 1 7 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 2 4 8 (% rbp ), % rax testq % rbx , % rbx js . L 7 cmpq % rax , % rbx jge . L 7 movq - 2 5 6 (% rbp ), % rcx movq % rbx , % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 3 5 2 (% rbp ) movq % rdi , - 3 4 4 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 3 3 6 (% rbp ) movq % rdi , - 3 2 8 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 3 2 0 (% rbp ) movq % rdi , - 3 1 2 (% rbp ) movq 4 8 (% rax ), % rsi movq 5 6 (% rax ), % rdi movq % rsi , - 3 0 4 (% rbp ) movq % rdi , - 2 9 6 (% rbp ) movq 6 4 (% rax ), % rsi movq 7 2 (% rax ), % rdi movq % rsi , - 2 8 8 (% rbp ) movq % rdi , - 2 8 0 (% rbp ) movq 8 0 (% rax ), % rax movq % rax , - 2 7 2 (% rbp ) . LBE 1 2 : . LBB 1 3 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq % rbx , - 4 0 (% rbp ) movq - 4 8 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 8 jmp . L 1 5 . L 7 : . LBE 1 3 : . LBB 1 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 8 : . LBE 1 6 : . LBB 1 7 : . LBB 1 4 : movq - 2 2 4 (% rbp ), % rsi movq - 2 1 6 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 2 0 8 (% rbp ), % rsi movq - 2 0 0 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 4 8 (% rax ) movq % rdi , 5 6 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 6 4 (% rax ) movq % rdi , 7 2 (% rax ) movq - 1 4 4 (% rbp ), % rdx movq % rdx , 8 0 (% rax ) jmp . L 1 0 . L 1 5 : . LBE 1 4 : . LBB 1 5 : leaq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 int . 2 . go . Solution . input 2 . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 5 : . LBE 1 7 : . LBB 1 8 : movq - 4 0 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 4 8 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 2 8 (% rbp ) movq % rdi , - 1 2 0 (% rbp ) leaq . LC 5 2 (% rip ), % rcx movq % rcx , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 4 8 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 int . 2 . go . Solution . input 2 . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq % r 1 4 , - 6 4 (% rbp ) movq % r 1 2 , - 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 . LBB 1 9 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 9 : jmp . L 1 2 . L 1 1 : . LBB 2 0 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 . 6 . 7 int . 2 . go . Solution . input 2 . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 : . LBE 2 0 : movq - 7 2 (% rbp ), % r 1 2 leaq - 1 2 8 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 6 1 6 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 8 : . LBE 1 1 : . LBB 2 1 : addq $ 1 , % rbx . L 6 : . LBE 2 1 : cmpq % r 1 3 , % rbx jl . L 1 7 . LBE 8 : . LBE 7 : . LBE 6 : addq $ 5 9 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 5 movl $ 1 5 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx addq $- 1 2 8 , % rsp movq % rdi , - 1 3 6 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 1 4 : movq 2 4 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . LBB 1 5 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 1 3 . LBB 1 6 : . LBB 1 7 : movq $ 0 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 1 4 . L 1 3 : . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBB 1 8 : movq $ 0 , - 3 2 (% rbp ) . LBB 1 9 : jmp . L 1 5 . L 3 4 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : . LBB 2 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 6 cmpq % rax , - 3 2 (% rbp ) jl . L 3 0 . L 1 6 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 1 3 6 (% rbp ) jne . L 1 8 . LBB 2 3 : movq 3 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 9 cmpq % rax , - 3 2 (% rbp ) jg . L 1 9 cmpq $ 0 , - 3 2 (% rbp ) jns . L 2 0 jmp . L 3 1 . L 1 9 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 3 1 : movq - 3 2 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 2 0 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq 3 2 (% rbp ), % rdx testq % rax , % rax js . L 2 2 cmpq % rdx , % rax jle . L 3 2 . L 2 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 3 2 : movq 1 6 (% rbp ), % rdx movq % rdx , - 1 2 8 (% rbp ) movq - 3 2 (% rbp ), % rdx movq % rdx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rdx movq % rdx , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rbx movq 1 6 (% rbp ), % rcx movq 3 2 (% rbp ), % rdx cmpq % rdx , % rax je . L 2 4 movq % rax , % rdx salq $ 3 , % rdx jmp . L 2 5 . L 2 4 : movl $ 0 , % edx . L 2 5 : addq % rcx , % rdx movq % rdx , - 9 6 (% rbp ) movq 2 4 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % r 1 2 leaq (% rbx ,% r 1 2 ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 6 movq - 1 2 8 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) jmp . L 2 7 . L 2 6 : movq - 1 2 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rdx movq % rcx , - 1 2 8 (% rbp ) movq % rax , - 1 2 0 (% rbp ) movq % rdx , - 1 1 2 (% rbp ) . L 2 7 : movq % r 1 2 , % rax leaq 0 (,% rax , 8 ), % rdx movq - 9 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rcx movq % rbx , % rsi salq $ 3 , % rsi addq % rsi , % rcx movq % rax , % rsi movq % rcx , % rdi call memmove @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , 1 6 (% rbp ) movq % rdx , 2 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , 3 2 (% rbp ) subq $ 1 , - 3 2 (% rbp ) subq $ 1 , - 2 4 (% rbp ) . L 1 8 : . LBE 2 3 : . LBE 2 2 : . LBE 2 1 : . LBB 2 4 : addq $ 1 , - 3 2 (% rbp ) . L 1 5 : . LBE 2 4 : movq 2 4 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) jl . L 3 4 . LBE 1 9 : . LBE 1 8 : . LBB 2 5 : movq - 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 1 4 : . LBE 2 5 : . LBE 1 4 : subq $- 1 2 8 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 8 movl $ 2 4 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 1 6 , % rsp movq % rdi , - 2 3 2 (% rbp ) movq % rsi , - 2 4 0 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 2 4 0 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) movq - 2 3 2 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 2 4 0 (% rbp ), % rax movq % rax , % rdi call main . getHeight movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax movq % rax , % rsi movl $ 2 , % edi call main . pow subq $ 1 , % rax movq % rax , - 4 8 (% rbp ) movq - 4 0 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 string (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx leaq main . ret (% rip ), % rax movq % rdx , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) movq % rbx , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 4 4 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 4 . LBB 6 : movq - 1 6 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 5 . L 4 : . LBE 6 : . LBB 7 : movq - 1 6 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 5 : . LBE 7 : . LBB 8 : movq $ 0 , - 5 6 (% rbp ) . LBB 9 : . LBB 1 0 : . LBB 1 1 : movq main . ret (% rip ), % rax movq 8 + main . ret (% rip ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 + main . ret (% rip ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 1 1 : jmp . L 6 . L 1 7 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : movq % r 1 2 , - 5 6 (% rbp ) . LBB 1 4 : movq - 4 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq string .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 2 4 (% rbp ) movq % rbx , - 2 1 6 (% rbp ) movq % rbx , - 2 0 8 (% rbp ) . LBB 1 5 : movq $ 0 , - 6 4 (% rbp ) . LBB 1 6 : movq - 2 1 6 (% rbp ), % rbx testq % rbx , % rbx je . L 7 . LBB 1 7 : movq - 2 2 4 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . memclrHasPointers @ PLT leaq - 1 (% rbx ), % rax movq % rax , - 6 4 (% rbp ) . L 7 : . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : movq 8 + main . ret (% rip ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 8 cmpq % rax , - 5 6 (% rbp ) jl . L 1 5 . L 8 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : movq main . ret (% rip ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rcx , % rax movq - 2 2 4 (% rbp ), % rcx movq - 2 1 6 (% rbp ), % rbx movq % rcx , - 9 6 (% rbp ) movq % rbx , - 8 8 (% rbp ) movq - 2 0 8 (% rbp ), % rdx movq % rdx , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 8 0 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 0 . LBB 1 8 : movq - 9 6 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 1 . L 1 0 : . LBE 1 8 : . LBB 1 9 : movq - 9 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 1 : . LBE 1 9 : . LBE 1 4 : . LBE 1 3 : . LBB 2 0 : addq $ 1 , % r 1 2 . L 6 : . LBE 2 0 : cmpq % r 1 3 , % r 1 2 jl . L 1 7 . LBE 1 0 : . LBE 9 : . LBE 8 : movq - 4 8 (% rbp ), % rdx movq - 2 4 0 (% rbp ), % rax movq % rdx , % rcx movl $ 0 , % edx movl $ 0 , % esi movq % rax , % rdi call main . helper . LBB 2 1 : movq main . ret (% rip ), % rax movq 8 + main . ret (% rip ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 + main . ret (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 2 3 2 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 2 1 : . LBE 2 : movq - 2 3 2 (% rbp ), % rax addq $ 2 1 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 1 3 7 movl $ 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 9 2 : ret . L 1 1 3 7 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq $ 0 , - 1 6 (% rbp ) . LBB 7 8 0 : . LBB 7 8 1 : movq 2 4 (% rbp ), % rax cmpq $ 2 , % rax je . L 1 1 1 8 cmpq $ 2 , % rax jg . L 1 1 1 9 testq % rax , % rax je . L 1 1 2 0 cmpq $ 1 , % rax je . L 1 1 2 1 jmp . L 1 1 1 9 . L 1 1 2 0 : . LBB 7 8 2 : . LBB 7 8 3 : movq $ 0 , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax jmp . L 1 1 2 2 . L 1 1 2 1 : . LBE 7 8 3 : . LBE 7 8 2 : . LBB 7 8 4 : . LBB 7 8 5 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 1 1 2 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 1 2 3 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax jmp . L 1 1 2 2 . L 1 1 1 8 : . LBE 7 8 5 : . LBE 7 8 4 : . LBB 7 8 6 : . LBB 7 8 7 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 1 1 2 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 1 2 4 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 1 2 5 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 1 2 5 : movq 1 6 (% rbp ), % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rax addq $ 8 , % rax movq (% rax ), % rax cmpq % rax , % rdx jle . L 1 1 2 6 . LBB 7 8 8 : . LBB 7 8 9 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 1 2 7 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 1 2 7 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax jmp . L 1 1 2 2 . L 1 1 2 6 : . LBE 7 8 9 : . LBE 7 8 8 : . LBB 7 9 0 : . LBB 7 9 1 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 1 1 2 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 1 2 8 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax jmp . L 1 1 2 2 . L 1 1 1 9 : . LBE 7 9 1 : . LBE 7 9 0 : . LBE 7 8 7 : . LBE 7 8 6 : . LBB 7 9 2 : movq $ 2 1 4 7 4 8 3 6 4 7 , - 8 (% rbp ) . LBB 7 9 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 7 9 4 : . LBB 7 9 5 : . LBB 7 9 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 4 0 (% rbp ), % rcx movl $ 0 , % eax . LBE 7 9 6 : jmp . L 1 1 2 9 . L 1 1 3 6 : . LBB 7 9 7 : nop . LBE 7 9 7 : . LBB 7 9 8 : . LBB 7 9 9 : movq - 4 0 (% rbp ), % rdx testq % rax , % rax js . L 1 1 3 0 cmpq % rdx , % rax jge . L 1 1 3 0 movq - 4 8 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 7 9 9 : . LBB 8 0 0 : movq % rdx , - 2 4 (% rbp ) . LBE 8 0 0 : . LBB 8 0 1 : . LBB 8 0 2 : movq - 2 4 (% rbp ), % rdx cmpq - 8 (% rbp ), % rdx jl . L 1 1 3 1 jmp . L 1 1 3 2 . L 1 1 3 0 : . LBE 8 0 2 : . LBE 8 0 1 : . LBB 8 0 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 1 3 1 : . LBE 8 0 5 : . LBB 8 0 6 : . LBB 8 0 4 : . LBB 8 0 3 : movq - 2 4 (% rbp ), % rdx movq % rdx , - 8 (% rbp ) . L 1 1 3 2 : . LBE 8 0 3 : . LBE 8 0 4 : . LBE 8 0 6 : . LBE 7 9 8 : . LBB 8 0 7 : addq $ 1 , % rax . L 1 1 2 9 : . LBE 8 0 7 : cmpq % rcx , % rax jl . L 1 1 3 6 . LBE 7 9 5 : . LBE 7 9 4 : . LBE 7 9 3 : . LBB 8 0 8 : movq - 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax . L 1 1 2 2 : . LBE 8 0 8 : . LBE 7 9 2 : . LBE 7 8 1 : . LBE 7 8 0 : leave ret
. LFB 1 : leaq - 7 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 2 movl $ 7 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 6 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 7 2 8 , % rsp movq % rdi , - 7 1 2 (% rbp ) leaq type ... 6 6 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 1 6 (% rbp ) movq - 6 1 6 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 5 , 1 6 (% rax ) movq $ 6 , 2 4 (% rax ) movq $ 2 , 3 2 (% rax ) movq $ 3 , 4 0 (% rax ) movq - 6 1 6 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 6 , - 5 8 4 (% rbp ) movq $ 6 , - 5 7 6 (% rbp ) movq $ 1 0 , - 5 6 8 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 8 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq $ 1 , (% rax ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 1 , - 5 5 2 (% rbp ) movq $ 1 , - 5 4 4 (% rbp ) movq $ 1 , - 5 3 6 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 0 (% rbp ) movq - 6 0 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 1 , 8 (% rax ) movq - 6 0 0 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 2 , - 5 2 0 (% rbp ) movq $ 2 , - 5 1 2 (% rbp ) movq $ 2 , - 5 0 4 (% rbp ) leaq - 5 9 2 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) movq $ 3 , - 6 3 2 (% rbp ) movq $ 3 , - 6 2 4 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 2 1 (% rip ), % rax movq % rax , - 7 3 6 (% rbp ) movq $ 6 8 , - 7 2 8 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 7 3 6 (% rbp ), % rcx movq - 7 2 8 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) . LBB 3 1 : movq $ 0 , - 7 0 4 (% rbp ) movq $ 0 , - 6 9 6 (% rbp ) movq $ 0 , - 6 8 8 (% rbp ) movq $ 0 , - 6 8 0 (% rbp ) . LBB 3 2 : . LBB 3 3 : . LBB 3 4 : movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 7 3 6 (% rbp ) movl $ 0 , % ebx . LBE 3 4 : jmp . L 5 2 . L 6 1 : . LBB 3 5 : nop . LBE 3 5 : . LBB 3 6 : . LBB 3 7 : movq - 4 2 4 (% rbp ), % rax testq % rbx , % rbx js . L 5 3 cmpq % rax , % rbx jge . L 5 3 movq - 4 3 2 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) . LBE 3 7 : . LBB 3 8 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 7 0 4 (% rbp ) movq % rdx , - 6 9 6 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 6 8 8 (% rbp ) movq % rdx , - 6 8 0 (% rbp ) . LBE 3 8 : . LBB 3 9 : movq - 6 8 0 (% rbp ), % rax movq % rax , - 6 4 8 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 6 7 2 (% rbp ) movq % rdx , - 6 6 4 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 6 5 6 (% rbp ) subq $ 8 , % rsp pushq - 6 5 6 (% rbp ) pushq - 6 6 4 (% rbp ) pushq - 6 7 2 (% rbp ) call go . leetcode . largestRectangleArea addq $ 3 2 , % rsp movq % rax , - 7 2 0 (% rbp ) leaq go . leetcode .. go . leetcode . para 8 4 .. d (% rip ), % rax movq % rax , - 7 6 8 (% rbp ) leaq go . leetcode .. go . leetcode . para 8 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 5 4 jmp . L 5 9 . L 5 3 : . LBE 3 9 : . LBB 4 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : . LBE 4 2 : . LBB 4 3 : . LBB 4 0 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 0 : jmp . L 5 6 . L 5 9 : . LBB 4 1 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 8 4 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 6 : . LBE 4 1 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 7 6 0 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 7 5 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 7 2 0 (% rbp ), % rdi movq % rdi , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 7 4 4 (% rbp ) movdqa - 7 6 8 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 7 5 2 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 2 2 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) . LBE 4 3 : . LBE 3 6 : . LBB 4 4 : addq $ 1 , % rbx . L 5 2 : . LBE 4 4 : cmpq - 7 3 6 (% rbp ), % rbx jl . L 6 1 . LBE 3 3 : . LBE 3 2 : . LBE 3 1 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 2 3 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 6 1 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 9 movl $ 6 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 9 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 6 0 0 , % rsp movq % rdi , - 5 6 8 (% rbp ) movq % rsi , % rax movq % rdx , % rsi movq % rsi , % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq % rcx , % rax movq % r 8 , % rcx movq % rcx , % rdx movq % rax , - 6 0 8 (% rbp ) movq % rdx , - 6 0 0 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) . LBB 2 : leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq - 8 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) leaq - 5 6 0 (% rbp ), % rdx movl $ 0 , % eax movl $ 2 6 , % ecx movq % rdx , % rdi rep stosq leaq - 3 5 2 (% rbp ), % rdx movl $ 0 , % eax movl $ 2 6 , % ecx movq % rdx , % rdi rep stosq . LBB 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 3 7 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq - 6 0 8 (% rbp ), % rcx movq - 6 0 0 (% rbp ), % rbx movq - 2 4 (% rbp ), % rax movq % rbx , % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq % rcx , % rsi movq % rax , % rdx addq % rsi , % rdx movzbl (% rdx ), % edx subl $ 9 7 , % edx cmpb $ 2 5 , % dl jbe . L 4 jmp . L 2 9 . L 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movzbl % dl , % eax movl $ 2 6 , % esi movq % rax , % rdi call runtime . goPanicIndexU @ PLT . L 4 : movq % rbx , % rsi testq % rax , % rax js . L 6 cmpq % rsi , % rax jge . L 6 addq % rcx , % rax movzbl (% rax ), % eax subl $ 9 7 , % eax cmpb $ 2 5 , % al jbe . L 7 jmp . L 3 0 . L 6 : movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movzbl % al , % eax movl $ 2 6 , % esi movq % rax , % rdi call runtime . goPanicIndexU @ PLT . L 7 : movzbl % al , % eax movq - 5 6 0 (% rbp ,% rax , 8 ), % rcx movzbl % dl , % eax leaq 1 (% rcx ), % rdx movq % rdx , - 5 6 0 (% rbp ,% rax , 8 ) . LBE 7 : . LBE 6 : . LBB 8 : addq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 8 : movq - 6 0 0 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 3 7 . LBE 4 : . LBE 3 : leaq go . leetcode 0 4 3 8 . findAnagrams .. func 1 (% rip ), % rdi leaq - 3 5 2 (% rbp ), % rsi leaq - 5 6 0 (% rbp ), % rcx leaq - 1 4 4 (% rbp ), % rdx movq $ 0 , - 8 0 (% rbp ) movq $ 0 , - 7 2 (% rbp ) movq $ 0 , - 6 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) leaq - 8 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rdi , (% rax ) movq % rsi , 8 (% rax ) movq % rcx , 1 6 (% rax ) movq % rdx , 2 4 (% rax ) movq - 4 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 9 : movq $ 0 , - 3 2 (% rbp ) . LBB 1 0 : jmp . L 1 1 . L 3 8 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : . LBB 1 3 : movq - 5 9 2 (% rbp ), % rcx movq - 5 8 4 (% rbp ), % rbx movq - 3 2 (% rbp ), % rax movq % rbx , % rdx testq % rax , % rax js . L 1 2 cmpq % rdx , % rax jge . L 1 2 movq % rcx , % rsi movq % rax , % rdx addq % rsi , % rdx movzbl (% rdx ), % edx subl $ 9 7 , % edx cmpb $ 2 5 , % dl jbe . L 1 3 jmp . L 3 2 . L 1 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movzbl % dl , % eax movl $ 2 6 , % esi movq % rax , % rdi call runtime . goPanicIndexU @ PLT . L 1 3 : movq % rbx , % rsi testq % rax , % rax js . L 1 5 cmpq % rsi , % rax jge . L 1 5 addq % rcx , % rax movzbl (% rax ), % eax subl $ 9 7 , % eax cmpb $ 2 5 , % al jbe . L 1 6 jmp . L 3 3 . L 1 5 : movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movzbl % al , % eax movl $ 2 6 , % esi movq % rax , % rdi call runtime . goPanicIndexU @ PLT . L 1 6 : movzbl % al , % eax movq - 3 5 2 (% rbp ,% rax , 8 ), % rcx movzbl % dl , % eax leaq 1 (% rcx ), % rdx movq % rdx , - 3 5 2 (% rbp ,% rax , 8 ) . LBE 1 3 : . LBB 1 4 : movq - 6 0 0 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 3 2 (% rbp ) jne . L 1 8 . LBB 1 5 : movq - 4 0 (% rbp ), % rax movq (% rax ), % rax movq - 4 0 (% rbp ), % r 1 0 movl $ 0 , % edi call *% rax . LVL 1 : jmp . L 1 9 . L 1 8 : . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 6 0 0 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) jl . L 1 9 . LBB 1 8 : . LBB 1 9 : movq - 6 0 0 (% rbp ), % rdx movq - 5 9 2 (% rbp ), % rcx movq - 5 8 4 (% rbp ), % rbx movq - 3 2 (% rbp ), % rax subq % rdx , % rax movq % rbx , % rdx testq % rax , % rax js . L 2 0 cmpq % rdx , % rax jge . L 2 0 movq % rcx , % rsi movq % rax , % rdx addq % rsi , % rdx movzbl (% rdx ), % edx subl $ 9 7 , % edx cmpb $ 2 5 , % dl jbe . L 2 1 jmp . L 3 4 . L 2 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movzbl % dl , % eax movl $ 2 6 , % esi movq % rax , % rdi call runtime . goPanicIndexU @ PLT . L 2 1 : movq % rbx , % rsi testq % rax , % rax js . L 2 3 cmpq % rsi , % rax jge . L 2 3 addq % rcx , % rax movzbl (% rax ), % eax subl $ 9 7 , % eax cmpb $ 2 5 , % al jbe . L 2 4 jmp . L 3 5 . L 2 3 : movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movzbl % al , % eax movl $ 2 6 , % esi movq % rax , % rdi call runtime . goPanicIndexU @ PLT . L 2 4 : movzbl % al , % eax movq - 3 5 2 (% rbp ,% rax , 8 ), % rcx movzbl % dl , % eax leaq - 1 (% rcx ), % rdx movq % rdx , - 3 5 2 (% rbp ,% rax , 8 ) . LBE 1 9 : movq - 6 0 0 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rdx movq - 3 2 (% rbp ), % rax subq % rcx , % rax addq $ 1 , % rax movq - 4 0 (% rbp ), % r 1 0 movq % rax , % rdi call *% rdx . LVL 2 : . L 1 9 : . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBE 1 4 : . LBE 1 2 : . LBB 2 0 : addq $ 1 , - 3 2 (% rbp ) . L 1 1 : . LBE 2 0 : movq - 5 8 4 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) jl . L 3 8 . LBE 1 0 : . LBE 9 : . LBB 2 1 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 5 6 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 1 : . LBE 2 : movq - 5 6 8 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 3 movl $ 1 8 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 5 2 , % rsp movq % rdi , - 1 6 8 (% rbp ) movq % rsi , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 4 0 (% rbp ) . LBB 3 : movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 2 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 1 2 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 1 2 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rbx , - 4 8 (% rbp ) movq % rax , - 5 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq $ 0 , - 6 4 (% rbp ) movb $ 0 , - 6 5 (% rbp ) . LBB 1 3 : movq - 5 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) leaq - 9 6 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movb % dl , - 6 5 (% rbp ) . LBE 1 3 : cmpb $ 0 , - 6 5 (% rbp ) jne . L 4 jmp . L 1 0 . L 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 8 : . LBB 1 9 : . LBB 1 6 : . LBB 1 4 : . LBB 1 5 : leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq - 8 8 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 4 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 8 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 2 , - 1 5 2 (% rbp ) movq $ 2 , - 1 4 4 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 1 0 : . LBE 1 5 : . LBE 1 4 : . LBE 1 6 : . LBB 1 7 : movq - 1 7 6 (% rbp ), % rax subq - 5 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 4 8 (% rbp ), % r 1 2 leaq - 8 0 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 2 , (% rax ) . LBE 1 7 : . LBE 1 9 : . LBE 8 : . LBB 2 0 : addq $ 1 , % rbx . L 2 : . LBE 2 0 : cmpq % r 1 3 , % rbx jl . L 1 2 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 2 1 : movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 2 1 : . LBE 2 : movq - 1 6 8 (% rbp ), % rax addq $ 1 5 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 2 0 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 2 4 (% rbp ) movq % rdx , % rcx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) cmpq $ 0 , - 2 4 (% rbp ) jne . L 1 9 call runtime . panicmem @ PLT . L 1 9 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 1 6 (% rbp ) movq % rdx , - 8 (% rbp ) . LBB 1 1 : movq - 4 8 (% rbp ), % rax movq 8 (% rax ), % r 8 movq - 4 0 (% rbp ), % rax movq - 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call *% r 8 . LVL 5 : . LBE 1 1 : leave ret
. LFB 0 : leaq - 5 8 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 5 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 3 6 , % rsp movq % rdi , - 5 3 6 (% rbp ) leaq type ... 6 4 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) leaq . LC 2 4 (% rip ), % rbx movq % rbx , - 5 7 6 (% rbp ) movq $ 8 , - 5 6 8 (% rbp ) movdqa - 5 7 6 (% rbp ), % xmm 0 movups % xmm 0 , - 4 6 4 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 9 6 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 1 , 8 (% rax ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq $ 2 , - 4 4 0 (% rbp ) movq $ 2 , - 4 3 2 (% rbp ) movb $ 0 , - 4 2 4 (% rbp ) movq % rbx , - 5 6 0 (% rbp ) movq $ 8 , - 5 5 2 (% rbp ) movdqa - 5 6 0 (% rbp ), % xmm 1 movups % xmm 1 , - 4 1 6 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 8 (% rbp ) movq - 4 8 8 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 5 , 8 (% rax ) movq $ 5 , 1 6 (% rax ) movq - 4 8 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 3 , - 3 9 2 (% rbp ) movq $ 3 , - 3 8 4 (% rbp ) movb $ 0 , - 3 7 6 (% rbp ) leaq . LC 2 4 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 3 6 8 (% rbp ) movq % r 1 5 , - 3 6 0 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 0 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 4 , 8 (% rax ) movq $ 5 , 1 6 (% rax ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 3 , - 3 4 4 (% rbp ) movq $ 3 , - 3 3 6 (% rbp ) movb $ 0 , - 3 2 8 (% rbp ) leaq . LC 2 4 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 2 0 (% rbp ) movq % r 1 3 , - 3 1 2 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 7 2 (% rbp ) movq - 4 7 2 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq - 4 7 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 4 , - 2 9 6 (% rbp ) movq $ 4 , - 2 8 8 (% rbp ) movb $ 1 , - 2 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 5 0 4 (% rbp ), % rax movq - 4 6 4 (% rbp ), % rcx movq - 4 5 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 1 4 4 (% rax ) movq % rbx , 1 5 2 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 1 6 0 (% rax ) movq % rbx , 1 6 8 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 1 7 6 (% rax ) movq % rbx , 1 8 4 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 5 0 4 (% rbp ), % rax leaq - 4 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 5 0 4 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 4 , - 5 2 0 (% rbp ) movq $ 4 , - 5 1 2 (% rbp ) . LBB 4 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 2 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 2 5 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 bool . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 bool . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 5 3 6 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 5 3 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 6 0 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 movl $ 6 0 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 5 2 , % rsp movl $ 1 , % edi call strconv . Itoa @ PLT movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq string .. d (% rip ), % rax movq % rax , - 5 9 2 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 8 (% rbp ) movq % r 1 2 , - 4 8 0 (% rbp ) movq % r 1 3 , - 4 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 4 8 8 (% rbp ), % rcx movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 4 8 8 (% rbp ), % rax leaq - 4 8 0 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 4 8 8 (% rbp ), % rax movq % rax , - 5 8 4 (% rbp ) movdqa - 5 9 2 (% rbp ), % xmm 1 movups % xmm 1 , - 4 6 4 (% rbp ) leaq - 4 6 4 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 1 , - 2 9 6 (% rbp ) movq $ 1 , - 2 8 8 (% rbp ) leaq - 2 7 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 8 8 (% rbp ) pushq - 2 9 6 (% rbp ) pushq - 3 0 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) leaq . LC 3 2 (% rip ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 1 , - 5 2 0 (% rbp ) leaq . LC 3 3 (% rip ), % r 1 4 movl $ 1 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rcx , % rsi movq % rdx , % rax movq - 5 2 8 (% rbp ), % rdx movq - 5 2 0 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call strings . Compare @ PLT movq % rax , % rbx leaq int .. d (% rip ), % rax movq % rax , - 5 7 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 2 4 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq % rbx , (% rax ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 5 6 8 (% rbp ) movdqa - 5 7 6 (% rbp ), % xmm 2 movups % xmm 2 , - 4 1 6 (% rbp ) leaq - 4 1 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 , - 2 3 2 (% rbp ) movq $ 1 , - 2 2 4 (% rbp ) leaq - 2 0 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq . LC 3 4 (% rip ), % rax movq % rax , % xmm 0 call math . Abs @ PLT movq % xmm 0 , % rbx leaq float 6 4 .. d (% rip ), % rax movq % rax , - 5 6 0 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 3 7 6 (% rbp ), % rax movq % rbx , (% rax ) movq - 3 7 6 (% rbp ), % rax movq % rax , - 5 5 2 (% rbp ) movdqa - 5 6 0 (% rbp ), % xmm 3 movups % xmm 3 , - 3 6 8 (% rbp ) leaq - 3 6 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movl $ 4 9 , % edi call unicode . IsDigit @ PLT movl % eax , % ebx leaq bool .. d (% rip ), % rax movq % rax , - 5 4 4 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movq - 3 2 8 (% rbp ), % rax movb % bl , (% rax ) movq - 3 2 8 (% rbp ), % rax movq % rax , - 5 3 6 (% rbp ) movdqa - 5 4 4 (% rbp ), % xmm 4 movups % xmm 4 , - 3 2 0 (% rbp ) leaq - 3 2 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 movl $ 2 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 subq $ 2 2 4 , % rsp movl $ 2 , % esi leaq main . wg (% rip ), % rdi call sync . WaitGroup . Add @ PLT leaq string .. d (% rip ), % r 1 4 leaq go .. C 6 (% rip ), % r 1 5 movq % r 1 4 , - 2 2 4 (% rbp ) movq % r 1 5 , - 2 1 6 (% rbp ) leaq - 2 2 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 1 , - 1 5 2 (% rbp ) movq $ 1 , - 1 4 4 (% rbp ) leaq - 1 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) . LBB 2 : leaq main . addTable (% rip ), % rax movl $ 0 , % esi movq % rax , % rdi call __go_go @ PLT . LBE 2 : . LBB 3 : leaq main . multiTable (% rip ), % rax movl $ 0 , % esi movq % rax , % rdi call __go_go @ PLT . LBE 3 : leaq main . wg (% rip ), % rdi call sync . WaitGroup . Wait @ PLT leaq string .. d (% rip ), % r 1 2 leaq go .. C 7 (% rip ), % r 1 3 movq % r 1 2 , - 1 7 6 (% rbp ) movq % r 1 3 , - 1 6 8 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) leaq - 3 2 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 5 movl $ 1 3 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 0 4 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 1 1 2 (% rbp ) movq % rdi , - 1 0 4 (% rbp ) movq % rdx , - 1 2 8 (% rbp ) movq % rcx , - 1 2 0 (% rbp ) movb $ 0 , - 3 3 (% rbp ) . LBB 2 : call runtime . makemap_small @ PLT movq % rax , - 4 8 (% rbp ) . LBB 3 : movl $ 0 , - 5 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 1 2 0 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 2 3 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 1 2 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 1 2 8 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 4 jmp . L 1 9 . L 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBB 1 0 : addq $ 1 , % rbx . LBE 1 0 : jmp . L 6 . L 1 9 : . LBB 1 1 : movq - 1 2 8 (% rbp ), % rcx movq - 1 2 0 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movl % ecx , % eax . L 6 : . LBE 1 1 : . LBE 9 : . LBB 1 2 : movl % eax , - 5 2 (% rbp ) . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movl - 5 2 (% rbp ), % eax movl % eax , - 8 8 (% rbp ) movl - 5 2 (% rbp ), % eax movl % eax , - 7 6 (% rbp ) leaq - 7 6 (% rbp ), % rax movl (% rax ), % edx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 3 leaq - 8 8 (% rbp ), % rax movl (% rax ), % edx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapassign_fast 3 2 @ PLT movq % r 1 3 , (% rax ) . L 2 : . LBE 1 4 : . LBE 1 3 : . LBE 8 : cmpq % r 1 2 , % rbx jl . L 2 3 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 5 : movl $ 0 , - 5 6 (% rbp ) . LBB 1 6 : . LBB 1 7 : . LBB 1 8 : movq - 1 0 4 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 8 : jmp . L 9 . L 2 4 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : . LBB 2 1 : movq - 1 0 4 (% rbp ), % rax testq % rbx , % rbx js . L 1 0 cmpq % rax , % rbx jge . L 1 0 movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 1 1 jmp . L 2 1 . L 1 0 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 1 : . LBB 2 2 : addq $ 1 , % rbx . LBE 2 2 : jmp . L 1 3 . L 2 1 : . LBB 2 3 : movq - 1 1 2 (% rbp ), % rcx movq - 1 0 4 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movl % ecx , % eax . L 1 3 : . LBE 2 3 : . LBE 2 1 : . LBB 2 4 : movl % eax , - 5 6 (% rbp ) . LBE 2 4 : . LBB 2 5 : movq $ 0 , - 6 4 (% rbp ) movb $ 0 , - 6 5 (% rbp ) . LBB 2 6 : movl - 5 6 (% rbp ), % eax movl % eax , - 8 4 (% rbp ) leaq - 8 4 (% rbp ), % rax movl (% rax ), % edx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 3 2 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movb % dl , - 6 5 (% rbp ) . LBE 2 6 : . LBB 2 7 : . LBB 2 8 : movzbl - 6 5 (% rbp ), % eax xorl $ 1 , % eax movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 4 . LBB 2 9 : cmpq $ 0 , - 6 4 (% rbp ) sete % al . L 1 4 : . LBE 2 9 : . LBE 2 8 : testb % al , % al je . L 1 5 . LBB 3 0 : . LBB 3 1 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 1 6 . L 1 5 : . LBE 3 1 : . LBE 3 0 : . LBE 2 7 : . LBB 3 2 : movl - 5 6 (% rbp ), % eax movl % eax , - 8 0 (% rbp ) movl - 5 6 (% rbp ), % eax movl % eax , - 7 2 (% rbp ) leaq - 7 2 (% rbp ), % rax movl (% rax ), % edx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax leaq - 1 (% rax ), % r 1 3 leaq - 8 0 (% rbp ), % rax movl (% rax ), % edx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapassign_fast 3 2 @ PLT movq % r 1 3 , (% rax ) . L 9 : . LBE 3 2 : . LBE 2 5 : . LBE 2 0 : cmpq % r 1 2 , % rbx jl . L 2 4 . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBB 3 3 : movb $ 1 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax . L 1 6 : . LBE 3 3 : . LBE 2 : addq $ 1 0 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 9 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 1 9 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 1 6 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 1 5 : . LBB 1 6 : movq - 4 0 (% rbp ), % rax movq % rax , % rdi call go . queue . Queue . isEmpty testb % al , % al je . L 1 2 . LBB 1 7 : . LBB 1 8 : leaq int .. d (% rip ), % rax movq % rax , - 1 6 (% rbp ) leaq go .. C 7 4 (% rip ), % rax movq % rax , - 8 (% rbp ) movq - 1 6 (% rbp ), % rax movq - 8 (% rbp ), % rdx jmp . L 1 8 . L 1 2 : . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : movq - 4 0 (% rbp ), % rax movq (% rax ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq - 4 0 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq (% rdx ), % rdx movq 1 6 (% rdx ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 1 4 . LBB 1 9 : movq % rdx , (% rax ) jmp . L 1 5 . L 1 4 : . LBE 1 9 : . LBB 2 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 5 : . LBE 2 0 : . LBB 2 1 : movq - 4 0 (% rbp ), % rax movq (% rax ), % rax testq % rax , % rax jne . L 1 6 . LBB 2 2 : movq - 4 0 (% rbp ), % rax addq $ 8 , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 7 . LBB 2 3 : movq $ 0 , (% rax ) jmp . L 1 6 . L 1 7 : . LBE 2 3 : . LBB 2 4 : movl $ 0 , % esi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 6 : . LBE 2 4 : . LBE 2 2 : . LBE 2 1 : . LBB 2 5 : movq - 4 0 (% rbp ), % rax movq 1 6 (% rax ), % rdx subq $ 1 , % rdx movq % rdx , 1 6 (% rax ) . LBE 2 5 : . LBB 2 6 : movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rax , - 1 6 (% rbp ) movq % rdx , - 8 (% rbp ) movq - 1 6 (% rbp ), % rax movq - 8 (% rbp ), % rdx . L 1 8 : . LBE 2 6 : . LBE 1 5 : leave ret
. LFB 1 5 : leaq - 6 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 7 5 movl $ 6 8 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 6 : ret . L 1 7 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 3 2 , % rsp movq % rdi , - 4 5 6 (% rbp ) movl $ 1 , % edi call main . LeastCommonMultiple movq % rax , - 5 6 (% rbp ) . LBB 1 4 2 : cmpq $ 1 , - 5 6 (% rbp ) je . L 1 6 0 . LBB 1 4 3 : leaq int .. d (% rip ), % rax movq % rax , - 6 7 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 8 (% rbp ) movq - 4 4 8 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , (% rdx ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 6 6 4 (% rbp ) leaq int .. d (% rip ), % r 1 2 leaq go .. C 3 3 (% rip ), % r 1 3 leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 0 (% rbp ) movdqa - 6 7 2 (% rbp ), % xmm 0 movups % xmm 0 , - 4 3 2 (% rbp ) movq % r 1 2 , - 4 1 6 (% rbp ) movq % r 1 3 , - 4 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 6 1 . LBB 1 4 4 : movq - 4 4 0 (% rbp ), % rcx movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 1 4 4 : jmp . L 1 6 2 . L 1 6 1 : . LBB 1 4 5 : movq - 4 4 0 (% rbp ), % rcx leaq - 4 3 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 6 2 : . LBE 1 4 5 : movq - 4 4 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 2 , - 2 0 0 (% rbp ) movq $ 2 , - 1 9 2 (% rbp ) leaq . LC 2 0 (% rip ), % r 1 4 movl $ 2 1 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 4 5 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 9 2 (% rbp ) pushq - 2 0 0 (% rbp ) pushq - 2 0 8 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 1 6 0 : . LBE 1 4 3 : . LBE 1 4 2 : movl $ 2 , % edi call main . LeastCommonMultiple movq % rax , - 5 6 (% rbp ) . LBB 1 4 6 : cmpq $ 2 , - 5 6 (% rbp ) je . L 1 6 3 . LBB 1 4 7 : leaq int .. d (% rip ), % rbx movq % rbx , - 6 5 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 0 (% rbp ) movq - 4 0 0 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , (% rdx ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 6 4 8 (% rbp ) movq % rbx , - 6 4 0 (% rbp ) leaq go .. C 3 4 (% rip ), % rax movq % rax , - 6 3 2 (% rbp ) leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) movdqa - 6 5 6 (% rbp ), % xmm 1 movups % xmm 1 , - 3 8 4 (% rbp ) movdqa - 6 4 0 (% rbp ), % xmm 2 movups % xmm 2 , - 3 6 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 6 4 . LBB 1 4 8 : movq - 3 9 2 (% rbp ), % rcx movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 1 4 8 : jmp . L 1 6 5 . L 1 6 4 : . LBB 1 4 9 : movq - 3 9 2 (% rbp ), % rcx leaq - 3 8 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 6 5 : . LBE 1 4 9 : movq - 3 9 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 2 1 , - 5 2 0 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 4 5 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 1 6 3 : . LBE 1 4 7 : . LBE 1 4 6 : movl $ 3 , % edi call main . LeastCommonMultiple movq % rax , - 5 6 (% rbp ) . LBB 1 5 0 : cmpq $ 6 , - 5 6 (% rbp ) je . L 1 6 6 . LBB 1 5 1 : leaq int .. d (% rip ), % rbx movq % rbx , - 6 2 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 5 2 (% rbp ) movq - 3 5 2 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , (% rdx ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 6 1 6 (% rbp ) movq % rbx , - 6 0 8 (% rbp ) leaq go .. C 3 5 (% rip ), % rax movq % rax , - 6 0 0 (% rbp ) leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movdqa - 6 2 4 (% rbp ), % xmm 3 movups % xmm 3 , - 3 3 6 (% rbp ) movdqa - 6 0 8 (% rbp ), % xmm 4 movups % xmm 4 , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 6 7 . LBB 1 5 2 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 1 5 2 : jmp . L 1 6 8 . L 1 6 7 : . LBB 1 5 3 : movq - 3 4 4 (% rbp ), % rcx leaq - 3 3 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 6 8 : . LBE 1 5 3 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 2 , - 1 3 6 (% rbp ) movq $ 2 , - 1 2 8 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 5 1 2 (% rbp ) movq $ 2 1 , - 5 0 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 4 5 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 1 6 6 : . LBE 1 5 1 : . LBE 1 5 0 : movl $ 4 , % edi call main . LeastCommonMultiple movq % rax , - 5 6 (% rbp ) . LBB 1 5 4 : cmpq $ 1 2 , - 5 6 (% rbp ) je . L 1 6 9 . LBB 1 5 5 : leaq int .. d (% rip ), % rbx movq % rbx , - 5 9 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 0 4 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 5 8 4 (% rbp ) movq % rbx , - 5 7 6 (% rbp ) leaq go .. C 3 6 (% rip ), % rax movq % rax , - 5 6 8 (% rbp ) leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 9 6 (% rbp ) movdqa - 5 9 2 (% rbp ), % xmm 5 movups % xmm 5 , - 2 8 8 (% rbp ) movdqa - 5 7 6 (% rbp ), % xmm 6 movups % xmm 6 , - 2 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 7 0 . LBB 1 5 6 : movq - 2 9 6 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 1 5 6 : jmp . L 1 7 1 . L 1 7 0 : . LBB 1 5 7 : movq - 2 9 6 (% rbp ), % rax leaq - 2 8 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 7 1 : . LBE 1 5 7 : movq - 2 9 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 2 , - 1 0 4 (% rbp ) movq $ 2 , - 9 6 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 4 9 6 (% rbp ) movq $ 2 1 , - 4 8 8 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 4 5 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 1 6 9 : . LBE 1 5 5 : . LBE 1 5 4 : movl $ 1 0 , % edi call main . LeastCommonMultiple movq % rax , - 5 6 (% rbp ) . LBB 1 5 8 : cmpq $ 2 5 2 0 , - 5 6 (% rbp ) je . L 1 5 9 . LBB 1 5 9 : leaq int .. d (% rip ), % rbx movq % rbx , - 5 6 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 5 6 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 5 5 2 (% rbp ) movq % rbx , - 5 4 4 (% rbp ) leaq go .. C 3 7 (% rip ), % rax movq % rax , - 5 3 6 (% rbp ) leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movdqa - 5 6 0 (% rbp ), % xmm 7 movups % xmm 7 , - 2 4 0 (% rbp ) movdqa - 5 4 4 (% rbp ), % xmm 0 movups % xmm 0 , - 2 2 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 7 3 . LBB 1 6 0 : movq - 2 4 8 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 1 6 0 : jmp . L 1 7 4 . L 1 7 3 : . LBB 1 6 1 : movq - 2 4 8 (% rbp ), % rax leaq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 7 4 : . LBE 1 6 1 : movq - 2 4 8 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 4 8 0 (% rbp ) movq $ 2 1 , - 4 7 2 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 4 5 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 1 5 9 : . LBE 1 5 9 : . LBE 1 5 8 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 8 3 movl $ 2 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 8 : ret . L 8 3 : pushq % rbp movq % rsp , % rbp subq $ 1 6 , % rsp movq $ 0 , - 8 (% rbp ) . LBB 6 2 : . LBB 6 3 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rsi movl $ 0 , % edi call go . Solution . calc addq $ 3 2 , % rsp movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . LBE 6 3 : . LBE 6 2 : leave ret
. LFB 1 : leaq - 7 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 6 movl $ 7 4 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 9 6 , % rsp movq % rdi , - 6 6 4 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 7 6 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 5 , 1 6 (% rax ) movq $ 6 , 2 4 (% rax ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) movq $ 4 , - 5 3 6 (% rbp ) movq $ 4 , - 5 2 8 (% rbp ) movq $ 5 , - 5 2 0 (% rbp ) movq $ 2 , - 5 1 2 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 8 (% rbp ) movq - 5 6 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 5 , 1 6 (% rax ) movq $ 6 , 2 4 (% rax ) movq - 5 6 8 (% rbp ), % rax movq % rax , - 5 0 4 (% rbp ) movq $ 4 , - 4 9 6 (% rbp ) movq $ 4 , - 4 8 8 (% rbp ) movq $ 2 , - 4 8 0 (% rbp ) movq $ 1 , - 4 7 2 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 0 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 5 , 1 6 (% rax ) movq $ 6 , 2 4 (% rax ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq $ 4 , - 4 5 6 (% rbp ) movq $ 4 , - 4 4 8 (% rbp ) movq $ 7 , - 4 4 0 (% rbp ) movq $ 4 , - 4 3 2 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 5 2 (% rbp ) movq - 5 5 2 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 5 , 1 6 (% rax ) movq $ 6 , 2 4 (% rax ) movq - 5 5 2 (% rbp ), % rax movq % rax , - 4 2 4 (% rbp ) movq $ 4 , - 4 1 6 (% rbp ) movq $ 4 , - 4 0 8 (% rbp ) movq $ 0 , - 4 0 0 (% rbp ) movq $ 0 , - 3 9 2 (% rbp ) movq $ 0 , - 3 8 4 (% rbp ) movq $ 0 , - 3 7 6 (% rbp ) movq $ 0 , - 3 6 8 (% rbp ) movq $ 0 , - 3 6 0 (% rbp ) movq $ 0 , - 3 5 2 (% rbp ) leaq - 5 4 4 (% rbp ), % rax movq % rax , - 6 0 8 (% rbp ) movq $ 5 , - 6 0 0 (% rbp ) movq $ 5 , - 5 9 2 (% rbp ) . LBB 1 6 : movq $ 0 , - 6 5 6 (% rbp ) movq $ 0 , - 6 4 8 (% rbp ) movq $ 0 , - 6 4 0 (% rbp ) movq $ 0 , - 6 3 2 (% rbp ) movq $ 0 , - 6 2 4 (% rbp ) . LBB 1 7 : . LBB 1 8 : . LBB 1 9 : movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 1 9 : jmp . L 2 4 . L 3 5 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 2 8 0 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 2 5 cmpq % rax , % r 1 2 jge . L 2 5 movq - 2 8 8 (% rbp ), % rdx movq % r 1 2 , % rcx movq % rcx , % rax salq $ 2 , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq 3 2 (% rcx ), % rax movq % rax , - 3 0 4 (% rbp ) . LBE 2 2 : . LBB 2 3 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 6 5 6 (% rbp ) movq % rdx , - 6 4 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) . LBE 2 3 : . LBB 2 4 : movq - 6 3 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 0 (% rbp ) pushq - 6 4 8 (% rbp ) pushq - 6 5 6 (% rbp ) movq % rax , % rdi call go . leetcode . searchInsert addq $ 3 2 , % rsp movq % rax , - 5 6 (% rbp ) . LBB 2 5 : movq - 6 2 4 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 2 6 jmp . L 2 7 . L 2 5 : . LBE 2 5 : . LBE 2 4 : . LBB 3 2 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : . LBE 3 2 : . LBB 3 3 : . LBB 3 1 : . LBB 2 6 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 7 3 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 8 . LBB 2 7 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 9 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 7 : jmp . L 2 9 . L 2 8 : . LBB 2 8 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 9 : . LBE 2 8 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 7 2 8 (% rbp ) leaq int .. d (% rip ), % rbx movq % rbx , - 7 2 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 7 6 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 7 1 2 (% rbp ) movq % rbx , - 7 0 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 6 8 (% rbp ), % rax movq % rax , - 6 9 6 (% rbp ) movq % rbx , - 6 8 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 6 2 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 6 8 0 (% rbp ) leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movdqa - 7 3 6 (% rbp ), % xmm 0 movups % xmm 0 , - 1 4 4 (% rbp ) movdqa - 7 2 0 (% rbp ), % xmm 1 movups % xmm 1 , - 1 2 8 (% rbp ) movdqa - 7 0 4 (% rbp ), % xmm 2 movups % xmm 2 , - 1 1 2 (% rbp ) movdqa - 6 8 8 (% rbp ), % xmm 3 movups % xmm 3 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 0 . LBB 2 9 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) . LBE 2 9 : jmp . L 3 1 . L 3 0 : . LBB 3 0 : movq - 1 5 2 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 1 : . LBE 3 0 : movq - 1 5 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 4 , - 7 2 (% rbp ) movq $ 4 , - 6 4 (% rbp ) leaq . LC 7 (% rip ), % r 1 4 movl $ 3 9 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 6 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 2 7 : . LBE 2 6 : . LBE 3 1 : . LBE 3 3 : . LBE 2 1 : . LBB 3 4 : addq $ 1 , % r 1 2 . L 2 4 : . LBE 3 4 : cmpq % r 1 3 , % r 1 2 jl . L 3 5 . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 7 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 2 movl $ 7 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 7 2 8 , % rsp movq % rdi , - 7 1 2 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 1 6 (% rbp ) movq - 6 1 6 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 0 , 8 (% rax ) movq - 6 1 6 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 2 , - 5 8 4 (% rbp ) movq $ 2 , - 5 7 6 (% rbp ) movq $ 0 , - 5 6 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 8 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 3 , - 5 5 2 (% rbp ) movq $ 3 , - 5 4 4 (% rbp ) movq $ 3 , - 5 3 6 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 0 (% rbp ) movq - 6 0 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq - 6 0 0 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 4 , - 5 2 0 (% rbp ) movq $ 4 , - 5 1 2 (% rbp ) movq $ 4 , - 5 0 4 (% rbp ) leaq - 5 9 2 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) movq $ 3 , - 6 3 2 (% rbp ) movq $ 3 , - 6 2 4 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 1 7 (% rip ), % rax movq % rax , - 7 3 6 (% rbp ) movq $ 6 9 , - 7 2 8 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 7 3 6 (% rbp ), % rcx movq - 7 2 8 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) . LBB 2 : movq $ 0 , - 7 0 4 (% rbp ) movq $ 0 , - 6 9 6 (% rbp ) movq $ 0 , - 6 8 8 (% rbp ) movq $ 0 , - 6 8 0 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 7 3 6 (% rbp ) movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 1 1 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : movq - 4 2 4 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 4 3 2 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) . LBE 8 : . LBB 9 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 7 0 4 (% rbp ) movq % rdx , - 6 9 6 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 6 8 8 (% rbp ) movq % rdx , - 6 8 0 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 6 8 0 (% rbp ), % rax movq % rax , - 6 4 8 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 6 7 2 (% rbp ) movq % rdx , - 6 6 4 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 6 5 6 (% rbp ) subq $ 8 , % rsp pushq - 6 5 6 (% rbp ) pushq - 6 6 4 (% rbp ) pushq - 6 7 2 (% rbp ) call go . leetcode . rob 2 1 3 addq $ 3 2 , % rsp movq % rax , - 7 2 0 (% rbp ) leaq go . leetcode .. go . leetcode . para 2 1 3 .. d (% rip ), % rax movq % rax , - 7 6 8 (% rbp ) leaq go . leetcode .. go . leetcode . para 2 1 3 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 4 jmp . L 9 . L 3 : . LBE 1 0 : . LBB 1 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 3 : . LBB 1 4 : . LBB 1 1 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 1 : jmp . L 6 . L 9 : . LBB 1 2 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 2 1 3 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 : . LBE 1 2 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 7 6 0 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 7 5 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 7 2 0 (% rbp ), % rdi movq % rdi , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 7 4 4 (% rbp ) movdqa - 7 6 8 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 7 5 2 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) . LBE 1 4 : . LBE 7 : . LBB 1 5 : addq $ 1 , % rbx . L 2 : . LBE 1 5 : cmpq - 7 3 6 (% rbp ), % rbx jl . L 1 1 . LBE 4 : . LBE 3 : . LBE 2 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 1 9 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 2 movl $ 1 3 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 8 , % rsp movb $ 0 , - 4 9 (% rbp ) . LBB 2 : subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) call go . day 2 6 7 . findBlackKing addq $ 3 2 , % rsp movq % rax , % rcx movq % rcx , - 6 4 (% rbp ) movq % rdx , % rax movq % rax , - 7 2 (% rbp ) . LBB 3 : movq $ 0 , - 8 0 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rax movq % rax , - 1 2 0 (% rbp ) movl $ 0 , % r 1 4 d . LBE 6 : jmp . L 2 . L 4 1 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq % r 1 4 , - 8 0 (% rbp ) . LBB 9 : . LBB 1 0 : movq $ 0 , - 8 8 (% rbp ) . LBB 1 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 3 cmpq % rax , - 8 0 (% rbp ) jl . L 3 0 . L 3 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq 1 6 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 movq 8 (% rax ), % r 1 3 . LBB 1 2 : . LBB 1 3 : movq % r 1 3 , - 1 2 8 (% rbp ) movl $ 0 , % ebx . LBE 1 3 : jmp . L 5 . L 4 0 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq % r 1 3 , % rax testq % rbx , % rbx js . L 6 cmpq % rax , % rbx jge . L 6 movq % r 1 2 , % rdx movq % rbx , % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 7 jmp . L 3 1 . L 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 7 : . LBB 1 7 : leaq 1 (% rbx ), % r 1 5 . LBE 1 7 : jmp . L 9 . L 3 1 : . LBB 1 8 : movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rdx , % r 1 5 . L 9 : . LBE 1 8 : . LBE 1 6 : movq % rbx , - 8 8 (% rbp ) . LBB 1 9 : . LBB 2 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 1 0 cmpq % rax , - 8 0 (% rbp ) jl . L 3 2 . L 1 0 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq 1 6 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % rcx cmpq $ 0 , - 8 8 (% rbp ) js . L 1 2 cmpq % rcx , - 8 8 (% rbp ) jge . L 1 2 movq % rax , % rdx movq - 8 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax subl $ 6 6 , % eax cmpb $ 1 6 , % al ja . L 1 3 movzbl % al , % eax leaq 0 (,% rax , 4 ), % rdx leaq . L 1 5 (% rip ), % rax movl (% rdx ,% rax ), % eax cltq leaq . L 1 5 (% rip ), % rdx addq % rdx , % rax jmp *% rax . L 1 5 : . L 1 2 : movq - 8 8 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : . LBB 2 1 : . LBB 2 2 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq - 8 8 (% rbp ), % rsi movq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call go . day 2 6 7 . bishop addq $ 3 2 , % rsp testb % al , % al je . L 3 5 . LBB 2 3 : . LBB 2 4 : movb $ 1 , - 4 9 (% rbp ) movzbl - 4 9 (% rbp ), % eax jmp . L 2 1 . L 1 8 : . LBE 2 4 : . LBE 2 3 : . LBE 2 2 : . LBE 2 1 : . LBB 2 5 : . LBB 2 6 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq - 8 8 (% rbp ), % rsi movq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call go . day 2 6 7 . knight addq $ 3 2 , % rsp testb % al , % al je . L 3 6 . LBB 2 7 : . LBB 2 8 : movb $ 1 , - 4 9 (% rbp ) movzbl - 4 9 (% rbp ), % eax jmp . L 2 1 . L 1 7 : . LBE 2 8 : . LBE 2 7 : . LBE 2 6 : . LBE 2 5 : . LBB 2 9 : . LBB 3 0 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq - 8 8 (% rbp ), % rsi movq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call go . day 2 6 7 . pawn addq $ 3 2 , % rsp testb % al , % al je . L 3 7 . LBB 3 1 : . LBB 3 2 : movb $ 1 , - 4 9 (% rbp ) movzbl - 4 9 (% rbp ), % eax jmp . L 2 1 . L 1 4 : . LBE 3 2 : . LBE 3 1 : . LBE 3 0 : . LBE 2 9 : . LBB 3 3 : . LBB 3 4 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq - 8 8 (% rbp ), % rsi movq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call go . day 2 6 7 . rook addq $ 3 2 , % rsp testb % al , % al je . L 3 8 . LBB 3 5 : . LBB 3 6 : movb $ 1 , - 4 9 (% rbp ) movzbl - 4 9 (% rbp ), % eax jmp . L 2 1 . L 1 6 : . LBE 3 6 : . LBE 3 5 : . LBE 3 4 : . LBE 3 3 : . LBB 3 7 : . LBB 3 8 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq - 8 8 (% rbp ), % rsi movq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call go . day 2 6 7 . queen addq $ 3 2 , % rsp testb % al , % al je . L 3 9 . LBB 3 9 : . LBB 4 0 : movb $ 1 , - 4 9 (% rbp ) movzbl - 4 9 (% rbp ), % eax jmp . L 2 1 . L 3 5 : . LBE 4 0 : . LBE 3 9 : . LBE 3 8 : . LBE 3 7 : nop jmp . L 1 3 . L 3 6 : nop jmp . L 1 3 . L 3 7 : nop jmp . L 1 3 . L 3 8 : nop jmp . L 1 3 . L 3 9 : nop . L 1 3 : . LBE 2 0 : . LBE 1 9 : . LBE 1 5 : . LBB 4 1 : movq % r 1 5 , % rbx . L 5 : . LBE 4 1 : cmpq - 1 2 8 (% rbp ), % rbx jl . L 4 0 . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBE 8 : . LBB 4 2 : addq $ 1 , % r 1 4 . L 2 : . LBE 4 2 : cmpq - 1 2 0 (% rbp ), % r 1 4 jl . L 4 1 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 4 3 : movb $ 0 , - 4 9 (% rbp ) movzbl - 4 9 (% rbp ), % eax . L 2 1 : . LBE 4 3 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 3 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 4 3 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movb $ 0 , - 1 9 (% rbp ) . LBB 2 1 : movq $ 0 , - 8 (% rbp ) movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . LBB 2 2 : . LBB 2 3 : jmp . L 1 6 . L 4 2 : . LBB 2 4 : nop . LBE 2 4 : . LBB 2 5 : . LBB 2 6 : movq - 4 0 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 1 7 cmpq % rax , - 8 (% rbp ) jge . L 1 7 movq - 4 8 (% rbp ), % rdx movq - 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movl % eax , % edi call go . problem 1 2 5 . isAlphanumeric xorl $ 1 , % eax testb % al , % al jne . L 1 8 jmp . L 3 9 . L 1 7 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : . LBB 2 7 : addq $ 1 , - 8 (% rbp ) jmp . L 1 6 . L 3 9 : . LBE 2 7 : . LBE 2 6 : . LBB 2 8 : movq - 4 0 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 2 0 cmpq % rax , - 1 6 (% rbp ) jge . L 2 0 movq - 4 8 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movl % eax , % edi call go . problem 1 2 5 . isAlphanumeric xorl $ 1 , % eax testb % al , % al jne . L 2 1 jmp . L 4 0 . L 2 0 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : . LBB 2 9 : subq $ 1 , - 1 6 (% rbp ) jmp . L 1 6 . L 4 0 : . LBE 2 9 : . LBE 2 8 : movq - 4 0 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 2 3 cmpq % rax , - 8 (% rbp ) jge . L 2 3 movq - 4 8 (% rbp ), % rdx movq - 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 1 7 (% rbp ) . LBB 3 0 : movq - 4 0 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) jns . L 2 4 jmp . L 2 5 . L 2 3 : . LBE 3 0 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : . LBB 3 2 : cmpq % rax , - 8 (% rbp ) jge . L 2 5 movq - 4 8 (% rbp ), % rdx movq - 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 9 6 , % al ja . L 2 6 jmp . L 2 7 . L 2 5 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : . LBB 3 1 : movq - 4 0 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 2 8 cmpq % rax , - 8 (% rbp ) jge . L 2 8 movq - 4 8 (% rbp ), % rdx movq - 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax subl $ 3 2 , % eax movb % al , - 1 7 (% rbp ) jmp . L 2 7 . L 2 8 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : . LBE 3 1 : . LBE 3 2 : movq - 4 0 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 2 9 cmpq % rax , - 1 6 (% rbp ) jge . L 2 9 movq - 4 8 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 1 8 (% rbp ) . LBB 3 3 : movq - 4 0 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) jns . L 3 0 jmp . L 3 1 . L 2 9 : . LBE 3 3 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : . LBB 3 5 : cmpq % rax , - 1 6 (% rbp ) jge . L 3 1 movq - 4 8 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 9 6 , % al ja . L 3 2 jmp . L 3 3 . L 3 1 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : . LBB 3 4 : movq - 4 0 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 3 4 cmpq % rax , - 1 6 (% rbp ) jge . L 3 4 movq - 4 8 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax subl $ 3 2 , % eax movb % al , - 1 8 (% rbp ) jmp . L 3 3 . L 3 4 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : . LBE 3 4 : . LBE 3 5 : . LBB 3 6 : movzbl - 1 7 (% rbp ), % eax cmpb - 1 8 (% rbp ), % al je . L 3 5 . LBB 3 7 : . LBB 3 8 : movb $ 0 , - 1 9 (% rbp ) movzbl - 1 9 (% rbp ), % eax jmp . L 3 6 . L 3 5 : . LBE 3 8 : . LBE 3 7 : . LBE 3 6 : addq $ 1 , - 8 (% rbp ) subq $ 1 , - 1 6 (% rbp ) . L 1 6 : . LBE 2 5 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jl . L 4 2 . LBE 2 3 : . LBE 2 2 : . LBB 3 9 : movb $ 1 , - 1 9 (% rbp ) movzbl - 1 9 (% rbp ), % eax . L 3 6 : . LBE 3 9 : . LBE 2 1 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 7 movl $ 1 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 7 : pushq % rbp movq % rsp , % rbp subq $ 9 6 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 8 0 (% rbp ) movq % rdi , - 7 2 (% rbp ) movq % rdx , - 9 6 (% rbp ) movq % rcx , - 8 8 (% rbp ) movb $ 0 , - 3 3 (% rbp ) . LBB 2 : . LBB 3 : movq - 7 2 (% rbp ), % rax testq % rax , % rax jne . L 2 movq - 8 0 (% rbp ), % rax leaq . LC 0 (% rip ), % rdx cmpq % rdx , % rax jne . L 3 movl $ 1 , % eax jmp . L 5 . L 3 : movl $ 1 , % eax jmp . L 5 . L 2 : movl $ 0 , % eax . L 5 : testb % al , % al je . L 6 . LBB 4 : . LBB 5 : movb $ 1 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 7 . L 6 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 7 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 8 8 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movb $ 0 , - 1 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 6 : movq $ 0 , - 2 4 (% rbp ) . LBB 7 : jmp . L 8 . L 2 6 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 1 6 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . LBB 1 1 : jmp . L 9 . L 2 5 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 0 cmpq % rax , - 2 4 (% rbp ) jl . L 2 1 . L 1 0 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : movq - 8 8 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 2 cmpq % rax , - 3 2 (% rbp ) jl . L 2 2 . L 1 2 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : movq - 8 0 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % edx movq - 9 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax addq % rcx , % rax movzbl (% rax ), % eax cmpb % al , % dl jne . L 1 4 . LBB 1 5 : movb $ 1 , - 1 (% rbp ) movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 1 6 (% rbp ) jmp . L 1 5 . L 1 4 : . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 1 6 : addq $ 1 , - 3 2 (% rbp ) . L 9 : . LBE 1 6 : movq - 3 2 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jl . L 2 5 . L 1 5 : . LBE 1 1 : . LBE 1 0 : . LBB 1 7 : . LBB 1 8 : movzbl - 1 (% rbp ), % eax xorl $ 1 , % eax movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 7 . LBB 1 9 : movq - 2 4 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 4 8 (% rbp ) sete % al . L 1 7 : . LBE 1 9 : . LBE 1 8 : testb % al , % al je . L 1 8 . LBB 2 0 : . LBB 2 1 : movzbl - 1 (% rbp ), % eax movb % al , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 7 . L 1 8 : . LBE 2 1 : . LBE 2 0 : . LBB 2 2 : movb $ 0 , - 1 (% rbp ) . LBE 2 2 : . LBE 1 7 : . LBE 9 : . LBB 2 3 : addq $ 1 , - 2 4 (% rbp ) . L 8 : . LBE 2 3 : movq - 2 4 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 2 6 . LBE 7 : . LBE 6 : . LBB 2 4 : movzbl - 1 (% rbp ), % eax movb % al , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax . L 7 : . LBE 2 4 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 9 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 9 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : . LBB 4 : cmpq $ 0 , - 2 4 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 . LBB 5 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax sete % al . L 2 : . LBE 5 : . LBE 4 : testb % al , % al je . L 3 . LBB 6 : . LBB 7 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 4 . L 3 : . LBE 7 : . LBE 6 : . LBE 3 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , % rdi call go . leetcode 0 0 2 4 . swapPairs movq % rax , % rdx movq - 2 4 (% rbp ), % rax addq $ 8 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 5 . LBB 8 : movq % rdx , (% rax ) . LBE 8 : jmp . L 6 . L 5 : . LBB 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 : . LBE 9 : movq - 1 6 (% rbp ), % rax addq $ 8 , % rax movq - 2 4 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 7 . LBB 1 0 : movq % rdx , (% rax ) . LBE 1 0 : jmp . L 8 . L 7 : . LBB 1 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 8 : . LBE 1 1 : . LBB 1 2 : movq - 1 6 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 4 : . LBE 1 2 : . LBE 2 : leave ret
leaq - 7 9 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 4 1 movl $ 7 9 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 9 : ret . L 4 4 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 7 4 4 , % rsp movq % rdi , - 6 4 8 (% rbp ) leaq - 5 7 6 (% rbp ), % rax movl $ 1 0 , % ecx movl $ 2 0 , % edx movl $ 0 , % esi movq % rax , % rdi call go . binaryTree . randomSlice movl $ 0 , % edx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 6 0 8 (% rbp ) movq $ 0 , - 6 0 0 (% rbp ) movq $ 0 , - 5 9 2 (% rbp ) movl $ 0 , % edx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 6 4 0 (% rbp ) movq $ 0 , - 6 3 2 (% rbp ) movq $ 0 , - 6 2 4 (% rbp ) call go . binaryTree . newBstIterative movq % rax , - 5 6 (% rbp ) call go . binaryTree . newBstRecrusive movq % rax , - 6 4 (% rbp ) . LBB 4 5 2 : movq $ 0 , - 7 2 (% rbp ) . LBB 4 5 3 : . LBB 4 5 4 : . LBB 4 5 5 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq - 5 3 6 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 4 5 5 : jmp . L 4 2 2 . L 4 4 0 : . LBB 4 5 6 : nop . LBE 4 5 6 : . LBB 4 5 7 : . LBB 4 5 8 : movq - 5 3 6 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 4 2 3 cmpq % rax , % r 1 2 jge . L 4 2 3 movq - 5 4 4 (% rbp ), % rdx movq % r 1 2 , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax . LBE 4 5 8 : . LBB 4 5 9 : movq % rax , - 7 2 (% rbp ) . LBE 4 5 9 : . LBB 4 6 0 : leaq uint 3 2 .. d (% rip ), % rax movq % rax , - 7 3 6 (% rbp ) leaq uint 3 2 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 1 2 (% rbp ) movq - 5 1 2 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movl % eax , (% rdx ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 7 2 8 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . binaryTree . bstIterative . Insert .. stub leaq uint 3 2 .. d (% rip ), % r 1 4 leaq uint 3 2 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) movq - 5 0 4 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movl % eax , (% rdx ) movq - 5 0 4 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 6 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . binaryTree . bstRecrusive . Insert .. stub . LBE 4 6 0 : . LBE 4 5 7 : . LBB 4 6 2 : addq $ 1 , % r 1 2 jmp . L 4 2 2 . L 4 2 3 : . LBE 4 6 2 : . LBB 4 6 3 : . LBB 4 6 1 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 4 2 2 : . LBE 4 6 1 : . LBE 4 6 3 : cmpq % r 1 3 , % r 1 2 jl . L 4 4 0 . LBE 4 5 4 : . LBE 4 5 3 : . LBE 4 5 2 : movq - 6 4 (% rbp ), % rax movq % rax , % rdi call go . binaryTree . bstRecrusive . Root .. stub movq % rax , % rsi movq % rdx , % rdi leaq go . binaryTree . TestBstIterative_PreOrderWalk .. func 1 (% rip ), % rcx leaq - 6 4 0 (% rbp ), % rdx movq $ 0 , - 4 9 6 (% rbp ) movq $ 0 , - 4 8 8 (% rbp ) leaq - 4 9 6 (% rbp ), % rax movq % rax , - 4 7 2 (% rbp ) movq - 4 7 2 (% rbp ), % rax movq % rcx , (% rax ) movq % rdx , 8 (% rax ) movq - 4 7 2 (% rbp ), % r 8 movq % rsi , % rcx movq % rdi , % rbx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rsi movq - 6 4 (% rbp ), % rax movq % r 8 , % rcx movq % rax , % rdi call go . binaryTree . bstRecrusive . PreOrderWalk movq - 5 6 (% rbp ), % rax movq % rax , % rdi call go . binaryTree . bstIterative . Root .. stub movq % rax , % rsi movq % rdx , % rdi leaq go . binaryTree . TestBstIterative_PreOrderWalk .. func 2 (% rip ), % rcx leaq - 6 0 8 (% rbp ), % rdx movq $ 0 , - 4 6 4 (% rbp ) movq $ 0 , - 4 5 6 (% rbp ) leaq - 4 6 4 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rcx , (% rax ) movq % rdx , 8 (% rax ) movq - 4 4 8 (% rbp ), % r 8 movq % rsi , % rcx movq % rdi , % rbx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rsi movq - 5 6 (% rbp ), % rax movq % r 8 , % rcx movq % rax , % rdi call go . binaryTree . bstIterative . PreOrderWalk . LBB 4 6 4 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 7 2 0 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 8 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 2 6 . LBB 4 6 5 : movq - 4 0 8 (% rbp ), % rcx movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 8 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 6 5 : jmp . L 4 2 7 . L 4 2 6 : . LBB 4 6 6 : movq - 4 0 8 (% rbp ), % rcx leaq - 4 0 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 2 7 : . LBE 4 6 6 : movq - 4 0 8 (% rbp ), % rax movq % rax , - 7 1 2 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 7 0 4 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 0 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 2 8 . LBB 4 6 7 : movq - 4 4 0 (% rbp ), % rcx movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 1 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 6 7 : jmp . L 4 2 9 . L 4 2 8 : . LBB 4 6 8 : movq - 4 4 0 (% rbp ), % rcx leaq - 4 3 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 2 9 : . LBE 4 6 8 : movq - 4 4 0 (% rbp ), % rax movq % rax , - 6 9 6 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % rax movq - 7 2 0 (% rbp ), % rdx movq - 7 1 2 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT xorl $ 1 , % eax testb % al , % al je . L 4 2 1 . LBB 4 6 9 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 7 8 4 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 3 1 . LBB 4 7 0 : movq - 3 7 6 (% rbp ), % rcx movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 5 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 7 0 : jmp . L 4 3 2 . L 4 3 1 : . LBB 4 7 1 : movq - 3 7 6 (% rbp ), % rax leaq - 3 6 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 3 2 : . LBE 4 7 1 : movq - 3 7 6 (% rbp ), % rax movq % rax , - 7 7 6 (% rbp ) movdqa - 7 8 4 (% rbp ), % xmm 0 movups % xmm 0 , - 3 3 6 (% rbp ) leaq - 3 3 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 1 , - 1 5 2 (% rbp ) movq $ 1 , - 1 4 4 (% rbp ) leaq . LC 1 6 8 (% rip ), % rax movq % rax , - 6 8 8 (% rbp ) movq $ 9 , - 6 8 0 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 7 6 8 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 3 3 . LBB 4 7 2 : movq - 3 1 2 (% rbp ), % rcx movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 8 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 7 2 : jmp . L 4 3 4 . L 4 3 3 : . LBB 4 7 3 : movq - 3 1 2 (% rbp ), % rax leaq - 3 0 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 3 4 : . LBE 4 7 3 : movq - 3 1 2 (% rbp ), % rax movq % rax , - 7 6 0 (% rbp ) movdqa - 7 6 8 (% rbp ), % xmm 1 movups % xmm 1 , - 2 7 2 (% rbp ) leaq - 2 7 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) leaq . LC 1 6 9 (% rip ), % rax movq % rax , - 6 7 2 (% rbp ) movq $ 1 0 , - 6 6 4 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq % r 1 2 , - 2 5 6 (% rbp ) movq % r 1 3 , - 2 4 8 (% rbp ) movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 7 5 2 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) leaq - 2 5 6 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 3 5 . LBB 4 7 4 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 7 4 : jmp . L 4 3 6 . L 4 3 5 : . LBB 4 7 5 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 3 6 : . LBE 4 7 5 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 7 4 4 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movdqa - 7 5 2 (% rbp ), % xmm 2 movups % xmm 2 , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 3 7 . LBB 4 7 6 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 7 6 : jmp . L 4 3 8 . L 4 3 7 : . LBB 4 7 7 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 3 8 : . LBE 4 7 7 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) movq - 6 4 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rax , % rdi call testing . T . Log .. stub @ PLT addq $ 3 2 , % rsp movq - 6 4 8 (% rbp ), % rax movq % rax , % rdi call testing . T . Fail .. stub @ PLT . L 4 2 1 : . LBE 4 6 9 : . LBE 4 6 4 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 5 2 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 1 movl $ 5 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 1 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 5 0 4 , % rsp movq % rdi , - 5 0 4 (% rbp ) movq % rsi , - 5 1 2 (% rbp ) movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 5 0 4 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : leaq . LC 1 7 (% rip ), % r 8 movl $ 1 , % r 9 d movq % r 8 , - 4 1 6 (% rbp ) movq % r 9 , - 4 0 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx jmp . L 3 5 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : leaq . LC 1 8 (% rip ), % rcx movl $ 0 , % ebx movq % rcx , - 4 3 2 (% rbp ) movq % rbx , - 4 2 4 (% rbp ) movb $ 0 , - 1 7 (% rbp ) . LBB 6 : cmpq $ 0 , - 5 0 4 (% rbp ) jns . L 4 . LBB 7 : negq - 5 0 4 (% rbp ) xorb $ 1 , - 1 7 (% rbp ) . L 4 : . LBE 7 : . LBE 6 : . LBB 8 : cmpq $ 0 , - 5 1 2 (% rbp ) jns . L 5 . LBB 9 : negq - 5 1 2 (% rbp ) xorb $ 1 , - 1 7 (% rbp ) . L 5 : . LBE 9 : . LBE 8 : . LBB 1 0 : cmpb $ 0 , - 1 7 (% rbp ) je . L 6 . LBB 1 1 : leaq . LC 1 9 (% rip ), % rax movl $ 1 , % edx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) . L 6 : . LBE 1 1 : . LBE 1 0 : cmpq $- 1 , - 5 1 2 (% rbp ) jne . L 7 movq - 5 0 4 (% rbp ), % rax negq % rax jmp . L 8 . L 7 : cmpq $ 0 , - 5 1 2 (% rbp ) jne . L 9 call runtime . panicdivide @ PLT . L 9 : movq - 5 0 4 (% rbp ), % rax cqto idivq - 5 1 2 (% rbp ) . L 8 : movq % rax , % rdi call strconv . Itoa @ PLT movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rbx movq % rcx , - 4 0 0 (% rbp ) movq % rbx , - 3 9 2 (% rbp ) movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) leaq - 4 0 0 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) cmpq $- 1 , - 5 1 2 (% rbp ) je . L 1 0 cmpq $ 0 , - 5 1 2 (% rbp ) jne . L 1 1 call runtime . panicdivide @ PLT . L 1 1 : movq - 5 0 4 (% rbp ), % rax cqto idivq - 5 1 2 (% rbp ) movq % rdx , % rax jmp . L 1 2 . L 1 0 : movl $ 0 , % eax . L 1 2 : movq % rax , - 3 2 (% rbp ) . LBB 1 2 : cmpq $ 0 , - 3 2 (% rbp ) jne . L 1 3 . LBB 1 3 : . LBB 1 4 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx jmp . L 3 5 . L 1 3 : . LBE 1 4 : . LBE 1 3 : . LBE 1 2 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 1 , - 3 4 4 (% rbp ) leaq - 3 6 8 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) leaq type ... 6 0 x . 7 uint 8 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 3 6 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq $ 0 , - 4 5 6 (% rbp ) movq $ 0 , - 4 4 8 (% rbp ) movb $ 4 8 , - 3 2 2 (% rbp ) movb $ 4 9 , - 3 2 1 (% rbp ) movb $ 5 0 , - 3 2 0 (% rbp ) movb $ 5 1 , - 3 1 9 (% rbp ) movb $ 5 2 , - 3 1 8 (% rbp ) movb $ 5 3 , - 3 1 7 (% rbp ) movb $ 5 4 , - 3 1 6 (% rbp ) movb $ 5 5 , - 3 1 5 (% rbp ) movb $ 5 6 , - 3 1 4 (% rbp ) movb $ 5 7 , - 3 1 3 (% rbp ) leaq - 3 2 2 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq $ 1 0 , - 4 8 8 (% rbp ) movq $ 1 0 , - 4 8 0 (% rbp ) movl $ 0 , % r 8 d movl $ 8 , % ecx movl $ 1 6 , % edx movl $ 0 , % esi leaq type .. map . 6 int . 7 int (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 4 0 (% rbp ) . LBB 1 5 : . LBB 1 6 : jmp . L 1 4 . L 4 0 : . LBB 1 7 : nop . LBE 1 7 : . LBB 1 8 : . LBB 1 9 : movq $ 0 , - 4 8 (% rbp ) movb $ 0 , - 4 9 (% rbp ) . LBB 2 0 : movq - 3 2 (% rbp ), % rax movq % rax , - 3 1 2 (% rbp ) leaq - 3 1 2 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 4 8 (% rbp ) movb % dl , - 4 9 (% rbp ) . LBE 2 0 : cmpb $ 0 , - 4 9 (% rbp ) je . L 1 5 . LBB 2 1 : . LBB 2 2 : movq - 4 4 8 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 6 cmpq % rax , - 4 8 (% rbp ) jg . L 1 6 cmpq $ 0 , - 4 8 (% rbp ) jns . L 1 7 jmp . L 3 6 . L 1 6 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 3 6 : movq - 4 8 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 7 : movq - 4 6 4 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 2 9 6 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 4 4 8 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 9 cmpq % rax , - 4 8 (% rbp ) jle . L 3 7 . L 1 9 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 3 7 : movq - 4 6 4 (% rbp ), % rdx movq - 4 4 8 (% rbp ), % rax cmpq % rax , - 4 8 (% rbp ) je . L 2 1 movq - 4 8 (% rbp ), % rax jmp . L 2 2 . L 2 1 : movl $ 0 , % eax . L 2 2 : addq % rdx , % rax movq % rax , - 2 7 2 (% rbp ) movq - 4 5 6 (% rbp ), % rax subq - 4 8 (% rbp ), % rax movq % rax , - 2 6 4 (% rbp ) movq - 4 4 8 (% rbp ), % rax subq - 4 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 9 6 (% rbp ), % rax movq % rax , - 2 1 6 (% rbp ) leaq . LC 2 1 (% rip ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 1 , - 2 0 0 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq % rax , - 1 8 4 (% rbp ) leaq . LC 2 2 (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movl $ 5 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx jmp . L 3 5 . L 1 5 : . LBE 2 2 : . LBE 2 1 : . LBE 1 9 : . LBB 2 3 : movq - 3 2 (% rbp ), % rax movq % rax , - 1 5 2 (% rbp ) movq - 4 5 6 (% rbp ), % rbx leaq - 1 5 2 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % rbx , (% rax ) . LBE 2 3 : movq - 3 2 (% rbp ), % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax movq % rax , - 3 2 (% rbp ) cmpq $- 1 , - 5 1 2 (% rbp ) jne . L 2 3 movq - 3 2 (% rbp ), % rax negq % rax jmp . L 2 4 . L 2 3 : cmpq $ 0 , - 5 1 2 (% rbp ) jne . L 2 5 call runtime . panicdivide @ PLT . L 2 5 : movq - 3 2 (% rbp ), % rax cqto idivq - 5 1 2 (% rbp ) . L 2 4 : movq - 4 8 8 (% rbp ), % rdx testq % rax , % rax js . L 2 6 cmpq % rdx , % rax jl . L 3 8 . L 2 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 4 9 6 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 5 0 (% rbp ) cmpq $- 1 , - 5 1 2 (% rbp ) jne . L 2 8 movl $ 0 , % eax jmp . L 2 9 . L 2 8 : cmpq $ 0 , - 5 1 2 (% rbp ) jne . L 3 0 call runtime . panicdivide @ PLT . L 3 0 : movq - 3 2 (% rbp ), % rax cqto idivq - 5 1 2 (% rbp ) movq % rdx , % rax . L 2 9 : movq % rax , - 3 2 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 3 1 . LBB 2 4 : movq - 1 4 4 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq uint 8 .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) . LBE 2 4 : jmp . L 3 2 . L 3 1 : . LBB 2 5 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq % rcx , - 4 6 4 (% rbp ) movq % rax , - 4 5 6 (% rbp ) movq % rdx , - 4 4 8 (% rbp ) . L 3 2 : . LBE 2 5 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx addq % rax , % rdx movzbl - 5 0 (% rbp ), % eax movb % al , (% rdx ) . L 1 4 : . LBE 1 8 : cmpq $ 0 , - 3 2 (% rbp ) jne . L 4 0 . LBE 1 6 : . LBE 1 5 : . LBB 2 6 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 4 5 6 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx . L 3 5 : . LBE 2 6 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 6 0 movl $ 2 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 6 0 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 0 0 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 1 9 2 (% rbp ) movq % rdi , - 1 8 4 (% rbp ) movq % rdx , - 2 0 8 (% rbp ) movq % rcx , - 2 0 0 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 2 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 7 2 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 7 6 (% rbp ) movq % rbx , - 1 6 8 (% rbp ) movq % rbx , - 1 6 0 (% rbp ) . LBB 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 5 7 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 cmpq % rax , - 2 4 (% rbp ) jl . L 4 2 . L 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq - 1 7 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rax , (% rdx ) . LBE 6 : . LBB 7 : addq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 7 : movq - 7 2 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 2 4 (% rbp ) jl . L 5 7 . LBE 4 : . LBE 3 : . LBB 8 : movq $ 1 , - 3 2 (% rbp ) . LBB 9 : jmp . L 7 . L 5 9 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : movq - 1 6 8 (% rbp ), % rax testq % rax , % rax jg . L 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 8 : movq - 1 7 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 4 0 (% rbp ) movq - 1 6 8 (% rbp ), % rax testq % rax , % rax jg . L 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 9 : movq - 1 7 6 (% rbp ), % rax movq - 3 2 (% rbp ), % rdx movq % rdx , (% rax ) . LBB 1 2 : movq $ 1 , - 4 8 (% rbp ) . LBB 1 3 : jmp . L 1 0 . L 5 8 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 4 8 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 1 8 4 (% rbp ), % rax testq % rdx , % rdx js . L 1 1 cmpq % rax , % rdx jl . L 4 4 . L 1 1 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq - 2 0 0 (% rbp ), % rcx testq % rax , % rax js . L 1 3 cmpq % rcx , % rax jl . L 4 5 . L 1 3 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 1 9 2 (% rbp ), % rcx addq % rcx , % rdx movzbl (% rdx ), % edx movq - 2 0 8 (% rbp ), % rcx addq % rcx , % rax movzbl (% rax ), % eax cmpb % al , % dl jne . L 1 5 . LBB 1 7 : . LBB 1 8 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdx cmpq $ 0 , - 4 8 (% rbp ) js . L 1 6 cmpq % rdx , - 4 8 (% rbp ) jl . L 4 6 . L 1 6 : movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq - 1 7 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 1 3 6 (% rbp ), % rdx testq % rax , % rax js . L 1 8 cmpq % rdx , % rax jl . L 4 7 . L 1 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : movq - 1 4 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) movq % rcx , - 4 0 (% rbp ) . LBE 1 8 : . LBE 1 7 : jmp . L 2 0 . L 1 5 : . LBB 1 9 : movq - 4 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 2 0 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 1 cmpq % rax , - 4 8 (% rbp ) jl . L 4 8 . L 2 1 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : movq - 1 7 6 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 5 6 (% rbp ) jle . L 2 3 . LBB 2 1 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 4 cmpq % rax , - 4 8 (% rbp ) jl . L 4 9 . L 2 4 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : movq - 1 7 6 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) . L 2 3 : . LBE 2 1 : . LBE 2 0 : . LBB 2 2 : movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 1 6 8 (% rbp ), % rdx testq % rax , % rax js . L 2 6 cmpq % rdx , % rax jl . L 5 0 . L 2 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 0 : movq - 1 7 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 5 6 (% rbp ) jle . L 2 8 . LBB 2 3 : movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 1 6 8 (% rbp ), % rdx testq % rax , % rax js . L 2 9 cmpq % rdx , % rax jl . L 5 1 . L 2 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : movq - 1 7 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) . L 2 8 : . LBE 2 3 : . LBE 2 2 : . LBB 2 4 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 4 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx leaq 1 (% rdx ), % rsi movq - 1 6 8 (% rbp ), % rdx cmpq $ 0 , - 4 8 (% rbp ) js . L 3 1 cmpq % rdx , - 4 8 (% rbp ) jl . L 5 2 . L 3 1 : movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : movq - 1 7 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 3 3 cmpq % rdx , % rax jl . L 5 3 . L 3 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 3 : movq - 1 1 2 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) movq % rcx , - 4 0 (% rbp ) . L 2 0 : . LBE 2 4 : . LBE 1 9 : . LBE 1 6 : . LBE 1 5 : . LBB 2 5 : addq $ 1 , - 4 8 (% rbp ) . L 1 0 : . LBE 2 5 : movq - 7 2 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 4 8 (% rbp ) jl . L 5 8 . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 2 6 : addq $ 1 , - 3 2 (% rbp ) . L 7 : . LBE 2 6 : movq - 8 0 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 3 2 (% rbp ) jl . L 5 9 . LBE 9 : . LBE 8 : . LBB 2 7 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 3 9 cmpq % rax , - 7 2 (% rbp ) jl . L 5 6 . L 3 9 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 6 : movq - 1 7 6 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax . LBE 2 7 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
leaq - 5 5 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 3 2 movl $ 5 5 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 8 : ret . L 4 3 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 5 2 8 , % rsp movq % rdi , - 5 2 0 (% rbp ) movq % rsi , - 5 2 8 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq % rcx , - 5 4 4 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 6 8 : movq - 5 2 8 (% rbp ), % rcx movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq 4 8 (% rcx ), % rax movq % rax , - 4 9 6 (% rbp ) movq - 5 0 4 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 4 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 0 5 . LBB 2 6 9 : movq - 5 2 8 (% rbp ), % rcx leaq 3 2 (% rcx ), % rbx movq - 5 1 2 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 go . bTree . keyValue (% rip ), % rsi call runtime . growslice @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq - 4 7 2 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 4 6 4 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 0 6 . LBB 2 7 0 : movq - 4 8 0 (% rbp ), % rax movq % rax , (% rbx ) . LBE 2 7 0 : jmp . L 4 0 7 . L 4 0 6 : . LBB 2 7 1 : movq - 4 8 0 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 4 0 7 . L 4 0 5 : . LBE 2 7 1 : . LBE 2 6 9 : . LBB 2 7 2 : movq - 5 1 2 (% rbp ), % rsi movq - 4 9 6 (% rbp ), % rdx movq - 5 2 8 (% rbp ), % rcx movq % rsi , 3 2 (% rcx ) movq - 5 2 8 (% rbp ), % rcx movq % rax , 4 0 (% rcx ) movq - 5 2 8 (% rbp ), % rax movq % rdx , 4 8 (% rax ) . L 4 0 7 : . LBE 2 7 2 : movq - 5 2 8 (% rbp ), % rcx movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq 4 8 (% rcx ), % rax movq % rax , - 4 9 6 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 4 0 8 . LBB 2 7 3 : movq - 5 4 4 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 2 7 3 : jmp . L 4 0 9 . L 4 0 8 : . LBB 2 7 4 : movq - 5 4 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 4 0 9 : . LBE 2 7 4 : movq - 5 3 6 (% rbp ), % rax leaq 3 2 (% rax ), % rbx movq - 5 2 8 (% rbp ), % rcx movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq 4 8 (% rcx ), % rax movq % rax , - 4 3 2 (% rbp ) movq - 4 4 0 (% rbp ), % r 1 2 movq - 5 3 6 (% rbp ), % rcx movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq 4 8 (% rcx ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 4 0 8 (% rbp ), % rax addq % r 1 2 , % rax movq - 4 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 1 0 movq - 4 4 8 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 go . bTree . keyValue (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) jmp . L 4 1 1 . L 4 1 0 : movq - 4 4 8 (% rbp ), % rcx movq - 4 3 2 (% rbp ), % rdx movq % rcx , - 4 4 8 (% rbp ) movq % rax , - 4 4 0 (% rbp ) movq % rdx , - 4 3 2 (% rbp ) . L 4 1 1 : movq - 4 4 8 (% rbp ), % rdx movq - 4 3 2 (% rbp ), % rax cmpq % rax , % r 1 2 je . L 4 1 2 movq % r 1 2 , % rax salq $ 3 , % rax jmp . L 4 1 3 . L 4 1 2 : movl $ 0 , % eax . L 4 1 3 : addq % rdx , % rax movq % rax , - 3 8 4 (% rbp ) movq - 4 4 0 (% rbp ), % rax subq % r 1 2 , % rax movq % rax , - 3 7 6 (% rbp ) movq - 4 3 2 (% rbp ), % rax subq % r 1 2 , % rax movq % rax , - 3 6 8 (% rbp ) pushq - 4 0 0 (% rbp ) pushq - 4 0 8 (% rbp ) pushq - 4 1 6 (% rbp ) pushq - 3 6 8 (% rbp ) pushq - 3 7 6 (% rbp ) pushq - 3 8 4 (% rbp ) leaq type ... 1 go . bTree . keyValue (% rip ), % rdi call runtime . typedslicecopy @ PLT addq $ 4 8 , % rsp movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 4 4 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 3 3 6 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 1 4 . LBB 2 7 5 : movq - 3 5 2 (% rbp ), % rax movq % rax , (% rbx ) . LBE 2 7 5 : jmp . L 4 1 5 . L 4 1 4 : . LBB 2 7 6 : movq - 3 5 2 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 4 1 5 : . LBE 2 7 6 : . LBB 2 7 7 : movq $ 0 , - 3 2 (% rbp ) . LBB 2 7 8 : movq - 5 2 8 (% rbp ), % rcx movq 8 (% rcx ), % rax movq 1 6 (% rcx ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq 2 4 (% rcx ), % rax movq % rax , - 3 0 4 (% rbp ) . LBB 2 7 9 : . LBB 2 8 0 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 2 8 0 : jmp . L 4 1 6 . L 4 3 1 : . LBB 2 8 1 : nop . LBE 2 8 1 : . LBB 2 8 2 : . LBB 2 8 3 : movq - 2 8 0 (% rbp ), % rax testq % rbx , % rbx js . L 4 1 7 cmpq % rax , % rbx jge . L 4 1 7 movq - 2 8 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 2 8 3 : . LBB 2 8 4 : movq % rax , - 3 2 (% rbp ) . LBE 2 8 4 : . LBB 2 8 5 : . LBB 2 8 6 : cmpq $ 0 , - 3 2 (% rbp ) jne . L 4 1 8 . LBB 2 8 7 : jmp . L 4 1 9 . L 4 1 7 : . LBE 2 8 7 : . LBE 2 8 6 : . LBE 2 8 5 : . LBB 2 9 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 8 : . LBE 2 9 2 : . LBB 2 9 3 : . LBB 2 9 1 : . LBB 2 9 0 : movq - 3 2 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 4 2 0 . LBB 2 8 8 : movq % rdx , (% rax ) . LBE 2 8 8 : jmp . L 4 1 9 . L 4 2 0 : . LBB 2 8 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 4 1 9 : . LBE 2 8 9 : . LBE 2 9 0 : . LBE 2 9 1 : . LBE 2 9 3 : . LBE 2 8 2 : . LBB 2 9 4 : addq $ 1 , % rbx . L 4 1 6 : . LBE 2 9 4 : cmpq % r 1 2 , % rbx jl . L 4 3 1 . LBE 2 7 9 : . LBE 2 7 8 : . LBE 2 7 7 : movq - 5 3 6 (% rbp ), % rax leaq 8 (% rax ), % rbx movq - 5 2 8 (% rbp ), % rcx movq 8 (% rcx ), % rax movq 1 6 (% rcx ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 2 4 (% rcx ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 2 movq - 5 3 6 (% rbp ), % rcx movq 8 (% rcx ), % rax movq 1 6 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 2 4 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rax addq % r 1 2 , % rax movq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 2 3 movq - 2 5 6 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 go . bTree . bTreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) jmp . L 4 2 4 . L 4 2 3 : movq - 2 5 6 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rdx movq % rcx , - 2 5 6 (% rbp ) movq % rax , - 2 4 8 (% rbp ) movq % rdx , - 2 4 0 (% rbp ) . L 4 2 4 : movq - 2 5 6 (% rbp ), % rdx movq - 2 4 0 (% rbp ), % rax cmpq % rax , % r 1 2 je . L 4 2 5 movq % r 1 2 , % rax salq $ 3 , % rax jmp . L 4 2 6 . L 4 2 5 : movl $ 0 , % eax . L 4 2 6 : addq % rdx , % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 4 8 (% rbp ), % rax subq % r 1 2 , % rax movq % rax , - 1 8 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax subq % r 1 2 , % rax movq % rax , - 1 7 6 (% rbp ) pushq - 2 0 8 (% rbp ) pushq - 2 1 6 (% rbp ) pushq - 2 2 4 (% rbp ) pushq - 1 7 6 (% rbp ) pushq - 1 8 4 (% rbp ) pushq - 1 9 2 (% rbp ) leaq type ... 1 go . bTree . bTreeNode (% rip ), % rdi call runtime . typedslicecopy @ PLT addq $ 4 8 , % rsp movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 2 7 . LBB 2 9 5 : movq - 1 6 0 (% rbp ), % rax movq % rax , (% rbx ) . LBE 2 9 5 : jmp . L 4 2 8 . L 4 2 7 : . LBB 2 9 6 : movq - 1 6 0 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 4 2 8 : . LBE 2 9 6 : . LBB 2 9 7 : movq - 5 3 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . LBE 2 9 7 : . LBE 2 6 8 : leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 7 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 2 movl $ 7 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 7 2 8 , % rsp movq % rdi , - 7 1 2 (% rbp ) leaq type ... 6 6 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 1 6 (% rbp ) movq - 6 1 6 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 7 , 8 (% rax ) movq $ 4 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq $ 8 , 3 2 (% rax ) movq $ 1 , 4 0 (% rax ) movq - 6 1 6 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 6 , - 5 8 4 (% rbp ) movq $ 6 , - 5 7 6 (% rbp ) movq $ 1 , - 5 6 8 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 8 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq $ 2 1 , (% rax ) movq $ 2 6 , 8 (% rax ) movq $ 3 1 , 1 6 (% rax ) movq $ 3 3 , 2 4 (% rax ) movq $ 4 0 , 3 2 (% rax ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 5 , - 5 5 2 (% rbp ) movq $ 5 , - 5 4 4 (% rbp ) movq $ 5 , - 5 3 6 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 0 (% rbp ) movq - 6 0 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq - 6 0 0 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 2 , - 5 2 0 (% rbp ) movq $ 2 , - 5 1 2 (% rbp ) movq $ 1 , - 5 0 4 (% rbp ) leaq - 5 9 2 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) movq $ 3 , - 6 3 2 (% rbp ) movq $ 3 , - 6 2 4 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 1 7 (% rip ), % rax movq % rax , - 7 3 6 (% rbp ) movq $ 7 0 , - 7 2 8 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 7 3 6 (% rbp ), % rcx movq - 7 2 8 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) . LBB 2 : movq $ 0 , - 7 0 4 (% rbp ) movq $ 0 , - 6 9 6 (% rbp ) movq $ 0 , - 6 8 8 (% rbp ) movq $ 0 , - 6 8 0 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 7 3 6 (% rbp ) movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 1 1 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : movq - 4 2 4 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 4 3 2 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) . LBE 8 : . LBB 9 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 7 0 4 (% rbp ) movq % rdx , - 6 9 6 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 6 8 8 (% rbp ) movq % rdx , - 6 8 0 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 6 8 0 (% rbp ), % rax movq % rax , - 6 4 8 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 6 7 2 (% rbp ) movq % rdx , - 6 6 4 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 6 5 6 (% rbp ) subq $ 8 , % rsp pushq - 6 5 6 (% rbp ) pushq - 6 6 4 (% rbp ) pushq - 6 7 2 (% rbp ) call go . leetcode . lastStoneWeightII addq $ 3 2 , % rsp movq % rax , - 7 2 0 (% rbp ) leaq go . leetcode .. go . leetcode . para 1 0 4 9 .. d (% rip ), % rax movq % rax , - 7 6 8 (% rbp ) leaq go . leetcode .. go . leetcode . para 1 0 4 9 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 4 jmp . L 9 . L 3 : . LBE 1 0 : . LBB 1 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 3 : . LBB 1 4 : . LBB 1 1 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 1 : jmp . L 6 . L 9 : . LBB 1 2 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 1 0 4 9 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 : . LBE 1 2 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 7 6 0 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 7 5 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 7 2 0 (% rbp ), % rdi movq % rdi , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 7 4 4 (% rbp ) movdqa - 7 6 8 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 7 5 2 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) . LBE 1 4 : . LBE 7 : . LBB 1 5 : addq $ 1 , % rbx . L 2 : . LBE 1 5 : cmpq - 7 3 6 (% rbp ), % rbx jl . L 1 1 . LBE 4 : . LBE 3 : . LBE 2 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 1 9 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 4 movl $ 4 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 4 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq $ 0 , - 2 4 (% rbp ) . LBB 1 6 : . LBB 1 7 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 4 . LBB 1 8 : . LBB 1 9 : movq $ 0 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 1 5 . L 1 4 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rsi movl $ 0 , % edi call go . leetcode . quickSort 1 6 4 addq $ 3 2 , % rsp movq $ 0 , - 8 (% rbp ) . LBB 2 0 : movq $ 0 , - 1 6 (% rbp ) . LBB 2 1 : jmp . L 1 6 . L 3 3 : . LBB 2 2 : nop . LBE 2 2 : . LBB 2 3 : . LBB 2 4 : movq - 1 6 (% rbp ), % rax addq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 7 cmpq % rdx , % rax jl . L 2 8 . L 1 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 1 6 (% rbp ) js . L 1 9 cmpq % rdx , - 1 6 (% rbp ) jl . L 2 9 . L 1 9 : movq - 1 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq 1 6 (% rbp ), % rcx movq - 1 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx subq % rdx , % rax cmpq % rax , - 8 (% rbp ) jge . L 2 1 . LBB 2 5 : movq - 1 6 (% rbp ), % rax addq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 2 2 cmpq % rdx , % rax jl . L 3 0 . L 2 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 1 6 (% rbp ) js . L 2 4 cmpq % rdx , - 1 6 (% rbp ) jl . L 3 1 . L 2 4 : movq - 1 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq 1 6 (% rbp ), % rcx movq - 1 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx subq % rdx , % rax movq % rax , - 8 (% rbp ) . L 2 1 : . LBE 2 5 : . LBE 2 4 : . LBE 2 3 : . LBB 2 6 : addq $ 1 , - 1 6 (% rbp ) . L 1 6 : . LBE 2 6 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 1 6 (% rbp ) jl . L 3 3 . LBE 2 1 : . LBE 2 0 : . LBB 2 7 : movq - 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 1 5 : . LBE 2 7 : . LBE 1 6 : leave ret
. LFB 1 : leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 7 movl $ 2 8 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 4 8 , % rsp movq $ 0 , - 4 8 (% rbp ) . LBB 2 : call runtime . makemap_small @ PLT movq % rax , - 5 6 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 1 6 : . LBB 5 : . LBB 6 : . LBB 7 : . LBB 8 : movq - 2 7 2 (% rbp ), % r 1 2 movq - 2 6 4 (% rbp ), % r 1 3 movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq - 5 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 . 6 . 7 uint 6 4 (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 movq - 2 5 6 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq uint 6 4 .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) jmp . L 5 . L 4 : movq - 2 5 6 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rdx movq % rcx , - 2 5 6 (% rbp ) movq % rax , - 2 4 8 (% rbp ) movq % rdx , - 2 4 0 (% rbp ) . L 5 : movq - 2 5 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 6 4 (% rbp ), % rax movq % rax , (% rdx ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 5 6 (% rbp ), % rax movq % r 1 2 , % rdx movq % r 1 3 , % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 . 6 . 7 uint 6 4 (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq - 2 1 6 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 2 0 8 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 6 . LBB 9 : movq - 2 2 4 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 7 . L 6 : . LBE 9 : . LBB 1 0 : movq - 2 2 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 7 : . LBE 1 0 : . LBE 8 : . LBB 1 1 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq - 5 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 . 6 . 7 uint 6 4 (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq 8 (% rax ), % rax cmpq $ 5 , % rax jne . L 2 . LBB 1 2 : . LBB 1 3 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq - 5 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 . 6 . 7 uint 6 4 (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax testq % rax , % rax jg . L 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 9 : movq - 1 9 2 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax jmp . L 1 5 . L 3 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBE 7 : . LBB 1 4 : . LBB 1 5 : movq - 2 7 2 (% rbp ), % r 1 2 movq - 2 6 4 (% rbp ), % r 1 3 movl $ 1 , % edx movl $ 1 , % esi leaq uint 6 4 .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 6 0 (% rbp ) movq $ 1 , - 1 5 2 (% rbp ) movq $ 1 , - 1 4 4 (% rbp ) movq - 5 6 (% rbp ), % rax movq % r 1 2 , % rdx movq % r 1 3 , % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 . 6 . 7 uint 6 4 (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq - 1 5 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 4 4 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 1 . LBB 1 6 : movq - 1 6 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 2 . L 1 1 : . LBE 1 6 : . LBB 1 7 : movq - 1 6 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 2 : . LBE 1 7 : . LBE 1 5 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq - 5 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 . 6 . 7 uint 6 4 (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rax testq % rax , % rax jg . L 1 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 3 : movq - 1 2 8 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , (% rax ) . L 2 : . LBE 1 4 : . LBE 6 : . LBE 5 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : addq $ 1 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax imulq % rax , % rax imulq - 4 0 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , % rdi call main . sortedDigits movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movb $ 0 , - 6 5 (% rbp ) . LBB 1 8 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq - 5 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 . 6 . 7 uint 6 4 (% rip ), % rdi call runtime . mapaccess 2 _faststr @ PLT movl % edx , % eax movb % al , - 6 5 (% rbp ) . LBE 1 8 : . LBB 1 9 : cmpb $ 0 , - 6 5 (% rbp ) je . L 3 jmp . L 1 6 . L 1 5 : . LBE 1 9 : . LBE 2 1 : . LBE 4 : . LBE 3 : . LBE 2 : addq $ 2 4 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 6 1 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 8 8 movl $ 6 1 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 8 4 , % rsp movq $ 0 , - 7 2 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 8 (% rbp ) movq - 8 0 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 6 0 8 (% rbp ) movq % rbx , - 6 0 0 (% rbp ) movq % rbx , - 5 9 2 (% rbp ) . LBB 3 : movq $ 0 , - 9 6 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq - 5 6 8 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 6 : jmp . L 3 . L 8 3 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq % r 1 2 , - 9 6 (% rbp ) . LBB 9 : movq - 8 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 6 0 0 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 4 cmpq % rax , - 9 6 (% rbp ) jl . L 6 3 . L 4 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 3 : movq - 6 0 8 (% rbp ), % rsi movq - 9 6 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 5 4 4 (% rbp ) movq % rbx , - 5 3 6 (% rbp ) movq % rbx , - 5 2 8 (% rbp ) movq - 5 3 6 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 5 2 8 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 6 . LBB 1 0 : movq - 5 4 4 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 7 . L 6 : . LBE 1 0 : . LBB 1 1 : movq - 5 4 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 7 : . LBE 1 1 : . LBE 9 : . LBE 8 : . LBB 1 2 : addq $ 1 , % r 1 2 . L 3 : . LBE 1 2 : cmpq % r 1 3 , % r 1 2 jl . L 8 3 . LBE 5 : . LBE 4 : . LBE 3 : movq - 6 0 0 (% rbp ), % rax testq % rax , % rax jg . L 1 0 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 0 : movq - 6 0 8 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 9 6 (% rbp ) movq - 5 0 4 (% rbp ), % rax testq % rax , % rax jg . L 1 1 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 1 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 1 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 2 : movq 1 6 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 6 4 (% rbp ) movq - 4 7 2 (% rbp ), % rax testq % rax , % rax jg . L 1 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 3 : movq - 4 8 0 (% rbp ), % rdx movq - 5 1 2 (% rbp ), % rax movq (% rdx ), % rdx movq % rdx , (% rax ) . LBB 1 3 : movq $ 1 , - 4 0 (% rbp ) . LBB 1 4 : jmp . L 1 4 . L 8 4 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : movq - 6 0 0 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 5 cmpq % rax , - 4 0 (% rbp ) jl . L 6 5 . L 1 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 5 : movq - 6 0 8 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 3 2 (% rbp ) movq - 4 4 0 (% rbp ), % rax testq % rax , % rax jg . L 1 7 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 8 cmpq % rax , - 4 0 (% rbp ) jl . L 6 6 . L 1 8 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 6 : movq 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 4 0 8 (% rbp ), % rax testq % rax , % rax jg . L 2 0 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 0 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq - 6 0 0 (% rbp ), % rdx testq % rax , % rax js . L 2 1 cmpq % rdx , % rax jl . L 6 7 . L 2 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 7 : movq - 6 0 8 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 7 6 (% rbp ), % rax testq % rax , % rax jg . L 2 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 3 : movq - 4 1 6 (% rbp ), % rax movq (% rax ), % rcx movq - 3 8 4 (% rbp ), % rax movq (% rax ), % rdx movq - 4 4 8 (% rbp ), % rax addq % rcx , % rdx movq % rdx , (% rax ) . LBE 1 6 : . LBB 1 7 : addq $ 1 , - 4 0 (% rbp ) . L 1 4 : . LBE 1 7 : movq - 4 0 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jl . L 8 4 . LBE 1 4 : . LBE 1 3 : . LBB 1 8 : movq $ 1 , - 4 8 (% rbp ) . LBB 1 9 : jmp . L 2 6 . L 8 5 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : movq - 6 0 0 (% rbp ), % rax testq % rax , % rax jg . L 2 7 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 7 : movq - 6 0 8 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 4 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 8 cmpq % rax , - 4 8 (% rbp ) jl . L 6 9 . L 2 8 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 9 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 3 0 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 0 : movq 1 6 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 3 1 cmpq % rax , - 4 8 (% rbp ) jl . L 7 0 . L 3 1 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 0 : movq - 6 0 0 (% rbp ), % rax testq % rax , % rax jg . L 3 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 3 : movq - 6 0 8 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 2 8 0 (% rbp ), % rdx testq % rax , % rax js . L 3 4 cmpq % rdx , % rax jl . L 7 1 . L 3 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 1 : movq - 3 2 0 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 2 8 8 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 3 5 2 (% rbp ), % rsi movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax addq % rcx , % rdx movq % rdx , (% rax ) . LBE 2 1 : . LBB 2 2 : addq $ 1 , - 4 8 (% rbp ) . L 2 6 : . LBE 2 2 : movq - 4 8 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax jl . L 8 5 . LBE 1 9 : . LBE 1 8 : . LBB 2 3 : movq $ 1 , - 5 6 (% rbp ) . LBB 2 4 : jmp . L 3 8 . L 8 7 : . LBB 2 5 : nop . LBE 2 5 : . LBB 2 6 : . LBB 2 7 : movq $ 1 , - 6 4 (% rbp ) . LBB 2 8 : jmp . L 3 9 . L 8 6 : . LBB 2 9 : nop . LBE 2 9 : . LBB 3 0 : movq - 5 6 (% rbp ), % rax subq $ 1 , % rax movq - 6 0 0 (% rbp ), % rdx testq % rax , % rax js . L 4 0 cmpq % rdx , % rax jl . L 7 3 . L 4 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 3 : movq - 6 0 8 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 4 2 cmpq % rax , - 6 4 (% rbp ) jl . L 7 4 . L 4 2 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 4 : movq - 6 0 0 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 4 4 cmpq % rax , - 5 6 (% rbp ) jl . L 7 5 . L 4 4 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 5 : movq - 6 0 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 6 4 (% rbp ), % rax subq $ 1 , % rax movq - 2 1 6 (% rbp ), % rdx testq % rax , % rax js . L 4 6 cmpq % rdx , % rax jge . L 4 6 movq - 2 2 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 2 5 6 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 0 0 6 4 . min movq % rax , % rsi movq - 6 0 0 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) jns . L 4 7 jmp . L 4 8 . L 4 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : cmpq % rax , - 5 6 (% rbp ) jl . L 7 6 . L 4 8 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 6 : movq - 6 0 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 5 0 cmpq % rax , - 6 4 (% rbp ) jl . L 7 7 . L 5 0 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 5 2 cmpq % rax , - 5 6 (% rbp ) jl . L 7 8 . L 5 2 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 8 : movq 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 5 4 cmpq % rax , - 6 4 (% rbp ) jge . L 5 4 movq - 1 6 0 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 1 9 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax addq % rsi , % rdx movq % rdx , (% rax ) . LBE 3 0 : . LBB 3 1 : addq $ 1 , - 6 4 (% rbp ) jmp . L 3 9 . L 5 4 : . LBE 3 1 : . LBB 3 2 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : . LBE 3 2 : movq - 6 4 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax jl . L 8 6 . LBE 2 8 : . LBE 2 7 : . LBE 2 6 : . LBB 3 3 : addq $ 1 , - 5 6 (% rbp ) . L 3 8 : . LBE 3 3 : movq - 5 6 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jl . L 8 7 . LBE 2 4 : . LBE 2 3 : . LBB 3 4 : movq - 8 0 (% rbp ), % rax subq $ 1 , % rax movq - 6 0 0 (% rbp ), % rdx testq % rax , % rax js . L 5 9 cmpq % rdx , % rax jl . L 8 1 . L 5 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 1 : movq - 6 0 8 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 8 8 (% rbp ), % rax subq $ 1 , % rax movq - 1 2 0 (% rbp ), % rdx testq % rax , % rax js . L 6 1 cmpq % rdx , % rax jge . L 6 1 movq - 1 2 8 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax jmp . L 8 2 . L 6 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 2 : . LBE 3 4 : . LBE 2 : addq $ 5 8 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 9 0 movl $ 2 4 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 6 : ret . L 9 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 0 0 , % rsp movq % rdi , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) movq $ 0 , - 2 0 8 (% rbp ) . LBB 4 7 : movq 2 4 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 4 8 : movq $ 0 , - 6 4 (% rbp ) . LBB 4 9 : movq - 5 6 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , % rdi movq 3 2 (% rbp ), % rax testq % rdi , % rdi js . L 6 4 cmpq % rax , % rdi jg . L 6 4 testq % rdi , % rdi jns . L 6 5 jmp . L 8 3 . L 6 4 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 8 3 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 6 5 : movq 1 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq % rdi , - 1 8 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) . LBB 5 0 : . LBB 5 1 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 5 movl $ 0 , % r 1 4 d . LBE 5 1 : jmp . L 6 7 . L 8 9 : . LBB 5 2 : nop . LBE 5 2 : . LBB 5 3 : movq % r 1 4 , - 6 4 (% rbp ) . LBB 5 4 : . LBB 5 5 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 6 4 (% rbp ), % rcx movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 5 6 (% rbp ), % rax subq - 6 4 (% rbp ), % rax leaq - 1 (% rax ), % rbx movq - 5 6 (% rbp ), % rax subq - 6 4 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 6 8 cmpq % rdx , % rax jl . L 8 4 . L 6 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 4 : movq 1 6 (% rbp ), % rdx salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq 2 4 (% rbp ), % rsi cmpq $ 0 , - 6 4 (% rbp ) js . L 7 0 cmpq % rsi , - 6 4 (% rbp ) jl . L 8 5 . L 7 0 : movq - 6 4 (% rbp ), % rax movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 5 : movq 1 6 (% rbp ), % rdi movq - 6 4 (% rbp ), % rsi salq $ 4 , % rsi addq % rdi , % rsi movq (% rsi ), % r 1 2 movq 8 (% rsi ), % r 1 3 movq - 1 2 0 (% rbp ), % rsi testq % rcx , % rcx js . L 7 2 cmpq % rsi , % rcx jl . L 8 6 . L 7 2 : movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 8 6 : movq - 1 2 8 (% rbp ), % rsi salq $ 4 , % rcx addq % rsi , % rcx movq % rdx , % rsi movq % rsi , 8 (% rcx ) leaq runtime . writeBarrier (% rip ), % rsi movl (% rsi ), % esi testl % esi , % esi jne . L 7 4 . LBB 5 6 : movq % rax , (% rcx ) jmp . L 7 5 . L 7 4 : . LBE 5 6 : . LBB 5 7 : movq % rax , % rdx movq % rcx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 7 5 : . LBE 5 7 : movq - 8 8 (% rbp ), % rax testq % rbx , % rbx js . L 7 6 cmpq % rax , % rbx jl . L 8 7 . L 7 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 8 7 : movq - 9 6 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq % r 1 3 , % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 7 8 . LBB 5 8 : movq % r 1 2 , % rdx movq % rdx , (% rax ) jmp . L 7 9 . L 7 8 : . LBE 5 8 : . LBB 5 9 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 7 9 : . LBE 5 9 : . LBE 5 5 : . LBE 5 4 : . LBE 5 3 : . LBB 6 0 : addq $ 1 , % r 1 4 . L 6 7 : . LBE 6 0 : cmpq % r 1 5 , % r 1 4 jl . L 8 9 . LBE 5 0 : . LBE 4 9 : . LBE 4 8 : . LBB 6 1 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 1 : . LBE 4 7 : movq - 2 3 2 (% rbp ), % rax addq $ 2 0 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 6 1 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 5 movl $ 6 1 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 6 8 , % rsp movq % rdi , - 5 6 8 (% rbp ) movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) movq $ 0 , - 4 0 0 (% rbp ) . LBB 2 : call runtime . makemap_small @ PLT movq % rax , - 6 4 (% rbp ) . LBB 3 : movq $ 0 , - 4 6 4 (% rbp ) movq $ 0 , - 4 5 6 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 7 6 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 3 3 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 3 7 6 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 3 8 4 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : leaq . LC 1 8 (% rip ), % r 1 2 movl $ 1 , % r 1 3 d leaq - 4 9 6 (% rbp ), % rax movq % r 1 2 , % r 8 movq % r 1 3 , % r 9 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 8 , % rcx movq - 4 6 4 (% rbp ), % rsi movq - 4 5 6 (% rbp ), % rdx movq % rdi , % r 8 movq % rax , % rdi call strings . Split @ PLT movq - 4 8 8 (% rbp ), % rax cmpq $ 1 , % rax jg . L 4 jmp . L 2 7 . L 3 : . LBE 1 1 : . LBB 2 1 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : . LBE 2 1 : . LBB 2 2 : movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq - 4 9 6 (% rbp ), % rax movq 2 4 (% rax ), % rdx movq 1 6 (% rax ), % rax movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 4 8 8 (% rbp ), % rax testq % rax , % rax jg . L 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 6 : movq - 4 9 6 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rcx movq (% rax ), % rdx movq 8 (% rax ), % rax movq % rdx , % rsi movq % rax , % rdx movq % rcx , % rdi call strconv . Atoi @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 3 4 4 (% rbp ), % rax movq - 3 3 6 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) . LBB 1 2 : movdqu - 5 1 2 (% rbp ), % xmm 0 movaps % xmm 0 , - 6 0 8 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq - 6 4 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq (% rax ), % rdx movq - 8 0 (% rbp ), % rax addq % rdx , % rax movq % rax , - 5 8 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq - 6 0 8 (% rbp ), % rdx movq - 6 0 0 (% rbp ), % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq - 5 8 4 (% rbp ), % rcx movq % rcx , (% rax ) . LBE 1 2 : leaq . LC 1 9 (% rip ), % r 1 4 movl $ 1 , % r 1 5 d movq - 5 1 2 (% rbp ), % rsi movq - 5 0 4 (% rbp ), % rax movq % r 1 4 , % rdx movq % r 1 5 , % rcx movq % rsi , % rdi movq % rax , % rsi call strings . LastIndex @ PLT movq % rax , - 8 8 (% rbp ) . LBB 1 3 : movq $ 0 , - 5 6 (% rbp ) . LBB 1 4 : jmp . L 7 . L 3 2 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 5 0 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 8 cmpq % rax , - 5 6 (% rbp ) jge . L 8 movq - 5 1 2 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 6 , % al je . L 9 jmp . L 1 0 . L 8 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 9 : . LBB 1 8 : movq - 5 6 (% rbp ), % rax addq $ 1 , % rax movq - 5 0 4 (% rbp ), % rdx testq % rax , % rax js . L 1 1 cmpq % rdx , % rax jg . L 1 1 movq - 5 1 2 (% rbp ), % rcx movq - 5 0 4 (% rbp ), % rdx cmpq % rdx , % rax jne . L 1 2 jmp . L 2 8 . L 1 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 1 2 : movq % rax , % rdx jmp . L 1 4 . L 2 8 : movl $ 0 , % edx . L 1 4 : addq % rcx , % rdx movq % rdx , - 5 4 4 (% rbp ) movq - 5 0 4 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 5 3 6 (% rbp ) . LBB 1 9 : movdqu - 5 4 4 (% rbp ), % xmm 1 movaps % xmm 1 , - 6 0 8 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq (% rax ), % rdx movq - 8 0 (% rbp ), % rax addq % rdx , % rax movq % rax , - 5 8 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq - 6 0 8 (% rbp ), % rdx movq - 6 0 0 (% rbp ), % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq - 5 8 4 (% rbp ), % rdi movq % rdi , (% rax ) . L 1 0 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 2 0 : addq $ 1 , - 5 6 (% rbp ) . L 7 : . LBE 2 0 : movq - 5 6 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax jle . L 3 2 . LBE 1 4 : . LBE 1 3 : . LBE 2 2 : . LBE 8 : . LBB 2 3 : addq $ 1 , % rbx . L 2 : . LBE 2 3 : cmpq - 5 7 6 (% rbp ), % rbx jl . L 3 3 . LBE 5 : . LBE 4 : . LBE 3 : movl $ 0 , % edx movl $ 0 , % esi leaq string .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 4 8 (% rbp ) movq $ 0 , - 4 4 0 (% rbp ) movq $ 0 , - 4 3 2 (% rbp ) . LBB 2 4 : movq $ 0 , - 5 6 0 (% rbp ) movq $ 0 , - 5 5 2 (% rbp ) movq $ 0 , - 7 2 (% rbp ) . LBB 2 5 : . LBB 2 6 : . LBB 2 7 : leaq - 3 2 0 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 2 7 : jmp . L 1 9 . L 3 4 : . LBB 2 8 : nop . LBE 2 8 : . LBB 2 9 : . LBB 3 0 : movq - 3 2 0 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq - 3 1 2 (% rbp ), % rcx movq (% rcx ), % rcx . LBE 3 0 : . LBB 3 1 : movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq % rcx , - 7 2 (% rbp ) . LBE 3 1 : . LBB 3 2 : movq - 7 2 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rbx movq % rcx , - 2 2 4 (% rbp ) movq % rbx , - 2 1 6 (% rbp ) movq - 4 3 2 (% rbp ), % rcx movq % rcx , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rbx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) leaq . LC 1 8 (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq 1 (% rbx ), % rax movq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 0 . LBB 3 3 : movq - 2 2 4 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) . LBE 3 3 : jmp . L 2 1 . L 2 0 : . LBB 3 4 : movq - 2 2 4 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rdx movq % rcx , - 4 4 8 (% rbp ) movq % rax , - 4 4 0 (% rbp ) movq % rdx , - 4 3 2 (% rbp ) . L 2 1 : . LBE 3 4 : movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq % r 1 3 , % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 2 . LBB 3 5 : movq % r 1 2 , % rdx movq % rdx , (% rax ) jmp . L 2 3 . L 2 2 : . LBE 3 5 : . LBB 3 6 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 3 : . LBE 3 6 : . LBE 3 2 : . LBE 2 9 : . LBB 3 7 : leaq - 3 2 0 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 1 9 : . LBE 3 7 : movq - 3 2 0 (% rbp ), % rax testq % rax , % rax jne . L 3 4 . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBB 3 8 : movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 5 6 8 (% rbp ), % rcx movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 0 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 8 : . LBE 2 : movq - 5 6 8 (% rbp ), % rax addq $ 5 6 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
leaq - 8 5 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 8 9 movl $ 8 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 9 3 : ret . L 7 8 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 0 8 , % rsp movq % rdi , - 6 3 2 (% rbp ) leaq string .. d (% rip ), % r 1 4 leaq go .. C 5 5 2 (% rip ), % r 1 5 movl $ 8 , % ebx leaq pimt .. interface . 4 Accept . 0 func . 8 go . ast . Visitor . 9 . 8 go . ast . Node . 9 . 2 Pos . 0 func . 8 . 9 . 8 go . ast . Pos . 9 . 2 Type . 0 func . 8 go . ast . Scope . 9 . 8 go . ast . Type . 3 error . 9 . 5 .. go . ast . VariableAccess (% rip ), % rax movq % rax , - 8 4 8 (% rbp ) leaq go . ast . VariableAccess .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 0 (% rbp ) movq $ 0 , - 5 9 2 (% rbp ) movq $ 0 , - 5 8 4 (% rbp ) movq $ 0 , - 5 7 6 (% rbp ) movq $ 0 , - 5 6 8 (% rbp ) movq $ 0 , - 5 6 0 (% rbp ) movq $ 0 , - 5 5 2 (% rbp ) leaq . LC 2 3 7 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d movq % r 1 2 , - 5 9 2 (% rbp ) movq % r 1 3 , - 5 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 7 5 . LBB 7 8 7 : movq - 6 0 0 (% rbp ), % rcx movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 7 8 7 : jmp . L 7 7 6 . L 7 7 5 : . LBB 7 8 8 : movq - 6 0 0 (% rbp ), % rcx leaq - 5 9 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq go . ast . VariableAccess .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 7 6 : . LBE 7 8 8 : movq - 6 0 0 (% rbp ), % rax movq % rax , - 8 4 0 (% rbp ) leaq pimt .. interface . 4 Accept . 0 func . 8 go . ast . Visitor . 9 . 8 go . ast . Node . 9 . 2 Pos . 0 func . 8 . 9 . 8 go . ast . Pos . 9 . 2 Type . 0 func . 8 go . ast . Scope . 9 . 8 go . ast . Type . 3 error . 9 . 5 .. go . ast . LiteralNode (% rip ), % rax movq % rax , - 8 3 2 (% rbp ) leaq go . ast . LiteralNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 3 6 (% rbp ) movq $ 0 , - 5 2 8 (% rbp ) movq $ 0 , - 5 2 0 (% rbp ) movq $ 0 , - 5 1 2 (% rbp ) movq $ 0 , - 5 0 4 (% rbp ) movq $ 0 , - 4 9 6 (% rbp ) movq $ 0 , - 4 8 8 (% rbp ) movq $ 0 , - 4 8 0 (% rbp ) movq % r 1 4 , - 5 2 8 (% rbp ) movq % r 1 5 , - 5 2 0 (% rbp ) movl % ebx , - 5 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 7 7 . LBB 7 8 9 : movq - 5 3 6 (% rbp ), % rcx movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 4 8 0 (% rbp ), % rax movq % rax , 4 8 (% rcx ) . LBE 7 8 9 : jmp . L 7 7 8 . L 7 7 7 : . LBB 7 9 0 : movq - 5 3 6 (% rbp ), % rcx leaq - 5 2 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq go . ast . LiteralNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 7 8 : . LBE 7 9 0 : movq - 5 3 6 (% rbp ), % rax movq % rax , - 8 2 4 (% rbp ) movq $ 0 , - 4 6 4 (% rbp ) movq $ 0 , - 4 5 6 (% rbp ) movq $ 0 , - 4 4 8 (% rbp ) movq $ 0 , - 4 4 0 (% rbp ) movq $ 0 , - 4 3 2 (% rbp ) movq $ 0 , - 4 2 4 (% rbp ) movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) leaq - 4 6 4 (% rbp ), % rax movq % rax , - 3 9 2 (% rbp ) movq - 3 9 2 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq $ 0 , 3 2 (% rax ) movq $ 0 , 4 0 (% rax ) movq $ 0 , 4 8 (% rax ) movq $ 0 , 5 6 (% rax ) movdqa - 8 4 8 (% rbp ), % xmm 0 movups % xmm 0 , (% rax ) movdqa - 8 3 2 (% rbp ), % xmm 1 movups % xmm 1 , 1 6 (% rax ) movq - 3 9 2 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) leaq int .. d (% rip ), % rbx movq % rbx , - 8 1 6 (% rbp ) leaq go .. C 5 5 3 (% rip ), % rax movq % rax , - 8 0 8 (% rbp ) movl $ 1 6 , % eax movq % rbx , - 8 0 0 (% rbp ) leaq go .. C 5 5 4 (% rip ), % rbx movq % rbx , - 7 9 2 (% rbp ) movl $ 1 6 , % edx leaq . LC 2 4 0 (% rip ), % rsi movq % rsi , - 7 3 6 (% rbp ) movq $ 3 , - 7 2 8 (% rbp ) movdqa - 7 3 6 (% rbp ), % xmm 2 movups % xmm 2 , - 3 8 4 (% rbp ) movdqa - 8 1 6 (% rbp ), % xmm 3 movups % xmm 3 , - 3 6 8 (% rbp ) movl % eax , - 3 5 2 (% rbp ) leaq . LC 2 2 5 (% rip ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 3 , - 7 1 2 (% rbp ) movdqa - 7 2 0 (% rbp ), % xmm 4 movups % xmm 4 , - 3 4 4 (% rbp ) movdqa - 8 0 0 (% rbp ), % xmm 5 movups % xmm 5 , - 3 2 8 (% rbp ) movl % edx , - 3 1 2 (% rbp ) leaq type .. map . 6 string . 7 go . ast . Variable (% rip ), % rax movq % rax , - 7 8 4 (% rbp ) leaq - 3 8 4 (% rbp ), % rax movq % rax , % r 8 movl $ 1 6 , % ecx movl $ 4 0 , % edx movl $ 2 , % esi leaq type .. map . 6 string . 7 go . ast . Variable (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 7 7 6 (% rbp ) movl $ 1 2 8 , % eax leaq . LC 2 3 7 (% rip ), % rbx movq % rbx , - 7 0 4 (% rbp ) movq $ 3 , - 6 9 6 (% rbp ) movdqa - 7 0 4 (% rbp ), % xmm 6 movups % xmm 6 , - 3 0 4 (% rbp ) movdqa - 7 8 4 (% rbp ), % xmm 7 movups % xmm 7 , - 2 8 8 (% rbp ) movl % eax , - 2 7 2 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , % r 8 movl $ 1 6 , % ecx movl $ 4 0 , % edx movl $ 1 , % esi leaq type .. map . 6 string . 7 go . ast . Variable (% rip ), % rdi call __go_construct_map @ PLT movq % rax , % rbx leaq go . ast . BasicScope .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) movq % rbx , - 2 4 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 7 9 . LBB 7 9 1 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 7 9 1 : jmp . L 7 8 0 . L 7 7 9 : . LBB 7 9 2 : movq - 2 6 4 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq go . ast . BasicScope .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 8 0 : . LBE 7 9 2 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) leaq pimt .. interface . 4 LookupFunc . 0 func . 8 string . 9 . 8 go . ast . Function . 3 bool . 9 . 2 LookupVar . 0 func . 8 string . 9 . 8 go . ast . Variable . 3 bool . 9 . 5 .. go . ast . BasicScope (% rip ), % rax movq % rax , - 6 8 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 6 8 0 (% rbp ) leaq - 1 6 0 (% rbp ), % rax movq - 5 6 (% rbp ), % rsi movq - 6 8 8 (% rbp ), % rdx movq - 6 8 0 (% rbp ), % rcx movq % rax , % rdi call go . ast . Index . Type movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movl - 2 4 0 (% rbp ), % eax movl % eax , - 6 8 (% rbp ) movq - 2 3 2 (% rbp ), % rax movq - 2 2 4 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) . LBB 7 9 3 : movq - 6 2 4 (% rbp ), % rax testq % rax , % rax je . L 7 8 1 . LBB 7 9 4 : movq - 6 2 4 (% rbp ), % rax testq % rax , % rax jne . L 7 8 2 movl $ 0 , % eax jmp . L 7 8 3 . L 7 8 2 : movq - 6 2 4 (% rbp ), % rax movq (% rax ), % rax . L 7 8 3 : movq % rax , - 7 6 8 (% rbp ) movq - 6 1 6 (% rbp ), % rax movq % rax , - 7 6 0 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movdqa - 7 6 8 (% rbp ), % xmm 0 movups % xmm 0 , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 8 4 . LBB 7 9 5 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 7 9 5 : jmp . L 7 8 5 . L 7 8 4 : . LBB 7 9 6 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 8 5 : . LBE 7 9 6 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) leaq . LC 2 3 8 (% rip ), % rax movq % rax , - 6 7 2 (% rbp ) movq $ 7 , - 6 6 4 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 6 3 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 7 8 1 : . LBE 7 9 4 : . LBE 7 9 3 : . LBB 7 9 7 : cmpl $ 1 6 , - 6 8 (% rbp ) je . L 7 7 4 . LBB 7 9 8 : leaq go . ast . Type .. d (% rip ), % rax movq % rax , - 7 5 2 (% rbp ) leaq go . ast . Type .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 9 2 (% rbp ) movq - 1 9 2 (% rbp ), % rax movl - 6 8 (% rbp ), % edx movl % edx , (% rax ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 7 4 4 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movdqa - 7 5 2 (% rbp ), % xmm 1 movups % xmm 1 , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 8 7 . LBB 7 9 9 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 7 9 9 : jmp . L 7 8 8 . L 7 8 7 : . LBB 8 0 0 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 8 8 : . LBE 8 0 0 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq . LC 2 3 9 (% rip ), % rax movq % rax , - 6 5 6 (% rbp ) movq $ 7 , - 6 4 8 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 6 3 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 7 7 4 : . LBE 7 9 8 : . LBE 7 9 7 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : leaq - 4 5 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 9 4 movl $ 4 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 9 4 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 4 4 0 , % rsp movb $ 0 , - 3 3 (% rbp ) . LBB 3 1 : . LBB 3 2 : movq $ 0 , - 2 4 (% rbp ) . LBB 3 3 : jmp . L 2 6 . L 9 3 : . LBB 3 4 : nop . LBE 3 4 : . LBB 3 5 : call runtime . makemap_small @ PLT movq % rax , - 4 8 (% rbp ) call runtime . makemap_small @ PLT movq % rax , - 5 6 (% rbp ) call runtime . makemap_small @ PLT movq % rax , - 6 4 (% rbp ) . LBB 3 6 : movq $ 0 , - 3 2 (% rbp ) . LBB 3 7 : jmp . L 2 7 . L 9 2 : . LBB 3 8 : nop . LBE 3 8 : . LBB 3 9 : . LBB 4 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 8 cmpq % rax , - 2 4 (% rbp ) jl . L 7 5 . L 2 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 5 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 3 2 (% rbp ) movq - 4 4 0 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 0 cmpq % rax , - 3 2 (% rbp ) jge . L 3 0 movq - 4 4 8 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 6 , % al jne . L 3 1 jmp . L 3 2 . L 3 0 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : . LBB 4 1 : . LBB 4 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 3 cmpq % rax , - 2 4 (% rbp ) jl . L 7 6 . L 3 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 6 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 4 0 8 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 5 cmpq % rax , - 3 2 (% rbp ) jge . L 3 5 movq - 4 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 6 7 (% rbp ) leaq - 6 7 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 uint 8 . 7 bool (% rip ), % rdi call runtime . mapaccess 1 @ PLT movzbl (% rax ), % eax testb % al , % al jne . L 3 6 jmp . L 7 7 . L 3 5 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : . LBB 4 3 : . LBB 4 4 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 3 8 . L 7 7 : . LBE 4 4 : . LBE 4 3 : . LBE 4 2 : . LBB 4 5 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 2 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx testq % rax , % rax js . L 3 9 cmpq % rdx , % rax jl . L 7 8 . L 3 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 8 : movq - 3 8 4 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx testq % rax , % rax js . L 4 1 cmpq % rdx , % rax jl . L 7 9 . L 4 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 9 : movq - 3 5 2 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 3 2 1 (% rbp ) movl $ 1 , % ebx leaq - 3 2 1 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 uint 8 . 7 bool (% rip ), % rdi call runtime . mapassign @ PLT movb % bl , (% rax ) . L 3 2 : . LBE 4 5 : . LBE 4 1 : . LBE 4 0 : . LBB 4 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 4 3 cmpq % rax , - 3 2 (% rbp ) jl . L 8 0 . L 4 3 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 0 : movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 5 cmpq % rax , - 2 4 (% rbp ) jge . L 4 5 movq - 3 2 0 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 6 , % al jne . L 4 6 jmp . L 4 7 . L 4 5 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : . LBB 4 7 : . LBB 4 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 4 8 cmpq % rax , - 3 2 (% rbp ) jl . L 8 1 . L 4 8 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 1 : movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 5 0 cmpq % rax , - 2 4 (% rbp ) jge . L 5 0 movq - 2 8 8 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 6 6 (% rbp ) leaq - 6 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 uint 8 . 7 bool (% rip ), % rdi call runtime . mapaccess 1 @ PLT movzbl (% rax ), % eax testb % al , % al jne . L 5 1 jmp . L 8 2 . L 5 0 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : . LBB 4 9 : . LBB 5 0 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 3 8 . L 8 2 : . LBE 5 0 : . LBE 4 9 : . LBE 4 8 : . LBB 5 1 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx testq % rax , % rax js . L 5 3 cmpq % rdx , % rax jl . L 8 3 . L 5 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 3 : movq - 2 5 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx testq % rax , % rax js . L 5 5 cmpq % rdx , % rax jl . L 8 4 . L 5 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 4 : movq - 2 2 4 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 1 9 3 (% rbp ) movl $ 1 , % ebx leaq - 1 9 3 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 uint 8 . 7 bool (% rip ), % rdi call runtime . mapassign @ PLT movb % bl , (% rax ) . L 4 7 : . LBE 5 1 : . LBE 4 7 : . LBE 4 6 : . LBB 5 2 : movq - 2 4 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rax sarq $ 6 3 , % rax subq % rax , % rdx movq % rdx , % rax addq % rax , % rax leaq (% rax ,% rdx ), % rsi movq - 3 2 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx sarq $ 6 3 , % rcx movq % rdx , % rax subq % rcx , % rax addq % rsi , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 5 7 cmpq % rdx , % rax jl . L 8 5 . L 5 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 5 : movq 1 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 2 4 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rsi sarq $ 6 3 , % rsi movq % rdx , % rax subq % rsi , % rax movq % rax , % rdx addq % rdx , % rdx addq % rax , % rdx movq % rcx , % rax subq % rdx , % rax movq % rax , % rdx addq % rdx , % rdx leaq (% rdx ,% rax ), % rsi movq - 3 2 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rax sarq $ 6 3 , % rax subq % rax , % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax subq % rax , % rcx movq % rcx , % rdx leaq (% rdx ,% rsi ), % rax movq - 1 8 4 (% rbp ), % rdx testq % rax , % rax js . L 5 9 cmpq % rdx , % rax jge . L 5 9 movq - 1 9 2 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 6 , % al jne . L 6 0 jmp . L 6 1 . L 5 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 0 : . LBB 5 3 : . LBB 5 4 : movq - 2 4 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rax sarq $ 6 3 , % rax subq % rax , % rdx movq % rdx , % rax addq % rax , % rax leaq (% rax ,% rdx ), % rsi movq - 3 2 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx sarq $ 6 3 , % rcx movq % rdx , % rax subq % rcx , % rax addq % rsi , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 6 2 cmpq % rdx , % rax jl . L 8 6 . L 6 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 6 : movq 1 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 2 4 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rsi sarq $ 6 3 , % rsi movq % rdx , % rax subq % rsi , % rax movq % rax , % rdx addq % rdx , % rdx addq % rax , % rdx movq % rcx , % rax subq % rdx , % rax movq % rax , % rdx addq % rdx , % rdx leaq (% rdx ,% rax ), % rsi movq - 3 2 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rax sarq $ 6 3 , % rax subq % rax , % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax subq % rax , % rcx movq % rcx , % rdx leaq (% rdx ,% rsi ), % rax movq - 1 5 2 (% rbp ), % rdx testq % rax , % rax js . L 6 4 cmpq % rdx , % rax jge . L 6 4 movq - 1 6 0 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 6 5 (% rbp ) leaq - 6 5 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 uint 8 . 7 bool (% rip ), % rdi call runtime . mapaccess 1 @ PLT movzbl (% rax ), % eax testb % al , % al jne . L 6 5 jmp . L 8 7 . L 6 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 5 : . LBB 5 5 : . LBB 5 6 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 3 8 . L 8 7 : . LBE 5 6 : . LBE 5 5 : . LBE 5 4 : . LBB 5 7 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 2 4 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rax sarq $ 6 3 , % rax subq % rax , % rdx movq % rdx , % rax addq % rax , % rax leaq (% rax ,% rdx ), % rsi movq - 3 2 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx sarq $ 6 3 , % rcx movq % rdx , % rax subq % rcx , % rax addq % rsi , % rax movq - 1 2 0 (% rbp ), % rdx testq % rax , % rax js . L 6 7 cmpq % rdx , % rax jl . L 8 8 . L 6 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 8 : movq - 1 2 8 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 8 0 (% rbp ) movq - 2 4 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rsi sarq $ 6 3 , % rsi movq % rdx , % rax subq % rsi , % rax movq % rax , % rdx addq % rdx , % rdx addq % rax , % rdx movq % rcx , % rax subq % rdx , % rax movq % rax , % rdx addq % rdx , % rdx leaq (% rdx ,% rax ), % rsi movq - 3 2 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rax sarq $ 6 3 , % rax subq % rax , % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax subq % rax , % rcx movq % rcx , % rdx leaq (% rdx ,% rsi ), % rax movq - 8 8 (% rbp ), % rdx testq % rax , % rax js . L 6 9 cmpq % rdx , % rax jl . L 8 9 . L 6 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 9 : movq - 9 6 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 6 8 (% rbp ) movl $ 1 , % ebx leaq - 6 8 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 uint 8 . 7 bool (% rip ), % rdi call runtime . mapassign @ PLT movb % bl , (% rax ) . L 6 1 : . LBE 5 7 : . LBE 5 3 : . LBE 5 2 : . LBE 3 9 : . LBB 5 8 : addq $ 1 , - 3 2 (% rbp ) . L 2 7 : . LBE 5 8 : cmpq $ 8 , - 3 2 (% rbp ) jle . L 9 2 . LBE 3 7 : . LBE 3 6 : . LBE 3 5 : . LBB 5 9 : addq $ 1 , - 2 4 (% rbp ) . L 2 6 : . LBE 5 9 : cmpq $ 8 , - 2 4 (% rbp ) jle . L 9 3 . LBE 3 3 : . LBE 3 2 : . LBB 6 0 : movb $ 1 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax . L 3 8 : . LBE 6 0 : . LBE 3 1 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 4 0 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 8 movl $ 4 0 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 7 6 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 3 8 4 (% rbp ) movq % rdi , - 3 7 6 (% rbp ) movq % rdx , - 4 0 0 (% rbp ) movq % rcx , - 3 9 2 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) . LBB 2 : . LBB 3 : movq - 3 9 2 (% rbp ), % rdx movq - 3 7 6 (% rbp ), % rax cmpq % rax , % rdx jle . L 2 . LBB 4 : . LBB 5 : movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rcx , - 3 8 4 (% rbp ) movq % rbx , - 3 7 6 (% rbp ) movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 3 7 6 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq string .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 2 0 (% rbp ) movq % rbx , - 3 1 2 (% rbp ) movq % rbx , - 3 0 4 (% rbp ) movq - 3 7 6 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 4 0 (% rbp ) movq - 3 9 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 4 8 (% rbp ) movq - 3 7 6 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 6 : . LBB 7 : jmp . L 3 . L 3 6 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq - 3 7 6 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 4 cmpq % rax , - 4 0 (% rbp ) jge . L 4 movq - 3 8 4 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax movq % rax , % rsi movl $ 0 , % edi call runtime . intstring @ PLT leaq - 1 7 6 (% rbp ), % rcx movq % rax , % rsi movq % rdx , % rdi movq % rdx , % rax movq % rax , % rdx movq % rcx , % rdi call strconv . Atoi @ PLT movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq - 2 5 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 3 9 2 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) jns . L 5 jmp . L 6 . L 4 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 : cmpq % rax , - 4 8 (% rbp ) jge . L 6 movq - 4 0 0 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax movq % rax , % rsi movl $ 0 , % edi call runtime . intstring @ PLT leaq - 1 4 4 (% rbp ), % rcx movq % rax , % rsi movq % rdx , % rdi movq % rdx , % rax movq % rax , % rdx movq % rcx , % rdi call strconv . Atoi @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) movq - 2 3 2 (% rbp ), % rax movq - 2 2 4 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 8 0 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax addq % rax , % rdx movq - 6 4 (% rbp ), % rax addq % rdx , % rax cqto shrq $ 6 3 , % rdx addq % rdx , % rax andl $ 1 , % eax subq % rdx , % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 3 1 2 (% rbp ), % rcx cmpq $ 0 , - 5 6 (% rbp ) js . L 8 jmp . L 2 9 . L 6 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : cmpq % rcx , - 5 6 (% rbp ) jl . L 3 0 . L 8 : movq - 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq - 3 2 0 (% rbp ), % rsi movq - 5 6 (% rbp ), % rcx salq $ 4 , % rcx addq % rsi , % rcx movq % rdx , % rsi movq % rsi , 8 (% rcx ) leaq runtime . writeBarrier (% rip ), % rsi movl (% rsi ), % esi testl % esi , % esi jne . L 1 0 . LBB 1 0 : movq % rax , (% rcx ) jmp . L 1 1 . L 1 0 : . LBE 1 0 : . LBB 1 1 : movq % rax , % rdx movq % rcx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 1 : . LBE 1 1 : movq - 8 0 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax addq % rax , % rdx movq - 6 4 (% rbp ), % rax addq % rdx , % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , - 6 4 (% rbp ) subq $ 1 , - 4 0 (% rbp ) subq $ 1 , - 4 8 (% rbp ) subq $ 1 , - 5 6 (% rbp ) . L 3 : . LBE 9 : . LBB 1 2 : movq - 4 0 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax testb % al , % al je . L 1 2 . LBB 1 3 : movq - 4 8 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax . L 1 2 : . LBE 1 3 : . LBE 1 2 : testb % al , % al jne . L 3 6 . LBE 7 : . LBE 6 : . LBB 1 4 : . LBB 1 5 : jmp . L 1 5 . L 3 7 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : movq - 3 7 6 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 6 cmpq % rax , - 4 0 (% rbp ) jge . L 1 6 movq - 3 8 4 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax movq % rax , % rsi movl $ 0 , % edi call runtime . intstring @ PLT leaq - 1 1 2 (% rbp ), % rcx movq % rax , % rsi movq % rdx , % rdi movq % rdx , % rax movq % rax , % rdx movq % rcx , % rdi call strconv . Atoi @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 7 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax addq % rdx , % rax cqto shrq $ 6 3 , % rdx addq % rdx , % rax andl $ 1 , % eax subq % rdx , % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 3 1 2 (% rbp ), % rcx cmpq $ 0 , - 5 6 (% rbp ) js . L 1 8 jmp . L 3 2 . L 1 6 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : cmpq % rcx , - 5 6 (% rbp ) jl . L 3 3 . L 1 8 : movq - 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq - 3 2 0 (% rbp ), % rsi movq - 5 6 (% rbp ), % rcx salq $ 4 , % rcx addq % rsi , % rcx movq % rdx , % rsi movq % rsi , 8 (% rcx ) leaq runtime . writeBarrier (% rip ), % rsi movl (% rsi ), % esi testl % esi , % esi jne . L 2 0 . LBB 1 8 : movq % rax , (% rcx ) jmp . L 2 1 . L 2 0 : . LBE 1 8 : . LBB 1 9 : movq % rax , % rdx movq % rcx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 1 : . LBE 1 9 : movq - 7 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax addq % rdx , % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , - 6 4 (% rbp ) subq $ 1 , - 4 0 (% rbp ) subq $ 1 , - 5 6 (% rbp ) . L 1 5 : . LBE 1 7 : cmpq $ 0 , - 4 0 (% rbp ) jns . L 3 7 . LBE 1 5 : . LBE 1 4 : . LBB 2 0 : cmpq $ 0 , - 6 4 (% rbp ) jle . L 2 4 . LBB 2 1 : movq - 6 4 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 3 1 2 (% rbp ), % rcx cmpq $ 0 , - 5 6 (% rbp ) js . L 2 5 cmpq % rcx , - 5 6 (% rbp ) jl . L 3 5 . L 2 5 : movq - 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 3 2 0 (% rbp ), % rsi movq - 5 6 (% rbp ), % rcx salq $ 4 , % rcx addq % rsi , % rcx movq % rdx , % rsi movq % rsi , 8 (% rcx ) leaq runtime . writeBarrier (% rip ), % rsi movl (% rsi ), % esi testl % esi , % esi jne . L 2 7 . LBB 2 2 : movq % rax , (% rcx ) jmp . L 2 4 . L 2 7 : . LBE 2 2 : . LBB 2 3 : movq % rax , % rdx movq % rcx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 4 : . LBE 2 3 : . LBE 2 1 : . LBE 2 0 : . LBB 2 4 : leaq . LC 1 5 (% rip ), % r 1 2 movl $ 0 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax subq $ 8 , % rsp pushq - 3 0 4 (% rbp ) pushq - 3 1 2 (% rbp ) pushq - 3 2 0 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call strings . Join @ PLT addq $ 3 2 , % rsp movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx . LBE 2 4 : . LBE 2 : leaq - 2 4 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 2 : leaq - 1 0 0 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 7 movl $ 1 0 0 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 5 2 , % rsp movq % rdi , - 9 3 6 (% rbp ) leaq type ... 6 4 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 4 0 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 3 2 (% rbp ) movq - 8 3 2 (% rbp ), % rax movq $ 1 , (% rax ) movq - 8 3 2 (% rbp ), % rax movq % rax , - 8 0 0 (% rbp ) movq $ 1 , - 7 9 2 (% rbp ) movq $ 1 , - 7 8 4 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 2 4 (% rbp ) movq - 8 2 4 (% rbp ), % rax movq $ 2 , (% rax ) movq - 8 2 4 (% rbp ), % rax movq % rax , - 7 7 6 (% rbp ) movq $ 1 , - 7 6 8 (% rbp ) movq $ 1 , - 7 6 0 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 1 6 (% rbp ) movq - 8 1 6 (% rbp ), % rax movq $ 3 , (% rax ) movq - 8 1 6 (% rbp ), % rax movq % rax , - 7 5 2 (% rbp ) movq $ 1 , - 7 4 4 (% rbp ) movq $ 1 , - 7 3 6 (% rbp ) leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 0 8 (% rbp ) movq - 8 0 8 (% rbp ), % rax movq % rax , - 7 2 8 (% rbp ) movq $ 0 , - 7 2 0 (% rbp ) movq $ 0 , - 7 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 3 . LBB 2 1 : movq - 8 4 0 (% rbp ), % rax movq - 8 0 0 (% rbp ), % rcx movq - 7 9 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 7 8 4 (% rbp ), % rcx movq - 7 7 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 7 6 8 (% rbp ), % rcx movq - 7 6 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 7 5 2 (% rbp ), % rcx movq - 7 4 4 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 7 3 6 (% rbp ), % rcx movq - 7 2 8 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 7 2 0 (% rbp ), % rcx movq - 7 1 2 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) . LBE 2 1 : jmp . L 2 4 . L 2 3 : . LBB 2 2 : movq - 8 4 0 (% rbp ), % rax leaq - 8 0 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 4 : . LBE 2 2 : movq - 8 4 0 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 4 , - 5 5 2 (% rbp ) movq $ 4 , - 5 4 4 (% rbp ) movb $ 1 , - 5 3 6 (% rbp ) leaq type ... 6 4 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 9 6 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 8 8 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 3 , 8 (% rax ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 6 5 6 (% rbp ) movq $ 2 , - 6 4 8 (% rbp ) movq $ 2 , - 6 4 0 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 8 0 (% rbp ) movq - 6 8 0 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq - 6 8 0 (% rbp ), % rax movq % rax , - 6 3 2 (% rbp ) movq $ 3 , - 6 2 4 (% rbp ) movq $ 3 , - 6 1 6 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 7 2 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq $ 2 , (% rax ) movq - 6 7 2 (% rbp ), % rax movq % rax , - 6 0 8 (% rbp ) movq $ 1 , - 6 0 0 (% rbp ) movq $ 1 , - 5 9 2 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 6 4 (% rbp ) movq - 6 6 4 (% rbp ), % rax movq $ 0 , (% rax ) movq - 6 6 4 (% rbp ), % rax movq % rax , - 5 8 4 (% rbp ) movq $ 1 , - 5 7 6 (% rbp ) movq $ 1 , - 5 6 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 5 . LBB 2 3 : movq - 6 9 6 (% rbp ), % rax movq - 6 5 6 (% rbp ), % rcx movq - 6 4 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 6 4 0 (% rbp ), % rcx movq - 6 3 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 6 2 4 (% rbp ), % rcx movq - 6 1 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 6 0 8 (% rbp ), % rcx movq - 6 0 0 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 5 9 2 (% rbp ), % rcx movq - 5 8 4 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 5 7 6 (% rbp ), % rcx movq - 5 6 8 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) . LBE 2 3 : jmp . L 2 6 . L 2 5 : . LBB 2 4 : movq - 6 9 6 (% rbp ), % rax leaq - 6 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 6 : . LBE 2 4 : movq - 6 9 6 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 4 , - 5 2 0 (% rbp ) movq $ 4 , - 5 1 2 (% rbp ) movb $ 0 , - 5 0 4 (% rbp ) leaq - 5 6 0 (% rbp ), % rax movq % rax , - 8 6 4 (% rbp ) movq $ 2 , - 8 5 6 (% rbp ) movq $ 2 , - 8 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 3 8 (% rip ), % rax movq % rax , - 9 6 0 (% rbp ) movq $ 6 9 , - 9 5 2 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 9 6 0 (% rbp ), % rcx movq - 9 5 2 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) . LBB 2 5 : movq $ 0 , - 9 2 8 (% rbp ) movq $ 0 , - 9 2 0 (% rbp ) movq $ 0 , - 9 1 2 (% rbp ) movq $ 0 , - 9 0 4 (% rbp ) . LBB 2 6 : . LBB 2 7 : . LBB 2 8 : movq - 8 6 4 (% rbp ), % rax movq - 8 5 6 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 8 4 8 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 9 6 0 (% rbp ) movl $ 0 , % ebx . LBE 2 8 : jmp . L 2 7 . L 3 6 : . LBB 2 9 : nop . LBE 2 9 : . LBB 3 0 : . LBB 3 1 : movq - 4 2 4 (% rbp ), % rax testq % rbx , % rbx js . L 2 8 cmpq % rax , % rbx jge . L 2 8 movq - 4 3 2 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) . LBE 3 1 : . LBB 3 2 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 9 2 8 (% rbp ) movq % rdx , - 9 2 0 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 9 1 2 (% rbp ) movq % rdx , - 9 0 4 (% rbp ) . LBE 3 2 : . LBB 3 3 : movzbl - 9 0 4 (% rbp ), % eax movb % al , - 8 6 5 (% rbp ) movq - 9 2 8 (% rbp ), % rax movq - 9 2 0 (% rbp ), % rdx movq % rax , - 8 9 6 (% rbp ) movq % rdx , - 8 8 8 (% rbp ) movq - 9 1 2 (% rbp ), % rax movq % rax , - 8 8 0 (% rbp ) subq $ 8 , % rsp pushq - 8 8 0 (% rbp ) pushq - 8 8 8 (% rbp ) pushq - 8 9 6 (% rbp ) call go . leetcode . canVisitAllRooms addq $ 3 2 , % rsp movb % al , - 9 3 7 (% rbp ) leaq go . leetcode .. go . leetcode . para 8 4 1 .. d (% rip ), % rax movq % rax , - 9 9 2 (% rbp ) leaq go . leetcode .. go . leetcode . para 8 4 1 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 8 9 6 (% rbp ), % rax movq - 8 8 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 8 8 0 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 2 9 jmp . L 3 4 . L 2 8 : . LBE 3 3 : . LBB 3 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : . LBE 3 6 : . LBB 3 7 : . LBB 3 4 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 4 : jmp . L 3 1 . L 3 4 : . LBB 3 5 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 8 4 1 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 1 : . LBE 3 5 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 9 8 4 (% rbp ) leaq bool .. d (% rip ), % rax movq % rax , - 9 7 6 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movzbl - 9 3 7 (% rbp ), % esi movb % sil , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 9 6 8 (% rbp ) movdqa - 9 9 2 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 9 7 6 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 3 9 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) . LBE 3 7 : . LBE 3 0 : . LBB 3 8 : addq $ 1 , % rbx . L 2 7 : . LBE 3 8 : cmpq - 9 6 0 (% rbp ), % rbx jl . L 3 6 . LBE 2 7 : . LBE 2 6 : . LBE 2 5 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 4 0 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 4 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movb $ 0 , - 9 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 2 , - 4 0 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movb $ 1 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : movq - 4 0 (% rbp ), % rax andl $ 1 , % eax testq % rax , % rax jne . L 4 . LBB 7 : . LBB 8 : movb $ 0 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax jmp . L 3 . L 4 : . LBE 8 : . LBE 7 : . LBE 6 : movq $ 3 , - 8 (% rbp ) pxor % xmm 1 , % xmm 1 cvtsi 2 sdq - 4 0 (% rbp ), % xmm 1 movq % xmm 1 , % rax movq % rax , % xmm 0 call math . Sqrt @ PLT cvttsd 2 siq % xmm 0 , % rax movq % rax , - 2 4 (% rbp ) . LBB 9 : . LBB 1 0 : jmp . L 5 . L 1 3 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : . LBB 1 3 : cmpq $- 1 , - 8 (% rbp ) je . L 6 cmpq $ 0 , - 8 (% rbp ) jne . L 7 call runtime . panicdivide @ PLT . L 7 : movq - 4 0 (% rbp ), % rax cqto idivq - 8 (% rbp ) movq % rdx , % rax testq % rax , % rax sete % al jmp . L 8 . L 6 : movl $ 1 , % eax . L 8 : testb % al , % al je . L 9 . LBB 1 4 : . LBB 1 5 : movb $ 0 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax jmp . L 3 . L 9 : . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBE 1 2 : . LBB 1 6 : addq $ 2 , - 8 (% rbp ) . L 5 : . LBE 1 6 : movq - 8 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax jle . L 1 3 . LBE 1 0 : . LBE 9 : . LBB 1 7 : movb $ 1 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax . L 3 : . LBE 1 7 : . LBE 2 : leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 6 6 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 : ret . L 6 6 : pushq % rbp movq % rsp , % rbp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) movb $ 0 , - 1 (% rbp ) . LBB 5 4 : . LBB 5 5 : . LBB 5 6 : jmp . L 5 6 . L 6 5 : . LBB 5 7 : nop . LBE 5 7 : . LBB 5 8 : . LBB 5 9 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rdx movq - 3 2 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx je . L 5 7 . LBB 6 0 : . LBB 6 1 : movb $ 0 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 5 8 . L 5 7 : . LBE 6 1 : . LBE 6 0 : . LBE 5 9 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 2 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 3 2 (% rbp ) . L 5 6 : . LBE 5 8 : . LBB 6 2 : cmpq $ 0 , - 2 4 (% rbp ) setne % al testb % al , % al je . L 5 9 . LBB 6 3 : cmpq $ 0 , - 3 2 (% rbp ) setne % al . L 5 9 : . LBE 6 3 : . LBE 6 2 : testb % al , % al jne . L 6 5 . LBE 5 6 : . LBE 5 5 : . LBB 6 4 : . LBB 6 5 : cmpq $ 0 , - 2 4 (% rbp ) setne % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 6 2 . LBB 6 6 : cmpq $ 0 , - 3 2 (% rbp ) setne % al . L 6 2 : . LBE 6 6 : . LBE 6 5 : testb % al , % al je . L 6 3 . LBB 6 7 : . LBB 6 8 : movb $ 0 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 5 8 . L 6 3 : . LBE 6 8 : . LBE 6 7 : . LBE 6 4 : . LBB 6 9 : movb $ 1 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax . L 5 8 : . LBE 6 9 : . LBE 5 4 : popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 4 1 movl $ 1 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 4 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 7 2 , % rsp call go . trie . NewNode movq % rax , - 5 6 (% rbp ) leaq . LC 4 5 (% rip ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 6 , - 1 0 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . trie . Node . Insert leaq . LC 4 6 (% rip ), % rax movq % rax , - 9 6 (% rbp ) movq $ 5 , - 8 8 (% rbp ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . trie . Node . Insert leaq . LC 4 7 (% rip ), % rax movq % rax , - 8 0 (% rbp ) movq $ 6 , - 7 2 (% rbp ) movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . trie . Node . Find leaq . LC 4 8 (% rip ), % r 1 4 movl $ 6 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . trie . Node . Find leaq . LC 4 5 (% rip ), % r 1 2 movl $ 6 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq - 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . trie . Node . Find addq $ 7 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 2 7 7 movl $ 1 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 4 : ret . L 2 7 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 subq $ 8 0 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 9 6 (% rbp ) movq % rdi , - 8 8 (% rbp ) movq % rdx , - 1 1 2 (% rbp ) movq % rcx , - 1 0 4 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 2 0 5 : movq - 1 1 2 (% rbp ), % rdx movq - 1 0 4 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . bytealg . HashStr movl % eax , % edx movl % edx , - 6 8 (% rbp ) shrq $ 3 2 , % rax movl % eax , - 7 2 (% rbp ) movq - 1 0 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movl $ 0 , - 3 6 (% rbp ) . LBB 2 0 6 : movq $ 0 , - 4 8 (% rbp ) . LBB 2 0 7 : jmp . L 2 3 4 . L 2 7 5 : . LBB 2 0 8 : nop . LBE 2 0 8 : . LBB 2 0 9 : movq - 8 8 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 3 5 cmpq % rax , - 4 8 (% rbp ) jl . L 2 7 0 . L 2 3 5 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 0 : movl - 3 6 (% rbp ), % eax imull $ 1 6 7 7 7 6 1 9 , % eax , % edx movq - 9 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rax addq % rcx , % rax movzbl (% rax ), % eax movzbl % al , % eax addl % edx , % eax movl % eax , - 3 6 (% rbp ) . LBE 2 0 9 : . LBB 2 1 0 : addq $ 1 , - 4 8 (% rbp ) . L 2 3 4 : . LBE 2 1 0 : movq - 4 8 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jl . L 2 7 5 . LBE 2 0 7 : . LBE 2 0 6 : . LBB 2 1 1 : . LBB 2 1 2 : movl - 3 6 (% rbp ), % eax cmpl - 6 8 (% rbp ), % eax sete % al testb % al , % al je . L 2 3 9 . LBB 2 1 3 : movl $ 0 , % eax movq - 8 8 (% rbp ), % rdx cmpq $ 0 , - 8 0 (% rbp ) js . L 2 4 0 cmpq % rdx , - 8 0 (% rbp ) jg . L 2 4 0 testq % rax , % rax jns . L 2 4 1 jmp . L 2 4 2 . L 2 4 0 : movq - 8 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAlen @ PLT . L 2 4 1 : cmpq - 8 0 (% rbp ), % rax jg . L 2 4 2 movq - 9 6 (% rbp ), % rdx cmpq % rax , - 8 0 (% rbp ) jne . L 2 4 3 jmp . L 2 7 2 . L 2 4 2 : movq - 8 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 2 4 3 : movq % rax , % rcx jmp . L 2 4 5 . L 2 7 2 : movl $ 0 , % ecx . L 2 4 5 : addq % rcx , % rdx movq % rdx , % r 1 4 movq - 8 0 (% rbp ), % rdx subq % rax , % rdx movq % rdx , % r 1 5 movq % r 1 5 , % rdx movq - 1 0 4 (% rbp ), % rax cmpq % rax , % rdx jne . L 2 4 6 movq % r 1 4 , % rdx movq - 1 1 2 (% rbp ), % rax cmpq % rax , % rdx jne . L 2 4 7 movl $ 1 , % eax jmp . L 2 3 9 . L 2 4 7 : movq - 1 0 4 (% rbp ), % rax movq % rax , % rdx movq - 1 1 2 (% rbp ), % rax movq % r 1 4 , % rcx movq % rax , % rsi movq % rcx , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 2 3 9 . L 2 4 6 : movl $ 0 , % eax . L 2 3 9 : . LBE 2 1 3 : . LBE 2 1 2 : testb % al , % al je . L 2 5 0 . LBB 2 1 4 : . LBB 2 1 5 : movq $ 0 , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax jmp . L 2 5 1 . L 2 5 0 : . LBE 2 1 5 : . LBE 2 1 4 : . LBE 2 1 1 : . LBB 2 1 6 : movq - 8 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 2 1 7 : jmp . L 2 5 2 . L 2 7 6 : . LBB 2 1 8 : nop . LBE 2 1 8 : . LBB 2 1 9 : movl - 3 6 (% rbp ), % eax imull $ 1 6 7 7 7 6 1 9 , % eax , % eax movl % eax , - 3 6 (% rbp ) movq - 8 8 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 2 5 3 cmpq % rax , - 5 6 (% rbp ) jge . L 2 5 3 movq - 9 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax addl % eax , - 3 6 (% rbp ) movq - 5 6 (% rbp ), % rax subq - 8 0 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx testq % rax , % rax jns . L 2 5 4 jmp . L 2 5 5 . L 2 5 3 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 4 : cmpq % rdx , % rax jge . L 2 5 5 movq - 9 6 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax imull - 7 2 (% rbp ), % eax subl % eax , - 3 6 (% rbp ) addq $ 1 , - 5 6 (% rbp ) . LBB 2 2 0 : . LBB 2 2 1 : movl - 3 6 (% rbp ), % eax cmpl - 6 8 (% rbp ), % eax sete % al testb % al , % al jne . L 2 5 6 jmp . L 2 5 7 . L 2 5 5 : . LBE 2 2 1 : . LBE 2 2 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 5 6 : . LBB 2 2 6 : . LBB 2 2 3 : . LBB 2 2 2 : movq - 5 6 (% rbp ), % rax subq - 8 0 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 2 5 8 cmpq % rdx , - 5 6 (% rbp ) jg . L 2 5 8 testq % rax , % rax jns . L 2 5 9 jmp . L 2 6 0 . L 2 5 8 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAlen @ PLT . L 2 5 9 : cmpq - 5 6 (% rbp ), % rax jg . L 2 6 0 movq - 9 6 (% rbp ), % rdx cmpq % rax , - 5 6 (% rbp ) jne . L 2 6 1 jmp . L 2 7 3 . L 2 6 0 : movq - 5 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 2 6 1 : movq % rax , % rcx jmp . L 2 6 3 . L 2 7 3 : movl $ 0 , % ecx . L 2 6 3 : addq % rcx , % rdx movq % rdx , % r 1 2 movq - 5 6 (% rbp ), % rdx subq % rax , % rdx movq % rdx , % r 1 3 movq % r 1 3 , % rdx movq - 1 0 4 (% rbp ), % rax cmpq % rax , % rdx jne . L 2 6 4 movq % r 1 2 , % rdx movq - 1 1 2 (% rbp ), % rax cmpq % rax , % rdx jne . L 2 6 5 movl $ 1 , % eax jmp . L 2 5 7 . L 2 6 5 : movq - 1 0 4 (% rbp ), % rax movq % rax , % rdx movq - 1 1 2 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rsi movq % rcx , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 2 5 7 . L 2 6 4 : movl $ 0 , % eax . L 2 5 7 : . LBE 2 2 2 : . LBE 2 2 3 : testb % al , % al je . L 2 5 2 . LBB 2 2 4 : . LBB 2 2 5 : movq - 5 6 (% rbp ), % rax subq - 8 0 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax jmp . L 2 5 1 . L 2 5 2 : . LBE 2 2 5 : . LBE 2 2 4 : . LBE 2 2 6 : . LBE 2 1 9 : movq - 8 8 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jl . L 2 7 6 . LBE 2 1 7 : . LBE 2 1 6 : . LBB 2 2 7 : movq $- 1 , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax . L 2 5 1 : . LBE 2 2 7 : . LBE 2 0 5 : addq $ 8 0 , % rsp popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 2 movl $ 4 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 2 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq $ 0 , - 2 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . LBB 3 : cmpq $ 2 , - 3 2 (% rbp ) jg . L 2 . LBB 4 : . LBB 5 : movq - 3 2 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq $ 2 , - 8 (% rbp ) . LBB 6 : movq $ 2 , - 1 6 (% rbp ) . LBB 7 : jmp . L 4 . L 2 1 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 5 cmpq % rax , - 1 6 (% rbp ) jl . L 1 6 . L 5 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : movq - 8 (% rbp ), % rax subq $ 2 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 7 cmpq % rdx , % rax jl . L 1 7 . L 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : movq 1 6 (% rbp ), % rcx movq - 1 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx je . L 9 . LBB 1 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 1 0 cmpq % rax , - 8 (% rbp ) jl . L 1 8 . L 1 0 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 2 cmpq % rax , - 1 6 (% rbp ) jl . L 1 9 . L 1 2 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) addq $ 1 , - 8 (% rbp ) . L 9 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 1 2 : addq $ 1 , - 1 6 (% rbp ) . L 4 : . LBE 1 2 : movq - 1 6 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jl . L 2 1 . LBE 7 : . LBE 6 : . LBB 1 3 : movq - 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 3 : . LBE 1 3 : . LBE 2 : leave ret
. LFB 2 1 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 5 9 6 movl $ 8 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 2 6 8 : ret . L 5 5 9 6 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 7 2 , % rsp movq $ 0 , - 4 8 (% rbp ) . LBB 4 5 8 6 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 8 0 (% rbp ) movq % rbx , - 7 2 (% rbp ) movq % rbx , - 6 4 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 4 5 8 7 : movq $ 0 , - 3 2 (% rbp ) . LBB 4 5 8 8 : jmp . L 5 5 6 3 . L 5 5 9 5 : . LBB 4 5 8 9 : nop . LBE 4 5 8 9 : . LBB 4 5 9 0 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 5 5 6 4 cmpq % rax , - 3 2 (% rbp ) jl . L 5 5 8 5 . L 5 5 6 4 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 5 8 5 : movq - 8 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 1 , (% rax ) . LBB 4 5 9 1 : movq $ 0 , - 4 0 (% rbp ) . LBB 4 5 9 2 : jmp . L 5 5 6 6 . L 5 5 9 4 : . LBB 4 5 9 3 : nop . LBE 4 5 9 3 : . LBB 4 5 9 4 : . LBB 4 5 9 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 5 5 6 7 cmpq % rax , - 3 2 (% rbp ) jl . L 5 5 8 6 . L 5 5 6 7 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 5 8 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 5 5 6 9 cmpq % rax , - 4 0 (% rbp ) jl . L 5 5 8 7 . L 5 5 6 9 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 5 8 7 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jle . L 5 5 7 1 . LBB 4 5 9 6 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 5 5 7 2 cmpq % rax , - 3 2 (% rbp ) jl . L 5 5 8 8 . L 5 5 7 2 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 5 8 8 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 5 5 7 4 cmpq % rax , - 4 0 (% rbp ) jl . L 5 5 8 9 . L 5 5 7 4 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 5 8 9 : movq - 8 0 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq $ 1 , % rax pxor % xmm 0 , % xmm 0 cvtsi 2 sdq % rax , % xmm 0 movq - 8 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax pxor % xmm 2 , % xmm 2 cvtsi 2 sdq % rax , % xmm 2 movq % xmm 2 , % rax movapd % xmm 0 , % xmm 1 movq % rax , % xmm 0 call math . Max @ PLT movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 5 5 7 6 cmpq % rax , - 3 2 (% rbp ) jl . L 5 5 9 0 . L 5 5 7 6 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 5 9 0 : movq - 8 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx cvttsd 2 siq % xmm 0 , % rax movq % rax , (% rdx ) . L 5 5 7 1 : . LBE 4 5 9 6 : . LBE 4 5 9 5 : . LBE 4 5 9 4 : . LBB 4 5 9 7 : addq $ 1 , - 4 0 (% rbp ) . L 5 5 6 6 : . LBE 4 5 9 7 : movq - 4 0 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jl . L 5 5 9 4 . LBE 4 5 9 2 : . LBE 4 5 9 1 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 5 5 8 0 cmpq % rax , - 3 2 (% rbp ) jl . L 5 5 9 2 . L 5 5 8 0 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 5 9 2 : movq - 8 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax pxor % xmm 0 , % xmm 0 cvtsi 2 sdq % rax , % xmm 0 pxor % xmm 3 , % xmm 3 cvtsi 2 sdq - 2 4 (% rbp ), % xmm 3 movq % xmm 3 , % rax movapd % xmm 0 , % xmm 1 movq % rax , % xmm 0 call math . Max @ PLT cvttsd 2 siq % xmm 0 , % rax movq % rax , - 2 4 (% rbp ) . LBE 4 5 9 0 : . LBB 4 5 9 8 : addq $ 1 , - 3 2 (% rbp ) . L 5 5 6 3 : . LBE 4 5 9 8 : movq 2 4 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) jl . L 5 5 9 5 . LBE 4 5 8 8 : . LBE 4 5 8 7 : . LBB 4 5 9 9 : movq - 2 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax . LBE 4 5 9 9 : . LBE 4 5 8 6 : movq - 8 (% rbp ), % rbx leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 2 9 5 movl $ 2 4 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 8 : ret . L 2 9 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 0 0 , % rsp movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) . LBB 1 8 5 : movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 1 8 6 : movq $ 0 , - 7 2 (% rbp ) . LBB 1 8 7 : jmp . L 2 2 5 . L 2 9 2 : . LBB 1 8 8 : nop . LBE 1 8 8 : . LBB 1 8 9 : . LBB 1 9 0 : movq $ 0 , - 8 0 (% rbp ) . LBB 1 9 1 : jmp . L 2 2 6 . L 2 9 1 : . LBB 1 9 2 : nop . LBE 1 9 2 : . LBB 1 9 3 : . LBB 1 9 4 : movq - 7 2 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jne . L 2 2 7 . LBB 1 9 5 : . LBB 1 9 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 2 2 8 cmpq % rax , - 7 2 (% rbp ) jl . L 2 7 9 . L 2 2 8 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 9 : movq 1 6 (% rbp ), % r 1 4 movq - 7 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % r 1 4 movq (% r 1 4 ), % rax movq 8 (% r 1 4 ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% r 1 4 ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 2 3 0 cmpq % rax , - 8 0 (% rbp ) jge . L 2 3 0 movq - 2 2 4 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % r 1 4 cmpq $ 1 , % r 1 4 je . L 2 3 1 jmp . L 2 8 0 . L 2 3 0 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 3 1 : movq % rax , % r 1 5 leaq . LC 3 3 (% rip ), % r 1 4 cmpq % r 1 4 , % r 1 5 jne . L 2 3 3 movl $ 1 , % eax jmp . L 2 3 5 . L 2 3 3 : movzbl (% rax ), % eax movzbl % al , % eax leaq . LC 3 3 (% rip ), % rdx movzbl (% rdx ), % edx movzbl % dl , % edx subl % edx , % eax testl % eax , % eax sete % al jmp . L 2 3 5 . L 2 8 0 : movl $ 0 , % eax . L 2 3 5 : testb % al , % al je . L 2 3 6 . LBB 1 9 7 : addq $ 1 , - 5 6 (% rbp ) . LBE 1 9 7 : jmp . L 2 2 7 . L 2 3 6 : . LBB 1 9 8 : . LBB 1 9 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 2 3 7 cmpq % rax , - 7 2 (% rbp ) jl . L 2 8 1 . L 2 3 7 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 1 : movq 1 6 (% rbp ), % r 1 4 movq - 7 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % r 1 4 movq (% r 1 4 ), % rax movq 8 (% r 1 4 ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% r 1 4 ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 2 3 9 cmpq % rax , - 8 0 (% rbp ) jge . L 2 3 9 movq - 1 9 2 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % r 1 4 cmpq $ 1 , % r 1 4 je . L 2 4 0 jmp . L 2 8 2 . L 2 3 9 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 0 : movq % rax , % r 1 5 leaq . LC 3 4 (% rip ), % r 1 4 cmpq % r 1 4 , % r 1 5 jne . L 2 4 2 movl $ 1 , % eax jmp . L 2 4 4 . L 2 4 2 : movzbl (% rax ), % eax movzbl % al , % eax leaq . LC 3 4 (% rip ), % rdx movzbl (% rdx ), % edx movzbl % dl , % edx subl % edx , % eax testl % eax , % eax sete % al jmp . L 2 4 4 . L 2 8 2 : movl $ 0 , % eax . L 2 4 4 : testb % al , % al je . L 2 2 7 . LBB 2 0 0 : addq $ 1 , - 6 4 (% rbp ) . L 2 2 7 : . LBE 2 0 0 : . LBE 1 9 9 : . LBE 1 9 8 : . LBE 1 9 6 : . LBE 1 9 5 : . LBE 1 9 4 : . LBE 1 9 3 : . LBB 2 0 1 : addq $ 1 , - 8 0 (% rbp ) . L 2 2 6 : . LBE 2 0 1 : cmpq $ 2 , - 8 0 (% rbp ) jle . L 2 9 1 . LBE 1 9 1 : . LBE 1 9 0 : . LBB 2 0 2 : cmpq $ 3 , - 5 6 (% rbp ) jne . L 2 4 7 . LBB 2 0 3 : . LBB 2 0 4 : leaq . LC 3 3 (% rip ), % r 1 2 movl $ 1 , % r 1 3 d movq % r 1 2 , - 2 4 0 (% rbp ) movq % r 1 3 , - 2 3 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx jmp . L 2 7 8 . L 2 4 7 : . LBE 2 0 4 : . LBE 2 0 3 : . LBB 2 0 5 : . LBB 2 0 6 : cmpq $ 3 , - 6 4 (% rbp ) jne . L 2 4 9 . LBB 2 0 7 : . LBB 2 0 8 : leaq . LC 3 4 (% rip ), % r 1 0 movl $ 1 , % r 1 1 d movq % r 1 0 , - 2 4 0 (% rbp ) movq % r 1 1 , - 2 3 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx jmp . L 2 7 8 . L 2 4 9 : . LBE 2 0 8 : . LBE 2 0 7 : . LBE 2 0 6 : . LBE 2 0 5 : . LBE 2 0 2 : . LBE 1 8 9 : . LBB 2 0 9 : addq $ 1 , - 7 2 (% rbp ) . L 2 2 5 : . LBE 2 0 9 : cmpq $ 2 , - 7 2 (% rbp ) jle . L 2 9 2 . LBE 1 8 7 : . LBE 1 8 6 : . LBB 2 1 0 : movl $ 0 , % edx movl $ 0 , % eax movq % rdx , - 5 6 (% rbp ) movq % rax , - 6 4 (% rbp ) . LBE 2 1 0 : . LBB 2 1 1 : movq $ 0 , - 8 8 (% rbp ) . LBB 2 1 2 : jmp . L 2 5 2 . L 2 9 4 : . LBB 2 1 3 : nop . LBE 2 1 3 : . LBB 2 1 4 : . LBB 2 1 5 : movq $ 0 , - 9 6 (% rbp ) . LBB 2 1 6 : jmp . L 2 5 3 . L 2 9 3 : . LBB 2 1 7 : nop . LBE 2 1 7 : . LBB 2 1 8 : . LBB 2 1 9 : movq - 8 8 (% rbp ), % rdx movq - 9 6 (% rbp ), % rax addq % rdx , % rax cmpq $ 2 , % rax jne . L 2 5 4 . LBB 2 2 0 : . LBB 2 2 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 2 5 5 cmpq % rax , - 8 8 (% rbp ) jl . L 2 8 5 . L 2 5 5 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 5 : movq 1 6 (% rbp ), % r 1 0 movq - 8 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % r 1 0 movq (% r 1 0 ), % rax movq 8 (% r 1 0 ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% r 1 0 ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 2 5 7 cmpq % rax , - 9 6 (% rbp ) jge . L 2 5 7 movq - 1 6 0 (% rbp ), % rdx movq - 9 6 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % r 1 0 cmpq $ 1 , % r 1 0 je . L 2 5 8 jmp . L 2 8 6 . L 2 5 7 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 8 : movq % rax , % r 1 1 leaq . LC 3 3 (% rip ), % r 1 0 cmpq % r 1 0 , % r 1 1 jne . L 2 6 0 movl $ 1 , % eax jmp . L 2 6 2 . L 2 6 0 : movzbl (% rax ), % eax movzbl % al , % eax leaq . LC 3 3 (% rip ), % rdx movzbl (% rdx ), % edx movzbl % dl , % edx subl % edx , % eax testl % eax , % eax sete % al jmp . L 2 6 2 . L 2 8 6 : movl $ 0 , % eax . L 2 6 2 : testb % al , % al je . L 2 6 3 . LBB 2 2 2 : addq $ 1 , - 5 6 (% rbp ) . LBE 2 2 2 : jmp . L 2 5 4 . L 2 6 3 : . LBB 2 2 3 : . LBB 2 2 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 2 6 4 cmpq % rax , - 8 8 (% rbp ) jl . L 2 8 7 . L 2 6 4 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 7 : movq 1 6 (% rbp ), % r 1 0 movq - 8 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % r 1 0 movq (% r 1 0 ), % rax movq 8 (% r 1 0 ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 (% r 1 0 ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 2 6 6 cmpq % rax , - 9 6 (% rbp ) jge . L 2 6 6 movq - 1 2 8 (% rbp ), % rdx movq - 9 6 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % r 1 0 cmpq $ 1 , % r 1 0 je . L 2 6 7 jmp . L 2 8 8 . L 2 6 6 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 7 : movq % rax , % r 1 1 leaq . LC 3 4 (% rip ), % r 1 0 cmpq % r 1 0 , % r 1 1 jne . L 2 6 9 movl $ 1 , % eax jmp . L 2 7 1 . L 2 6 9 : movzbl (% rax ), % eax movzbl % al , % eax leaq . LC 3 4 (% rip ), % rdx movzbl (% rdx ), % edx movzbl % dl , % edx subl % edx , % eax testl % eax , % eax sete % al jmp . L 2 7 1 . L 2 8 8 : movl $ 0 , % eax . L 2 7 1 : testb % al , % al je . L 2 5 4 . LBB 2 2 5 : addq $ 1 , - 6 4 (% rbp ) . L 2 5 4 : . LBE 2 2 5 : . LBE 2 2 4 : . LBE 2 2 3 : . LBE 2 2 1 : . LBE 2 2 0 : . LBE 2 1 9 : . LBE 2 1 8 : . LBB 2 2 6 : addq $ 1 , - 9 6 (% rbp ) . L 2 5 3 : . LBE 2 2 6 : cmpq $ 2 , - 9 6 (% rbp ) jle . L 2 9 3 . LBE 2 1 6 : . LBE 2 1 5 : . LBB 2 2 7 : cmpq $ 3 , - 5 6 (% rbp ) jne . L 2 7 4 . LBB 2 2 8 : . LBB 2 2 9 : leaq . LC 3 3 (% rip ), % r 8 movl $ 1 , % r 9 d movq % r 8 , - 2 4 0 (% rbp ) movq % r 9 , - 2 3 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx jmp . L 2 7 8 . L 2 7 4 : . LBE 2 2 9 : . LBE 2 2 8 : . LBB 2 3 0 : . LBB 2 3 1 : cmpq $ 3 , - 6 4 (% rbp ) jne . L 2 7 5 . LBB 2 3 2 : . LBB 2 3 3 : leaq . LC 3 4 (% rip ), % rsi movl $ 1 , % edi movq % rsi , - 2 4 0 (% rbp ) movq % rdi , - 2 3 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx jmp . L 2 7 8 . L 2 7 5 : . LBE 2 3 3 : . LBE 2 3 2 : . LBE 2 3 1 : . LBE 2 3 0 : . LBE 2 2 7 : . LBE 2 1 4 : . LBB 2 3 4 : addq $ 1 , - 8 8 (% rbp ) . L 2 5 2 : . LBE 2 3 4 : cmpq $ 2 , - 8 8 (% rbp ) jle . L 2 9 4 . LBE 2 1 2 : . LBE 2 1 1 : . LBB 2 3 5 : leaq . LC 3 5 (% rip ), % rcx movl $ 1 , % ebx movq % rcx , - 2 4 0 (% rbp ) movq % rbx , - 2 3 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx . L 2 7 8 : . LBE 2 3 5 : . LBE 1 8 5 : addq $ 2 0 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 4 movl $ 3 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 7 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 2 8 , % rsp movq % rdi , - 3 2 8 (% rbp ) movq - 3 2 8 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 4 8 : movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) . LBB 4 9 : . LBB 5 0 : . LBB 5 1 : movq go . day 2 4 0 . testcases (% rip ), % rax movq 8 + go . day 2 4 0 . testcases (% rip ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 + go . day 2 4 0 . testcases (% rip ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 5 movl $ 0 , % ebx . LBE 5 1 : jmp . L 6 4 . L 7 3 : . LBB 5 2 : nop . LBE 5 2 : . LBB 5 3 : . LBB 5 4 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 6 5 cmpq % rax , % rbx jge . L 6 5 movq - 2 2 4 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . LBE 5 4 : . LBB 5 5 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) . LBE 5 5 : . LBB 5 6 : movq - 3 1 2 (% rbp ), % r 1 4 movq % r 1 4 , % rdx movq % r 1 4 , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 8 8 (% rbp ) movq % r 1 4 , - 2 8 0 (% rbp ) movq % r 1 4 , - 2 7 2 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 2 8 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx cmpq % rax , % rdx cmovle % rdx , % rax leaq 0 (,% rax , 8 ), % rdx movq - 1 6 0 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memmove @ PLT . LBB 5 7 : subq $ 8 , % rsp pushq - 2 7 2 (% rbp ) pushq - 2 8 0 (% rbp ) pushq - 2 8 8 (% rbp ) call go . day 2 4 0 . MinSwapsAdjacentPairs addq $ 3 2 , % rsp movq % rax , - 5 6 (% rbp ) movq - 2 9 6 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 6 6 jmp . L 6 7 . L 6 5 : . LBE 5 7 : . LBE 5 6 : . LBB 6 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 6 : . LBE 6 2 : . LBB 6 3 : . LBB 6 1 : . LBB 5 8 : leaq int .. d (% rip ), % r 1 4 movq % r 1 4 , - 3 6 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 3 6 0 (% rbp ) movq % r 1 4 , - 3 5 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movdqa - 3 6 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) movdqa - 3 5 2 (% rbp ), % xmm 1 movups % xmm 1 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 8 . LBB 5 9 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 5 9 : jmp . L 6 9 . L 6 8 : . LBB 6 0 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 9 : . LBE 6 0 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) leaq . LC 2 4 (% rip ), % r 1 2 movl $ 1 9 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 3 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 6 7 : . LBE 5 8 : . LBE 6 1 : . LBE 6 3 : . LBE 5 3 : . LBB 6 4 : addq $ 1 , % rbx . L 6 4 : . LBE 6 4 : cmpq % r 1 5 , % rbx jl . L 7 3 . LBE 5 0 : . LBE 4 9 : . LBE 4 8 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 3 movl $ 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 4 3 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq % rdi , - 5 6 (% rbp ) movq % rsi , - 6 4 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 3 0 : movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 4 0 (% rbp ) leaq - 4 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) . LBB 3 1 : . LBB 3 2 : jmp . L 2 7 . L 4 2 : . LBB 3 3 : nop . LBE 3 3 : . LBB 3 4 : . LBB 3 5 : movq - 5 6 (% rbp ), % rax movq (% rax ), % rdx movq - 6 4 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx jg . L 2 8 . LBB 3 6 : movq - 8 (% rbp ), % rax addq $ 8 , % rax movq - 5 6 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 2 9 . LBB 3 7 : movq % rdx , (% rax ) . LBE 3 7 : jmp . L 3 0 . L 2 9 : . LBB 3 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 0 : . LBE 3 8 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 5 6 (% rbp ) . LBE 3 6 : jmp . L 2 7 . L 2 8 : . LBB 3 9 : movq - 8 (% rbp ), % rax addq $ 8 , % rax movq - 6 4 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 1 . LBB 4 0 : movq % rdx , (% rax ) . LBE 4 0 : jmp . L 3 2 . L 3 1 : . LBB 4 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 2 : . LBE 4 1 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 6 4 (% rbp ) . L 2 7 : . LBE 3 9 : . LBE 3 5 : . LBE 3 4 : . LBB 4 2 : cmpq $ 0 , - 5 6 (% rbp ) setne % al testb % al , % al je . L 3 3 . LBB 4 3 : cmpq $ 0 , - 6 4 (% rbp ) setne % al . L 3 3 : . LBE 4 3 : . LBE 4 2 : testb % al , % al jne . L 4 2 . LBE 3 2 : . LBE 3 1 : . LBB 4 4 : cmpq $ 0 , - 5 6 (% rbp ) je . L 3 6 . LBB 4 5 : movq - 8 (% rbp ), % rax addq $ 8 , % rax movq - 5 6 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 7 . LBB 4 6 : movq % rdx , (% rax ) . LBE 4 6 : jmp . L 3 6 . L 3 7 : . LBB 4 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 6 : . LBE 4 7 : . LBE 4 5 : . LBE 4 4 : . LBB 4 8 : cmpq $ 0 , - 6 4 (% rbp ) je . L 3 8 . LBB 4 9 : movq - 8 (% rbp ), % rax addq $ 8 , % rax movq - 6 4 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 9 . LBB 5 0 : movq % rdx , (% rax ) . LBE 5 0 : jmp . L 3 8 . L 3 9 : . LBB 5 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 8 : . LBE 5 1 : . LBE 4 9 : . LBE 4 8 : . LBB 5 2 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax . LBE 5 2 : . LBE 3 0 : leave ret
leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 6 movl $ 2 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 7 : ret . L 7 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 4 8 , % rsp movq % rdi , - 2 1 6 (% rbp ) leaq go . pool . Pool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 0 (% rbp ) leaq uint 3 2 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) . LBB 4 8 : movq $ 0 , - 5 6 (% rbp ) . LBB 4 9 : jmp . L 5 4 . L 7 2 : . LBB 5 0 : nop . LBE 5 0 : . LBB 5 1 : leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 6 (% rbp ) leaq go . pool . TestPoolGC .. func 1 (% rip ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 8 8 (% rbp ), % rbx leaq type .. func . 8 . 1 int . 9 . 8 . 9 (% rip ), % rsi movq % rsi , - 2 5 6 (% rbp ) leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . pool . fin 1 . 0 . 1 uint 3 2 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq % rbx , - 1 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 5 . LBB 5 2 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 5 2 : jmp . L 5 6 . L 5 5 : . LBB 5 3 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . pool . fin 1 . 0 . 1 uint 3 2 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 6 : . LBE 5 3 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 2 4 8 (% rbp ) leaq type ... 1 int (% rip ), % r 1 4 movq - 9 6 (% rbp ), % r 1 5 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rcx , % rsi movq % rdx , % rax movq - 2 5 6 (% rbp ), % rdx movq - 2 4 8 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call runtime . SetFinalizer @ PLT leaq type ... 1 int (% rip ), % r 1 2 movq - 9 6 (% rbp ), % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq - 8 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . pool . Pool . Put . LBE 5 1 : . LBB 5 4 : addq $ 1 , - 5 6 (% rbp ) . L 5 4 : . LBE 5 4 : cmpq $ 9 9 , - 5 6 (% rbp ) jle . L 7 2 . LBE 4 9 : . LBE 4 8 : . LBB 5 5 : movq $ 0 , - 6 4 (% rbp ) . LBB 5 6 : jmp . L 5 9 . L 7 3 : . LBB 5 7 : nop . LBE 5 7 : . LBB 5 8 : movq - 8 0 (% rbp ), % rax movq % rax , % rdi call go . pool . Pool . Get . LBE 5 8 : . LBB 5 9 : addq $ 1 , - 6 4 (% rbp ) . L 5 9 : . LBE 5 9 : cmpq $ 9 9 , - 6 4 (% rbp ) jle . L 7 3 . LBE 5 6 : . LBE 5 5 : . LBB 6 0 : movq $ 0 , - 7 2 (% rbp ) . LBB 6 1 : jmp . L 6 2 . L 7 5 : . LBB 6 2 : nop . LBE 6 2 : . LBB 6 3 : call runtime . GC @ PLT movl $ 1 0 0 0 0 0 0 , % edi call time . Sleep @ PLT . LBB 6 4 : movq - 8 8 (% rbp ), % rax movl (% rax ), % eax cmpl $ 9 7 , % eax ja . L 7 4 . LBE 6 4 : . LBE 6 3 : . LBB 6 7 : addq $ 1 , - 7 2 (% rbp ) . L 6 2 : . LBE 6 7 : cmpq $ 4 , - 7 2 (% rbp ) jle . L 7 5 . LBE 6 1 : . LBE 6 0 : movq - 8 8 (% rbp ), % rax movl (% rax ), % ebx leaq uint 3 2 .. d (% rip ), % rax movq % rax , - 2 8 8 (% rbp ) leaq uint 3 2 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 7 6 (% rbp ) movq - 1 7 6 (% rbp ), % rax movl % ebx , (% rax ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 2 8 0 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 2 7 2 (% rbp ) leaq go .. C 8 2 (% rip ), % rax movq % rax , - 2 6 4 (% rbp ) leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movdqa - 2 8 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 6 0 (% rbp ) movdqa - 2 7 2 (% rbp ), % xmm 1 movups % xmm 1 , - 1 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 7 . LBB 7 0 : movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 7 0 : jmp . L 6 8 . L 6 7 : . LBB 7 1 : movq - 1 6 8 (% rbp ), % rax leaq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 8 : . LBE 7 1 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 2 , - 1 2 0 (% rbp ) movq $ 2 , - 1 1 2 (% rbp ) leaq . LC 7 3 (% rip ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 4 1 , - 2 3 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 2 1 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp jmp . L 5 3 . L 7 4 : . LBB 7 2 : . LBB 6 9 : . LBB 6 8 : . LBB 6 6 : . LBB 6 5 : nop . L 5 3 : . LBE 6 5 : . LBE 6 6 : . LBE 6 8 : . LBE 6 9 : . LBE 7 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 5 movl $ 3 4 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 3 2 0 , % rsp movq % rsi , % rax movq % rdi , % r 1 0 movq % r 1 0 , % rsi movq % r 1 1 , % rdi movq % rax , % rdi movq % rsi , - 3 2 0 (% rbp ) movq % rdi , - 3 1 2 (% rbp ) movq % rdx , - 3 3 6 (% rbp ) movq % rcx , - 3 2 8 (% rbp ) movq $ 0 , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) . LBB 2 : movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) movb $ 0 , - 1 7 (% rbp ) . LBB 3 : movq - 3 1 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 8 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 4 0 (% rbp ) . LBB 4 : jmp . L 2 . L 3 3 : . LBB 5 : nop . LBE 5 : . LBB 6 : movzbl - 1 7 (% rbp ), % eax movb % al , - 4 1 (% rbp ) . LBB 7 : cmpq $ 0 , - 3 2 (% rbp ) js . L 3 . LBB 8 : movq - 3 1 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 4 cmpq % rax , - 3 2 (% rbp ) jge . L 4 movq - 3 2 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % edx movzbl - 4 1 (% rbp ), % eax addl % edx , % eax subl $ 4 8 , % eax movb % al , - 4 1 (% rbp ) jmp . L 3 . L 4 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 : . LBE 8 : . LBE 7 : . LBB 9 : cmpq $ 0 , - 4 0 (% rbp ) js . L 5 . LBB 1 0 : movq - 3 2 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 6 cmpq % rax , - 4 0 (% rbp ) jge . L 6 movq - 3 3 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % edx movzbl - 4 1 (% rbp ), % eax addl % edx , % eax subl $ 4 8 , % eax movb % al , - 4 1 (% rbp ) jmp . L 5 . L 6 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 : . LBE 1 0 : . LBE 9 : movzbl - 4 1 (% rbp ), % eax movzbl % al , % edx movl % edx , % eax sall $ 2 , % eax addl % edx , % eax sall $ 3 , % eax addl % edx , % eax leal 0 (,% rax , 4 ), % edx addl % edx , % eax shrw $ 8 , % ax shrb $ 3 , % al movb % al , - 1 7 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rbx movzbl - 4 1 (% rbp ), % ecx movzbl % cl , % edx movl % edx , % eax sall $ 2 , % eax addl % edx , % eax sall $ 3 , % eax addl % edx , % eax leal 0 (,% rax , 4 ), % edx addl % edx , % eax shrw $ 8 , % ax movl % eax , % edx shrb $ 3 , % dl movl % edx , % eax sall $ 2 , % eax addl % edx , % eax addl % eax , % eax subl % eax , % ecx movl % ecx , % edx leal 4 8 (% rdx ), % r 1 2 d leaq 1 (% rbx ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 7 . LBB 1 1 : movq - 2 5 6 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq uint 8 .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 1 1 : jmp . L 8 . L 7 : . LBB 1 2 : movq - 2 5 6 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 8 : . LBE 1 2 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movb % r 1 2 b , (% rax ) . LBE 6 : . LBB 1 3 : . LBB 1 4 : movq - 3 2 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq % rdx , - 3 2 (% rbp ) movq % rax , - 4 0 (% rbp ) . L 2 : . LBE 1 4 : . LBE 1 3 : . LBB 1 5 : movq - 3 2 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 9 . LBB 1 6 : movq - 4 0 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax . L 9 : . LBE 1 6 : . LBE 1 5 : testb % al , % al jne . L 3 3 . LBE 4 : . LBE 3 : . LBB 1 7 : cmpb $ 0 , - 1 7 (% rbp ) je . L 1 2 . LBB 1 8 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rbx movl $ 4 9 , % r 1 2 d leaq 1 (% rbx ), % rax movq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 3 . LBB 1 9 : movq - 2 2 4 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq uint 8 .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 1 9 : jmp . L 1 4 . L 1 3 : . LBB 2 0 : movq - 2 2 4 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 1 4 : . LBE 2 0 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movb % r 1 2 b , (% rax ) . L 1 2 : . LBE 1 8 : . LBE 1 7 : . LBB 2 1 : movq $ 0 , - 5 6 (% rbp ) movq - 2 9 6 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 6 4 (% rbp ) . LBB 2 2 : jmp . L 1 5 . L 3 4 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 5 6 (% rbp ), % rdx movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rcx cmpq $ 0 , - 6 4 (% rbp ) js . L 1 6 cmpq % rcx , - 6 4 (% rbp ) jl . L 2 8 . L 1 6 : movq - 6 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq - 3 0 4 (% rbp ), % rsi movq - 6 4 (% rbp ), % rcx addq % rsi , % rcx movzbl (% rcx ), % edi movq - 2 9 6 (% rbp ), % rcx cmpq $ 0 , - 5 6 (% rbp ) js . L 1 8 cmpq % rcx , - 5 6 (% rbp ) jl . L 2 9 . L 1 8 : movq - 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 3 0 4 (% rbp ), % rsi movq - 5 6 (% rbp ), % rcx addq % rsi , % rcx movzbl (% rcx ), % esi movq - 1 8 4 (% rbp ), % rcx testq % rdx , % rdx js . L 2 0 cmpq % rcx , % rdx jl . L 3 0 . L 2 0 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq - 1 9 2 (% rbp ), % rcx addq % rcx , % rdx movb % dil , (% rdx ) movq - 1 5 2 (% rbp ), % rdx testq % rax , % rax js . L 2 2 cmpq % rdx , % rax jl . L 3 1 . L 2 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq - 1 6 0 (% rbp ), % rdx addq % rdx , % rax movb % sil , (% rax ) . LBE 2 5 : . LBE 2 4 : . LBB 2 6 : . LBB 2 7 : movq - 5 6 (% rbp ), % rax leaq 1 (% rax ), % rdx movq - 6 4 (% rbp ), % rax subq $ 1 , % rax movq % rdx , - 5 6 (% rbp ) movq % rax , - 6 4 (% rbp ) . L 1 5 : . LBE 2 7 : . LBE 2 6 : movq - 5 6 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax jl . L 3 4 . LBE 2 2 : . LBE 2 1 : . LBB 2 8 : subq $ 8 , % rsp pushq - 2 8 8 (% rbp ) pushq - 2 9 6 (% rbp ) pushq - 3 0 4 (% rbp ) movl $ 0 , % edi call runtime . slicebytetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx . LBE 2 8 : . LBE 2 : leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 9 movl $ 7 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 9 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 5 6 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 6 4 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq % rbx , - 4 8 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 2 4 (% rbp ) . LBB 3 : movq $ 0 , - 3 2 (% rbp ) . LBB 4 : jmp . L 3 . L 4 8 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : cmpq $ 0 , - 3 2 (% rbp ) jne . L 4 . LBB 8 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 5 cmpq % rax , - 3 2 (% rbp ) jl . L 3 5 . L 5 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 7 cmpq % rax , - 3 2 (% rbp ) jl . L 3 6 . L 7 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq - 6 4 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . LBB 9 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 9 cmpq % rax , - 3 2 (% rbp ) jl . L 3 7 . L 9 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 6 4 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 2 4 (% rbp ) jge . L 1 1 . LBB 1 0 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 2 cmpq % rax , - 3 2 (% rbp ) jl . L 3 8 . L 1 2 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 6 4 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 2 4 (% rbp ) jmp . L 1 1 . L 4 : . LBE 1 0 : . LBE 9 : . LBE 8 : . LBB 1 1 : . LBB 1 2 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 1 4 cmpq % rdx , % rax jl . L 3 9 . L 1 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 6 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax testq % rax , % rax jle . L 1 6 . LBB 1 3 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 7 cmpq % rax , - 3 2 (% rbp ) jl . L 4 0 . L 1 7 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 1 9 cmpq % rdx , % rax jl . L 4 1 . L 1 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 2 1 cmpq % rdx , - 3 2 (% rbp ) jl . L 4 2 . L 2 1 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq - 6 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rcx movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 6 4 (% rbp ), % rsi movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax addq % rcx , % rdx movq % rdx , (% rax ) . LBE 1 3 : jmp . L 1 1 . L 1 6 : . LBB 1 4 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 3 cmpq % rax , - 3 2 (% rbp ) jl . L 4 3 . L 2 3 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 5 cmpq % rax , - 3 2 (% rbp ) jl . L 4 4 . L 2 5 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq - 6 4 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . L 1 1 : . LBE 1 4 : . LBE 1 2 : . LBE 1 1 : . LBE 7 : . LBB 1 5 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 7 cmpq % rax , - 3 2 (% rbp ) jl . L 4 5 . L 2 7 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 6 4 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 2 4 (% rbp ) jge . L 2 9 . LBB 1 6 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 0 cmpq % rax , - 3 2 (% rbp ) jl . L 4 6 . L 3 0 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq - 6 4 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 2 4 (% rbp ) . L 2 9 : . LBE 1 6 : . LBE 1 5 : . LBE 6 : . LBB 1 7 : addq $ 1 , - 3 2 (% rbp ) . L 3 : . LBE 1 7 : movq 2 4 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) jl . L 4 8 . LBE 4 : . LBE 3 : . LBB 1 8 : movq - 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 1 8 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
leaq - 9 5 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 3 8 movl $ 9 5 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 5 4 : ret . L 7 3 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 0 4 , % rsp leaq . LC 2 6 3 (% rip ), % rax movl $ 4 2 , % edx movq % rax , - 7 5 2 (% rbp ) movq % rdx , - 7 4 4 (% rbp ) movq 8 + os . Args (% rip ), % rax testq % rax , % rax jg . L 7 1 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 7 1 9 : movq os . Args (% rip ), % rax movq (% rax ), % rdx movq 8 (% rax ), % rax movq % rdx , % rdi movq % rax , % rsi call path . Dir @ PLT leaq . LC 2 6 4 (% rip ), % r 1 2 movl $ 9 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rax , - 7 3 6 (% rbp ) movq % rdx , - 7 2 8 (% rbp ) movq % rcx , - 7 2 0 (% rbp ) movq % rbx , - 7 1 2 (% rbp ) leaq - 7 3 6 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq $ 2 , - 4 0 8 (% rbp ) movq $ 2 , - 4 0 0 (% rbp ) subq $ 8 , % rsp pushq - 4 0 0 (% rbp ) pushq - 4 0 8 (% rbp ) pushq - 4 1 6 (% rbp ) call path . Join @ PLT addq $ 3 2 , % rsp movq % rax , - 7 6 8 (% rbp ) movq % rdx , - 7 6 0 (% rbp ) movq 8 + os . Args (% rip ), % rax testq % rax , % rax jg . L 7 2 0 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 7 2 0 : movq os . Args (% rip ), % rax movq (% rax ), % rdx movq 8 (% rax ), % rax movq % rdx , % rdi movq % rax , % rsi call path . Dir @ PLT leaq . LC 2 6 5 (% rip ), % rbx movq % rbx , - 8 4 8 (% rbp ) movq $ 9 , - 8 4 0 (% rbp ) movq - 8 4 8 (% rbp ), % rcx movq - 8 4 0 (% rbp ), % rbx movq % rax , - 7 0 4 (% rbp ) movq % rdx , - 6 9 6 (% rbp ) movq % rcx , - 6 8 8 (% rbp ) movq % rbx , - 6 8 0 (% rbp ) leaq - 7 0 4 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 2 , - 3 7 6 (% rbp ) movq $ 2 , - 3 6 8 (% rbp ) subq $ 8 , % rsp pushq - 3 6 8 (% rbp ) pushq - 3 7 6 (% rbp ) pushq - 3 8 4 (% rbp ) call path . Join @ PLT addq $ 3 2 , % rsp movq % rax , - 7 8 4 (% rbp ) movq % rdx , - 7 7 6 (% rbp ) leaq - 3 5 2 (% rbp ), % rdi movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx leaq - 6 7 2 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . stringtoslicebyte @ PLT movq - 7 6 8 (% rbp ), % rcx movq - 7 6 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 3 3 6 (% rbp ) pushq - 3 4 4 (% rbp ) pushq - 3 5 2 (% rbp ) movl $ 4 3 8 , % edx movq % rcx , % rdi movq % rax , % rsi call io .. z 2 fioutil . WriteFile @ PLT addq $ 3 2 , % rsp movq % rax , - 8 0 0 (% rbp ) movq % rdx , - 7 9 2 (% rbp ) . LBB 5 2 4 : movq - 8 0 0 (% rbp ), % rax testq % rax , % rax je . L 7 2 1 . LBB 5 2 5 : movq - 8 0 0 (% rbp ), % rax testq % rax , % rax jne . L 7 2 2 movl $ 0 , % eax jmp . L 7 2 3 . L 7 2 2 : movq - 8 0 0 (% rbp ), % rax movq (% rax ), % rax . L 7 2 3 : movq % rax , - 9 4 4 (% rbp ) movq - 7 9 2 (% rbp ), % rax movq % rax , - 9 3 6 (% rbp ) movdqa - 9 4 4 (% rbp ), % xmm 0 movups % xmm 0 , - 6 4 0 (% rbp ) leaq - 6 4 0 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq $ 1 , - 3 1 2 (% rbp ) movq $ 1 , - 3 0 4 (% rbp ) subq $ 8 , % rsp pushq - 3 0 4 (% rbp ) pushq - 3 1 2 (% rbp ) pushq - 3 2 0 (% rbp ) call log . Fatal @ PLT addq $ 3 2 , % rsp . L 7 2 1 : . LBE 5 2 5 : . LBE 5 2 4 : movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq - 7 8 4 (% rbp ), % rdi movq - 7 7 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call go . util . CopyFile movq % rax , - 8 0 0 (% rbp ) movq % rdx , - 7 9 2 (% rbp ) . LBB 5 2 6 : movq - 8 0 0 (% rbp ), % rax testq % rax , % rax je . L 7 2 4 . LBB 5 2 7 : movq - 8 0 0 (% rbp ), % rax testq % rax , % rax jne . L 7 2 5 movl $ 0 , % eax jmp . L 7 2 6 . L 7 2 5 : movq - 8 0 0 (% rbp ), % rax movq (% rax ), % rax . L 7 2 6 : movq % rax , - 9 2 8 (% rbp ) movq - 7 9 2 (% rbp ), % rax movq % rax , - 9 2 0 (% rbp ) movdqa - 9 2 8 (% rbp ), % xmm 1 movups % xmm 1 , - 6 2 4 (% rbp ) leaq - 6 2 4 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 1 , - 2 8 0 (% rbp ) movq $ 1 , - 2 7 2 (% rbp ) subq $ 8 , % rsp pushq - 2 7 2 (% rbp ) pushq - 2 8 0 (% rbp ) pushq - 2 8 8 (% rbp ) call log . Fatal @ PLT addq $ 3 2 , % rsp . L 7 2 4 : . LBE 5 2 7 : . LBE 5 2 6 : leaq - 2 5 6 (% rbp ), % rax movq - 7 8 4 (% rbp ), % rcx movq - 7 7 6 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call io .. z 2 fioutil . ReadFile @ PLT movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 6 0 8 (% rbp ) movq % rdx , - 6 0 0 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 8 3 2 (% rbp ) movq % rdx , - 8 2 4 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq % rax , - 8 1 6 (% rbp ) movq - 5 8 4 (% rbp ), % rax movq - 5 7 6 (% rbp ), % rdx movq % rax , - 8 0 0 (% rbp ) movq % rdx , - 7 9 2 (% rbp ) . LBB 5 2 8 : movq - 8 0 0 (% rbp ), % rax testq % rax , % rax je . L 7 2 7 . LBB 5 2 9 : movq - 8 0 0 (% rbp ), % rax testq % rax , % rax jne . L 7 2 8 movl $ 0 , % eax jmp . L 7 2 9 . L 7 2 8 : movq - 8 0 0 (% rbp ), % rax movq (% rax ), % rax . L 7 2 9 : movq % rax , - 9 1 2 (% rbp ) movq - 7 9 2 (% rbp ), % rax movq % rax , - 9 0 4 (% rbp ) movdqa - 9 1 2 (% rbp ), % xmm 2 movups % xmm 2 , - 5 2 8 (% rbp ) leaq - 5 2 8 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 1 , - 2 0 0 (% rbp ) movq $ 1 , - 1 9 2 (% rbp ) subq $ 8 , % rsp pushq - 1 9 2 (% rbp ) pushq - 2 0 0 (% rbp ) pushq - 2 0 8 (% rbp ) call log . Fatal @ PLT addq $ 3 2 , % rsp . L 7 2 7 : . LBE 5 2 9 : . LBE 5 2 8 : movq - 7 6 8 (% rbp ), % rdx movq - 7 6 0 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call os . Remove @ PLT movq % rax , - 8 0 0 (% rbp ) movq % rdx , - 7 9 2 (% rbp ) . LBB 5 3 0 : movq - 8 0 0 (% rbp ), % rax testq % rax , % rax je . L 7 3 0 . LBB 5 3 1 : movq - 8 0 0 (% rbp ), % rax testq % rax , % rax jne . L 7 3 1 movl $ 0 , % eax jmp . L 7 3 2 . L 7 3 1 : movq - 8 0 0 (% rbp ), % rax movq (% rax ), % rax . L 7 3 2 : movq % rax , - 8 9 6 (% rbp ) movq - 7 9 2 (% rbp ), % rax movq % rax , - 8 8 8 (% rbp ) movdqa - 8 9 6 (% rbp ), % xmm 3 movups % xmm 3 , - 5 1 2 (% rbp ) leaq - 5 1 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) call log . Fatal @ PLT addq $ 3 2 , % rsp . L 7 3 0 : . LBE 5 3 1 : . LBE 5 3 0 : movq - 7 8 4 (% rbp ), % rdx movq - 7 7 6 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call os . Remove @ PLT movq % rax , - 8 0 0 (% rbp ) movq % rdx , - 7 9 2 (% rbp ) . LBB 5 3 2 : movq - 8 0 0 (% rbp ), % rax testq % rax , % rax je . L 7 3 3 . LBB 5 3 3 : movq - 8 0 0 (% rbp ), % rax testq % rax , % rax jne . L 7 3 4 movl $ 0 , % eax jmp . L 7 3 5 . L 7 3 4 : movq - 8 0 0 (% rbp ), % rax movq (% rax ), % rax . L 7 3 5 : movq % rax , - 8 8 0 (% rbp ) movq - 7 9 2 (% rbp ), % rax movq % rax , - 8 7 2 (% rbp ) movdqa - 8 8 0 (% rbp ), % xmm 4 movups % xmm 4 , - 4 9 6 (% rbp ) leaq - 4 9 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 1 , - 1 3 6 (% rbp ) movq $ 1 , - 1 2 8 (% rbp ) subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) call log . Fatal @ PLT addq $ 3 2 , % rsp . L 7 3 3 : . LBE 5 3 3 : . LBE 5 3 2 : leaq string .. d (% rip ), % rax movq % rax , - 8 6 4 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 5 6 (% rbp ) subq $ 8 , % rsp pushq - 8 1 6 (% rbp ) pushq - 8 2 4 (% rbp ) pushq - 8 3 2 (% rbp ) movl $ 0 , % edi call runtime . slicebytetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 3 6 . LBB 5 3 4 : movq - 4 5 6 (% rbp ), % rcx movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 5 3 4 : jmp . L 7 3 7 . L 7 3 6 : . LBB 5 3 5 : movq - 4 5 6 (% rbp ), % rax leaq - 4 4 8 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 3 7 : . LBE 5 3 5 : movq - 4 5 6 (% rbp ), % rax movq % rax , - 8 5 6 (% rbp ) movdqa - 8 6 4 (% rbp ), % xmm 5 movups % xmm 5 , - 4 3 2 (% rbp ) leaq - 4 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq . LC 2 6 6 (% rip ), % r 1 4 movl $ 3 , % r 1 5 d leaq - 8 0 (% rbp ), % rax movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : leaq - 6 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 1 movl $ 6 8 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 3 2 , % rsp movq % rdi , - 5 6 8 (% rbp ) movq % rsi , % rax movq % rdx , % rsi movq % rsi , % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq % rcx , % rax movq % r 8 , % rcx movq % rcx , % rdx movq % rax , - 6 0 8 (% rbp ) movq % rdx , - 6 0 0 (% rbp ) movq % r 9 , - 5 7 6 (% rbp ) movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 4 6 4 (% rbp ) movq $ 0 , - 4 5 6 (% rbp ) . LBB 2 : . LBB 3 : movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) leaq - 4 4 8 (% rbp ), % rdx movq - 5 7 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 go . day 2 3 . Cell . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapassign @ PLT . LBE 3 : . LBB 4 : . LBB 5 : . LBB 6 : movl $ 1 , % eax testb % al , % al je . L 2 . LBB 7 : movq - 5 9 2 (% rbp ), % rdx movq - 6 0 8 (% rbp ), % rax cmpq % rax , % rdx sete % al . L 2 : . LBE 7 : . LBE 6 : testb % al , % al je . L 3 . LBB 8 : movq - 5 8 4 (% rbp ), % rdx movq - 6 0 0 (% rbp ), % rax cmpq % rax , % rdx sete % al . L 3 : . LBE 8 : . LBE 5 : testb % al , % al je . L 4 . LBB 9 : movq - 5 7 6 (% rbp ), % rcx movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) leaq - 4 3 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type .. map . 6 go . day 2 3 . Cell . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapdelete @ PLT . LBB 1 0 : . LBB 1 1 : movl $ 0 , % eax movl $ 0 , % r 1 2 d movl $ 0 , % r 1 3 d movq % rax , - 5 6 (% rbp ) movq % r 1 2 , - 4 6 4 (% rbp ) movq % r 1 3 , - 4 5 6 (% rbp ) . LBE 1 1 : movq - 5 6 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 4 0 8 (% rbp ) movq % rdx , - 4 0 0 (% rbp ) movq - 5 6 8 (% rbp ), % rcx movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 0 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 4 : . LBE 1 0 : . LBE 9 : . LBE 4 : movq $ 0 , - 4 9 6 (% rbp ) movq $ 0 , - 4 8 8 (% rbp ) movq $ 0 , - 4 8 0 (% rbp ) movq - 5 9 2 (% rbp ), % rax leaq 1 (% rax ), % rcx movq - 5 8 4 (% rbp ), % rsi movq - 5 9 2 (% rbp ), % rax leaq - 1 (% rax ), % r 8 movq - 5 8 4 (% rbp ), % r 1 0 movq - 5 9 2 (% rbp ), % r 9 movq - 5 8 4 (% rbp ), % rax leaq - 1 (% rax ), % rdi movq - 5 9 2 (% rbp ), % rdx movq - 5 8 4 (% rbp ), % rax addq $ 1 , % rax movq % rcx , - 6 7 2 (% rbp ) movq % rsi , - 6 6 4 (% rbp ) movq % r 8 , - 6 5 6 (% rbp ) movq % r 1 0 , - 6 4 8 (% rbp ) movq % r 9 , - 6 4 0 (% rbp ) movq % rdi , - 6 3 2 (% rbp ) movq % rdx , - 6 2 4 (% rbp ) movq % rax , - 6 1 6 (% rbp ) movdqa - 6 7 2 (% rbp ), % xmm 0 movups % xmm 0 , - 3 8 4 (% rbp ) movdqa - 6 5 6 (% rbp ), % xmm 1 movups % xmm 1 , - 3 6 8 (% rbp ) movdqa - 6 4 0 (% rbp ), % xmm 2 movups % xmm 2 , - 3 5 2 (% rbp ) movdqa - 6 2 4 (% rbp ), % xmm 3 movups % xmm 3 , - 3 3 6 (% rbp ) leaq - 3 8 4 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 4 , - 5 2 0 (% rbp ) movq $ 4 , - 5 1 2 (% rbp ) . LBB 1 2 : movq $ 0 , - 5 4 4 (% rbp ) movq $ 0 , - 5 3 6 (% rbp ) . LBB 1 3 : . LBB 1 4 : . LBB 1 5 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 1 5 : jmp . L 6 . L 2 0 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : . LBB 1 8 : movq - 3 1 2 (% rbp ), % rax testq % rbx , % rbx js . L 7 cmpq % rax , % rbx jge . L 7 movq - 3 2 0 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 1 8 : . LBB 1 9 : movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) . LBE 1 9 : . LBB 2 0 : . LBB 2 1 : movb $ 0 , - 5 7 (% rbp ) . LBB 2 2 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) leaq - 2 8 8 (% rbp ), % rdx movq - 5 7 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 go . day 2 3 . Cell . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapaccess 2 @ PLT movl % edx , % eax movb % al , - 5 7 (% rbp ) . LBE 2 2 : . LBB 2 3 : movzbl - 5 7 (% rbp ), % eax xorl $ 1 , % eax testb % al , % al jne . L 8 jmp . L 9 . L 7 : . LBE 2 3 : . LBE 2 1 : . LBE 2 0 : . LBB 3 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 8 : . LBE 3 2 : . LBB 3 3 : . LBB 3 1 : . LBB 2 5 : . LBB 2 4 : movq - 5 4 4 (% rbp ), % rdx movq - 5 3 6 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rdx , % rdi movq % rax , % rsi call go . day 2 3 . isValidNextCell addq $ 3 2 , % rsp . L 9 : . LBE 2 4 : . LBE 2 5 : testb % al , % al je . L 1 0 . LBB 2 6 : leaq - 1 2 8 (% rbp ), % rax movq - 5 7 6 (% rbp ), % r 8 movq - 6 0 8 (% rbp ), % rcx movq - 6 0 0 (% rbp ), % rdi movq - 5 4 4 (% rbp ), % rsi movq - 5 3 6 (% rbp ), % rdx subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % r 8 , % r 9 movq % rdi , % r 8 movq % rax , % rdi call go . day 2 3 . MinimumSteps addq $ 3 2 , % rsp movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq - 2 5 6 (% rbp ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) . LBB 2 7 : movq - 5 6 0 (% rbp ), % rax testq % rax , % rax jne . L 1 0 . LBB 2 8 : movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 2 . LBB 2 9 : movq - 2 4 0 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) . LBE 2 9 : jmp . L 1 3 . L 1 2 : . LBB 3 0 : movq - 2 4 0 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rdx movq % rcx , - 4 9 6 (% rbp ) movq % rax , - 4 8 8 (% rbp ) movq % rdx , - 4 8 0 (% rbp ) . L 1 3 : . LBE 3 0 : movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 7 2 (% rbp ), % rax movq % rax , (% rdx ) . L 1 0 : . LBE 2 8 : . LBE 2 7 : . LBE 2 6 : . LBE 3 1 : . LBE 3 3 : . LBE 1 7 : . LBB 3 4 : addq $ 1 , % rbx . L 6 : . LBE 3 4 : cmpq % r 1 3 , % rbx jl . L 2 0 . LBE 1 4 : . LBE 1 3 : . LBE 1 2 : subq $ 8 , % rsp pushq - 4 8 0 (% rbp ) pushq - 4 8 8 (% rbp ) pushq - 4 9 6 (% rbp ) call sort . Ints @ PLT addq $ 3 2 , % rsp movq - 5 7 6 (% rbp ), % rcx movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type .. map . 6 go . day 2 3 . Cell . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapdelete @ PLT . LBB 3 5 : movq - 4 8 8 (% rbp ), % rax testq % rax , % rax jne . L 1 6 . LBB 3 6 : . LBB 3 7 : . LBB 3 8 : movl $ 0 , % ecx movq go . day 2 3 . errNoPath (% rip ), % rax movq 8 + go . day 2 3 . errNoPath (% rip ), % rdx movq % rcx , - 5 6 (% rbp ) movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) . LBE 3 8 : movq - 5 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 1 8 4 (% rbp ) movq % rdx , - 1 7 6 (% rbp ) movq - 5 6 8 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 1 6 : . LBE 3 7 : . LBE 3 6 : . LBE 3 5 : . LBB 3 9 : . LBB 4 0 : movq - 4 8 8 (% rbp ), % rax testq % rax , % rax jg . L 1 7 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 7 : movq - 4 9 6 (% rbp ), % rax movq (% rax ), % rax addq $ 1 , % rax movl $ 0 , % r 1 4 d movl $ 0 , % r 1 5 d movq % rax , - 5 6 (% rbp ) movq % r 1 4 , - 4 6 4 (% rbp ) movq % r 1 5 , - 4 5 6 (% rbp ) . LBE 4 0 : movq - 5 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 1 5 2 (% rbp ) movq % rdx , - 1 4 4 (% rbp ) movq - 5 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 3 9 : . LBE 2 : movq - 5 6 8 (% rbp ), % rax leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 movl $ 3 2 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 8 0 , % rsp leaq bytes . Buffer .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) movb $ 7 2 , - 2 7 8 (% rbp ) movb $ 1 0 1 , - 2 7 7 (% rbp ) movb $ 1 0 8 , - 2 7 6 (% rbp ) movb $ 1 0 8 , - 2 7 5 (% rbp ) movb $ 1 1 1 , - 2 7 4 (% rbp ) movb $ 3 2 , - 2 7 3 (% rbp ) leaq - 2 7 8 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 6 , - 2 0 0 (% rbp ) movq $ 6 , - 1 9 2 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx subq $ 8 , % rsp pushq - 1 9 2 (% rbp ) pushq - 2 0 0 (% rbp ) pushq - 2 0 8 (% rbp ) movq % rdx , % rsi movq % rax , % rdi call bytes . Buffer . Write @ PLT addq $ 3 2 , % rsp movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) leaq . LC 0 (% rip ), % r 1 4 movl $ 6 , % r 1 5 d leaq pimt .. interface . 4 Write . 0 func . 8 . 6 . 7 uint 8 . 9 . 8 int . 3 error . 9 . 5 .. bytes . Buffer (% rip ), % r 1 2 movq - 5 6 (% rbp ), % r 1 3 leaq - 1 1 2 (% rbp ), % rax movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % rsi , % r 8 movq % rbx , % r 9 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % r 8 , % rcx movq % r 9 , % r 8 movq % rax , % rdi call fmt . Fprintf @ PLT addq $ 3 2 , % rsp movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq pimt .. interface . 4 Write . 0 func . 8 . 6 . 7 uint 8 . 9 . 8 int . 3 error . 9 . 5 .. os . File (% rip ), % rax movq % rax , - 3 2 0 (% rbp ) movq os . Stdout (% rip ), % rax movq % rax , - 3 1 2 (% rbp ) leaq - 8 0 (% rbp ), % rax movq - 5 6 (% rbp ), % rsi movq - 3 2 0 (% rbp ), % rdx movq - 3 1 2 (% rbp ), % rcx movq % rax , % rdi call bytes . Buffer . WriteTo @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 3 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 3 6 , % rsp movq % rdi , - 3 6 0 (% rbp ) leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expects . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) leaq . LC 2 2 (% rip ), % r 1 2 movl $ 1 1 , % r 1 3 d movq % r 1 2 , - 3 0 4 (% rbp ) movq % r 1 3 , - 2 9 6 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 0 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 1 2 , 3 2 (% rax ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 5 , - 2 8 0 (% rbp ) movq $ 5 , - 2 7 2 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 1 2 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq $ 0 , 3 2 (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 2 6 4 (% rbp ) movq $ 5 , - 2 5 6 (% rbp ) movq $ 5 , - 2 4 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 3 2 8 (% rbp ), % rax movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 3 2 8 (% rbp ), % rax leaq - 3 0 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expects . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 3 2 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 1 , - 3 4 4 (% rbp ) movq $ 1 , - 3 3 6 (% rbp ) . LBB 4 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expects . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 1 6 8 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 1 7 6 (% rbp ), % rax movq % rbx , % rdx salq $ 6 , % rdx addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 4 0 (% rbp ) movq % rdi , - 2 3 2 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 2 4 (% rbp ) movq % rdi , - 2 1 6 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 2 0 8 (% rbp ) movq % rdi , - 2 0 0 (% rbp ) movq 5 6 (% rax ), % rdx movq 4 8 (% rax ), % rax movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 4 0 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 4 8 (% rax ) movq % rdi , 5 6 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expects . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : leaq go . Solution . TestMoveZeroes .. func 1 (% rip ), % r 1 4 movq - 4 0 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . testcase 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expects . 0 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq % r 1 4 , - 6 4 (% rbp ) movq % r 1 2 , - 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . testcase 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expects . 0 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 7 2 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 3 6 0 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 3 3 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 7 1 movl $ 7 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 7 1 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 6 : . LBB 2 7 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jne . L 2 2 . LBB 2 8 : . LBB 2 9 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 3 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 2 4 . L 2 2 : . LBE 2 9 : . LBE 2 8 : . LBE 2 7 : . LBB 3 0 : movq 2 4 (% rbp ), % rax cmpq $ 2 , % rax jne . L 2 5 . LBB 3 1 : . LBB 3 2 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 6 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 7 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 7 : movq 1 6 (% rbp ), % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rax addq $ 8 , % rax movq (% rax ), % rax cmpq % rax , % rdx jle . L 2 8 . LBB 3 3 : . LBB 3 4 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 9 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 2 4 . L 2 8 : . LBE 3 4 : . LBE 3 3 : . LBE 3 2 : . LBB 3 5 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 3 0 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 3 0 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 2 4 . L 2 5 : . LBE 3 5 : . LBE 3 1 : . LBE 3 0 : movabsq $- 8 5 8 9 9 3 4 5 9 2 , % rax movq % rax , - 8 (% rbp ) movq % rax , - 1 6 (% rbp ) movq % rax , - 2 4 (% rbp ) . LBB 3 6 : movq $ 0 , - 4 0 (% rbp ) . LBB 3 7 : . LBB 3 8 : . LBB 3 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rcx movl $ 0 , % edx . LBE 3 9 : jmp . L 3 1 . L 7 0 : . LBB 4 0 : nop . LBE 4 0 : . LBB 4 1 : movq % rdx , - 4 0 (% rbp ) . LBB 4 2 : . LBB 4 3 : . LBB 4 4 : . LBB 4 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 2 cmpq % rax , - 4 0 (% rbp ) jl . L 5 9 . L 3 2 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 9 : movq 1 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rax cmpq % rax , - 8 (% rbp ) sete % al movl % eax , % esi xorl $ 1 , % esi testb % sil , % sil je . L 3 4 . LBB 4 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 5 cmpq % rax , - 4 0 (% rbp ) jl . L 6 0 . L 3 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 0 : movq 1 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rax cmpq % rax , - 1 6 (% rbp ) sete % al . L 3 4 : . LBE 4 6 : . LBE 4 5 : movl % eax , % esi xorl $ 1 , % esi testb % sil , % sil je . L 3 7 . LBB 4 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 8 cmpq % rax , - 4 0 (% rbp ) jl . L 6 1 . L 3 8 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 1 : movq 1 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rax cmpq % rax , - 2 4 (% rbp ) sete % al . L 3 7 : . LBE 4 7 : . LBE 4 4 : testb % al , % al jne . L 6 9 . LBE 4 3 : . LBB 4 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 4 2 cmpq % rax , - 4 0 (% rbp ) jl . L 6 2 . L 4 2 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 2 : movq 1 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rax cmpq % rax , - 8 (% rbp ) jge . L 4 4 . LBB 5 0 : movq - 1 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 4 5 cmpq % rax , - 4 0 (% rbp ) jl . L 6 3 . L 4 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 3 : movq 1 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rax movq % rax , - 8 (% rbp ) . LBE 5 0 : jmp . L 4 1 . L 4 4 : . LBB 5 1 : . LBB 5 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 4 7 cmpq % rax , - 4 0 (% rbp ) jl . L 6 4 . L 4 7 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 4 : movq 1 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rax cmpq % rax , - 1 6 (% rbp ) jge . L 4 9 . LBB 5 3 : movq - 1 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 5 0 cmpq % rax , - 4 0 (% rbp ) jl . L 6 5 . L 5 0 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 5 : movq 1 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rax movq % rax , - 1 6 (% rbp ) . LBE 5 3 : jmp . L 4 1 . L 4 9 : . LBB 5 4 : . LBB 5 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 5 2 cmpq % rax , - 4 0 (% rbp ) jl . L 6 6 . L 5 2 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 6 : movq 1 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rax cmpq % rax , - 2 4 (% rbp ) jge . L 4 1 . LBB 5 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 5 4 cmpq % rax , - 4 0 (% rbp ) jl . L 6 7 . L 5 4 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 7 : movq 1 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rax movq % rax , - 2 4 (% rbp ) jmp . L 4 1 . L 6 9 : . LBE 5 6 : . LBE 5 5 : . LBE 5 4 : . LBE 5 2 : . LBE 5 1 : . LBE 4 9 : . LBB 5 7 : . LBB 4 8 : nop . L 4 1 : . LBE 4 8 : . LBE 5 7 : . LBE 4 2 : . LBE 4 1 : . LBB 5 8 : addq $ 1 , % rdx . L 3 1 : . LBE 5 8 : cmpq % rcx , % rdx jl . L 7 0 . LBE 3 8 : . LBE 3 7 : . LBE 3 6 : . LBB 5 9 : movabsq $- 8 5 8 9 9 3 4 5 9 2 , % rax cmpq % rax , - 2 4 (% rbp ) jne . L 5 8 . LBB 6 0 : . LBB 6 1 : movq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 2 4 . L 5 8 : . LBE 6 1 : . LBE 6 0 : . LBE 5 9 : . LBB 6 2 : movq - 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 2 4 : . LBE 6 2 : . LBE 2 6 : leave ret
. LFB 0 : leaq - 5 3 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 movl $ 5 3 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 8 8 , % rsp movq % rdi , - 5 0 4 (% rbp ) movq $ 2 , - 4 3 2 (% rbp ) movq $ 4 , - 4 2 4 (% rbp ) movq $ 3 , - 4 1 6 (% rbp ) movq $ 6 , - 4 0 8 (% rbp ) movq $ 3 , - 4 0 0 (% rbp ) movq $ 2 , - 3 9 2 (% rbp ) movq $ 5 , - 3 8 4 (% rbp ) movq $ 5 , - 3 7 6 (% rbp ) leaq - 4 3 2 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq $ 8 , - 4 5 6 (% rbp ) movq $ 8 , - 4 4 8 (% rbp ) subq $ 8 , % rsp pushq - 4 4 8 (% rbp ) pushq - 4 5 6 (% rbp ) pushq - 4 6 4 (% rbp ) call go . problem 5 6 . findNumbersAppearOnce addq $ 3 2 , % rsp movq % rax , - 5 1 2 (% rbp ) movq % rdx , % rbx leaq int .. d (% rip ), % rax movq % rax , - 5 2 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 3 6 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq - 5 1 2 (% rbp ), % rdx movq % rdx , (% rax ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 5 2 0 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movq - 3 2 8 (% rbp ), % rax movq % rbx , (% rax ) movq - 3 2 8 (% rbp ), % rax movq % rax , % r 1 5 movdqa - 5 2 8 (% rbp ), % xmm 0 movups % xmm 0 , - 3 2 0 (% rbp ) movq % r 1 4 , - 3 0 4 (% rbp ) movq % r 1 5 , - 2 9 6 (% rbp ) leaq - 3 2 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 2 , - 2 8 8 (% rbp ) movq $ 2 , - 2 8 0 (% rbp ) movq $ 2 , - 2 7 2 (% rbp ) movq $ 3 , - 2 6 4 (% rbp ) movq $ 3 , - 2 5 6 (% rbp ) movq $ 3 , - 2 4 8 (% rbp ) movq $ 4 , - 2 4 0 (% rbp ) leaq - 2 8 8 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq $ 7 , - 4 8 8 (% rbp ) movq $ 7 , - 4 8 0 (% rbp ) subq $ 8 , % rsp pushq - 4 8 0 (% rbp ) pushq - 4 8 8 (% rbp ) pushq - 4 9 6 (% rbp ) call go . problem 5 6 . findNumberAppearOnce 2 addq $ 3 2 , % rsp movq % rax , % rbx leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rbx , (% rax ) movq - 2 0 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 1 9 2 (% rbp ) movq % r 1 3 , - 1 8 4 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 5 3 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 4 movl $ 5 3 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 8 8 , % rsp movq % rdi , - 4 7 2 (% rbp ) leaq . LC 1 3 (% rip ), % r 1 0 movl $ 2 , % r 1 1 d movq % r 1 0 , - 4 3 2 (% rbp ) movq % r 1 1 , - 4 2 4 (% rbp ) movb $ 1 , - 4 1 6 (% rbp ) leaq . LC 1 4 (% rip ), % r 8 movl $ 2 , % r 9 d movq % r 8 , - 4 0 8 (% rbp ) movq % r 9 , - 4 0 0 (% rbp ) movb $ 1 , - 3 9 2 (% rbp ) leaq . LC 1 5 (% rip ), % rcx movl $ 2 , % ebx movq % rcx , - 3 8 4 (% rbp ) movq % rbx , - 3 7 6 (% rbp ) movb $ 0 , - 3 6 8 (% rbp ) leaq . LC 1 6 (% rip ), % rax movl $ 2 , % edx movq % rax , - 3 6 0 (% rbp ) movq % rdx , - 3 5 2 (% rbp ) movb $ 0 , - 3 4 4 (% rbp ) . LBB 2 : movq $ 0 , - 4 6 4 (% rbp ) movq $ 0 , - 4 5 6 (% rbp ) movq $ 0 , - 4 4 8 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movl $ 4 , % r 1 2 d movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 1 3 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : testq % rbx , % rbx js . L 3 cmpq $ 3 , % rbx jg . L 3 movq % rbx , % rax addq % rax , % rax addq % rbx , % rax salq $ 3 , % rax leaq - 4 8 (% rbp ), % rcx addq % rcx , % rax leaq - 2 5 6 (% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 2 0 (% rbp ) . LBE 8 : . LBB 9 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 4 6 4 (% rbp ), % rdx movq - 4 5 6 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . problem 6 5 7 . judgeCircle movb % al , - 4 9 (% rbp ) . LBB 1 1 : movzbl - 4 4 8 (% rbp ), % eax cmpb % al , - 4 9 (% rbp ) jne . L 4 jmp . L 5 . L 3 : . LBE 1 1 : . LBE 1 0 : . LBB 1 8 : movl $ 4 , % esi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 8 : . LBB 1 9 : . LBB 1 7 : . LBB 1 2 : leaq string .. d (% rip ), % rax movq % rax , - 5 2 8 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 1 3 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 3 : jmp . L 7 . L 6 : . LBB 1 4 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 1 4 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 5 2 0 (% rbp ) leaq bool .. d (% rip ), % r 1 3 movq % r 1 3 , - 5 1 2 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 1 5 2 (% rbp ), % rax movzbl - 4 9 (% rbp ), % edx movb % dl , (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 5 0 4 (% rbp ) movq % r 1 3 , - 4 9 6 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 4 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movzbl - 4 4 8 (% rbp ), % edx movb % dl , (% rax ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 4 8 8 (% rbp ) leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 5 2 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 2 8 (% rbp ) movdqa - 5 1 2 (% rbp ), % xmm 1 movups % xmm 1 , - 1 1 2 (% rbp ) movdqa - 4 9 6 (% rbp ), % xmm 2 movups % xmm 2 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 . LBB 1 5 : movq - 1 3 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) . LBE 1 5 : jmp . L 9 . L 8 : . LBB 1 6 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 : . LBE 1 6 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 1 7 (% rip ), % r 1 4 movl $ 2 5 , % r 1 5 d movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rsi , % rcx movq - 4 7 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 5 : . LBE 1 2 : . LBE 1 7 : . LBE 1 9 : . LBE 7 : . LBB 2 0 : addq $ 1 , % rbx . L 2 : . LBE 2 0 : cmpq % r 1 2 , % rbx jl . L 1 3 . LBE 4 : . LBE 3 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 1 3 movl $ 2 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 6 : ret . L 1 1 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 6 8 , % rsp movq % rdi , - 1 5 2 (% rbp ) leaq type ... 1 testing . T (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 0 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 4 . LBB 8 9 : movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 8 9 : jmp . L 1 0 5 . L 1 0 4 : . LBB 9 0 : movq - 7 2 (% rbp ), % rax movq % rax , % rdx movq - 8 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 0 5 : . LBE 9 0 : movq - 8 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 9 1 : leaq type ... 1 go . circularbuffer . CircularBuffer (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rbx movl $ 1 0 , % edi call go . circularbuffer . NewCircularBuffer leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 0 6 . LBB 9 2 : movq % rax , (% rbx ) . LBE 9 2 : jmp . L 1 0 7 . L 1 0 6 : . LBB 9 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . gcWriteBarrier @ PLT . L 1 0 7 : . LBE 9 3 : . LBB 9 4 : leaq go . circularbuffer . TestASyncPop .. func 1 (% rip ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 6 4 (% rbp ), % rbx movq % rbx , - 2 0 0 (% rbp ) movq - 5 6 (% rbp ), % rbx leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . circularbuffer . c 1 . 0 . 1 . 1 go . circularbuffer . CircularBuffer . 2 . go . circularbuffer . t 2 . 0 . 1 . 1 testing . T . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rax , - 1 2 0 (% rbp ) movq % rbx , - 1 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 8 . LBB 9 5 : movq - 1 3 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 9 5 : jmp . L 1 0 9 . L 1 0 8 : . LBB 9 6 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . circularbuffer . c 1 . 0 . 1 . 1 go . circularbuffer . CircularBuffer . 2 . go . circularbuffer . t 2 . 0 . 1 . 1 testing . T . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 9 : . LBE 9 6 : movq - 1 3 6 (% rbp ), % rbx testq % rbx , % rbx jne . L 1 1 0 call runtime . panicgonil @ PLT . L 1 1 0 : leaq type .. struct . 4 . 4 x . 5 fn . 0 func . 8 . 9 . 8 . 9 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 6 (% rbp ) movq % rbx , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 1 . LBB 9 7 : movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 9 7 : jmp . L 1 1 2 . L 1 1 1 : . LBB 9 8 : movq - 8 8 (% rbp ), % rax movq % rax , % rdx movq - 9 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 1 2 : . LBE 9 8 : movq - 9 6 (% rbp ), % rax leaq go . circularbuffer . go . circularbuffer .. thunk 2 (% rip ), % rdx movq % rax , % rsi movq % rdx , % rdi call __go_go @ PLT . LBE 9 4 : leaq int .. d (% rip ), % rax movq % rax , - 1 9 2 (% rbp ) leaq go .. C 1 1 3 (% rip ), % rdi movq % rdi , - 1 8 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq (% rax ), % rax movq - 1 9 2 (% rbp ), % rcx movq - 1 8 4 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx movq % rax , % rdi call go . circularbuffer . CircularBuffer . NBPush leaq int .. d (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) leaq go .. C 1 1 4 (% rip ), % rax movq % rax , - 1 6 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq (% rax ), % rax movq - 1 7 6 (% rbp ), % rcx movq - 1 6 8 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx movq % rax , % rdi call go . circularbuffer . CircularBuffer . NBPush leaq int .. d (% rip ), % r 1 4 leaq go .. C 1 1 5 (% rip ), % r 1 5 movq - 6 4 (% rbp ), % rax movq (% rax ), % rax movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % rbx , % rdx movq % rax , % rdi call go . circularbuffer . CircularBuffer . NBPush leaq int .. d (% rip ), % r 1 2 leaq go .. C 1 1 6 (% rip ), % r 1 3 movq - 6 4 (% rbp ), % rax movq (% rax ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx movq % rax , % rdi call go . circularbuffer . CircularBuffer . NBPush . LBE 9 1 : addq $ 1 6 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 7 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 3 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 3 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : cmpq $- 1 , - 3 2 (% rbp ) je . L 2 cmpq $ 0 , - 3 2 (% rbp ) jne . L 3 call runtime . panicdivide @ PLT . L 3 : movq - 2 4 (% rbp ), % rax cqto idivq - 3 2 (% rbp ) movq % rdx , % rax testq % rax , % rax sete % al jmp . L 4 . L 2 : movl $ 1 , % eax . L 4 : testb % al , % al je . L 5 . LBB 4 : . LBB 5 : cmpq $- 1 , - 3 2 (% rbp ) jne . L 6 movq - 2 4 (% rbp ), % rax negq % rax jmp . L 7 . L 6 : cmpq $ 0 , - 3 2 (% rbp ) jne . L 8 call runtime . panicdivide @ PLT . L 8 : movq - 2 4 (% rbp ), % rax cqto idivq - 3 2 (% rbp ) . L 7 : movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 9 . L 5 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : cmpq $- 1 , - 3 2 (% rbp ) jne . L 1 0 movl $ 1 , % eax subq - 2 4 (% rbp ), % rax jmp . L 1 1 . L 1 0 : cmpq $ 0 , - 3 2 (% rbp ) jne . L 1 2 call runtime . panicdivide @ PLT . L 1 2 : movq - 2 4 (% rbp ), % rax cqto idivq - 3 2 (% rbp ) addq $ 1 , % rax . L 1 1 : movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 9 : . LBE 6 : . LBE 2 : leave ret
. LFB 3 : cmpq % fs : 1 1 2 , % rsp jnb . L 6 1 movl $ 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 : ret . L 6 1 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq % rdi , - 5 6 (% rbp ) movq % rsi , - 6 4 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 4 2 : . LBB 4 3 : . LBB 4 4 : . LBB 4 5 : cmpq $ 0 , - 5 6 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 3 8 . LBB 4 6 : movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax sete % al . L 3 8 : . LBE 4 6 : . LBE 4 5 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 3 9 . LBB 4 7 : cmpq $ 1 , - 6 4 (% rbp ) setle % al . L 3 9 : . LBE 4 7 : . LBE 4 4 : testb % al , % al je . L 4 0 . LBB 4 8 : . LBB 4 9 : movq - 5 6 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 5 4 . L 4 0 : . LBE 4 9 : . LBE 4 8 : . LBE 4 3 : leaq go . reversenodesinkgroup . ListNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 (% rbp ) movq $ 0 , - 3 2 (% rbp ) movq $ 0 , - 2 4 (% rbp ) leaq - 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 4 0 (% rbp ), % rax addq $ 8 , % rax movq - 5 6 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 4 2 . LBB 5 0 : movq % rdx , (% rax ) jmp . L 4 3 . L 4 2 : . LBE 5 0 : . LBB 5 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 4 3 : . LBE 5 1 : movq - 4 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 4 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . LBB 5 2 : . LBB 5 3 : jmp . L 4 4 . L 5 8 : . LBB 5 4 : nop . LBE 5 4 : . LBB 5 5 : movq - 4 8 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 8 (% rbp ) subq $ 1 , - 6 4 (% rbp ) . L 4 4 : . LBE 5 5 : . LBB 5 6 : movq - 4 8 (% rbp ), % rax testq % rax , % rax setne % al testb % al , % al je . L 4 5 . LBB 5 7 : cmpq $ 0 , - 6 4 (% rbp ) setne % al . L 4 5 : . LBE 5 7 : . LBE 5 6 : testb % al , % al jne . L 5 8 . LBE 5 3 : . LBE 5 2 : . LBB 5 8 : . LBB 5 9 : jmp . L 4 8 . L 6 0 : . LBB 6 0 : nop . LBE 6 0 : . LBB 6 1 : leaq - 4 8 (% rbp ), % rdx leaq - 4 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . reversenodesinkgroup . reverse movq - 1 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBB 6 2 : . LBB 6 3 : jmp . L 4 9 . L 5 9 : . LBB 6 4 : nop . LBE 6 4 : . LBB 6 5 : movq - 4 8 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 8 (% rbp ) subq $ 1 , - 6 4 (% rbp ) . L 4 9 : . LBE 6 5 : . LBB 6 6 : movq - 4 8 (% rbp ), % rax testq % rax , % rax setne % al testb % al , % al je . L 5 0 . LBB 6 7 : cmpq $ 0 , - 6 4 (% rbp ) setne % al . L 5 0 : . LBE 6 7 : . LBE 6 6 : testb % al , % al jne . L 5 9 . L 4 8 : . LBE 6 3 : . LBE 6 2 : . LBE 6 1 : movq - 4 8 (% rbp ), % rax testq % rax , % rax jne . L 6 0 . LBE 5 9 : . LBE 5 8 : . LBB 6 8 : movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 5 4 : . LBE 6 8 : . LBE 4 2 : leave ret
. LFB 2 : leaq - 6 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 7 movl $ 6 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 4 7 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 6 4 8 , % rsp movq % rdi , - 6 4 8 (% rbp ) movq $ 0 , - 9 6 (% rbp ) movq $ 0 , - 8 8 (% rbp ) . LBB 3 2 : leaq . LC 2 9 (% rip ), % rax movq % rax , - 5 7 6 (% rbp ) movq $ 0 , - 5 6 8 (% rbp ) leaq . LC 3 0 (% rip ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 1 , - 5 5 2 (% rbp ) leaq . LC 3 1 (% rip ), % rax movq % rax , - 5 4 4 (% rbp ) movq $ 2 , - 5 3 6 (% rbp ) leaq . LC 1 9 (% rip ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 3 , - 5 2 0 (% rbp ) leaq . LC 2 1 (% rip ), % rax movq % rax , - 5 1 2 (% rbp ) movq $ 2 , - 5 0 4 (% rbp ) leaq . LC 3 2 (% rip ), % rax movq % rax , - 4 9 6 (% rbp ) movq $ 1 , - 4 8 8 (% rbp ) leaq . LC 3 3 (% rip ), % rax movq % rax , - 4 8 0 (% rbp ) movq $ 2 , - 4 7 2 (% rbp ) leaq . LC 3 4 (% rip ), % rax movq % rax , - 4 6 4 (% rbp ) movq $ 3 , - 4 5 6 (% rbp ) leaq . LC 3 5 (% rip ), % rax movq % rax , - 4 4 8 (% rbp ) movq $ 4 , - 4 4 0 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 4 3 2 (% rbp ) movq $ 2 , - 4 2 4 (% rbp ) leaq . LC 2 9 (% rip ), % rax movq % rax , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) leaq . LC 3 6 (% rip ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 1 , - 3 9 2 (% rbp ) leaq . LC 3 7 (% rip ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 2 , - 3 7 6 (% rbp ) leaq . LC 3 8 (% rip ), % rax movq % rax , - 3 6 8 (% rbp ) movq $ 3 , - 3 6 0 (% rbp ) leaq . LC 3 9 (% rip ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 2 , - 3 4 4 (% rbp ) leaq . LC 4 0 (% rip ), % rax movq % rax , - 3 3 6 (% rbp ) movq $ 1 , - 3 2 8 (% rbp ) leaq . LC 4 1 (% rip ), % rax movq % rax , - 3 2 0 (% rbp ) movq $ 2 , - 3 1 2 (% rbp ) leaq . LC 4 2 (% rip ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 3 , - 2 9 6 (% rbp ) leaq . LC 4 3 (% rip ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 4 , - 2 8 0 (% rbp ) leaq . LC 4 4 (% rip ), % rax movq % rax , - 2 7 2 (% rbp ) movq $ 2 , - 2 6 4 (% rbp ) leaq . LC 2 9 (% rip ), % rax movq % rax , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) leaq . LC 4 5 (% rip ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 , - 2 3 2 (% rbp ) leaq . LC 4 6 (% rip ), % rax movq % rax , - 2 2 4 (% rbp ) movq $ 2 , - 2 1 6 (% rbp ) leaq . LC 4 7 (% rip ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 3 , - 2 0 0 (% rbp ) leaq . LC 4 8 (% rip ), % rax movq % rax , - 1 9 2 (% rbp ) movq $ 2 , - 1 8 4 (% rbp ) leaq . LC 4 9 (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) leaq . LC 5 0 (% rip ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 2 , - 1 5 2 (% rbp ) leaq . LC 5 1 (% rip ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 3 , - 1 3 6 (% rbp ) leaq . LC 5 2 (% rip ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 4 , - 1 2 0 (% rbp ) leaq . LC 5 3 (% rip ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 2 , - 1 0 4 (% rbp ) leaq . LC 2 9 (% rip ), % rax movq % rax , - 6 4 0 (% rbp ) movq $ 0 , - 6 3 2 (% rbp ) leaq . LC 5 4 (% rip ), % rax movq % rax , - 6 2 4 (% rbp ) movq $ 1 , - 6 1 6 (% rbp ) leaq . LC 5 5 (% rip ), % rax movq % rax , - 6 0 8 (% rbp ) movq $ 2 , - 6 0 0 (% rbp ) leaq . LC 5 6 (% rip ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 3 , - 5 8 4 (% rbp ) . LBB 3 3 : movq - 6 4 8 (% rbp ), % rcx movabsq $ 2 3 6 1 1 8 3 2 4 1 4 3 4 8 2 2 6 0 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 7 , % rax sarq $ 6 3 , % rcx movq % rcx , % rdx subq % rdx , % rax movq % rax , % r 9 testq % r 9 , % r 9 js . L 3 1 cmpq $ 3 , % r 9 jle . L 4 3 . L 3 1 : movl $ 4 , % esi movq % r 9 , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq - 6 4 8 (% rbp ), % rsi movabsq $ 2 3 6 1 1 8 3 2 4 1 4 3 4 8 2 2 6 0 7 , % rdx movq % rsi , % rax imulq % rdx movq % rdx , % rax sarq $ 7 , % rax movq % rsi , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rcx imulq $ 1 0 0 0 , % rcx , % rax subq % rax , % rsi movq % rsi , % rcx movabsq $- 6 6 4 0 8 2 7 8 6 6 5 3 5 4 3 8 5 8 1 , % rdx movq % rcx , % rax imulq % rdx leaq (% rdx ,% rcx ), % rax sarq $ 6 , % rax sarq $ 6 3 , % rcx movq % rcx , % rdx subq % rdx , % rax movq % rax , % r 8 testq % r 8 , % r 8 js . L 3 3 cmpq $ 9 , % r 8 jle . L 4 4 . L 3 3 : movl $ 1 0 , % esi movq % r 8 , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq - 6 4 8 (% rbp ), % rsi movabsq $ 2 3 6 1 1 8 3 2 4 1 4 3 4 8 2 2 6 0 7 , % rdx movq % rsi , % rax imulq % rdx movq % rdx , % rax sarq $ 7 , % rax movq % rsi , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rcx imulq $ 1 0 0 0 , % rcx , % rax subq % rax , % rsi movq % rsi , % rcx movabsq $- 6 6 4 0 8 2 7 8 6 6 5 3 5 4 3 8 5 8 1 , % rdx movq % rcx , % rax imulq % rdx leaq (% rdx ,% rcx ), % rax sarq $ 6 , % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rsi movq % rsi , % rax salq $ 2 , % rax addq % rsi , % rax leaq 0 (,% rax , 4 ), % rdx addq % rdx , % rax salq $ 2 , % rax movq % rcx , % rsi subq % rax , % rsi movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rsi , % rax imulq % rdx movq % rdx , % rax sarq $ 2 , % rax sarq $ 6 3 , % rsi movq % rsi , % rdx subq % rdx , % rax movq % rax , % rdi testq % rdi , % rdi js . L 3 5 cmpq $ 9 , % rdi jle . L 4 5 . L 3 5 : movl $ 1 0 , % esi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 6 4 8 (% rbp ), % rcx movabsq $ 2 3 6 1 1 8 3 2 4 1 4 3 4 8 2 2 6 0 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 7 , % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rsi imulq $ 1 0 0 0 , % rsi , % rax movq % rcx , % rsi subq % rax , % rsi movabsq $- 6 6 4 0 8 2 7 8 6 6 5 3 5 4 3 8 5 8 1 , % rdx movq % rsi , % rax imulq % rdx leaq (% rdx ,% rsi ), % rax sarq $ 6 , % rax movq % rsi , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rcx movq % rcx , % rax salq $ 2 , % rax addq % rcx , % rax leaq 0 (,% rax , 4 ), % rdx addq % rdx , % rax salq $ 2 , % rax movq % rsi , % rcx subq % rax , % rcx movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 2 , % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rdx salq $ 2 , % rdx addq % rax , % rdx leaq (% rdx ,% rdx ), % rax movq % rax , % rdx movq % rcx , % rax subq % rdx , % rax testq % rax , % rax js . L 3 7 cmpq $ 9 , % rax jle . L 4 6 . L 3 7 : movl $ 1 0 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq % r 9 , % rdx salq $ 4 , % rdx leaq - 1 6 (% rbp ), % rbx addq % rbx , % rdx subq $ 6 2 4 , % rdx movq (% rdx ), % rcx movq 8 (% rdx ), % rbx movq % rcx , - 8 0 (% rbp ) movq % rbx , - 7 2 (% rbp ) movq % r 8 , % rdx salq $ 4 , % rdx leaq - 1 6 (% rbp ), % rbx addq % rbx , % rdx subq $ 2 4 0 , % rdx movq (% rdx ), % rcx movq 8 (% rdx ), % rbx movq % rcx , - 6 4 (% rbp ) movq % rbx , - 5 6 (% rbp ) salq $ 4 , % rdi movq % rdi , % rdx leaq - 1 6 (% rbp ), % rbx addq % rbx , % rdx subq $ 4 0 0 , % rdx movq (% rdx ), % rcx movq 8 (% rdx ), % rbx movq % rcx , - 4 8 (% rbp ) movq % rbx , - 4 0 (% rbp ) salq $ 4 , % rax leaq - 1 6 (% rbp ), % rbx addq % rbx , % rax subq $ 5 6 0 , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) leaq - 8 0 (% rbp ), % rax movl $ 4 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx . LBE 3 3 : . LBE 3 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 1 : leaq - 4 0 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 8 4 movl $ 4 0 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 8 4 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 3 9 2 , % rsp movq % rdi , - 3 9 2 (% rbp ) movq $ 0 , - 7 2 (% rbp ) . LBB 2 0 : movq 2 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 1 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 8 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 8 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 1 : movq $ 0 , - 9 6 (% rbp ) . LBB 2 2 : . LBB 2 3 : . LBB 2 4 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 7 6 (% rbp ), % r 8 movl $ 0 , % ecx . LBE 2 4 : jmp . L 1 9 . L 8 0 : . LBB 2 5 : nop . LBE 2 5 : . LBB 2 6 : movq % rcx , - 9 6 (% rbp ) . LBB 2 7 : . LBB 2 8 : movq $ 1 , - 3 2 (% rbp ) . LBB 2 9 : jmp . L 2 0 . L 7 9 : . LBB 3 0 : nop . LBE 3 0 : . LBB 3 1 : . LBB 3 2 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx testq % rax , % rax js . L 2 1 cmpq % rdx , % rax jl . L 6 2 . L 2 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 2 : movq - 3 5 2 (% rbp ), % rsi movq % rax , % rdi movq % rdi , % rdx addq % rdx , % rdx addq % rdi , % rdx salq $ 3 , % rdx addq % rsi , % rdx movq (% rdx ), % rsi movq 8 (% rdx ), % rdi movq % rsi , - 3 2 0 (% rbp ) movq % rdi , - 3 1 2 (% rbp ) movq 1 6 (% rdx ), % rdx movq % rdx , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 2 3 cmpq % rdx , - 3 2 (% rbp ) jl . L 6 3 . L 2 3 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 3 : movq - 3 4 4 (% rbp ), % rdx testq % rax , % rax js . L 2 5 cmpq % rdx , % rax jl . L 6 4 . L 2 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 4 : movq - 3 5 2 (% rbp ), % rdx movq % rax , % rsi movq % rsi , % rax addq % rax , % rax addq % rsi , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rsi movq (% rsi ), % rax movq 8 (% rsi ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 1 6 (% rsi ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 7 cmpq % rax , - 3 2 (% rbp ) jl . L 6 5 . L 2 7 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 2 9 cmpq % rax , - 9 6 (% rbp ) jl . L 6 6 . L 2 9 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 6 : movq 1 6 (% rbp ), % rsi movq - 9 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rsi movq (% rsi ), % rax movq 8 (% rsi ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 (% rsi ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq - 2 4 8 (% rbp ), % rdx testq % rax , % rax js . L 3 1 cmpq % rdx , % rax jl . L 6 7 . L 3 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 7 : movq - 2 8 8 (% rbp ), % rsi movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rsi , % rdx movq (% rdx ), % rsi movq - 2 5 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 3 2 0 (% rbp ), % rdi movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdi , % rax addq % rsi , % rdx movq % rdx , (% rax ) . LBE 3 2 : . LBE 3 1 : . LBB 3 3 : addq $ 1 , - 3 2 (% rbp ) . L 2 0 : . LBE 3 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 3 3 cmpq % rax , - 9 6 (% rbp ) jl . L 6 8 . L 3 3 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 8 : movq 1 6 (% rbp ), % rsi movq - 9 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rsi , % rax movq 8 (% rax ), % rax cmpq % rax , - 3 2 (% rbp ) jl . L 7 9 . LBE 2 9 : . LBE 2 8 : . LBE 2 7 : . LBE 2 6 : . LBB 3 4 : addq $ 1 , % rcx . L 1 9 : . LBE 3 4 : cmpq % r 8 , % rcx jl . L 8 0 . LBE 2 3 : . LBE 2 2 : . LBE 2 1 : . LBB 3 5 : movq $ 0 , - 4 0 (% rbp ) . LBB 3 6 : jmp . L 3 9 . L 8 3 : . LBB 3 7 : nop . LBE 3 7 : . LBB 3 8 : . LBB 3 9 : movq - 4 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . LBB 4 0 : jmp . L 4 0 . L 8 2 : . LBB 4 1 : nop . LBE 4 1 : . LBB 4 2 : movq - 8 0 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 1 0 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 4 3 : movq $ 0 , - 2 3 2 (% rbp ) movl $ 1 , % ebx leaq - 2 3 2 (% rbp ), % rax movq (% rax ), % rdx movq - 1 0 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % rbx , (% rax ) . LBE 4 3 : . LBB 4 4 : movq $ 0 , - 6 4 (% rbp ) . LBB 4 5 : jmp . L 4 1 . L 8 1 : . LBB 4 6 : nop . LBE 4 6 : . LBB 4 7 : . LBB 4 8 : cmpq $ 0 , - 4 0 (% rbp ) jle . L 4 2 . LBB 4 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 4 3 cmpq % rax , - 6 4 (% rbp ) jl . L 7 1 . L 4 3 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 1 : movq 1 6 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 4 5 cmpq % rax , - 4 8 (% rbp ) jl . L 7 2 . L 4 5 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 4 7 cmpq % rax , - 6 4 (% rbp ) jl . L 7 3 . L 4 7 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 3 : movq 1 6 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq - 1 8 4 (% rbp ), % rdx testq % rax , % rax js . L 4 9 cmpq % rdx , % rax jl . L 7 4 . L 4 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 4 : movq - 2 2 4 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq - 1 9 2 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rcx movq % rdx , % rax subq % rcx , % rax addq % rax , - 5 6 (% rbp ) . LBE 4 9 : jmp . L 5 1 . L 4 2 : . LBB 5 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 5 2 cmpq % rax , - 6 4 (% rbp ) jl . L 7 5 . L 5 2 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 5 : movq 1 6 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 5 4 cmpq % rax , - 4 8 (% rbp ) jge . L 5 4 movq - 1 6 0 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq % rax , - 5 6 (% rbp ) jmp . L 5 1 . L 5 4 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : . LBE 5 0 : . LBE 4 8 : movq - 5 6 (% rbp ), % rax subq - 3 9 2 (% rbp ), % rax movq % rax , - 1 2 0 (% rbp ) leaq - 1 2 0 (% rbp ), % rax movq (% rax ), % rdx movq - 1 0 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax addq % rax , - 2 4 (% rbp ) . LBB 5 1 : movq - 5 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq (% rax ), % rdx movq - 1 0 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % rbx leaq - 1 2 8 (% rbp ), % rax movq (% rax ), % rdx movq - 1 0 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % rbx , (% rax ) . LBE 5 1 : . LBE 4 7 : . LBB 5 2 : addq $ 1 , - 6 4 (% rbp ) . L 4 1 : . LBE 5 2 : movq - 6 4 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jl . L 8 1 . LBE 4 5 : . LBE 4 4 : . LBE 4 2 : . LBB 5 3 : addq $ 1 , - 4 8 (% rbp ) . L 4 0 : . LBE 5 3 : movq - 4 8 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax jl . L 8 2 . LBE 4 0 : . LBE 3 9 : . LBE 3 8 : . LBB 5 4 : addq $ 1 , - 4 0 (% rbp ) . L 3 9 : . LBE 5 4 : movq - 4 0 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax jl . L 8 3 . LBE 3 6 : . LBE 3 5 : . LBB 5 5 : movq - 2 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax . LBE 5 5 : . LBE 2 0 : movq - 8 (% rbp ), % rbx leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 5 7 6 movl $ 2 0 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 5 9 : ret . L 5 7 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 6 0 , % rsp movq % rdi , - 1 6 8 (% rbp ) movq % rsi , - 1 7 6 (% rbp ) movb % dl , - 1 7 7 (% rbp ) leaq type ... 1 testing . T (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 6 9 . LBB 6 2 0 : movq - 1 0 4 (% rbp ), % rax movq - 9 6 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 6 2 0 : jmp . L 5 7 0 . L 5 6 9 : . LBB 6 2 1 : movq - 9 6 (% rbp ), % rax movq % rax , % rdx movq - 1 0 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 5 7 0 : . LBE 6 2 1 : movq - 1 0 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) leaq type ... 1 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 7 1 . LBB 6 2 2 : movq - 8 8 (% rbp ), % rax movq - 8 0 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 6 2 2 : jmp . L 5 7 2 . L 5 7 1 : . LBB 6 2 3 : movq - 8 0 (% rbp ), % rax movq % rax , % rdx movq - 8 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 5 7 2 : . LBE 6 2 3 : movq - 8 8 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax movzbl - 1 7 7 (% rbp ), % edx movb % dl , (% rax ) movq - 7 2 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 6 2 4 : . LBB 6 2 5 : leaq go . binaryTree . checkBst .. func 1 (% rip ), % r 1 4 movq - 4 0 (% rbp ), % r 1 3 movq - 5 6 (% rbp ), % r 1 2 movq - 4 8 (% rbp ), % rbx leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . binaryTree . t 1 . 0 . 1 . 1 testing . T . 2 . go . binaryTree . debug 2 . 0 . 1 bool . 2 . go . binaryTree . nodeCnt 3 . 0 . 1 . 1 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq % r 1 4 , - 1 4 4 (% rbp ) movq % r 1 3 , - 1 3 6 (% rbp ) movq % r 1 2 , - 1 2 8 (% rbp ) movq % rbx , - 1 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 7 3 . LBB 6 2 6 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 6 2 6 : jmp . L 5 7 4 . L 5 7 3 : . LBB 6 2 7 : movq - 1 5 2 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . binaryTree . t 1 . 0 . 1 . 1 testing . T . 2 . go . binaryTree . debug 2 . 0 . 1 bool . 2 . go . binaryTree . nodeCnt 3 . 0 . 1 . 1 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 7 4 : . LBE 6 2 7 : movq - 1 5 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax . LBE 6 2 5 : . LBE 6 2 4 : addq $ 1 6 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 1 : leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 2 movl $ 2 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 : ret . L 1 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 4 8 , % rsp . LBB 8 : leaq go . tempconv . Celsius .. d (% rip ), % rcx leaq go .. C 3 2 (% rip ), % rbx movq % rcx , - 2 4 0 (% rbp ) movq % rbx , - 2 3 2 (% rbp ) leaq - 2 4 0 (% rbp ), % rcx movq % rcx , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq . LC 2 1 (% rip ), % rax movl $ 3 , % edx leaq - 1 4 4 (% rbp ), % rcx movq % rax , % rsi movq % rdx , % rdi movq % rdx , % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdx movq % rcx , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq . LC 2 2 (% rip ), % rax movq % rax , % xmm 0 call go . tempconv . CToF movq % xmm 0 , % rax movq % rax , - 5 6 (% rbp ) pxor % xmm 0 , % xmm 0 call go . tempconv . CToF movsd % xmm 0 , - 2 8 0 (% rbp ) leaq go . tempconv . Fahrenheit .. d (% rip ), % r 1 4 leaq go . tempconv . Fahrenheit .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 2 0 0 (% rbp ), % rax movsd - 5 6 (% rbp ), % xmm 0 subsd - 2 8 0 (% rbp ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 2 0 0 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 1 9 2 (% rbp ) movq % r 1 5 , - 1 8 4 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) . LBE 8 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 6 4 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 0 movl $ 6 4 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 0 0 , % rsp movq % rdi , - 6 3 2 (% rbp ) leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 0 (% rbp ) leaq . LC 2 3 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 3 6 8 (% rbp ) movq % r 1 5 , - 3 6 0 (% rbp ) leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 9 2 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 8 4 (% rbp ) movq - 5 8 4 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq - 5 8 4 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 4 , - 5 5 2 (% rbp ) movq $ 4 , - 5 4 4 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 7 6 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 5 3 6 (% rbp ) movq $ 4 , - 5 2 8 (% rbp ) movq $ 4 , - 5 2 0 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 8 (% rbp ) movq - 5 6 8 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq - 5 6 8 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) movq $ 4 , - 5 0 4 (% rbp ) movq $ 4 , - 4 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 5 9 2 (% rbp ), % rax movq - 5 6 0 (% rbp ), % rcx movq - 5 5 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 5 4 4 (% rbp ), % rcx movq - 5 3 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 5 2 8 (% rbp ), % rcx movq - 5 2 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 5 1 2 (% rbp ), % rcx movq - 5 0 4 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 4 9 6 (% rbp ), % rdx movq % rdx , 6 4 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 5 9 2 (% rbp ), % rax leaq - 5 6 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 5 9 2 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 3 , - 3 4 4 (% rbp ) movq $ 3 , - 3 3 6 (% rbp ) movq $ 1 5 , - 3 2 8 (% rbp ) leaq . LC 2 3 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 2 0 (% rbp ) movq % r 1 3 , - 3 1 2 (% rbp ) leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 0 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 7 2 (% rbp ) movq - 4 7 2 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq - 4 7 2 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq $ 3 , - 4 4 0 (% rbp ) movq $ 3 , - 4 3 2 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 6 4 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 4 2 4 (% rbp ) movq $ 3 , - 4 1 6 (% rbp ) movq $ 3 , - 4 0 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 5 6 (% rbp ) movq - 4 5 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq - 4 5 6 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 3 , - 3 9 2 (% rbp ) movq $ 3 , - 3 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 4 8 0 (% rbp ), % rax movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 3 8 4 (% rbp ), % rdx movq % rdx , 6 4 (% rax ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 4 8 0 (% rbp ), % rax leaq - 4 4 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 4 8 0 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 3 , - 2 9 6 (% rbp ) movq $ 3 , - 2 8 8 (% rbp ) movq $ 7 , - 2 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 6 : movq - 6 0 0 (% rbp ), % rax movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) . LBE 6 : jmp . L 7 . L 6 : . LBB 7 : movq - 6 0 0 (% rbp ), % rax leaq - 3 6 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 7 : movq - 6 0 0 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) movq $ 2 , - 6 1 6 (% rbp ) movq $ 2 , - 6 0 8 (% rbp ) . LBB 8 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 9 : . LBB 1 0 : . LBB 1 1 : movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 1 1 : jmp . L 8 . L 1 9 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 9 cmpq % rax , % rbx jge . L 9 movq - 2 2 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . LBE 1 4 : . LBB 1 5 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 1 0 jmp . L 1 7 . L 9 : . LBE 1 5 : . LBB 1 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : . LBE 1 8 : . LBB 1 9 : . LBB 1 6 : movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 1 2 . L 1 7 : . LBE 1 6 : . LBB 1 7 : leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 : . LBE 1 7 : . LBE 1 9 : . LBB 2 0 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 2 4 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 3 . LBB 2 1 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 1 : jmp . L 1 4 . L 1 3 : . LBB 2 2 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 4 : . LBE 2 2 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 6 3 2 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 2 0 : . LBE 1 3 : . LBB 2 3 : addq $ 1 , % rbx . L 8 : . LBE 2 3 : cmpq % r 1 3 , % rbx jl . L 1 9 . LBE 1 0 : . LBE 9 : . LBE 8 : addq $ 6 0 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 9 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 7 movl $ 3 9 2 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 6 0 , % rsp movq % rdi , - 3 7 6 (% rbp ) movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) . LBB 2 : movl $ 0 , % r 8 d movl $ 1 6 , % ecx movl $ 2 4 , % edx movl $ 0 , % esi leaq type .. map . 6 string . 7 int (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 7 2 (% rbp ) movl $ 0 , % r 8 d movl $ 1 6 , % ecx movl $ 2 4 , % edx movl $ 0 , % esi leaq type .. map . 6 string . 7 int (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 8 0 (% rbp ) movq $ 0 , - 3 5 2 (% rbp ) movq $ 0 , - 3 4 4 (% rbp ) movq $ 0 , - 3 3 6 (% rbp ) . LBB 3 : movq $ 0 , - 4 8 (% rbp ) . LBB 4 : jmp . L 2 . L 4 3 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 4 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jl . L 3 5 . L 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 2 8 8 (% rbp ), % rdx salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq - 4 8 (% rbp ), % rbx movq - 7 2 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq % rbx , (% rax ) . LBE 7 : . LBE 6 : . LBB 8 : addq $ 1 , - 4 8 (% rbp ) . L 2 : . LBE 8 : movq 2 4 (% rbp ), % rax cmpq % rax , - 4 8 (% rbp ) jl . L 4 3 . LBE 4 : . LBE 3 : . LBB 9 : movq $ 0 , - 5 6 (% rbp ) . LBB 1 0 : jmp . L 7 . L 4 4 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : . LBB 1 3 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx testq % rax , % rax js . L 8 cmpq % rdx , % rax jl . L 3 7 . L 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 2 5 6 (% rbp ), % rdx salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq - 5 6 (% rbp ), % rbx movq - 8 0 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq % rbx , (% rax ) . LBE 1 3 : . LBE 1 2 : . LBB 1 4 : addq $ 1 , - 5 6 (% rbp ) . L 7 : . LBE 1 4 : movq 4 8 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jl . L 4 4 . LBE 1 0 : . LBE 9 : movq 2 4 (% rbp ), % rdx movq 4 8 (% rbp ), % rax addq % rdx , % rax movq % rax , - 4 0 (% rbp ) . LBB 1 5 : movq $ 0 , - 6 4 (% rbp ) . LBB 1 6 : jmp . L 1 2 . L 4 6 : . LBB 1 7 : nop . LBE 1 7 : . LBB 1 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 3 cmpq % rax , - 6 4 (% rbp ) jl . L 3 9 . L 1 3 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) . LBB 1 9 : movb $ 0 , - 8 1 (% rbp ) . LBB 2 0 : movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq - 8 0 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 2 _faststr @ PLT movl % edx , % eax movb % al , - 8 1 (% rbp ) . LBE 2 0 : cmpb $ 0 , - 8 1 (% rbp ) je . L 3 1 . LBB 2 1 : movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq - 8 0 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq (% rax ), % rdx movq - 6 4 (% rbp ), % rax addq % rdx , % rax movq % rax , - 9 6 (% rbp ) . LBB 2 2 : movq - 9 6 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jge . L 1 6 . LBB 2 3 : movq - 9 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 3 3 6 (% rbp ), % rax testq % rax , % rax jns . L 1 7 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceAcap @ PLT . L 1 7 : movq - 3 5 2 (% rbp ), % rdx movq - 3 3 6 (% rbp ), % rax movq % rdx , - 3 5 2 (% rbp ) movq $ 0 , - 3 4 4 (% rbp ) movq % rax , - 3 3 6 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rbx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 8 cmpq % rax , - 6 4 (% rbp ) jl . L 4 0 . L 1 8 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 movq 8 (% rax ), % r 1 3 leaq 1 (% rbx ), % rax movq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 0 . LBB 2 4 : movq - 2 2 4 (% rbp ), % rsi leaq - 1 6 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) . LBE 2 4 : jmp . L 2 1 . L 2 0 : . LBB 2 5 : movq - 2 2 4 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rdx movq % rcx , - 3 5 2 (% rbp ) movq % rax , - 3 4 4 (% rbp ) movq % rdx , - 3 3 6 (% rbp ) . L 2 1 : . LBE 2 5 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq % r 1 3 , % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 2 . LBB 2 6 : movq % r 1 2 , % rdx movq % rdx , (% rax ) . LBE 2 6 : jmp . L 3 1 . L 2 2 : . LBB 2 7 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . LBE 2 7 : jmp . L 3 1 . L 1 6 : . LBE 2 3 : . LBE 2 2 : . LBB 2 8 : movq - 9 6 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jne . L 3 1 . LBB 2 9 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rbx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 2 5 cmpq % rax , - 6 4 (% rbp ) jl . L 4 1 . L 2 5 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 movq 8 (% rax ), % r 1 3 leaq 1 (% rbx ), % rax movq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 7 . LBB 3 0 : movq - 1 9 2 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) . LBE 3 0 : jmp . L 2 8 . L 2 7 : . LBB 3 1 : movq - 1 9 2 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rdx movq % rcx , - 3 5 2 (% rbp ) movq % rax , - 3 4 4 (% rbp ) movq % rdx , - 3 3 6 (% rbp ) . L 2 8 : . LBE 3 1 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq % r 1 3 , % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 9 . LBB 3 2 : movq % r 1 2 , % rdx movq % rdx , (% rax ) . LBE 3 2 : jmp . L 4 5 . L 2 9 : . LBB 3 3 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 4 5 : . LBE 3 3 : nop . L 3 1 : . LBE 2 9 : . LBE 2 8 : . LBE 2 1 : . LBE 1 9 : . LBE 1 8 : . LBB 3 4 : addq $ 1 , - 6 4 (% rbp ) . L 1 2 : . LBE 3 4 : movq 2 4 (% rbp ), % rax cmpq % rax , - 6 4 (% rbp ) jl . L 4 6 . LBE 1 6 : . LBE 1 5 : . LBB 3 5 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 7 6 (% rbp ), % rcx movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 0 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 5 : . LBE 2 : movq - 3 7 6 (% rbp ), % rax addq $ 3 6 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 6 4 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 movl $ 6 4 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 0 0 , % rsp call main . Constructor movl % eax , % ecx movq % rdx , % rax movl % ecx , - 5 1 2 (% rbp ) movq % rax , - 5 0 4 (% rbp ) leaq . LC 3 4 (% rip ), % r 1 2 movl $ 5 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx leaq - 5 1 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call main . Trie . Insert leaq . LC 3 4 (% rip ), % r 1 4 movl $ 5 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx leaq - 5 1 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call main . Trie . Search movl % eax , % ebx leaq bool .. d (% rip ), % r 1 5 movq % r 1 5 , - 6 4 0 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 7 2 (% rbp ) movq - 4 7 2 (% rbp ), % rax movb % bl , (% rax ) movq - 4 7 2 (% rbp ), % rax movq % rax , - 6 3 2 (% rbp ) movdqa - 6 4 0 (% rbp ), % xmm 0 movups % xmm 0 , - 4 6 4 (% rbp ) leaq - 4 6 4 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 1 , - 2 9 6 (% rbp ) movq $ 1 , - 2 8 8 (% rbp ) leaq - 2 7 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 8 8 (% rbp ) pushq - 2 9 6 (% rbp ) pushq - 3 0 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) leaq . LC 3 5 (% rip ), % r 1 4 movq % r 1 4 , - 5 7 6 (% rbp ) movq $ 3 , - 5 6 8 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx leaq - 5 1 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call main . Trie . Search movl % eax , % ebx movq % r 1 5 , - 6 2 4 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 2 4 (% rbp ) movq - 4 2 4 (% rbp ), % rax movb % bl , (% rax ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 6 1 6 (% rbp ) movdqa - 6 2 4 (% rbp ), % xmm 1 movups % xmm 1 , - 4 1 6 (% rbp ) leaq - 4 1 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 , - 2 3 2 (% rbp ) movq $ 1 , - 2 2 4 (% rbp ) leaq - 2 0 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq % r 1 4 , - 5 6 0 (% rbp ) movq $ 3 , - 5 5 2 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx leaq - 5 1 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call main . Trie . StartsWith movl % eax , % ebx movq % r 1 5 , - 6 0 8 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 3 7 6 (% rbp ), % rax movb % bl , (% rax ) movq - 3 7 6 (% rbp ), % rax movq % rax , - 6 0 0 (% rbp ) movdqa - 6 0 8 (% rbp ), % xmm 2 movups % xmm 2 , - 3 6 8 (% rbp ) leaq - 3 6 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq % r 1 4 , - 5 4 4 (% rbp ) movq $ 3 , - 5 3 6 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx leaq - 5 1 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call main . Trie . Insert movq % r 1 4 , - 5 2 8 (% rbp ) movq $ 3 , - 5 2 0 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx leaq - 5 1 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call main . Trie . Search movl % eax , % ebx movq % r 1 5 , - 5 9 2 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movq - 3 2 8 (% rbp ), % rax movb % bl , (% rax ) movq - 3 2 8 (% rbp ), % rax movq % rax , - 5 8 4 (% rbp ) movdqa - 5 9 2 (% rbp ), % xmm 3 movups % xmm 3 , - 3 2 0 (% rbp ) leaq - 3 2 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 4 0 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , % rdi call go . leetcode . maxDepth movq % rax , - 2 4 (% rbp ) movq - 4 0 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , % rdi call go . leetcode . maxDepth movq % rax , - 3 2 (% rbp ) movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) . LBB 6 : movq - 3 2 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax jle . L 4 . LBB 7 : movq - 3 2 (% rbp ), % rax movq % rax , - 8 (% rbp ) . L 4 : . LBE 7 : . LBE 6 : . LBB 8 : movq - 8 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax . L 3 : . LBE 8 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 7 movl $ 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 7 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq % rdi , - 5 6 (% rbp ) movb $ 0 , - 1 7 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 5 6 (% rbp ) jns . L 2 . LBB 4 : . LBB 5 : movb $ 0 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax jmp . L 1 2 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) . LBB 6 : movq $ 0 , - 8 (% rbp ) movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . LBB 7 : jmp . L 4 . L 1 6 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 4 0 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 5 cmpq % rax , - 8 (% rbp ) jl . L 1 3 . L 5 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : movq - 4 0 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 7 cmpq % rax , - 1 6 (% rbp ) jl . L 1 4 . L 7 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : movq - 4 8 (% rbp ), % rdx movq - 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % edx movq - 4 8 (% rbp ), % rcx movq - 1 6 (% rbp ), % rax addq % rcx , % rax movzbl (% rax ), % eax cmpb % al , % dl je . L 9 . LBB 1 1 : . LBB 1 2 : movb $ 0 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax jmp . L 1 2 . L 9 : . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 1 3 : . LBB 1 4 : movq - 8 (% rbp ), % rax leaq 1 (% rax ), % rdx movq - 1 6 (% rbp ), % rax subq $ 1 , % rax movq % rdx , - 8 (% rbp ) movq % rax , - 1 6 (% rbp ) . L 4 : . LBE 1 4 : . LBE 1 3 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jl . L 1 6 . LBE 7 : . LBE 6 : . LBB 1 5 : movb $ 1 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax . L 1 2 : . LBE 1 5 : . LBE 2 : leave ret
. LFB 0 : leaq - 3 6 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 1 movl $ 3 6 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 6 1 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 3 4 4 , % rsp movq % rdi , - 3 4 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 2 : movq - 3 4 4 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 uint 6 4 (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 3 6 (% rbp ) movq % rbx , - 3 2 8 (% rbp ) movq % rbx , - 3 2 0 (% rbp ) . LBB 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 5 7 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 3 4 4 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq uint 6 4 .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 3 2 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 cmpq % rax , - 2 4 (% rbp ) jl . L 4 3 . L 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq - 3 3 6 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 3 0 4 (% rbp ) movq % rbx , - 2 9 6 (% rbp ) movq % rbx , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 2 8 8 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 . LBB 7 : movq - 3 0 4 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 6 . L 5 : . LBE 7 : . LBB 8 : movq - 3 0 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 : . LBE 8 : . LBE 6 : . LBB 9 : addq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 9 : movq - 3 4 4 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 2 4 (% rbp ) jl . L 5 7 . LBE 4 : . LBE 3 : . LBB 1 0 : movq $ 0 , - 3 2 (% rbp ) . LBB 1 1 : jmp . L 9 . L 5 8 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : movq - 3 2 8 (% rbp ), % rax cmpq $ 0 , - 3 4 4 (% rbp ) js . L 1 0 cmpq % rax , - 3 4 4 (% rbp ) jl . L 4 5 . L 1 0 : movq - 3 4 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 3 3 6 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 2 cmpq % rax , - 3 2 (% rbp ) jge . L 1 2 movq - 2 7 2 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 1 , (% rax ) movq - 3 2 8 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) jns . L 1 3 jmp . L 1 4 . L 1 2 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : cmpq % rax , - 3 2 (% rbp ) jl . L 4 6 . L 1 4 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq - 3 3 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax cmpq $ 0 , - 3 4 4 (% rbp ) js . L 1 6 cmpq % rax , - 3 4 4 (% rbp ) jge . L 1 6 movq - 2 4 0 (% rbp ), % rdx movq - 3 4 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 1 , (% rax ) . LBE 1 3 : . LBB 1 4 : addq $ 1 , - 3 2 (% rbp ) jmp . L 9 . L 1 6 : . LBE 1 4 : . LBB 1 5 : movq - 3 4 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 9 : . LBE 1 5 : movq - 3 2 (% rbp ), % rax cmpq - 3 4 4 (% rbp ), % rax jl . L 5 8 . LBE 1 1 : . LBE 1 0 : movq - 3 2 8 (% rbp ), % rax cmpq $ 0 , - 3 4 4 (% rbp ) js . L 1 9 cmpq % rax , - 3 4 4 (% rbp ) jl . L 4 8 . L 1 9 : movq - 3 4 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : movq - 3 3 6 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax cmpq $ 0 , - 3 4 4 (% rbp ) js . L 2 1 cmpq % rax , - 3 4 4 (% rbp ) jge . L 2 1 movq - 2 0 8 (% rbp ), % rdx movq - 3 4 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 0 , (% rax ) . LBB 1 6 : movq - 3 4 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 4 0 (% rbp ) . LBB 1 7 : jmp . L 2 2 . L 2 1 : . LBE 1 7 : . LBE 1 6 : movq - 3 4 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 0 : . LBB 2 7 : . LBB 2 6 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : . LBB 2 0 : movq - 3 4 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 4 8 (% rbp ) . LBB 2 1 : jmp . L 2 3 . L 5 9 : . LBB 2 2 : nop . LBE 2 2 : . LBB 2 3 : movq - 3 2 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 4 cmpq % rax , - 4 0 (% rbp ) jl . L 4 9 . L 2 4 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : movq - 3 3 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 6 cmpq % rax , - 4 8 (% rbp ) jl . L 5 0 . L 2 6 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 0 : movq - 4 0 (% rbp ), % rax addq $ 1 , % rax movq - 3 2 8 (% rbp ), % rdx testq % rax , % rax js . L 2 8 cmpq % rdx , % rax jl . L 5 1 . L 2 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : movq - 3 3 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 3 0 cmpq % rax , - 4 8 (% rbp ) jl . L 5 2 . L 3 0 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : movq - 3 2 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 2 cmpq % rax , - 4 0 (% rbp ) jl . L 5 3 . L 3 2 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 3 : movq - 3 3 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 4 8 (% rbp ), % rax addq $ 1 , % rax movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 3 4 cmpq % rdx , % rax jl . L 5 4 . L 3 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : movq - 1 4 4 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 1 1 2 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 1 7 6 (% rbp ), % rsi movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax addq % rcx , % rdx movq % rdx , (% rax ) . LBE 2 3 : . LBB 2 4 : subq $ 1 , - 4 8 (% rbp ) . L 2 3 : . LBE 2 4 : cmpq $ 0 , - 4 8 (% rbp ) jns . L 5 9 . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBB 2 5 : subq $ 1 , - 4 0 (% rbp ) . L 2 2 : . LBE 2 5 : cmpq $ 0 , - 4 0 (% rbp ) jns . L 6 0 . LBE 2 6 : . LBE 2 7 : . LBB 2 8 : movq - 3 2 8 (% rbp ), % rax testq % rax , % rax jg . L 4 0 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 0 : movq - 3 3 6 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rax testq % rax , % rax jg . L 4 1 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 1 : movq - 8 0 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax . LBE 2 8 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movb $ 0 , - 1 (% rbp ) . LBB 2 : . LBB 3 : movq - 2 4 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . Solution . dfs movb % al , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax . LBE 3 : . LBE 2 : leave ret
. LFB 2 : leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 4 movl $ 2 8 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 3 2 , % rsp movq % rdi , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 2 3 : movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) . LBB 2 4 : . LBB 2 5 : . LBB 2 6 : movq go . day 3 2 7 . testcases (% rip ), % rax movq 8 + go . day 3 2 7 . testcases (% rip ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 + go . day 3 2 7 . testcases (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movl $ 0 , % ebx . LBE 2 6 : jmp . L 2 4 . L 3 3 : . LBB 2 7 : nop . LBE 2 7 : . LBB 2 8 : . LBB 2 9 : movq - 1 8 4 (% rbp ), % rax testq % rbx , % rbx js . L 2 5 cmpq % rax , % rbx jge . L 2 5 movq - 1 9 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) . LBE 2 9 : . LBB 3 0 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) . LBE 3 0 : . LBB 3 1 : . LBB 3 2 : movq - 2 4 8 (% rbp ), % rdx movq - 2 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . day 3 2 7 . MergeBinaryTrees movq % rax , - 6 4 (% rbp ) movq - 2 4 0 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . day 3 2 7 . equal xorl $ 1 , % eax testb % al , % al jne . L 2 6 jmp . L 2 7 . L 2 5 : . LBE 3 2 : . LBE 3 1 : . LBB 3 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : . LBE 3 7 : . LBB 3 8 : . LBB 3 6 : . LBB 3 3 : leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 2 8 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movq % r 1 4 , - 1 1 2 (% rbp ) movq % r 1 5 , - 1 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 8 . LBB 3 4 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 3 4 : jmp . L 2 9 . L 2 8 : . LBB 3 5 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 9 : . LBE 3 5 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 2 movl $ 2 7 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 2 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 2 7 : . LBE 3 3 : . LBE 3 6 : . LBE 3 8 : . LBE 2 8 : . LBB 3 9 : addq $ 1 , % rbx . L 2 4 : . LBE 3 9 : cmpq - 2 7 2 (% rbp ), % rbx jl . L 3 3 . LBE 2 5 : . LBE 2 4 : . LBE 2 3 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 0 movl $ 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movq $- 1 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 8 (% rbp ) movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . LBB 6 : . LBB 7 : jmp . L 4 . L 1 9 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq - 8 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , - 3 2 (% rbp ) . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 5 cmpq % rax , - 3 2 (% rbp ) jl . L 1 5 . L 5 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) jne . L 7 . LBB 1 1 : . LBB 1 2 : movq - 3 2 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 3 . L 7 : . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : . LBB 1 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 8 cmpq % rax , - 3 2 (% rbp ) jl . L 1 6 . L 8 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) jge . L 1 0 . LBB 1 4 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) jmp . L 4 . L 1 0 : . LBE 1 4 : . LBE 1 3 : . LBB 1 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 1 cmpq % rax , - 3 2 (% rbp ) jl . L 1 7 . L 1 1 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) jle . L 4 . LBB 1 6 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 8 (% rbp ) . L 4 : . LBE 1 6 : . LBE 1 5 : . LBE 9 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jle . L 1 9 . LBE 7 : . LBE 6 : . LBB 1 7 : movq $- 1 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 3 : . LBE 1 7 : . LBE 2 : leave ret
leaq - 4 4 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 5 9 movl $ 4 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 1 : ret . L 1 5 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 9 2 , % rsp movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) . LBB 9 2 : leaq . LC 2 (% rip ), % rax movl $ 6 , % edx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call os . Getenv @ PLT movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) . LBB 9 3 : movq - 3 1 2 (% rbp ), % rax testq % rax , % rax jne . L 1 2 7 . LBE 9 3 : leaq . LC 1 6 (% rip ), % r 1 2 movl $ 2 , % r 1 3 d leaq - 1 1 2 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx movq % rax , % rdi call os .. z 2 fexec . LookPath @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) . LBB 9 6 : movq - 3 5 2 (% rbp ), % rax testq % rax , % rax jne . L 1 3 0 jmp . L 1 5 2 . L 1 2 7 : . LBE 9 6 : . LBB 1 0 4 : . LBB 9 4 : . LBB 9 5 : movq - 3 2 0 (% rbp ), % rdx movq - 3 1 2 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . goenv . getStandardGoroot movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx jmp . L 1 5 1 . L 1 5 2 : . LBE 9 5 : . LBE 9 4 : . LBE 1 0 4 : . LBB 1 0 5 : . LBB 9 7 : . LBB 9 8 : leaq - 8 0 (% rbp ), % rax movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call path .. z 2 ffilepath . EvalSymlinks @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rcx , - 3 3 6 (% rbp ) movq % rbx , - 3 2 8 (% rbp ) movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) . LBE 9 8 : . LBB 9 9 : movq - 3 5 2 (% rbp ), % rax testq % rax , % rax jne . L 1 3 0 . LBB 1 0 0 : movq - 3 3 6 (% rbp ), % rdx movq - 3 2 8 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call path .. z 2 ffilepath . Dir @ PLT movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call path .. z 2 ffilepath . Dir @ PLT movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) . LBB 1 0 1 : movq - 4 0 0 (% rbp ), % rdx movq - 3 9 2 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . goenv . isGoroot testb % al , % al je . L 1 3 0 . LBB 1 0 2 : . LBB 1 0 3 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx jmp . L 1 5 1 . L 1 3 0 : . LBE 1 0 3 : . LBE 1 0 2 : . LBE 1 0 1 : . LBE 1 0 0 : . LBE 9 9 : . LBE 9 7 : . LBE 1 0 5 : . LBB 1 0 6 : call runtime . GOROOT @ PLT movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call go . goenv . isGoroot testb % al , % al je . L 1 3 2 . LBB 1 0 7 : . LBB 1 0 8 : call runtime . GOROOT @ PLT movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx jmp . L 1 5 1 . L 1 3 2 : . LBE 1 0 8 : . LBE 1 0 7 : . LBE 1 0 6 : movq $ 0 , - 3 8 4 (% rbp ) movq $ 0 , - 3 7 6 (% rbp ) movq $ 0 , - 3 6 8 (% rbp ) . LBB 1 0 9 : . LBB 1 1 0 : leaq . LC 1 4 (% rip ), % rax movq % rax , - 4 3 2 (% rbp ) movq $ 5 , - 4 2 4 (% rbp ) movq - 4 3 2 (% rbp ), % r 1 2 movq - 4 2 4 (% rbp ), % r 1 3 movq % r 1 3 , % rax cmpq $ 5 , % rax jne . L 1 3 3 movq % r 1 2 , % rdx leaq . LC 1 4 (% rip ), % rax cmpq % rax , % rdx jne . L 1 3 4 movl $ 0 , % eax jmp . L 1 3 6 . L 1 3 4 : movq % r 1 2 , % rax movl $ 5 , % edx leaq . LC 1 4 (% rip ), % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax setne % al jmp . L 1 3 6 . L 1 3 3 : movl $ 1 , % eax . L 1 3 6 : testb % al , % al jne . L 1 5 6 . LBB 1 1 1 : leaq . LC 2 6 (% rip ), % rax movq % rax , - 2 2 4 (% rbp ) movq $ 1 3 , - 2 1 6 (% rbp ) leaq . LC 2 7 (% rip ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 1 1 , - 2 0 0 (% rbp ) leaq . LC 2 8 (% rip ), % rax movq % rax , - 1 9 2 (% rbp ) movq $ 1 7 , - 1 8 4 (% rbp ) leaq - 2 2 4 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 3 , - 3 7 6 (% rbp ) movq $ 3 , - 3 6 8 (% rbp ) . LBE 1 1 1 : jmp . L 1 3 9 . L 1 5 6 : . LBB 1 1 2 : nop . LBE 1 1 2 : movq % r 1 3 , % rax cmpq $ 6 , % rax jne . L 1 4 0 movq % r 1 2 , % rdx leaq . LC 2 9 (% rip ), % rax cmpq % rax , % rdx jne . L 1 4 1 movl $ 0 , % eax jmp . L 1 4 3 . L 1 4 1 : movq % r 1 2 , % rax movl $ 6 , % edx leaq . LC 2 9 (% rip ), % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax setne % al jmp . L 1 4 3 . L 1 4 0 : movl $ 1 , % eax . L 1 4 3 : testb % al , % al jne . L 1 5 7 . LBB 1 1 3 : leaq . LC 2 6 (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 3 , - 1 6 8 (% rbp ) leaq . LC 3 0 (% rip ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 2 5 , - 1 5 2 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 2 , - 3 7 6 (% rbp ) movq $ 2 , - 3 6 8 (% rbp ) . LBE 1 1 3 : jmp . L 1 3 9 . L 1 5 7 : . LBB 1 1 4 : nop . L 1 3 9 : . LBE 1 1 4 : . LBE 1 1 0 : . LBE 1 0 9 : . LBB 1 1 5 : movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) . LBB 1 1 6 : . LBB 1 1 7 : . LBB 1 1 8 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 1 8 : jmp . L 1 4 5 . L 1 5 8 : . LBB 1 1 9 : nop . LBE 1 1 9 : . LBB 1 2 0 : . LBB 1 2 1 : movq - 1 3 6 (% rbp ), % rax testq % rbx , % rbx js . L 1 4 6 cmpq % rax , % rbx jge . L 1 4 6 movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 1 2 1 : . LBB 1 2 2 : movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) . LBE 1 2 2 : . LBB 1 2 3 : . LBB 1 2 4 : movq - 4 1 6 (% rbp ), % rdx movq - 4 0 8 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . goenv . isGoroot testb % al , % al jne . L 1 4 7 jmp . L 1 5 4 . L 1 4 6 : . LBE 1 2 4 : . LBE 1 2 3 : . LBB 1 2 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 4 7 : . LBE 1 2 8 : . LBB 1 2 9 : . LBB 1 2 7 : . LBB 1 2 5 : . LBB 1 2 6 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx jmp . L 1 5 1 . L 1 5 4 : . LBE 1 2 6 : . LBE 1 2 5 : . LBE 1 2 7 : . LBE 1 2 9 : . LBE 1 2 0 : . LBB 1 3 0 : addq $ 1 , % rbx . L 1 4 5 : . LBE 1 3 0 : cmpq % r 1 2 , % rbx jl . L 1 5 8 . LBE 1 1 7 : . LBE 1 1 6 : . LBE 1 1 5 : . LBB 1 3 1 : leaq . LC 2 1 (% rip ), % r 1 4 movl $ 0 , % r 1 5 d movq % r 1 4 , - 3 0 4 (% rbp ) movq % r 1 5 , - 2 9 6 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx . L 1 5 1 : . LBE 1 3 1 : . LBE 9 2 : addq $ 3 9 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 3 movl $ 2 4 8 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 3 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 3 2 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 3 : cmpq $ 0 , - 4 0 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq 1 6 (% rbp ), % rax movq (% rax ), % rbx leaq go . leetcode 0 8 8 9 . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq % rbx , - 2 0 8 (% rbp ) movq $ 0 , - 2 0 0 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 . LBB 6 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 9 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 : jmp . L 6 . L 5 : . LBB 7 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode 0 8 8 9 . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 : . LBE 7 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . LBB 8 : cmpq $ 1 , - 4 0 (% rbp ) jne . L 7 . LBB 9 : . LBB 1 0 : movq - 4 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 7 : . LBE 1 0 : . LBE 9 : . LBE 8 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 8 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 8 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 5 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 1 1 : . LBB 1 2 : jmp . L 9 . L 4 2 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : . LBB 1 5 : movq 4 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 0 cmpq % rax , - 2 4 (% rbp ) jl . L 3 5 . L 1 0 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq 4 0 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 5 6 (% rbp ) je . L 4 1 . LBE 1 5 : addq $ 1 , - 2 4 (% rbp ) . L 9 : . LBE 1 4 : movq - 2 4 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jl . L 4 2 jmp . L 1 3 . L 4 1 : . LBB 1 8 : . LBB 1 7 : . LBB 1 6 : nop . L 1 3 : . LBE 1 6 : . LBE 1 7 : . LBE 1 8 : . LBE 1 2 : . LBE 1 1 : movq - 2 4 (% rbp ), % rax leaq 2 (% rax ), % rsi movq % rsi , - 2 3 2 (% rbp ) movq 3 2 (% rbp ), % rax testq % rsi , % rsi js . L 1 5 cmpq % rax , % rsi jg . L 1 5 testq % rsi , % rsi jg . L 1 6 jmp . L 3 7 . L 1 5 : movq % rax , % rsi movq - 2 3 2 (% rbp ), % rdi call runtime . goPanicSliceAcap @ PLT . L 3 7 : movq - 2 3 2 (% rbp ), % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 1 6 : movq - 2 4 (% rbp ), % rax leaq 1 (% rax ), % rdi movq 5 6 (% rbp ), % rax testq % rdi , % rdi js . L 1 8 cmpq % rax , % rdi jg . L 1 8 testq % rdi , % rdi jns . L 1 9 jmp . L 3 8 . L 1 8 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 3 8 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 9 : movq 4 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq % rdi , - 1 6 8 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 3 , % rax addq % rdx , % rax movq % rax , - 1 4 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 3 6 (% rbp ) movq 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 2 8 (% rbp ) pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) call go . leetcode 0 8 8 9 . constructFromPrePost addq $ 4 8 , % rsp movq % rax , % rdx movq - 4 8 (% rbp ), % rax addq $ 8 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 2 1 . LBB 1 9 : movq % rdx , (% rax ) . LBE 1 9 : jmp . L 2 2 . L 2 1 : . LBB 2 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 2 : . LBE 2 0 : movq - 2 4 (% rbp ), % rax addq $ 2 , % rax movq 3 2 (% rbp ), % rdx testq % rax , % rax js . L 2 3 cmpq % rdx , % rax jle . L 3 9 . L 2 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 3 9 : movq - 2 4 (% rbp ), % rdx addq $ 1 , % rdx movq - 4 0 (% rbp ), % rcx leaq - 1 (% rcx ), % rdi movq 5 6 (% rbp ), % rcx testq % rdi , % rdi js . L 2 5 cmpq % rcx , % rdi jg . L 2 5 testq % rdx , % rdx jns . L 2 6 jmp . L 2 7 . L 2 5 : movq % rcx , % rsi call runtime . goPanicSliceAcap @ PLT . L 2 6 : cmpq % rdi , % rdx jle . L 4 0 . L 2 7 : movq % rdi , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 4 0 : movq 4 0 (% rbp ), % rsi movq 5 6 (% rbp ), % rcx cmpq % rcx , % rdx je . L 2 9 movq % rdx , % rcx salq $ 3 , % rcx jmp . L 3 0 . L 2 9 : movl $ 0 , % ecx . L 3 0 : addq % rsi , % rcx movq % rcx , - 1 1 2 (% rbp ) subq % rdx , % rdi movq % rdi , % rcx movq % rcx , - 1 0 4 (% rbp ) movq 5 6 (% rbp ), % rcx subq % rdx , % rcx movq % rcx , - 9 6 (% rbp ) movq 1 6 (% rbp ), % rcx movq 3 2 (% rbp ), % rdx cmpq % rdx , % rax je . L 3 1 movq % rax , % rdx salq $ 3 , % rdx jmp . L 3 2 . L 3 1 : movl $ 0 , % edx . L 3 2 : addq % rcx , % rdx movq % rdx , - 8 0 (% rbp ) movq 2 4 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 6 4 (% rbp ) pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) call go . leetcode 0 8 8 9 . constructFromPrePost addq $ 4 8 , % rsp movq % rax , % rdx movq - 4 8 (% rbp ), % rax addq $ 1 6 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 3 . LBB 2 1 : movq % rdx , (% rax ) . LBE 2 1 : jmp . L 3 4 . L 3 3 : . LBB 2 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 4 : . LBE 2 2 : . LBB 2 3 : movq - 4 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 3 : . LBE 2 3 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 3 1 1 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 9 : ret . L 3 1 1 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 3 2 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 7 3 : . LBB 2 7 4 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax jne . L 3 0 6 . LBB 2 7 5 : . LBB 2 7 6 : leaq int .. d (% rip ), % rax movq % rax , - 3 2 (% rbp ) leaq go .. C 1 9 1 (% rip ), % rax movq % rax , - 2 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx jmp . L 3 1 0 . L 3 0 6 : . LBE 2 7 6 : . LBE 2 7 5 : . LBE 2 7 4 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) movq - 4 0 (% rbp ), % rax addq $ 8 , % rax movq - 8 (% rbp ), % rdx movq 2 4 (% rdx ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 0 8 . LBB 2 7 7 : movq % rdx , (% rax ) jmp . L 3 0 9 . L 3 0 8 : . LBE 2 7 7 : . LBB 2 7 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 0 9 : . LBE 2 7 8 : . LBB 2 7 9 : movq - 4 0 (% rbp ), % rax movq (% rax ), % rdx subq $ 1 , % rdx movq % rdx , (% rax ) . LBE 2 7 9 : . LBB 2 8 0 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx . L 3 1 0 : . LBE 2 8 0 : . LBE 2 7 3 : leave ret
. LFB 0 : leaq - 8 8 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 4 movl $ 8 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 4 0 , % rsp movq % rdi , - 7 4 4 (% rbp ) leaq . LC 1 4 (% rip ), % rax movl $ 2 0 , % edx movq % rax , - 6 8 8 (% rbp ) movq % rdx , - 6 8 0 (% rbp ) leaq . LC 1 5 (% rip ), % rcx movl $ 4 , % ebx movq % rcx , - 6 7 2 (% rbp ) movq % rbx , - 6 6 4 (% rbp ) movq $ 4 , - 6 5 6 (% rbp ) leaq . LC 1 6 (% rip ), % r 8 movl $ 3 1 , % r 9 d movq % r 8 , - 6 4 8 (% rbp ) movq % r 9 , - 6 4 0 (% rbp ) leaq . LC 1 7 (% rip ), % r 1 0 movl $ 3 , % r 1 1 d movq % r 1 0 , - 6 3 2 (% rbp ) movq % r 1 1 , - 6 2 4 (% rbp ) movq $ 2 , - 6 1 6 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 2 movl $ 1 0 , % r 1 3 d movq % r 1 2 , - 6 0 8 (% rbp ) movq % r 1 3 , - 6 0 0 (% rbp ) leaq . LC 1 9 (% rip ), % rax movq % rax , - 8 3 2 (% rbp ) movq $ 3 , - 8 2 4 (% rbp ) movdqa - 8 3 2 (% rbp ), % xmm 0 movups % xmm 0 , - 5 9 2 (% rbp ) movq $- 1 , - 5 7 6 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 8 1 6 (% rbp ) movq $ 1 9 , - 8 0 8 (% rbp ) movdqa - 8 1 6 (% rbp ), % xmm 1 movups % xmm 1 , - 5 6 8 (% rbp ) leaq . LC 2 1 (% rip ), % rax movq % rax , - 8 0 0 (% rbp ) movq $ 4 , - 7 9 2 (% rbp ) movdqa - 8 0 0 (% rbp ), % xmm 2 movups % xmm 2 , - 5 5 2 (% rbp ) movq $ 4 , - 5 3 6 (% rbp ) leaq . LC 2 2 (% rip ), % rax movq % rax , - 7 8 4 (% rbp ) movq $ 2 5 , - 7 7 6 (% rbp ) movdqa - 7 8 4 (% rbp ), % xmm 3 movups % xmm 3 , - 5 2 8 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 7 6 8 (% rbp ) movq $ 4 , - 7 6 0 (% rbp ) movdqa - 7 6 8 (% rbp ), % xmm 4 movups % xmm 4 , - 5 1 2 (% rbp ) movq $- 1 , - 4 9 6 (% rbp ) . LBB 2 : movq $ 0 , - 7 3 6 (% rbp ) movq $ 0 , - 7 2 8 (% rbp ) movq $ 0 , - 7 2 0 (% rbp ) movq $ 0 , - 7 1 2 (% rbp ) movq $ 0 , - 7 0 4 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movl $ 5 , % r 1 2 d movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 1 3 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : testq % rbx , % rbx js . L 3 cmpq $ 4 , % rbx jg . L 3 movq % rbx , % rax salq $ 2 , % rax addq % rbx , % rax salq $ 3 , % rax leaq - 4 8 (% rbp ), % rcx addq % rcx , % rax subq $ 3 8 4 , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 4 8 0 (% rbp ) movq % rdi , - 4 7 2 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 4 6 4 (% rbp ) movq % rdi , - 4 5 6 (% rbp ) movq 3 2 (% rax ), % rax movq % rax , - 4 4 8 (% rbp ) . LBE 8 : . LBB 9 : movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 7 3 6 (% rbp ) movq % rdx , - 7 2 8 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 7 2 0 (% rbp ) movq % rdx , - 7 1 2 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 7 0 4 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq - 7 3 6 (% rbp ), % rdi movq - 7 2 8 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call go . problem 1 4 5 5 . isPrefixOfWord movq % rax , - 5 6 (% rbp ) . LBB 1 1 : movq - 7 0 4 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 4 jmp . L 5 . L 3 : . LBE 1 1 : . LBE 1 0 : . LBB 1 8 : movl $ 5 , % esi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 8 : . LBB 1 9 : . LBB 1 7 : . LBB 1 2 : leaq string .. d (% rip ), % rax movq % rax , - 8 8 0 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 1 3 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 3 : jmp . L 7 . L 6 : . LBB 1 4 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 1 4 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 8 7 2 (% rbp ) leaq int .. d (% rip ), % r 1 3 movq % r 1 3 , - 8 6 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 8 5 6 (% rbp ) movq % r 1 3 , - 8 4 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 4 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 7 0 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 8 4 0 (% rbp ) leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 8 8 0 (% rbp ), % xmm 5 movups % xmm 5 , - 1 2 8 (% rbp ) movdqa - 8 6 4 (% rbp ), % xmm 6 movups % xmm 6 , - 1 1 2 (% rbp ) movdqa - 8 4 8 (% rbp ), % xmm 7 movups % xmm 7 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 . LBB 1 5 : movq - 1 3 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) . LBE 1 5 : jmp . L 9 . L 8 : . LBB 1 6 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 : . LBE 1 6 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 2 4 (% rip ), % r 1 4 movl $ 2 5 , % r 1 5 d movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rsi , % rcx movq - 7 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 5 : . LBE 1 2 : . LBE 1 7 : . LBE 1 9 : . LBE 7 : . LBB 2 0 : addq $ 1 , % rbx . L 2 : . LBE 2 0 : cmpq % r 1 2 , % rbx jl . L 1 3 . LBE 4 : . LBE 3 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 1 2 0 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 1 movl $ 1 2 0 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 1 6 0 , % rsp movq % rdi , - 1 1 1 2 (% rbp ) leaq type ... 6 6 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 3 2 (% rbp ) movq - 8 3 2 (% rbp ), % rax movq $- 1 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 2 , 2 4 (% rax ) movq $- 1 , 3 2 (% rax ) movq $- 4 , 4 0 (% rax ) movq - 8 3 2 (% rbp ), % rax movq % rax , - 1 0 2 4 (% rbp ) movq $ 6 , - 1 0 1 6 (% rbp ) movq $ 6 , - 1 0 0 8 (% rbp ) leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 2 4 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 1 6 (% rbp ) movq - 8 1 6 (% rbp ), % rax movq $- 1 , (% rax ) movq $- 1 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq - 8 1 6 (% rbp ), % rax movq % rax , - 8 0 0 (% rbp ) movq $ 3 , - 7 9 2 (% rbp ) movq $ 3 , - 7 8 4 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 0 8 (% rbp ) movq - 8 0 8 (% rbp ), % rax movq $- 1 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq - 8 0 8 (% rbp ), % rax movq % rax , - 7 7 6 (% rbp ) movq $ 3 , - 7 6 8 (% rbp ) movq $ 3 , - 7 6 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 8 2 4 (% rbp ), % rcx movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 8 2 4 (% rbp ), % rax leaq - 8 0 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 8 2 4 (% rbp ), % rax movq % rax , - 1 0 0 0 (% rbp ) movq $ 2 , - 9 9 2 (% rbp ) movq $ 2 , - 9 8 4 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 4 4 (% rbp ) movq - 7 4 4 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq - 7 4 4 (% rbp ), % rax movq % rax , - 9 7 6 (% rbp ) movq $ 4 , - 9 6 8 (% rbp ) movq $ 4 , - 9 6 0 (% rbp ) leaq type ... 6 1 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 3 6 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 8 (% rbp ) movq - 7 2 8 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq - 7 2 8 (% rbp ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 3 , - 7 1 2 (% rbp ) movq $ 3 , - 7 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 7 3 6 (% rbp ), % rcx movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 7 0 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 7 3 6 (% rbp ), % rax leaq - 7 2 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 7 3 6 (% rbp ), % rax movq % rax , - 9 5 2 (% rbp ) movq $ 1 , - 9 4 4 (% rbp ) movq $ 1 , - 9 3 6 (% rbp ) leaq type ... 6 6 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 9 6 (% rbp ) movq - 6 9 6 (% rbp ), % rax movq $- 2 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 2 , 2 4 (% rax ) movq $ 2 , 3 2 (% rax ) movq $ 2 , 4 0 (% rax ) movq - 6 9 6 (% rbp ), % rax movq % rax , - 9 2 8 (% rbp ) movq $ 6 , - 9 2 0 (% rbp ) movq $ 6 , - 9 1 2 (% rbp ) leaq type ... 6 1 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 8 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 8 0 (% rbp ) movq - 6 8 0 (% rbp ), % rax movq $- 2 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq - 6 8 0 (% rbp ), % rax movq % rax , - 6 7 2 (% rbp ) movq $ 3 , - 6 6 4 (% rbp ) movq $ 3 , - 6 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 6 : movq - 6 8 8 (% rbp ), % rcx movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 6 5 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 : jmp . L 7 . L 6 : . LBB 7 : movq - 6 8 8 (% rbp ), % rax leaq - 6 7 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 7 : movq - 6 8 8 (% rbp ), % rax movq % rax , - 9 0 4 (% rbp ) movq $ 1 , - 8 9 6 (% rbp ) movq $ 1 , - 8 8 8 (% rbp ) leaq type ... 6 7 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 8 (% rbp ) movq - 6 4 8 (% rbp ), % rax movq $- 2 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 2 , 2 4 (% rax ) movq $ 2 , 3 2 (% rax ) movq $ 2 , 4 0 (% rax ) movq $ 2 , 4 8 (% rax ) movq - 6 4 8 (% rbp ), % rax movq % rax , - 8 8 0 (% rbp ) movq $ 7 , - 8 7 2 (% rbp ) movq $ 7 , - 8 6 4 (% rbp ) leaq type ... 6 1 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 0 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 3 2 (% rbp ) movq - 6 3 2 (% rbp ), % rax movq $- 2 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq - 6 3 2 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) movq $ 3 , - 6 1 6 (% rbp ) movq $ 3 , - 6 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 . LBB 8 : movq - 6 4 0 (% rbp ), % rcx movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 6 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 8 : jmp . L 9 . L 8 : . LBB 9 : movq - 6 4 0 (% rbp ), % rax leaq - 6 2 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 : . LBE 9 : movq - 6 4 0 (% rbp ), % rax movq % rax , - 8 5 6 (% rbp ) movq $ 1 , - 8 4 8 (% rbp ) movq $ 1 , - 8 4 0 (% rbp ) . LBB 1 0 : movq $ 0 , - 1 1 0 4 (% rbp ) movq $ 0 , - 1 0 9 6 (% rbp ) movq $ 0 , - 1 0 8 8 (% rbp ) movq $ 0 , - 1 0 8 0 (% rbp ) movq $ 0 , - 1 0 7 2 (% rbp ) movq $ 0 , - 1 0 6 4 (% rbp ) . LBB 1 1 : . LBB 1 2 : . LBB 1 3 : movq - 1 0 2 4 (% rbp ), % rax movq - 1 0 1 6 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 1 0 0 8 (% rbp ), % rax movq - 1 0 0 0 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 9 9 2 (% rbp ), % rax movq - 9 8 4 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 9 7 6 (% rbp ), % rax movq - 9 6 8 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 9 6 0 (% rbp ), % rax movq - 9 5 2 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 9 4 4 (% rbp ), % rax movq - 9 3 6 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 9 2 8 (% rbp ), % rax movq - 9 2 0 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 9 1 2 (% rbp ), % rax movq - 9 0 4 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 8 9 6 (% rbp ), % rax movq - 8 8 8 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 8 8 0 (% rbp ), % rax movq - 8 7 2 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 8 6 4 (% rbp ), % rax movq - 8 5 6 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 8 4 8 (% rbp ), % rax movq - 8 4 0 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movl $ 4 , % r 1 3 d movl $ 0 , % r 1 2 d . LBE 1 3 : jmp . L 1 0 . L 3 0 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : testq % r 1 2 , % r 1 2 js . L 1 1 cmpq $ 3 , % r 1 2 jg . L 1 1 movq % r 1 2 , % rax addq % rax , % rax addq % r 1 2 , % rax salq $ 4 , % rax leaq - 4 8 (% rbp ), % rbx addq % rbx , % rax leaq - 4 9 6 (% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) . LBE 1 6 : . LBB 1 7 : movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 1 1 0 4 (% rbp ) movq % rdx , - 1 0 9 6 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 1 0 8 8 (% rbp ) movq % rdx , - 1 0 8 0 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 1 0 7 2 (% rbp ) movq % rdx , - 1 0 6 4 (% rbp ) . LBE 1 7 : . LBB 1 8 : leaq - 1 0 5 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 0 8 8 (% rbp ) pushq - 1 0 9 6 (% rbp ) pushq - 1 1 0 4 (% rbp ) movq % rax , % rdi call go . problem 1 5 . threeSum addq $ 3 2 , % rsp . LBB 1 9 : leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rax movq % rax , - 1 1 5 2 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 1 0 8 0 (% rbp ), % rax movq - 1 0 7 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 1 0 6 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 1 2 jmp . L 2 8 . L 1 1 : . LBE 1 9 : . LBE 1 8 : . LBB 3 4 : movl $ 4 , % esi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : . LBE 3 4 : . LBB 3 5 : . LBB 3 3 : . LBB 2 0 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 0 : jmp . L 1 4 . L 2 8 : . LBB 2 1 : movq - 2 6 4 (% rbp ), % rcx leaq - 2 5 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 4 : . LBE 2 1 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 1 1 4 4 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rax movq % rax , - 1 1 3 6 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 9 6 (% rbp ) movq - 1 0 5 6 (% rbp ), % rax movq - 1 0 4 8 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 1 0 4 0 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 5 . LBB 2 2 : movq - 2 9 6 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 7 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 2 : jmp . L 1 6 . L 1 5 : . LBB 2 3 : movq - 2 9 6 (% rbp ), % rcx leaq - 2 8 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 6 : . LBE 2 3 : movq - 2 9 6 (% rbp ), % rax movq % rax , - 1 1 2 8 (% rbp ) movq - 1 1 3 6 (% rbp ), % rax movq - 1 1 2 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % rax movq - 1 1 5 2 (% rbp ), % rdx movq - 1 1 4 4 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT xorl $ 1 , % eax testb % al , % al je . L 1 7 . LBB 2 4 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 1 2 0 0 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 1 1 0 4 (% rbp ), % rax movq - 1 0 9 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 1 0 8 8 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 8 . LBB 2 5 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 5 : jmp . L 1 9 . L 1 8 : . LBB 2 6 : movq - 2 3 2 (% rbp ), % rcx leaq - 2 2 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 9 : . LBE 2 6 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 1 1 9 2 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rax movq % rax , - 1 1 8 4 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 1 0 5 6 (% rbp ), % rax movq - 1 0 4 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 1 0 4 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 0 . LBB 2 7 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 7 : jmp . L 2 1 . L 2 0 : . LBB 2 8 : movq - 2 0 0 (% rbp ), % rcx leaq - 1 9 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 1 : . LBE 2 8 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 1 1 7 6 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rax movq % rax , - 1 1 6 8 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 1 0 8 0 (% rbp ), % rax movq - 1 0 7 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 0 6 4 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 2 . LBB 2 9 : movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 9 : jmp . L 2 3 . L 2 2 : . LBB 3 0 : movq - 1 6 8 (% rbp ), % rcx leaq - 1 6 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 3 : . LBE 3 0 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 1 1 6 0 (% rbp ) leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 1 2 0 0 (% rbp ), % xmm 0 movups % xmm 0 , - 1 2 8 (% rbp ) movdqa - 1 1 8 4 (% rbp ), % xmm 1 movups % xmm 1 , - 1 1 2 (% rbp ) movdqa - 1 1 6 8 (% rbp ), % xmm 2 movups % xmm 2 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 4 . LBB 3 1 : movq - 1 3 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 3 1 : jmp . L 2 5 . L 2 4 : . LBB 3 2 : movq - 1 3 6 (% rbp ), % rcx leaq - 1 2 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 5 : . LBE 3 2 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 1 9 (% rip ), % r 1 4 movl $ 2 5 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 1 1 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 1 7 : . LBE 2 4 : . LBE 3 3 : . LBE 3 5 : . LBE 1 5 : . LBB 3 6 : addq $ 1 , % r 1 2 . L 1 0 : . LBE 3 6 : cmpq % r 1 3 , % r 1 2 jl . L 3 0 . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 3 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 6 4 , % rsp movq % rdi , - 2 9 6 (% rbp ) leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 2 5 6 (% rbp ) movq % r 1 5 , - 2 4 8 (% rbp ) movq $ 4 , - 2 4 0 (% rbp ) movq $ 2 , - 2 3 2 (% rbp ) leaq . LC 1 9 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 2 2 4 (% rbp ) movq % r 1 3 , - 2 1 6 (% rbp ) movq $ 8 , - 2 0 8 (% rbp ) movq $ 2 , - 2 0 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 2 6 4 (% rbp ), % rax movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 2 2 4 (% rbp ), % rcx movq - 2 1 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 2 0 8 (% rbp ), % rcx movq - 2 0 0 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 2 6 4 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 2 , - 2 8 0 (% rbp ) movq $ 2 , - 2 7 2 (% rbp ) . LBB 4 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 5 6 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 5 6 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 8 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 2 9 6 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 2 6 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 9 movl $ 2 8 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 3 2 , % rsp movq % rdi , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) . LBB 4 4 : . LBB 4 5 : subq $ 1 , - 2 3 2 (% rbp ) cmpq $ 2 5 , - 2 3 2 (% rbp ) jg . L 3 6 . LBB 4 6 : . LBB 4 7 : leaq int .. d (% rip ), % rax movq % rax , - 2 7 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx addq $ 6 5 , % rdx movq % rdx , (% rax ) movq - 2 0 0 (% rbp ), % rax movq % rax , - 2 6 4 (% rbp ) movdqa - 2 7 2 (% rbp ), % xmm 0 movups % xmm 0 , - 1 9 2 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq . LC 2 3 (% rip ), % r 1 4 movl $ 2 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx jmp . L 3 8 . L 3 6 : . LBE 4 7 : . LBE 4 6 : . LBE 4 5 : . LBB 4 8 : movq - 2 3 2 (% rbp ), % rcx movabsq $ 5 6 7 5 9 2 1 2 5 3 4 4 9 0 9 2 8 0 5 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 3 , % rax sarq $ 6 3 , % rcx movq % rcx , % rdx subq % rdx , % rax movq % rax , % rdi call go . problem 1 6 8 . convertToTitle movq % rax , % r 1 4 movq % rdx , % r 1 5 leaq int .. d (% rip ), % rax movq % rax , - 2 5 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 2 3 2 (% rbp ), % rcx movabsq $ 5 6 7 5 9 2 1 2 5 3 4 4 9 0 9 2 8 0 5 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 3 , % rax movq % rcx , % rsi sarq $ 6 3 , % rsi subq % rsi , % rax movq % rax , % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax subq % rax , % rcx movq % rcx , % rdx movq - 1 6 8 (% rbp ), % rax addq $ 6 5 , % rdx movq % rdx , (% rax ) movq - 1 6 8 (% rbp ), % rax movq % rax , - 2 4 8 (% rbp ) movdqa - 2 5 6 (% rbp ), % xmm 1 movups % xmm 1 , - 1 6 0 (% rbp ) leaq - 1 6 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 1 , - 7 2 (% rbp ) movq $ 1 , - 6 4 (% rbp ) leaq . LC 2 3 (% rip ), % r 1 2 movl $ 2 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq % r 1 4 , - 1 4 4 (% rbp ) movq % r 1 5 , - 1 3 6 (% rbp ) movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx . L 3 8 : . LBE 4 8 : . LBE 4 4 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 5 movl $ 1 6 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 2 0 , % rsp movq $ 0 , - 5 6 (% rbp ) . LBB 2 : leaq go . problem 1 0 4 6 . PQ .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq 1 6 (% rbp ), % rcx movq 2 4 (% rbp ), % rbx movq % rcx , - 1 1 2 (% rbp ) movq % rbx , - 1 0 4 (% rbp ) movq 3 2 (% rbp ), % rdx movq % rdx , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 9 6 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 . LBB 3 : movq - 1 1 2 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 3 : jmp . L 3 . L 2 : . LBB 4 : movq - 1 1 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 : . LBE 4 : leaq pimt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Pop . 0 func . 8 . 9 . 8 interface . 4 . 5 . 9 . 2 Push . 0 func . 8 interface . 4 . 5 . 9 . 8 . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. go . problem 1 0 4 6 . PQ (% rip ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 5 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call container .. z 2 fheap . Init @ PLT . LBB 5 : . LBB 6 : jmp . L 4 . L 1 4 : . LBB 7 : nop . LBE 7 : . LBB 8 : leaq pimt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Pop . 0 func . 8 . 9 . 8 interface . 4 . 5 . 9 . 2 Push . 0 func . 8 interface . 4 . 5 . 9 . 8 . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. go . problem 1 0 4 6 . PQ (% rip ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 3 6 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call container .. z 2 fheap . Pop @ PLT movq % rax , % rsi leaq int .. d (% rip ), % rcx cmpq % rcx , % rsi je . L 5 leaq type .. interface . 4 . 5 (% rip ), % rdx movq % rax , % rsi leaq int .. d (% rip ), % rdi call runtime . panicdottype @ PLT . L 5 : movq % rdx , % rax movq (% rax ), % rax movq % rax , - 7 2 (% rbp ) leaq pimt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Pop . 0 func . 8 . 9 . 8 interface . 4 . 5 . 9 . 2 Push . 0 func . 8 interface . 4 . 5 . 9 . 8 . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. go . problem 1 0 4 6 . PQ (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 5 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call container .. z 2 fheap . Pop @ PLT movq % rax , % rsi leaq int .. d (% rip ), % rcx cmpq % rcx , % rsi je . L 6 leaq type .. interface . 4 . 5 (% rip ), % rdx movq % rax , % rsi leaq int .. d (% rip ), % rdi call runtime . panicdottype @ PLT . L 6 : movq % rdx , % rax movq (% rax ), % rax movq % rax , - 8 0 (% rbp ) . LBB 9 : movq - 7 2 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jne . L 7 . LBB 1 0 : jmp . L 4 . L 7 : . LBE 1 0 : . LBE 9 : leaq int .. d (% rip ), % rax movq % rax , - 1 2 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq - 8 8 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx subq - 8 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 8 8 (% rbp ), % rax movq % rax , - 1 2 0 (% rbp ) leaq pimt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Pop . 0 func . 8 . 9 . 8 interface . 4 . 5 . 9 . 2 Push . 0 func . 8 interface . 4 . 5 . 9 . 8 . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. go . problem 1 0 4 6 . PQ (% rip ), % r 1 2 movq - 6 4 (% rbp ), % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rcx , % rsi movq % rdx , % rax movq - 1 2 8 (% rbp ), % rdx movq - 1 2 0 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call container .. z 2 fheap . Push @ PLT . L 4 : . LBE 8 : movq - 6 4 (% rbp ), % rax movq 8 (% rax ), % rax cmpq $ 1 , % rax jg . L 1 4 . LBE 6 : . LBE 5 : . LBB 1 1 : movq - 6 4 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax jne . L 1 0 . LBB 1 2 : . LBB 1 3 : movq $ 0 , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax jmp . L 1 1 . L 1 0 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 4 : movq - 6 4 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax jg . L 1 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 2 : movq - 6 4 (% rbp ), % rax movq (% rax ), % rax movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax . L 1 1 : . LBE 1 4 : . LBE 2 : addq $ 1 2 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 8 movl $ 2 3 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 8 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 1 6 , % rsp movq % rdi , - 1 8 4 (% rbp ) movq % rsi , - 1 9 2 (% rbp ) movq % rdx , - 2 0 8 (% rbp ) movq % rcx , - 2 0 0 (% rbp ) movq % r 8 , - 2 2 4 (% rbp ) movq % r 9 , - 2 1 6 (% rbp ) cmpq $ 0 , - 1 9 2 (% rbp ) jne . L 6 call runtime . panicmem @ PLT . L 6 : movq - 1 9 2 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , % rcx movq 8 (% rcx ), % r 1 0 movq % rdx , % rsi leaq - 4 8 (% rbp ), % rdi movq - 1 4 4 (% rbp ), % rcx movq - 1 3 6 (% rbp ), % rbx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx pushq - 2 1 6 (% rbp ) pushq - 2 2 4 (% rbp ) movq % rcx , % r 8 movq % rbx , % r 9 movq % rdx , % rcx movq % rax , % rdx call *% r 1 0 . LVL 2 : addq $ 1 6 , % rsp movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rcx , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) . LBE 6 : movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq - 1 8 4 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 5 : . LBE 4 : movq - 1 8 4 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 0 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 0 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 9 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 2 4 (% rbp ) movq - 4 0 (% rbp ), % rax addq $ 8 , % rax movq - 8 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 . LBB 7 : movq % rdx , (% rax ) . LBE 7 : jmp . L 4 . L 3 : . LBB 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 4 : . LBE 8 : movq - 4 0 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . L 2 : . LBE 6 : cmpq $ 0 , - 4 0 (% rbp ) jne . L 9 . LBE 4 : . LBE 3 : . LBB 9 : movq - 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax . LBE 9 : . LBE 2 : leave ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 8 movl $ 1 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 6 0 , % rsp movq % rdi , - 1 5 2 (% rbp ) movq % rsi , - 1 6 0 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) . LBB 2 : movq $ 0 , - 2 4 (% rbp ) movb $ 0 , - 2 5 (% rbp ) . LBB 3 : movq - 1 6 0 (% rbp ), % rax movq % rax , - 1 3 6 (% rbp ) leaq - 1 3 6 (% rbp ), % rax movq (% rax ), % rdx movq - 1 5 2 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 2 4 (% rbp ) movb % dl , - 2 5 (% rbp ) . LBE 3 : cmpb $ 0 , - 2 5 (% rbp ) je . L 2 . LBB 4 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) leaq - 8 8 (% rbp ), % rax movq (% rax ), % rdx movq - 1 5 2 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rdx , - 8 0 (% rbp ) leaq - 8 0 (% rbp ), % rdx movq (% rdx ), % rdx movq % rax , % rsi leaq type .. map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapdelete_fast 6 4 @ PLT . LBB 5 : movq - 2 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) leaq - 7 2 (% rbp ), % rax movq (% rax ), % rdx movq - 1 5 2 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax testq % rax , % rax je . L 3 movq (% rax ), % rax testq % rax , % rax jne . L 2 . L 3 : . LBB 6 : movq - 1 5 2 (% rbp ), % rax movq 8 (% rax ), % rax movq - 2 4 (% rbp ), % rdx movq % rdx , - 6 4 (% rbp ) leaq - 6 4 (% rbp ), % rdx movq (% rdx ), % rdx movq % rax , % rsi leaq type .. map . 6 int . 7 map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapdelete_fast 6 4 @ PLT . L 2 : . LBE 6 : . LBE 5 : . LBE 4 : . LBE 2 : . LBB 7 : movq - 1 5 2 (% rbp ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rdx , - 1 2 8 (% rbp ) movq - 1 6 8 (% rbp ), % rbx leaq - 1 2 8 (% rbp ), % rdx movq (% rdx ), % rdx movq (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % rbx , (% rax ) . LBE 7 : . LBB 8 : movq $ 0 , - 4 0 (% rbp ) movb $ 0 , - 4 1 (% rbp ) . LBB 9 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 1 2 0 (% rbp ) leaq - 1 2 0 (% rbp ), % rax movq (% rax ), % rdx movq - 1 5 2 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 4 0 (% rbp ) movb % dl , - 4 1 (% rbp ) . LBE 9 : cmpb $ 0 , - 4 1 (% rbp ) je . L 4 . LBB 1 0 : . LBB 1 1 : movq - 1 6 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT . LBE 1 1 : . LBE 1 0 : jmp . L 1 . L 4 : . LBB 1 2 : . LBB 1 3 : movq - 1 5 2 (% rbp ), % r 1 2 movq - 1 6 8 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) call runtime . makemap_small @ PLT movq % rax , % rbx leaq - 1 0 4 (% rbp ), % rax movq (% rax ), % rdx movq 8 (% r 1 2 ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 6 . LBB 1 4 : movq % rbx , (% rax ) . LBE 1 4 : jmp . L 7 . L 6 : . LBB 1 5 : movq % rbx , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 7 : . LBE 1 5 : . LBE 1 3 : . LBB 1 6 : movq - 1 5 2 (% rbp ), % rax movq 8 (% rax ), % rax movq - 1 6 8 (% rbp ), % rdx movq - 1 6 0 (% rbp ), % rcx movq % rcx , - 9 6 (% rbp ) movq % rdx , - 5 6 (% rbp ) leaq - 5 6 (% rbp ), % rdx movq (% rdx ), % rdx movq % rax , % rsi leaq type .. map . 6 int . 7 map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT leaq - 9 6 (% rbp ), % rdx movq (% rdx ), % rdx movq (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT . L 1 : . LBE 1 6 : . LBE 1 2 : . LBE 8 : addq $ 1 6 0 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 0 8 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 0 : ret . L 1 0 8 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movb $ 0 , - 9 (% rbp ) . LBB 9 1 : . LBB 9 2 : cmpq $ 1 , - 2 4 (% rbp ) jg . L 9 7 . LBB 9 3 : . LBB 9 4 : movb $ 0 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax jmp . L 9 8 . L 9 7 : . LBE 9 4 : . LBE 9 3 : . LBE 9 2 : . LBB 9 5 : movq $ 2 , - 8 (% rbp ) . LBB 9 6 : jmp . L 9 9 . L 1 0 7 : . LBB 9 7 : nop . LBE 9 7 : . LBB 9 8 : . LBB 9 9 : cmpq $- 1 , - 8 (% rbp ) je . L 1 0 0 cmpq $ 0 , - 8 (% rbp ) jne . L 1 0 1 call runtime . panicdivide @ PLT . L 1 0 1 : movq - 2 4 (% rbp ), % rax cqto idivq - 8 (% rbp ) movq % rdx , % rax testq % rax , % rax sete % al jmp . L 1 0 2 . L 1 0 0 : movl $ 1 , % eax . L 1 0 2 : testb % al , % al je . L 1 0 3 . LBB 1 0 0 : . LBB 1 0 1 : movb $ 0 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax jmp . L 9 8 . L 1 0 3 : . LBE 1 0 1 : . LBE 1 0 0 : . LBE 9 9 : . LBE 9 8 : . LBB 1 0 2 : addq $ 1 , - 8 (% rbp ) . L 9 9 : . LBE 1 0 2 : movq - 8 (% rbp ), % rax imulq % rax , % rax cmpq % rax , - 2 4 (% rbp ) jge . L 1 0 7 . LBE 9 6 : . LBE 9 5 : . LBB 1 0 3 : movb $ 1 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax . L 9 8 : . LBE 1 0 3 : . LBE 9 1 : leave ret
. LFB 1 : leaq - 3 9 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 2 movl $ 3 9 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 subq $ 3 5 2 , % rsp movq % rdi , - 3 4 4 (% rbp ) leaq . LC 2 (% rip ), % rax movl $ 7 , % edx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq $ 2 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rdx movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rax movq % rcx , % rdi movq % rax , % rsi call go . problem 5 4 1 . reverseStr movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq string .. d (% rip ), % rax movq % rax , - 3 8 4 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq % r 1 2 , - 2 7 2 (% rbp ) movq % r 1 3 , - 2 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 8 . LBB 1 6 : movq - 2 8 0 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 6 : jmp . L 2 9 . L 2 8 : . LBB 1 7 : movq - 2 8 0 (% rbp ), % rax leaq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 9 : . LBE 1 7 : movq - 2 8 0 (% rbp ), % rax movq % rax , - 3 7 6 (% rbp ) movdqa - 3 8 4 (% rbp ), % xmm 0 movups % xmm 0 , - 2 5 6 (% rbp ) leaq - 2 5 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) leaq . LC 3 (% rip ), % rax movq % rax , - 3 6 8 (% rbp ) movq $ 1 , - 3 6 0 (% rbp ) movdqa - 3 6 8 (% rbp ), % xmm 1 movups % xmm 1 , - 3 3 6 (% rbp ) movq $ 2 , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rdx movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rax movq % rcx , % rdi movq % rax , % rsi call go . problem 5 4 1 . reverseStr movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq string .. d (% rip ), % r 1 4 leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq % r 1 2 , - 2 0 8 (% rbp ) movq % r 1 3 , - 2 0 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 0 . LBB 1 8 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 8 : jmp . L 3 1 . L 3 0 : . LBB 1 9 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 1 : . LBE 1 9 : movq - 2 1 6 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 1 9 2 (% rbp ) movq % r 1 5 , - 1 8 4 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) leaq - 3 2 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 3 movl $ 2 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 4 8 , % rsp movq % rdi , - 2 4 8 (% rbp ) movb $ 0 , - 5 7 (% rbp ) . LBB 2 : . LBB 3 : movq - 2 4 8 (% rbp ), % rax andl $ 1 , % eax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movb $ 0 , - 5 7 (% rbp ) movzbl - 5 7 (% rbp ), % eax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : pxor % xmm 1 , % xmm 1 cvtsi 2 sdq - 2 4 8 (% rbp ), % xmm 1 movq % xmm 1 , % rax movq % rax , % xmm 0 call math . Sqrt @ PLT cvttsd 2 siq % xmm 0 , % rax movq % rax , - 7 2 (% rbp ) . LBB 6 : movq $ 1 , - 5 6 (% rbp ) . LBB 7 : jmp . L 4 . L 1 2 : . LBB 8 : nop . LBE 8 : . LBB 9 : leaq string .. d (% rip ), % r 1 2 leaq go .. C 6 (% rip ), % r 1 3 leaq int .. d (% rip ), % rbx movq % rbx , - 2 8 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq - 2 1 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 1 6 (% rbp ), % rax movq % rax , - 2 8 0 (% rbp ) movq % rbx , - 2 7 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 8 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 2 6 4 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 0 0 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 2 , - 1 9 2 (% rbp ) movq % r 1 3 , - 1 8 4 (% rbp ) movdqa - 2 8 8 (% rbp ), % xmm 2 movups % xmm 2 , - 1 7 6 (% rbp ) movdqa - 2 7 2 (% rbp ), % xmm 3 movups % xmm 3 , - 1 6 0 (% rbp ) movq % r 1 4 , - 1 4 4 (% rbp ) movq % r 1 5 , - 1 3 6 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 4 , - 1 2 0 (% rbp ) movq $ 4 , - 1 1 2 (% rbp ) leaq - 9 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) . LBB 1 0 : cmpq $- 1 , - 5 6 (% rbp ) je . L 5 cmpq $ 0 , - 5 6 (% rbp ) jne . L 6 call runtime . panicdivide @ PLT . L 6 : movq - 2 4 8 (% rbp ), % rax cqto idivq - 5 6 (% rbp ) movq % rdx , % rax testq % rax , % rax sete % al jmp . L 7 . L 5 : movl $ 1 , % eax . L 7 : testb % al , % al je . L 8 . LBB 1 1 : . LBB 1 2 : movb $ 0 , - 5 7 (% rbp ) movzbl - 5 7 (% rbp ), % eax jmp . L 3 . L 8 : . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 1 3 : addq $ 2 , - 5 6 (% rbp ) . L 4 : . LBE 1 3 : movq - 5 6 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jge . L 1 2 . LBE 7 : . LBE 6 : . LBB 1 4 : movb $ 1 , - 5 7 (% rbp ) movzbl - 5 7 (% rbp ), % eax . L 3 : . LBE 1 4 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 2 movl $ 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 2 : pushq % rbp movq % rsp , % rbp subq $ 8 0 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 6 4 (% rbp ) movq % rdi , - 5 6 (% rbp ) movq % rdx , - 8 0 (% rbp ) movq % rcx , - 7 2 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 3 : movq - 7 2 (% rbp ), % rax movq - 5 6 (% rbp ), % rcx cmpq $- 1 , % rcx jne . L 1 8 negq % rax jmp . L 1 9 . L 1 8 : testq % rcx , % rcx jne . L 2 0 call runtime . panicdivide @ PLT . L 2 0 : cqto idivq % rcx . L 1 9 : movq % rax , - 8 (% rbp ) . LBB 2 4 : movq - 7 2 (% rbp ), % rax movq - 5 6 (% rbp ), % rdi cmpq $- 1 , % rdi je . L 2 1 testq % rdi , % rdi jne . L 2 2 call runtime . panicdivide @ PLT . L 2 2 : cqto idivq % rdi movq % rdx , % rcx movq % rcx , % rax testq % rax , % rax setg % al jmp . L 2 3 . L 2 1 : movl $ 0 , % eax . L 2 3 : testb % al , % al je . L 2 4 . LBB 2 5 : addq $ 1 , - 8 (% rbp ) . L 2 4 : . LBE 2 5 : . LBE 2 4 : . LBB 2 6 : movq $ 0 , - 1 6 (% rbp ) . LBB 2 7 : jmp . L 2 5 . L 3 1 : . LBB 2 8 : nop . LBE 2 8 : . LBB 2 9 : movq - 8 (% rbp ), % rdx movq - 6 4 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax movq % rcx , % rdi movq % rax , % rsi call strings . Repeat @ PLT movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) . LBB 3 0 : movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq - 4 8 (% rbp ), % rdi movq - 4 0 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call strings . Index @ PLT cmpq $- 1 , % rax je . L 2 6 . LBB 3 1 : . LBB 3 2 : movq - 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 2 7 . L 2 6 : . LBE 3 2 : . LBE 3 1 : . LBE 3 0 : addq $ 1 , - 8 (% rbp ) . LBE 2 9 : . LBB 3 3 : addq $ 1 , - 1 6 (% rbp ) . L 2 5 : . LBE 3 3 : cmpq $ 1 , - 1 6 (% rbp ) jle . L 3 1 . LBE 2 7 : . LBE 2 6 : . LBB 3 4 : movq $- 1 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 2 7 : . LBE 3 4 : . LBE 2 3 : leave ret
. LFB 1 : leaq - 1 0 1 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 9 movl $ 1 0 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 6 8 , % rsp movq % rdi , - 9 2 0 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 0 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq - 6 4 0 (% rbp ), % rax movq % rax , - 8 1 6 (% rbp ) movq $ 4 , - 8 0 8 (% rbp ) movq $ 4 , - 8 0 0 (% rbp ) movq $ 3 4 , - 7 9 2 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 3 2 (% rbp ) movq - 6 3 2 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq - 6 3 2 (% rbp ), % rax movq % rax , - 7 8 4 (% rbp ) movq $ 4 , - 7 7 6 (% rbp ) movq $ 4 , - 7 6 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 2 4 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 5 , 1 6 (% rax ) movq - 6 2 4 (% rbp ), % rax movq % rax , - 7 6 0 (% rbp ) movq $ 3 , - 7 5 2 (% rbp ) movq $ 3 , - 7 4 4 (% rbp ) movq $ 8 0 6 , - 7 3 6 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 1 6 (% rbp ) movq - 6 1 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq - 6 1 6 (% rbp ), % rax movq % rax , - 7 2 8 (% rbp ) movq $ 4 , - 7 2 0 (% rbp ) movq $ 4 , - 7 1 2 (% rbp ) leaq type ... 6 1 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 8 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq $ 9 , (% rax ) movq $ 9 , 8 (% rax ) movq $ 9 , 1 6 (% rax ) movq $ 9 , 2 4 (% rax ) movq $ 9 , 3 2 (% rax ) movq $ 9 , 4 0 (% rax ) movq $ 9 , 4 8 (% rax ) movq $ 9 , 5 6 (% rax ) movq $ 9 , 6 4 (% rax ) movq $ 9 , 7 2 (% rax ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 7 0 4 (% rbp ) movq $ 1 0 , - 6 9 6 (% rbp ) movq $ 1 0 , - 6 8 8 (% rbp ) movq $ 1 , - 6 8 0 (% rbp ) leaq type ... 6 1 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 0 (% rbp ) movq - 6 0 0 (% rbp ), % r 8 movq % r 8 , % rsi movl $ 0 , % eax movl $ 1 1 , % edx movq % rsi , % rdi movq % rdx , % rcx rep stosq movq $ 1 , (% r 8 ) movq - 6 0 0 (% rbp ), % rax movq % rax , - 6 7 2 (% rbp ) movq $ 1 1 , - 6 6 4 (% rbp ) movq $ 1 1 , - 6 5 6 (% rbp ) . LBB 1 6 : movq $ 0 , - 9 1 2 (% rbp ) movq $ 0 , - 9 0 4 (% rbp ) movq $ 0 , - 8 9 6 (% rbp ) movq $ 0 , - 8 8 8 (% rbp ) movq $ 0 , - 8 8 0 (% rbp ) movq $ 0 , - 8 7 2 (% rbp ) movq $ 0 , - 8 6 4 (% rbp ) . LBB 1 7 : . LBB 1 8 : . LBB 1 9 : movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movl $ 3 , % r 1 3 d movl $ 0 , % r 1 2 d . LBE 1 9 : jmp . L 1 8 . L 3 8 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : . LBB 2 2 : testq % r 1 2 , % r 1 2 js . L 1 9 cmpq $ 2 , % r 1 2 jg . L 1 9 movq % r 1 2 , % rax salq $ 3 , % rax subq % r 1 2 , % rax salq $ 3 , % rax leaq - 4 8 (% rbp ), % rbx addq % rbx , % rax leaq - 4 8 0 (% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq 4 8 (% rcx ), % rax movq % rax , - 5 4 4 (% rbp ) . LBE 2 2 : . LBB 2 3 : movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 9 1 2 (% rbp ) movq % rdx , - 9 0 4 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 8 9 6 (% rbp ) movq % rdx , - 8 8 8 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 8 8 0 (% rbp ) movq % rdx , - 8 7 2 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 8 6 4 (% rbp ) . LBE 2 3 : . LBB 2 4 : movq - 8 8 8 (% rbp ), % rdx leaq - 8 4 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 9 6 (% rbp ) pushq - 9 0 4 (% rbp ) pushq - 9 1 2 (% rbp ) movq % rdx , % rsi movq % rax , % rdi call go . problem 9 8 9 . addToArrayForm addq $ 3 2 , % rsp . LBB 2 5 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 9 6 0 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 8 8 0 (% rbp ), % rax movq - 8 7 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 8 6 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 2 0 jmp . L 3 6 . L 1 9 : . LBE 2 5 : . LBE 2 4 : . LBB 4 0 : movl $ 3 , % esi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : . LBE 4 0 : . LBB 4 1 : . LBB 3 9 : . LBB 2 6 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 6 : jmp . L 2 2 . L 3 6 : . LBB 2 7 : movq - 2 6 4 (% rbp ), % rcx leaq - 2 5 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 2 : . LBE 2 7 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 9 5 2 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 9 4 4 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 9 6 (% rbp ) movq - 8 4 8 (% rbp ), % rax movq - 8 4 0 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 8 3 2 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 3 . LBB 2 8 : movq - 2 9 6 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 7 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 8 : jmp . L 2 4 . L 2 3 : . LBB 2 9 : movq - 2 9 6 (% rbp ), % rcx leaq - 2 8 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 4 : . LBE 2 9 : movq - 2 9 6 (% rbp ), % rax movq % rax , - 9 3 6 (% rbp ) movq - 9 4 4 (% rbp ), % rax movq - 9 3 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % rax movq - 9 6 0 (% rbp ), % rdx movq - 9 5 2 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT xorl $ 1 , % eax testb % al , % al je . L 2 5 . LBB 3 0 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 1 0 0 8 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 9 1 2 (% rbp ), % rax movq - 9 0 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 8 9 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 6 . LBB 3 1 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 1 : jmp . L 2 7 . L 2 6 : . LBB 3 2 : movq - 2 3 2 (% rbp ), % rcx leaq - 2 2 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 7 : . LBE 3 2 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 1 0 0 0 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 9 9 2 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 8 4 8 (% rbp ), % rax movq - 8 4 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 8 3 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 8 . LBB 3 3 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 3 : jmp . L 2 9 . L 2 8 : . LBB 3 4 : movq - 2 0 0 (% rbp ), % rcx leaq - 1 9 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 9 : . LBE 3 4 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 9 8 4 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 9 7 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 8 8 0 (% rbp ), % rax movq - 8 7 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 8 6 4 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 0 . LBB 3 5 : movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 5 : jmp . L 3 1 . L 3 0 : . LBB 3 6 : movq - 1 6 8 (% rbp ), % rcx leaq - 1 6 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 1 : . LBE 3 6 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 9 6 8 (% rbp ) leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 1 0 0 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 2 8 (% rbp ) movdqa - 9 9 2 (% rbp ), % xmm 1 movups % xmm 1 , - 1 1 2 (% rbp ) movdqa - 9 7 6 (% rbp ), % xmm 2 movups % xmm 2 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 2 . LBB 3 7 : movq - 1 3 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 3 7 : jmp . L 3 3 . L 3 2 : . LBB 3 8 : movq - 1 3 6 (% rbp ), % rcx leaq - 1 2 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 3 : . LBE 3 8 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 4 movl $ 2 5 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 9 2 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 2 5 : . LBE 3 0 : . LBE 3 9 : . LBE 4 1 : . LBE 2 1 : . LBB 4 2 : addq $ 1 , % r 1 2 . L 1 8 : . LBE 4 2 : cmpq % r 1 3 , % r 1 2 jl . L 3 8 . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 2 5 2 movl $ 1 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 6 : ret . L 2 5 2 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 0 4 , % rsp movq % rdi , - 8 8 (% rbp ) movq % rsi , - 9 6 (% rbp ) movq % rdx , - 1 1 2 (% rbp ) movq % rcx , - 1 0 4 (% rbp ) movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 1 6 9 : . LBB 1 7 0 : . LBB 1 7 1 : nop movq - 1 0 4 (% rbp ), % rax cmpq % rax , - 9 6 (% rbp ) jl . L 2 4 0 . LBB 1 7 2 : nop . LBE 1 7 2 : . LBB 1 7 3 : . LBB 1 7 4 : leaq . LC 5 9 (% rip ), % r 8 movl $ 0 , % r 9 d movq % r 8 , - 4 8 (% rbp ) movq % r 9 , - 4 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx jmp . L 2 4 8 . L 2 4 0 : . LBE 1 7 4 : . LBE 1 7 3 : . LBE 1 7 1 : . LBE 1 7 0 : movq - 9 6 (% rbp ), % rax subq - 8 8 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq uint 8 .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 8 0 (% rbp ) movq % rbx , - 7 2 (% rbp ) movq % rbx , - 6 4 (% rbp ) . LBB 1 7 5 : movq $ 0 , - 2 4 (% rbp ) movq - 8 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . LBB 1 7 6 : jmp . L 2 4 2 . L 2 5 1 : . LBB 1 7 7 : nop . LBE 1 7 7 : . LBB 1 7 8 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 4 3 cmpq % rax , - 2 4 (% rbp ) jl . L 2 4 9 . L 2 4 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 9 : movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 4 5 cmpq % rax , - 3 2 (% rbp ) jge . L 2 4 5 movq - 1 1 2 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax addq % rdx , % rax movq - 8 0 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx addq % rcx , % rdx movzbl (% rax ), % eax movb % al , (% rdx ) . LBE 1 7 8 : . LBB 1 7 9 : . LBB 1 8 0 : movq - 3 2 (% rbp ), % rax leaq 1 (% rax ), % rdx movq - 2 4 (% rbp ), % rax addq $ 1 , % rax movq % rdx , - 3 2 (% rbp ) movq % rax , - 2 4 (% rbp ) jmp . L 2 4 2 . L 2 4 5 : . LBE 1 8 0 : . LBE 1 7 9 : . LBB 1 8 1 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 2 : . LBE 1 8 1 : movq - 3 2 (% rbp ), % rax cmpq - 9 6 (% rbp ), % rax jle . L 2 5 1 . LBE 1 7 6 : . LBE 1 7 5 : . LBB 1 8 2 : subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movl $ 0 , % edi call runtime . slicebytetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx . L 2 4 8 : . LBE 1 8 2 : . LBE 1 6 9 : movq - 8 (% rbp ), % rbx leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 4 6 movl $ 2 3 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : . LEHB 0 : ret . L 4 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 9 2 , % rsp . LEHE 0 : movq % rdi , % rcx movq % rsi , % rax movq % rax , % rbx movq % rcx , - 2 0 8 (% rbp ) movq % rbx , - 2 0 0 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movb $ 0 , - 1 8 5 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 2 2 : movq - 2 1 6 (% rbp ), % rax . LEHB 1 : movq (% rax ), % r 1 4 movq - 2 1 6 (% rbp ), % rax movq 8 (% rax ), % rbx leaq go . list . Item .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq % r 1 4 , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) movq - 2 1 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 1 . LBB 2 3 : movq - 1 8 4 (% rbp ), % rax movq - 1 7 6 (% rbp ), % rcx movq - 1 6 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 1 6 0 (% rbp ), % rcx movq - 1 5 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 1 4 4 (% rbp ), % rdx movq % rdx , 3 2 (% rax ) . LBE 2 3 : jmp . L 2 2 . L 2 1 : . LBB 2 4 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq go . list . Item .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 2 : . LBE 2 4 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) cmpq $ 0 , - 2 1 6 (% rbp ) jne . L 2 3 call runtime . panicmem @ PLT . L 2 3 : movq - 2 1 6 (% rbp ), % rax addq $ 2 4 , % rax movq % rax , % rdi call sync . RWMutex . Lock @ PLT . LBB 2 5 : cmpq $ 0 , - 2 1 6 (% rbp ) jne . L 2 4 call runtime . panicmem @ PLT . L 2 4 : movq - 2 1 6 (% rbp ), % rax leaq 2 4 (% rax ), % rdx movq $ 0 , - 6 4 (% rbp ) leaq - 6 4 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rdx , (% rax ) movq - 5 6 (% rbp ), % rdx leaq go . list . go . list .. thunk 0 (% rip ), % rdi leaq - 1 8 5 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rax movq % rdx , % rcx movq % rdi , % rdx movq % rax , % rdi call runtime . deferprocStack @ PLT . LBE 2 5 : . LBB 2 6 : movq - 2 1 6 (% rbp ), % rax movq (% rax ), % rax testq % rax , % rax jne . L 2 5 . LBB 2 7 : movq - 2 1 6 (% rbp ), % rax movq - 4 8 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 2 6 . LBB 2 8 : movq % rdx , (% rax ) jmp . L 2 7 . L 2 6 : . LBE 2 8 : . LBB 2 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 7 : . LBE 2 9 : movq - 2 1 6 (% rbp ), % rax addq $ 8 , % rax movq - 4 8 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 2 8 . LBB 3 0 : movq % rdx , (% rax ) jmp . L 2 9 . L 2 8 : . LBE 3 0 : . LBB 3 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 2 9 . L 2 5 : . LBE 3 1 : . LBE 2 7 : . LBB 3 2 : movq - 2 1 6 (% rbp ), % rax movq (% rax ), % rax addq $ 2 4 , % rax movq - 4 8 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 0 . LBB 3 3 : movq % rdx , (% rax ) jmp . L 3 1 . L 3 0 : . LBE 3 3 : . LBB 3 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 1 : . LBE 3 4 : movq - 2 1 6 (% rbp ), % rax movq - 4 8 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 2 . LBB 3 5 : movq % rdx , (% rax ) jmp . L 3 3 . L 3 2 : . LBE 3 5 : . LBB 3 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 3 : . LBE 3 6 : movq - 2 1 6 (% rbp ), % rax movq 8 (% rax ), % rax addq $ 1 6 , % rax movq - 4 8 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 4 . LBB 3 7 : movq % rdx , (% rax ) jmp . L 2 9 . L 3 4 : . LBE 3 7 : . LBB 3 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 9 : . LBE 3 8 : . LBE 3 2 : . LBE 2 6 : . LBB 3 9 : movq - 2 1 6 (% rbp ), % rax movq 1 6 (% rax ), % rdx addq $ 1 , % rdx movq % rdx , 1 6 (% rax ) . LEHE 1 : . LBE 3 9 : . LBB 4 0 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % r 1 2 movl $ 0 , % ebx . L 4 1 : . LBE 4 0 : . LBE 2 2 : leaq - 1 8 5 (% rbp ), % rax movq % rax , % rdi . LEHB 2 : call runtime . deferreturn @ PLT . LEHE 2 : cmpl $ 1 , % ebx je . L 3 5 movq % r 1 2 , % rax jmp . L 4 5 . L 4 2 : leaq - 1 8 5 (% rbp ), % rax movq % rax , % rdi . LEHB 3 : call runtime . checkdefer @ PLT . LEHE 3 : movq - 4 0 (% rbp ), % r 1 2 movl $ 0 , % ebx jmp . L 4 1 . L 4 3 : movq % rax , % r 1 3 movl $ 1 , % ebx jmp . L 4 1 . L 3 5 : movq % r 1 3 , % rax movq % rax , % rdi . LEHB 4 : call _Unwind_Resume @ PLT . L 4 4 : leaq - 1 8 5 (% rbp ), % rax movq % rax , % rdi call runtime . checkdefer @ PLT jmp . L 4 1 . L 4 5 : addq $ 1 9 2 , % rsp . LEHE 4 : popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 2 movl $ 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 2 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq % rdi , - 5 6 (% rbp ) movb $ 0 , - 2 5 (% rbp ) . LBB 2 : . LBB 3 : . LBB 4 : cmpq $ 0 , - 5 6 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 . LBB 5 : movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax sete % al . L 2 : . LBE 5 : . LBE 4 : testb % al , % al je . L 3 . LBB 6 : . LBB 7 : movb $ 1 , - 2 5 (% rbp ) movzbl - 2 5 (% rbp ), % eax jmp . L 1 7 . L 3 : . LBE 7 : . LBE 6 : . LBE 3 : movq - 5 6 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 8 : . LBB 9 : jmp . L 5 . L 2 0 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) movq - 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 2 4 (% rbp ) movq - 1 6 (% rbp ), % rax addq $ 8 , % rax movq - 4 0 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 6 . LBB 1 2 : movq % rdx , (% rax ) jmp . L 7 . L 6 : . LBE 1 2 : . LBB 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 7 : . LBE 1 3 : movq - 1 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 2 4 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) . L 5 : . LBE 1 1 : . LBB 1 4 : cmpq $ 0 , - 8 (% rbp ) setne % al testb % al , % al je . L 8 . LBB 1 5 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax setne % al . L 8 : . LBE 1 5 : . LBE 1 4 : testb % al , % al jne . L 2 0 . LBE 9 : . LBE 8 : . LBB 1 6 : cmpq $ 0 , - 8 (% rbp ) je . L 1 1 . LBB 1 7 : movq - 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 6 (% rbp ) . L 1 1 : . LBE 1 7 : . LBE 1 6 : movq - 4 0 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . LBB 1 8 : . LBB 1 9 : jmp . L 1 2 . L 2 1 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 1 6 (% rbp ), % rax movq 8 (% rax ), % rdx movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rdx , - 1 6 (% rbp ) movq % rax , - 2 4 (% rbp ) . L 1 2 : . LBE 2 2 : . LBE 2 1 : . LBB 2 3 : . LBB 2 4 : cmpq $ 0 , - 1 6 (% rbp ) setne % al testb % al , % al je . L 1 3 . LBB 2 5 : cmpq $ 0 , - 2 4 (% rbp ) setne % al . L 1 3 : . LBE 2 5 : . LBE 2 4 : testb % al , % al je . L 1 4 . LBB 2 6 : movq - 1 6 (% rbp ), % rax movq (% rax ), % rdx movq - 2 4 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx sete % al . L 1 4 : . LBE 2 6 : . LBE 2 3 : testb % al , % al jne . L 2 1 . LBE 1 9 : . LBE 1 8 : . LBB 2 7 : cmpq $ 0 , - 1 6 (% rbp ) sete % al movb % al , - 2 5 (% rbp ) movzbl - 2 5 (% rbp ), % eax . L 1 7 : . LBE 2 7 : . LBE 2 : leave ret
leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 7 2 movl $ 3 4 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 1 : ret . L 3 7 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 9 6 , % rsp movq % rdi , % rcx movq % rsi , % rbx movq % rcx , - 3 3 6 (% rbp ) movq % rbx , - 3 2 8 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) . LBB 2 2 5 : leaq . LC 1 2 0 (% rip ), % rax movl $ 0 , % edx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) . LBB 2 2 6 : movq $ 0 , - 5 6 (% rbp ) movl $ 0 , - 6 0 (% rbp ) . LBB 2 2 7 : . LBB 2 2 8 : . LBB 2 2 9 : movq - 3 2 8 (% rbp ), % r 1 5 movl $ 0 , % ebx . LBE 2 2 9 : jmp . L 3 2 2 . L 3 7 1 : . LBB 2 3 0 : nop . LBE 2 3 0 : . LBB 2 3 1 : . LBB 2 3 2 : movq - 3 2 8 (% rbp ), % rax testq % rbx , % rbx js . L 3 2 3 cmpq % rax , % rbx jge . L 3 2 3 movq - 3 3 6 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 3 2 4 jmp . L 3 6 2 . L 3 2 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 4 : . LBB 2 3 3 : leaq 1 (% rbx ), % r 1 4 . LBE 2 3 3 : jmp . L 3 2 6 . L 3 6 2 : . LBB 2 3 4 : movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rsi movq % rdx , % rdi movl % esi , % eax movq % rdi , % r 1 4 . L 3 2 6 : . LBE 2 3 4 : . LBE 2 3 2 : . LBB 2 3 5 : movq % rbx , - 5 6 (% rbp ) movl % eax , - 6 0 (% rbp ) . LBE 2 3 5 : . LBB 2 3 6 : . LBB 2 3 7 : . LBB 2 3 8 : cmpl $ 3 2 , - 6 0 (% rbp ) sete % al testb % al , % al je . L 3 2 7 . LBB 2 3 9 : movq - 5 6 (% rbp ), % rax subq $ 1 , % rax movq - 3 2 8 (% rbp ), % rdx testq % rax , % rax js . L 3 2 8 cmpq % rdx , % rax jge . L 3 2 8 movq - 3 3 6 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 5 , % al setne % al jmp . L 3 2 7 . L 3 2 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 2 7 : . LBE 2 3 9 : . LBE 2 3 8 : testb % al , % al je . L 3 2 9 . LBB 2 4 0 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) leaq . LC 1 2 9 (% rip ), % rax movq % rax , - 2 7 2 (% rbp ) movq $ 1 , - 2 6 4 (% rbp ) leaq - 2 8 8 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) jmp . L 3 3 0 . L 3 2 9 : . LBE 2 4 0 : . LBE 2 3 7 : . LBB 2 4 1 : cmpl $ 3 2 , - 6 0 (% rbp ) je . L 3 6 6 . LBE 2 4 1 : . LBB 2 4 3 : cmpl $ 9 6 , - 6 0 (% rbp ) jne . L 3 3 2 . LBB 2 4 4 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) leaq . LC 1 2 9 (% rip ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 , - 2 3 2 (% rbp ) leaq - 2 5 6 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) jmp . L 3 3 0 . L 3 3 2 : . LBE 2 4 4 : . LBE 2 4 3 : . LBB 2 4 5 : cmpl $ 3 7 , - 6 0 (% rbp ) jne . L 3 3 3 . LBB 2 4 6 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) leaq . LC 1 3 0 (% rip ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 1 , - 2 0 0 (% rbp ) leaq - 2 2 4 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) jmp . L 3 3 0 . L 3 3 3 : . LBE 2 4 6 : . LBE 2 4 5 : . LBB 2 4 7 : . LBB 2 4 8 : cmpl $ 4 0 , - 6 0 (% rbp ) sete % al testb % al , % al je . L 3 3 4 . LBB 2 4 9 : movq - 5 6 (% rbp ), % rax subq $ 1 , % rax movq - 3 2 8 (% rbp ), % rdx testq % rax , % rax js . L 3 3 5 cmpq % rdx , % rax jge . L 3 3 5 movq - 3 3 6 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 5 , % al setne % al jmp . L 3 3 4 . L 3 3 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 3 4 : . LBE 2 4 9 : . LBE 2 4 8 : testb % al , % al je . L 3 3 6 . LBB 2 5 0 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) leaq . LC 1 2 9 (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) jmp . L 3 3 0 . L 3 3 6 : . LBE 2 5 0 : . LBE 2 4 7 : . LBB 2 5 1 : cmpl $ 4 1 , - 6 0 (% rbp ) je . L 3 6 7 . LBE 2 5 1 : . LBB 2 5 3 : cmpl $ 4 4 , - 6 0 (% rbp ) je . L 3 6 8 . LBE 2 5 3 : . LBB 2 5 5 : cmpl $ 3 9 , - 6 0 (% rbp ) je . L 3 6 9 . LBE 2 5 5 : . LBB 2 5 7 : cmpl $ 6 3 , - 6 0 (% rbp ) je . L 3 7 0 . LBE 2 5 7 : . LBB 2 5 9 : . LBB 2 6 0 : cmpq $ 0 , - 5 6 (% rbp ) setg % al testb % al , % al je . L 3 4 1 . LBB 2 6 1 : movq - 5 6 (% rbp ), % rax subq $ 1 , % rax movq - 3 2 8 (% rbp ), % rdx testq % rax , % rax js . L 3 4 2 cmpq % rdx , % rax jge . L 3 4 2 movq - 3 3 6 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 5 , % al sete % al jmp . L 3 4 1 . L 3 4 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 4 1 : . LBE 2 6 1 : . LBE 2 6 0 : testb % al , % al je . L 3 4 3 . LBB 2 6 2 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movl - 6 0 (% rbp ), % eax movslq % eax , % rdx leaq - 1 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . intstring @ PLT movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) jmp . L 3 3 0 . L 3 4 3 : . LBE 2 6 2 : . LBE 2 5 9 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movl - 6 0 (% rbp ), % eax movslq % eax , % rdx leaq - 1 0 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . intstring @ PLT movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) leaq - 9 6 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) jmp . L 3 3 0 . L 3 6 6 : . LBB 2 6 3 : . LBB 2 4 2 : nop jmp . L 3 3 0 . L 3 6 7 : . LBE 2 4 2 : . LBE 2 6 3 : . LBB 2 6 4 : . LBB 2 5 2 : nop jmp . L 3 3 0 . L 3 6 8 : . LBE 2 5 2 : . LBE 2 6 4 : . LBB 2 6 5 : . LBB 2 5 4 : nop jmp . L 3 3 0 . L 3 6 9 : . LBE 2 5 4 : . LBE 2 6 5 : . LBB 2 6 6 : . LBB 2 5 6 : nop jmp . L 3 3 0 . L 3 7 0 : . LBE 2 5 6 : . LBE 2 6 6 : . LBB 2 6 7 : . LBB 2 5 8 : nop . L 3 3 0 : . LBE 2 5 8 : . LBE 2 6 7 : . LBE 2 3 6 : . LBE 2 3 1 : . LBB 2 6 8 : movq % r 1 4 , % rbx . L 3 2 2 : . LBE 2 6 8 : cmpq % r 1 5 , % rbx jl . L 3 7 1 . LBE 2 2 8 : . LBE 2 2 7 : . LBE 2 2 6 : . LBB 2 6 9 : movq - 3 2 8 (% rbp ), % rax subq $ 1 , % rax movq - 3 2 8 (% rbp ), % rdx testq % rax , % rax js . L 3 4 6 cmpq % rdx , % rax jg . L 3 4 6 movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rdx cmpq % rdx , % rax jne . L 3 4 7 jmp . L 3 6 4 . L 3 4 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 3 4 7 : movq % rax , % rdx jmp . L 3 4 9 . L 3 6 4 : movl $ 0 , % edx . L 3 4 9 : addq % rcx , % rdx movq % rdx , % r 1 2 movq - 3 2 8 (% rbp ), % rdx subq % rax , % rdx movq % rdx , % r 1 3 movq % r 1 3 , % rax cmpq $ 1 , % rax jne . L 3 5 0 movq % r 1 2 , % rdx leaq . LC 1 2 9 (% rip ), % rax cmpq % rax , % rdx jne . L 3 5 1 movl $ 1 , % eax jmp . L 3 5 3 . L 3 5 1 : movq % r 1 2 , % rax movzbl (% rax ), % eax movzbl % al , % eax leaq . LC 1 2 9 (% rip ), % rdx movzbl (% rdx ), % edx movzbl % dl , % edx subl % edx , % eax testl % eax , % eax sete % al jmp . L 3 5 3 . L 3 5 0 : movl $ 0 , % eax . L 3 5 3 : testb % al , % al je . L 3 5 4 . LBB 2 7 0 : movq - 3 2 8 (% rbp ), % rdx movl $ 0 , % eax leaq - 1 (% rdx ), % rdi movq - 3 2 8 (% rbp ), % rdx testq % rdi , % rdi js . L 3 5 5 cmpq % rdx , % rdi jg . L 3 5 5 testq % rax , % rax jns . L 3 5 6 jmp . L 3 5 7 . L 3 5 5 : movq % rdx , % rsi call runtime . goPanicSliceAlen @ PLT . L 3 5 6 : cmpq % rdi , % rax jg . L 3 5 7 movq - 3 3 6 (% rbp ), % rdx cmpq % rax , % rdi jne . L 3 5 8 jmp . L 3 6 5 . L 3 5 7 : movq % rdi , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 3 5 8 : movq % rax , % rcx jmp . L 3 6 0 . L 3 6 5 : movl $ 0 , % ecx . L 3 6 0 : addq % rdx , % rcx subq % rax , % rdi movq % rdi , % rdx movq % rcx , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) . L 3 5 4 : . LBE 2 7 0 : . LBE 2 6 9 : . LBB 2 7 1 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx . LBE 2 7 1 : . LBE 2 2 5 : addq $ 2 9 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 8 8 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 8 0 movl $ 8 8 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 4 8 , % rsp movq $ 0 , - 5 6 (% rbp ) . LBB 2 : leaq - 8 0 0 (% rbp ), % rdx movl $ 0 , % eax movl $ 5 1 , % ecx movq % rdx , % rdi rep stosq leaq - 8 0 0 (% rbp ), % rax movq % rax , - 8 3 2 (% rbp ) movq $ 1 7 , - 8 2 4 (% rbp ) movq $ 1 7 , - 8 1 6 (% rbp ) movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 8 6 4 (% rbp ) movq % rbx , - 8 5 6 (% rbp ) movq % rbx , - 8 4 8 (% rbp ) . LBB 3 : movq $ 0 , - 6 4 (% rbp ) movq $ 0 , - 8 8 0 (% rbp ) movq $ 0 , - 8 7 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 7 6 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 7 4 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 3 7 6 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 3 8 4 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rbx , - 6 4 (% rbp ) movq % rax , - 8 8 0 (% rbp ) movq % rdx , - 8 7 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 8 7 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 8 2 4 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) jns . L 4 jmp . L 5 . L 3 : . LBE 1 1 : . LBB 1 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 6 : . LBB 1 7 : cmpq % rax , - 9 6 (% rbp ) jl . L 5 6 . L 5 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 6 : movq - 8 3 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 4 4 (% rbp ), % r 1 3 leaq 1 (% r 1 3 ), % rdx movq - 3 3 6 (% rbp ), % rcx movq % rdx , % rsi movq % rcx , % rax cmpq % rax , % rsi jbe . L 7 . LBB 1 2 : movq - 8 2 4 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 8 cmpq % rax , - 9 6 (% rbp ) jl . L 5 7 . L 8 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 7 : movq - 8 3 2 (% rbp ), % rdi movq - 9 6 (% rbp ), % rsi movq % rsi , % rax addq % rax , % rax addq % rsi , % rax salq $ 3 , % rax leaq (% rdi ,% rax ), % r 1 2 movq - 3 5 2 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rax movq % rdx , % r 9 movq % rcx , % r 8 movq % r 1 3 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi movq % rax , % rdi call runtime . growslice @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq % rax , 8 (% r 1 2 ) movq - 3 0 4 (% rbp ), % rax movq % rax , 1 6 (% r 1 2 ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 . LBB 1 3 : movq - 3 2 0 (% rbp ), % rax movq % rax , (% r 1 2 ) jmp . L 1 1 . L 1 0 : . LBE 1 3 : . LBB 1 4 : movq - 3 2 0 (% rbp ), % rax movq % rax , % rdx movq % r 1 2 , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 1 1 . L 7 : . LBE 1 4 : . LBE 1 2 : . LBB 1 5 : movq - 8 2 4 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 1 2 cmpq % rax , - 9 6 (% rbp ) jl . L 5 8 . L 1 2 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 8 : movq - 8 3 2 (% rbp ), % rsi movq - 9 6 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq - 3 5 2 (% rbp ), % rsi movq - 3 3 6 (% rbp ), % rcx movq % rsi , (% rax ) movq % rdx , 8 (% rax ) movq % rcx , 1 6 (% rax ) . L 1 1 : . LBE 1 5 : movq - 8 2 4 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 1 4 cmpq % rax , - 9 6 (% rbp ) jl . L 5 9 . L 1 4 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 9 : movq - 8 3 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % r 1 3 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 6 4 (% rbp ), % rax movq % rax , (% rdx ) movq - 8 5 6 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 6 cmpq % rax , - 6 4 (% rbp ) jl . L 6 0 . L 1 6 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 0 : movq - 8 6 4 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 1 , (% rax ) . LBE 1 7 : . LBE 8 : . LBB 1 8 : addq $ 1 , % rbx . L 2 : . LBE 1 8 : cmpq % r 1 4 , % rbx jl . L 7 4 . LBE 5 : . LBE 4 : . LBE 3 : movq $ 1 , - 4 0 (% rbp ) . LBB 1 9 : movq $ 1 , - 4 8 (% rbp ) . LBB 2 0 : jmp . L 2 0 . L 7 8 : . LBB 2 1 : nop . LBE 2 1 : . LBB 2 2 : . LBB 2 3 : movq $ 0 , - 8 0 (% rbp ) . LBB 2 4 : movq - 8 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 1 cmpq % rax , - 4 8 (% rbp ) jl . L 6 2 . L 2 1 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 2 : movq - 8 3 2 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 7 2 (% rbp ) . LBB 2 5 : . LBB 2 6 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 2 6 : jmp . L 2 3 . L 7 7 : . LBB 2 7 : nop . LBE 2 7 : . LBB 2 8 : . LBB 2 9 : movq - 2 4 8 (% rbp ), % rax testq % rbx , % rbx js . L 2 4 cmpq % rax , % rbx jge . L 2 4 movq - 2 5 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 2 9 : . LBB 3 0 : movq % rax , - 8 0 (% rbp ) . LBE 3 0 : . LBB 3 1 : . LBB 3 2 : movq $ 0 , - 8 8 (% rbp ) . LBB 3 3 : movq - 4 8 (% rbp ), % rax addq $ 1 , % rax movq - 8 2 4 (% rbp ), % rdx testq % rax , % rax jns . L 2 5 jmp . L 2 6 . L 2 4 : . LBE 3 3 : . LBE 3 2 : . LBE 3 1 : . LBB 5 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : . LBE 5 2 : . LBB 5 3 : . LBB 5 1 : . LBB 5 0 : cmpq % rdx , % rax jl . L 6 3 . L 2 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 3 : movq - 8 3 2 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) . LBB 3 4 : . LBB 3 5 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % r 1 4 movl $ 0 , % r 1 2 d . LBE 3 5 : jmp . L 2 8 . L 7 6 : . LBB 3 6 : nop . LBE 3 6 : . LBB 3 7 : . LBB 3 8 : movq - 1 8 4 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 2 9 cmpq % rax , % r 1 2 jge . L 2 9 movq - 1 9 2 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 3 8 : . LBB 3 9 : movq % rax , - 8 8 (% rbp ) . LBE 3 9 : . LBB 4 0 : . LBB 4 1 : movq - 8 5 6 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) jns . L 3 0 jmp . L 3 1 . L 2 9 : . LBE 4 1 : . LBE 4 0 : . LBB 4 7 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : . LBE 4 7 : . LBB 4 8 : . LBB 4 3 : cmpq % rax , - 8 8 (% rbp ) jl . L 6 4 . L 3 1 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 4 : movq - 8 5 6 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 3 3 cmpq % rax , - 8 0 (% rbp ) jl . L 6 5 . L 3 3 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 5 : movq - 8 6 4 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 8 6 4 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jg . L 7 5 . LBE 4 3 : . LBB 4 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 3 7 cmpq % rax , - 8 0 (% rbp ) jl . L 6 6 . L 3 7 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 3 9 cmpq % rax , - 8 8 (% rbp ) jl . L 6 7 . L 3 9 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 7 : movq 1 6 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 1 6 (% rbp ), % rcx movq - 8 0 (% rbp ), % rdx salq $ 4 , % rdx addq % rdx , % rcx movq 8 (% rax ), % rdx movq (% rax ), % rax movq (% rcx ), % rdi movq 8 (% rcx ), % rsi movq % rdx , % rcx movq % rax , % rdx call go . problem 1 0 4 8 . isPredecessor testb % al , % al je . L 3 6 . LBB 4 5 : movq - 8 5 6 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 4 1 cmpq % rax , - 8 8 (% rbp ) jl . L 6 8 . L 4 1 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 8 : movq - 8 5 6 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 4 3 cmpq % rax , - 8 0 (% rbp ) jl . L 6 9 . L 4 3 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 9 : movq - 8 6 4 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 8 6 4 (% rbp ), % rcx movq - 8 8 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax addq $ 1 , % rdx movq % rdx , (% rax ) jmp . L 3 6 . L 7 5 : . LBE 4 5 : . LBE 4 4 : . LBB 4 6 : . LBB 4 2 : nop . L 3 6 : . LBE 4 2 : . LBE 4 6 : . LBE 4 8 : . LBE 3 7 : . LBB 4 9 : addq $ 1 , % r 1 2 . L 2 8 : . LBE 4 9 : cmpq % r 1 4 , % r 1 2 jl . L 7 6 . LBE 3 4 : . LBE 5 0 : . LBE 5 1 : . LBE 5 3 : . LBE 2 8 : . LBB 5 4 : addq $ 1 , % rbx . L 2 3 : . LBE 5 4 : cmpq % r 1 3 , % rbx jl . L 7 7 . LBE 2 5 : . LBE 2 4 : . LBE 2 3 : . LBE 2 2 : . LBB 5 5 : addq $ 1 , - 4 8 (% rbp ) . L 2 0 : . LBE 5 5 : movq - 4 8 (% rbp ), % rax addq $ 1 , % rax cmpq $ 1 6 , % rax jle . L 7 8 . LBE 2 0 : . LBE 1 9 : . LBB 5 6 : movq $ 0 , - 7 2 (% rbp ) . LBB 5 7 : . LBB 5 8 : . LBB 5 9 : movq - 8 6 4 (% rbp ), % rax movq - 8 5 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 8 4 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 5 9 : jmp . L 5 1 . L 7 9 : . LBB 6 0 : nop . LBE 6 0 : . LBB 6 1 : . LBB 6 2 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 5 2 cmpq % rax , % rbx jge . L 5 2 movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 6 2 : . LBB 6 3 : movq % rax , - 7 2 (% rbp ) . LBE 6 3 : . LBB 6 4 : movq - 7 2 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 1 0 4 8 . max movq % rax , - 4 0 (% rbp ) . LBE 6 4 : . LBE 6 1 : . LBB 6 6 : addq $ 1 , % rbx jmp . L 5 1 . L 5 2 : . LBE 6 6 : . LBB 6 7 : . LBB 6 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : . LBE 6 5 : . LBE 6 7 : cmpq % r 1 2 , % rbx jl . L 7 9 . LBE 5 8 : . LBE 5 7 : . LBE 5 6 : . LBB 6 8 : movq - 4 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax . LBE 6 8 : . LBE 2 : addq $ 8 4 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 3 movl $ 4 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 3 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq $ 0 , - 2 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 8 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 4 cmpq % rdx , % rax jl . L 2 3 . L 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 1 6 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 6 . L 3 1 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 7 cmpq % rax , - 8 (% rbp ) jl . L 2 4 . L 7 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : movq 1 6 (% rbp ), % rdx movq - 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rcx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 9 cmpq % rax , - 1 6 (% rbp ) jl . L 2 5 . L 9 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 1 cmpq % rdx , % rax jl . L 2 6 . L 1 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rcx , - 8 (% rbp ) movq % rax , - 1 6 (% rbp ) . L 6 : . LBE 7 : . LBE 6 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jne . L 3 1 . LBE 4 : . LBE 3 : movq $ 0 , - 8 (% rbp ) . LBB 8 : . LBB 9 : jmp . L 1 5 . L 3 2 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 1 6 cmpq % rax , - 8 (% rbp ) jl . L 2 8 . L 1 6 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq 1 6 (% rbp ), % rdx movq - 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 8 cmpq % rax , - 1 6 (% rbp ) jl . L 2 9 . L 1 8 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq 1 6 (% rbp ), % rcx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rdx , - 8 (% rbp ) movq % rax , - 1 6 (% rbp ) . L 1 5 : . LBE 1 2 : . LBE 1 1 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jne . L 3 2 . LBE 9 : . LBE 8 : . LBB 1 3 : movq - 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . LBE 1 3 : . LBE 2 : leave ret
. LFB 0 : leaq - 8 2 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 8 movl $ 8 2 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 7 7 6 , % rsp movq % rdi , - 7 9 2 (% rbp ) movq $ 1 , - 6 8 8 (% rbp ) movq $ 1 , - 6 8 0 (% rbp ) movq $ 1 , - 6 7 2 (% rbp ) movq $ 2 , - 6 6 4 (% rbp ) movq $ 2 , - 6 5 6 (% rbp ) movq $ 3 , - 6 4 8 (% rbp ) movq $ 1 , - 6 4 0 (% rbp ) movq $ 2 , - 6 3 2 (% rbp ) movq $ 2 , - 6 2 4 (% rbp ) movq $ 0 , - 6 0 8 (% rbp ) movq $ 0 , - 6 0 0 (% rbp ) movq $ 1 , - 5 9 2 (% rbp ) movq $ 1 , - 5 8 4 (% rbp ) movq $ 1 , - 5 7 6 (% rbp ) movq $ 1 , - 5 6 8 (% rbp ) movq $ 2 , - 5 6 0 (% rbp ) movq $ 3 , - 5 5 2 (% rbp ) movq $ 3 , - 5 4 4 (% rbp ) movq $ 1 , - 5 3 6 (% rbp ) movq $ 2 , - 5 2 8 (% rbp ) movq $ 2 , - 5 2 0 (% rbp ) movq $ 2 , - 5 1 2 (% rbp ) movq $ 2 , - 5 0 4 (% rbp ) movq $ 2 , - 4 9 6 (% rbp ) leaq - 6 8 8 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq $ 6 , - 4 7 2 (% rbp ) movq $ 6 , - 4 6 4 (% rbp ) leaq - 6 4 0 (% rbp ), % rax movq % rax , - 4 5 6 (% rbp ) movq $ 3 , - 4 4 8 (% rbp ) movq $ 3 , - 4 4 0 (% rbp ) leaq - 6 0 8 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq $ 9 , - 4 2 4 (% rbp ) movq $ 9 , - 4 1 6 (% rbp ) leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 8 (% rbp ) movq - 4 8 8 (% rbp ), % rax movq % rax , - 4 0 8 (% rbp ) movq $ 0 , - 4 0 0 (% rbp ) movq $ 0 , - 3 9 2 (% rbp ) leaq - 5 3 6 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 1 , - 3 7 6 (% rbp ) movq $ 1 , - 3 6 8 (% rbp ) leaq - 5 2 8 (% rbp ), % rax movq % rax , - 3 6 0 (% rbp ) movq $ 2 , - 3 5 2 (% rbp ) movq $ 2 , - 3 4 4 (% rbp ) leaq - 5 1 2 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq $ 3 , - 3 2 8 (% rbp ) movq $ 3 , - 3 2 0 (% rbp ) leaq - 4 8 0 (% rbp ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 7 , - 7 1 2 (% rbp ) movq $ 7 , - 7 0 4 (% rbp ) movq $ 5 , - 3 0 4 (% rbp ) movq $ 3 , - 2 9 6 (% rbp ) movq $ 7 , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) movq $ 1 , - 2 7 2 (% rbp ) movq $ 2 , - 2 6 4 (% rbp ) movq $ 2 , - 2 5 6 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 7 5 2 (% rbp ) movq $ 7 , - 7 4 4 (% rbp ) movq $ 7 , - 7 3 6 (% rbp ) . LBB 2 : movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 7 8 4 (% rbp ) movq $ 0 , - 7 7 6 (% rbp ) movq $ 0 , - 7 6 8 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rax , - 8 0 0 (% rbp ) movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 1 7 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 2 0 8 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) . LBE 8 : . LBB 9 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 7 8 4 (% rbp ) movq % rdx , - 7 7 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 7 6 8 (% rbp ) . LBE 9 : . LBB 1 0 : . LBB 1 1 : subq $ 8 , % rsp pushq - 7 6 8 (% rbp ) pushq - 7 7 6 (% rbp ) pushq - 7 8 4 (% rbp ) call go . rdfsa 2 . removeDuplicates addq $ 3 2 , % rsp movq % rax , - 6 4 (% rbp ) movq - 7 4 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) jns . L 4 jmp . L 5 . L 3 : . LBE 1 1 : . LBE 1 0 : . LBB 1 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 6 : . LBB 1 7 : . LBB 1 5 : cmpq % rax , - 5 6 (% rbp ) jl . L 1 4 . L 5 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : movq - 7 5 2 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 6 4 (% rbp ) je . L 7 . LBB 1 2 : movq - 7 4 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 8 cmpq % rax , - 5 6 (% rbp ) jl . L 1 5 . L 8 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : leaq int .. d (% rip ), % rax movq % rax , - 8 1 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 7 5 2 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 1 5 2 (% rbp ), % rax movq (% rdx ), % rdx movq % rdx , (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 8 0 8 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 4 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 4 4 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 8 1 6 (% rbp ), % xmm 0 movups % xmm 0 , - 1 2 8 (% rbp ) movq % r 1 4 , - 1 1 2 (% rbp ) movq % r 1 5 , - 1 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 . LBB 1 3 : movq - 1 3 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 1 3 : jmp . L 1 1 . L 1 0 : . LBB 1 4 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 1 : . LBE 1 4 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 2 , - 8 8 (% rbp ) movq $ 2 , - 8 0 (% rbp ) leaq . LC 7 (% rip ), % r 1 2 movl $ 1 9 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 7 9 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 7 : . LBE 1 2 : . LBE 1 5 : . LBE 1 7 : . LBE 7 : . LBB 1 8 : addq $ 1 , % rbx . L 2 : . LBE 1 8 : cmpq - 8 0 0 (% rbp ), % rbx jl . L 1 7 . LBE 4 : . LBE 3 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 0 movl $ 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 0 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 7 2 , % rsp movq % rdi , - 7 2 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq - 7 2 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 6 4 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq % rbx , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq - 6 4 (% rbp ), % rax addq $ 8 , % rax movq $ 1 , (% rax ) movq - 5 6 (% rbp ), % rax cmpq $ 2 , % rax jg . L 3 movq % rax , % rsi movl $ 2 , % edi call runtime . goPanicIndex @ PLT . L 3 : movq - 6 4 (% rbp ), % rax addq $ 1 6 , % rax movq $ 1 , (% rax ) . LBB 3 : movq $ 3 , - 2 4 (% rbp ) . LBB 4 : jmp . L 4 . L 2 9 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 5 cmpq % rax , - 2 4 (% rbp ) jl . L 2 1 . L 5 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : movq - 6 4 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $- 1 , (% rax ) . LBB 7 : movq $ 1 , - 3 2 (% rbp ) . LBB 8 : jmp . L 7 . L 2 8 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 8 cmpq % rax , - 2 4 (% rbp ) jl . L 2 2 . L 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : movq - 2 4 (% rbp ), % rax subq - 3 2 (% rbp ), % rax imulq - 3 2 (% rbp ), % rax movq % rax , % rdx movq - 6 4 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call main . max movq % rax , % rcx movq - 2 4 (% rbp ), % rax subq - 3 2 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 1 0 cmpq % rdx , % rax jl . L 2 3 . L 1 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : movq - 6 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax imulq - 3 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call main . max movq % rax , % rdx movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 2 cmpq % rax , - 2 4 (% rbp ) jl . L 2 4 . L 1 2 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : movq - 6 4 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq % rdx , (% rax ) . LBE 1 0 : . LBB 1 1 : addq $ 1 , - 3 2 (% rbp ) . L 7 : . LBE 1 1 : movq - 3 2 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax jl . L 2 8 . LBE 8 : . LBE 7 : . LBE 6 : . LBB 1 2 : addq $ 1 , - 2 4 (% rbp ) . L 4 : . LBE 1 2 : movq - 2 4 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jle . L 2 9 . LBE 4 : . LBE 3 : . LBB 1 3 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 1 8 cmpq % rax , - 7 2 (% rbp ) jl . L 2 7 . L 1 8 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq - 6 4 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 1 3 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 0 movl $ 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 : . LBB 3 : . LBB 4 : movq 1 6 (% rbp ), % rax testq % rax , % rax sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 . LBB 5 : movq 2 4 (% rbp ), % rax testq % rax , % rax setle % al . L 2 : . LBE 5 : . LBE 4 : testb % al , % al je . L 3 . LBB 6 : . LBB 7 : movq $ 0 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 4 . L 3 : . LBE 7 : . LBE 6 : . LBE 3 : movq $ 0 , - 8 (% rbp ) . LBB 8 : movq $ 0 , - 1 6 (% rbp ) . LBB 9 : jmp . L 5 . L 1 9 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 6 cmpq % rax , - 1 6 (% rbp ) jl . L 1 5 . L 6 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) je . L 8 . LBB 1 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 9 cmpq % rax , - 8 (% rbp ) jl . L 1 6 . L 9 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 1 cmpq % rax , - 1 6 (% rbp ) jl . L 1 7 . L 1 1 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) addq $ 1 , - 8 (% rbp ) . L 8 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 4 : addq $ 1 , - 1 6 (% rbp ) . L 5 : . LBE 1 4 : movq 2 4 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) jl . L 1 9 . LBE 9 : . LBE 8 : . LBB 1 5 : movq - 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 4 : . LBE 1 5 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 7 movl $ 8 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 7 : pushq % rbp movq % rsp , % rbp subq $ 8 0 , % rsp movq $ 0 , - 2 4 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) . LBB 3 : movq $ 0 , - 1 6 (% rbp ) . LBB 4 : jmp . L 2 . L 1 6 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : cmpq $ 0 , - 1 6 (% rbp ) jne . L 3 . LBB 8 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq 1 6 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 2 (% rbp ) movq - 4 0 (% rbp ), % rax testq % rax , % rax jg . L 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 5 : movq - 4 8 (% rbp ), % rax movq (% rax ), % rax addq % rax , - 8 (% rbp ) jmp . L 1 0 . L 3 : . LBE 8 : . LBE 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 7 cmpq % rax , - 1 6 (% rbp ) jl . L 1 4 . L 7 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : movq 1 6 (% rbp ), % rcx movq - 1 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 6 4 (% rbp ) subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) call sort . Ints @ PLT addq $ 3 2 , % rsp movq - 7 2 (% rbp ), % rax testq % rax , % rax jg . L 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 9 : movq - 8 0 (% rbp ), % rax movq (% rax ), % rax addq % rax , - 8 (% rbp ) . L 1 0 : . LBE 6 : . LBB 9 : addq $ 1 , - 1 6 (% rbp ) . L 2 : . LBE 9 : movq 2 4 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) jl . L 1 6 . LBE 4 : . LBE 3 : . LBB 1 0 : movq - 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . LBE 1 0 : . LBE 2 : leave ret
leaq - 1 3 6 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 9 movl $ 1 3 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 5 : ret . L 5 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 3 2 0 , % rsp . LBB 3 3 : leaq main . Person .. d (% rip ), % r 1 2 leaq main . Person .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 0 0 (% rbp ) movq $ 0 , - 9 9 2 (% rbp ) movq $ 0 , - 9 8 4 (% rbp ) movq $ 0 , - 9 7 6 (% rbp ) movq $ 0 , - 9 6 8 (% rbp ) movq $ 0 , - 9 6 0 (% rbp ) movq $ 0 , - 9 5 2 (% rbp ) movq $ 0 , - 9 4 4 (% rbp ) movq $ 0 , - 9 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 6 . LBB 3 4 : movq - 1 0 0 0 (% rbp ), % rcx movq - 9 9 2 (% rbp ), % rax movq - 9 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 7 6 (% rbp ), % rax movq - 9 6 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 9 6 0 (% rbp ), % rax movq - 9 5 2 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 9 4 4 (% rbp ), % rax movq - 9 3 6 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) . LBE 3 4 : jmp . L 3 7 . L 3 6 : . LBB 3 5 : movq - 1 0 0 0 (% rbp ), % rcx leaq - 9 9 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq main . Person .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 7 : . LBE 3 5 : movq - 1 0 0 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call reflect . TypeOf @ PLT movq % rax , % rcx movq 2 3 2 (% rcx ), % rcx movq % rdx , % rax movq % rax , % rdi call *% rcx . LVL 6 : movq % rax , - 1 3 6 0 (% rbp ) movq % rdx , - 1 3 5 2 (% rbp ) leaq main . Person .. d (% rip ), % r 1 4 leaq main . Person .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 2 0 (% rbp ) movq $ 0 , - 9 1 2 (% rbp ) movq $ 0 , - 9 0 4 (% rbp ) movq $ 0 , - 8 9 6 (% rbp ) movq $ 0 , - 8 8 8 (% rbp ) movq $ 0 , - 8 8 0 (% rbp ) movq $ 0 , - 8 7 2 (% rbp ) movq $ 0 , - 8 6 4 (% rbp ) movq $ 0 , - 8 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 8 . LBB 3 6 : movq - 9 2 0 (% rbp ), % rcx movq - 9 1 2 (% rbp ), % rax movq - 9 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 8 9 6 (% rbp ), % rax movq - 8 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 8 8 0 (% rbp ), % rax movq - 8 7 2 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 8 6 4 (% rbp ), % rax movq - 8 5 6 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) . LBE 3 6 : jmp . L 3 9 . L 3 8 : . LBB 3 7 : movq - 9 2 0 (% rbp ), % rcx leaq - 9 1 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq main . Person .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 9 : . LBE 3 7 : movq - 9 2 0 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call reflect . TypeOf @ PLT movq % rax , % r 1 2 movq % rdx , % r 1 3 movq main . TYPE_REGISTRY (% rip ), % rax movq - 1 3 6 0 (% rbp ), % rdx movq - 1 3 5 2 (% rbp ), % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 reflect . Type (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq % rax , % rcx movq % r 1 2 , % rax movq % rax , (% rcx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 0 . LBB 3 8 : movq % r 1 3 , % rax movq % rax , 8 (% rcx ) jmp . L 4 1 . L 4 0 : . LBE 3 8 : . LBB 3 9 : movq % r 1 3 , % rax movq % rax , % rdx leaq 8 (% rcx ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 4 1 : . LBE 3 9 : . LBE 3 3 : . LBB 4 0 : leaq main . PersonDTO .. d (% rip ), % rax movq % rax , - 1 2 9 6 (% rbp ) leaq main . PersonDTO .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 4 0 (% rbp ) movq $ 0 , - 8 3 2 (% rbp ) movq $ 0 , - 8 2 4 (% rbp ) movq $ 0 , - 8 1 6 (% rbp ) movq $ 0 , - 8 0 8 (% rbp ) movq $ 0 , - 8 0 0 (% rbp ) movq $ 0 , - 7 9 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 2 . LBB 4 1 : movq - 8 4 0 (% rbp ), % rcx movq - 8 3 2 (% rbp ), % rax movq - 8 2 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 4 1 : jmp . L 4 3 . L 4 2 : . LBB 4 2 : movq - 8 4 0 (% rbp ), % rcx leaq - 8 3 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq main . PersonDTO .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 3 : . LBE 4 2 : movq - 8 4 0 (% rbp ), % rax movq % rax , - 1 2 8 8 (% rbp ) movq - 1 2 9 6 (% rbp ), % rax movq - 1 2 8 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call reflect . TypeOf @ PLT movq % rax , % rcx movq 2 3 2 (% rcx ), % rcx movq % rdx , % rax movq % rax , % rdi call *% rcx . LVL 7 : movq % rax , % r 1 4 movq % rdx , % r 1 5 leaq main . PersonDTO .. d (% rip ), % rax movq % rax , - 1 2 8 0 (% rbp ) leaq main . PersonDTO .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 7 6 (% rbp ) movq $ 0 , - 7 6 8 (% rbp ) movq $ 0 , - 7 6 0 (% rbp ) movq $ 0 , - 7 5 2 (% rbp ) movq $ 0 , - 7 4 4 (% rbp ) movq $ 0 , - 7 3 6 (% rbp ) movq $ 0 , - 7 2 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 4 . LBB 4 3 : movq - 7 7 6 (% rbp ), % rcx movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 4 3 : jmp . L 4 5 . L 4 4 : . LBB 4 4 : movq - 7 7 6 (% rbp ), % rcx leaq - 7 6 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq main . PersonDTO .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 5 : . LBE 4 4 : movq - 7 7 6 (% rbp ), % rax movq % rax , - 1 2 7 2 (% rbp ) movq - 1 2 8 0 (% rbp ), % rax movq - 1 2 7 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call reflect . TypeOf @ PLT movq % rax , % r 1 2 movq % rdx , % r 1 3 movq main . TYPE_REGISTRY (% rip ), % rax movq % r 1 4 , % rdx movq % r 1 5 , % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 reflect . Type (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq % rax , % rcx movq % r 1 2 , % rax movq % rax , (% rcx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 6 . LBB 4 5 : movq % r 1 3 , % rax movq % rax , 8 (% rcx ) jmp . L 4 7 . L 4 6 : . LBE 4 5 : . LBB 4 6 : movq % r 1 3 , % rax movq % rax , % rdx leaq 8 (% rcx ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 4 7 : . LBE 4 6 : . LBE 4 0 : movl $ 7 , % ebx leaq . LC 4 9 (% rip ), % rax movq % rax , - 1 2 6 4 (% rbp ) movq $ 1 0 , - 1 2 5 6 (% rbp ) movq - 1 2 6 4 (% rbp ), % r 1 4 movq - 1 2 5 6 (% rbp ), % r 1 5 leaq . LC 5 0 (% rip ), % rax movq % rax , - 1 2 4 8 (% rbp ) movq $ 1 2 , - 1 2 4 0 (% rbp ) movq - 1 2 4 8 (% rbp ), % r 1 2 movq - 1 2 4 0 (% rbp ), % r 1 3 leaq - 7 2 0 (% rbp ), % rax movq % rax , % rdi call time . Now @ PLT movq % rbx , - 1 0 7 2 (% rbp ) movq % r 1 4 , - 1 0 6 4 (% rbp ) movq % r 1 5 , - 1 0 5 6 (% rbp ) movq % r 1 2 , - 1 0 4 8 (% rbp ) movq % r 1 3 , - 1 0 4 0 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , - 1 0 3 2 (% rbp ) movq % rdx , - 1 0 2 4 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq % rax , - 1 0 1 6 (% rbp ) leaq main . Person .. d (% rip ), % rax movq % rax , - 1 2 3 2 (% rbp ) leaq main . Person .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 9 6 (% rbp ) movq - 1 0 7 2 (% rbp ), % rax movq - 1 0 6 4 (% rbp ), % rdx movq % rax , - 6 8 8 (% rbp ) movq % rdx , - 6 8 0 (% rbp ) movq - 1 0 5 6 (% rbp ), % rax movq - 1 0 4 8 (% rbp ), % rdx movq % rax , - 6 7 2 (% rbp ) movq % rdx , - 6 6 4 (% rbp ) movq - 1 0 4 0 (% rbp ), % rax movq - 1 0 3 2 (% rbp ), % rdx movq % rax , - 6 5 6 (% rbp ) movq % rdx , - 6 4 8 (% rbp ) movq - 1 0 2 4 (% rbp ), % rax movq - 1 0 1 6 (% rbp ), % rdx movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 8 . LBB 4 7 : movq - 6 9 6 (% rbp ), % rcx movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) . LBE 4 7 : jmp . L 4 9 . L 4 8 : . LBB 4 8 : movq - 6 9 6 (% rbp ), % rax leaq - 6 8 8 (% rbp ), % rdx movq % rax , % rsi leaq main . Person .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 9 : . LBE 4 8 : movq - 6 9 6 (% rbp ), % rax movq % rax , - 1 2 2 4 (% rbp ) movq - 1 2 3 2 (% rbp ), % rax movq - 1 2 2 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call main . ToDTO movq % rax , - 1 0 8 8 (% rbp ) movq % rdx , - 1 0 8 0 (% rbp ) leaq main . Person .. d (% rip ), % rax movq % rax , - 1 3 4 4 (% rbp ) leaq main . Person .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 0 (% rbp ) movq - 1 0 7 2 (% rbp ), % rax movq - 1 0 6 4 (% rbp ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq - 1 0 5 6 (% rbp ), % rax movq - 1 0 4 8 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 1 0 4 0 (% rbp ), % rax movq - 1 0 3 2 (% rbp ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq - 1 0 2 4 (% rbp ), % rax movq - 1 0 1 6 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 0 . LBB 4 9 : movq - 6 0 0 (% rbp ), % rax movq - 5 9 2 (% rbp ), % rcx movq - 5 8 4 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 5 7 6 (% rbp ), % rcx movq - 5 6 8 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 5 6 0 (% rbp ), % rcx movq - 5 5 2 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 5 4 4 (% rbp ), % rcx movq - 5 3 6 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) . LBE 4 9 : jmp . L 5 1 . L 5 0 : . LBB 5 0 : movq - 6 0 0 (% rbp ), % rax leaq - 5 9 2 (% rbp ), % rdx movq % rax , % rsi leaq main . Person .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 1 : . LBE 5 0 : movq - 6 0 0 (% rbp ), % rax movq % rax , - 1 3 3 6 (% rbp ) movdqa - 1 3 4 4 (% rbp ), % xmm 0 movups % xmm 0 , - 5 2 8 (% rbp ) leaq - 5 2 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 , - 2 3 2 (% rbp ) movq $ 1 , - 2 2 4 (% rbp ) leaq - 2 0 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 6 0 8 (% rbp ) movq - 1 0 8 8 (% rbp ), % rax leaq main . PersonDTO .. d (% rip ), % rdx cmpq % rdx , % rax je . L 5 2 movq - 1 0 8 8 (% rbp ), % rax leaq type .. interface . 4 . 5 (% rip ), % rdx movq % rax , % rsi leaq main . PersonDTO .. d (% rip ), % rdi call runtime . panicdottype @ PLT . L 5 2 : movq - 1 0 8 0 (% rbp ), % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 1 1 3 6 (% rbp ) movq % rbx , - 1 1 2 8 (% rbp ) movq 1 6 (% rax ), % rcx movq 2 4 (% rax ), % rbx movq % rcx , - 1 1 2 0 (% rbp ) movq % rbx , - 1 1 1 2 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 1 1 0 4 (% rbp ) movq % rdx , - 1 0 9 6 (% rbp ) leaq main . PersonDTO .. d (% rip ), % rax movq % rax , - 1 3 2 8 (% rbp ) leaq main . PersonDTO .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 8 (% rbp ) movq - 1 1 3 6 (% rbp ), % rax movq - 1 1 2 8 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 1 1 2 0 (% rbp ), % rax movq - 1 1 1 2 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 1 1 0 4 (% rbp ), % rax movq - 1 0 9 6 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 3 . LBB 5 1 : movq - 4 8 8 (% rbp ), % rax movq - 4 8 0 (% rbp ), % rcx movq - 4 7 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 6 4 (% rbp ), % rcx movq - 4 5 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 5 1 : jmp . L 5 4 . L 5 3 : . LBB 5 2 : movq - 4 8 8 (% rbp ), % rax leaq - 4 8 0 (% rbp ), % rdx movq % rax , % rsi leaq main . PersonDTO .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 4 : . LBE 5 2 : movq - 4 8 8 (% rbp ), % rax movq % rax , - 1 3 2 0 (% rbp ) movdqa - 1 3 2 8 (% rbp ), % xmm 1 movups % xmm 1 , - 4 3 2 (% rbp ) leaq - 4 3 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) leaq - 1 1 8 4 (% rbp ), % rax leaq - 1 0 7 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call main . Person . ToDTO leaq main . PersonDTO .. d (% rip ), % rax movq % rax , - 1 2 1 6 (% rbp ) leaq main . PersonDTO .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movq - 1 1 8 4 (% rbp ), % rax movq - 1 1 7 6 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 1 1 6 8 (% rbp ), % rax movq - 1 1 6 0 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 1 1 5 2 (% rbp ), % rax movq - 1 1 4 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 5 . LBB 5 3 : movq - 3 2 8 (% rbp ), % rax movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 5 3 : jmp . L 5 6 . L 5 5 : . LBB 5 4 : movq - 3 2 8 (% rbp ), % rax leaq - 3 2 0 (% rbp ), % rdx movq % rax , % rsi leaq main . PersonDTO .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 6 : . LBE 5 4 : movq - 3 2 8 (% rbp ), % rax movq % rax , - 1 2 0 8 (% rbp ) leaq main . PersonDTO .. d (% rip ), % rax movq % rax , - 1 2 0 0 (% rbp ) leaq main . PersonDTO .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) movq - 1 1 3 6 (% rbp ), % rax movq - 1 1 2 8 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 1 1 2 0 (% rbp ), % rax movq - 1 1 1 2 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 1 0 4 (% rbp ), % rax movq - 1 0 9 6 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 7 . LBB 5 5 : movq - 3 9 2 (% rbp ), % rax movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 5 5 : jmp . L 5 8 . L 5 7 : . LBB 5 6 : movq - 3 9 2 (% rbp ), % rax leaq - 3 8 4 (% rbp ), % rdx movq % rax , % rsi leaq main . PersonDTO .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 8 : . LBE 5 6 : movq - 3 9 2 (% rbp ), % rax movq % rax , - 1 1 9 2 (% rbp ) movq - 1 2 0 0 (% rbp ), % rax movq - 1 1 9 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % rax movq - 1 2 1 6 (% rbp ), % rdx movq - 1 2 0 8 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT movl % eax , % ebx leaq bool .. d (% rip ), % rax movq % rax , - 1 3 1 2 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movb % bl , (% rax ) movq - 2 6 4 (% rbp ), % rax movq % rax , - 1 3 0 4 (% rbp ) movdqa - 1 3 1 2 (% rbp ), % xmm 2 movups % xmm 2 , - 2 5 6 (% rbp ) leaq - 2 5 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 6 : leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 0 6 movl $ 2 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 7 : ret . L 1 0 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 4 8 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq % rdx , - 2 7 2 (% rbp ) movq % rcx , - 2 6 4 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) . LBB 5 8 : movq - 2 4 8 (% rbp ), % rdx movq - 2 6 4 (% rbp ), % rax leaq (% rdx ,% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int 6 4 .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 2 4 (% rbp ) movq % rbx , - 2 1 6 (% rbp ) movq % rbx , - 2 0 8 (% rbp ) leaq . LC 4 1 (% rip ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) movdqa - 2 8 8 (% rbp ), % xmm 0 movups % xmm 0 , - 2 4 0 (% rbp ) . LBB 5 9 : movq - 2 4 8 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 5 6 (% rbp ) . LBB 6 0 : jmp . L 6 9 . L 1 0 4 : . LBB 6 1 : nop . LBE 6 1 : . LBB 6 2 : . LBB 6 3 : movq - 2 6 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 6 4 (% rbp ) . LBB 6 4 : jmp . L 7 0 . L 1 0 3 : . LBB 6 5 : nop . LBE 6 5 : . LBB 6 6 : movq - 2 4 8 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 7 1 cmpq % rax , - 5 6 (% rbp ) jl . L 9 5 . L 7 1 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 9 5 : movq - 2 6 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 7 3 cmpq % rax , - 6 4 (% rbp ) jl . L 9 6 . L 7 3 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 9 6 : movq - 2 5 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax leal - 4 8 (% rax ), % ecx movq - 2 7 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax leal - 4 8 (% rax ), % edx movl % ecx , % eax imull % edx , % eax movb % al , - 7 3 (% rbp ) movq - 5 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax addq % rdx , % rax movq % rax , - 8 8 (% rbp ) movq - 5 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax addq % rdx , % rax addq $ 1 , % rax movq % rax , - 9 6 (% rbp ) movq - 2 1 6 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 7 5 cmpq % rax , - 9 6 (% rbp ) jl . L 9 7 . L 7 5 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 9 7 : movzbl - 7 3 (% rbp ), % edx movq - 2 2 4 (% rbp ), % rcx movq - 9 6 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax addq % rdx , % rax movq % rax , - 1 0 4 (% rbp ) movq - 2 1 6 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 7 7 cmpq % rax , - 8 8 (% rbp ) jge . L 7 7 movq - 2 1 6 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) jns . L 7 8 jmp . L 7 9 . L 7 7 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 8 : cmpq % rax , - 8 8 (% rbp ) jl . L 9 8 . L 7 9 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 9 8 : movq - 2 2 4 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq - 1 0 4 (% rbp ), % rcx movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 2 , % rax sarq $ 6 3 , % rcx movq % rcx , % rdx subq % rdx , % rax movq % rax , % rcx movq - 2 2 4 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax leaq (% rcx ,% rsi ), % rdx movq % rdx , (% rax ) movq - 2 1 6 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 8 1 cmpq % rax , - 9 6 (% rbp ) jl . L 9 9 . L 8 1 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 9 9 : movq - 1 0 4 (% rbp ), % rcx movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 2 , % rax movq % rcx , % rsi sarq $ 6 3 , % rsi subq % rsi , % rax movq % rax , % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax subq % rax , % rcx movq % rcx , % rdx movq - 2 2 4 (% rbp ), % rcx movq - 9 6 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq % rdx , (% rax ) . LBE 6 6 : . LBB 6 7 : subq $ 1 , - 6 4 (% rbp ) . L 7 0 : . LBE 6 7 : cmpq $ 0 , - 6 4 (% rbp ) jns . L 1 0 3 . LBE 6 4 : . LBE 6 3 : . LBE 6 2 : . LBB 6 8 : subq $ 1 , - 5 6 (% rbp ) . L 6 9 : . LBE 6 8 : cmpq $ 0 , - 5 6 (% rbp ) jns . L 1 0 4 . LBE 6 0 : . LBE 5 9 : . LBB 6 9 : movq $ 0 , - 7 2 (% rbp ) . LBB 7 0 : . LBB 7 1 : . LBB 7 2 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movl $ 0 , % ebx . LBE 7 2 : jmp . L 8 7 . L 1 0 5 : . LBB 7 3 : nop . LBE 7 3 : . LBB 7 4 : . LBB 7 5 : movq - 1 6 8 (% rbp ), % rax testq % rbx , % rbx js . L 8 8 cmpq % rax , % rbx jge . L 8 8 movq - 1 7 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 7 5 : . LBB 7 6 : movq % rax , - 7 2 (% rbp ) . LBE 7 6 : . LBB 7 7 : movq - 7 2 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 2 4 0 (% rbp ), % rsi movq - 2 3 2 (% rbp ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . LBE 7 7 : . LBE 7 4 : . LBB 7 9 : addq $ 1 , % rbx jmp . L 8 7 . L 8 8 : . LBE 7 9 : . LBB 8 0 : . LBB 7 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 8 7 : . LBE 7 8 : . LBE 8 0 : cmpq - 2 8 8 (% rbp ), % rbx jl . L 1 0 5 . LBE 7 1 : . LBE 7 0 : . LBE 6 9 : leaq . LC 2 3 (% rip ), % r 1 2 movl $ 1 , % r 1 3 d movq - 2 4 0 (% rbp ), % rsi movq - 2 3 2 (% rbp ), % rax movq % r 1 2 , % rdx movq % r 1 3 , % rcx movq % rsi , % rdi movq % rax , % rsi call strings . TrimLeft @ PLT movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . LBB 8 1 : movq - 2 3 2 (% rbp ), % rax testq % rax , % rax jne . L 9 1 . LBB 8 2 : . LBB 8 3 : leaq . LC 2 3 (% rip ), % r 1 4 movl $ 1 , % r 1 5 d movq % r 1 4 , - 1 9 2 (% rbp ) movq % r 1 5 , - 1 8 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx jmp . L 9 3 . L 9 1 : . LBE 8 3 : . LBE 8 2 : . LBE 8 1 : . LBB 8 4 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx . L 9 3 : . LBE 8 4 : . LBE 5 8 : addq $ 2 4 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 3 : leaq - 4 4 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 7 movl $ 4 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 5 : ret . L 5 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 4 1 6 , % rsp movq % rdi , - 4 2 4 (% rbp ) movq % rsi , - 4 3 2 (% rbp ) movq $ 0 , - 3 8 4 (% rbp ) movq $ 0 , - 3 7 6 (% rbp ) movq $ 0 , - 3 6 8 (% rbp ) . LBB 3 8 : movl $ 0 , % edx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) movq $ 0 , - 4 0 0 (% rbp ) . LBB 3 9 : movq - 4 3 2 (% rbp ), % rax andl $ 1 , % eax testq % rax , % rax jne . L 3 6 . LBB 4 0 : . LBB 4 1 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 2 : jmp . L 3 7 . L 5 4 : . LBB 4 3 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 4 4 (% rbp ), % rbx movq - 2 4 (% rbp ), % rax notq % rax movq % rax , % r 1 2 leaq 1 (% rbx ), % rax movq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 3 8 . LBB 4 4 : movq - 3 5 2 (% rbp ), % rsi leaq - 1 9 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) . LBE 4 4 : jmp . L 3 9 . L 3 8 : . LBB 4 5 : movq - 3 5 2 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rdx movq % rcx , - 4 1 6 (% rbp ) movq % rax , - 4 0 8 (% rbp ) movq % rdx , - 4 0 0 (% rbp ) . L 3 9 : . LBE 4 5 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rbx movq - 2 4 (% rbp ), % rax leaq 1 (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 3 0 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 0 . LBB 4 6 : movq - 3 2 0 (% rbp ), % rsi leaq - 1 6 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) . LBE 4 6 : jmp . L 4 1 . L 4 0 : . LBB 4 7 : movq - 3 2 0 (% rbp ), % rcx movq - 3 0 4 (% rbp ), % rdx movq % rcx , - 4 1 6 (% rbp ) movq % rax , - 4 0 8 (% rbp ) movq % rdx , - 4 0 0 (% rbp ) . L 4 1 : . LBE 4 7 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) . LBE 4 3 : . LBB 4 8 : addq $ 1 , - 2 4 (% rbp ) . L 3 7 : . LBE 4 8 : movq - 4 3 2 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax cmpq - 2 4 (% rbp ), % rax jle . L 4 2 . LBB 4 9 : jmp . L 5 4 . L 3 6 : . LBE 4 9 : . LBE 4 2 : . LBE 4 1 : . LBE 4 0 : . LBB 5 0 : . LBB 5 1 : movq $ 0 , - 3 2 (% rbp ) . LBB 5 2 : jmp . L 4 4 . L 5 6 : . LBB 5 3 : nop . LBE 5 3 : . LBB 5 4 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % rbx movq - 3 2 (% rbp ), % rax notq % rax movq % rax , % r 1 2 leaq 1 (% rbx ), % rax movq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 5 . LBB 5 5 : movq - 2 8 8 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) . LBE 5 5 : jmp . L 4 6 . L 4 5 : . LBB 5 6 : movq - 2 8 8 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rdx movq % rcx , - 4 1 6 (% rbp ) movq % rax , - 4 0 8 (% rbp ) movq % rdx , - 4 0 0 (% rbp ) . L 4 6 : . LBE 5 6 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rbx movq - 3 2 (% rbp ), % rax leaq 1 (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 7 . LBB 5 7 : movq - 2 5 6 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) . LBE 5 7 : jmp . L 4 8 . L 4 7 : . LBB 5 8 : movq - 2 5 6 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rdx movq % rcx , - 4 1 6 (% rbp ) movq % rax , - 4 0 8 (% rbp ) movq % rdx , - 4 0 0 (% rbp ) . L 4 8 : . LBE 5 8 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) . LBE 5 4 : . LBB 5 9 : addq $ 1 , - 3 2 (% rbp ) . L 4 4 : . LBE 5 9 : movq - 4 3 2 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax cmpq - 3 2 (% rbp ), % rax jg . L 5 6 . LBE 5 2 : . LBE 5 1 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rbx movl $ 0 , % r 1 2 d leaq 1 (% rbx ), % rax movq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 5 1 . LBB 6 0 : movq - 2 2 4 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) . LBE 6 0 : jmp . L 5 2 . L 5 1 : . LBB 6 1 : movq - 2 2 4 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rdx movq % rcx , - 4 1 6 (% rbp ) movq % rax , - 4 0 8 (% rbp ) movq % rdx , - 4 0 0 (% rbp ) . L 5 2 : . LBE 6 1 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) . L 4 2 : . LBE 5 0 : . LBE 3 9 : . LBB 6 2 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 4 2 4 (% rbp ), % rcx movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 6 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 2 : . LBE 3 8 : movq - 4 2 4 (% rbp ), % rax addq $ 4 1 6 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 2 1 5 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 1 movl $ 2 1 5 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 1 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 1 3 6 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 2 1 2 8 (% rbp ) movq % rdi , - 2 1 2 0 (% rbp ) movq % rdx , - 2 1 4 4 (% rbp ) movq % rcx , - 2 1 3 6 (% rbp ) movb $ 0 , - 3 3 (% rbp ) . LBB 2 : movq - 2 1 2 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 2 1 3 6 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 3 : movq - 4 8 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax je . L 2 . LBB 4 : . LBB 5 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 2 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : leaq - 2 1 1 2 (% rbp ), % rdx movl $ 0 , % eax movl $ 2 5 6 , % ecx movq % rdx , % rdi rep stosq . LBB 6 : movq $ 0 , - 3 2 (% rbp ) . LBB 7 : jmp . L 4 . L 2 9 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 1 2 8 (% rbp ), % rcx movq - 2 1 2 0 (% rbp ), % rbx movq - 3 2 (% rbp ), % rax movq % rbx , % rdx testq % rax , % rax js . L 5 cmpq % rdx , % rax jge . L 5 movq % rcx , % rsi movq % rax , % rdx addq % rsi , % rdx movzbl (% rdx ), % esi movq % rbx , % rdx testq % rax , % rax js . L 7 jmp . L 2 2 . L 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : cmpq % rdx , % rax jge . L 7 movq % rcx , % rdx addq % rdx , % rax movzbl (% rax ), % eax jmp . L 2 3 . L 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : movzbl % al , % eax movq - 2 1 1 2 (% rbp ,% rax , 8 ), % rdx movzbl % sil , % eax addq $ 1 , % rdx movq % rdx , - 2 1 1 2 (% rbp ,% rax , 8 ) . LBE 1 0 : . LBE 9 : . LBB 1 1 : addq $ 1 , - 3 2 (% rbp ) . L 4 : . LBE 1 1 : movq - 3 2 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 2 9 . LBE 7 : . LBE 6 : . LBB 1 2 : movq $ 0 , - 2 4 (% rbp ) . LBB 1 3 : jmp . L 1 1 . L 3 0 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 2 1 4 4 (% rbp ), % rcx movq - 2 1 3 6 (% rbp ), % rbx movq - 2 4 (% rbp ), % rax movq % rbx , % rdx testq % rax , % rax js . L 1 2 cmpq % rdx , % rax jge . L 1 2 movq % rcx , % rsi movq % rax , % rdx addq % rsi , % rdx movzbl (% rdx ), % esi movq % rbx , % rdx testq % rax , % rax js . L 1 4 jmp . L 2 5 . L 1 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : cmpq % rdx , % rax jge . L 1 4 movq % rcx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax movq - 2 1 1 2 (% rbp ,% rax , 8 ), % rdx movzbl % sil , % eax subq $ 1 , % rdx movq % rdx , - 2 1 1 2 (% rbp ,% rax , 8 ) . LBE 1 6 : . LBB 1 7 : movq - 2 1 3 6 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 6 jmp . L 2 6 . L 1 4 : . LBE 1 7 : . LBB 2 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : . LBE 2 0 : . LBB 2 1 : cmpq % rax , - 2 4 (% rbp ) jge . L 1 6 movq - 2 1 4 4 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax movq - 2 1 1 2 (% rbp ,% rax , 8 ), % rax testq % rax , % rax jns . L 1 8 jmp . L 2 7 . L 1 6 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : . LBB 1 8 : . LBB 1 9 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 2 1 . L 1 8 : . LBE 1 9 : . LBE 1 8 : . LBE 2 1 : . LBE 1 5 : . LBB 2 2 : addq $ 1 , - 2 4 (% rbp ) . L 1 1 : . LBE 2 2 : movq - 2 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jl . L 3 0 . LBE 1 3 : . LBE 1 2 : . LBB 2 3 : movb $ 1 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax . L 2 1 : . LBE 2 3 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 1 movl $ 2 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 subq $ 2 2 4 , % rsp movq % rdi , - 2 3 2 (% rbp ) movq % rsi , % rax movq % rdx , % rsi movq % rsi , % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq % rcx , - 2 4 0 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq (% rdx ), % rdx movq % rdx , (% rax ) movq - 2 0 0 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 1 9 2 (% rbp ) movq % r 1 5 , - 1 8 4 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) leaq . LC 2 7 (% rip ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 2 , - 1 5 2 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) call fmt . Sprint @ PLT addq $ 3 2 , % rsp movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) . LBB 2 : movq - 2 4 8 (% rbp ), % rax testq % rax , % rax jne . L 2 movq - 2 5 6 (% rbp ), % rax leaq . LC 2 8 (% rip ), % rdx cmpq % rdx , % rax jne . L 3 movl $ 1 , % eax jmp . L 5 . L 3 : movl $ 1 , % eax jmp . L 5 . L 2 : movl $ 0 , % eax . L 5 : testb % al , % al je . L 6 . LBB 3 : leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq (% rdx ), % rdx movq % rdx , (% rax ) movq - 1 2 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 1 1 2 (% rbp ) movq % r 1 3 , - 1 0 4 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq $ 1 , - 5 6 (% rbp ) movq $ 1 , - 4 8 (% rbp ) subq $ 8 , % rsp pushq - 4 8 (% rbp ) pushq - 5 6 (% rbp ) pushq - 6 4 (% rbp ) call fmt . Sprint @ PLT addq $ 3 2 , % rsp movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) . L 6 : . LBE 3 : . LBE 2 : . LBB 4 : . LBB 5 : movq - 2 3 2 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax sete % al testb % al , % al je . L 7 . LBB 6 : movq - 2 3 2 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax sete % al . L 7 : . LBE 6 : . LBE 5 : testb % al , % al je . L 8 . LBB 7 : . LBB 8 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq - 2 4 0 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapassign_faststr @ PLT . L 8 : . LBE 8 : . LBE 7 : . LBE 4 : . LBB 9 : movq - 2 3 2 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax je . L 9 . LBB 1 0 : movq - 2 3 2 (% rbp ), % rax movq 8 (% rax ), % rax movq - 2 4 0 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rsi movq - 2 1 6 (% rbp ), % rdx movq % rax , % rdi call main . traverse . L 9 : . LBE 1 0 : . LBE 9 : . LBB 1 1 : movq - 2 3 2 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax je . L 1 . LBB 1 2 : movq - 2 3 2 (% rbp ), % rax movq 1 6 (% rax ), % rax movq - 2 4 0 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rsi movq - 2 1 6 (% rbp ), % rdx movq % rax , % rdi call main . traverse . L 1 : . LBE 1 2 : . LBE 1 1 : leaq - 3 2 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : leaq - 9 8 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 1 movl $ 9 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 4 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 3 6 , % rsp movq % rdi , - 8 0 8 (% rbp ) movq $ 1 , - 7 3 6 (% rbp ) movq $ 3 , - 7 2 8 (% rbp ) leaq - 7 3 6 (% rbp ), % rax movq % rax , - 7 6 8 (% rbp ) movq $ 2 , - 7 6 0 (% rbp ) movq $ 2 , - 7 5 2 (% rbp ) leaq - 8 0 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 7 5 2 (% rbp ) pushq - 7 6 0 (% rbp ) pushq - 7 6 8 (% rbp ) movq % rax , % rdi call go . leetcode . Constructor 5 2 8 addq $ 3 2 , % rsp leaq - 8 0 0 (% rbp ), % rax movq % rax , % rdi call go . leetcode . Solution 5 2 8 . PickIndex movq % rax , % rbx leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 9 6 (% rbp ) movq - 6 9 6 (% rbp ), % rax movq % rbx , (% rax ) movq - 6 9 6 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 6 8 8 (% rbp ) movq % r 1 5 , - 6 8 0 (% rbp ) leaq - 6 8 8 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq $ 1 , - 4 2 4 (% rbp ) movq $ 1 , - 4 1 6 (% rbp ) leaq . LC 1 2 (% rip ), % r 1 2 movl $ 1 7 , % r 1 3 d leaq - 4 0 0 (% rbp ), % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax subq $ 8 , % rsp pushq - 4 1 6 (% rbp ) pushq - 4 2 4 (% rbp ) pushq - 4 3 2 (% rbp ) movq % rcx , % rsi movq % rax , % rdx call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 7 2 0 (% rbp ) movq % rdx , - 7 1 2 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 7 0 4 (% rbp ) leaq - 8 0 0 (% rbp ), % rax movq % rax , % rdi call go . leetcode . Solution 5 2 8 . PickIndex movq % rax , % rbx leaq int .. d (% rip ), % r 1 5 movq % r 1 5 , - 9 7 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 8 (% rbp ) movq - 6 4 8 (% rbp ), % rax movq % rbx , (% rax ) movq - 6 4 8 (% rbp ), % rax movq % rax , - 9 6 8 (% rbp ) movdqa - 9 7 6 (% rbp ), % xmm 0 movups % xmm 0 , - 6 4 0 (% rbp ) leaq - 6 4 0 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq $ 1 , - 3 6 0 (% rbp ) movq $ 1 , - 3 5 2 (% rbp ) leaq . LC 1 3 (% rip ), % rax movq % rax , - 8 9 6 (% rbp ) movq $ 1 7 , - 8 8 8 (% rbp ) leaq - 3 3 6 (% rbp ), % rdi movq - 8 9 6 (% rbp ), % rax movq - 8 8 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 3 5 2 (% rbp ) pushq - 3 6 0 (% rbp ) pushq - 3 6 8 (% rbp ) movq % rcx , % rsi movq % rax , % rdx call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 6 7 2 (% rbp ) movq % rdx , - 6 6 4 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 6 5 6 (% rbp ) leaq - 8 0 0 (% rbp ), % rax movq % rax , % rdi call go . leetcode . Solution 5 2 8 . PickIndex movq % rax , % rbx movq % r 1 5 , - 9 6 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 0 (% rbp ) movq - 6 0 0 (% rbp ), % rax movq % rbx , (% rax ) movq - 6 0 0 (% rbp ), % rax movq % rax , - 9 5 2 (% rbp ) movdqa - 9 6 0 (% rbp ), % xmm 1 movups % xmm 1 , - 5 9 2 (% rbp ) leaq - 5 9 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 1 , - 2 9 6 (% rbp ) movq $ 1 , - 2 8 8 (% rbp ) leaq . LC 1 4 (% rip ), % rax movq % rax , - 8 8 0 (% rbp ) movq $ 1 7 , - 8 7 2 (% rbp ) leaq - 2 7 2 (% rbp ), % rdi movq - 8 8 0 (% rbp ), % rax movq - 8 7 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 2 8 8 (% rbp ) pushq - 2 9 6 (% rbp ) pushq - 3 0 4 (% rbp ) movq % rcx , % rsi movq % rax , % rdx call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 6 0 8 (% rbp ) leaq - 8 0 0 (% rbp ), % rax movq % rax , % rdi call go . leetcode . Solution 5 2 8 . PickIndex movq % rax , % rbx movq % r 1 5 , - 9 4 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 5 2 (% rbp ) movq - 5 5 2 (% rbp ), % rax movq % rbx , (% rax ) movq - 5 5 2 (% rbp ), % rax movq % rax , - 9 3 6 (% rbp ) movdqa - 9 4 4 (% rbp ), % xmm 2 movups % xmm 2 , - 5 4 4 (% rbp ) leaq - 5 4 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 , - 2 3 2 (% rbp ) movq $ 1 , - 2 2 4 (% rbp ) leaq . LC 1 5 (% rip ), % rax movq % rax , - 8 6 4 (% rbp ) movq $ 1 7 , - 8 5 6 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 8 6 4 (% rbp ), % rcx movq - 8 5 6 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) leaq - 8 0 0 (% rbp ), % rax movq % rax , % rdi call go . leetcode . Solution 5 2 8 . PickIndex movq % rax , % rbx movq % r 1 5 , - 9 2 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) movq - 5 0 4 (% rbp ), % rax movq % rbx , (% rax ) movq - 5 0 4 (% rbp ), % rax movq % rax , - 9 2 0 (% rbp ) movdqa - 9 2 8 (% rbp ), % xmm 3 movups % xmm 3 , - 4 9 6 (% rbp ) leaq - 4 9 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq . LC 1 6 (% rip ), % rax movq % rax , - 8 4 8 (% rbp ) movq $ 1 7 , - 8 4 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq - 8 4 8 (% rbp ), % rcx movq - 8 4 0 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) leaq - 8 0 0 (% rbp ), % rax movq % rax , % rdi call go . leetcode . Solution 5 2 8 . PickIndex movq % rax , % rbx movq % r 1 5 , - 9 1 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 5 6 (% rbp ) movq - 4 5 6 (% rbp ), % rax movq % rbx , (% rax ) movq - 4 5 6 (% rbp ), % rax movq % rax , - 9 0 4 (% rbp ) movdqa - 9 1 2 (% rbp ), % xmm 4 movups % xmm 4 , - 4 4 8 (% rbp ) leaq - 4 4 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq . LC 1 7 (% rip ), % rax movq % rax , - 8 3 2 (% rbp ) movq $ 1 7 , - 8 2 4 (% rbp ) leaq - 8 0 (% rbp ), % rax movq - 8 3 2 (% rbp ), % rcx movq - 8 2 4 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 3 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 9 movl $ 2 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 6 8 , % rsp movq % rdi , - 1 8 4 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 3 0 : movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) . LBB 3 1 : . LBB 3 2 : . LBB 3 3 : movq go . day 2 7 9 . testcases (% rip ), % rax movq 8 + go . day 2 7 9 . testcases (% rip ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 + go . day 2 7 9 . testcases (% rip ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movl $ 0 , % ebx . LBE 3 3 : jmp . L 2 9 . L 3 8 : . LBB 3 4 : nop . LBE 3 4 : . LBB 3 5 : . LBB 3 6 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 3 0 cmpq % rax , % rbx jge . L 3 0 movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 3 6 : . LBB 3 7 : movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) . LBE 3 7 : . LBB 3 8 : . LBB 3 9 : movq - 1 7 6 (% rbp ), % rax movq % rax , % rdi call go . day 2 7 9 . NumberOfFriendGroups movq % rax , - 5 6 (% rbp ) movq - 1 6 8 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 3 1 jmp . L 3 2 . L 3 0 : . LBE 3 9 : . LBE 3 8 : . LBB 4 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : . LBE 4 4 : . LBB 4 5 : . LBB 4 3 : . LBB 4 0 : leaq int .. d (% rip ), % rax movq % rax , - 2 0 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 2 0 0 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 2 8 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movdqa - 2 0 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 3 . LBB 4 1 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 4 1 : jmp . L 3 4 . L 3 3 : . LBB 4 2 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 4 : . LBE 4 2 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) leaq . LC 3 7 (% rip ), % r 1 2 movl $ 1 9 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 1 8 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 3 2 : . LBE 4 0 : . LBE 4 3 : . LBE 4 5 : . LBE 3 5 : . LBB 4 6 : addq $ 1 , % rbx . L 2 9 : . LBE 4 6 : cmpq - 1 9 2 (% rbp ), % rbx jl . L 3 8 . LBE 3 2 : . LBE 3 1 : . LBE 3 0 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 8 movl $ 1 6 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 2 0 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) . LBB 2 : leaq imt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. go . problem 0 5 2 4 . stringSlice (% rip ), % r 1 2 leaq go . problem 0 5 2 4 .. go . problem 0 5 2 4 . stringSlice .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 3 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 : jmp . L 3 . L 2 : . LBB 4 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq go . problem 0 5 2 4 .. go . problem 0 5 2 4 . stringSlice .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 4 : movq - 1 2 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call sort . Sort @ PLT . LBB 5 : movq $ 0 , - 5 6 (% rbp ) . LBB 6 : . LBB 7 : . LBB 8 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 8 : jmp . L 4 . L 1 7 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : movq % rbx , - 5 6 (% rbp ) . LBB 1 1 : . LBB 1 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 5 cmpq % rax , - 5 6 (% rbp ) jl . L 1 4 . L 5 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq - 1 6 0 (% rbp ), % rdi movq - 1 5 2 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call go . problem 0 5 2 4 . isSub testb % al , % al je . L 7 . LBB 1 3 : . LBB 1 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 8 cmpq % rax , - 5 6 (% rbp ) jl . L 1 5 . L 8 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx jmp . L 1 3 . L 7 : . LBE 1 4 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : . LBB 1 5 : addq $ 1 , % rbx . L 4 : . LBE 1 5 : cmpq % r 1 2 , % rbx jl . L 1 7 . LBE 7 : . LBE 6 : . LBE 5 : . LBB 1 6 : leaq . LC 2 3 (% rip ), % r 1 4 movl $ 0 , % r 1 5 d movq % r 1 4 , - 1 4 4 (% rbp ) movq % r 1 5 , - 1 3 6 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx . L 1 3 : . LBE 1 6 : . LBE 2 : addq $ 1 2 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 1 movl $ 2 3 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 0 8 , % rsp movq % rdi , - 2 1 6 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) call sort . Ints @ PLT addq $ 3 2 , % rsp movq - 4 8 (% rbp ), % rbx movq - 4 8 (% rbp ), % rax leaq (% rax ,% rax ), % r 1 2 movq % r 1 2 , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 7 6 (% rbp ) movq % rbx , - 1 6 8 (% rbp ) movq % r 1 2 , - 1 6 0 (% rbp ) . LBB 3 : movq $ 0 , - 3 2 (% rbp ) . LBB 4 : jmp . L 2 . L 2 9 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 cmpq % rax , - 3 2 (% rbp ) jl . L 2 2 . L 3 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : movq - 1 7 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 3 2 (% rbp ), % rax movq % rax , (% rdx ) . LBE 6 : . LBB 7 : addq $ 1 , - 3 2 (% rbp ) . L 2 : . LBE 7 : movq - 3 2 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 2 9 . LBE 4 : . LBE 3 : movq $ 0 , - 2 4 (% rbp ) movq - 4 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 0 8 (% rbp ) movq % rbx , - 2 0 0 (% rbp ) movq % rbx , - 1 9 2 (% rbp ) . LBB 8 : movq $ 0 , - 4 0 (% rbp ) . LBB 9 : jmp . L 7 . L 3 0 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 8 cmpq % rax , - 2 4 (% rbp ) jl . L 2 4 . L 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : movq - 1 7 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq - 2 0 0 (% rbp ), % rdx testq % rax , % rax js . L 1 0 cmpq % rdx , % rax jl . L 2 5 . L 1 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 4 0 (% rbp ) js . L 1 2 cmpq % rdx , - 4 0 (% rbp ) jl . L 2 6 . L 1 2 : movq - 4 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rdx , % rcx movq - 2 0 8 (% rbp ), % rdx salq $ 3 , % rax addq % rax , % rdx movq (% rcx ), % rax movq % rax , (% rdx ) addq $ 1 , - 2 4 (% rbp ) . LBB 1 2 : movq - 4 8 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 4 0 (% rbp ) je . L 1 4 . LBB 1 3 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rbx movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 5 cmpq % rax , - 2 4 (% rbp ) jl . L 2 7 . L 1 5 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq - 1 7 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 7 . LBB 1 4 : movq - 1 1 2 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) . LBE 1 4 : jmp . L 1 8 . L 1 7 : . LBB 1 5 : movq - 1 1 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rcx , - 1 7 6 (% rbp ) movq % rax , - 1 6 8 (% rbp ) movq % rdx , - 1 6 0 (% rbp ) . L 1 8 : . LBE 1 5 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) addq $ 1 , - 2 4 (% rbp ) . L 1 4 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 6 : addq $ 1 , - 4 0 (% rbp ) . L 7 : . LBE 1 6 : movq - 4 0 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 3 0 . LBE 9 : . LBE 8 : . LBB 1 7 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 2 1 6 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 7 : . LBE 2 : movq - 2 1 6 (% rbp ), % rax leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 7 movl $ 2 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 subq $ 1 7 6 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 2 : movq - 1 9 2 (% rbp ), % rdx movq - 1 8 4 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call strings . TrimSpace @ PLT movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) leaq . LC 3 4 (% rip ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 0 , - 2 0 0 (% rbp ) movdqa - 2 0 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 6 0 (% rbp ) . LBB 3 : . LBB 4 : leaq . LC 3 5 (% rip ), % r 1 4 movl $ 1 , % r 1 5 d movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rax movq % r 1 4 , % rdx movq % r 1 5 , % rcx movq % rsi , % rdi movq % rax , % rsi call strings . HasPrefix @ PLT movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 . LBB 5 : leaq . LC 3 6 (% rip ), % r 1 2 movl $ 1 , % r 1 3 d movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rax movq % r 1 2 , % rdx movq % r 1 3 , % rcx movq % rsi , % rdi movq % rax , % rsi call strings . HasPrefix @ PLT . L 2 : . LBE 5 : . LBE 4 : testb % al , % al je . L 3 . LBB 6 : movl $ 0 , % eax movl $ 1 , % edi movq - 1 8 4 (% rbp ), % rdx testq % rdi , % rdi js . L 4 cmpq % rdx , % rdi jg . L 4 testq % rax , % rax jns . L 5 jmp . L 6 . L 4 : movq % rdx , % rsi call runtime . goPanicSliceAlen @ PLT . L 5 : cmpq % rdi , % rax jg . L 6 movq - 1 9 2 (% rbp ), % rdx cmpq % rax , % rdi jne . L 7 jmp . L 2 4 . L 6 : movq % rdi , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 7 : movq % rax , % rcx jmp . L 9 . L 2 4 : movl $ 0 , % ecx . L 9 : addq % rdx , % rcx subq % rax , % rdi movq % rdi , % rdx movq % rcx , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movl $ 1 , % eax movq - 1 8 4 (% rbp ), % rdx testq % rax , % rax js . L 1 0 cmpq % rdx , % rax jg . L 1 0 movq - 1 9 2 (% rbp ), % rcx movq - 1 8 4 (% rbp ), % rdx cmpq % rdx , % rax jne . L 1 1 jmp . L 2 5 . L 1 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 1 1 : movq % rax , % rdx jmp . L 1 3 . L 2 5 : movl $ 0 , % edx . L 1 3 : addq % rdx , % rcx movq - 1 8 4 (% rbp ), % rdx subq % rax , % rdx movq % rcx , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) . L 3 : . LBE 6 : . LBE 3 : movq - 1 9 2 (% rbp ), % rcx movq - 1 8 4 (% rbp ), % rax leaq go . problem 8 . myAtoi .. func 1 .. f (% rip ), % rdx movq % rcx , % rdi movq % rax , % rsi call strings . IndexFunc @ PLT movq % rax , - 5 6 (% rbp ) . LBB 7 : cmpq $ 0 , - 5 6 (% rbp ) js . L 1 4 . LBB 8 : movl $ 0 , % eax movq - 1 8 4 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 1 5 cmpq % rdx , - 5 6 (% rbp ) jg . L 1 5 testq % rax , % rax jns . L 1 6 jmp . L 1 7 . L 1 5 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAlen @ PLT . L 1 6 : cmpq - 5 6 (% rbp ), % rax jg . L 1 7 movq - 1 9 2 (% rbp ), % rdx cmpq % rax , - 5 6 (% rbp ) jne . L 1 8 jmp . L 2 6 . L 1 7 : movq - 5 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 1 8 : movq % rax , % rcx jmp . L 2 0 . L 2 6 : movl $ 0 , % ecx . L 2 0 : addq % rdx , % rcx movq - 5 6 (% rbp ), % rdx subq % rax , % rdx movq % rcx , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) . L 1 4 : . LBE 8 : . LBE 7 : movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT leaq - 8 0 (% rbp ), % rcx movq % rax , % rsi movq % rdx , % rdi movq % rdx , % rax movq % rax , % rdx movq % rcx , % rdi call strconv . Atoi @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) . LBB 9 : movabsq $- 2 1 4 7 4 8 3 6 4 9 , % rax cmpq % rax , - 4 0 (% rbp ) jg . L 2 1 . LBB 1 0 : movq $- 2 1 4 7 4 8 3 6 4 8 , - 4 0 (% rbp ) . LBE 1 0 : jmp . L 2 2 . L 2 1 : . LBB 1 1 : . LBB 1 2 : movl $ 2 1 4 7 4 8 3 6 4 8 , % eax cmpq % rax , - 4 0 (% rbp ) jl . L 2 2 . LBB 1 3 : movq $ 2 1 4 7 4 8 3 6 4 7 , - 4 0 (% rbp ) . L 2 2 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBE 9 : . LBB 1 4 : movq - 4 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax . LBE 1 4 : . LBE 2 : addq $ 1 7 6 , % rsp popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 8 movl $ 1 5 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 addq $- 1 2 8 , % rsp movq $ 0 , - 2 4 (% rbp ) . LBB 2 : movq $ 0 , - 3 2 (% rbp ) . LBB 3 : jmp . L 2 . L 7 : . LBB 4 : nop . LBE 4 : . LBB 5 : . LBB 6 : movq - 3 2 (% rbp ), % rax movq % rax , % rdi call main . isProdPandigital testb % al , % al je . L 3 . LBB 7 : movq - 3 2 (% rbp ), % rax addq % rax , - 2 4 (% rbp ) . L 3 : . LBE 7 : . LBE 6 : . LBE 5 : . LBB 8 : addq $ 1 , - 3 2 (% rbp ) . L 2 : . LBE 8 : cmpq $ 9 9 9 9 9 , - 3 2 (% rbp ) jle . L 7 . LBE 3 : . LBE 2 : leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 2 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 1 1 2 (% rbp ) movq % r 1 3 , - 1 0 4 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) leaq - 1 6 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 7 movl $ 2 9 6 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 6 4 , % rsp movq % rdi , - 2 8 0 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq go . problem 0 8 5 3 .. go . problem 0 8 5 3 . record .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 5 6 (% rbp ) movq % rbx , - 2 4 8 (% rbp ) movq % rbx , - 2 4 0 (% rbp ) . LBB 3 : movq $ 0 , - 7 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rsi movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 2 5 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq % rax , - 7 2 (% rbp ) . LBB 9 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 7 2 (% rbp ) js . L 3 cmpq % rdx , - 7 2 (% rbp ) jl . L 2 0 . L 3 : movq - 7 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : movq 1 6 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq % rdx , - 8 8 (% rbp ) movq 4 8 (% rbp ), % rdx cmpq $ 0 , - 7 2 (% rbp ) js . L 5 cmpq % rdx , - 7 2 (% rbp ) jl . L 2 1 . L 5 : movq - 7 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : movq 4 0 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq % rdx , - 9 6 (% rbp ) movq - 2 4 8 (% rbp ), % rdx cmpq $ 0 , - 7 2 (% rbp ) js . L 7 cmpq % rdx , - 7 2 (% rbp ) jl . L 2 2 . L 7 : movq - 7 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : movq - 2 8 0 (% rbp ), % rdx subq - 8 8 (% rbp ), % rdx pxor % xmm 0 , % xmm 0 cvtsi 2 sdq % rdx , % xmm 0 pxor % xmm 1 , % xmm 1 cvtsi 2 sdq - 9 6 (% rbp ), % xmm 1 divsd % xmm 1 , % xmm 0 movq - 2 5 6 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx salq $ 4 , % rdx addq % rcx , % rdx movq - 8 8 (% rbp ), % rcx movq % rcx , (% rdx ) movsd % xmm 0 , 8 (% rdx ) . LBE 9 : . LBE 8 : . LBB 1 0 : addq $ 1 , % rax . L 2 : . LBE 1 0 : cmpq % rsi , % rax jl . L 2 5 . LBE 5 : . LBE 4 : . LBE 3 : leaq go . problem 0 8 5 3 . carFleet .. func 1 (% rip ), % rcx leaq - 2 5 6 (% rbp ), % rdx movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) leaq - 1 6 0 (% rbp ), % rax movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq % rcx , (% rax ) movq % rdx , 8 (% rax ) movq - 1 3 6 (% rbp ), % rbx leaq type ... 6 . 7 go . problem 0 8 5 3 . record (% rip ), % r 1 2 leaq type ... 6 . 7 go . problem 0 8 5 3 . record (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 . LBB 1 1 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 1 : jmp . L 1 2 . L 1 1 : . LBB 1 2 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 go . problem 0 8 5 3 . record (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 : . LBE 1 2 : movq - 2 0 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call sort . Slice @ PLT pxor % xmm 0 , % xmm 0 movsd % xmm 0 , - 4 0 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 1 3 : movq $ 0 , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) . LBB 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rsi movl $ 0 , % eax . LBE 1 6 : jmp . L 1 3 . L 2 6 : . LBB 1 7 : nop . LBE 1 7 : . LBB 1 8 : . LBB 1 9 : movq - 1 2 0 (% rbp ), % rdx testq % rax , % rax js . L 1 4 cmpq % rdx , % rax jge . L 1 4 movq - 1 2 8 (% rbp ), % rdx movq % rax , % rcx salq $ 4 , % rcx addq % rcx , % rdx movq (% rdx ), % rcx movq 8 (% rdx ), % rbx . LBE 1 9 : . LBB 2 0 : movq % rcx , - 2 7 2 (% rbp ) movq % rbx , - 2 6 4 (% rbp ) . LBE 2 0 : . LBB 2 1 : movsd - 2 6 4 (% rbp ), % xmm 0 movsd % xmm 0 , - 8 0 (% rbp ) . LBB 2 2 : movsd - 8 0 (% rbp ), % xmm 0 comisd - 4 0 (% rbp ), % xmm 0 seta % dl testb % dl , % dl jne . L 1 5 jmp . L 1 6 . L 1 4 : . LBE 2 2 : . LBE 2 1 : . LBB 2 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : . LBE 2 5 : . LBB 2 6 : . LBB 2 4 : . LBB 2 3 : movsd - 8 0 (% rbp ), % xmm 0 movsd % xmm 0 , - 4 0 (% rbp ) addq $ 1 , - 4 8 (% rbp ) . L 1 6 : . LBE 2 3 : . LBE 2 4 : . LBE 2 6 : . LBE 1 8 : . LBB 2 7 : addq $ 1 , % rax . L 1 3 : . LBE 2 7 : cmpq % rsi , % rax jl . L 2 6 . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 2 8 : movq - 4 8 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax . LBE 2 8 : . LBE 2 : addq $ 2 6 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 5 0 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 9 movl $ 5 0 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 6 4 , % rsp movq % rdi , - 4 8 8 (% rbp ) movq $ 0 , - 3 6 8 (% rbp ) movq $ 0 , - 3 6 0 (% rbp ) movq $ 0 , - 3 5 2 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 3 6 8 (% rbp ) movq $ 0 , - 3 6 0 (% rbp ) movq $ 0 , - 3 5 2 (% rbp ) movq - 4 8 8 (% rbp ), % rcx movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 5 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBB 6 : . LBB 7 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jne . L 4 . LBB 8 : . LBB 9 : leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 3 4 4 (% rbp ), % rax movq $ 1 , (% rax ) movq - 3 4 4 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq $ 1 , - 3 6 0 (% rbp ) movq $ 1 , - 3 5 2 (% rbp ) movq - 4 8 8 (% rbp ), % rcx movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 5 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 4 : . LBE 9 : . LBE 8 : . LBE 7 : . LBE 6 : . LBE 3 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 0 0 (% rbp ) movq $ 0 , - 3 9 2 (% rbp ) movq % rbx , - 3 8 4 (% rbp ) leaq - 4 3 2 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call go . day 2 6 5 . segments addq $ 3 2 , % rsp . LBB 1 0 : movq $ 0 , - 4 4 8 (% rbp ) movq $ 0 , - 4 4 0 (% rbp ) . LBB 1 1 : . LBB 1 2 : . LBB 1 3 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 2 8 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 1 3 : jmp . L 5 . L 4 7 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 3 2 8 (% rbp ), % rax testq % rbx , % rbx js . L 6 cmpq % rax , % rbx jge . L 6 movq - 3 3 6 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 1 6 : . LBB 1 7 : movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) . LBE 1 7 : . LBB 1 8 : movzbl - 4 4 8 (% rbp ), % eax movb % al , - 5 7 (% rbp ) movq - 4 4 0 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % r 1 2 movq % r 1 2 , % rdx movq % r 1 2 , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 8 0 (% rbp ) movq % r 1 2 , - 4 7 2 (% rbp ) movq % r 1 2 , - 4 6 4 (% rbp ) . LBB 1 9 : movq $ 0 , - 8 0 (% rbp ) . LBB 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % rcx movl $ 0 , % eax . LBE 2 2 : jmp . L 7 . L 6 : . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBE 1 8 : . LBB 4 0 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : . LBE 4 0 : . LBB 4 1 : . LBB 2 9 : . LBB 2 8 : . LBB 2 7 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : movq % rax , - 8 0 (% rbp ) . LBB 2 5 : movq - 4 7 2 (% rbp ), % rdx cmpq $ 0 , - 8 0 (% rbp ) js . L 8 cmpq % rdx , - 8 0 (% rbp ) jl . L 3 5 . L 8 : movq - 8 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 4 8 0 (% rbp ), % rsi movq - 8 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rdx , % rsi movq - 8 0 (% rbp ), % rdx movq % rdx , (% rsi ) . LBE 2 5 : . LBE 2 4 : . LBB 2 6 : addq $ 1 , % rax . L 7 : . LBE 2 6 : cmpq % rcx , % rax jl . L 4 5 . LBE 2 7 : . LBE 2 8 : . LBE 2 9 : . LBB 3 0 : movzbl - 5 7 (% rbp ), % eax xorl $ 1 , % eax testb % al , % al je . L 1 2 . LBB 3 1 : . LBB 3 2 : movq $ 0 , - 4 0 (% rbp ) . LBB 3 3 : jmp . L 1 3 . L 4 6 : . LBB 3 4 : nop . LBE 3 4 : . LBB 3 5 : . LBB 3 6 : movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 4 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq - 4 8 0 (% rbp ), % rsi movq - 4 7 2 (% rbp ), % rdi movq % rsi , - 2 4 0 (% rbp ) movq % rdi , - 2 3 2 (% rbp ) movq - 4 6 4 (% rbp ), % rcx movq % rcx , - 2 2 4 (% rbp ) subq - 4 0 (% rbp ), % rdx subq $ 1 , % rdx movq - 4 7 2 (% rbp ), % rcx subq - 4 0 (% rbp ), % rcx subq $ 1 , % rcx movq - 4 7 2 (% rbp ), % rsi testq % rcx , % rcx js . L 1 4 cmpq % rsi , % rcx jl . L 3 7 . L 1 4 : movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 4 8 0 (% rbp ), % rsi salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rdi movq - 4 7 2 (% rbp ), % rcx cmpq $ 0 , - 4 0 (% rbp ) js . L 1 6 cmpq % rcx , - 4 0 (% rbp ) jl . L 3 8 . L 1 6 : movq - 4 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 4 8 0 (% rbp ), % rsi movq - 4 0 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rsi movq - 2 6 4 (% rbp ), % rcx testq % rax , % rax js . L 1 8 cmpq % rcx , % rax jl . L 3 9 . L 1 8 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 2 7 2 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq % rdi , (% rax ) movq - 2 3 2 (% rbp ), % rax testq % rdx , % rdx js . L 2 0 cmpq % rax , % rdx jl . L 4 0 . L 2 0 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq - 2 4 0 (% rbp ), % rax salq $ 3 , % rdx addq % rdx , % rax movq % rsi , (% rax ) . LBE 3 6 : . LBE 3 5 : . LBB 3 7 : addq $ 1 , - 4 0 (% rbp ) . L 1 3 : . LBE 3 7 : movq - 4 7 2 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax cmpq - 4 0 (% rbp ), % rax jg . L 4 6 . L 1 2 : . LBE 3 3 : . LBE 3 2 : . LBE 3 1 : . LBE 3 0 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 2 movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 3 leaq (% r 1 2 ,% r 1 3 ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 3 . LBB 3 8 : movq - 2 0 8 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) . LBE 3 8 : jmp . L 2 4 . L 2 3 : . LBB 3 9 : movq - 2 0 8 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rdx movq % rcx , - 4 0 0 (% rbp ) movq % rax , - 3 9 2 (% rbp ) movq % rdx , - 3 8 4 (% rbp ) . L 2 4 : . LBE 3 9 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq % r 1 3 , % rax leaq 0 (,% rax , 8 ), % rdx movq - 1 7 6 (% rbp ), % rax movq - 2 0 8 (% rbp ), % rcx movq % r 1 2 , % rsi salq $ 3 , % rsi addq % rsi , % rcx movq % rax , % rsi movq % rcx , % rdi call memmove @ PLT . LBE 4 1 : . LBE 1 5 : . LBB 4 2 : addq $ 1 , % rbx . L 5 : . LBE 4 2 : cmpq % r 1 4 , % rbx jl . L 4 7 . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : . LBB 4 3 : movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 4 4 : . LBB 4 5 : . LBB 4 6 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rcx movl $ 0 , % eax . LBE 4 6 : jmp . L 2 7 . L 4 8 : . LBB 4 7 : nop . LBE 4 7 : . LBB 4 8 : . LBB 4 9 : movq - 1 3 6 (% rbp ), % rdx testq % rax , % rax js . L 2 8 cmpq % rdx , % rax jge . L 2 8 movq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 4 9 : . LBB 5 0 : movq % rax , - 4 8 (% rbp ) movq % rdx , - 5 6 (% rbp ) . LBE 5 0 : . LBB 5 1 : movq - 3 9 2 (% rbp ), % rdx cmpq $ 0 , - 4 8 (% rbp ) jns . L 2 9 jmp . L 3 0 . L 2 8 : . LBE 5 1 : . LBB 5 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : . LBE 5 2 : . LBB 5 3 : cmpq % rdx , - 4 8 (% rbp ) jl . L 4 3 . L 3 0 : movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq - 4 0 0 (% rbp ), % rsi movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rsi , % rdx movq - 5 6 (% rbp ), % rsi addq $ 1 , % rsi movq % rsi , (% rdx ) . LBE 5 3 : . LBE 4 8 : . LBB 5 4 : addq $ 1 , % rax . L 2 7 : . LBE 5 4 : cmpq % rcx , % rax jl . L 4 8 . LBE 4 5 : . LBE 4 4 : . LBE 4 3 : . LBB 5 5 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 4 8 8 (% rbp ), % rcx movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 5 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 5 5 : . LBE 2 : movq - 4 8 8 (% rbp ), % rax leaq - 3 2 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 1 : leaq - 8 0 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 5 movl $ 8 0 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 6 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 7 6 0 , % rsp movq % rdi , - 7 2 8 (% rbp ) leaq . LC 1 6 (% rip ), % rax movl $ 4 , % edx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq $ 0 , - 6 0 8 (% rbp ) leaq . LC 1 7 (% rip ), % r 8 movl $ 4 , % r 9 d movq % r 8 , - 6 0 0 (% rbp ) movq % r 9 , - 5 9 2 (% rbp ) movq $ 1 , - 5 8 4 (% rbp ) leaq . LC 1 8 (% rip ), % rax movq % rax , - 7 6 8 (% rbp ) movq $ 4 , - 7 6 0 (% rbp ) movdqa - 7 6 8 (% rbp ), % xmm 0 movups % xmm 0 , - 5 7 6 (% rbp ) movq $ 2 , - 5 6 0 (% rbp ) leaq . LC 1 9 (% rip ), % r 1 2 movl $ 4 , % r 1 3 d movq % r 1 2 , - 5 5 2 (% rbp ) movq % r 1 3 , - 5 4 4 (% rbp ) movq $ 3 , - 5 3 6 (% rbp ) leaq . LC 2 0 (% rip ), % r 1 0 movl $ 8 , % r 1 1 d movq % r 1 0 , - 5 2 8 (% rbp ) movq % r 1 1 , - 5 2 0 (% rbp ) movq $ 3 , - 5 1 2 (% rbp ) leaq - 6 2 4 (% rbp ), % rax movq % rax , - 6 5 6 (% rbp ) movq $ 5 , - 6 4 8 (% rbp ) movq $ 5 , - 6 4 0 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 2 1 (% rip ), % rcx movl $ 7 0 , % ebx leaq - 2 0 8 (% rbp ), % rax movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) . LBB 4 2 : movq $ 0 , - 6 8 8 (% rbp ) movq $ 0 , - 6 8 0 (% rbp ) movq $ 0 , - 6 7 2 (% rbp ) . LBB 4 3 : . LBB 4 4 : . LBB 4 5 : movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 2 4 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 4 5 : jmp . L 5 5 . L 6 4 : . LBB 4 6 : nop . LBE 4 6 : . LBB 4 7 : . LBB 4 8 : movq - 4 2 4 (% rbp ), % rax testq % rbx , % rbx js . L 5 6 cmpq % rax , % rbx jge . L 5 6 movq - 4 3 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 4 8 (% rbp ) . LBE 4 8 : . LBB 4 9 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 6 8 8 (% rbp ) movq % rdx , - 6 8 0 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 6 7 2 (% rbp ) . LBE 4 9 : . LBB 5 0 : movq - 6 7 2 (% rbp ), % rax movq % rax , - 6 9 6 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 7 2 0 (% rbp ) movq % rdx , - 7 1 2 (% rbp ) movq - 7 2 0 (% rbp ), % rdx movq - 7 1 2 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . leetcode . balancedString movq % rax , % r 1 2 leaq go . leetcode .. go . leetcode . para 1 2 3 4 .. d (% rip ), % rax movq % rax , - 8 0 0 (% rbp ) leaq go . leetcode .. go . leetcode . para 1 2 3 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 5 7 jmp . L 6 2 . L 5 6 : . LBE 5 0 : . LBB 5 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 5 7 : . LBE 5 3 : . LBB 5 4 : . LBB 5 1 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 5 1 : jmp . L 5 9 . L 6 2 : . LBB 5 2 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 1 2 3 4 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 9 : . LBE 5 2 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 7 9 2 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 7 8 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq % r 1 2 , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 7 7 6 (% rbp ) movdqa - 8 0 0 (% rbp ), % xmm 1 movups % xmm 1 , - 3 0 4 (% rbp ) movdqa - 7 8 4 (% rbp ), % xmm 2 movups % xmm 2 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 2 2 (% rip ), % rax movq % rax , - 7 5 2 (% rbp ) movq $ 3 7 , - 7 4 4 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq - 7 5 2 (% rbp ), % rsi movq - 7 4 4 (% rbp ), % rdi movq % rsi , % r 8 movq % rdi , % r 9 movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) . LBE 5 4 : . LBE 4 7 : . LBB 5 5 : addq $ 1 , % rbx . L 5 5 : . LBE 5 5 : cmpq % r 1 3 , % rbx jl . L 6 4 . LBE 4 4 : . LBE 4 3 : . LBE 4 2 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 2 3 (% rip ), % r 1 4 movl $ 3 , % r 1 5 d leaq - 8 0 (% rbp ), % rax movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
leaq - 4 5 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 4 6 movl $ 4 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 2 : ret . L 3 4 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 0 8 , % rsp movq % rdi , - 3 6 0 (% rbp ) leaq - 3 5 2 (% rbp ), % rax movl $ 1 0 , % ecx movl $ 2 0 , % edx movl $ 0 , % esi movq % rax , % rdi call go . binaryTree . randomSlice call go . binaryTree . newBstRecrusive movq % rax , - 5 6 (% rbp ) . LBB 3 5 0 : movq $ 0 , - 6 4 (% rbp ) . LBB 3 5 1 : . LBB 3 5 2 : . LBB 3 5 3 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 3 5 3 : jmp . L 3 2 2 . L 3 4 5 : . LBB 3 5 4 : nop . LBE 3 5 4 : . LBB 3 5 5 : . LBB 3 5 6 : movq - 3 1 2 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 3 2 3 cmpq % rax , % r 1 2 jge . L 3 2 3 movq - 3 2 0 (% rbp ), % rdx movq % r 1 2 , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax . LBE 3 5 6 : . LBB 3 5 7 : movq % rax , - 6 4 (% rbp ) . LBE 3 5 7 : . LBB 3 5 8 : leaq uint 3 2 .. d (% rip ), % r 1 4 leaq uint 3 2 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 8 (% rbp ) movq - 2 8 8 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movl % eax , (% rdx ) movq - 2 8 8 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . binaryTree . bstRecrusive . Insert .. stub . LBE 3 5 8 : . LBE 3 5 5 : . LBB 3 6 0 : addq $ 1 , % r 1 2 jmp . L 3 2 2 . L 3 2 3 : . LBE 3 6 0 : . LBB 3 6 1 : . LBB 3 5 9 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 3 2 2 : . LBE 3 5 9 : . LBE 3 6 1 : cmpq % r 1 3 , % r 1 2 jl . L 3 4 5 . LBE 3 5 2 : . LBE 3 5 1 : . LBE 3 5 0 : subq $ 8 , % rsp pushq - 3 3 6 (% rbp ) pushq - 3 4 4 (% rbp ) pushq - 3 5 2 (% rbp ) call sort . Ints @ PLT addq $ 3 2 , % rsp call go . binaryTree . getRand movq % rax , % rdx movq - 3 4 4 (% rbp ), % rax subq $ 2 , % rax movq % rax , % rsi movq % rdx , % rdi call math .. z 2 frand . Rand . Intn @ PLT addq $ 1 , % rax movq % rax , - 7 2 (% rbp ) movq - 3 4 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 3 2 6 cmpq % rax , - 7 2 (% rbp ) jl . L 3 4 1 . L 3 2 6 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 1 : movq - 3 5 2 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movl % eax , % edx movq - 5 6 (% rbp ), % rax movl % edx , % esi movq % rax , % rdi call go . binaryTree . bstRecrusive . Search .. stub movq % rax , % r 1 2 movq % rdx , % r 1 3 movq - 5 6 (% rbp ), % rax movq % rax , % rdi call go . binaryTree . bstRecrusive . Root .. stub movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % r 8 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rcx , % rdi movq - 5 6 (% rbp ), % rax movq % rsi , % rcx movq % rdi , % rsi movq % rax , % rdi call go . binaryTree . bstRecrusive . Successor .. stub movq % rax , % rsi leaq type ... 1 go . binaryTree . bstElement (% rip ), % rcx cmpq % rcx , % rsi je . L 3 2 8 leaq type .. interface . 4 . 5 (% rip ), % rdx movq % rax , % rsi leaq type ... 1 go . binaryTree . bstElement (% rip ), % rdi call runtime . panicdottype @ PLT . L 3 2 8 : movq % rdx , % rax movl (% rax ), % eax movl % eax , % eax movq % rax , - 8 0 (% rbp ) . LBB 3 6 2 : movq - 7 2 (% rbp ), % rax addq $ 1 , % rax movq - 3 4 4 (% rbp ), % rdx testq % rax , % rax js . L 3 2 9 cmpq % rdx , % rax jl . L 3 4 2 . L 3 2 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 4 2 : movq - 3 5 2 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 8 0 (% rbp ) je . L 3 2 1 . LBB 3 6 3 : movq - 3 4 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 3 3 2 cmpq % rax , - 7 2 (% rbp ) jl . L 3 4 3 . L 3 3 2 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 3 : movq - 7 2 (% rbp ), % rax leaq 1 (% rax ), % rbx movq - 3 4 4 (% rbp ), % rax testq % rbx , % rbx js . L 3 3 4 cmpq % rax , % rbx jl . L 3 4 4 . L 3 3 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 4 : leaq int .. d (% rip ), % r 1 5 movq % r 1 5 , - 4 4 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq - 3 5 2 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 2 8 0 (% rbp ), % rax movq (% rdx ), % rdx movq % rdx , (% rax ) movq - 2 8 0 (% rbp ), % rax movq % rax , - 4 4 0 (% rbp ) movq % r 1 5 , - 4 3 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 7 2 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 2 7 2 (% rbp ), % rax movq (% rdx ), % rdx movq % rdx , (% rax ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 4 2 4 (% rbp ) movq % r 1 5 , - 4 1 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq - 8 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 6 4 (% rbp ), % rax movq % rax , - 4 0 8 (% rbp ) movdqa - 4 4 8 (% rbp ), % xmm 0 movups % xmm 0 , - 2 5 6 (% rbp ) movdqa - 4 3 2 (% rbp ), % xmm 1 movups % xmm 1 , - 2 4 0 (% rbp ) movdqa - 4 1 6 (% rbp ), % xmm 2 movups % xmm 2 , - 2 2 4 (% rbp ) leaq - 2 5 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 3 , - 1 3 6 (% rbp ) movq $ 3 , - 1 2 8 (% rbp ) leaq . LC 1 6 7 (% rip ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 4 2 , - 3 7 6 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq string .. d (% rip ), % rax movq % rax , - 4 0 0 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq % r 1 2 , - 1 9 2 (% rbp ) movq % r 1 3 , - 1 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 3 6 . LBB 3 6 4 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 3 6 4 : jmp . L 3 3 7 . L 3 3 6 : . LBB 3 6 5 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 3 7 : . LBE 3 6 5 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 3 9 2 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movdqa - 4 0 0 (% rbp ), % xmm 3 movups % xmm 3 , - 1 6 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 3 8 . LBB 3 6 6 : movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 3 6 6 : jmp . L 3 3 9 . L 3 3 8 : . LBB 3 6 7 : movq - 1 6 8 (% rbp ), % rax leaq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 3 9 : . LBE 3 6 7 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) movq - 3 6 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call testing . T . Log .. stub @ PLT addq $ 3 2 , % rsp movq - 3 6 0 (% rbp ), % rax movq % rax , % rdi call testing . T . Fail .. stub @ PLT . L 3 2 1 : . LBE 3 6 3 : . LBE 3 6 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 5 movl $ 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 4 5 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq % rdi , - 5 6 (% rbp ) movb $ 0 , - 2 6 (% rbp ) . LBB 3 0 : movq $ 0 , - 8 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . LBB 3 1 : . LBB 3 2 : jmp . L 2 7 . L 4 3 : . LBB 3 3 : nop . LBE 3 3 : . LBB 3 4 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq 8 (% rax ), % rax movq % rax , - 2 4 (% rbp ) movq - 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 8 (% rbp ) movq - 1 6 (% rbp ), % rax addq $ 8 , % rax movq - 8 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 2 8 . LBB 3 5 : movq % rdx , (% rax ) . LBE 3 5 : jmp . L 2 9 . L 2 8 : . LBB 3 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 9 : . LBE 3 6 : . LBB 3 7 : movq - 1 6 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax movq % rdx , - 8 (% rbp ) movq % rax , - 1 6 (% rbp ) . L 2 7 : . LBE 3 7 : . LBE 3 4 : . LBB 3 8 : cmpq $ 0 , - 2 4 (% rbp ) setne % al testb % al , % al je . L 3 0 . LBB 3 9 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax setne % al . L 3 0 : . LBE 3 9 : . LBE 3 8 : testb % al , % al jne . L 4 3 . LBE 3 2 : . LBE 3 1 : . LBB 4 0 : movq - 1 6 (% rbp ), % rdx movq - 8 (% rbp ), % rax movq % rdx , - 8 (% rbp ) movq % rax , - 5 6 (% rbp ) . LBE 4 0 : . LBB 4 1 : cmpq $ 0 , - 2 4 (% rbp ) je . L 3 3 . LBB 4 2 : movq - 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 6 (% rbp ) . L 3 3 : . LBE 4 2 : . LBE 4 1 : movb $ 1 , - 2 5 (% rbp ) . LBB 4 3 : . LBB 4 4 : jmp . L 3 4 . L 4 4 : . LBB 4 5 : nop . LBE 4 5 : . LBB 4 6 : . LBB 4 7 : movq - 5 6 (% rbp ), % rax movq (% rax ), % rdx movq - 1 6 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx je . L 3 5 . LBB 4 8 : movb $ 0 , - 2 5 (% rbp ) . L 3 5 : . LBE 4 8 : . LBE 4 7 : movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 0 (% rbp ) movq - 5 6 (% rbp ), % rax addq $ 8 , % rax movq - 8 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 6 . LBB 4 9 : movq % rdx , (% rax ) . LBE 4 9 : jmp . L 3 7 . L 3 6 : . LBB 5 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 7 : . LBE 5 0 : . LBB 5 1 : movq - 5 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax movq % rdx , - 8 (% rbp ) movq % rax , - 5 6 (% rbp ) . LBE 5 1 : movq - 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 6 (% rbp ) . L 3 4 : . LBE 4 6 : cmpq $ 0 , - 5 6 (% rbp ) jne . L 4 4 . LBE 4 4 : . LBE 4 3 : . LBB 5 2 : movzbl - 2 5 (% rbp ), % eax movb % al , - 2 6 (% rbp ) movzbl - 2 6 (% rbp ), % eax . LBE 5 2 : . LBE 3 0 : leave ret
. LFB 3 : leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 3 movl $ 2 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 4 8 , % rsp movq % rdi , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 2 9 : movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) . LBB 3 0 : . LBB 3 1 : . LBB 3 2 : movq go . day 3 3 3 . testcases (% rip ), % rax movq 8 + go . day 3 3 3 . testcases (% rip ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 + go . day 3 3 3 . testcases (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movl $ 0 , % ebx . LBE 3 2 : jmp . L 2 3 . L 3 2 : . LBB 3 3 : nop . LBE 3 3 : . LBB 3 4 : . LBB 3 5 : movq - 1 8 4 (% rbp ), % rax testq % rbx , % rbx js . L 2 4 cmpq % rax , % rbx jge . L 2 4 movq - 1 9 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) . LBE 3 5 : . LBB 3 6 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) . LBE 3 6 : . LBB 3 7 : . LBB 3 8 : movq - 2 4 8 (% rbp ), % rdx movq - 2 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . day 3 3 3 . FindCelebrity movq % rax , - 5 6 (% rbp ) movq - 2 4 0 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 2 5 jmp . L 2 6 . L 2 4 : . LBE 3 8 : . LBE 3 7 : . LBB 4 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : . LBE 4 3 : . LBB 4 4 : . LBB 4 2 : . LBB 3 9 : leaq int .. d (% rip ), % rax movq % rax , - 2 8 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 2 8 0 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 2 8 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movdqa - 2 8 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 7 . LBB 4 0 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 4 0 : jmp . L 2 8 . L 2 7 : . LBB 4 1 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 8 : . LBE 4 1 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) leaq . LC 4 1 (% rip ), % r 1 2 movl $ 1 9 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 2 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 2 6 : . LBE 3 9 : . LBE 4 2 : . LBE 4 4 : . LBE 3 4 : . LBB 4 5 : addq $ 1 , % rbx . L 2 3 : . LBE 4 5 : cmpq - 2 7 2 (% rbp ), % rbx jl . L 3 2 . LBE 3 1 : . LBE 3 0 : . LBE 2 9 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 4 5 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 1 movl $ 4 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 6 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 2 4 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq $ 0 , - 3 8 4 (% rbp ) movq $ 0 , - 3 7 6 (% rbp ) . LBB 2 : leaq - 4 1 6 (% rbp ), % rax movq - 4 4 8 (% rbp ), % rsi movq - 4 4 0 (% rbp ), % rdx leaq main . simplifyPath .. func 1 .. f (% rip ), % rcx movq % rax , % rdi call strings . FieldsFunc @ PLT . LBB 3 : movq $ 0 , - 4 0 (% rbp ) . LBB 4 : jmp . L 2 . L 5 9 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq - 4 0 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 cmpq % rax , - 4 0 (% rbp ) jl . L 5 0 . L 3 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 0 : movq - 4 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % rcx cmpq $ 1 , % rcx jne . L 5 movq % rax , % rsi leaq . LC 2 (% rip ), % rcx cmpq % rcx , % rsi jne . L 6 movl $ 1 , % eax jmp . L 8 . L 6 : movzbl (% rax ), % eax movzbl % al , % eax leaq . LC 2 (% rip ), % rdx movzbl (% rdx ), % edx movzbl % dl , % edx subl % edx , % eax testl % eax , % eax sete % al jmp . L 8 . L 5 : movl $ 0 , % eax . L 8 : testb % al , % al je . L 9 . LBB 8 : movq - 4 0 0 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 0 cmpq % rax , - 4 0 (% rbp ) jg . L 1 0 cmpq $ 0 , - 4 0 (% rbp ) jns . L 1 1 jmp . L 5 1 . L 1 0 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 5 1 : movq - 4 0 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 1 : movq - 4 0 (% rbp ), % rax addq $ 1 , % rax movq - 4 0 0 (% rbp ), % rdx testq % rax , % rax js . L 1 3 cmpq % rdx , % rax jle . L 5 2 . L 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 5 2 : movq - 4 1 6 (% rbp ), % rdx movq % rdx , - 3 6 8 (% rbp ) movq - 4 0 (% rbp ), % rdx movq % rdx , - 3 6 0 (% rbp ) movq - 4 0 0 (% rbp ), % rdx movq % rdx , - 3 5 2 (% rbp ) movq - 3 6 0 (% rbp ), % rbx movq - 4 1 6 (% rbp ), % rcx movq - 4 0 0 (% rbp ), % rdx cmpq % rdx , % rax je . L 1 5 movq % rax , % rdx salq $ 4 , % rdx jmp . L 1 6 . L 1 5 : movl $ 0 , % edx . L 1 6 : addq % rcx , % rdx movq % rdx , - 3 3 6 (% rbp ) movq - 4 0 8 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 3 2 8 (% rbp ) movq - 4 0 0 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 3 2 0 (% rbp ) movq - 3 2 8 (% rbp ), % rax addq % rbx , % rax movq - 3 5 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 7 movq - 3 6 8 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) jmp . L 1 8 . L 1 7 : movq - 3 6 8 (% rbp ), % rcx movq - 3 5 2 (% rbp ), % rdx movq % rcx , - 3 6 8 (% rbp ) movq % rax , - 3 6 0 (% rbp ) movq % rdx , - 3 5 2 (% rbp ) . L 1 8 : movq - 3 6 8 (% rbp ), % rdx movq - 3 5 2 (% rbp ), % rax cmpq % rax , % rbx je . L 1 9 movq % rbx , % rax salq $ 4 , % rax jmp . L 2 0 . L 1 9 : movl $ 0 , % eax . L 2 0 : addq % rdx , % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 6 0 (% rbp ), % rax subq % rbx , % rax movq % rax , - 2 9 6 (% rbp ) movq - 3 5 2 (% rbp ), % rax subq % rbx , % rax movq % rax , - 2 8 8 (% rbp ) pushq - 3 2 0 (% rbp ) pushq - 3 2 8 (% rbp ) pushq - 3 3 6 (% rbp ) pushq - 2 8 8 (% rbp ) pushq - 2 9 6 (% rbp ) pushq - 3 0 4 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . typedslicecopy @ PLT addq $ 4 8 , % rsp movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) subq $ 1 , - 4 0 (% rbp ) . LBE 8 : jmp . L 2 1 . L 9 : . LBB 9 : . LBB 1 0 : movq - 4 0 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 2 cmpq % rax , - 4 0 (% rbp ) jl . L 5 3 . L 2 2 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 3 : movq - 4 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % rcx cmpq $ 2 , % rcx jne . L 2 4 movq % rax , % rsi leaq . LC 3 (% rip ), % rcx cmpq % rcx , % rsi jne . L 2 5 movl $ 1 , % eax jmp . L 2 7 . L 2 5 : movl $ 2 , % edx leaq . LC 3 (% rip ), % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 2 7 . L 2 4 : movl $ 0 , % eax . L 2 7 : testb % al , % al je . L 2 1 . LBB 1 1 : . LBB 1 2 : cmpq $ 0 , - 4 0 (% rbp ) jne . L 2 8 . LBB 1 3 : movq - 4 0 0 (% rbp ), % rax testq % rax , % rax jg . L 2 9 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 2 9 : movq - 4 1 6 (% rbp ), % rdx movq - 4 0 0 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 4 , % rax leaq (% rdx ,% rax ), % rcx movq - 4 0 8 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 4 0 0 (% rbp ), % rax subq $ 1 , % rax movq % rcx , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq % rax , - 4 0 0 (% rbp ) subq $ 1 , - 4 0 (% rbp ) jmp . L 2 1 . L 2 8 : . LBE 1 3 : . LBE 1 2 : movq - 4 0 (% rbp ), % rax leaq - 1 (% rax ), % rdi movq - 4 0 0 (% rbp ), % rax testq % rdi , % rdi js . L 3 0 cmpq % rax , % rdi jg . L 3 0 testq % rdi , % rdi jns . L 3 1 jmp . L 5 4 . L 3 0 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 5 4 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 3 1 : movq - 4 0 (% rbp ), % rax addq $ 1 , % rax movq - 4 0 0 (% rbp ), % rdx testq % rax , % rax js . L 3 3 cmpq % rdx , % rax jle . L 5 5 . L 3 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 5 5 : movq - 4 1 6 (% rbp ), % rdx movq % rdx , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq - 4 0 0 (% rbp ), % rdx movq % rdx , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rbx movq - 4 1 6 (% rbp ), % rcx movq - 4 0 0 (% rbp ), % rdx cmpq % rdx , % rax je . L 3 5 movq % rax , % rdx salq $ 4 , % rdx jmp . L 3 6 . L 3 5 : movl $ 0 , % edx . L 3 6 : addq % rcx , % rdx movq % rdx , - 2 4 0 (% rbp ) movq - 4 0 8 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 2 3 2 (% rbp ) movq - 4 0 0 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax addq % rbx , % rax movq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 3 7 movq - 2 7 2 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) jmp . L 3 8 . L 3 7 : movq - 2 7 2 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rdx movq % rcx , - 2 7 2 (% rbp ) movq % rax , - 2 6 4 (% rbp ) movq % rdx , - 2 5 6 (% rbp ) . L 3 8 : movq - 2 7 2 (% rbp ), % rdx movq - 2 5 6 (% rbp ), % rax cmpq % rax , % rbx je . L 3 9 movq % rbx , % rax salq $ 4 , % rax jmp . L 4 0 . L 3 9 : movl $ 0 , % eax . L 4 0 : addq % rdx , % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 6 4 (% rbp ), % rax subq % rbx , % rax movq % rax , - 2 0 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax subq % rbx , % rax movq % rax , - 1 9 2 (% rbp ) pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) pushq - 1 9 2 (% rbp ) pushq - 2 0 0 (% rbp ) pushq - 2 0 8 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . typedslicecopy @ PLT addq $ 4 8 , % rsp movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) subq $ 2 , - 4 0 (% rbp ) . L 2 1 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBE 7 : . LBE 6 : . LBB 1 4 : addq $ 1 , - 4 0 (% rbp ) . L 2 : . LBE 1 4 : movq - 4 0 8 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 5 9 . LBE 4 : . LBE 3 : leaq . LC 4 (% rip ), % r 1 2 movl $ 1 , % r 1 3 d movq % r 1 2 , - 4 3 2 (% rbp ) movq % r 1 3 , - 4 2 4 (% rbp ) . LBB 1 5 : movq $ 0 , - 4 8 (% rbp ) . LBB 1 6 : jmp . L 4 3 . L 6 0 : . LBB 1 7 : nop . LBE 1 7 : . LBB 1 8 : movq - 4 0 8 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 4 4 cmpq % rax , - 4 8 (% rbp ) jl . L 5 7 . L 4 4 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 7 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 4 1 6 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) . LBB 1 9 : movq - 4 0 8 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 4 8 (% rbp ) je . L 4 6 . LBB 2 0 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) leaq . LC 4 (% rip ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) . L 4 6 : . LBE 2 0 : . LBE 1 9 : . LBE 1 8 : . LBB 2 1 : addq $ 1 , - 4 8 (% rbp ) . L 4 3 : . LBE 2 1 : movq - 4 0 8 (% rbp ), % rax cmpq % rax , - 4 8 (% rbp ) jl . L 6 0 . LBE 1 6 : . LBE 1 5 : . LBB 2 2 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx . LBE 2 2 : . LBE 2 : leaq - 2 4 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 9 movl $ 1 2 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 9 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 0 4 , % rsp movq $ 0 , - 4 8 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 3 : cmpq $ 1 , - 5 6 (% rbp ) jg . L 2 . LBB 4 : . LBB 5 : movq - 5 6 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax jmp . L 4 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 5 6 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 8 0 (% rbp ) movq % rbx , - 7 2 (% rbp ) movq % rbx , - 6 4 (% rbp ) movq - 5 6 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 1 2 (% rbp ) movq % rbx , - 1 0 4 (% rbp ) movq % rbx , - 9 6 (% rbp ) movq - 7 2 (% rbp ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq - 8 0 (% rbp ), % rax movq $ 1 , (% rax ) movq - 5 6 (% rbp ), % rax subq $ 1 , % rax movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 5 cmpq % rdx , % rax jl . L 4 2 . L 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq - 1 1 2 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq $ 1 , (% rax ) . LBB 6 : movq $ 1 , - 3 2 (% rbp ) . LBB 7 : jmp . L 7 . L 5 7 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 8 cmpq % rdx , % rax jl . L 4 3 . L 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 1 0 cmpq % rdx , - 3 2 (% rbp ) jl . L 4 4 . L 1 0 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jge . L 1 2 . LBB 1 1 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 3 cmpq % rax , - 3 2 (% rbp ) jl . L 4 5 . L 1 3 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 1 5 cmpq % rdx , % rax jl . L 4 6 . L 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq - 8 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 8 0 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax addq $ 1 , % rdx movq % rdx , (% rax ) . LBE 1 1 : jmp . L 1 7 . L 1 2 : . LBB 1 2 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 8 cmpq % rax , - 3 2 (% rbp ) jl . L 4 7 . L 1 8 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : movq - 8 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 1 , (% rax ) . L 1 7 : . LBE 1 2 : . LBE 1 0 : . LBB 1 3 : movq - 5 6 (% rbp ), % rax subq - 3 2 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq 2 4 (% rbp ), % rax testq % rdx , % rdx js . L 2 0 cmpq % rax , % rdx jl . L 4 8 . L 2 0 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : movq - 5 6 (% rbp ), % rax subq - 3 2 (% rbp ), % rax movq 2 4 (% rbp ), % rcx testq % rax , % rax js . L 2 2 cmpq % rcx , % rax jl . L 4 9 . L 2 2 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : movq 1 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jle . L 2 4 . LBB 1 4 : movq - 5 6 (% rbp ), % rax subq - 3 2 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 1 0 4 (% rbp ), % rax testq % rdx , % rdx js . L 2 5 cmpq % rax , % rdx jl . L 5 0 . L 2 5 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 0 : movq - 5 6 (% rbp ), % rax subq - 3 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rcx testq % rax , % rax js . L 2 7 cmpq % rcx , % rax jl . L 5 1 . L 2 7 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : movq - 1 1 2 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rcx movq - 1 1 2 (% rbp ), % rax salq $ 3 , % rdx addq % rdx , % rax leaq 1 (% rcx ), % rdx movq % rdx , (% rax ) . LBE 1 4 : jmp . L 2 9 . L 2 4 : . LBB 1 5 : movq - 5 6 (% rbp ), % rax subq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 3 0 cmpq % rdx , % rax jl . L 5 2 . L 3 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : movq - 1 1 2 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq $ 1 , (% rax ) . L 2 9 : . LBE 1 5 : . LBE 1 3 : . LBE 9 : . LBB 1 6 : addq $ 1 , - 3 2 (% rbp ) . L 7 : . LBE 1 6 : movq - 3 2 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jl . L 5 7 . LBE 7 : . LBE 6 : movq $ 0 , - 2 4 (% rbp ) . LBB 1 7 : movq $ 0 , - 4 0 (% rbp ) . LBB 1 8 : jmp . L 3 4 . L 5 8 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 5 cmpq % rax , - 4 0 (% rbp ) jl . L 5 4 . L 3 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 7 cmpq % rax , - 4 0 (% rbp ) jl . L 5 5 . L 3 7 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 5 : movq - 1 1 2 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 8 0 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 0 1 3 5 . max addq % rax , - 2 4 (% rbp ) . LBE 2 0 : . LBB 2 1 : addq $ 1 , - 4 0 (% rbp ) . L 3 4 : . LBE 2 1 : movq - 4 0 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jl . L 5 8 . LBE 1 8 : . LBE 1 7 : . LBB 2 2 : movq - 2 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax . L 4 1 : . LBE 2 2 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 4 movl $ 2 4 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 subq $ 2 0 8 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 2 2 4 (% rbp ) movq % rdi , - 2 1 6 (% rbp ) movq % rdx , - 2 4 0 (% rbp ) movq % rcx , - 2 3 2 (% rbp ) movq - 2 1 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 2 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movb $ 0 , - 4 9 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 2 0 8 (% rbp ) movq $ 0 , - 2 0 0 (% rbp ) . LBB 2 : . LBB 3 : jmp . L 2 . L 1 3 : . LBB 4 : nop . LBE 4 : . LBB 5 : movq - 4 0 (% rbp ), % rdx movq - 2 2 4 (% rbp ), % rcx movq - 2 1 6 (% rbp ), % rax movq % rcx , % rdi movq % rax , % rsi call main . threeCul movq % rax , - 7 2 (% rbp ) movq - 4 8 (% rbp ), % rdx movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rax movq % rcx , % rdi movq % rax , % rsi call main . threeCul movq % rax , - 8 0 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 6 : cmpb $ 0 , - 4 9 (% rbp ) je . L 3 . LBB 7 : movq $ 1 , - 6 4 (% rbp ) . LBE 7 : jmp . L 4 . L 3 : . LBB 8 : movq $ 0 , - 6 4 (% rbp ) . L 4 : . LBE 8 : . LBE 6 : . LBB 9 : movq - 7 2 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax addq % rax , % rdx movq - 6 4 (% rbp ), % rax addq % rdx , % rax cmpq $ 3 , % rax jne . L 5 . LBB 1 0 : movb $ 1 , - 4 9 (% rbp ) leaq . LC 2 (% rip ), % r 1 4 movl $ 1 , % r 1 5 d movq % r 1 4 , - 1 9 2 (% rbp ) movq % r 1 5 , - 1 8 4 (% rbp ) . LBE 1 0 : jmp . L 6 . L 5 : . LBB 1 1 : . LBB 1 2 : movq - 7 2 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax addq % rax , % rdx movq - 6 4 (% rbp ), % rax addq % rdx , % rax cmpq $ 2 , % rax jne . L 7 . LBB 1 3 : leaq . LC 3 (% rip ), % r 1 2 movl $ 1 , % r 1 3 d movq % r 1 2 , - 1 9 2 (% rbp ) movq % r 1 3 , - 1 8 4 (% rbp ) movb $ 1 , - 4 9 (% rbp ) . LBE 1 3 : jmp . L 6 . L 7 : . LBB 1 4 : movq - 7 2 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax addq % rax , % rdx movq - 6 4 (% rbp ), % rax addq % rdx , % rax movq % rax , % rdi call strconv . Itoa @ PLT movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movb $ 0 , - 4 9 (% rbp ) . L 6 : . LBE 1 4 : . LBE 1 2 : . LBE 1 1 : . LBE 9 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) subq $ 1 , - 4 0 (% rbp ) subq $ 1 , - 4 8 (% rbp ) . L 2 : . LBE 5 : . LBB 1 5 : cmpq $ 0 , - 4 0 (% rbp ) setg % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 8 . LBB 1 6 : cmpq $ 0 , - 4 8 (% rbp ) setg % al . L 8 : . LBE 1 6 : . LBE 1 5 : testb % al , % al jne . L 1 3 . LBE 3 : . LBE 2 : . LBB 1 7 : cmpb $ 0 , - 4 9 (% rbp ) je . L 1 1 . LBB 1 8 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) leaq . LC 2 (% rip ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rcx leaq - 1 1 2 (% rbp ), % rax movl $ 2 , % edx movq % rcx , % rsi movq % rax , % rdi call runtime . concatstrings @ PLT movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) . L 1 1 : . LBE 1 8 : . LBE 1 7 : movq - 2 0 8 (% rbp ), % rdx movq - 2 0 0 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call main . printReslut addq $ 2 0 8 , % rsp popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 1 0 : leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 7 9 3 movl $ 2 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 1 5 : ret . L 1 7 9 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 1 6 , % rsp movq % rdi , - 2 3 2 (% rbp ) leaq . LC 9 1 (% rip ), % rax movl $ 1 0 , % edx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) . LBB 1 4 3 5 : call main . p 1 3 movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 1 6 (% rbp ), % rdx movq - 2 0 0 (% rbp ), % rax cmpq % rax , % rdx jne . L 1 7 8 5 movq - 2 2 4 (% rbp ), % rdx movq - 2 0 8 (% rbp ), % rax cmpq % rax , % rdx je . L 1 7 8 4 movq - 2 0 0 (% rbp ), % rax movq % rax , % rdx movq - 2 0 8 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax je . L 1 7 8 4 . L 1 7 8 5 : . LBB 1 4 3 6 : leaq string .. d (% rip ), % rax movq % rax , - 2 5 6 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 7 8 7 . LBB 1 4 3 7 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 4 3 7 : jmp . L 1 7 8 8 . L 1 7 8 7 : . LBB 1 4 3 8 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 7 8 8 : . LBE 1 4 3 8 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 2 4 8 (% rbp ) leaq string .. d (% rip ), % r 1 4 leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 7 8 9 . LBB 1 4 3 9 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 4 3 9 : jmp . L 1 7 9 0 . L 1 7 8 9 : . LBB 1 4 4 0 : movq - 1 5 2 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 7 9 0 : . LBE 1 4 4 0 : movq - 1 5 2 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movdqa - 2 5 6 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 7 9 1 . LBB 1 4 4 1 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 1 4 4 1 : jmp . L 1 7 9 2 . L 1 7 9 1 : . LBB 1 4 4 2 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 7 9 2 : . LBE 1 4 4 2 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) leaq . LC 9 2 (% rip ), % r 1 2 movl $ 2 4 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq - 2 3 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 1 7 8 4 : . LBE 1 4 3 6 : . LBE 1 4 3 5 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 9 6 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 3 movl $ 9 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 2 0 , % rsp movq % rdi , - 8 7 2 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 0 4 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq $- 2 , (% rax ) movq $ 0 , 8 (% rax ) movq $- 3 , 1 6 (% rax ) movq - 7 0 4 (% rbp ), % rax movq % rax , - 7 8 4 (% rbp ) movq $ 3 , - 7 7 6 (% rbp ) movq $ 3 , - 7 6 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 9 6 (% rbp ) movq - 6 9 6 (% rbp ), % rax movq $- 3 , (% rax ) movq $ 0 , 8 (% rax ) movq $- 2 , 1 6 (% rax ) movq - 6 9 6 (% rbp ), % rax movq % rax , - 7 6 0 (% rbp ) movq $ 3 , - 7 5 2 (% rbp ) movq $ 3 , - 7 4 4 (% rbp ) . LBB 2 : movq $ 0 , - 8 6 4 (% rbp ) movq $ 0 , - 8 5 6 (% rbp ) movq $ 0 , - 8 4 8 (% rbp ) movq $ 0 , - 8 4 0 (% rbp ) movq $ 0 , - 8 3 2 (% rbp ) movq $ 0 , - 8 2 4 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , - 6 0 8 (% rbp ) movq % rdx , - 6 0 0 (% rbp ) movq $ 1 , - 8 8 0 (% rbp ) movl $ 0 , % r 1 3 d . LBE 5 : jmp . L 2 . L 3 2 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : testq % r 1 3 , % r 1 3 js . L 3 testq % r 1 3 , % r 1 3 jg . L 3 movq % r 1 3 , % rax addq % rax , % rax addq % r 1 3 , % rax salq $ 4 , % rax leaq - 4 8 (% rbp ), % rbx addq % rbx , % rax leaq - 5 9 2 (% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 6 8 8 (% rbp ) movq % rdx , - 6 8 0 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 6 7 2 (% rbp ) movq % rdx , - 6 6 4 (% rbp ) movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 6 5 6 (% rbp ) movq % rdx , - 6 4 8 (% rbp ) . LBE 8 : . LBB 9 : movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 8 6 4 (% rbp ) movq % rdx , - 8 5 6 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 8 4 8 (% rbp ) movq % rdx , - 8 4 0 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 8 3 2 (% rbp ) movq % rdx , - 8 2 4 (% rbp ) . LBE 9 : . LBB 1 0 : leaq - 7 3 6 (% rbp ), % rax movq % rax , % rdi call go . problem 1 5 5 . Constructor movl $ 0 , % edx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 8 1 6 (% rbp ) movq $ 0 , - 8 0 8 (% rbp ) movq $ 0 , - 8 0 0 (% rbp ) . LBB 1 1 : movq $ 0 , - 5 6 (% rbp ) . LBB 1 2 : movq - 8 6 4 (% rbp ), % rax movq - 8 5 6 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 8 4 8 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) . LBB 1 3 : . LBB 1 4 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq - 5 0 4 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 4 : jmp . L 4 . L 3 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : . LBB 4 6 : movl $ 1 , % esi movq % r 1 3 , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : . LBE 4 6 : . LBB 4 7 : . LBB 2 5 : . LBB 2 4 : . LBB 2 3 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 5 0 4 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 5 1 2 (% rbp ), % rdx movq % rbx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax . LBE 1 7 : . LBB 1 8 : movq % rax , - 5 6 (% rbp ) . LBE 1 8 : . LBB 1 9 : movq - 5 6 (% rbp ), % rdx leaq - 7 3 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 1 5 5 . MinStack . Push . LBE 1 9 : . LBE 1 6 : . LBB 2 1 : addq $ 1 , % rbx jmp . L 4 . L 5 : . LBE 2 1 : . LBB 2 2 : . LBB 2 0 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 2 0 : . LBE 2 2 : cmpq % r 1 2 , % rbx jl . L 3 1 . LBE 2 3 : . LBE 2 4 : . LBE 2 5 : leaq - 7 3 6 (% rbp ), % rax movq % rax , % rdi call go . problem 1 5 5 . MinStack . GetMin movq % rax , % r 1 2 movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq - 4 7 2 (% rbp ), % rbx leaq 1 (% rbx ), % rcx movq - 4 6 4 (% rbp ), % rsi movq % rcx , % rdx movq % rsi , % rax cmpq % rax , % rdx jbe . L 8 . LBB 2 6 : movq - 4 8 0 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdi movq % rcx , % r 9 movq % rsi , % r 8 movq % rbx , % rcx movq % rax , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 8 1 6 (% rbp ) movq % rdx , - 8 0 8 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 8 0 0 (% rbp ) . LBE 2 6 : jmp . L 9 . L 8 : . LBB 2 7 : movq - 4 8 0 (% rbp ), % rax movq - 4 6 4 (% rbp ), % rdx movq % rax , - 8 1 6 (% rbp ) movq % rcx , - 8 0 8 (% rbp ) movq % rdx , - 8 0 0 (% rbp ) . L 9 : . LBE 2 7 : movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq - 4 8 0 (% rbp ), % rdx movq % rbx , % rax salq $ 3 , % rax addq % rdx , % rax movq % r 1 2 , (% rax ) leaq - 7 3 6 (% rbp ), % rax movq % rax , % rdi call go . problem 1 5 5 . MinStack . Pop leaq - 7 3 6 (% rbp ), % rax movq % rax , % rdi call go . problem 1 5 5 . MinStack . Top movq % rax , % r 1 2 movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq - 4 4 0 (% rbp ), % rbx leaq 1 (% rbx ), % rcx movq - 4 3 2 (% rbp ), % rsi movq % rcx , % rdx movq % rsi , % rax cmpq % rax , % rdx jbe . L 1 0 . LBB 2 8 : movq - 4 4 8 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdi movq % rcx , % r 9 movq % rsi , % r 8 movq % rbx , % rcx movq % rax , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 8 1 6 (% rbp ) movq % rdx , - 8 0 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 8 0 0 (% rbp ) . LBE 2 8 : jmp . L 1 1 . L 1 0 : . LBB 2 9 : movq - 4 4 8 (% rbp ), % rax movq - 4 3 2 (% rbp ), % rdx movq % rax , - 8 1 6 (% rbp ) movq % rcx , - 8 0 8 (% rbp ) movq % rdx , - 8 0 0 (% rbp ) . L 1 1 : . LBE 2 9 : movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq - 4 4 8 (% rbp ), % rdx movq % rbx , % rax salq $ 3 , % rax addq % rdx , % rax movq % r 1 2 , (% rax ) leaq - 7 3 6 (% rbp ), % rax movq % rax , % rdi call go . problem 1 5 5 . MinStack . GetMin movq % rax , % r 1 2 movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 4 0 8 (% rbp ), % rbx leaq 1 (% rbx ), % rcx movq - 4 0 0 (% rbp ), % rsi movq % rcx , % rdx movq % rsi , % rax cmpq % rax , % rdx jbe . L 1 2 . LBB 3 0 : movq - 4 1 6 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdi movq % rcx , % r 9 movq % rsi , % r 8 movq % rbx , % rcx movq % rax , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 8 1 6 (% rbp ) movq % rdx , - 8 0 8 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 8 0 0 (% rbp ) . LBE 3 0 : jmp . L 1 3 . L 1 2 : . LBB 3 1 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 0 (% rbp ), % rdx movq % rax , - 8 1 6 (% rbp ) movq % rcx , - 8 0 8 (% rbp ) movq % rdx , - 8 0 0 (% rbp ) . L 1 3 : . LBE 3 1 : movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 4 1 6 (% rbp ), % rdx movq % rbx , % rax salq $ 3 , % rax addq % rdx , % rax movq % r 1 2 , (% rax ) . LBB 3 2 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 9 1 2 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 8 4 0 (% rbp ), % rax movq - 8 3 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 8 2 4 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 4 . LBB 3 3 : movq - 3 6 0 (% rbp ), % rcx movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 3 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 3 : jmp . L 1 5 . L 1 4 : . LBB 3 4 : movq - 3 6 0 (% rbp ), % rcx leaq - 3 5 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 5 : . LBE 3 4 : movq - 3 6 0 (% rbp ), % rax movq % rax , - 9 0 4 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 8 9 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 6 . LBB 3 5 : movq - 3 9 2 (% rbp ), % rcx movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 6 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 5 : jmp . L 1 7 . L 1 6 : . LBB 3 6 : movq - 3 9 2 (% rbp ), % rcx leaq - 3 8 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 7 : . LBE 3 6 : movq - 3 9 2 (% rbp ), % rax movq % rax , - 8 8 8 (% rbp ) movq - 8 9 6 (% rbp ), % rax movq - 8 8 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % rax movq - 9 1 2 (% rbp ), % rdx movq - 9 0 4 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT xorl $ 1 , % eax testb % al , % al je . L 1 8 . LBB 3 7 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 9 6 0 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movq - 8 6 4 (% rbp ), % rax movq - 8 5 6 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 8 4 8 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 9 . LBB 3 8 : movq - 3 2 8 (% rbp ), % rcx movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 0 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 8 : jmp . L 2 0 . L 1 9 : . LBB 3 9 : movq - 3 2 8 (% rbp ), % rcx leaq - 3 2 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 0 : . LBE 3 9 : movq - 3 2 8 (% rbp ), % rax movq % rax , - 9 5 2 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 9 4 4 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 9 6 (% rbp ) movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 1 . LBB 4 0 : movq - 2 9 6 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 7 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 0 : jmp . L 2 2 . L 2 1 : . LBB 4 1 : movq - 2 9 6 (% rbp ), % rcx leaq - 2 8 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 2 : . LBE 4 1 : movq - 2 9 6 (% rbp ), % rax movq % rax , - 9 3 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 9 2 8 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 8 4 0 (% rbp ), % rax movq - 8 3 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 8 2 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 3 . LBB 4 2 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 2 : jmp . L 2 4 . L 2 3 : . LBB 4 3 : movq - 2 6 4 (% rbp ), % rcx leaq - 2 5 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 4 : . LBE 4 3 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 9 2 0 (% rbp ) leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movdqa - 9 6 0 (% rbp ), % xmm 0 movups % xmm 0 , - 2 2 4 (% rbp ) movdqa - 9 4 4 (% rbp ), % xmm 1 movups % xmm 1 , - 2 0 8 (% rbp ) movdqa - 9 2 8 (% rbp ), % xmm 2 movups % xmm 2 , - 1 9 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 5 . LBB 4 4 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 4 4 : jmp . L 2 6 . L 2 5 : . LBB 4 5 : movq - 2 3 2 (% rbp ), % rcx leaq - 2 2 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 6 : . LBE 4 5 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 3 0 (% rip ), % r 1 4 movl $ 2 5 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 8 7 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 1 8 : . LBE 3 7 : . LBE 3 2 : . LBE 4 7 : . LBE 7 : . LBB 4 8 : addq $ 1 , % r 1 3 . L 2 : . LBE 4 8 : cmpq - 8 8 0 (% rbp ), % r 1 3 jl . L 3 2 . LBE 4 : . LBE 3 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 4 5 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 5 movl $ 4 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 0 8 , % rsp leaq type .. chan . 0 struct . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rbx movl $ 0 , % esi leaq type .. chan . 0 struct . 4 . 5 (% rip ), % rdi call runtime . makechan @ PLT leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 . LBB 2 : movq % rax , (% rbx ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . gcWriteBarrier @ PLT . L 3 : . LBE 3 : . LBB 4 : leaq main . main .. func 1 (% rip ), % rax movq % rax , - 4 4 0 (% rbp ) movq - 5 6 (% rbp ), % rbx leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . main . abort 1 . 0 . 1 chan . 0 struct . 4 . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 2 4 (% rbp ) movq - 4 4 0 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq % rbx , - 4 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 5 : movq - 4 2 4 (% rbp ), % rcx movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 5 : jmp . L 5 . L 4 : . LBB 6 : movq - 4 2 4 (% rbp ), % rax leaq - 4 1 6 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . main . abort 1 . 0 . 1 chan . 0 struct . 4 . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 6 : movq - 4 2 4 (% rbp ), % rbx testq % rbx , % rbx jne . L 6 call runtime . panicgonil @ PLT . L 6 : leaq type .. struct . 4 . 4 x . 5 fn . 0 func . 8 . 9 . 8 . 9 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 0 (% rbp ) movq % rbx , - 3 9 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 . LBB 7 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 7 : jmp . L 8 . L 7 : . LBB 8 : movq - 3 9 2 (% rbp ), % rax movq % rax , % rdx movq - 4 0 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 8 : . LBE 8 : movq - 4 0 0 (% rbp ), % rax leaq main . main .. thunk 0 (% rip ), % rdx movq % rax , % rsi movq % rdx , % rdi call __go_go @ PLT . LBE 4 : leaq string .. d (% rip ), % r 1 4 leaq go .. C 2 2 (% rip ), % r 1 5 movq % r 1 4 , - 3 5 2 (% rbp ) movq % r 1 5 , - 3 4 4 (% rbp ) leaq - 3 5 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) . LBB 9 : movabsq $ 1 0 0 0 0 0 0 0 0 0 0 , % rdi call time . After @ PLT movq % rax , - 3 3 6 (% rbp ) leaq - 2 5 6 (% rbp ), % rax movq % rax , - 3 2 8 (% rbp ) movw $ 1 , - 3 2 0 (% rbp ) movq - 5 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 3 0 4 (% rbp ) leaq - 2 2 4 (% rbp ), % rax movq % rax , - 2 9 6 (% rbp ) movw $ 1 , - 2 8 8 (% rbp ) leaq - 2 6 4 (% rbp ), % rcx leaq - 3 3 6 (% rbp ), % rax movl $ 2 , % edx movq % rcx , % rsi movq % rax , % rdi call runtime . selectgo @ PLT testq % rax , % rax je . L 1 4 cmpq $ 1 , % rax . LBB 1 0 : leaq string .. d (% rip ), % r 1 2 leaq go .. C 2 3 (% rip ), % r 1 3 movq % r 1 2 , - 1 9 2 (% rbp ) movq % r 1 3 , - 1 8 4 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) jmp . L 1 . L 1 4 : . LBE 1 0 : nop . LBE 9 : call main . launch . L 1 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 6 4 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 movl $ 6 4 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 0 0 , % rsp movq % rdi , - 5 6 8 (% rbp ) leaq . LC 2 (% rip ), % rcx movl $ 1 0 , % ebx movq % rcx , - 5 1 2 (% rbp ) movq % rbx , - 5 0 4 (% rbp ) leaq . LC 3 (% rip ), % rax movl $ 7 , % edx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq - 5 1 2 (% rbp ), % rdi movq - 5 0 4 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call go . problem 6 8 6 . repeatedStringMatch movq % rax , % rbx leaq int .. d (% rip ), % rax movq % rax , - 6 4 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 7 2 (% rbp ) movq - 4 7 2 (% rbp ), % rax movq % rbx , (% rax ) movq - 4 7 2 (% rbp ), % rax movq % rax , - 6 3 2 (% rbp ) movdqa - 6 4 0 (% rbp ), % xmm 0 movups % xmm 0 , - 4 6 4 (% rbp ) leaq - 4 6 4 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 1 , - 2 9 6 (% rbp ) movq $ 1 , - 2 8 8 (% rbp ) leaq - 2 7 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 8 8 (% rbp ) pushq - 2 9 6 (% rbp ) pushq - 3 0 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) leaq . LC 4 (% rip ), % rcx movq % rcx , - 6 0 8 (% rbp ) movq $ 2 , - 6 0 0 (% rbp ) movdqa - 6 0 8 (% rbp ), % xmm 1 movups % xmm 1 , - 5 4 4 (% rbp ) leaq . LC 5 (% rip ), % rdx movq % rdx , - 5 9 2 (% rbp ) movq $ 7 , - 5 8 4 (% rbp ) movdqa - 5 9 2 (% rbp ), % xmm 2 movups % xmm 2 , - 5 6 0 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq - 5 4 4 (% rbp ), % rdi movq - 5 3 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call go . problem 6 8 6 . repeatedStringMatch movq % rax , % rbx leaq int .. d (% rip ), % rax movq % rax , - 6 2 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 2 4 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq % rbx , (% rax ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 6 1 6 (% rbp ) movdqa - 6 2 4 (% rbp ), % xmm 3 movups % xmm 3 , - 4 1 6 (% rbp ) leaq - 4 1 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 , - 2 3 2 (% rbp ) movq $ 1 , - 2 2 4 (% rbp ) leaq - 2 0 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq - 5 1 2 (% rbp ), % rdi movq - 5 0 4 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call go . problem 6 8 6 . repeatedStringMatch 2 movq % rax , % rbx leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 3 7 6 (% rbp ), % rax movq % rbx , (% rax ) movq - 3 7 6 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 3 6 8 (% rbp ) movq % r 1 5 , - 3 6 0 (% rbp ) leaq - 3 6 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq - 5 4 4 (% rbp ), % rdi movq - 5 3 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call go . problem 6 8 6 . repeatedStringMatch 2 movq % rax , % rbx leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movq - 3 2 8 (% rbp ), % rax movq % rbx , (% rax ) movq - 3 2 8 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 3 2 0 (% rbp ) movq % r 1 3 , - 3 1 2 (% rbp ) leaq - 3 2 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 8 movl $ 1 5 2 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx addq $- 1 2 8 , % rsp movq % rdi , - 1 3 6 (% rbp ) movq $ 0 , - 9 6 (% rbp ) movq $ 0 , - 8 8 (% rbp ) movq $ 0 , - 8 0 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type .. interface . 4 . 5 (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 2 8 (% rbp ) movq % rbx , - 1 2 0 (% rbp ) movq % rbx , - 1 1 2 (% rbp ) . LBB 3 : movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 7 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 5 6 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 6 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rbx , - 2 4 (% rbp ) movq % rax , - 3 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 1 2 0 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) jns . L 4 jmp . L 5 . L 3 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 4 : . LBB 1 5 : cmpq % rax , - 2 4 (% rbp ) jl . L 1 4 . L 5 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : movq - 1 2 8 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 4 , % rax leaq (% rdx ,% rax ), % rcx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 7 cmpq % rax , - 3 2 (% rbp ) jl . L 1 5 . L 7 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , % rsi movq % rsi , (% rcx ) leaq runtime . writeBarrier (% rip ), % rsi movl (% rsi ), % esi testl % esi , % esi jne . L 9 . LBB 1 2 : movq % rdx , % rax movq % rax , 8 (% rcx ) jmp . L 1 0 . L 9 : . LBE 1 2 : . LBB 1 3 : movq % rdx , % rax movq % rax , % rdx leaq 8 (% rcx ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 0 : . LBE 1 3 : . LBE 1 5 : . LBE 8 : . LBB 1 6 : addq $ 1 , % rbx . L 2 : . LBE 1 6 : cmpq % r 1 2 , % rbx jl . L 1 7 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 7 : movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 1 3 6 (% rbp ), % rcx movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 8 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 7 : . LBE 2 : movq - 1 3 6 (% rbp ), % rax subq $- 1 2 8 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 1 : leaq - 3 6 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 9 5 movl $ 3 6 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 9 5 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 3 4 4 , % rsp movq % rdi , - 3 4 4 (% rbp ) movq $ 0 , - 8 0 (% rbp ) . LBB 2 4 : . LBB 2 5 : movq $ 0 , - 4 0 (% rbp ) . LBB 2 6 : jmp . L 2 2 . L 9 1 : . LBB 2 7 : nop . LBE 2 7 : . LBB 2 8 : . LBB 2 9 : movq $ 1 , - 4 8 (% rbp ) . LBB 3 0 : jmp . L 2 3 . L 9 0 : . LBB 3 1 : nop . LBE 3 1 : . LBB 3 2 : . LBB 3 3 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 4 0 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx testq % rax , % rax js . L 2 4 cmpq % rdx , % rax jl . L 7 2 . L 2 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 2 : movq - 3 0 4 (% rbp ), % rcx movq % rax , % rsi movq % rsi , % rdx addq % rdx , % rdx addq % rsi , % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq 8 (% rdx ), % rbx movq % rcx , - 2 7 2 (% rbp ) movq % rbx , - 2 6 4 (% rbp ) movq 1 6 (% rdx ), % rdx movq % rdx , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rdx cmpq $ 0 , - 4 8 (% rbp ) js . L 2 6 cmpq % rdx , - 4 8 (% rbp ) jl . L 7 3 . L 2 6 : movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 3 : movq - 2 9 6 (% rbp ), % rdx testq % rax , % rax js . L 2 8 cmpq % rdx , % rax jl . L 7 4 . L 2 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 4 : movq - 3 0 4 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 3 0 cmpq % rax , - 4 8 (% rbp ) jl . L 7 5 . L 3 0 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 2 cmpq % rax , - 4 0 (% rbp ) jl . L 7 6 . L 3 2 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 6 : movq 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 2 0 0 (% rbp ), % rdx testq % rax , % rax js . L 3 4 cmpq % rdx , % rax jl . L 7 7 . L 3 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 7 : movq - 2 4 0 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 2 0 8 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 2 7 2 (% rbp ), % rsi movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax addq % rcx , % rdx movq % rdx , (% rax ) . LBE 3 3 : . LBE 3 2 : . LBB 3 4 : addq $ 1 , - 4 8 (% rbp ) . L 2 3 : . LBE 3 4 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 3 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 6 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax cmpq % rax , - 4 8 (% rbp ) jl . L 9 0 . LBE 3 0 : . LBE 2 9 : . LBE 2 8 : . LBB 3 5 : addq $ 1 , - 4 0 (% rbp ) . L 2 2 : . LBE 3 5 : movq 2 4 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 9 1 . LBE 2 6 : . LBE 2 5 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 3 6 (% rbp ) movq % rbx , - 3 2 8 (% rbp ) movq % rbx , - 3 2 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movb $ 0 , - 2 5 (% rbp ) . LBB 3 6 : movq $ 0 , - 5 6 (% rbp ) . LBB 3 7 : jmp . L 4 1 . L 9 4 : . LBB 3 8 : nop . LBE 3 8 : . LBB 3 9 : . LBB 4 0 : movq - 5 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBB 4 1 : jmp . L 4 2 . L 9 3 : . LBB 4 2 : nop . LBE 4 2 : . LBB 4 3 : . LBB 4 4 : movq $ 0 , - 7 2 (% rbp ) . LBB 4 5 : jmp . L 4 3 . L 9 2 : . LBB 4 6 : nop . LBE 4 6 : . LBB 4 7 : . LBB 4 8 : cmpq $ 0 , - 5 6 (% rbp ) jne . L 4 4 . LBB 4 9 : movq - 3 2 8 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 4 5 cmpq % rax , - 7 2 (% rbp ) jl . L 8 0 . L 4 5 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 4 7 cmpq % rax , - 7 2 (% rbp ) jl . L 8 1 . L 4 7 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 1 : movq 1 6 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 4 9 cmpq % rax , - 6 4 (% rbp ) jge . L 4 9 movq - 1 7 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq - 3 3 6 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . LBE 4 9 : jmp . L 5 0 . L 4 9 : . LBB 5 0 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : . LBE 5 0 : . LBB 5 1 : movq - 3 2 8 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 5 1 cmpq % rax , - 7 2 (% rbp ) jl . L 8 2 . L 5 1 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 5 3 cmpq % rax , - 7 2 (% rbp ) jl . L 8 3 . L 5 3 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 3 : movq 1 6 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 5 5 cmpq % rax , - 6 4 (% rbp ) jl . L 8 4 . L 5 5 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 5 7 cmpq % rax , - 7 2 (% rbp ) jl . L 8 5 . L 5 7 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 5 : movq 1 6 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 5 6 (% rbp ), % rax subq $ 1 , % rax movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 5 9 cmpq % rdx , % rax jl . L 8 6 . L 5 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 6 : movq - 1 4 4 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq - 1 1 2 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rcx movq - 3 3 6 (% rbp ), % rsi movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax subq % rcx , % rdx movq % rdx , (% rax ) . L 5 0 : . LBE 5 1 : . LBE 4 8 : . LBE 4 7 : . LBB 5 2 : addq $ 1 , - 7 2 (% rbp ) . L 4 3 : . LBE 5 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 7 2 (% rbp ) jl . L 9 2 . LBE 4 5 : . LBE 4 4 : movq - 3 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 3 2 0 (% rbp ) pushq - 3 2 8 (% rbp ) pushq - 3 3 6 (% rbp ) movq % rax , % rdi call go . leetcode . kadaneK addq $ 3 2 , % rsp movq % rax , - 8 8 (% rbp ) . LBB 5 3 : . LBB 5 4 : movzbl - 2 5 (% rbp ), % eax xorl $ 1 , % eax movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 6 3 . LBB 5 5 : movq - 8 8 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax setg % al . L 6 3 : . LBE 5 5 : . LBE 5 4 : testb % al , % al je . L 6 4 . LBB 5 6 : movq - 8 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movb $ 1 , - 2 5 (% rbp ) . L 6 4 : . LBE 5 6 : . LBE 5 3 : . LBE 4 3 : . LBB 5 7 : addq $ 1 , - 6 4 (% rbp ) . L 4 2 : . LBE 5 7 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 6 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 6 5 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax cmpq % rax , - 6 4 (% rbp ) jl . L 9 3 . LBE 4 1 : . LBE 4 0 : . LBE 3 9 : . LBB 5 8 : addq $ 1 , - 5 6 (% rbp ) . L 4 1 : . LBE 5 8 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 6 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 6 8 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax cmpq % rax , - 5 6 (% rbp ) jl . L 9 4 . LBE 3 7 : . LBE 3 6 : . LBB 5 9 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 0 (% rbp ), % rax . LBE 5 9 : . LBE 2 4 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 4 4 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 4 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 9 2 , % rsp movq % rdi , - 4 2 4 (% rbp ) leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) leaq . LC 2 3 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 3 6 8 (% rbp ) movq % r 1 5 , - 3 6 0 (% rbp ) leaq type ... 6 7 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 8 4 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 6 , 8 (% rax ) movq $ 4 , 1 6 (% rax ) movq $ 8 , 2 4 (% rax ) movq $ 1 0 , 3 2 (% rax ) movq $ 9 , 4 0 (% rax ) movq $ 1 5 , 4 8 (% rax ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 7 , - 3 4 4 (% rbp ) movq $ 7 , - 3 3 6 (% rbp ) movq $ 5 , - 3 2 8 (% rbp ) leaq . LC 2 3 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 2 0 (% rbp ) movq % r 1 3 , - 3 1 2 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 3 7 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 3 , 3 2 (% rax ) movq - 3 7 6 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 5 , - 2 9 6 (% rbp ) movq $ 5 , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 3 9 2 (% rbp ), % rax movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 3 9 2 (% rbp ), % rax leaq - 3 6 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 3 9 2 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq $ 2 , - 4 0 8 (% rbp ) movq $ 2 , - 4 0 0 (% rbp ) . LBB 4 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 2 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 2 4 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 4 2 4 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 3 9 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 3 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 3 : pushq % rbp movq % rsp , % rbp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 3 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax andq - 4 0 (% rbp ), % rax testq % rax , % rax jne . L 4 . LBB 4 : . LBB 5 : movq $ 0 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 3 . L 1 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : . LBB 7 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 4 0 (% rbp ), % rax andl $ 1 , % eax testq % rax , % rax je . L 5 . LBB 1 1 : . LBB 1 2 : cmpq $ 0 , - 1 6 (% rbp ) jne . L 6 . LBB 1 3 : movq $ 1 , - 1 6 (% rbp ) . L 6 : . LBE 1 3 : . LBE 1 2 : . LBB 1 4 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jle . L 7 . LBB 1 5 : movq - 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) . L 7 : . LBE 1 5 : . LBE 1 4 : movq $ 0 , - 8 (% rbp ) . L 5 : . LBE 1 1 : . LBE 1 0 : . LBB 1 6 : cmpq $ 0 , - 1 6 (% rbp ) jle . L 8 . LBB 1 7 : addq $ 1 , - 8 (% rbp ) . L 8 : . LBE 1 7 : . LBE 1 6 : . LBE 9 : . LBB 1 8 : sarq - 4 0 (% rbp ) . L 4 : . LBE 1 8 : cmpq $ 0 , - 4 0 (% rbp ) jg . L 1 2 . LBE 7 : . LBE 6 : . LBB 1 9 : movq - 1 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 3 : . LBE 1 9 : . LBE 2 : popq % rbp ret
. LFB 0 : leaq - 4 0 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 8 movl $ 4 0 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 6 0 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movb $ 0 , - 8 1 (% rbp ) . LBB 2 : . LBB 3 : . LBB 4 : movq 2 4 (% rbp ), % rax testq % rax , % rax setle % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 . LBB 5 : movq - 3 9 2 (% rbp ), % rax testq % rax , % rax setle % al . L 2 : . LBE 5 : . LBE 4 : testb % al , % al je . L 3 . LBB 6 : . LBB 7 : movb $ 0 , - 8 1 (% rbp ) movzbl - 8 1 (% rbp ), % eax jmp . L 4 2 . L 3 : . LBE 7 : . LBE 6 : . LBE 3 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 5 2 (% rbp ) movq % rbx , - 3 4 4 (% rbp ) movq % rbx , - 3 3 6 (% rbp ) . LBB 8 : movq $ 0 , - 5 6 (% rbp ) . LBB 9 : jmp . L 5 . L 5 5 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 6 cmpq % rax , - 5 6 (% rbp ) jl . L 4 3 . L 6 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rcx , % rax movq 8 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 3 4 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 8 cmpq % rax , - 5 6 (% rbp ) jl . L 4 4 . L 8 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq - 3 5 2 (% rbp ), % rsi movq - 5 6 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 3 2 0 (% rbp ) movq % rbx , - 3 1 2 (% rbp ) movq % rbx , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 3 0 4 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 0 . LBB 1 2 : movq - 3 2 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 1 . L 1 0 : . LBE 1 2 : . LBB 1 3 : movq - 3 2 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 1 : . LBE 1 3 : . LBB 1 4 : movq $ 0 , - 6 4 (% rbp ) . LBB 1 5 : jmp . L 1 2 . L 5 4 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : movq - 3 4 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 3 cmpq % rax , - 5 6 (% rbp ) jl . L 4 5 . L 1 3 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 3 5 2 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 5 cmpq % rax , - 6 4 (% rbp ) jge . L 1 5 movq - 2 8 8 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 0 , (% rax ) . LBE 1 7 : . LBB 1 8 : addq $ 1 , - 6 4 (% rbp ) jmp . L 1 2 . L 1 5 : . LBE 1 8 : . LBB 1 9 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : . LBE 1 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 6 cmpq % rax , - 5 6 (% rbp ) jl . L 4 6 . L 1 6 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rcx , % rax movq 8 (% rax ), % rax cmpq % rax , - 6 4 (% rbp ) jl . L 5 4 . LBE 1 5 : . LBE 1 4 : . LBE 1 1 : . LBB 2 0 : addq $ 1 , - 5 6 (% rbp ) . L 5 : . LBE 2 0 : cmpq $ 2 , - 5 6 (% rbp ) jle . L 5 5 . LBE 9 : . LBE 8 : . LBB 2 1 : movq $ 0 , - 7 2 (% rbp ) . LBB 2 2 : jmp . L 2 2 . L 5 7 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movq $ 0 , - 8 0 (% rbp ) . LBB 2 6 : jmp . L 2 3 . L 5 6 : . LBB 2 7 : nop . LBE 2 7 : . LBB 2 8 : leaq . LC 1 0 (% rip ), % r 1 2 movl $ 0 , % r 1 3 d leaq - 3 8 4 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rsi , % rdi movq % rbx , % r 8 movq - 4 0 0 (% rbp ), % rsi movq - 3 9 2 (% rbp ), % rdx movq % rdi , % rcx movq % rax , % rdi call strings . Split @ PLT . LBB 2 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 2 4 cmpq % rax , - 7 2 (% rbp ) jl . L 4 9 . L 2 4 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : movq 1 6 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 2 6 cmpq % rax , - 8 0 (% rbp ) jl . L 5 0 . L 2 6 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 0 : movq - 3 7 6 (% rbp ), % rax testq % rax , % rax jg . L 2 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 8 : movq - 2 5 6 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq - 3 8 4 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rbx , % rdi movq % rdx , % rsi cmpq % rsi , % rdi jne . L 2 9 movq % rcx , % rdi movq % rax , % rsi cmpq % rsi , % rdi jne . L 3 0 movl $ 1 , % eax jmp . L 3 2 . L 3 0 : movq % rdx , % rsi movq % rsi , % rdi movq % rax , % rsi movq % rcx , % rax movq % rdi , % rdx movq % rax , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 3 2 . L 2 9 : movl $ 0 , % eax . L 3 2 : testb % al , % al je . L 3 3 . LBB 3 0 : . LBB 3 1 : movq - 8 0 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 3 3 6 (% rbp ) pushq - 3 4 4 (% rbp ) pushq - 3 5 2 (% rbp ) pushq - 3 6 8 (% rbp ) pushq - 3 7 6 (% rbp ) pushq - 3 8 4 (% rbp ) pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rsi movl $ 0 , % edi call main . getExist addq $ 8 0 , % rsp testb % al , % al je . L 3 3 . LBB 3 2 : leaq type ... 6 . 7 . 6 . 7 int (% rip ), % r 1 4 leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 4 . LBB 3 3 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 3 : jmp . L 3 5 . L 3 4 : . LBB 3 4 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 5 : . LBE 3 4 : movq - 2 0 0 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 1 6 0 (% rbp ) movq % r 1 5 , - 1 5 2 (% rbp ) leaq - 1 6 0 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 1 , - 1 3 6 (% rbp ) movq $ 1 , - 1 2 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) . LBB 3 5 : movb $ 1 , - 8 1 (% rbp ) movzbl - 8 1 (% rbp ), % eax jmp . L 4 2 . L 3 3 : . LBE 3 5 : . LBE 3 2 : . LBE 3 1 : . LBE 3 0 : . LBE 2 9 : . LBE 2 8 : . LBB 3 6 : addq $ 1 , - 8 0 (% rbp ) . L 2 3 : . LBE 3 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 3 6 cmpq % rax , - 7 2 (% rbp ) jl . L 5 1 . L 3 6 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : movq 1 6 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rcx , % rax movq 8 (% rax ), % rax cmpq % rax , - 8 0 (% rbp ) jl . L 5 6 . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBB 3 7 : addq $ 1 , - 7 2 (% rbp ) . L 2 2 : . LBE 3 7 : movq 2 4 (% rbp ), % rax cmpq % rax , - 7 2 (% rbp ) jl . L 5 7 . LBE 2 2 : . LBE 2 1 : . LBB 3 8 : movb $ 0 , - 8 1 (% rbp ) movzbl - 8 1 (% rbp ), % eax . L 4 2 : . LBE 3 8 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 8 movl $ 1 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 subq $ 1 4 4 , % rsp movq $ 0 , - 4 8 (% rbp ) . LBB 2 : movq $ 2 , - 4 0 (% rbp ) . LBB 3 : jmp . L 2 . L 7 : . LBB 4 : nop . LBE 4 : . LBB 5 : movq - 4 0 (% rbp ), % rax movq % rax , % rdi call main . doTest movq % rax , - 4 8 (% rbp ) . LBB 6 : cmpq $ 1 , - 4 8 (% rbp ) jne . L 3 . LBB 7 : leaq string .. d (% rip ), % r 1 2 leaq go .. C 6 (% rip ), % r 1 3 leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 2 , - 1 4 4 (% rbp ) movq % r 1 3 , - 1 3 6 (% rbp ) movq % r 1 4 , - 1 2 8 (% rbp ) movq % r 1 5 , - 1 2 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 2 , - 1 0 4 (% rbp ) movq $ 2 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) jmp . L 1 . L 3 : . LBE 7 : . LBB 8 : movq - 4 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBE 8 : . LBE 6 : . LBE 5 : . LBB 9 : addq $ 1 , - 4 0 (% rbp ) . L 2 : . LBE 9 : movabsq $ 9 2 2 3 3 7 2 0 3 6 8 5 4 7 7 5 8 0 7 , % rax cmpq % rax , - 4 0 (% rbp ) jne . L 7 . L 1 : . LBE 3 : . LBE 2 : leaq - 3 2 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 6 movl $ 7 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 4 : ret . L 3 6 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq $ 0 , - 1 6 (% rbp ) . LBB 2 6 : movq 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) . LBB 2 7 : movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 2 8 : . LBB 2 9 : . LBB 3 0 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rcx movl $ 0 , % eax . LBE 3 0 : jmp . L 2 9 . L 3 5 : . LBB 3 1 : nop . LBE 3 1 : . LBB 3 2 : . LBB 3 3 : movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 3 0 cmpq % rdx , % rax jge . L 3 0 movq - 6 4 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 3 3 : . LBB 3 4 : movq % rax , - 2 4 (% rbp ) movq % rdx , - 3 2 (% rbp ) . LBE 3 4 : . LBB 3 5 : movq - 2 4 (% rbp ), % rdx xorq - 3 2 (% rbp ), % rdx xorq % rdx , - 8 (% rbp ) . LBE 3 5 : . LBE 3 2 : . LBB 3 7 : addq $ 1 , % rax jmp . L 2 9 . L 3 0 : . LBE 3 7 : . LBB 3 8 : . LBB 3 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : . LBE 3 6 : . LBE 3 8 : cmpq % rcx , % rax jl . L 3 5 . LBE 2 9 : . LBE 2 8 : . LBE 2 7 : . LBB 3 9 : movq - 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax . LBE 3 9 : . LBE 2 6 : leave ret
. LFB 1 : leaq - 1 3 0 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 7 movl $ 1 3 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 5 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 2 5 6 , % rsp movq % rdi , - 1 2 4 0 (% rbp ) leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 8 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 8 0 (% rbp ) movq - 1 0 8 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 1 0 8 0 (% rbp ), % rax movq % rax , - 1 0 5 6 (% rbp ) movq $ 3 , - 1 0 4 8 (% rbp ) movq $ 3 , - 1 0 4 0 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 7 2 (% rbp ) movq - 1 0 7 2 (% rbp ), % rax movq $ 4 , (% rax ) movq $ 5 , 8 (% rax ) movq $ 6 , 1 6 (% rax ) movq - 1 0 7 2 (% rbp ), % rax movq % rax , - 1 0 3 2 (% rbp ) movq $ 3 , - 1 0 2 4 (% rbp ) movq $ 3 , - 1 0 1 6 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 6 4 (% rbp ) movq - 1 0 6 4 (% rbp ), % rax movq $ 7 , (% rax ) movq $ 8 , 8 (% rax ) movq $ 9 , 1 6 (% rax ) movq - 1 0 6 4 (% rbp ), % rax movq % rax , - 1 0 0 8 (% rbp ) movq $ 3 , - 1 0 0 0 (% rbp ) movq $ 3 , - 9 9 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 7 . LBB 2 5 : movq - 1 0 8 8 (% rbp ), % rax movq - 1 0 5 6 (% rbp ), % rcx movq - 1 0 4 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 1 0 4 0 (% rbp ), % rcx movq - 1 0 3 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 1 0 2 4 (% rbp ), % rcx movq - 1 0 1 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 1 0 0 8 (% rbp ), % rcx movq - 1 0 0 0 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 9 9 2 (% rbp ), % rdx movq % rdx , 6 4 (% rax ) . LBE 2 5 : jmp . L 3 8 . L 3 7 : . LBB 2 6 : movq - 1 0 8 8 (% rbp ), % rax leaq - 1 0 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 8 : . LBE 2 6 : movq - 1 0 8 8 (% rbp ), % rax movq % rax , - 6 8 8 (% rbp ) movq $ 3 , - 6 8 0 (% rbp ) movq $ 3 , - 6 7 2 (% rbp ) leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 7 6 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 6 8 (% rbp ) movq - 9 6 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 4 , 8 (% rax ) movq $ 7 , 1 6 (% rax ) movq - 9 6 8 (% rbp ), % rax movq % rax , - 9 4 4 (% rbp ) movq $ 3 , - 9 3 6 (% rbp ) movq $ 3 , - 9 2 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 6 0 (% rbp ) movq - 9 6 0 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 5 , 8 (% rax ) movq $ 8 , 1 6 (% rax ) movq - 9 6 0 (% rbp ), % rax movq % rax , - 9 2 0 (% rbp ) movq $ 3 , - 9 1 2 (% rbp ) movq $ 3 , - 9 0 4 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 5 2 (% rbp ) movq - 9 5 2 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 6 , 8 (% rax ) movq $ 9 , 1 6 (% rax ) movq - 9 5 2 (% rbp ), % rax movq % rax , - 8 9 6 (% rbp ) movq $ 3 , - 8 8 8 (% rbp ) movq $ 3 , - 8 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 9 . LBB 2 7 : movq - 9 7 6 (% rbp ), % rax movq - 9 4 4 (% rbp ), % rcx movq - 9 3 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 9 2 8 (% rbp ), % rcx movq - 9 2 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 9 1 2 (% rbp ), % rcx movq - 9 0 4 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 8 9 6 (% rbp ), % rcx movq - 8 8 8 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 8 8 0 (% rbp ), % rdx movq % rdx , 6 4 (% rax ) . LBE 2 7 : jmp . L 4 0 . L 3 9 : . LBB 2 8 : movq - 9 7 6 (% rbp ), % rax leaq - 9 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 0 : . LBE 2 8 : movq - 9 7 6 (% rbp ), % rax movq % rax , - 6 6 4 (% rbp ) movq $ 3 , - 6 5 6 (% rbp ) movq $ 3 , - 6 4 8 (% rbp ) leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 7 2 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 6 4 (% rbp ) movq - 8 6 4 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 8 6 4 (% rbp ), % rax movq % rax , - 8 4 8 (% rbp ) movq $ 3 , - 8 4 0 (% rbp ) movq $ 3 , - 8 3 2 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 5 6 (% rbp ) movq - 8 5 6 (% rbp ), % rax movq $ 4 , (% rax ) movq $ 5 , 8 (% rax ) movq $ 6 , 1 6 (% rax ) movq - 8 5 6 (% rbp ), % rax movq % rax , - 8 2 4 (% rbp ) movq $ 3 , - 8 1 6 (% rbp ) movq $ 3 , - 8 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 1 . LBB 2 9 : movq - 8 7 2 (% rbp ), % rax movq - 8 4 8 (% rbp ), % rcx movq - 8 4 0 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 8 3 2 (% rbp ), % rcx movq - 8 2 4 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 8 1 6 (% rbp ), % rcx movq - 8 0 8 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 2 9 : jmp . L 4 2 . L 4 1 : . LBB 3 0 : movq - 8 7 2 (% rbp ), % rax leaq - 8 4 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 2 : . LBE 3 0 : movq - 8 7 2 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) movq $ 2 , - 6 3 2 (% rbp ) movq $ 2 , - 6 2 4 (% rbp ) leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 0 0 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 9 2 (% rbp ) movq - 7 9 2 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 4 , 8 (% rax ) movq - 7 9 2 (% rbp ), % rax movq % rax , - 7 6 8 (% rbp ) movq $ 2 , - 7 6 0 (% rbp ) movq $ 2 , - 7 5 2 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 8 4 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 5 , 8 (% rax ) movq - 7 8 4 (% rbp ), % rax movq % rax , - 7 4 4 (% rbp ) movq $ 2 , - 7 3 6 (% rbp ) movq $ 2 , - 7 2 8 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 7 6 (% rbp ) movq - 7 7 6 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 6 , 8 (% rax ) movq - 7 7 6 (% rbp ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 2 , - 7 1 2 (% rbp ) movq $ 2 , - 7 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 3 . LBB 3 1 : movq - 8 0 0 (% rbp ), % rax movq - 7 6 8 (% rbp ), % rcx movq - 7 6 0 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 7 5 2 (% rbp ), % rcx movq - 7 4 4 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 7 3 6 (% rbp ), % rcx movq - 7 2 8 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 7 2 0 (% rbp ), % rcx movq - 7 1 2 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 7 0 4 (% rbp ), % rdx movq % rdx , 6 4 (% rax ) . LBE 3 1 : jmp . L 4 4 . L 4 3 : . LBB 3 2 : movq - 8 0 0 (% rbp ), % rax leaq - 7 6 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 4 : . LBE 3 2 : movq - 8 0 0 (% rbp ), % rax movq % rax , - 6 1 6 (% rbp ) movq $ 3 , - 6 0 8 (% rbp ) movq $ 3 , - 6 0 0 (% rbp ) leaq - 6 8 8 (% rbp ), % rax movq % rax , - 1 1 2 0 (% rbp ) movq $ 2 , - 1 1 1 2 (% rbp ) movq $ 2 , - 1 1 0 4 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 1 2 6 4 (% rbp ) movq $ 6 9 , - 1 2 5 6 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 1 2 6 4 (% rbp ), % rcx movq - 1 2 5 6 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) . LBB 3 3 : movq $ 0 , - 1 2 3 2 (% rbp ) movq $ 0 , - 1 2 2 4 (% rbp ) movq $ 0 , - 1 2 1 6 (% rbp ) movq $ 0 , - 1 2 0 8 (% rbp ) movq $ 0 , - 1 2 0 0 (% rbp ) movq $ 0 , - 1 1 9 2 (% rbp ) . LBB 3 4 : . LBB 3 5 : . LBB 3 6 : movq - 1 1 2 0 (% rbp ), % rax movq - 1 1 1 2 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 1 1 0 4 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq - 5 0 4 (% rbp ), % rax movq % rax , - 1 2 6 4 (% rbp ) movl $ 0 , % ebx . LBE 3 6 : jmp . L 4 5 . L 5 6 : . LBB 3 7 : nop . LBE 3 7 : . LBB 3 8 : . LBB 3 9 : movq - 5 0 4 (% rbp ), % rax testq % rbx , % rbx js . L 4 6 cmpq % rax , % rbx jge . L 4 6 movq - 5 1 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 5 6 0 (% rbp ) movq % rdi , - 5 5 2 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 5 4 4 (% rbp ) movq % rdi , - 5 3 6 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) . LBE 3 9 : . LBB 4 0 : movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 1 2 3 2 (% rbp ) movq % rdx , - 1 2 2 4 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 1 2 1 6 (% rbp ) movq % rdx , - 1 2 0 8 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 1 2 0 0 (% rbp ) movq % rdx , - 1 1 9 2 (% rbp ) . LBE 4 0 : . LBB 4 1 : movq - 1 2 0 8 (% rbp ), % rax movq - 1 2 0 0 (% rbp ), % rdx movq % rax , - 1 1 5 2 (% rbp ) movq % rdx , - 1 1 4 4 (% rbp ) movq - 1 1 9 2 (% rbp ), % rax movq % rax , - 1 1 3 6 (% rbp ) movq - 1 2 3 2 (% rbp ), % rax movq - 1 2 2 4 (% rbp ), % rdx movq % rax , - 1 1 8 4 (% rbp ) movq % rdx , - 1 1 7 6 (% rbp ) movq - 1 2 1 6 (% rbp ), % rax movq % rax , - 1 1 6 8 (% rbp ) leaq - 4 0 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 6 8 (% rbp ) pushq - 1 1 7 6 (% rbp ) pushq - 1 1 8 4 (% rbp ) movq % rax , % rdi call go . leetcode . transpose addq $ 3 2 , % rsp leaq go . leetcode .. go . leetcode . para 8 6 7 .. d (% rip ), % rax movq % rax , - 1 2 9 6 (% rbp ) leaq go . leetcode .. go . leetcode . para 8 6 7 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 1 1 8 4 (% rbp ), % rax movq - 1 1 7 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 1 6 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 4 7 jmp . L 5 4 . L 4 6 : . LBE 4 1 : . LBB 4 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : . LBE 4 6 : . LBB 4 7 : . LBB 4 2 : movq - 3 7 6 (% rbp ), % rcx movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 5 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 2 : jmp . L 4 9 . L 5 4 : . LBB 4 3 : movq - 3 7 6 (% rbp ), % rax leaq - 3 6 8 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 8 6 7 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 9 : . LBE 4 3 : movq - 3 7 6 (% rbp ), % rax movq % rax , - 1 2 8 8 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rax movq % rax , - 1 2 8 0 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 0 . LBB 4 4 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 4 : jmp . L 5 1 . L 5 0 : . LBB 4 5 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 1 : . LBE 4 5 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 1 2 7 2 (% rbp ) movdqa - 1 2 9 6 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 1 2 8 0 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) . LBE 4 7 : . LBE 3 8 : . LBB 4 8 : addq $ 1 , % rbx . L 4 5 : . LBE 4 8 : cmpq - 1 2 6 4 (% rbp ), % rbx jl . L 5 6 . LBE 3 5 : . LBE 3 4 : . LBE 3 3 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 2 2 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 0 7 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 6 7 4 movl $ 1 5 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 3 4 : ret . L 2 6 7 4 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 3 6 , % rsp movq % rdi , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) . LBB 2 2 1 3 : movq $ 0 , - 2 4 (% rbp ) movq $ 1 , - 3 2 (% rbp ) . LBB 2 2 1 4 : . LBB 2 2 1 5 : jmp . L 2 6 3 6 . L 2 6 7 3 : . LBB 2 2 1 6 : nop . LBE 2 2 1 6 : . LBB 2 2 1 7 : . LBB 2 2 1 8 : . LBB 2 2 1 9 : jmp . L 2 6 3 7 . L 2 6 7 1 : . LBB 2 2 2 0 : nop . LBE 2 2 2 0 : . LBB 2 2 2 1 : addq $ 2 , - 2 4 (% rbp ) . L 2 6 3 7 : . LBE 2 2 2 1 : . LBB 2 2 2 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) setl % al testb % al , % al je . L 2 6 3 8 . LBB 2 2 2 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 6 3 9 cmpq % rax , - 2 4 (% rbp ) jl . L 2 6 6 2 . L 2 6 3 9 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 6 2 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax andl $ 1 , % eax testq % rax , % rax sete % al . L 2 6 3 8 : . LBE 2 2 2 3 : . LBE 2 2 2 2 : testb % al , % al jne . L 2 6 7 1 . LBE 2 2 1 9 : . LBE 2 2 1 8 : . LBB 2 2 2 4 : . LBB 2 2 2 5 : jmp . L 2 6 4 3 . L 2 6 7 2 : . LBB 2 2 2 6 : nop . LBE 2 2 2 6 : . LBB 2 2 2 7 : addq $ 2 , - 3 2 (% rbp ) . L 2 6 4 3 : . LBE 2 2 2 7 : . LBB 2 2 2 8 : movq 2 4 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) setl % al testb % al , % al je . L 2 6 4 4 . LBB 2 2 2 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 6 4 5 cmpq % rax , - 3 2 (% rbp ) jl . L 2 6 6 4 . L 2 6 4 5 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 6 4 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cqto shrq $ 6 3 , % rdx addq % rdx , % rax andl $ 1 , % eax subq % rdx , % rax cmpq $ 1 , % rax sete % al . L 2 6 4 4 : . LBE 2 2 2 9 : . LBE 2 2 2 8 : testb % al , % al jne . L 2 6 7 2 . LBE 2 2 2 5 : . LBE 2 2 2 4 : . LBB 2 2 3 0 : . LBB 2 2 3 1 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) setl % al testb % al , % al je . L 2 6 4 9 . LBB 2 2 3 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) setl % al . L 2 6 4 9 : . LBE 2 2 3 2 : . LBE 2 2 3 1 : testb % al , % al je . L 2 6 3 6 . LBB 2 2 3 3 : . LBB 2 2 3 4 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 2 4 (% rbp ), % rdx movq 1 6 (% rbp ), % rcx movq 2 4 (% rbp ), % rbx movq % rcx , - 6 4 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 3 2 (% rbp ), % rax movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 3 2 (% rbp ) js . L 2 6 5 0 cmpq % rcx , - 3 2 (% rbp ) jl . L 2 6 6 6 . L 2 6 5 0 : movq - 3 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 6 6 6 : movq 1 6 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rdi movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 2 4 (% rbp ) js . L 2 6 5 2 cmpq % rcx , - 2 4 (% rbp ) jl . L 2 6 6 7 . L 2 6 5 2 : movq - 2 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 6 6 7 : movq 1 6 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rsi movq - 8 8 (% rbp ), % rcx testq % rdx , % rdx js . L 2 6 5 4 cmpq % rcx , % rdx jl . L 2 6 6 8 . L 2 6 5 4 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 6 8 : movq - 9 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq % rdi , (% rdx ) movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 2 6 5 6 cmpq % rdx , % rax jl . L 2 6 6 9 . L 2 6 5 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 6 6 9 : movq - 6 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . LBE 2 2 3 4 : addq $ 2 , - 2 4 (% rbp ) addq $ 2 , - 3 2 (% rbp ) . L 2 6 3 6 : . LBE 2 2 3 3 : . LBE 2 2 3 0 : . LBE 2 2 1 7 : . LBB 2 2 3 5 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) setl % al testb % al , % al je . L 2 6 5 8 . LBB 2 2 3 6 : movq 2 4 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) setl % al . L 2 6 5 8 : . LBE 2 2 3 6 : . LBE 2 2 3 5 : testb % al , % al jne . L 2 6 7 3 . LBE 2 2 1 5 : . LBE 2 2 1 4 : . LBB 2 2 3 7 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 3 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 2 3 7 : . LBE 2 2 1 3 : movq - 1 3 6 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 4 movl $ 3 4 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 1 2 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movl $ 2 0 0 0 0 , % edi call go . problem 0 9 4 7 . newUnion movq % rax , - 4 8 (% rbp ) . LBB 3 : movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 2 2 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 3 2 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 2 4 0 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 5 6 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 9 6 (% rbp ), % rax testq % rax , % rax jg . L 4 jmp . L 1 8 . L 3 : . LBE 1 1 : . LBB 1 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : . LBE 1 2 : . LBB 1 3 : movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq - 2 9 6 (% rbp ), % rax cmpq $ 1 , % rax jg . L 6 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 6 : movq - 3 0 4 (% rbp ), % rax addq $ 8 , % rax movq (% rax ), % rax leaq 1 0 0 0 0 (% rax ), % rdx movq - 3 0 4 (% rbp ), % rax movq (% rax ), % rcx movq - 4 8 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . problem 0 9 4 7 . union . union . LBE 1 3 : . LBE 8 : . LBB 1 4 : addq $ 1 , % rbx . L 2 : . LBE 1 4 : cmpq % r 1 2 , % rbx jl . L 2 2 . LBE 5 : . LBE 4 : . LBE 3 : movl $ 0 , % edx movl $ 1 0 0 0 , % esi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 5 6 (% rbp ) . LBB 1 5 : movq $ 0 , - 3 3 6 (% rbp ) movq $ 0 , - 3 2 8 (% rbp ) movq $ 0 , - 3 2 0 (% rbp ) . LBB 1 6 : . LBB 1 7 : . LBB 1 8 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 8 : jmp . L 9 . L 2 3 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : . LBB 2 1 : movq - 1 3 6 (% rbp ), % rax testq % rbx , % rbx js . L 1 0 cmpq % rax , % rbx jge . L 1 0 movq - 1 4 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) . LBE 2 1 : . LBB 2 2 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) . LBE 2 2 : . LBB 2 3 : movq - 3 2 8 (% rbp ), % rax testq % rax , % rax jg . L 1 1 jmp . L 2 0 . L 1 0 : . LBE 2 3 : . LBB 2 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : . LBE 2 5 : . LBB 2 6 : movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 1 : movq - 3 3 6 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 0 9 4 7 . union . find movq % rax , - 6 4 (% rbp ) . LBB 2 4 : movq - 6 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) leaq - 7 2 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 3 leaq - 8 0 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . LBE 2 4 : . LBE 2 6 : . LBE 2 0 : . LBB 2 7 : addq $ 1 , % rbx . L 9 : . LBE 2 7 : cmpq % r 1 2 , % rbx jl . L 2 3 . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBB 2 8 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) je . L 1 5 movq - 5 6 (% rbp ), % rax movq (% rax ), % rcx jmp . L 1 6 . L 1 5 : movl $ 0 , % ecx . L 1 6 : movq % rdx , % rax subq % rcx , % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 2 8 : . LBE 2 : addq $ 3 1 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 4 0 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 6 movl $ 4 0 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 7 6 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) . LBB 2 : movq - 4 0 0 (% rbp ), % rdx movq - 3 9 2 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call strings . ToLower @ PLT movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) leaq - 3 8 4 (% rbp ), % rdx movl $ 0 , % eax movl $ 2 6 , % ecx movq % rdx , % rdi rep stosq . LBB 3 : movq $ 0 , - 4 8 (% rbp ) . LBB 4 : jmp . L 2 . L 2 3 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 3 9 2 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 3 cmpq % rax , - 4 8 (% rbp ) jge . L 3 movq - 4 0 0 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 5 7 (% rbp ) . LBB 7 : . LBB 8 : cmpb $ 9 6 , - 5 7 (% rbp ) seta % al testb % al , % al jne . L 4 jmp . L 5 . L 3 : . LBE 8 : . LBE 7 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBB 1 2 : . LBB 1 0 : . LBB 9 : cmpb $ 1 2 2 , - 5 7 (% rbp ) setbe % al . L 5 : . LBE 9 : . LBE 1 0 : testb % al , % al je . L 6 . LBB 1 1 : movzbl - 5 7 (% rbp ), % eax subl $ 9 7 , % eax cmpb $ 2 5 , % al jbe . L 7 movzbl % al , % eax movl $ 2 6 , % esi movq % rax , % rdi call runtime . goPanicIndexU @ PLT . L 7 : movzbl - 5 7 (% rbp ), % edx subl $ 9 7 , % edx cmpb $ 2 5 , % dl jbe . L 8 movzbl % dl , % eax movl $ 2 6 , % esi movq % rax , % rdi call runtime . goPanicIndexU @ PLT . L 8 : movzbl % dl , % edx movq - 3 8 4 (% rbp ,% rdx , 8 ), % rdx movzbl % al , % eax addq $ 1 , % rdx movq % rdx , - 3 8 4 (% rbp ,% rax , 8 ) . L 6 : . LBE 1 1 : . LBE 1 2 : . LBE 6 : . LBB 1 3 : addq $ 1 , - 4 8 (% rbp ) . L 2 : . LBE 1 3 : movq - 3 9 2 (% rbp ), % rax cmpq % rax , - 4 8 (% rbp ) jl . L 2 3 . LBE 4 : . LBE 3 : leaq go . leetcode 0 7 4 8 . shortestCompletingWord .. func 1 (% rip ), % rcx leaq - 3 8 4 (% rbp ), % rdx movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) leaq - 1 2 8 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) movq - 1 0 4 (% rbp ), % rax movq % rcx , (% rax ) movq % rdx , 8 (% rax ) movq - 1 0 4 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq $ 2 1 4 7 4 8 3 6 4 7 , - 4 0 (% rbp ) leaq . LC 0 (% rip ), % r 1 2 movl $ 0 , % r 1 3 d movq % r 1 2 , - 1 6 0 (% rbp ) movq % r 1 3 , - 1 5 2 (% rbp ) . LBB 1 4 : movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) . LBB 1 5 : . LBB 1 6 : . LBB 1 7 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 7 : jmp . L 1 1 . L 2 5 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : . LBB 2 0 : movq - 8 8 (% rbp ), % rax testq % rbx , % rbx js . L 1 2 cmpq % rax , % rbx jge . L 1 2 movq - 9 6 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 2 0 : . LBB 2 1 : movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) . LBE 2 1 : . LBB 2 2 : . LBB 2 3 : movq - 1 6 8 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 2 4 jmp . L 2 1 . L 1 2 : . LBE 2 3 : . LBE 2 2 : . LBB 3 0 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : . LBE 3 0 : . LBB 3 1 : movq - 1 7 6 (% rbp ), % rdx movq - 1 6 8 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call strings . ToLower @ PLT movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) . LBB 2 5 : . LBB 2 6 : movq - 5 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rcx movq - 1 7 6 (% rbp ), % rdx movq - 1 6 8 (% rbp ), % rax movq - 5 6 (% rbp ), % r 1 0 movq % rdx , % rdi movq % rax , % rsi call *% rcx . LVL 1 : testb % al , % al je . L 1 6 . LBB 2 7 : movq - 1 6 8 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax setl % al . L 1 6 : . LBE 2 7 : . LBE 2 6 : testb % al , % al je . L 1 5 . LBB 2 8 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) jmp . L 1 5 . L 2 4 : . LBE 2 8 : . LBE 2 5 : . LBB 2 9 : . LBB 2 4 : nop . L 1 5 : . LBE 2 4 : . LBE 2 9 : . LBE 3 1 : . LBE 1 9 : . LBB 3 2 : addq $ 1 , % rbx . L 1 1 : . LBE 3 2 : cmpq % r 1 2 , % rbx jl . L 2 5 . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBB 3 3 : movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx . LBE 3 3 : . LBE 2 : addq $ 3 7 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 9 movl $ 1 3 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 9 : pushq % rbp movq % rsp , % rbp addq $- 1 2 8 , % rsp movq % rdi , - 1 0 4 (% rbp ) movq % rsi , - 1 1 2 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq $ 0 , - 9 6 (% rbp ) movq $ 0 , - 8 8 (% rbp ) leaq - 9 6 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax movq $ 0 , (% rax ) movq - 1 0 4 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 7 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 8 (% rbp ) . LBB 3 : movq $ 1 , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 1 7 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) movq - 1 0 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 0 4 (% rbp ) . LBE 6 : . LBB 7 : addq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 7 : movq - 2 4 (% rbp ), % rax cmpq - 1 1 2 (% rbp ), % rax jl . L 1 7 . LBE 4 : . LBE 3 : movq - 1 0 4 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 1 0 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 6 (% rbp ) . LBB 8 : movq - 1 1 2 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . LBB 9 : jmp . L 5 . L 1 8 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : movq - 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 6 4 (% rbp ) movq - 1 6 (% rbp ), % rax addq $ 8 , % rax movq - 1 0 4 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 6 . LBB 1 2 : movq % rdx , (% rax ) . LBE 1 2 : jmp . L 7 . L 6 : . LBB 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 7 : . LBE 1 3 : movq - 1 6 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) . LBE 1 1 : . LBB 1 4 : addq $ 1 , - 3 2 (% rbp ) . L 5 : . LBE 1 4 : movq - 3 2 (% rbp ), % rax cmpq - 1 2 0 (% rbp ), % rax jl . L 1 8 . LBE 9 : . LBE 8 : movq - 5 6 (% rbp ), % rax addq $ 8 , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 0 . LBB 1 5 : movq - 1 6 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 1 5 : jmp . L 1 1 . L 1 0 : . LBB 1 6 : movq - 1 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 1 : . LBE 1 6 : movq - 8 (% rbp ), % rax addq $ 8 , % rax movq - 1 0 4 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 1 2 . LBB 1 7 : movq % rdx , (% rax ) . LBE 1 7 : jmp . L 1 3 . L 1 2 : . LBB 1 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 3 : . LBE 1 8 : . LBB 1 9 : movq - 4 8 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 1 9 : . LBE 2 : leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 5 0 2 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 9 : ret . L 5 0 2 : pushq % rbp movq % rsp , % rbp movq % rdi , - 2 4 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 4 3 2 : . LBB 4 3 3 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . LBE 4 3 3 : . LBE 4 3 2 : popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 9 movl $ 7 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 9 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq $ 0 , - 1 6 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) . LBB 3 : movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rcx movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 8 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq - 6 4 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 9 : . LBB 1 0 : movq % rax , - 2 4 (% rbp ) movq % rdx , - 3 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 4 (% rbp ), % rdx subq - 3 2 (% rbp ), % rdx addq % rdx , - 8 (% rbp ) . LBE 1 1 : . LBE 8 : . LBB 1 3 : addq $ 1 , % rax jmp . L 2 . L 3 : . LBE 1 3 : . LBB 1 4 : . LBB 1 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 2 : . LBE 1 4 : cmpq % rcx , % rax jl . L 8 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 5 : movq - 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax . LBE 1 5 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 4 movl $ 1 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 3 6 , % rsp movq % rdi , % rcx movq % rsi , % rbx movq % rcx , - 1 7 6 (% rbp ) movq % rbx , - 1 6 8 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) . LBB 2 : leaq . LC 9 (% rip ), % rax movl $ 1 , % edx leaq - 1 6 0 (% rbp ), % rdi movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rsi movq - 1 7 6 (% rbp ), % rdx movq - 1 6 8 (% rbp ), % rax movq % rsi , % r 8 movq % rdx , % rsi movq % rax , % rdx call strings . Split @ PLT . LBB 3 : movq $ 0 , - 5 6 (% rbp ) . LBB 4 : jmp . L 2 . L 2 3 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 5 6 (% rbp ), % rcx movq - 1 5 2 (% rbp ), % rsi movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq % rsi , % rax subq - 5 6 (% rbp ), % rax leaq - 1 (% rax ), % rbx movq - 1 5 2 (% rbp ), % rax subq - 5 6 (% rbp ), % rax subq $ 1 , % rax movq - 1 5 2 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jl . L 1 8 . L 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : movq - 1 6 0 (% rbp ), % rdx salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq - 1 5 2 (% rbp ), % rsi cmpq $ 0 , - 5 6 (% rbp ) js . L 5 cmpq % rsi , - 5 6 (% rbp ) jl . L 1 9 . L 5 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : movq - 1 6 0 (% rbp ), % rdi movq - 5 6 (% rbp ), % rsi salq $ 4 , % rsi addq % rdi , % rsi movq (% rsi ), % r 1 2 movq 8 (% rsi ), % r 1 3 movq - 1 0 4 (% rbp ), % rsi testq % rcx , % rcx js . L 7 cmpq % rsi , % rcx jl . L 2 0 . L 7 : movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : movq - 1 1 2 (% rbp ), % rsi salq $ 4 , % rcx addq % rsi , % rcx movq % rdx , % rsi movq % rsi , 8 (% rcx ) leaq runtime . writeBarrier (% rip ), % rsi movl (% rsi ), % esi testl % esi , % esi jne . L 9 . LBB 8 : movq % rax , (% rcx ) jmp . L 1 0 . L 9 : . LBE 8 : . LBB 9 : movq % rax , % rdx movq % rcx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 0 : . LBE 9 : movq - 7 2 (% rbp ), % rax testq % rbx , % rbx js . L 1 1 cmpq % rax , % rbx jl . L 2 1 . L 1 1 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : movq - 8 0 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq % r 1 3 , % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 3 . LBB 1 0 : movq % r 1 2 , % rdx movq % rdx , (% rax ) jmp . L 1 4 . L 1 3 : . LBE 1 0 : . LBB 1 1 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 4 : . LBE 1 1 : . LBE 7 : . LBE 6 : . LBB 1 2 : addq $ 1 , - 5 6 (% rbp ) . L 2 : . LBE 1 2 : movq - 1 5 2 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax cmpq - 5 6 (% rbp ), % rax jg . L 2 3 . LBE 4 : . LBE 3 : . LBB 1 3 : leaq . LC 9 (% rip ), % r 1 4 movl $ 1 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call strings . Join @ PLT addq $ 3 2 , % rsp movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx . LBE 1 3 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 3 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 3 6 , % rsp movq % rdi , - 3 6 0 (% rbp ) leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 0 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 0 4 (% rbp ) movq % r 1 3 , - 2 9 6 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 4 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 2 , 2 4 (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 4 , - 2 8 0 (% rbp ) movq $ 4 , - 2 7 2 (% rbp ) movq $ 4 , - 2 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 3 2 0 (% rbp ), % rax movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 3 2 0 (% rbp ), % rax leaq - 3 0 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 3 2 0 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 1 , - 3 4 4 (% rbp ) movq $ 1 , - 3 3 6 (% rbp ) . LBB 4 : movq $ 0 , - 4 0 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 0 8 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 4 0 (% rbp ) movq % rdi , - 2 3 2 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq % rbx , - 4 0 (% rbp ) movq - 4 8 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 4 0 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 4 8 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 2 8 (% rbp ) movq % rdi , - 1 2 0 (% rbp ) leaq . LC 2 2 (% rip ), % rcx movq % rcx , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 4 8 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq % r 1 4 , - 6 4 (% rbp ) movq % r 1 2 , - 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 7 2 (% rbp ), % r 1 2 leaq - 1 2 8 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 3 6 0 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 3 3 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : leaq - 7 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 8 movl $ 7 2 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 8 0 , % rsp movq % rdi , - 6 6 4 (% rbp ) movq $ 1 , - 5 6 0 (% rbp ) movq $ 2 , - 5 5 2 (% rbp ) movq $ 2 , - 5 4 4 (% rbp ) movq $ 2 , - 5 3 6 (% rbp ) movq $ 6 , - 5 2 8 (% rbp ) movq $ 3 , - 5 2 0 (% rbp ) movq $ 3 , - 5 1 2 (% rbp ) movq $ 1 4 , - 5 0 4 (% rbp ) movq $ 4 , - 4 9 6 (% rbp ) leaq - 5 6 0 (% rbp ), % rcx movq % rcx , - 5 9 2 (% rbp ) movq $ 3 , - 5 8 4 (% rbp ) movq $ 3 , - 5 7 6 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 1 5 (% rip ), % rax movl $ 6 9 , % edx leaq - 2 0 8 (% rbp ), % rcx movq % rax , % rsi movq % rdx , % rdi movq % rdx , % rax subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdx movq % rcx , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) . LBB 2 : movq $ 0 , - 6 2 4 (% rbp ) movq $ 0 , - 6 1 6 (% rbp ) movq $ 0 , - 6 0 8 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 4 0 8 (% rbp ), % rax movq % rax , - 6 7 2 (% rbp ) movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 7 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : movq - 4 0 8 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 4 1 6 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 3 2 (% rbp ) . LBE 8 : . LBB 9 : movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 6 0 8 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 6 0 8 (% rbp ), % rax movq % rax , - 6 3 2 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 6 5 6 (% rbp ) movq % rdx , - 6 4 8 (% rbp ) movq - 6 4 8 (% rbp ), % rdx movq - 6 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . leetcode . superEggDrop movq % rax , - 7 1 2 (% rbp ) leaq go . leetcode .. go . leetcode . para 8 8 7 .. d (% rip ), % rdi movq % rdi , - 7 0 4 (% rbp ) leaq go . leetcode .. go . leetcode . para 8 8 7 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 0 (% rbp ) movq - 3 2 0 (% rbp ), % rcx movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 6 9 6 (% rbp ) leaq int .. d (% rip ), % rdi movq % rdi , - 6 8 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rdx , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 6 8 0 (% rbp ) movdqa - 7 0 4 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 6 8 8 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 1 6 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) . LBE 1 0 : . LBE 7 : . LBB 1 2 : addq $ 1 , % rbx jmp . L 2 . L 3 : . LBE 1 2 : . LBB 1 3 : . LBB 1 1 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 1 : . LBE 1 3 : cmpq - 6 7 2 (% rbp ), % rbx jl . L 7 . LBE 4 : . LBE 3 : . LBE 2 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 1 7 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : leaq - 1 3 3 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 9 movl $ 1 3 3 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 5 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 2 8 8 , % rsp movq % rdi , - 1 1 1 2 (% rbp ) leaq int .. d (% rip ), % rsi movq % rsi , - 1 3 2 8 (% rbp ) leaq go .. C 4 2 (% rip ), % rdi movq % rdi , - 1 3 2 0 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq go .. C 4 3 (% rip ), % r 1 5 leaq int .. d (% rip ), % r 1 2 leaq go .. C 4 4 (% rip ), % r 1 3 leaq int .. d (% rip ), % r 1 0 leaq go .. C 4 5 (% rip ), % r 1 1 leaq int .. d (% rip ), % r 8 leaq go .. C 4 6 (% rip ), % r 9 leaq int .. d (% rip ), % rcx leaq go .. C 4 7 (% rip ), % rbx leaq int .. d (% rip ), % rax leaq go .. C 4 8 (% rip ), % rdx movdqa - 1 3 2 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 0 0 8 (% rbp ) movq % r 1 4 , - 9 9 2 (% rbp ) movq % r 1 5 , - 9 8 4 (% rbp ) movq % r 1 2 , - 9 7 6 (% rbp ) movq % r 1 3 , - 9 6 8 (% rbp ) movq % r 1 0 , - 9 6 0 (% rbp ) movq % r 1 1 , - 9 5 2 (% rbp ) movq % r 8 , - 9 4 4 (% rbp ) movq % r 9 , - 9 3 6 (% rbp ) movq % rcx , - 9 2 8 (% rbp ) movq % rbx , - 9 2 0 (% rbp ) movq % rax , - 9 1 2 (% rbp ) movq % rdx , - 9 0 4 (% rbp ) leaq - 1 0 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 7 , - 1 3 6 (% rbp ) movq $ 7 , - 1 2 8 (% rbp ) subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) call go . leetcode . newTree addq $ 3 2 , % rsp movq % rax , % r 1 2 leaq int .. d (% rip ), % rax movq % rax , - 1 3 1 2 (% rbp ) leaq go .. C 4 9 (% rip ), % rbx movq % rbx , - 1 3 0 4 (% rbp ) movq % rax , - 1 2 9 6 (% rbp ) leaq go .. C 5 0 (% rip ), % rsi movq % rsi , - 1 2 8 8 (% rbp ) movq $ 0 , - 1 2 8 0 (% rbp ) movq $ 0 , - 1 2 7 2 (% rbp ) movq % rax , - 1 2 6 4 (% rbp ) leaq go .. C 5 1 (% rip ), % rbx movq % rbx , - 1 2 5 6 (% rbp ) movq % rax , - 1 2 4 8 (% rbp ) leaq go .. C 5 2 (% rip ), % rax movq % rax , - 1 2 4 0 (% rbp ) movdqa - 1 3 1 2 (% rbp ), % xmm 1 movups % xmm 1 , - 8 9 6 (% rbp ) movdqa - 1 2 9 6 (% rbp ), % xmm 2 movups % xmm 2 , - 8 8 0 (% rbp ) movdqa - 1 2 8 0 (% rbp ), % xmm 3 movups % xmm 3 , - 8 6 4 (% rbp ) movdqa - 1 2 6 4 (% rbp ), % xmm 4 movups % xmm 4 , - 8 4 8 (% rbp ) movdqa - 1 2 4 8 (% rbp ), % xmm 5 movups % xmm 5 , - 8 3 2 (% rbp ) leaq - 8 9 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 5 , - 1 0 4 (% rbp ) movq $ 5 , - 9 6 (% rbp ) subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) call go . leetcode . newTree addq $ 3 2 , % rsp movq % rax , % rbx leaq type ... 6 7 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 0 8 (% rbp ) movq - 8 0 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 4 , 1 6 (% rax ) movq $ 5 , 2 4 (% rax ) movq $ 3 , 3 2 (% rax ) movq $ 6 , 4 0 (% rax ) movq $ 7 , 4 8 (% rax ) movq - 8 0 8 (% rbp ), % rax movq % rax , - 8 0 0 (% rbp ) movq $ 7 , - 7 9 2 (% rbp ) movq $ 7 , - 7 8 4 (% rbp ) leaq type ... 6 7 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 7 6 (% rbp ) movq - 7 7 6 (% rbp ), % rax movq $ 4 , (% rax ) movq $ 5 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 6 , 2 4 (% rax ) movq $ 7 , 3 2 (% rax ) movq $ 3 , 4 0 (% rax ) movq $ 1 , 4 8 (% rax ) movq - 7 7 6 (% rbp ), % rax movq % rax , - 7 6 8 (% rbp ) movq $ 7 , - 7 6 0 (% rbp ) movq $ 7 , - 7 5 2 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 4 4 (% rbp ) movq - 7 4 4 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq - 7 4 4 (% rbp ), % rax movq % rax , - 7 3 6 (% rbp ) movq $ 4 , - 7 2 8 (% rbp ) movq $ 4 , - 7 2 0 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 1 2 (% rbp ) movq - 7 1 2 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 4 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq - 7 1 2 (% rbp ), % rax movq % rax , - 7 0 4 (% rbp ) movq $ 4 , - 6 9 6 (% rbp ) movq $ 4 , - 6 8 8 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq % rax , - 6 7 2 (% rbp ) movq % rdx , - 6 6 4 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq % rax , - 6 5 6 (% rbp ) movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , - 6 4 8 (% rbp ) movq % rdx , - 6 4 0 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq % rax , - 6 3 2 (% rbp ) movq % r 1 2 , - 6 2 4 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , - 6 0 8 (% rbp ) movq % rdx , - 6 0 0 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 5 8 4 (% rbp ) movq % rdx , - 5 7 6 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 5 6 8 (% rbp ) movq % rbx , - 5 6 0 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 4 8 8 (% rbp ) movq % rdx , - 4 8 0 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 4 7 2 (% rbp ) movq % rdx , - 4 6 4 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 4 5 6 (% rbp ) movq % rdx , - 4 4 8 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 4 4 0 (% rbp ) leaq - 5 4 4 (% rbp ), % rax movq % rax , - 1 0 4 0 (% rbp ) movq $ 2 , - 1 0 3 2 (% rbp ) movq $ 2 , - 1 0 2 4 (% rbp ) . LBB 2 0 : movq $ 0 , - 1 1 0 4 (% rbp ) movq $ 0 , - 1 0 9 6 (% rbp ) movq $ 0 , - 1 0 8 8 (% rbp ) movq $ 0 , - 1 0 8 0 (% rbp ) movq $ 0 , - 1 0 7 2 (% rbp ) movq $ 0 , - 1 0 6 4 (% rbp ) movq $ 0 , - 1 0 5 6 (% rbp ) . LBB 2 1 : . LBB 2 2 : . LBB 2 3 : movq - 1 0 4 0 (% rbp ), % rax movq - 1 0 3 2 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 0 2 4 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 3 6 0 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 2 3 : jmp . L 4 5 . L 5 8 : . LBB 2 4 : nop . LBE 2 4 : . LBB 2 5 : . LBB 2 6 : movq - 3 6 0 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 4 6 cmpq % rax , % r 1 2 jge . L 4 6 movq - 3 6 8 (% rbp ), % rcx movq % r 1 2 , % rdx movq % rdx , % rax salq $ 3 , % rax subq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq 4 8 (% rcx ), % rax movq % rax , - 3 8 4 (% rbp ) . LBE 2 6 : . LBB 2 7 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 1 1 0 4 (% rbp ) movq % rdx , - 1 0 9 6 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 1 0 8 8 (% rbp ) movq % rdx , - 1 0 8 0 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 0 7 2 (% rbp ) movq % rdx , - 1 0 6 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 0 5 6 (% rbp ) . LBE 2 7 : . LBB 2 8 : pushq - 1 0 6 4 (% rbp ) pushq - 1 0 7 2 (% rbp ) pushq - 1 0 8 0 (% rbp ) pushq - 1 0 8 8 (% rbp ) pushq - 1 0 9 6 (% rbp ) pushq - 1 1 0 4 (% rbp ) call go . leetcode . constructFromPrePost addq $ 4 8 , % rsp movq % rax , - 5 6 (% rbp ) . LBB 2 9 : leaq type ... 1 go . leetcode . TreeNode (% rip ), % rbx movq % rbx , - 1 1 6 8 (% rbp ) movq - 1 0 5 6 (% rbp ), % rax movq % rax , - 1 1 6 0 (% rbp ) movq % rbx , - 1 1 5 2 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 1 1 4 4 (% rbp ) movq - 1 1 5 2 (% rbp ), % rax movq - 1 1 4 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % rax movq - 1 1 6 8 (% rbp ), % rdx movq - 1 1 6 0 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT xorl $ 1 , % eax testb % al , % al jne . L 4 7 jmp . L 4 8 . L 4 6 : . LBE 2 9 : . LBE 2 8 : . LBB 3 8 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : . LBE 3 8 : . LBB 3 9 : . LBB 3 7 : . LBB 3 0 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 1 2 3 2 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq - 1 1 0 4 (% rbp ), % rax movq - 1 0 9 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 1 0 8 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 9 . LBB 3 1 : movq - 2 8 0 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 5 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 1 : jmp . L 5 0 . L 4 9 : . LBB 3 2 : movq - 2 8 0 (% rbp ), % rcx leaq - 2 7 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 0 : . LBE 3 2 : movq - 2 8 0 (% rbp ), % rax movq % rax , - 1 2 2 4 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 1 2 1 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq - 1 0 8 0 (% rbp ), % rax movq - 1 0 7 2 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 1 0 6 4 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 1 . LBB 3 3 : movq - 2 4 8 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 2 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 3 : jmp . L 5 2 . L 5 1 : . LBB 3 4 : movq - 2 4 8 (% rbp ), % rcx leaq - 2 4 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 2 : . LBE 3 4 : movq - 2 4 8 (% rbp ), % rax movq % rax , - 1 2 0 8 (% rbp ) leaq type ... 1 go . leetcode . TreeNode (% rip ), % rax movq % rax , - 1 2 0 0 (% rbp ) movq - 5 6 (% rbp ), % rsi movq % rsi , - 1 1 9 2 (% rbp ) movq % rax , - 1 1 8 4 (% rbp ) movq - 1 0 5 6 (% rbp ), % rax movq % rax , - 1 1 7 6 (% rbp ) leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movdqa - 1 2 3 2 (% rbp ), % xmm 6 movups % xmm 6 , - 2 0 8 (% rbp ) movdqa - 1 2 1 6 (% rbp ), % xmm 7 movups % xmm 7 , - 1 9 2 (% rbp ) movdqa - 1 2 0 0 (% rbp ), % xmm 0 movups % xmm 0 , - 1 7 6 (% rbp ) movdqa - 1 1 8 4 (% rbp ), % xmm 1 movups % xmm 1 , - 1 6 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 3 . LBB 3 5 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) . LBE 3 5 : jmp . L 5 4 . L 5 3 : . LBB 3 6 : movq - 2 1 6 (% rbp ), % rcx leaq - 2 0 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 4 : . LBE 3 6 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 4 , - 7 2 (% rbp ) movq $ 4 , - 6 4 (% rbp ) leaq . LC 2 5 (% rip ), % rax movq % rax , - 1 1 3 6 (% rbp ) movq $ 4 7 , - 1 1 2 8 (% rbp ) movq - 1 1 3 6 (% rbp ), % rax movq - 1 1 2 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 1 1 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 4 8 : . LBE 3 0 : . LBE 3 7 : . LBE 3 9 : . LBE 2 5 : . LBB 4 0 : addq $ 1 , % r 1 2 . L 4 5 : . LBE 4 0 : cmpq % r 1 3 , % r 1 2 jl . L 5 8 . LBE 2 2 : . LBE 2 1 : . LBE 2 0 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 4 movl $ 3 4 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 1 2 , % rsp movb $ 0 , - 4 9 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 3 6 (% rbp ) movq % rbx , - 3 2 8 (% rbp ) movq % rbx , - 3 2 0 (% rbp ) . LBB 3 : movq $ 0 , - 7 2 (% rbp ) movq $ 0 , - 8 0 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 5 1 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 9 6 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 3 0 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rbx , - 7 2 (% rbp ) movq % rax , - 8 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 6 4 (% rbp ), % r 1 2 movq % r 1 2 , % rdx movq % r 1 2 , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 3 2 8 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) jns . L 4 jmp . L 5 . L 3 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 4 : . LBB 1 5 : cmpq % rax , - 7 2 (% rbp ) jl . L 3 8 . L 5 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 3 3 6 (% rbp ), % rsi movq - 7 2 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 2 7 2 (% rbp ) movq % r 1 2 , - 2 6 4 (% rbp ) movq % r 1 2 , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 2 5 6 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 7 . LBB 1 2 : movq - 2 7 2 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 8 . L 7 : . LBE 1 2 : . LBB 1 3 : movq - 2 7 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 8 : . LBE 1 3 : movq - 3 2 8 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 9 cmpq % rax , - 7 2 (% rbp ) jl . L 3 9 . L 9 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 3 3 6 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 1 1 cmpq % rax , - 7 2 (% rbp ) jge . L 1 1 movq - 2 4 0 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 8 0 (% rbp ), % rax movq % rax , (% rdx ) . LBE 1 5 : . LBE 8 : . LBB 1 7 : addq $ 1 , % rbx jmp . L 2 . L 1 1 : . LBE 1 7 : . LBB 1 8 : . LBB 1 6 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 6 : . LBE 1 8 : cmpq % r 1 3 , % rbx jl . L 5 1 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 9 : movq $ 2 , - 4 0 (% rbp ) . LBB 2 0 : jmp . L 1 4 . L 5 3 : . LBB 2 1 : nop . LBE 2 1 : . LBB 2 2 : . LBB 2 3 : movq $ 0 , - 4 8 (% rbp ) . LBB 2 4 : jmp . L 1 5 . L 5 2 : . LBB 2 5 : nop . LBE 2 5 : . LBB 2 6 : movq - 4 8 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax subq $ 1 , % rax movq % rax , - 8 8 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 6 cmpq % rax , - 4 8 (% rbp ) jl . L 4 1 . L 1 6 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq - 4 8 (% rbp ), % rax addq $ 1 , % rax movq - 3 2 8 (% rbp ), % rdx testq % rax , % rax js . L 1 8 cmpq % rdx , % rax jl . L 4 2 . L 1 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq - 3 3 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 2 0 cmpq % rax , - 8 8 (% rbp ) jl . L 4 3 . L 2 0 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 2 2 cmpq % rax , - 8 8 (% rbp ) jl . L 4 4 . L 2 2 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq - 3 2 8 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 4 cmpq % rax , - 4 8 (% rbp ) jl . L 4 5 . L 2 4 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 3 3 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 8 8 (% rbp ), % rax subq $ 1 , % rax movq - 1 6 8 (% rbp ), % rdx testq % rax , % rax js . L 2 6 cmpq % rdx , % rax jl . L 4 6 . L 2 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq 1 6 (% rbp ), % rcx movq - 8 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq - 1 7 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax subq % rax , % rdx movq 1 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq - 2 0 8 (% rbp ), % rsi movq - 8 8 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rcx subq % rcx , % rax movq % rdx , % rsi movq % rax , % rdi call go . leetcode 0 4 8 6 . max movq % rax , % rsi movq - 3 2 8 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 8 cmpq % rax , - 4 8 (% rbp ) jl . L 4 7 . L 2 8 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : movq - 3 3 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 3 0 cmpq % rax , - 8 8 (% rbp ) jge . L 3 0 movq - 1 4 4 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . LBE 2 6 : . LBB 2 7 : addq $ 1 , - 4 8 (% rbp ) jmp . L 1 5 . L 3 0 : . LBE 2 7 : . LBB 2 8 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : . LBE 2 8 : movq - 6 4 (% rbp ), % rax subq - 4 0 (% rbp ), % rax cmpq % rax , - 4 8 (% rbp ) jle . L 5 2 . LBE 2 4 : . LBE 2 3 : . LBE 2 2 : . LBB 2 9 : addq $ 1 , - 4 0 (% rbp ) . L 1 4 : . LBE 2 9 : movq - 4 0 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax jle . L 5 3 . LBE 2 0 : . LBE 1 9 : . LBB 3 0 : movq - 3 2 8 (% rbp ), % rax testq % rax , % rax jg . L 3 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 3 3 6 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 6 4 (% rbp ), % rax subq $ 1 , % rax movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 3 6 cmpq % rdx , % rax jge . L 3 6 movq - 1 1 2 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax notq % rax shrq $ 6 3 , % rax movb % al , - 4 9 (% rbp ) movzbl - 4 9 (% rbp ), % eax jmp . L 5 0 . L 3 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 0 : . LBE 3 0 : . LBE 2 : addq $ 3 1 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 5 2 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 5 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 7 2 , % rsp movq % rdi , - 4 8 8 (% rbp ) leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 8 (% rbp ) leaq . LC 2 2 (% rip ), % rax movq % rax , - 5 1 2 (% rbp ) movq $ 8 , - 5 0 4 (% rbp ) movdqa - 5 1 2 (% rbp ), % xmm 0 movups % xmm 0 , - 4 1 6 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 0 (% rbp ) movq - 4 4 0 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 5 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq $ 1 , 3 2 (% rax ) movq - 4 4 0 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 5 , - 3 9 2 (% rbp ) movq $ 5 , - 3 8 4 (% rbp ) movq $ 3 , - 3 7 6 (% rbp ) leaq . LC 2 2 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 3 6 8 (% rbp ) movq % r 1 5 , - 3 6 0 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 3 2 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 4 , 1 6 (% rax ) movq - 4 3 2 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 3 , - 3 4 4 (% rbp ) movq $ 3 , - 3 3 6 (% rbp ) movq $ 0 , - 3 2 8 (% rbp ) leaq . LC 2 2 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 2 0 (% rbp ) movq % r 1 3 , - 3 1 2 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 2 4 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 4 , - 2 9 6 (% rbp ) movq $ 4 , - 2 8 8 (% rbp ) movq $ 4 , - 2 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 4 4 8 (% rbp ), % rax movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 4 4 8 (% rbp ), % rax leaq - 4 1 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 4 4 8 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq $ 3 , - 4 7 2 (% rbp ) movq $ 3 , - 4 6 4 (% rbp ) . LBB 4 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 2 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 2 3 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 4 8 8 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 4 7 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 0 movl $ 2 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 5 : ret . L 6 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 3 2 , % rsp movq % rdi , - 2 4 8 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 3 1 : . LBB 3 2 : movq - 2 4 8 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax jne . L 4 2 . LBB 3 3 : . LBB 3 4 : movq $ 0 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 5 5 . L 4 2 : . LBE 3 4 : . LBE 3 3 : . LBE 3 2 : movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) . LBB 3 5 : . LBB 3 6 : jmp . L 4 4 . L 5 8 : . LBB 3 7 : nop . LBE 3 7 : . LBB 3 8 : movq - 2 4 8 (% rbp ), % rax movq % rax , % rdi call go . Solution . MyQueue . delet movq % rax , % r 1 2 movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 5 . LBB 3 9 : movq - 2 0 8 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) . LBE 3 9 : jmp . L 4 6 . L 4 5 : . LBB 4 0 : movq - 2 0 8 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rdx movq % rcx , - 2 4 0 (% rbp ) movq % rax , - 2 3 2 (% rbp ) movq % rdx , - 2 2 4 (% rbp ) . L 4 6 : . LBE 4 0 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) . L 4 4 : . LBE 3 8 : movq - 2 4 8 (% rbp ), % rax movq 8 (% rax ), % rax cmpq $ 1 , % rax jne . L 5 8 . LBE 3 6 : . LBE 3 5 : movq - 2 4 8 (% rbp ), % rax movq % rax , % rdi call go . Solution . MyQueue . delet movq % rax , - 4 8 (% rbp ) . LBB 4 1 : . LBB 4 2 : jmp . L 4 9 . L 5 9 : . LBB 4 3 : nop . LBE 4 3 : . LBB 4 4 : leaq - 2 4 0 (% rbp ), % rax movq % rax , % rdi call go . Solution . MyQueue . delet movq % rax , % r 1 3 movq - 2 4 8 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 5 0 . LBB 4 5 : movq - 2 4 8 (% rbp ), % rbx movq - 1 7 6 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 1 2 8 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 1 . LBB 4 6 : movq - 1 4 4 (% rbp ), % rax movq % rax , (% rbx ) jmp . L 5 2 . L 5 1 : . LBE 4 6 : . LBB 4 7 : movq - 1 4 4 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 5 2 . L 5 0 : . LBE 4 7 : . LBE 4 5 : . LBB 4 8 : movq - 1 7 6 (% rbp ), % rsi movq - 1 6 0 (% rbp ), % rdx movq - 2 4 8 (% rbp ), % rcx movq % rsi , (% rcx ) movq - 2 4 8 (% rbp ), % rcx movq % rax , 8 (% rcx ) movq - 2 4 8 (% rbp ), % rax movq % rdx , 1 6 (% rax ) . L 5 2 : . LBE 4 8 : movq - 2 4 8 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 3 , (% rax ) . L 4 9 : . LBE 4 4 : movq - 2 3 2 (% rbp ), % rax testq % rax , % rax jne . L 5 9 . LBE 4 2 : . LBE 4 1 : . LBB 4 9 : movq - 4 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 5 5 : . LBE 4 9 : . LBE 3 1 : addq $ 2 3 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 2 : leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 9 movl $ 2 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 2 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 4 8 , % rsp movq % rdi , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 1 5 : movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) . LBB 1 6 : . LBB 1 7 : . LBB 1 8 : movq go . day 2 1 6 . testcases (% rip ), % rax movq 8 + go . day 2 1 6 . testcases (% rip ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 + go . day 2 1 6 . testcases (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movl $ 0 , % ebx . LBE 1 8 : jmp . L 1 9 . L 2 8 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : . LBB 2 1 : movq - 1 8 4 (% rbp ), % rax testq % rbx , % rbx js . L 2 0 cmpq % rax , % rbx jge . L 2 0 movq - 1 9 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) . LBE 2 1 : . LBB 2 2 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) . LBE 2 2 : . LBB 2 3 : . LBB 2 4 : movq - 2 5 6 (% rbp ), % rdx movq - 2 4 8 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . day 2 1 6 . ConvertRomanNumeralToInteger movq % rax , - 5 6 (% rbp ) movq - 2 4 0 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 2 1 jmp . L 2 2 . L 2 0 : . LBE 2 4 : . LBE 2 3 : . LBB 2 9 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : . LBE 2 9 : . LBB 3 0 : . LBB 2 8 : . LBB 2 5 : leaq int .. d (% rip ), % rax movq % rax , - 2 8 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 2 8 0 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 2 8 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movdqa - 2 8 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 3 . LBB 2 6 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 2 6 : jmp . L 2 4 . L 2 3 : . LBB 2 7 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 4 : . LBE 2 7 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) leaq . LC 2 9 (% rip ), % r 1 2 movl $ 1 9 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 2 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 2 2 : . LBE 2 5 : . LBE 2 8 : . LBE 3 0 : . LBE 2 0 : . LBB 3 1 : addq $ 1 , % rbx . L 1 9 : . LBE 3 1 : cmpq - 2 7 2 (% rbp ), % rbx jl . L 2 8 . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 9 movl $ 2 6 4 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 9 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 4 8 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jne . L 4 . LBB 7 : . LBB 8 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 5 : movq 1 6 (% rbp ), % rax movq (% rax ), % rbx leaq main . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq % rbx , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) movq $ 0 , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 9 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 9 : jmp . L 7 . L 6 : . LBB 1 0 : movq - 2 3 2 (% rbp ), % rax leaq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi leaq main . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 1 0 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 4 : . LBE 8 : . LBE 7 : . LBE 6 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 8 : movq 1 6 (% rbp ), % rax movq (% rax ), % rbx leaq main . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq % rbx , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 1 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 1 : jmp . L 1 0 . L 9 : . LBB 1 2 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq main . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 2 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq 3 2 (% rbp ), % rax testq % rax , % rax jg . L 1 1 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 1 1 : movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq 2 4 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rcx , 1 6 (% rbp ) movq % rdx , 2 4 (% rbp ) movq % rax , 3 2 (% rbp ) movq 4 8 (% rbp ), % rax leaq - 1 (% rax ), % rdi movq 5 6 (% rbp ), % rax testq % rdi , % rdi js . L 1 2 cmpq % rax , % rdi jg . L 1 2 testq % rdi , % rdi jns . L 1 3 jmp . L 4 0 . L 1 2 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 4 0 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 3 : movq 4 0 (% rbp ), % rdx movq 5 6 (% rbp ), % rax movq % rdx , 4 0 (% rbp ) movq % rdi , 4 8 (% rbp ) movq % rax , 5 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 1 3 : . LBB 1 4 : jmp . L 1 5 . L 4 8 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 1 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 6 : movq 4 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 7 cmpq % rax , - 2 4 (% rbp ) jl . L 4 1 . L 1 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq 1 6 (% rbp ), % rax movq (% rax ), % rdx movq 4 0 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx je . L 4 7 . LBE 1 7 : addq $ 1 , - 2 4 (% rbp ) . L 1 5 : . LBE 1 6 : movq 4 8 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 4 8 jmp . L 2 0 . L 4 7 : . LBB 2 0 : . LBB 1 9 : . LBB 1 8 : nop . L 2 0 : . LBE 1 8 : . LBE 1 9 : . LBE 2 0 : . LBE 1 4 : . LBE 1 3 : movq - 2 4 (% rbp ), % rax leaq 1 (% rax ), % rdi movq 3 2 (% rbp ), % rax testq % rdi , % rdi js . L 2 2 cmpq % rax , % rdi jg . L 2 2 testq % rdi , % rdi jns . L 2 3 jmp . L 4 3 . L 2 2 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 4 3 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 2 3 : movq - 2 4 (% rbp ), % rax leaq 1 (% rax ), % rsi movq % rsi , - 2 4 8 (% rbp ) movq 5 6 (% rbp ), % rax testq % rsi , % rsi js . L 2 5 cmpq % rax , % rsi jg . L 2 5 testq % rsi , % rsi jns . L 2 6 jmp . L 4 4 . L 2 5 : movq % rax , % rsi movq - 2 4 8 (% rbp ), % rdi call runtime . goPanicSliceAcap @ PLT . L 4 4 : movq - 2 4 8 (% rbp ), % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 2 6 : movq 4 0 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 2 4 8 (% rbp ), % rax movq % rax , - 1 5 2 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq 1 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq % rdi , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) call main . constructFromPrePost addq $ 4 8 , % rsp movq % rax , % rdx movq - 4 0 (% rbp ), % rax addq $ 8 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 2 8 . LBB 2 1 : movq % rdx , (% rax ) . LBE 2 1 : jmp . L 2 9 . L 2 8 : . LBB 2 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 9 : . LBE 2 2 : movq - 2 4 (% rbp ), % rax addq $ 1 , % rax movq 3 2 (% rbp ), % rdx testq % rax , % rax js . L 3 0 cmpq % rdx , % rax jle . L 4 5 . L 3 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 4 5 : movq - 2 4 (% rbp ), % rdx addq $ 1 , % rdx movq 5 6 (% rbp ), % rcx testq % rdx , % rdx js . L 3 2 cmpq % rcx , % rdx jle . L 4 6 . L 3 2 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 4 6 : movq 4 0 (% rbp ), % rsi movq 5 6 (% rbp ), % rcx cmpq % rcx , % rdx je . L 3 4 movq % rdx , % rcx salq $ 3 , % rcx jmp . L 3 5 . L 3 4 : movl $ 0 , % ecx . L 3 5 : addq % rsi , % rcx movq % rcx , - 9 6 (% rbp ) movq 4 8 (% rbp ), % rcx subq % rdx , % rcx movq % rcx , - 8 8 (% rbp ) movq 5 6 (% rbp ), % rcx subq % rdx , % rcx movq % rcx , - 8 0 (% rbp ) movq 1 6 (% rbp ), % rcx movq 3 2 (% rbp ), % rdx cmpq % rdx , % rax je . L 3 6 movq % rax , % rdx salq $ 3 , % rdx jmp . L 3 7 . L 3 6 : movl $ 0 , % edx . L 3 7 : addq % rcx , % rdx movq % rdx , - 6 4 (% rbp ) movq 2 4 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 4 8 (% rbp ) pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) pushq - 4 8 (% rbp ) pushq - 5 6 (% rbp ) pushq - 6 4 (% rbp ) call main . constructFromPrePost addq $ 4 8 , % rsp movq % rax , % rdx movq - 4 0 (% rbp ), % rax addq $ 1 6 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 8 . LBB 2 3 : movq % rdx , (% rax ) . LBE 2 3 : jmp . L 3 9 . L 3 8 : . LBB 2 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 9 : . LBE 2 4 : . LBB 2 5 : movq - 4 0 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 3 : . LBE 2 5 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 4 : leaq - 6 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 4 movl $ 6 8 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 : ret . L 6 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 3 2 , % rsp movq % rdi , - 6 6 4 (% rbp ) movq $ 1 , - 6 2 4 (% rbp ) movq $ 4 , - 6 1 6 (% rbp ) movq $ 2 , - 6 0 8 (% rbp ) movq $ 3 , - 6 0 0 (% rbp ) leaq - 6 2 4 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 4 , - 1 0 4 (% rbp ) movq $ 4 , - 9 6 (% rbp ) subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) call go . Solution . UnmarshalListBySlice addq $ 3 2 , % rsp movq % rax , - 6 7 2 (% rbp ) movq $ 1 , - 5 9 2 (% rbp ) movq $ 5 , - 5 8 4 (% rbp ) movq $ 2 , - 5 7 6 (% rbp ) movq $ 4 , - 5 6 8 (% rbp ) movq $ 3 , - 5 6 0 (% rbp ) leaq - 5 9 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 5 , - 7 2 (% rbp ) movq $ 5 , - 6 4 (% rbp ) subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) call go . Solution . UnmarshalListBySlice addq $ 3 2 , % rsp movq % rax , % rbx leaq . LC 2 7 (% rip ), % r 1 4 movl $ 1 0 , % r 1 5 d leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 5 2 (% rbp ) movq - 5 5 2 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq - 5 5 2 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) movq $ 4 , - 5 3 6 (% rbp ) movq $ 4 , - 5 2 8 (% rbp ) leaq . LC 2 8 (% rip ), % r 1 2 movl $ 1 0 , % r 1 3 d leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 2 0 (% rbp ) movq - 5 2 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq $ 5 , 3 2 (% rax ) movq - 5 2 0 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) movq $ 5 , - 5 0 4 (% rbp ) movq $ 5 , - 4 9 6 (% rbp ) movq % r 1 4 , - 4 8 0 (% rbp ) movq % r 1 5 , - 4 7 2 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq % rax , - 4 4 0 (% rbp ) movq % r 1 2 , - 4 3 2 (% rbp ) movq % r 1 3 , - 4 2 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq % rbx , - 3 9 2 (% rbp ) leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 . 1 go . Solution . ListNode . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 0 . LBB 5 6 : movq - 3 7 6 (% rbp ), % rax movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) . LBE 5 6 : jmp . L 5 1 . L 5 0 : . LBB 5 7 : movq - 3 7 6 (% rbp ), % rax leaq - 3 6 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 . 1 go . Solution . ListNode . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 1 : . LBE 5 7 : movq - 3 7 6 (% rbp ), % rax movq % rax , - 6 5 6 (% rbp ) movq $ 2 , - 6 4 8 (% rbp ) movq $ 2 , - 6 4 0 (% rbp ) . LBB 5 8 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 . 1 go . Solution . ListNode . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) . LBB 5 9 : . LBB 6 0 : . LBB 6 1 : movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 6 1 : jmp . L 5 2 . L 6 3 : . LBB 6 2 : nop . LBE 6 2 : . LBB 6 3 : . LBB 6 4 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 5 3 cmpq % rax , % rbx jge . L 5 3 movq - 2 2 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . LBE 6 4 : . LBB 6 5 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 5 6 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 5 4 jmp . L 6 1 . L 5 3 : . LBE 6 5 : . LBB 6 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : . LBE 6 8 : . LBB 6 9 : . LBB 6 6 : movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 5 6 . L 6 1 : . LBE 6 6 : . LBB 6 7 : leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 . 1 go . Solution . ListNode . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 6 : . LBE 6 7 : . LBE 6 9 : . LBB 7 0 : leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 5 6 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 . 1 go . Solution . ListNode . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq % r 1 4 , - 1 2 8 (% rbp ) movq % r 1 2 , - 1 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 7 . LBB 7 1 : movq - 1 3 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 7 1 : jmp . L 5 8 . L 5 7 : . LBB 7 2 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 . 1 go . Solution . ListNode . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 8 : . LBE 7 2 : movq - 1 3 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 6 6 4 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 7 0 : . LBE 6 3 : . LBB 7 3 : addq $ 1 , % rbx . L 5 2 : . LBE 7 3 : cmpq % r 1 3 , % rbx jl . L 6 3 . LBE 6 0 : . LBE 5 9 : . LBE 5 8 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 4 8 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 1 movl $ 4 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 4 0 , % rsp movq % rdi , - 4 0 8 (% rbp ) movq $ 0 , - 4 0 0 (% rbp ) movq $ 0 , - 3 9 2 (% rbp ) movq $ 0 , - 3 8 4 (% rbp ) movb $ 0 , - 4 9 (% rbp ) movq $ 0 , - 6 4 (% rbp ) movq $ 1 , - 3 6 8 (% rbp ) movq $ 2 , - 3 6 0 (% rbp ) movq $ 3 , - 3 5 2 (% rbp ) movq $ 1 , - 3 4 4 (% rbp ) leaq - 3 6 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 4 , - 3 9 2 (% rbp ) movq $ 4 , - 3 8 4 (% rbp ) movq $ 3 , - 6 4 (% rbp ) movb $ 1 , - 4 9 (% rbp ) . LBB 2 : movq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 3 8 4 (% rbp ) pushq - 3 9 2 (% rbp ) pushq - 4 0 0 (% rbp ) movq % rax , % rdi call go . leetcode . containsNearbyDuplicate addq $ 3 2 , % rsp cmpb % al , - 4 9 (% rbp ) je . L 2 . LBB 3 : leaq bool .. d (% rip ), % rax movq % rax , - 4 8 0 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 3 6 (% rbp ) movq - 3 3 6 (% rbp ), % rax movzbl - 4 9 (% rbp ), % edx movb % dl , (% rax ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 4 7 2 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movdqa - 4 8 0 (% rbp ), % xmm 0 movups % xmm 0 , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 . LBB 4 : movq - 3 2 8 (% rbp ), % rcx movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 : jmp . L 4 . L 3 : . LBB 5 : movq - 3 2 8 (% rbp ), % rax leaq - 3 2 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 : . LBE 5 : movq - 3 2 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 1 , - 1 5 2 (% rbp ) movq $ 1 , - 1 4 4 (% rbp ) leaq . LC 2 1 (% rip ), % rax movq % rax , - 4 3 2 (% rbp ) movq $ 1 5 , - 4 2 4 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 4 0 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 2 : . LBE 3 : . LBE 2 : movq $ 1 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 1 , - 2 8 8 (% rbp ) movq $ 1 , - 2 8 0 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 4 , - 3 9 2 (% rbp ) movq $ 4 , - 3 8 4 (% rbp ) movq $ 1 , - 6 4 (% rbp ) movb $ 1 , - 4 9 (% rbp ) . LBB 6 : movq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 3 8 4 (% rbp ) pushq - 3 9 2 (% rbp ) pushq - 4 0 0 (% rbp ) movq % rax , % rdi call go . leetcode . containsNearbyDuplicate addq $ 3 2 , % rsp cmpb % al , - 4 9 (% rbp ) je . L 5 . LBB 7 : leaq bool .. d (% rip ), % rax movq % rax , - 4 6 4 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 7 2 (% rbp ) movq - 2 7 2 (% rbp ), % rax movzbl - 4 9 (% rbp ), % edx movb % dl , (% rax ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 4 5 6 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movdqa - 4 6 4 (% rbp ), % xmm 1 movups % xmm 1 , - 2 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 8 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 8 : jmp . L 7 . L 6 : . LBB 9 : movq - 2 6 4 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 9 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 4 movl $ 1 5 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 4 0 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 5 : . LBE 7 : . LBE 6 : movq $ 1 , - 2 4 0 (% rbp ) movq $ 2 , - 2 3 2 (% rbp ) movq $ 3 , - 2 2 4 (% rbp ) movq $ 1 , - 2 1 6 (% rbp ) movq $ 2 , - 2 0 8 (% rbp ) movq $ 3 , - 2 0 0 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 6 , - 3 9 2 (% rbp ) movq $ 6 , - 3 8 4 (% rbp ) movq $ 2 , - 6 4 (% rbp ) movb $ 0 , - 4 9 (% rbp ) . LBB 1 0 : movq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 3 8 4 (% rbp ) pushq - 3 9 2 (% rbp ) pushq - 4 0 0 (% rbp ) movq % rax , % rdi call go . leetcode . containsNearbyDuplicate addq $ 3 2 , % rsp cmpb % al , - 4 9 (% rbp ) je . L 1 . LBB 1 1 : leaq bool .. d (% rip ), % rax movq % rax , - 4 4 8 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 9 2 (% rbp ) movq - 1 9 2 (% rbp ), % rax movzbl - 4 9 (% rbp ), % edx movb % dl , (% rax ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 4 0 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movdqa - 4 4 8 (% rbp ), % xmm 2 movups % xmm 2 , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 2 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 2 : jmp . L 1 0 . L 9 : . LBB 1 3 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 3 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 2 movl $ 1 5 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq - 4 0 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 1 : . LBE 1 1 : . LBE 1 0 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 1 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 1 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movsd % xmm 0 , - 2 4 (% rbp ) movq % rdi , - 3 2 (% rbp ) pxor % xmm 0 , % xmm 0 movsd % xmm 0 , - 1 6 (% rbp ) . LBB 2 : . LBB 3 : pxor % xmm 0 , % xmm 0 ucomisd - 2 4 (% rbp ), % xmm 0 jp . L 2 pxor % xmm 0 , % xmm 0 ucomisd - 2 4 (% rbp ), % xmm 0 jne . L 2 . LBB 4 : . LBB 5 : pxor % xmm 0 , % xmm 0 movsd % xmm 0 , - 1 6 (% rbp ) movsd - 1 6 (% rbp ), % xmm 0 jmp . L 4 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : pxor % xmm 0 , % xmm 0 movsd % xmm 0 , - 8 (% rbp ) . LBB 6 : cmpq $ 0 , - 3 2 (% rbp ) jns . L 5 . LBB 7 : movq - 3 2 (% rbp ), % rax negq % rax movq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rdx , % rdi movq % rax , % xmm 0 call go . leetcode . myPow movapd % xmm 0 , % xmm 1 movsd . LC 1 (% rip ), % xmm 0 divsd % xmm 1 , % xmm 0 movsd % xmm 0 , - 8 (% rbp ) . LBE 7 : jmp . L 6 . L 5 : . LBB 8 : . LBB 9 : cmpq $ 0 , - 3 2 (% rbp ) jne . L 7 . LBB 1 0 : movsd . LC 1 (% rip ), % xmm 0 movsd % xmm 0 , - 8 (% rbp ) . LBE 1 0 : jmp . L 6 . L 7 : . LBB 1 1 : . LBB 1 2 : cmpq $ 1 , - 3 2 (% rbp ) jne . L 8 . LBB 1 3 : movsd - 2 4 (% rbp ), % xmm 0 movsd % xmm 0 , - 8 (% rbp ) . LBE 1 3 : jmp . L 6 . L 8 : . LBB 1 4 : . LBB 1 5 : movq - 3 2 (% rbp ), % rax andl $ 1 , % eax testq % rax , % rax jne . L 9 . LBB 1 6 : movq - 3 2 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rdx , % rdi movq % rax , % xmm 0 call go . leetcode . myPow movq % xmm 0 , % rax movq % rax , - 8 (% rbp ) movsd - 8 (% rbp ), % xmm 0 mulsd % xmm 0 , % xmm 0 movsd % xmm 0 , - 8 (% rbp ) . LBE 1 6 : jmp . L 6 . L 9 : . LBB 1 7 : movq - 3 2 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rdx , % rdi movq % rax , % xmm 0 call go . leetcode . myPow movq % xmm 0 , % rax movq % rax , - 8 (% rbp ) movsd - 8 (% rbp ), % xmm 0 mulsd - 2 4 (% rbp ), % xmm 0 mulsd - 8 (% rbp ), % xmm 0 movsd % xmm 0 , - 8 (% rbp ) . L 6 : . LBE 1 7 : . LBE 1 5 : . LBE 1 4 : . LBE 1 2 : . LBE 1 1 : . LBE 9 : . LBE 8 : . LBE 6 : . LBB 1 8 : movsd - 8 (% rbp ), % xmm 0 movsd % xmm 0 , - 1 6 (% rbp ) movsd - 1 6 (% rbp ), % xmm 0 . L 4 : movq % xmm 0 , % rax . LBE 1 8 : . LBE 2 : movq % rax , % xmm 0 leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 6 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 6 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) movb $ 0 , - 1 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movb $ 1 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq - 3 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call main . preOrderTraversal movb % al , - 2 (% rbp ) . LBB 6 : movzbl - 2 (% rbp ), % eax xorl $ 1 , % eax testb % al , % al je . L 4 . LBB 7 : . LBB 8 : movb $ 0 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 3 . L 4 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 9 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rdx movq - 3 2 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx jg . L 5 . LBB 1 0 : . LBB 1 1 : movb $ 0 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 3 . L 5 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rdx movq - 3 2 (% rbp ), % rax movq % rdx , (% rax ) . LBB 1 2 : movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq - 3 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call main . preOrderTraversal movb % al , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax . L 3 : . LBE 1 2 : . LBE 2 : leave ret
. LFB 0 : leaq - 3 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 8 movl $ 3 2 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 9 6 , % rsp movq % rdi , - 3 1 2 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 . LBB 4 : . LBB 5 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 3 1 2 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : leaq go . problem 0 0 5 6 . merge .. func 1 (% rip ), % rdx leaq 1 6 (% rbp ), % rcx movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movq % rax , - 1 6 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq % rdx , (% rax ) movq % rcx , 8 (% rax ) movq - 1 6 8 (% rbp ), % rbx leaq type ... 6 . 7 go . problem 0 0 5 6 . Interval (% rip ), % r 1 2 leaq type ... 6 . 7 go . problem 0 0 5 6 . Interval (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 6 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 : jmp . L 5 . L 4 : . LBB 7 : movq - 2 3 2 (% rbp ), % rax leaq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 go . problem 0 0 5 6 . Interval (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 7 : movq - 2 3 2 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call sort . Slice @ PLT movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movl $ 0 , % esi leaq go . problem 0 0 5 6 . Interval .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) movq % rbx , - 2 7 2 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 6 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) . LBB 8 : movq $ 1 , - 4 0 (% rbp ) . LBB 9 : jmp . L 7 . L 2 7 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 8 cmpq % rax , - 4 0 (% rbp ) jl . L 2 3 . L 8 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 2 9 6 (% rbp ), % rax cmpq % rax , % rdx jg . L 1 0 . LBB 1 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 1 cmpq % rax , - 4 0 (% rbp ) jl . L 2 4 . L 1 1 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq - 2 9 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 0 0 5 6 . max movq % rax , - 2 9 6 (% rbp ) . LBE 1 3 : jmp . L 1 3 . L 1 0 : . LBB 1 4 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 4 . LBB 1 5 : movq - 1 6 0 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq go . problem 0 0 5 6 . Interval .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) . LBE 1 5 : jmp . L 1 5 . L 1 4 : . LBB 1 6 : movq - 1 6 0 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rdx movq % rcx , - 2 8 8 (% rbp ) movq % rax , - 2 8 0 (% rbp ) movq % rdx , - 2 7 2 (% rbp ) . L 1 5 : . LBE 1 6 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx leaq (% rax ,% rdx ), % rcx movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 6 cmpq % rax , - 4 0 (% rbp ) jl . L 2 5 . L 1 6 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) . L 1 3 : . LBE 1 4 : . LBE 1 2 : . LBE 1 1 : . LBB 1 7 : addq $ 1 , - 4 0 (% rbp ) . L 7 : . LBE 1 7 : movq 2 4 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 2 7 . LBE 9 : . LBE 8 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 0 . LBB 1 8 : movq - 1 2 8 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq go . problem 0 0 5 6 . Interval .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) . LBE 1 8 : jmp . L 2 1 . L 2 0 : . LBB 1 9 : movq - 1 2 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rdx movq % rcx , - 2 8 8 (% rbp ) movq % rax , - 2 8 0 (% rbp ) movq % rdx , - 2 7 2 (% rbp ) . L 2 1 : . LBE 1 9 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx leaq (% rax ,% rdx ), % rcx movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBB 2 0 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 3 1 2 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 2 0 : . LBE 2 : movq - 3 1 2 (% rbp ), % rax addq $ 2 9 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 3 9 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 3 9 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 4 4 , % rsp movq % rdi , - 3 6 0 (% rbp ) leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 bool . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) leaq . LC 1 8 (% rip ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 8 , - 3 7 6 (% rbp ) movdqa - 3 8 4 (% rbp ), % xmm 0 movups % xmm 0 , - 3 2 0 (% rbp ) movb $ 1 , - 3 0 4 (% rbp ) movb $ 1 , - 3 0 3 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 2 9 6 (% rbp ) movq % r 1 5 , - 2 8 8 (% rbp ) movb $ 1 , - 2 8 0 (% rbp ) movb $ 1 , - 2 7 9 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 2 7 2 (% rbp ) movq % r 1 3 , - 2 6 4 (% rbp ) movb $ 0 , - 2 5 6 (% rbp ) movb $ 0 , - 2 5 5 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 3 2 8 (% rbp ), % rax movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 2 5 6 (% rbp ), % rdx movq % rdx , 6 4 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 3 2 8 (% rbp ), % rax leaq - 3 2 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 bool . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 3 2 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 3 , - 3 4 4 (% rbp ) movq $ 3 , - 3 3 6 (% rbp ) . LBB 4 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 bool . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 0 8 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 6 0 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 bool . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 1 9 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 bool . 2 . go . Solution . expect . 0 bool . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 bool . 2 . go . Solution . expect . 0 bool . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 3 6 0 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 3 4 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 1 6 7 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 7 movl $ 1 6 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 7 : pushq % rbp movq % rsp , % rbp subq $ 1 6 6 4 , % rsp movq % rdi , - 1 6 4 0 (% rbp ) movq % rsi , - 1 6 4 8 (% rbp ) movq % rdx , - 1 6 5 6 (% rbp ) pxor % xmm 0 , % xmm 0 movsd % xmm 0 , - 2 4 (% rbp ) . LBB 2 : . LBB 3 : movq - 1 6 4 8 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax cmpq - 1 6 5 6 (% rbp ), % rax jge . L 2 . LBB 4 : movq - 1 6 4 8 (% rbp ), % rax subq - 1 6 5 6 (% rbp ), % rax movq % rax , - 1 6 5 6 (% rbp ) . L 2 : . LBE 4 : . LBE 3 : pxor % xmm 0 , % xmm 0 cvtsi 2 sdq - 1 6 4 0 (% rbp ), % xmm 0 leaq - 1 6 3 2 (% rbp ), % rdx movl $ 0 , % eax movl $ 1 0 0 , % ecx movq % rdx , % rdi rep stosq movsd % xmm 0 , - 1 6 3 2 (% rbp ) movq $ 0 , - 8 (% rbp ) . L 2 7 : . LBB 5 : . LBB 6 : . LBB 7 : leaq - 8 3 2 (% rbp ), % rdx movl $ 0 , % eax movl $ 1 0 0 , % ecx movq % rdx , % rdi rep stosq . LBB 8 : movq - 8 (% rbp ), % rdx movq - 1 6 5 6 (% rbp ), % rax addq % rdx , % rax subq - 1 6 4 8 (% rbp ), % rax movl $ 0 , % esi movq % rax , % rdi call go . problem 0 7 9 9 . max movq % rax , - 1 6 (% rbp ) . LBB 9 : jmp . L 3 . L 3 6 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : cmpq $ 0 , - 1 6 (% rbp ) js . L 4 cmpq $ 9 9 , - 1 6 (% rbp ) jg . L 4 movq - 1 6 (% rbp ), % rax movsd - 1 6 3 2 (% rbp ,% rax , 8 ), % xmm 0 movsd . LC 1 (% rip ), % xmm 1 comisd % xmm 1 , % xmm 0 seta % al testb % al , % al jne . L 5 jmp . L 6 . L 4 : movq - 1 6 (% rbp ), % rax movl $ 1 0 0 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 : . LBB 1 3 : cmpq $ 0 , - 1 6 (% rbp ) js . L 7 cmpq $ 9 9 , - 1 6 (% rbp ) jg . L 7 cmpq $ 0 , - 1 6 (% rbp ) jns . L 8 jmp . L 9 . L 7 : movq - 1 6 (% rbp ), % rax movl $ 1 0 0 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 : cmpq $ 9 9 , - 1 6 (% rbp ) jle . L 2 8 . L 9 : movq - 1 6 (% rbp ), % rax movl $ 1 0 0 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : cmpq $ 0 , - 1 6 (% rbp ) js . L 1 1 cmpq $ 9 9 , - 1 6 (% rbp ) jle . L 2 9 . L 1 1 : movq - 1 6 (% rbp ), % rax movl $ 1 0 0 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 1 6 (% rbp ), % rax movsd - 8 3 2 (% rbp ,% rax , 8 ), % xmm 1 movq - 1 6 (% rbp ), % rax movsd - 1 6 3 2 (% rbp ,% rax , 8 ), % xmm 0 movsd . LC 1 (% rip ), % xmm 2 subsd % xmm 2 , % xmm 0 movsd . LC 2 (% rip ), % xmm 2 divsd % xmm 2 , % xmm 0 addsd % xmm 1 , % xmm 0 movq - 1 6 (% rbp ), % rax movsd % xmm 0 , - 8 3 2 (% rbp ,% rax , 8 ) movq - 1 6 (% rbp ), % rax addq $ 1 , % rax testq % rax , % rax js . L 1 3 cmpq $ 9 9 , % rax jg . L 1 3 movq - 1 6 (% rbp ), % rdx addq $ 1 , % rdx testq % rdx , % rdx jns . L 1 4 jmp . L 1 5 . L 1 3 : movl $ 1 0 0 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : cmpq $ 9 9 , % rdx jle . L 3 0 . L 1 5 : movl $ 1 0 0 , % esi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : cmpq $ 0 , - 1 6 (% rbp ) js . L 1 7 cmpq $ 9 9 , - 1 6 (% rbp ) jle . L 3 1 . L 1 7 : movq - 1 6 (% rbp ), % rax movl $ 1 0 0 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movsd - 8 3 2 (% rbp ,% rdx , 8 ), % xmm 1 movq - 1 6 (% rbp ), % rdx movsd - 1 6 3 2 (% rbp ,% rdx , 8 ), % xmm 0 movsd . LC 1 (% rip ), % xmm 2 subsd % xmm 2 , % xmm 0 movsd . LC 2 (% rip ), % xmm 2 divsd % xmm 2 , % xmm 0 addsd % xmm 1 , % xmm 0 movsd % xmm 0 , - 8 3 2 (% rbp ,% rax , 8 ) cmpq $ 0 , - 1 6 (% rbp ) js . L 1 9 cmpq $ 9 9 , - 1 6 (% rbp ) jle . L 3 2 . L 1 9 : movq - 1 6 (% rbp ), % rax movl $ 1 0 0 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq - 1 6 (% rbp ), % rax movsd . LC 1 (% rip ), % xmm 0 movsd % xmm 0 , - 1 6 3 2 (% rbp ,% rax , 8 ) . L 6 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 4 : addq $ 1 , - 1 6 (% rbp ) . L 3 : . LBE 1 4 : movq - 1 6 (% rbp ), % rax cmpq - 1 6 5 6 (% rbp ), % rax jle . L 3 6 . LBE 9 : . LBE 8 : . LBB 1 5 : movq - 8 (% rbp ), % rax cmpq - 1 6 4 8 (% rbp ), % rax jne . L 2 3 . LBB 1 6 : . LBB 1 7 : cmpq $ 0 , - 1 6 5 6 (% rbp ) js . L 2 4 cmpq $ 9 9 , - 1 6 5 6 (% rbp ) jle . L 3 4 . L 2 4 : movq - 1 6 5 6 (% rbp ), % rax movl $ 1 0 0 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq - 1 6 5 6 (% rbp ), % rax movsd - 1 6 3 2 (% rbp ,% rax , 8 ), % xmm 0 movsd % xmm 0 , - 2 4 (% rbp ) movsd - 2 4 (% rbp ), % xmm 0 jmp . L 3 5 . L 2 3 : . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : leaq - 1 6 3 2 (% rbp ), % rax leaq - 8 3 2 (% rbp ), % rdx movl $ 1 0 0 , % ecx movq % rax , % rdi movq % rdx , % rsi rep movsq addq $ 1 , - 8 (% rbp ) . LBE 7 : jmp . L 2 7 . L 3 5 : . LBB 2 1 : . LBB 2 0 : . LBB 1 9 : . LBB 1 8 : movq % xmm 0 , % rax . LBE 1 8 : . LBE 1 9 : . LBE 2 0 : . LBE 2 1 : . LBE 6 : . LBE 5 : . LBE 2 : movq % rax , % xmm 0 leave ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 8 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) . LBB 1 6 : movq $ 0 , - 8 (% rbp ) . LBB 1 7 : jmp . L 1 3 . L 1 7 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : movl $ 1 , % esi movl $ 1 , % edi call go . example . Add . LBE 1 9 : . LBB 2 0 : addq $ 1 , - 8 (% rbp ) . L 1 3 : . LBE 2 0 : movq - 2 4 (% rbp ), % rax movq 2 7 2 (% rax ), % rax cmpq % rax , - 8 (% rbp ) jl . L 1 7 . LBE 1 7 : . LBE 1 6 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 6 movl $ 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 6 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 4 8 (% rbp ) movq % rdi , - 4 0 (% rbp ) movq % rdx , - 6 4 (% rbp ) movq % rcx , - 5 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 : . LBB 3 : movq - 5 6 (% rbp ), % rax testq % rax , % rax jne . L 2 movq - 6 4 (% rbp ), % rax leaq . LC 0 (% rip ), % rdx cmpq % rdx , % rax jne . L 3 movl $ 1 , % eax jmp . L 5 . L 3 : movq - 5 6 (% rbp ), % rax movq % rax , % rdx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq . LC 0 (% rip ), % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 5 . L 2 : movl $ 0 , % eax . L 5 : testb % al , % al je . L 6 . LBB 4 : . LBB 5 : movq $ 0 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 7 . L 6 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : movq $ 0 , - 8 (% rbp ) . LBB 7 : jmp . L 8 . L 2 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq $ 0 , - 1 6 (% rbp ) . LBB 1 1 : jmp . L 9 . L 2 4 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq - 5 6 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 1 6 (% rbp ) jne . L 1 0 . LBB 1 5 : . LBB 1 6 : movq - 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 7 . L 1 0 : . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 1 7 : addq $ 1 , - 1 6 (% rbp ) . L 9 : . LBE 1 7 : . LBB 1 8 : movq - 5 6 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) setl % al testb % al , % al je . L 1 1 . LBB 1 9 : movq - 8 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movq - 4 0 (% rbp ), % rdx testq % rax , % rax js . L 1 2 cmpq % rdx , % rax jl . L 2 0 . L 1 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : movq - 5 6 (% rbp ), % rdx cmpq $ 0 , - 1 6 (% rbp ) js . L 1 4 cmpq % rdx , - 1 6 (% rbp ) jl . L 2 1 . L 1 4 : movq - 1 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : movq - 4 8 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % edx movq - 6 4 (% rbp ), % rcx movq - 1 6 (% rbp ), % rax addq % rcx , % rax movzbl (% rax ), % eax cmpb % al , % dl sete % al . L 1 1 : . LBE 1 9 : . LBE 1 8 : testb % al , % al jne . L 2 4 . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 2 0 : addq $ 1 , - 8 (% rbp ) . L 8 : . LBE 2 0 : movq - 4 0 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx subq % rdx , % rax cmpq % rax , - 8 (% rbp ) jle . L 2 5 . LBE 7 : . LBE 6 : . LBB 2 1 : movq $- 1 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 7 : . LBE 2 1 : . LBE 2 : leave ret
. LFB 0 : leaq - 5 2 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 0 movl $ 5 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 0 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 5 0 4 , % rsp movq % rdi , - 4 8 8 (% rbp ) movq % rdx , % rcx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) movq $ 0 , - 4 0 0 (% rbp ) movq $ 0 , - 4 3 2 (% rbp ) movq $ 0 , - 4 2 4 (% rbp ) . LBB 2 : movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 3 : movq $ 0 , - 4 0 (% rbp ) . LBB 4 : jmp . L 2 . L 4 9 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 5 0 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 cmpq % rax , - 4 0 (% rbp ) jge . L 3 movq - 5 1 2 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax movq % rax , % rsi movl $ 0 , % edi call runtime . intstring @ PLT movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax addq $ 1 , % rax movq - 5 0 4 (% rbp ), % rdx testq % rax , % rax jns . L 4 jmp . L 5 . L 3 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 : cmpq % rdx , % rax jge . L 5 movq - 5 1 2 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax movq % rax , % rsi movl $ 0 , % edi call runtime . intstring @ PLT movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 4 0 (% rbp ), % rax addq $ 2 , % rax movq - 5 0 4 (% rbp ), % rdx testq % rax , % rax jns . L 6 jmp . L 7 . L 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 : cmpq % rdx , % rax jge . L 7 movq - 5 1 2 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax movq % rax , % rsi movl $ 0 , % edi call runtime . intstring @ PLT movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) . LBB 7 : . LBB 8 : movq - 4 4 0 (% rbp ), % rdx movq - 4 5 6 (% rbp ), % rax cmpq % rax , % rdx je . L 8 jmp . L 4 4 . L 7 : . LBE 8 : . LBE 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 8 : . LBB 2 2 : . LBB 1 0 : movq - 4 4 8 (% rbp ), % rdx movq - 4 6 4 (% rbp ), % rax cmpq % rax , % rdx jne . L 1 0 movl $ 1 , % eax jmp . L 1 2 . L 1 0 : movq - 4 5 6 (% rbp ), % rax movq % rax , % rdx movq - 4 6 4 (% rbp ), % rcx movq - 4 4 8 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 1 2 . L 4 4 : movl $ 0 , % eax . L 1 2 : testb % al , % al je . L 1 3 . LBB 9 : movq - 4 7 2 (% rbp ), % rdx movq - 4 4 0 (% rbp ), % rax cmpq % rax , % rdx jne . L 1 4 movq - 4 8 0 (% rbp ), % rdx movq - 4 4 8 (% rbp ), % rax cmpq % rax , % rdx je . L 1 5 movq - 4 4 0 (% rbp ), % rax movq % rax , % rdx movq - 4 4 8 (% rbp ), % rcx movq - 4 8 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax je . L 1 5 . L 1 4 : movl $ 1 , % eax jmp . L 1 3 . L 1 5 : movl $ 0 , % eax . L 1 3 : . LBE 9 : . LBE 1 0 : testb % al , % al je . L 1 7 . LBB 1 1 : . LBB 1 2 : cmpq $ 0 , - 3 2 (% rbp ) jne . L 1 8 . LBB 1 3 : movl $ 0 , % eax movq - 5 0 4 (% rbp ), % rdx cmpq $ 0 , - 4 0 (% rbp ) js . L 1 9 cmpq % rdx , - 4 0 (% rbp ) jg . L 1 9 testq % rax , % rax jns . L 2 0 jmp . L 2 1 . L 1 9 : movq - 4 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAlen @ PLT . L 2 0 : cmpq - 4 0 (% rbp ), % rax jle . L 4 5 . L 2 1 : movq - 4 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 4 5 : movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rbx movq % rcx , - 3 8 4 (% rbp ) movq % rbx , - 3 7 6 (% rbp ) movq - 5 1 2 (% rbp ), % rdx cmpq % rax , - 4 0 (% rbp ) je . L 2 3 movq % rax , % rcx jmp . L 2 4 . L 2 3 : movl $ 0 , % ecx . L 2 4 : addq % rcx , % rdx movq % rdx , - 3 6 8 (% rbp ) movq - 4 0 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 3 6 0 (% rbp ) leaq - 3 8 4 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) . L 1 8 : . LBE 1 3 : . LBE 1 2 : . LBB 1 4 : cmpq $ 0 , - 3 2 (% rbp ) jle . L 2 5 . LBB 1 5 : movq - 5 0 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 6 cmpq % rax , - 4 0 (% rbp ) jg . L 2 6 cmpq $ 0 , - 2 4 (% rbp ) jns . L 2 7 jmp . L 2 8 . L 2 6 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAlen @ PLT . L 2 7 : movq - 2 4 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jle . L 4 6 . L 2 8 : movq - 4 0 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 4 6 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 5 1 2 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax je . L 3 0 movq - 2 4 (% rbp ), % rax jmp . L 3 1 . L 3 0 : movl $ 0 , % eax . L 3 1 : addq % rdx , % rax movq % rax , - 3 3 6 (% rbp ) movq - 4 0 (% rbp ), % rax subq - 2 4 (% rbp ), % rax movq % rax , - 3 2 8 (% rbp ) leaq - 3 5 2 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) . L 2 5 : . LBE 1 5 : . LBE 1 4 : movq - 4 0 (% rbp ), % rax addq $ 3 , % rax movq % rax , - 2 4 (% rbp ) addq $ 1 , - 3 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rbx leaq type ... 6 3 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 9 6 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 2 . LBB 1 6 : movq - 2 9 6 (% rbp ), % rax movq - 2 8 8 (% rbp ), % rsi movq - 2 8 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 2 7 2 (% rbp ), % rsi movq - 2 6 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 2 5 6 (% rbp ), % rsi movq - 2 4 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) . LBE 1 6 : jmp . L 3 3 . L 3 2 : . LBB 1 7 : movq - 2 9 6 (% rbp ), % rax leaq - 2 8 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 3 : . LBE 1 7 : movq - 2 9 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 3 , - 2 3 2 (% rbp ) movq $ 3 , - 2 2 4 (% rbp ) leaq 1 (% rbx ), % rax movq - 3 0 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 3 4 . LBB 1 8 : movq - 3 2 0 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 6 . 7 string (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) . LBE 1 8 : jmp . L 3 5 . L 3 4 : . LBB 1 9 : movq - 3 2 0 (% rbp ), % rcx movq - 3 0 4 (% rbp ), % rdx movq % rcx , - 4 1 6 (% rbp ) movq % rax , - 4 0 8 (% rbp ) movq % rdx , - 4 0 0 (% rbp ) . L 3 5 : . LBE 1 9 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 2 0 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rbx movq % rcx , - 2 0 8 (% rbp ) movq % rbx , - 2 0 0 (% rbp ) movq - 2 2 4 (% rbp ), % rdx movq % rdx , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 9 2 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 3 6 . LBB 2 0 : movq - 2 0 8 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 7 . L 3 6 : . LBE 2 0 : . LBB 2 1 : movq - 2 0 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 7 : . LBE 2 1 : . LBE 1 1 : . LBE 2 2 : . LBE 6 : . LBB 2 3 : addq $ 1 , - 4 0 (% rbp ) . L 2 : . LBE 2 3 : movq - 5 0 4 (% rbp ), % rax subq $ 3 , % rax cmpq % rax , - 4 0 (% rbp ) jle . L 4 9 . LBE 4 : . LBE 3 : movq - 5 0 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 9 cmpq % rax , - 2 4 (% rbp ) jle . L 4 8 . L 3 9 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 4 8 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 5 1 2 (% rbp ), % rdx movq - 5 0 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) je . L 4 1 movq - 2 4 (% rbp ), % rax jmp . L 4 2 . L 4 1 : movl $ 0 , % eax . L 4 2 : addq % rdx , % rax movq % rax , - 1 6 0 (% rbp ) movq - 5 0 4 (% rbp ), % rax subq - 2 4 (% rbp ), % rax movq % rax , - 1 5 2 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) . LBB 2 4 : . LBB 2 5 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq - 1 4 4 (% rbp ), % rcx movq - 1 3 6 (% rbp ), % rbx movq % rcx , - 4 1 6 (% rbp ) movq % rbx , - 4 0 8 (% rbp ) movq - 1 2 8 (% rbp ), % rcx movq % rcx , - 4 0 0 (% rbp ) movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) . LBE 2 5 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 8 8 (% rbp ) movq % rdx , - 8 0 (% rbp ) movq - 4 8 8 (% rbp ), % rax movq - 1 1 2 (% rbp ), % rcx movq - 1 0 4 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 9 6 (% rbp ), % rcx movq - 8 8 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 8 0 (% rbp ), % rdx movq % rdx , 3 2 (% rax ) . LBE 2 4 : . LBE 2 : movq - 4 8 8 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 1 movl $ 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 4 1 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 1 6 : movq $ 0 , - 8 (% rbp ) movq $ 0 , - 1 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 1 7 : . LBB 1 8 : jmp . L 1 4 . L 4 0 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : . LBB 2 1 : . LBB 2 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) setl % al testb % al , % al je . L 1 5 . LBB 2 3 : . LBB 2 4 : . LBB 2 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 6 cmpq % rax , - 2 4 (% rbp ) jl . L 3 5 . L 1 6 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax testq % rax , % rax sete % al testb % al , % al je . L 1 8 . LBB 2 6 : cmpq $ 0 , - 4 0 (% rbp ) setg % al . L 1 8 : . LBE 2 6 : . LBE 2 5 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 5 . LBB 2 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 0 cmpq % rax , - 2 4 (% rbp ) jl . L 3 6 . L 2 0 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq $ 1 , % rax sete % al . L 1 5 : . LBE 2 7 : . LBE 2 4 : . LBE 2 3 : . LBE 2 2 : testb % al , % al je . L 2 2 . LBB 2 8 : . LBB 2 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 3 cmpq % rax , - 2 4 (% rbp ) jl . L 3 7 . L 2 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax testq % rax , % rax jne . L 2 5 . LBB 3 0 : subq $ 1 , - 4 0 (% rbp ) . L 2 5 : . LBE 3 0 : . LBE 2 9 : addq $ 1 , - 2 4 (% rbp ) . LBE 2 8 : jmp . L 1 4 . L 2 2 : . LBB 3 1 : . LBB 3 2 : . LBB 3 3 : cmpq $ 0 , - 4 0 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 6 . LBB 3 4 : . LBB 3 5 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) sete % al testb % al , % al je . L 2 6 . LBB 3 6 : cmpq $ 0 , - 4 0 (% rbp ) setg % al . L 2 6 : . LBE 3 6 : . LBE 3 5 : . LBE 3 4 : . LBE 3 3 : testb % al , % al je . L 2 8 . LBB 3 7 : movq - 2 4 (% rbp ), % rax subq - 1 6 (% rbp ), % rax movq % rax , % rdx movq - 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . leetcode . max movq % rax , - 8 (% rbp ) . L 2 8 : . LBE 3 7 : . LBE 3 2 : . LBB 3 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 2 9 cmpq % rax , - 1 6 (% rbp ) jl . L 3 8 . L 2 9 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax testq % rax , % rax jne . L 3 1 . LBB 3 9 : addq $ 1 , - 4 0 (% rbp ) . L 3 1 : . LBE 3 9 : . LBE 3 8 : addq $ 1 , - 1 6 (% rbp ) . L 1 4 : . LBE 3 1 : . LBE 2 1 : . LBE 2 0 : movq 2 4 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) jl . L 4 0 . LBE 1 8 : . LBE 1 7 : . LBB 4 0 : movq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . LBE 4 0 : . LBE 1 6 : leave ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 1 movl $ 1 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 1 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 8 8 , % rsp movq % rdi , - 8 8 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 1 6 : . LBB 1 7 : cmpq $ 2 , - 8 8 (% rbp ) jg . L 1 2 . LBB 1 8 : . LBB 1 9 : movq $ 0 , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax jmp . L 2 4 . L 1 2 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : movq - 8 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq bool .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 8 0 (% rbp ) movq % rbx , - 7 2 (% rbp ) movq % rbx , - 6 4 (% rbp ) movq $ 1 , - 2 4 (% rbp ) . LBB 2 0 : movq $ 3 , - 3 2 (% rbp ) . LBB 2 1 : jmp . L 1 4 . L 3 0 : . LBB 2 2 : nop . LBE 2 2 : . LBB 2 3 : . LBB 2 4 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 5 cmpq % rax , - 3 2 (% rbp ) jl . L 2 5 . L 1 5 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq - 8 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax xorl $ 1 , % eax testb % al , % al je . L 1 7 . LBB 2 5 : addq $ 1 , - 2 4 (% rbp ) . LBB 2 6 : movq - 3 2 (% rbp ), % rax imulq % rax , % rax movq % rax , - 4 0 (% rbp ) . LBB 2 7 : jmp . L 1 8 . L 2 9 : . LBB 2 8 : nop . LBE 2 8 : . LBB 2 9 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 9 cmpq % rax , - 4 0 (% rbp ) jl . L 2 6 . L 1 9 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq - 8 0 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax movb $ 1 , (% rax ) . LBE 2 9 : . LBB 3 0 : movq - 3 2 (% rbp ), % rax addq % rax , % rax addq % rax , - 4 0 (% rbp ) . L 1 8 : . LBE 3 0 : movq - 4 0 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax jl . L 2 9 . L 1 7 : . LBE 2 7 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBE 2 3 : . LBB 3 1 : addq $ 2 , - 3 2 (% rbp ) . L 1 4 : . LBE 3 1 : movq - 3 2 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax jl . L 3 0 . LBE 2 1 : . LBE 2 0 : . LBB 3 2 : movq - 2 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax . L 2 4 : . LBE 3 2 : . LBE 1 6 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 8 movl $ 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq % rdi , - 5 6 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) . LBB 3 : movq $ 2 , - 1 6 (% rbp ) . LBB 4 : jmp . L 2 . L 1 7 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq $ 1 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 7 : . LBB 8 : jmp . L 3 . L 1 6 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : cmpq $- 1 , - 2 4 (% rbp ) jne . L 4 movq - 1 6 (% rbp ), % rax negq % rax movq % rax , % rcx jmp . L 1 3 . L 4 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 6 call runtime . panicdivide @ PLT . L 6 : movq - 1 6 (% rbp ), % rax cqto idivq - 2 4 (% rbp ) movq % rax , % rcx . L 1 3 : movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 2 , % rax movq % rcx , % rsi sarq $ 6 3 , % rsi subq % rsi , % rax movq % rax , % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax subq % rax , % rcx movq % rcx , % rdx movq % rdx , - 4 8 (% rbp ) pxor % xmm 0 , % xmm 0 cvtsi 2 sdq - 5 6 (% rbp ), % xmm 0 pxor % xmm 2 , % xmm 2 cvtsi 2 sdq - 4 8 (% rbp ), % xmm 2 movq % xmm 2 , % rax movapd % xmm 0 , % xmm 1 movq % rax , % xmm 0 call math . Pow @ PLT cvttsd 2 siq % xmm 0 , % rax addq % rax , - 3 2 (% rbp ) movq - 2 4 (% rbp ), % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax movq % rax , - 2 4 (% rbp ) . L 3 : . LBE 1 0 : movq - 2 4 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jl . L 1 6 . LBE 8 : . LBE 7 : . LBB 1 1 : movq - 3 2 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jne . L 9 . LBB 1 2 : movq - 1 6 (% rbp ), % rax addq % rax , - 8 (% rbp ) . L 9 : . LBE 1 2 : . LBE 1 1 : . LBE 6 : . LBB 1 3 : addq $ 1 , - 1 6 (% rbp ) . L 2 : . LBE 1 3 : cmpq $ 4 9 9 9 9 9 , - 1 6 (% rbp ) jle . L 1 7 . LBE 4 : . LBE 3 : . LBB 1 4 : movq - 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 1 4 : . LBE 2 : leave ret
leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 7 movl $ 3 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 6 4 , % rsp movq % rdi , - 2 9 6 (% rbp ) leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 2 5 6 (% rbp ) movq % r 1 5 , - 2 4 8 (% rbp ) movq $ 2 , - 2 4 0 (% rbp ) movq $ 2 , - 2 3 2 (% rbp ) leaq . LC 1 9 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 2 2 4 (% rbp ) movq % r 1 3 , - 2 1 6 (% rbp ) movq $ 3 , - 2 0 8 (% rbp ) movq $ 3 , - 2 0 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 3 . LBB 2 4 : movq - 2 6 4 (% rbp ), % rax movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 2 2 4 (% rbp ), % rcx movq - 2 1 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 2 0 8 (% rbp ), % rcx movq - 2 0 0 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) . LBE 2 4 : jmp . L 2 4 . L 2 3 : . LBB 2 5 : movq - 2 6 4 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 4 : . LBE 2 5 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 2 , - 2 8 0 (% rbp ) movq $ 2 , - 2 7 2 (% rbp ) . LBB 2 6 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) . LBB 2 7 : . LBB 2 8 : . LBB 2 9 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 2 9 : jmp . L 2 5 . L 3 6 : . LBB 3 0 : nop . LBE 3 0 : . LBB 3 1 : . LBB 3 2 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 2 6 cmpq % rax , % rbx jge . L 2 6 movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) . LBE 3 2 : . LBB 3 3 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 5 6 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 2 7 jmp . L 3 4 . L 2 6 : . LBE 3 3 : . LBB 3 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : . LBE 3 6 : . LBB 3 7 : . LBB 3 4 : movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) jmp . L 2 9 . L 3 4 : . LBE 3 4 : . LBB 3 5 : leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 9 : . LBE 3 5 : . LBE 3 7 : . LBB 3 8 : leaq go . Solution . TestSolution 1 .. func 1 (% rip ), % r 1 4 movq - 5 6 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 0 . LBB 3 9 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 3 9 : jmp . L 3 1 . L 3 0 : . LBB 4 0 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 1 : . LBE 4 0 : movq - 8 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 2 9 6 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 3 8 : . LBE 3 1 : . LBB 4 1 : addq $ 1 , % rbx . L 2 5 : . LBE 4 1 : cmpq % r 1 3 , % rbx jl . L 3 6 . LBE 2 8 : . LBE 2 7 : . LBE 2 6 : addq $ 2 6 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 7 movl $ 8 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 7 : pushq % rbp movq % rsp , % rbp subq $ 8 0 , % rsp movq % rdi , - 5 6 (% rbp ) movq % rsi , - 6 4 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 4 0 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 2 : movb $ 0 , - 1 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 3 6 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq - 6 4 (% rbp ), % rax addq % rax , % rax leaq 1 (% rax ), % rdx movq - 7 2 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , % rdx jne . L 3 . LBB 8 : movq - 6 4 (% rbp ), % rax addq % rax , % rax addq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . LBE 8 : jmp . L 4 . L 3 : . LBB 9 : . LBB 1 0 : movq - 6 4 (% rbp ), % rax addq % rax , % rax leaq 1 (% rax ), % rdx movq 2 4 (% rbp ), % rax testq % rdx , % rdx js . L 5 cmpq % rax , % rdx jl . L 2 7 . L 5 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq - 6 4 (% rbp ), % rax addq $ 1 , % rax addq % rax , % rax movq 2 4 (% rbp ), % rcx testq % rax , % rax js . L 7 cmpq % rcx , % rax jl . L 2 8 . L 7 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq 1 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jle . L 9 . LBB 1 1 : movq - 6 4 (% rbp ), % rax addq % rax , % rax addq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . LBE 1 1 : jmp . L 4 . L 9 : . LBB 1 2 : movq - 6 4 (% rbp ), % rax addq $ 1 , % rax addq % rax , % rax movq % rax , - 1 6 (% rbp ) . L 4 : . LBE 1 2 : . LBE 1 0 : . LBE 9 : . LBE 7 : . LBB 1 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 0 cmpq % rax , - 6 4 (% rbp ) jl . L 2 9 . L 1 0 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 2 cmpq % rax , - 1 6 (% rbp ) jl . L 3 0 . L 1 2 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jge . L 1 4 . LBB 1 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 5 cmpq % rax , - 6 4 (% rbp ) jl . L 3 1 . L 1 5 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 2 4 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 7 cmpq % rax , - 6 4 (% rbp ) jl . L 3 2 . L 1 7 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 9 cmpq % rax , - 1 6 (% rbp ) jl . L 3 3 . L 1 9 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq 1 6 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 2 1 cmpq % rax , - 1 6 (% rbp ) jl . L 3 4 . L 2 1 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rax , (% rdx ) movq - 1 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBE 1 4 : jmp . L 2 . L 1 4 : . LBB 1 5 : movb $ 1 , - 1 (% rbp ) . L 2 : . LBE 1 5 : . LBE 1 3 : . LBE 6 : . LBB 1 6 : movq - 6 4 (% rbp ), % rax addq % rax , % rax addq $ 1 , % rax cmpq % rax , - 7 2 (% rbp ) setg % al testb % al , % al je . L 2 3 . LBB 1 7 : movzbl - 1 (% rbp ), % eax xorl $ 1 , % eax . L 2 3 : . LBE 1 7 : . LBE 1 6 : testb % al , % al jne . L 3 6 . LBE 4 : . LBE 3 : . LBB 1 8 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 5 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 8 : . LBE 2 : movq - 5 6 (% rbp ), % rax leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 6 4 0 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 5 5 : ret . L 6 4 0 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 6 0 5 : . LBB 6 0 6 : movq - 2 4 (% rbp ), % rax movq % rax , % rdi call go . httprange . lexer . peek testl % eax , % eax je . L 6 3 5 cmpl $ 4 5 , % eax je . L 6 3 6 jmp . L 6 3 9 . L 6 3 5 : . LBB 6 0 7 : movq - 2 4 (% rbp ), % rax movl $ 1 , % esi movq % rax , % rdi call go . httprange . lexer . emit . LBB 6 0 8 : movq $ 0 , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 6 3 8 . L 6 3 6 : . LBE 6 0 8 : . LBE 6 0 7 : . LBB 6 0 9 : . LBB 6 1 0 : movq - 2 4 (% rbp ), % rax movq % rax , % rdi call go . httprange . byteSuffixRange movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 6 3 8 . L 6 3 9 : . LBE 6 1 0 : . LBE 6 0 9 : . LBE 6 0 6 : . LBB 6 1 1 : movq - 2 4 (% rbp ), % rax movq % rax , % rdi call go . httprange . firstByte movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 6 3 8 : . LBE 6 1 1 : . LBE 6 0 5 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 7 movl $ 1 2 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 7 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 0 4 , % rsp movq % rdi , - 1 0 4 (% rbp ) movq % rsi , - 1 1 2 (% rbp ) movq $ 0 , - 6 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax subq - 1 1 2 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq float 6 4 .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 9 6 (% rbp ) movq % rbx , - 8 8 (% rbp ) movq % rbx , - 8 0 (% rbp ) movq - 1 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call go . leetcode 0 4 8 0 . newWindow addq $ 3 2 , % rsp movq % rax , - 4 0 (% rbp ) . LBB 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 1 6 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 4 0 (% rbp ), % rax movq % rax , % rdi call go . leetcode 0 4 8 0 . window . median movq % xmm 0 , % rdx movq - 8 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 cmpq % rax , - 2 4 (% rbp ) jl . L 1 2 . L 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : movq - 9 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq % rdx , (% rax ) movq - 2 4 (% rbp ), % rdx movq - 1 1 2 (% rbp ), % rax addq % rdx , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 5 cmpq % rdx , % rax jl . L 1 3 . L 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 2 4 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax leaq (% rcx ,% rax ), % rdi movq - 2 4 (% rbp ), % rsi movq - 4 0 (% rbp ), % rax movq % rdx , % rcx movq % rdi , % rdx movq % rax , % rdi call go . leetcode 0 4 8 0 . window . update . LBE 6 : . LBB 7 : addq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 7 : movq - 2 4 (% rbp ), % rdx movq - 1 1 2 (% rbp ), % rax addq % rdx , % rax cmpq % rax , - 3 2 (% rbp ) jg . L 1 6 . LBE 4 : . LBE 3 : movq - 4 0 (% rbp ), % rax movq % rax , % rdi call go . leetcode 0 4 8 0 . window . median movq % xmm 0 , % rcx movq - 3 2 (% rbp ), % rax subq - 1 1 2 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx testq % rax , % rax js . L 9 cmpq % rdx , % rax jl . L 1 5 . L 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : movq - 9 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rcx , (% rax ) . LBB 8 : movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 1 0 4 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 8 : . LBE 2 : movq - 1 0 4 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 5 2 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 8 3 movl $ 5 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 8 8 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 4 9 6 (% rbp ) movq % rdi , - 4 8 8 (% rbp ) movq % rdx , - 5 1 2 (% rbp ) movq % rcx , - 5 0 4 (% rbp ) movq $ 0 , - 8 0 (% rbp ) . LBB 2 : movq - 4 8 8 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) movq - 5 0 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 0 , - 4 0 (% rbp ) movq - 8 8 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 8 0 (% rbp ) movq % rbx , - 4 7 2 (% rbp ) movq % rbx , - 4 6 4 (% rbp ) . LBB 3 : movq $ 0 , - 1 0 4 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq - 4 4 0 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 6 : jmp . L 2 . L 7 8 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq % r 1 2 , - 1 0 4 (% rbp ) . LBB 9 : movq - 9 6 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 4 7 2 (% rbp ), % rax cmpq $ 0 , - 1 0 4 (% rbp ) js . L 3 cmpq % rax , - 1 0 4 (% rbp ) jl . L 5 9 . L 3 : movq - 1 0 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 9 : movq - 4 8 0 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 4 1 6 (% rbp ) movq % rbx , - 4 0 8 (% rbp ) movq % rbx , - 4 0 0 (% rbp ) movq - 4 0 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 4 0 0 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 . LBB 1 0 : movq - 4 1 6 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 6 . L 5 : . LBE 1 0 : . LBB 1 1 : movq - 4 1 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 : . LBE 1 1 : . LBE 9 : . LBE 8 : . LBB 1 2 : addq $ 1 , % r 1 2 . L 2 : . LBE 1 2 : cmpq % r 1 3 , % r 1 2 jl . L 7 8 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 3 : movq $ 0 , - 4 8 (% rbp ) . LBB 1 4 : jmp . L 9 . L 7 9 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : movq - 4 7 2 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 0 cmpq % rax , - 4 8 (% rbp ) jl . L 6 1 . L 1 0 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 1 : movq - 4 8 0 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 7 6 (% rbp ), % rax testq % rax , % rax jg . L 1 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 2 : movq - 3 8 4 (% rbp ), % rax movq - 4 8 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 1 6 : . LBB 1 7 : addq $ 1 , - 4 8 (% rbp ) . L 9 : . LBE 1 7 : movq - 4 8 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax jle . L 7 9 . LBE 1 4 : . LBE 1 3 : . LBB 1 8 : movq $ 0 , - 5 6 (% rbp ) . LBB 1 9 : jmp . L 1 5 . L 8 0 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : movq - 4 7 2 (% rbp ), % rax testq % rax , % rax jg . L 1 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 6 : movq - 4 8 0 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 4 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 7 cmpq % rax , - 5 6 (% rbp ) jge . L 1 7 movq - 3 5 2 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 5 6 (% rbp ), % rax movq % rax , (% rdx ) . LBE 2 1 : . LBB 2 2 : addq $ 1 , - 5 6 (% rbp ) jmp . L 1 5 . L 1 7 : . LBE 2 2 : . LBB 2 3 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : . LBE 2 3 : movq - 5 6 (% rbp ), % rax cmpq - 9 6 (% rbp ), % rax jle . L 8 0 . LBE 1 9 : . LBE 1 8 : . LBB 2 4 : movq $ 1 , - 6 4 (% rbp ) . LBB 2 5 : jmp . L 2 0 . L 8 2 : . LBB 2 6 : nop . LBE 2 6 : . LBB 2 7 : . LBB 2 8 : movq $ 1 , - 7 2 (% rbp ) . LBB 2 9 : jmp . L 2 1 . L 8 1 : . LBB 3 0 : nop . LBE 3 0 : . LBB 3 1 : movq - 6 4 (% rbp ), % rax subq $ 1 , % rax movq - 4 7 2 (% rbp ), % rdx testq % rax , % rax js . L 2 2 cmpq % rdx , % rax jl . L 6 4 . L 2 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 4 : movq - 4 8 0 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 2 4 cmpq % rax , - 7 2 (% rbp ) jl . L 6 5 . L 2 4 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 5 : movq - 4 7 2 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 2 6 cmpq % rax , - 6 4 (% rbp ) jl . L 6 6 . L 2 6 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 6 : movq - 4 8 0 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax subq $ 1 , % rax movq - 2 8 0 (% rbp ), % rdx testq % rax , % rax js . L 2 8 cmpq % rdx , % rax jge . L 2 8 movq - 2 8 8 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax leaq 1 (% rax ), % rdx movq - 3 2 0 (% rbp ), % rcx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax addq $ 1 , % rax movq % rdx , % rsi movq % rax , % rdi call go . Problem 0 0 7 2 . min movq % rax , % rsi movq - 4 7 2 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) jns . L 2 9 jmp . L 3 0 . L 2 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : cmpq % rax , - 6 4 (% rbp ) jl . L 6 7 . L 3 0 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 7 : movq - 4 8 0 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 3 2 cmpq % rax , - 7 2 (% rbp ) jge . L 3 2 movq - 2 5 6 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . LBB 3 2 : movq - 6 4 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 4 8 8 (% rbp ), % rax testq % rdx , % rdx jns . L 3 3 jmp . L 3 4 . L 3 2 : . LBE 3 2 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : . LBB 3 5 : cmpq % rax , % rdx jl . L 6 8 . L 3 4 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 8 : movq - 7 2 (% rbp ), % rax subq $ 1 , % rax movq - 5 0 4 (% rbp ), % rcx testq % rax , % rax js . L 3 6 cmpq % rcx , % rax jl . L 6 9 . L 3 6 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 9 : movq - 4 9 6 (% rbp ), % rcx addq % rcx , % rdx movzbl (% rdx ), % edx movq - 5 1 2 (% rbp ), % rcx addq % rcx , % rax movzbl (% rax ), % eax cmpb % al , % dl jne . L 3 8 . LBB 3 3 : movq $ 0 , - 4 0 (% rbp ) . LBE 3 3 : jmp . L 3 9 . L 3 8 : . LBB 3 4 : movq $ 1 , - 4 0 (% rbp ) . L 3 9 : . LBE 3 4 : . LBE 3 5 : movq - 4 7 2 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 4 0 cmpq % rax , - 6 4 (% rbp ) jl . L 7 0 . L 4 0 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 0 : movq - 4 8 0 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 4 2 cmpq % rax , - 7 2 (% rbp ) jl . L 7 1 . L 4 2 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 1 : movq - 6 4 (% rbp ), % rax subq $ 1 , % rax movq - 4 7 2 (% rbp ), % rdx testq % rax , % rax js . L 4 4 cmpq % rdx , % rax jl . L 7 2 . L 4 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 2 : movq - 4 8 0 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 7 2 (% rbp ), % rax subq $ 1 , % rax movq - 1 8 4 (% rbp ), % rdx testq % rax , % rax js . L 4 6 cmpq % rdx , % rax jge . L 4 6 movq - 1 9 2 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax addq % rax , % rdx movq - 2 2 4 (% rbp ), % rcx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call go . Problem 0 0 7 2 . min movq % rax , % rsi movq - 4 7 2 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) jns . L 4 7 jmp . L 4 8 . L 4 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : cmpq % rax , - 6 4 (% rbp ) jl . L 7 3 . L 4 8 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 3 : movq - 4 8 0 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 5 0 cmpq % rax , - 7 2 (% rbp ) jge . L 5 0 movq - 1 6 0 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . LBE 3 1 : . LBB 3 6 : addq $ 1 , - 7 2 (% rbp ) jmp . L 2 1 . L 5 0 : . LBE 3 6 : . LBB 3 7 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : . LBE 3 7 : movq - 7 2 (% rbp ), % rax cmpq - 9 6 (% rbp ), % rax jle . L 8 1 . LBE 2 9 : . LBE 2 8 : . LBE 2 7 : . LBB 3 8 : addq $ 1 , - 6 4 (% rbp ) . L 2 0 : . LBE 3 8 : movq - 6 4 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax jle . L 8 2 . LBE 2 5 : . LBE 2 4 : . LBB 3 9 : movq - 4 7 2 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 5 5 cmpq % rax , - 8 8 (% rbp ) jl . L 7 6 . L 5 5 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 6 : movq - 4 8 0 (% rbp ), % rcx movq - 8 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 5 7 cmpq % rax , - 9 6 (% rbp ) jge . L 5 7 movq - 1 2 8 (% rbp ), % rdx movq - 9 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 0 (% rbp ), % rax jmp . L 7 7 . L 5 7 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 7 : . LBE 3 9 : . LBE 2 : addq $ 4 8 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 5 6 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 2 movl $ 5 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 2 8 , % rsp movq % rdi , - 5 5 2 (% rbp ) movq % rsi , - 5 6 0 (% rbp ) movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) movq $ 0 , - 4 0 0 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 5 6 0 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) movq $ 0 , - 4 0 0 (% rbp ) movq - 5 5 2 (% rbp ), % rcx movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 0 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 5 6 0 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) leaq - 3 8 4 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq $ 1 , - 4 4 0 (% rbp ) movq $ 1 , - 4 3 2 (% rbp ) leaq type ... 6 0 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 3 7 6 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq $ 0 , - 4 7 2 (% rbp ) movq $ 0 , - 4 6 4 (% rbp ) . LBB 6 : . LBB 7 : jmp . L 4 . L 3 1 : . LBB 8 : nop . LBE 8 : . LBB 9 : leaq type ... 6 0 x . 7 . 1 go . leetcode 0 1 0 2 . TreeNode (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 8 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) movq $ 0 , - 5 0 4 (% rbp ) movq $ 0 , - 4 9 6 (% rbp ) leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 3 6 0 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) movq $ 0 , - 5 3 6 (% rbp ) movq $ 0 , - 5 2 8 (% rbp ) . LBB 1 0 : movq $ 0 , - 4 0 (% rbp ) . LBB 1 1 : . LBB 1 2 : . LBB 1 3 : movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 4 4 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 1 3 : jmp . L 5 . L 3 0 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 3 4 4 (% rbp ), % rax testq % rbx , % rbx js . L 6 cmpq % rax , % rbx jge . L 6 movq - 3 5 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 6 : . LBB 1 7 : movq % rax , - 4 0 (% rbp ) . LBE 1 7 : . LBB 1 8 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % r 1 2 movq - 4 0 (% rbp ), % rax movq (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 3 0 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 7 jmp . L 2 7 . L 6 : . LBE 1 8 : . LBB 3 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 7 : . LBE 3 3 : . LBB 3 4 : . LBB 1 9 : movq - 3 2 0 (% rbp ), % rsi leaq - 1 6 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) . LBE 1 9 : jmp . L 9 . L 2 7 : . LBB 2 0 : movq - 3 2 0 (% rbp ), % rcx movq - 3 0 4 (% rbp ), % rdx movq % rcx , - 5 4 4 (% rbp ) movq % rax , - 5 3 6 (% rbp ) movq % rdx , - 5 2 8 (% rbp ) . L 9 : . LBE 2 0 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 3 , (% rax ) . LBB 2 1 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax je . L 1 0 . LBB 2 2 : movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % r 1 2 movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 1 . LBB 2 3 : movq - 2 8 8 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 go . leetcode 0 1 0 2 . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) . LBE 2 3 : jmp . L 1 2 . L 1 1 : . LBB 2 4 : movq - 2 8 8 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rdx movq % rcx , - 5 1 2 (% rbp ) movq % rax , - 5 0 4 (% rbp ) movq % rdx , - 4 9 6 (% rbp ) . L 1 2 : . LBE 2 4 : movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 3 . LBB 2 5 : movq % r 1 3 , (% rax ) jmp . L 1 0 . L 1 3 : . LBE 2 5 : . LBB 2 6 : movq % r 1 3 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 0 : . LBE 2 6 : . LBE 2 2 : . LBE 2 1 : . LBB 2 7 : movq - 4 0 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax je . L 1 4 . LBB 2 8 : movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 2 movq - 4 0 (% rbp ), % rax movq 1 6 (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 5 . LBB 2 9 : movq - 2 5 6 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 go . leetcode 0 1 0 2 . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) . LBE 2 9 : jmp . L 1 6 . L 1 5 : . LBB 3 0 : movq - 2 5 6 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rdx movq % rcx , - 5 1 2 (% rbp ) movq % rax , - 5 0 4 (% rbp ) movq % rdx , - 4 9 6 (% rbp ) . L 1 6 : . LBE 3 0 : movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 7 . LBB 3 1 : movq % r 1 3 , (% rax ) jmp . L 1 4 . L 1 7 : . LBE 3 1 : . LBB 3 2 : movq % r 1 3 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 4 : . LBE 3 2 : . LBE 2 8 : . LBE 2 7 : . LBE 3 4 : . LBE 1 5 : . LBB 3 5 : addq $ 1 , % rbx . L 5 : . LBE 3 5 : cmpq % r 1 4 , % rbx jl . L 3 0 . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 0 . LBB 3 6 : movq - 2 2 4 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 6 . 7 int (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) . LBE 3 6 : jmp . L 2 1 . L 2 0 : . LBB 3 7 : movq - 2 2 4 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rdx movq % rcx , - 4 8 0 (% rbp ) movq % rax , - 4 7 2 (% rbp ) movq % rdx , - 4 6 4 (% rbp ) . L 2 1 : . LBE 3 7 : movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 2 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 5 4 4 (% rbp ), % rcx movq - 5 3 6 (% rbp ), % rbx movq % rcx , - 1 9 2 (% rbp ) movq % rbx , - 1 8 4 (% rbp ) movq - 5 2 8 (% rbp ), % rdx movq % rdx , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 7 6 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 2 . LBB 3 8 : movq - 1 9 2 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 2 3 . L 2 2 : . LBE 3 8 : . LBB 3 9 : movq - 1 9 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 3 : . LBE 3 9 : movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) . L 4 : . LBE 9 : movq - 4 4 0 (% rbp ), % rax testq % rax , % rax jne . L 3 1 . LBE 7 : . LBE 6 : . LBB 4 0 : movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 5 5 2 (% rbp ), % rcx movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 0 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 4 0 : . LBE 2 : movq - 5 5 2 (% rbp ), % rax addq $ 5 2 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : leaq - 6 4 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 0 movl $ 6 4 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 0 0 , % rsp . LBB 2 : movq $ 1 0 , - 5 6 (% rbp ) . LBB 3 : jmp . L 2 . L 3 9 : . LBB 4 : nop . LBE 4 : . LBB 5 : movq $ 0 , - 4 8 0 (% rbp ) movq $ 0 , - 4 7 2 (% rbp ) movq $ 0 , - 4 6 4 (% rbp ) . LBB 6 : movq $ 0 , - 5 2 8 (% rbp ) movq $ 0 , - 5 2 0 (% rbp ) . LBB 7 : . LBB 8 : . LBB 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq - 4 4 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 9 : jmp . L 3 . L 3 7 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 4 4 0 (% rbp ), % rax testq % rbx , % rbx js . L 4 cmpq % rax , % rbx jge . L 4 movq - 4 4 8 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 1 2 : . LBB 1 3 : movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) . LBE 1 3 : . LBB 1 4 : movq - 5 6 (% rbp ), % rax leaq 1 (% rax ), % rdi movq - 5 2 0 (% rbp ), % rax testq % rdi , % rdi jns . L 5 jmp . L 6 . L 4 : . LBE 1 4 : . LBB 1 9 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 5 : . LBE 1 9 : . LBB 2 0 : cmpq % rax , % rdi jg . L 6 cmpq $ 0 , - 5 6 (% rbp ) jns . L 7 jmp . L 8 . L 6 : movq % rax , % rsi call runtime . goPanicSliceAlen @ PLT . L 7 : cmpq % rdi , - 5 6 (% rbp ) jg . L 8 movq - 5 2 8 (% rbp ), % rdx cmpq - 5 6 (% rbp ), % rdi jne . L 9 jmp . L 3 2 . L 8 : movq - 5 6 (% rbp ), % rax movq % rdi , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 9 : movq - 5 6 (% rbp ), % rax jmp . L 1 1 . L 3 2 : movl $ 0 , % eax . L 1 1 : addq % rdx , % rax movq % rax , - 5 4 4 (% rbp ) movq % rdi , % rax subq - 5 6 (% rbp ), % rax movq % rax , - 5 3 6 (% rbp ) leaq - 1 6 0 (% rbp ), % rax movq - 5 4 4 (% rbp ), % rcx movq - 5 3 6 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call strconv . Atoi @ PLT movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 4 0 8 (% rbp ), % rax movq - 4 0 0 (% rbp ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 7 6 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 3 6 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 2 . LBB 1 5 : movq - 3 8 4 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq main .. main . phoneDataList .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) . LBE 1 5 : jmp . L 1 3 . L 1 2 : . LBB 1 6 : movq - 3 8 4 (% rbp ), % rcx movq - 3 6 8 (% rbp ), % rdx movq % rcx , - 4 8 0 (% rbp ) movq % rax , - 4 7 2 (% rbp ) movq % rdx , - 4 6 4 (% rbp ) . L 1 3 : . LBE 1 6 : movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 8 4 (% rbp ), % rdx movq % r 1 2 , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 4 . LBB 1 7 : movq - 5 9 2 (% rbp ), % rsi movq - 5 8 4 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 5 7 6 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) jmp . L 1 5 . L 1 4 : . LBE 1 7 : . LBB 1 8 : leaq - 5 9 2 (% rbp ), % rdx movq % rax , % rsi leaq main .. main . phoneDataList .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 5 : . LBE 1 8 : . LBE 2 0 : . LBE 1 1 : . LBB 2 1 : addq $ 1 , % rbx . L 3 : . LBE 2 1 : cmpq % r 1 3 , % rbx jl . L 3 7 . LBE 8 : . LBE 7 : . LBE 6 : leaq main . baseSort .. func 1 (% rip ), % rcx leaq - 4 8 0 (% rbp ), % rdx movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) leaq - 3 2 0 (% rbp ), % rax movq % rax , - 2 9 6 (% rbp ) movq - 2 9 6 (% rbp ), % rax movq % rcx , (% rax ) movq % rdx , 8 (% rax ) movq - 2 9 6 (% rbp ), % rbx leaq type ... 6 . 7 main . phoneDataList (% rip ), % r 1 4 leaq type ... 6 . 7 main . phoneDataList (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 8 . LBB 2 2 : movq - 3 6 0 (% rbp ), % rcx movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 3 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 2 : jmp . L 1 9 . L 1 8 : . LBB 2 3 : movq - 3 6 0 (% rbp ), % rax leaq - 3 5 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 main . phoneDataList (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 9 : . LBE 2 3 : movq - 3 6 0 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call sort . Slice @ PLT movq $ 0 , - 5 1 2 (% rbp ) movq $ 0 , - 5 0 4 (% rbp ) movq $ 0 , - 4 9 6 (% rbp ) . LBB 2 4 : movq $ 0 , - 6 2 4 (% rbp ) movq $ 0 , - 6 1 6 (% rbp ) movq $ 0 , - 6 0 8 (% rbp ) . LBB 2 5 : . LBB 2 6 : . LBB 2 7 : movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) movl $ 0 , % ebx . LBE 2 7 : jmp . L 2 0 . L 3 8 : . LBB 2 8 : nop . LBE 2 8 : . LBB 2 9 : . LBB 3 0 : movq - 2 4 8 (% rbp ), % rax testq % rbx , % rbx js . L 2 1 cmpq % rax , % rbx jge . L 2 1 movq - 2 5 6 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 7 2 (% rbp ) . LBE 3 0 : . LBB 3 1 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 6 0 8 (% rbp ) . LBE 3 1 : . LBB 3 2 : movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 6 3 2 (% rbp ) movq - 6 2 4 (% rbp ), % r 1 2 movq - 6 1 6 (% rbp ), % r 1 3 addq $ 1 , % rax movq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 2 2 jmp . L 3 4 . L 2 1 : . LBE 3 2 : . LBB 3 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : . LBE 3 7 : . LBB 3 8 : . LBB 3 3 : movq - 1 9 2 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq - 6 3 2 (% rbp ), % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) . LBE 3 3 : jmp . L 2 4 . L 3 4 : . LBB 3 4 : movq - 1 9 2 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rdx movq % rcx , - 5 1 2 (% rbp ) movq % rax , - 5 0 4 (% rbp ) movq % rdx , - 4 9 6 (% rbp ) . L 2 4 : . LBE 3 4 : movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx salq $ 4 , % rdx addq % rdx , % rax movq % r 1 3 , % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 5 . LBB 3 5 : movq % r 1 2 , % rdx movq % rdx , (% rax ) jmp . L 2 6 . L 2 5 : . LBE 3 5 : . LBB 3 6 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 6 : . LBE 3 6 : . LBE 3 8 : . LBE 2 9 : . LBB 3 9 : addq $ 1 , % rbx . L 2 0 : . LBE 3 9 : cmpq - 6 4 0 (% rbp ), % rbx jl . L 3 8 . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : pushq - 4 9 6 (% rbp ) pushq - 5 0 4 (% rbp ) pushq - 5 1 2 (% rbp ) pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . typedslicecopy @ PLT addq $ 4 8 , % rsp . LBE 5 : . LBB 4 0 : subq $ 1 , - 5 6 (% rbp ) . L 2 : . LBE 4 0 : cmpq $ 0 , - 5 6 (% rbp ) jns . L 3 9 . LBE 3 : . LBE 2 : nop leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 4 2 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 3 movl $ 4 2 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 4 0 0 , % rsp movq % rdi , - 4 0 8 (% rbp ) movq % rsi , - 4 1 6 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 4 1 6 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) movq - 4 0 8 (% rbp ), % rcx movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 8 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq - 2 8 0 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rbx movq - 4 1 6 (% rbp ), % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 movq - 2 7 2 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) jmp . L 5 . L 4 : movq - 2 7 2 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rdx movq % rcx , - 2 7 2 (% rbp ) movq % rax , - 2 6 4 (% rbp ) movq % rdx , - 2 5 6 (% rbp ) . L 5 : movq - 2 7 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) . LBB 6 : movq - 4 1 6 (% rbp ), % rax movq 8 (% rax ), % rdx leaq - 3 6 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . leetcode . preorderTraversal movq - 3 6 8 (% rbp ), % rax testq % rax , % rax je . L 6 . LBB 7 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rbx movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 2 leaq (% rbx ,% r 1 2 ), % rax movq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 7 . LBB 8 : movq - 2 4 0 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) . LBE 8 : jmp . L 8 . L 7 : . LBB 9 : movq - 2 4 0 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rdx movq % rcx , - 3 3 6 (% rbp ) movq % rax , - 3 2 8 (% rbp ) movq % rdx , - 3 2 0 (% rbp ) . L 8 : . LBE 9 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq % r 1 2 , % rax leaq 0 (,% rax , 8 ), % rdx movq - 2 0 8 (% rbp ), % rax movq - 2 4 0 (% rbp ), % rcx movq % rbx , % rsi salq $ 3 , % rsi addq % rsi , % rcx movq % rax , % rsi movq % rcx , % rdi call memmove @ PLT . L 6 : . LBE 7 : . LBE 6 : . LBB 1 0 : movq - 4 1 6 (% rbp ), % rax movq 1 6 (% rax ), % rdx leaq - 4 0 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . leetcode . preorderTraversal movq - 4 0 0 (% rbp ), % rax testq % rax , % rax je . L 9 . LBB 1 1 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rbx movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % r 1 2 leaq (% rbx ,% r 1 2 ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 0 . LBB 1 2 : movq - 1 7 6 (% rbp ), % rsi leaq - 4 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) . LBE 1 2 : jmp . L 1 1 . L 1 0 : . LBB 1 3 : movq - 1 7 6 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rdx movq % rcx , - 3 3 6 (% rbp ) movq % rax , - 3 2 8 (% rbp ) movq % rdx , - 3 2 0 (% rbp ) . L 1 1 : . LBE 1 3 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq % r 1 2 , % rax leaq 0 (,% rax , 8 ), % rdx movq - 1 4 4 (% rbp ), % rax movq - 1 7 6 (% rbp ), % rcx movq % rbx , % rsi salq $ 3 , % rsi addq % rsi , % rcx movq % rax , % rsi movq % rcx , % rdi call memmove @ PLT . L 9 : . LBE 1 1 : . LBE 1 0 : . LBB 1 4 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 4 0 8 (% rbp ), % rcx movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 8 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 1 4 : . LBE 2 : movq - 4 0 8 (% rbp ), % rax addq $ 4 0 0 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 5 movl $ 7 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq $ 0 , - 5 6 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 8 (% rbp ) movq $ 1 , - 1 6 (% rbp ) movq $ 1 , - 2 4 (% rbp ) movq $ 1 , - 3 2 (% rbp ) . LBB 6 : movq $ 1 , - 4 0 (% rbp ) . LBB 7 : jmp . L 4 . L 2 4 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 5 cmpq % rax , - 4 0 (% rbp ) jl . L 1 9 . L 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 7 cmpq % rdx , % rax jl . L 2 0 . L 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : movq 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jge . L 9 . LBB 1 1 : addq $ 1 , - 8 (% rbp ) . LBB 1 2 : movq - 8 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax jl . L 1 0 . LBB 1 3 : addq $ 1 , - 3 2 (% rbp ) . L 1 0 : . LBE 1 3 : . LBE 1 2 : movq - 8 (% rbp ), % rax addq % rax , - 3 2 (% rbp ) movq $ 1 , - 1 6 (% rbp ) . LBE 1 1 : jmp . L 1 1 . L 9 : . LBB 1 4 : movq $ 1 , - 4 8 (% rbp ) . LBB 1 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 2 cmpq % rax , - 4 0 (% rbp ) jl . L 2 1 . L 1 2 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 4 cmpq % rdx , % rax jl . L 2 2 . L 1 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : movq 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jle . L 1 6 . LBB 1 6 : movq - 1 6 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 4 8 (% rbp ) . L 1 6 : . LBE 1 6 : . LBE 1 5 : movq - 4 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 4 8 (% rbp ), % rax addq % rax , - 3 2 (% rbp ) movq $ 0 , - 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . L 1 1 : . LBE 1 4 : . LBE 1 0 : . LBE 9 : . LBB 1 7 : addq $ 1 , - 4 0 (% rbp ) . L 4 : . LBE 1 7 : movq 2 4 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 2 4 . LBE 7 : . LBE 6 : . LBB 1 8 : movq - 3 2 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax . L 3 : . LBE 1 8 : . LBE 2 : leave ret
. LFB 0 : leaq - 4 0 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 2 movl $ 4 0 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 2 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 3 9 2 , % rsp movq % rdi , - 3 9 2 (% rbp ) movq $ 0 , - 3 3 6 (% rbp ) movq $ 0 , - 3 2 8 (% rbp ) movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 8 8 (% rbp ) movq % rbx , - 2 8 0 (% rbp ) movq % rbx , - 2 7 2 (% rbp ) movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 3 6 0 (% rbp ) movq % rdx , - 3 5 2 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) . LBB 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 3 1 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 cmpq % rax , - 2 4 (% rbp ) jl . L 2 5 . L 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rax cmpq $ 2 , % rax jg . L 5 movq % rax , % rsi movl $ 2 , % edi call runtime . goPanicIndex @ PLT . L 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 6 cmpq % rax , - 2 4 (% rbp ) jl . L 2 6 . L 6 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rax testq % rax , % rax jg . L 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 9 cmpq % rax , - 2 4 (% rbp ) jl . L 2 7 . L 9 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax cmpq $ 3 , % rax jg . L 1 1 movq % rax , % rsi movl $ 3 , % edi call runtime . goPanicIndex @ PLT . L 1 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 2 cmpq % rax , - 2 4 (% rbp ) jl . L 2 8 . L 1 2 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 4 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 4 : movq - 2 5 6 (% rbp ), % rax addq $ 1 6 , % rax movq (% rax ), % rdx movq - 2 2 4 (% rbp ), % rax movq (% rax ), % rcx movq % rdx , % rax subq % rcx , % rax leaq 1 (% rax ), % rcx movq - 1 9 2 (% rbp ), % rax addq $ 2 4 , % rax movq (% rax ), % rax movq - 1 6 0 (% rbp ), % rdx addq $ 8 , % rdx movq (% rdx ), % rdx subq % rdx , % rax addq $ 1 , % rax imulq % rcx , % rax movq % rax , - 3 2 (% rbp ) . LBB 7 : cmpq $ 0 , - 3 2 (% rbp ) jns . L 1 5 . LBB 8 : negq - 3 2 (% rbp ) . L 1 5 : . LBE 8 : . LBE 7 : . LBB 9 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 1 6 . LBB 1 0 : movq - 3 6 0 (% rbp ), % rax movq - 3 5 2 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 3 4 4 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rax testq % rax , % rax jg . L 1 7 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 7 : movq - 1 2 8 (% rbp ), % rax movq - 3 2 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 1 0 : jmp . L 1 8 . L 1 6 : . LBB 1 1 : movq - 3 6 0 (% rbp ), % rax movq - 3 5 2 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 3 4 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 9 cmpq % rax , - 2 4 (% rbp ) jl . L 2 9 . L 1 9 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 3 6 0 (% rbp ), % rax movq - 3 5 2 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq - 3 4 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 2 1 cmpq % rdx , % rax jge . L 2 1 movq - 6 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rcx movq - 9 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq - 3 2 (% rbp ), % rdx addq % rcx , % rdx movq % rdx , (% rax ) jmp . L 1 8 . L 2 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : . LBE 1 1 : . LBE 9 : . LBE 6 : . LBB 1 2 : addq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 1 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 3 1 . LBE 4 : . LBE 3 : . LBB 1 3 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 9 2 (% rbp ), % rax movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 1 3 : . LBE 2 : movq - 3 9 2 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
leaq - 5 0 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 8 movl $ 5 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 5 6 , % rsp movq $ 1 0 0 , - 5 6 (% rbp ) leaq type ... 6 1 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 0 (% rbp ) movq - 4 4 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq $ 5 , 3 2 (% rax ) movq $ 6 , 4 0 (% rax ) movq $ 7 , 4 8 (% rax ) movq $ 8 , 5 6 (% rax ) movq $ 9 , 6 4 (% rax ) movq $ 1 0 , 7 2 (% rax ) movq - 4 4 0 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq $ 1 0 , - 4 5 6 (% rbp ) movq $ 1 0 , - 4 4 8 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 4 9 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 8 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 4 . LBB 1 2 : movq - 4 0 8 (% rbp ), % rcx movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 8 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 2 : jmp . L 1 5 . L 1 4 : . LBB 1 3 : movq - 4 0 8 (% rbp ), % rax leaq - 4 0 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 5 : . LBE 1 3 : movq - 4 0 8 (% rbp ), % rax movq % rax , - 4 8 8 (% rbp ) movdqa - 4 9 6 (% rbp ), % xmm 0 movups % xmm 0 , - 3 6 8 (% rbp ) leaq - 3 6 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq $ 1 , - 2 4 8 (% rbp ) movq $ 1 , - 2 4 0 (% rbp ) leaq - 2 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 4 0 (% rbp ) pushq - 2 4 8 (% rbp ) pushq - 2 5 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 5 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 4 4 8 (% rbp ) pushq - 4 5 6 (% rbp ) pushq - 4 6 4 (% rbp ) movq % rax , % rdi call main . search addq $ 3 2 , % rsp movq % rax , - 6 4 (% rbp ) . LBB 1 4 : cmpq $- 1 , - 6 4 (% rbp ) jne . L 1 6 . LBB 1 5 : leaq string .. d (% rip ), % r 1 4 leaq go .. C 1 3 (% rip ), % r 1 5 movq % r 1 4 , - 3 2 0 (% rbp ) movq % r 1 5 , - 3 1 2 (% rbp ) leaq - 3 2 0 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq $ 1 , - 1 8 4 (% rbp ) movq $ 1 , - 1 7 6 (% rbp ) leaq - 1 6 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 7 6 (% rbp ) pushq - 1 8 4 (% rbp ) pushq - 1 9 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) . LBE 1 5 : jmp . L 1 3 . L 1 6 : . LBB 1 6 : leaq int .. d (% rip ), % rax movq % rax , - 4 8 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq - 2 8 0 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 8 0 (% rbp ), % rax movq % rax , - 4 7 2 (% rbp ) movdqa - 4 8 0 (% rbp ), % xmm 1 movups % xmm 1 , - 2 7 2 (% rbp ) leaq - 2 7 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) leaq . LC 7 (% rip ), % r 1 2 movl $ 2 6 , % r 1 3 d leaq - 9 6 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . L 1 3 : . LBE 1 6 : . LBE 1 4 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
leaq - 9 3 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 1 3 movl $ 9 3 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 1 1 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 8 8 , % rsp movq % rdi , - 7 4 4 (% rbp ) movl $ 1 0 0 , % edi call math .. z 2 frand . Intn @ PLT addq $ 5 0 , % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , % rdi call math .. z 2 frand . Intn @ PLT movq % rax , - 6 4 (% rbp ) movq - 5 6 (% rbp ), % r 1 2 movq - 5 6 (% rbp ), % rbx movq % rbx , % rdx movq % r 1 2 , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 7 0 4 (% rbp ) movq % r 1 2 , - 6 9 6 (% rbp ) movq % rbx , - 6 8 8 (% rbp ) . LBB 7 8 : movq $ 0 , - 7 2 (% rbp ) . LBB 7 9 : . LBB 8 0 : . LBB 8 1 : movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 6 7 2 (% rbp ) movq % rdx , - 6 6 4 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 6 5 6 (% rbp ) movq - 6 6 4 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 8 1 : jmp . L 7 2 . L 1 1 0 : . LBB 8 2 : nop . LBE 8 2 : . LBB 8 3 : movq % rbx , - 7 2 (% rbp ) . LBB 8 4 : movl $ 1 0 0 , % edi call math .. z 2 frand . Intn @ PLT movq % rax , % rcx movq - 6 9 6 (% rbp ), % rdx cmpq $ 0 , - 7 2 (% rbp ) js . L 7 3 cmpq % rdx , - 7 2 (% rbp ) jl . L 1 0 5 . L 7 3 : movq - 7 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 0 5 : movq - 7 0 4 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq % rcx , (% rax ) . LBE 8 4 : . LBE 8 3 : . LBB 8 5 : addq $ 1 , % rbx . L 7 2 : . LBE 8 5 : cmpq % r 1 2 , % rbx jl . L 1 1 0 . LBE 8 0 : . LBE 7 9 : . LBE 7 8 : movl $ 0 , % edx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 7 3 6 (% rbp ) movq $ 0 , - 7 2 8 (% rbp ) movq $ 0 , - 7 2 0 (% rbp ) call go . heap . NewFibHeap movq % rax , - 8 0 (% rbp ) call go . heap . NewFibHeap movq % rax , - 8 8 (% rbp ) . LBB 8 6 : movq $ 0 , - 9 6 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) . LBB 8 7 : . LBB 8 8 : . LBB 8 9 : movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) movq - 6 3 2 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 8 9 : jmp . L 7 7 . L 1 1 1 : . LBB 9 0 : nop . LBE 9 0 : . LBB 9 1 : . LBB 9 2 : movq - 6 3 2 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 7 8 cmpq % rax , % r 1 2 jge . L 7 8 movq - 6 4 0 (% rbp ), % rdx movq % r 1 2 , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax . LBE 9 2 : . LBB 9 3 : movq % r 1 2 , - 9 6 (% rbp ) movq % rax , - 1 0 4 (% rbp ) . LBE 9 3 : . LBB 9 4 : . LBB 9 5 : movq - 9 6 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax jl . L 7 9 jmp . L 1 0 7 . L 7 8 : . LBE 9 5 : . LBE 9 4 : . LBB 9 9 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 7 9 : . LBE 9 9 : . LBB 1 0 0 : . LBB 9 8 : . LBB 9 6 : leaq int .. d (% rip ), % rbx movq % rbx , - 8 8 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 0 (% rbp ) movq - 6 0 0 (% rbp ), % rdx movq - 1 0 4 (% rbp ), % rax movq % rax , (% rdx ) movq - 6 0 0 (% rbp ), % rax movq % rax , - 8 7 2 (% rbp ) movq % rbx , - 8 6 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 8 (% rbp ) movq - 6 0 8 (% rbp ), % rdx movq - 1 0 4 (% rbp ), % rax movq % rax , (% rdx ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 8 5 6 (% rbp ) movq - 8 8 0 (% rbp ), % rax movq - 8 7 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rdi movq % rdx , % r 8 movq - 8 6 4 (% rbp ), % rax movq - 8 5 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq - 8 0 (% rbp ), % rax movq % rdi , % rcx movq % rax , % rdi call go . heap . FibHeap . Insert jmp . L 8 1 . L 1 0 7 : . LBE 9 6 : . LBB 9 7 : leaq int .. d (% rip ), % rax movq % rax , - 8 4 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 8 4 (% rbp ) movq - 5 8 4 (% rbp ), % rdx movq - 1 0 4 (% rbp ), % rax movq % rax , (% rdx ) movq - 5 8 4 (% rbp ), % rax movq % rax , - 8 4 0 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 9 2 (% rbp ) movq - 5 9 2 (% rbp ), % rdx movq - 1 0 4 (% rbp ), % rax movq % rax , (% rdx ) movq - 5 9 2 (% rbp ), % rax movq % rax , % r 1 5 movq - 8 4 8 (% rbp ), % rax movq - 8 4 0 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rdi movq % rdx , % r 8 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rcx , % rsi movq - 8 8 (% rbp ), % rax movq % rdi , % rcx movq % rax , % rdi call go . heap . FibHeap . Insert . L 8 1 : . LBE 9 7 : . LBE 9 8 : . LBE 1 0 0 : . LBE 9 1 : . LBB 1 0 1 : addq $ 1 , % r 1 2 . L 7 7 : . LBE 1 0 1 : cmpq % r 1 3 , % r 1 2 jl . L 1 1 1 . LBE 8 8 : . LBE 8 7 : . LBE 8 6 : movq - 8 8 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . heap . FibHeap . Union movq % rax , - 8 0 (% rbp ) movq $ 0 , - 8 8 (% rbp ) . LBB 1 0 2 : . LBB 1 0 3 : jmp . L 8 4 . L 1 1 2 : . LBB 1 0 4 : nop . LBE 1 0 4 : . LBB 1 0 5 : movq - 8 0 (% rbp ), % rax movq % rax , % rdi call go . heap . FibHeap . ExtractMin movq % rax , - 1 1 2 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq - 5 6 8 (% rbp ), % rbx movq - 1 1 2 (% rbp ), % rax movq 5 6 (% rax ), % rdx movq 4 8 (% rax ), % rax movq % rax , % rsi leaq int .. d (% rip ), % rcx cmpq % rcx , % rsi je . L 8 5 leaq type .. interface . 4 . 5 (% rip ), % rdx movq % rax , % rsi leaq int .. d (% rip ), % rdi call runtime . panicdottype @ PLT . L 8 5 : movq % rdx , % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rcx movq - 5 6 0 (% rbp ), % rsi movq % rcx , % rdx movq % rsi , % rax cmpq % rax , % rdx jbe . L 8 6 . LBB 1 0 6 : movq - 5 7 6 (% rbp ), % rax leaq - 2 4 0 (% rbp ), % rdi movq % rcx , % r 9 movq % rsi , % r 8 movq % rbx , % rcx movq % rax , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 7 3 6 (% rbp ) movq % rdx , - 7 2 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 7 2 0 (% rbp ) . LBE 1 0 6 : jmp . L 8 7 . L 8 6 : . LBB 1 0 7 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 0 (% rbp ), % rdx movq % rax , - 7 3 6 (% rbp ) movq % rcx , - 7 2 8 (% rbp ) movq % rdx , - 7 2 0 (% rbp ) . L 8 7 : . LBE 1 0 7 : movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq - 5 7 6 (% rbp ), % rdx movq % rbx , % rax salq $ 3 , % rax addq % rdx , % rax movq % r 1 2 , (% rax ) . L 8 4 : . LBE 1 0 5 : movq - 8 0 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax jg . L 1 1 2 . LBE 1 0 3 : . LBE 1 0 2 : leaq imt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. sort . IntSlice (% rip ), % rax movq % rax , - 8 3 2 (% rbp ) leaq sort . IntSlice .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 5 2 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 0 . LBB 1 0 8 : movq - 5 5 2 (% rbp ), % rcx movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 2 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 0 8 : jmp . L 9 1 . L 9 0 : . LBB 1 0 9 : movq - 5 5 2 (% rbp ), % rcx leaq - 5 4 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq sort . IntSlice .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 1 : . LBE 1 0 9 : movq - 5 5 2 (% rbp ), % rax movq % rax , - 8 2 4 (% rbp ) movq - 8 3 2 (% rbp ), % rax movq - 8 2 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call sort . Reverse @ PLT movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call sort . Sort @ PLT . LBB 1 1 0 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 8 1 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 8 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 2 . LBB 1 1 1 : movq - 4 8 8 (% rbp ), % rcx movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 6 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 1 1 : jmp . L 9 3 . L 9 2 : . LBB 1 1 2 : movq - 4 8 8 (% rbp ), % rcx leaq - 4 8 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 3 : . LBE 1 1 2 : movq - 4 8 8 (% rbp ), % rax movq % rax , - 8 0 8 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 8 0 0 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 2 0 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 4 . LBB 1 1 3 : movq - 5 2 0 (% rbp ), % rcx movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 1 3 : jmp . L 9 5 . L 9 4 : . LBB 1 1 4 : movq - 5 2 0 (% rbp ), % rcx leaq - 5 1 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 5 : . LBE 1 1 4 : movq - 5 2 0 (% rbp ), % rax movq % rax , - 7 9 2 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % rax movq - 8 1 6 (% rbp ), % rdx movq - 8 0 8 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT xorl $ 1 , % eax testb % al , % al je . L 7 1 . LBB 1 1 5 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 9 2 8 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 5 6 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 7 . LBB 1 1 6 : movq - 4 5 6 (% rbp ), % rcx movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 3 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 1 6 : jmp . L 9 8 . L 9 7 : . LBB 1 1 7 : movq - 4 5 6 (% rbp ), % rax leaq - 4 4 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 8 : . LBE 1 1 7 : movq - 4 5 6 (% rbp ), % rax movq % rax , - 9 2 0 (% rbp ) movdqa - 9 2 8 (% rbp ), % xmm 0 movups % xmm 0 , - 4 1 6 (% rbp ) leaq - 4 1 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 1 , - 2 0 0 (% rbp ) movq $ 1 , - 1 9 2 (% rbp ) leaq . LC 2 2 3 (% rip ), % rax movq % rax , - 7 8 4 (% rbp ) movq $ 9 , - 7 7 6 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 9 2 (% rbp ) pushq - 2 0 0 (% rbp ) pushq - 2 0 8 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 9 1 2 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 9 . LBB 1 1 8 : movq - 3 9 2 (% rbp ), % rcx movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 6 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 1 8 : jmp . L 1 0 0 . L 9 9 : . LBB 1 1 9 : movq - 3 9 2 (% rbp ), % rax leaq - 3 8 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 0 : . LBE 1 1 9 : movq - 3 9 2 (% rbp ), % rax movq % rax , - 9 0 4 (% rbp ) movdqa - 9 1 2 (% rbp ), % xmm 1 movups % xmm 1 , - 3 5 2 (% rbp ) leaq - 3 5 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq . LC 2 2 4 (% rip ), % rax movq % rax , - 7 6 8 (% rbp ) movq $ 1 0 , - 7 6 0 (% rbp ) movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq % r 1 2 , - 3 3 6 (% rbp ) movq % r 1 3 , - 3 2 8 (% rbp ) movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 8 9 6 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 9 6 (% rbp ) leaq - 3 3 6 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 1 . LBB 1 2 0 : movq - 2 9 6 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 2 0 : jmp . L 1 0 2 . L 1 0 1 : . LBB 1 2 1 : movq - 2 9 6 (% rbp ), % rax leaq - 2 8 8 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 2 : . LBE 1 2 1 : movq - 2 9 6 (% rbp ), % rax movq % rax , - 8 8 8 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movdqa - 8 9 6 (% rbp ), % xmm 2 movups % xmm 2 , - 2 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 3 . LBB 1 2 2 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 2 2 : jmp . L 1 0 4 . L 1 0 3 : . LBB 1 2 3 : movq - 2 6 4 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 4 : . LBE 1 2 3 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 1 , - 1 3 6 (% rbp ) movq $ 1 , - 1 2 8 (% rbp ) movq - 7 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rax , % rdi call testing . T . Log .. stub @ PLT addq $ 3 2 , % rsp movq - 7 4 4 (% rbp ), % rax movq % rax , % rdi call testing . T . Fail .. stub @ PLT . L 7 1 : . LBE 1 1 5 : . LBE 1 1 0 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 0 movl $ 1 6 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 3 6 , % rsp movb $ 0 , - 4 9 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 1 5 2 (% rbp ) leaq go . leetcode 0 4 5 7 . circularArrayLoop .. func 1 (% rip ), % rcx leaq 1 6 (% rbp ), % rsi leaq - 1 5 2 (% rbp ), % rdx movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq % rax , - 1 2 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq % rcx , (% rax ) movq % rsi , 8 (% rax ) movq % rdx , 1 6 (% rax ) movq - 1 2 0 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBB 3 : movq $ 0 , - 7 2 (% rbp ) movq $ 0 , - 8 0 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 3 9 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 1 0 4 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rbx , - 7 2 (% rbp ) movq % rax , - 8 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : cmpq $ 0 , - 8 0 (% rbp ) je . L 3 5 jmp . L 2 7 . L 3 : . LBE 1 2 : . LBE 1 1 : . LBB 3 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : . LBE 3 5 : . LBB 3 6 : movq - 7 2 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rdx movq - 7 2 (% rbp ), % rax movq - 6 4 (% rbp ), % r 1 0 movq % rax , % rdi call *% rdx . LVL 1 : movq % rax , - 4 8 (% rbp ) . LBB 1 4 : . LBB 1 5 : jmp . L 7 . L 3 7 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : . LBB 1 8 : movq - 4 0 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jne . L 8 . LBB 1 9 : . LBB 2 0 : movq - 6 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rdx movq - 4 0 (% rbp ), % rax movq - 6 4 (% rbp ), % r 1 0 movq % rax , % rdi call *% rdx . LVL 2 : cmpq % rax , - 4 0 (% rbp ) je . L 3 6 . LBE 2 0 : . LBB 2 2 : movb $ 1 , - 4 9 (% rbp ) movzbl - 4 9 (% rbp ), % eax jmp . L 2 6 . L 8 : . LBE 2 2 : . LBE 1 9 : . LBE 1 8 : . LBB 2 5 : movq - 6 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rdx movq - 4 0 (% rbp ), % rax movq - 6 4 (% rbp ), % r 1 0 movq % rax , % rdi call *% rdx . LVL 3 : movq % rax , % r 1 2 movq - 6 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rdx movq - 4 8 (% rbp ), % rax movq - 6 4 (% rbp ), % r 1 0 movq % rax , % rdi call *% rdx . LVL 4 : movq % rax , % rdx movq - 6 4 (% rbp ), % rax movq (% rax ), % rax movq - 6 4 (% rbp ), % r 1 0 movq % rdx , % rdi call *% rax . LVL 5 : movq % r 1 2 , - 4 0 (% rbp ) movq % rax , - 4 8 (% rbp ) . L 7 : . LBE 2 5 : . LBE 1 7 : . LBB 2 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 2 cmpq % rax , - 4 8 (% rbp ) jl . L 2 8 . L 1 2 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq 1 6 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax imulq - 8 0 (% rbp ), % rax testq % rax , % rax setg % al testb % al , % al je . L 1 4 . LBB 2 8 : movq - 6 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rdx movq - 4 8 (% rbp ), % rax movq - 6 4 (% rbp ), % r 1 0 movq % rax , % rdi call *% rdx . LVL 6 : movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 5 cmpq % rdx , % rax jl . L 2 9 . L 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax imulq - 8 0 (% rbp ), % rax testq % rax , % rax setg % al . L 1 4 : . LBE 2 8 : . LBE 2 7 : testb % al , % al jne . L 3 7 jmp . L 1 0 . L 3 6 : . LBB 2 9 : . LBB 2 6 : . LBB 2 4 : . LBB 2 3 : . LBB 2 1 : nop . L 1 0 : . LBE 2 1 : . LBE 2 3 : . LBE 2 4 : . LBE 2 6 : . LBE 2 9 : . LBE 1 5 : . LBE 1 4 : movq - 7 2 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 3 0 : . LBB 3 1 : jmp . L 1 8 . L 3 8 : . LBB 3 2 : nop . LBE 3 2 : . LBB 3 3 : movq - 6 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rdx movq - 4 0 (% rbp ), % rax movq - 6 4 (% rbp ), % r 1 0 movq % rax , % rdi call *% rdx . LVL 7 : movq % rax , - 8 8 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 9 cmpq % rax , - 4 0 (% rbp ) jl . L 3 1 . L 1 9 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 0 , (% rax ) movq - 8 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . L 1 8 : . LBE 3 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 1 cmpq % rax , - 4 0 (% rbp ) jl . L 3 2 . L 2 1 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax imulq - 8 0 (% rbp ), % rax testq % rax , % rax jg . L 3 8 jmp . L 6 . L 3 5 : . LBE 3 1 : . LBE 3 0 : . LBB 3 4 : . LBB 1 3 : nop . L 6 : . LBE 1 3 : . LBE 3 4 : . LBE 3 6 : . LBE 8 : . LBB 3 7 : addq $ 1 , % rbx . L 2 : . LBE 3 7 : cmpq % r 1 3 , % rbx jl . L 3 9 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 3 8 : movb $ 0 , - 4 9 (% rbp ) movzbl - 4 9 (% rbp ), % eax . L 2 6 : . LBE 3 8 : . LBE 2 : addq $ 1 3 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 7 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 7 4 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 9 6 , % rsp movq % rdi , - 5 6 8 (% rbp ) leaq type ... 6 4 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 string . 2 . go . Solution . input 2 . 0 string . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 3 6 (% rbp ) leaq . LC 3 9 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 5 2 8 (% rbp ) movq % r 1 3 , - 5 2 0 (% rbp ) leaq . LC 4 0 (% rip ), % r 1 4 movl $ 1 , % r 1 5 d movq % r 1 4 , - 5 1 2 (% rbp ) movq % r 1 5 , - 5 0 4 (% rbp ) leaq . LC 4 1 (% rip ), % rax movq % rax , - 7 3 6 (% rbp ) movq $ 1 , - 7 2 8 (% rbp ) movdqa - 7 3 6 (% rbp ), % xmm 0 movups % xmm 0 , - 4 9 6 (% rbp ) movb $ 0 , - 4 8 0 (% rbp ) leaq . LC 3 9 (% rip ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 8 , - 7 1 2 (% rbp ) movdqa - 7 2 0 (% rbp ), % xmm 1 movups % xmm 1 , - 4 7 2 (% rbp ) leaq . LC 4 2 (% rip ), % rbx movq % rbx , - 7 0 4 (% rbp ) movq $ 2 , - 6 9 6 (% rbp ) movdqa - 7 0 4 (% rbp ), % xmm 2 movups % xmm 2 , - 4 5 6 (% rbp ) leaq . LC 4 3 (% rip ), % rdi movq % rdi , - 6 8 8 (% rbp ) movq $ 2 , - 6 8 0 (% rbp ) movdqa - 6 8 8 (% rbp ), % xmm 3 movups % xmm 3 , - 4 4 0 (% rbp ) movb $ 0 , - 4 2 4 (% rbp ) movq % rax , - 6 7 2 (% rbp ) movq $ 8 , - 6 6 4 (% rbp ) movdqa - 6 7 2 (% rbp ), % xmm 4 movups % xmm 4 , - 4 1 6 (% rbp ) movq % rbx , - 6 5 6 (% rbp ) movq $ 2 , - 6 4 8 (% rbp ) movdqa - 6 5 6 (% rbp ), % xmm 5 movups % xmm 5 , - 4 0 0 (% rbp ) leaq . LC 4 4 (% rip ), % rdi movq % rdi , - 6 4 0 (% rbp ) movq $ 3 , - 6 3 2 (% rbp ) movdqa - 6 4 0 (% rbp ), % xmm 6 movups % xmm 6 , - 3 8 4 (% rbp ) movb $ 1 , - 3 6 8 (% rbp ) movq % rax , - 6 2 4 (% rbp ) movq $ 8 , - 6 1 6 (% rbp ) movdqa - 6 2 4 (% rbp ), % xmm 7 movups % xmm 7 , - 3 6 0 (% rbp ) movq % rdi , - 6 0 8 (% rbp ) movq $ 3 , - 6 0 0 (% rbp ) movdqa - 6 0 8 (% rbp ), % xmm 0 movups % xmm 0 , - 3 4 4 (% rbp ) leaq . LC 4 5 (% rip ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 3 , - 5 8 4 (% rbp ) movdqa - 5 9 2 (% rbp ), % xmm 1 movups % xmm 1 , - 3 2 8 (% rbp ) movb $ 1 , - 3 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 5 3 6 (% rbp ), % rax movq - 5 2 8 (% rbp ), % rcx movq - 5 2 0 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 5 1 2 (% rbp ), % rcx movq - 5 0 4 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 4 9 6 (% rbp ), % rcx movq - 4 8 8 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 4 8 0 (% rbp ), % rcx movq - 4 7 2 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 4 6 4 (% rbp ), % rcx movq - 4 5 6 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 1 4 4 (% rax ) movq % rbx , 1 5 2 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 1 6 0 (% rax ) movq % rbx , 1 6 8 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 1 7 6 (% rax ) movq % rbx , 1 8 4 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 1 9 2 (% rax ) movq % rbx , 2 0 0 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 2 0 8 (% rax ) movq % rbx , 2 1 6 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 5 3 6 (% rbp ), % rax leaq - 5 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 string . 2 . go . Solution . input 2 . 0 string . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 5 3 6 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 4 , - 5 5 2 (% rbp ) movq $ 4 , - 5 4 4 (% rbp ) . LBB 4 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 string . 2 . go . Solution . input 2 . 0 string . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 3 2 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 4 0 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 3 , % rax subq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 3 0 4 (% rbp ) movq % rdi , - 2 9 6 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 8 8 (% rbp ) movq % rdi , - 2 8 0 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 4 8 (% rax ), % rax movq % rax , - 2 5 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 2 0 8 (% rbp ), % rsi movq - 2 0 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 1 6 0 (% rbp ), % rdx movq % rdx , 4 8 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 string . 2 . go . Solution . input 2 . 0 string . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 4 6 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 string . 2 . go . Solution . input 2 . 0 string . 2 . go . Solution . expect . 0 bool . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . input 1 . 0 string . 2 . go . Solution . input 2 . 0 string . 2 . go . Solution . expect . 0 bool . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 5 6 8 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 6 9 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 1 0 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 1 0 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 0 1 6 , % rsp movq % rdi , - 1 0 0 0 (% rbp ) leaq type ... 6 5 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 5 6 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 8 4 8 (% rbp ) movq $ 2 , - 8 4 0 (% rbp ) leaq . LC 2 4 (% rip ), % rax movq % rax , - 8 3 2 (% rbp ) movq $ 4 , - 8 2 4 (% rbp ) leaq . LC 2 5 (% rip ), % rax movq % rax , - 8 1 6 (% rbp ) movq $ 6 , - 8 0 8 (% rbp ) leaq . LC 2 6 (% rip ), % rax movq % rax , - 8 0 0 (% rbp ) movq $ 1 , - 7 9 2 (% rbp ) leaq . LC 2 7 (% rip ), % rax movq % rax , - 7 8 4 (% rbp ) movq $ 1 , - 7 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 8 5 6 (% rbp ), % rax movq - 8 4 8 (% rbp ), % rcx movq - 8 4 0 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 8 3 2 (% rbp ), % rcx movq - 8 2 4 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 8 1 6 (% rbp ), % rcx movq - 8 0 8 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 8 0 0 (% rbp ), % rcx movq - 7 9 2 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 7 8 4 (% rbp ), % rcx movq - 7 7 6 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 8 5 6 (% rbp ), % rax leaq - 8 4 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 5 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 8 5 6 (% rbp ), % rax movq % rax , - 6 8 8 (% rbp ) movq $ 5 , - 6 8 0 (% rbp ) movq $ 5 , - 6 7 2 (% rbp ) movq $ 5 , - 6 6 4 (% rbp ) movq $ 3 , - 6 5 6 (% rbp ) movq $ 4 , - 6 4 8 (% rbp ) leaq type ... 6 3 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 6 0 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 7 5 2 (% rbp ) movq $ 2 , - 7 4 4 (% rbp ) leaq . LC 2 7 (% rip ), % rax movq % rax , - 7 3 6 (% rbp ) movq $ 1 , - 7 2 8 (% rbp ) leaq . LC 2 6 (% rip ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 1 , - 7 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 7 6 0 (% rbp ), % rax movq - 7 5 2 (% rbp ), % rcx movq - 7 4 4 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 7 3 6 (% rbp ), % rcx movq - 7 2 8 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 7 2 0 (% rbp ), % rcx movq - 7 1 2 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 7 6 0 (% rbp ), % rax leaq - 7 5 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 7 6 0 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) movq $ 3 , - 6 3 2 (% rbp ) movq $ 3 , - 6 2 4 (% rbp ) movq $ 1 , - 6 1 6 (% rbp ) movq $ 1 , - 6 0 8 (% rbp ) movq $ 2 , - 6 0 0 (% rbp ) leaq type ... 6 0 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 9 6 (% rbp ) movq - 6 9 6 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 0 , - 5 8 4 (% rbp ) movq $ 0 , - 5 7 6 (% rbp ) movq $ 0 , - 5 6 8 (% rbp ) movq $ 0 , - 5 6 0 (% rbp ) movq $ 0 , - 5 5 2 (% rbp ) leaq - 6 8 8 (% rbp ), % rax movq % rax , - 8 8 0 (% rbp ) movq $ 3 , - 8 7 2 (% rbp ) movq $ 3 , - 8 6 4 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 2 8 (% rip ), % rax movq % rax , - 1 0 2 4 (% rbp ) movq $ 6 9 , - 1 0 1 6 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 1 0 2 4 (% rbp ), % rcx movq - 1 0 1 6 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) . LBB 6 : movq $ 0 , - 9 4 4 (% rbp ) movq $ 0 , - 9 3 6 (% rbp ) movq $ 0 , - 9 2 8 (% rbp ) movq $ 0 , - 9 2 0 (% rbp ) movq $ 0 , - 9 1 2 (% rbp ) movq $ 0 , - 9 0 4 (% rbp ) . LBB 7 : . LBB 8 : . LBB 9 : movq - 8 8 0 (% rbp ), % rax movq - 8 7 2 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 8 6 4 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 5 6 (% rbp ), % rax movq % rax , - 1 0 2 4 (% rbp ) movl $ 0 , % ebx . LBE 9 : jmp . L 6 . L 1 5 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 4 5 6 (% rbp ), % rax testq % rbx , % rbx js . L 7 cmpq % rax , % rbx jge . L 7 movq - 4 6 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 5 1 2 (% rbp ) movq % rdi , - 5 0 4 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 4 9 6 (% rbp ) movq % rdi , - 4 8 8 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) . LBE 1 2 : . LBB 1 3 : movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 9 4 4 (% rbp ) movq % rdx , - 9 3 6 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 9 2 8 (% rbp ) movq % rdx , - 9 2 0 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 9 1 2 (% rbp ) movq % rdx , - 9 0 4 (% rbp ) . LBE 1 3 : . LBB 1 4 : movq - 9 0 4 (% rbp ), % rax movq % rax , - 8 8 8 (% rbp ) movq - 9 4 4 (% rbp ), % rax movq - 9 3 6 (% rbp ), % rdx movq % rax , - 9 9 2 (% rbp ) movq % rdx , - 9 8 4 (% rbp ) movq - 9 2 8 (% rbp ), % rax movq - 9 2 0 (% rbp ), % rdx movq % rax , - 9 7 6 (% rbp ) movq % rdx , - 9 6 8 (% rbp ) movq - 9 1 2 (% rbp ), % rax movq % rax , - 9 6 0 (% rbp ) movq - 9 6 0 (% rbp ), % rdx movq - 9 6 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 7 6 (% rbp ) pushq - 9 8 4 (% rbp ) pushq - 9 9 2 (% rbp ) movq % rdx , % rsi movq % rax , % rdi call go . leetcode . findMaxForm addq $ 3 2 , % rsp movq % rax , - 1 0 0 8 (% rbp ) leaq go . leetcode .. go . leetcode . para 4 7 4 .. d (% rip ), % rax movq % rax , - 1 0 5 6 (% rbp ) leaq go . leetcode .. go . leetcode . para 4 7 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 9 9 2 (% rbp ), % rax movq - 9 8 4 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 9 7 6 (% rbp ), % rax movq - 9 6 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 9 6 0 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 8 jmp . L 1 3 . L 7 : . LBE 1 4 : . LBB 1 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 8 : . LBE 1 7 : . LBB 1 8 : . LBB 1 5 : movq - 3 6 0 (% rbp ), % rax movq - 3 5 2 (% rbp ), % rsi movq - 3 4 4 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 3 3 6 (% rbp ), % rsi movq - 3 2 8 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 3 2 0 (% rbp ), % rdx movq % rdx , 3 2 (% rax ) . LBE 1 5 : jmp . L 1 0 . L 1 3 : . LBB 1 6 : movq - 3 6 0 (% rbp ), % rax leaq - 3 5 2 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 4 7 4 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 6 : movq - 3 6 0 (% rbp ), % rax movq % rax , - 1 0 4 8 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 1 0 4 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 1 0 0 8 (% rbp ), % rdi movq % rdi , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 1 0 3 2 (% rbp ) movdqa - 1 0 5 6 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 1 0 4 0 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 2 9 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) . LBE 1 8 : . LBE 1 1 : . LBB 1 9 : addq $ 1 , % rbx . L 6 : . LBE 1 9 : cmpq - 1 0 2 4 (% rbp ), % rbx jl . L 1 5 . LBE 8 : . LBE 7 : . LBE 6 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 3 0 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 5 6 6 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 3 : ret . L 5 6 6 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 2 4 (% rbp ) movq % rdx , % rcx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq - 4 8 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . linkedlist . NewNode movq % rax , - 8 (% rbp ) . LBB 5 1 8 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rdx addq $ 1 , % rdx movq % rdx , (% rax ) . LBE 5 1 8 : . LBB 5 1 9 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax jne . L 5 5 2 . LBB 5 2 0 : movq - 8 (% rbp ), % rax addq $ 1 6 , % rax movq - 8 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 5 5 3 . LBB 5 2 1 : movq % rdx , (% rax ) . LBE 5 2 1 : jmp . L 5 5 4 . L 5 5 3 : . LBB 5 2 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 5 5 4 : . LBE 5 2 2 : movq - 8 (% rbp ), % rax addq $ 2 4 , % rax movq - 8 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 5 5 5 . LBB 5 2 3 : movq % rdx , (% rax ) . LBE 5 2 3 : jmp . L 5 5 6 . L 5 5 5 : . LBB 5 2 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 5 5 6 : . LBE 5 2 4 : movq - 2 4 (% rbp ), % rax addq $ 8 , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 5 7 . LBB 5 2 5 : movq - 8 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 5 2 5 : jmp . L 5 5 1 . L 5 5 7 : . LBB 5 2 6 : movq - 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 5 5 1 . L 5 5 2 : . LBE 5 2 6 : . LBE 5 2 0 : . LBB 5 2 7 : movq - 8 (% rbp ), % rax addq $ 1 6 , % rax movq - 2 4 (% rbp ), % rdx movq 8 (% rdx ), % rdx movq 1 6 (% rdx ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 5 5 9 . LBB 5 2 8 : movq % rdx , (% rax ) . LBE 5 2 8 : jmp . L 5 6 0 . L 5 5 9 : . LBB 5 2 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 5 6 0 : . LBE 5 2 9 : movq - 8 (% rbp ), % rax addq $ 2 4 , % rax movq - 2 4 (% rbp ), % rdx movq 8 (% rdx ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 5 6 1 . LBB 5 3 0 : movq % rdx , (% rax ) . LBE 5 3 0 : jmp . L 5 6 2 . L 5 6 1 : . LBB 5 3 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 5 6 2 : . LBE 5 3 1 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq 1 6 (% rax ), % rax addq $ 2 4 , % rax movq - 8 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 5 6 3 . LBB 5 3 2 : movq % rdx , (% rax ) . LBE 5 3 2 : jmp . L 5 6 4 . L 5 6 3 : . LBB 5 3 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 5 6 4 : . LBE 5 3 3 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax addq $ 1 6 , % rax movq - 8 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 5 6 5 . LBB 5 3 4 : movq % rdx , (% rax ) . LBE 5 3 4 : jmp . L 5 5 1 . L 5 6 5 : . LBB 5 3 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 5 5 1 : . LBE 5 3 5 : . LBE 5 2 7 : . LBE 5 1 9 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 6 2 movl $ 2 0 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 6 2 : pushq % rbp movq % rsp , % rbp subq $ 1 9 2 , % rsp movb $ 0 , - 6 5 (% rbp ) . LBB 2 : . LBB 3 : movq $ 0 , - 8 (% rbp ) . LBB 4 : jmp . L 2 . L 5 9 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 7 : movq $ 1 , - 3 2 (% rbp ) . LBB 8 : jmp . L 3 . L 4 9 : . LBB 9 : . LBB 1 0 : . LBB 1 1 : . LBB 1 2 : . LBB 1 3 : . LBB 1 4 : movq - 2 4 (% rbp ), % rax shrq $ 6 3 , % rax . L 4 : . LBE 1 4 : . LBE 1 3 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 5 . LBB 1 5 : movq 2 4 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) setge % al . L 5 : . LBE 1 5 : . LBE 1 2 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 6 . LBB 1 7 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 7 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 7 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax cmpq % rax , - 2 4 (% rbp ) setge % al . L 6 : . LBE 1 7 : . LBE 1 1 : testb % al , % al jne . L 5 8 . LBE 1 0 : . LBB 2 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 0 cmpq % rax , - 1 6 (% rbp ) jl . L 4 5 . L 1 0 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq 1 6 (% rbp ), % rcx movq - 1 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 2 cmpq % rax , - 2 4 (% rbp ) jl . L 4 6 . L 1 2 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq - 1 6 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 4 cmpq % rdx , % rax jl . L 4 7 . L 1 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : movq 1 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq - 1 5 2 (% rbp ), % rdx testq % rax , % rax js . L 1 6 cmpq % rdx , % rax jl . L 4 8 . L 1 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : movq - 1 9 2 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq - 1 6 0 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx je . L 1 8 . LBB 2 2 : . LBB 2 3 : movb $ 0 , - 6 5 (% rbp ) movzbl - 6 5 (% rbp ), % eax jmp . L 1 9 . L 1 8 : . LBE 2 3 : . LBE 2 2 : . LBE 2 1 : . LBE 9 : . LBB 2 6 : addq $ 1 , - 3 2 (% rbp ) . L 3 : . LBE 2 6 : . LBB 2 7 : nop . LBE 2 7 : . LBB 2 8 : . LBB 2 4 : movq - 1 6 (% rbp ), % rax leaq 1 (% rax ), % rdx movq - 2 4 (% rbp ), % rax addq $ 1 , % rax movq % rdx , - 1 6 (% rbp ) movq % rax , - 2 4 (% rbp ) . LBE 2 4 : . LBB 2 5 : . LBB 1 9 : . LBB 1 8 : . LBB 1 6 : movq - 1 6 (% rbp ), % rax shrq $ 6 3 , % rax movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 4 jmp . L 4 9 . L 5 8 : . LBE 1 6 : . LBE 1 8 : . LBE 1 9 : . LBB 2 0 : nop . LBE 2 0 : . LBE 2 5 : . LBE 2 8 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 2 9 : addq $ 1 , - 8 (% rbp ) . L 2 : . LBE 2 9 : movq 2 4 (% rbp ), % rax cmpq % rax , - 8 (% rbp ) jl . L 5 9 . LBE 4 : . LBE 3 : . LBB 3 0 : movq $ 1 , - 4 0 (% rbp ) . LBB 3 1 : jmp . L 2 3 . L 6 1 : . LBB 3 2 : nop . LBE 3 2 : . LBB 3 3 : movq $ 0 , - 4 8 (% rbp ) movq - 4 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 3 4 : movq $ 1 , - 6 4 (% rbp ) . LBB 3 5 : jmp . L 2 4 . L 5 6 : . LBB 3 6 : . LBB 3 7 : . LBB 3 8 : . LBB 3 9 : . LBB 4 0 : . LBB 4 1 : movq - 5 6 (% rbp ), % rax shrq $ 6 3 , % rax . L 2 5 : . LBE 4 1 : . LBE 4 0 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 6 . LBB 4 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 4 8 (% rbp ) setge % al . L 2 6 : . LBE 4 2 : . LBE 3 9 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 7 . LBB 4 4 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 8 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax cmpq % rax , - 5 6 (% rbp ) setge % al . L 2 7 : . LBE 4 4 : . LBE 3 8 : testb % al , % al jne . L 6 0 . LBE 3 7 : . LBB 4 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 3 1 cmpq % rax , - 4 8 (% rbp ) jl . L 5 2 . L 3 1 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : movq 1 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 3 3 cmpq % rax , - 5 6 (% rbp ) jl . L 5 3 . L 3 3 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 3 : movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 3 5 cmpq % rdx , % rax jl . L 5 4 . L 3 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : movq 1 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 8 0 (% rbp ) movq - 5 6 (% rbp ), % rax subq $ 1 , % rax movq - 8 8 (% rbp ), % rdx testq % rax , % rax js . L 3 7 cmpq % rdx , % rax jl . L 5 5 . L 3 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 5 : movq - 1 2 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq - 9 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx je . L 3 9 . LBB 4 9 : . LBB 5 0 : movb $ 0 , - 6 5 (% rbp ) movzbl - 6 5 (% rbp ), % eax jmp . L 1 9 . L 3 9 : . LBE 5 0 : . LBE 4 9 : . LBE 4 8 : . LBE 3 6 : . LBB 5 3 : addq $ 1 , - 6 4 (% rbp ) . L 2 4 : . LBE 5 3 : . LBB 5 4 : nop . LBE 5 4 : . LBB 5 5 : . LBB 5 1 : movq - 4 8 (% rbp ), % rax leaq 1 (% rax ), % rdx movq - 5 6 (% rbp ), % rax addq $ 1 , % rax movq % rdx , - 4 8 (% rbp ) movq % rax , - 5 6 (% rbp ) . LBE 5 1 : . LBB 5 2 : . LBB 4 6 : . LBB 4 5 : . LBB 4 3 : movq - 4 8 (% rbp ), % rax shrq $ 6 3 , % rax movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 5 jmp . L 5 6 . L 6 0 : . LBE 4 3 : . LBE 4 5 : . LBE 4 6 : . LBB 4 7 : nop . LBE 4 7 : . LBE 5 2 : . LBE 5 5 : . LBE 3 5 : . LBE 3 4 : . LBE 3 3 : . LBB 5 6 : addq $ 1 , - 4 0 (% rbp ) . L 2 3 : . LBE 5 6 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 4 1 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 1 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 6 1 . LBE 3 1 : . LBE 3 0 : . LBB 5 7 : movb $ 1 , - 6 5 (% rbp ) movzbl - 6 5 (% rbp ), % eax . L 1 9 : . LBE 5 7 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 5 movl $ 2 1 6 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 9 2 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 6 : . LBB 7 : jmp . L 5 . L 3 4 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq 4 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 6 cmpq % rax , - 2 4 (% rbp ) jl . L 2 7 . L 6 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq 4 0 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) je . L 3 3 . LBE 1 0 : . LBE 9 : . LBB 1 3 : addq $ 1 , - 2 4 (% rbp ) . L 5 : . LBE 1 3 : movq 4 8 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 3 4 jmp . L 9 . L 3 3 : . LBB 1 4 : . LBB 1 2 : . LBB 1 1 : nop . L 9 : . LBE 1 1 : . LBE 1 2 : . LBE 1 4 : . LBE 7 : . LBE 6 : . LBB 1 5 : movq - 2 4 (% rbp ), % rax leaq 1 (% rax ), % rdi movq 3 2 (% rbp ), % rax testq % rdi , % rdi js . L 1 1 cmpq % rax , % rdi jg . L 1 1 testq % rdi , % rdi jg . L 1 2 jmp . L 2 9 . L 1 1 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 2 9 : movq % rdi , % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 1 2 : movq 5 6 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 4 cmpq % rax , - 2 4 (% rbp ) jg . L 1 4 cmpq $ 0 , - 2 4 (% rbp ) jns . L 1 5 jmp . L 3 0 . L 1 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 3 0 : movq - 2 4 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 5 : movq 4 0 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 2 4 (% rbp ), % rax movq % rax , - 1 5 2 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 3 , % rax addq % rdx , % rax movq % rax , - 1 2 8 (% rbp ) leaq - 1 (% rdi ), % rax movq % rax , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 1 2 (% rbp ) pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) call main . buildTree addq $ 4 8 , % rsp movq % rax , % r 1 2 movq - 2 4 (% rbp ), % rax addq $ 1 , % rax movq 3 2 (% rbp ), % rdx testq % rax , % rax js . L 1 7 cmpq % rdx , % rax jle . L 3 1 . L 1 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 3 1 : movq - 2 4 (% rbp ), % rdx addq $ 1 , % rdx movq 5 6 (% rbp ), % rcx testq % rdx , % rdx js . L 1 9 cmpq % rcx , % rdx jle . L 3 2 . L 1 9 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 3 2 : movq 4 0 (% rbp ), % rsi movq 5 6 (% rbp ), % rcx cmpq % rcx , % rdx je . L 2 1 movq % rdx , % rcx salq $ 3 , % rcx jmp . L 2 2 . L 2 1 : movl $ 0 , % ecx . L 2 2 : addq % rsi , % rcx movq % rcx , - 9 6 (% rbp ) movq 4 8 (% rbp ), % rcx subq % rdx , % rcx movq % rcx , - 8 8 (% rbp ) movq 5 6 (% rbp ), % rcx subq % rdx , % rcx movq % rcx , - 8 0 (% rbp ) movq 1 6 (% rbp ), % rcx movq 3 2 (% rbp ), % rdx cmpq % rdx , % rax je . L 2 3 movq % rax , % rdx salq $ 3 , % rdx jmp . L 2 4 . L 2 3 : movl $ 0 , % edx . L 2 4 : addq % rcx , % rdx movq % rdx , - 6 4 (% rbp ) movq 2 4 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 4 8 (% rbp ) pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) pushq - 4 8 (% rbp ) pushq - 5 6 (% rbp ) pushq - 6 4 (% rbp ) call main . buildTree addq $ 4 8 , % rsp movq % rax , % rbx leaq main . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 4 0 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq % r 1 2 , - 1 8 4 (% rbp ) movq % rbx , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 5 . LBB 1 6 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 6 : jmp . L 2 6 . L 2 5 : . LBB 1 7 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq main . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 6 : . LBE 1 7 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 3 : . LBE 1 5 : . LBE 2 : leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 6 movl $ 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 1 5 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 8 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax addq $ 1 , % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , - 3 2 (% rbp ) . LBB 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 cmpq % rax , - 3 2 (% rbp ) jl . L 1 2 . L 3 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) jne . L 5 . LBB 8 : . LBB 9 : movq - 3 2 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 6 . L 5 : . LBE 9 : . LBE 8 : . LBE 7 : . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 7 cmpq % rax , - 3 2 (% rbp ) jl . L 1 3 . L 7 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) jle . L 9 . LBB 1 1 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 8 (% rbp ) . LBE 1 1 : jmp . L 2 . L 9 : . LBB 1 2 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . L 2 : . LBE 1 2 : . LBE 1 0 : . LBE 6 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jle . L 1 5 . LBE 4 : . LBE 3 : . LBB 1 3 : movq - 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 6 : . LBE 1 3 : . LBE 2 : leave ret
leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 7 movl $ 3 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 7 2 , % rsp movq % rdi , - 2 9 6 (% rbp ) leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) leaq . LC 3 4 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 2 5 6 (% rbp ) movq % r 1 3 , - 2 4 8 (% rbp ) movq $ 1 9 , - 2 4 0 (% rbp ) movb $ 1 , - 2 3 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 3 . LBB 2 4 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 2 4 : jmp . L 2 4 . L 2 3 : . LBB 2 5 : movq - 2 6 4 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 4 : . LBE 2 5 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 1 , - 2 8 0 (% rbp ) movq $ 1 , - 2 7 2 (% rbp ) . LBB 2 6 : movq $ 0 , - 4 0 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 (% rbp ) . LBB 2 7 : . LBB 2 8 : . LBB 2 9 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 2 9 : jmp . L 2 5 . L 3 6 : . LBB 3 0 : nop . LBE 3 0 : . LBB 3 1 : . LBB 3 2 : movq - 1 8 4 (% rbp ), % rax testq % rbx , % rbx js . L 2 6 cmpq % rax , % rbx jge . L 2 6 movq - 1 9 2 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) . LBE 3 2 : . LBB 3 3 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq % rbx , - 4 0 (% rbp ) movq - 4 8 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 2 7 jmp . L 3 4 . L 2 6 : . LBE 3 3 : . LBB 3 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : . LBE 3 6 : . LBB 3 7 : . LBB 3 4 : movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) jmp . L 2 9 . L 3 4 : . LBE 3 4 : . LBB 3 5 : leaq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 9 : . LBE 3 5 : . LBE 3 7 : . LBB 3 8 : movq - 4 0 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 4 8 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 2 8 (% rbp ) movq % rdi , - 1 2 0 (% rbp ) leaq . LC 3 5 (% rip ), % rcx movq % rcx , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) leaq go . Solution . TestSolution 2 .. func 1 (% rip ), % r 1 4 movq - 4 8 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 bool . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq % r 1 4 , - 6 4 (% rbp ) movq % r 1 2 , - 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 0 . LBB 3 9 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 3 9 : jmp . L 3 1 . L 3 0 : . LBB 4 0 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 bool . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 1 : . LBE 4 0 : movq - 7 2 (% rbp ), % r 1 2 leaq - 1 2 8 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 2 9 6 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 3 8 : . LBE 3 1 : . LBB 4 1 : addq $ 1 , % rbx . L 2 5 : . LBE 4 1 : cmpq % r 1 3 , % rbx jl . L 3 6 . LBE 2 8 : . LBE 2 7 : . LBE 2 6 : addq $ 2 7 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 2 : leaq - 8 7 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 5 movl $ 8 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 : ret . L 3 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 2 4 , % rsp movq % rdi , - 8 0 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 9 6 (% rbp ) movq - 6 9 6 (% rbp ), % rax movq $ 4 , (% rax ) movq $ 9 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 6 9 6 (% rbp ), % rax movq % rax , - 6 7 2 (% rbp ) movq $ 3 , - 6 6 4 (% rbp ) movq $ 3 , - 6 5 6 (% rbp ) movq $ 1 0 , - 6 4 8 (% rbp ) movq $ 3 , - 6 4 0 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 8 8 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 5 , 1 6 (% rax ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 6 3 2 (% rbp ) movq $ 3 , - 6 2 4 (% rbp ) movq $ 3 , - 6 1 6 (% rbp ) movq $ 1 0 , - 6 0 8 (% rbp ) movq $ 5 , - 6 0 0 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 8 0 (% rbp ) movq - 6 8 0 (% rbp ), % rax movq $ 6 0 8 6 4 , (% rax ) movq $ 2 5 1 7 6 , 8 (% rax ) movq $ 2 7 2 4 9 , 1 6 (% rax ) movq $ 2 1 2 9 6 , 2 4 (% rax ) movq $ 2 0 2 0 4 , 3 2 (% rax ) movq - 6 8 0 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 5 , - 5 8 4 (% rbp ) movq $ 5 , - 5 7 6 (% rbp ) movq $ 5 6 8 0 3 , - 5 6 8 (% rbp ) movq $ 1 1 3 6 1 , - 5 6 0 (% rbp ) leaq - 6 7 2 (% rbp ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 3 , - 7 1 2 (% rbp ) movq $ 3 , - 7 0 4 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 1 8 (% rip ), % rax movq % rax , - 8 3 2 (% rbp ) movq $ 7 0 , - 8 2 4 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 8 3 2 (% rbp ), % rcx movq - 8 2 4 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) . LBB 3 3 : movq $ 0 , - 7 6 8 (% rbp ) movq $ 0 , - 7 6 0 (% rbp ) movq $ 0 , - 7 5 2 (% rbp ) movq $ 0 , - 7 4 4 (% rbp ) movq $ 0 , - 7 3 6 (% rbp ) . LBB 3 4 : . LBB 3 5 : . LBB 3 6 : movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 5 6 (% rbp ), % rax movq % rax , - 8 3 2 (% rbp ) movl $ 0 , % ebx . LBE 3 6 : jmp . L 2 5 . L 3 4 : . LBB 3 7 : nop . LBE 3 7 : . LBB 3 8 : . LBB 3 9 : movq - 4 5 6 (% rbp ), % rax testq % rbx , % rbx js . L 2 6 cmpq % rax , % rbx jge . L 2 6 movq - 4 6 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 2 , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 5 1 2 (% rbp ) movq % rdi , - 5 0 4 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 4 9 6 (% rbp ) movq % rdi , - 4 8 8 (% rbp ) movq 3 2 (% rax ), % rax movq % rax , - 4 8 0 (% rbp ) . LBE 3 9 : . LBB 4 0 : movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 7 6 8 (% rbp ) movq % rdx , - 7 6 0 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 7 5 2 (% rbp ) movq % rdx , - 7 4 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 7 3 6 (% rbp ) . LBE 4 0 : . LBB 4 1 : movq - 7 3 6 (% rbp ), % rax movq % rax , - 7 2 8 (% rbp ) movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , - 8 0 0 (% rbp ) movq % rdx , - 7 9 2 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , - 7 8 4 (% rbp ) movq % rdx , - 7 7 6 (% rbp ) movq - 7 7 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 7 8 4 (% rbp ) pushq - 7 9 2 (% rbp ) pushq - 8 0 0 (% rbp ) movq % rax , % rdi call go . leetcode . findBestValue addq $ 3 2 , % rsp movq % rax , - 8 1 6 (% rbp ) leaq go . leetcode .. go . leetcode . para 1 3 0 0 .. d (% rip ), % rax movq % rax , - 8 6 4 (% rbp ) leaq go . leetcode .. go . leetcode . para 1 3 0 0 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 2 7 jmp . L 3 2 . L 2 6 : . LBE 4 1 : . LBB 4 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : . LBE 4 4 : . LBB 4 5 : . LBB 4 2 : movq - 3 6 0 (% rbp ), % rcx movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 4 2 : jmp . L 2 9 . L 3 2 : . LBB 4 3 : movq - 3 6 0 (% rbp ), % rax leaq - 3 5 2 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 1 3 0 0 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 9 : . LBE 4 3 : movq - 3 6 0 (% rbp ), % rax movq % rax , - 8 5 6 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 8 4 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 8 1 6 (% rbp ), % rdi movq % rdi , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 8 4 0 (% rbp ) movdqa - 8 6 4 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 8 4 8 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 1 9 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) . LBE 4 5 : . LBE 3 8 : . LBB 4 6 : addq $ 1 , % rbx . L 2 5 : . LBE 4 6 : cmpq - 8 3 2 (% rbp ), % rbx jl . L 3 4 . LBE 3 5 : . LBE 3 4 : . LBE 3 3 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 2 0 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 6 movl $ 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 6 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 subq $ 6 4 , % rsp movq % rdi , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rax , % rdi call go . testing . common . Fail movq - 7 2 (% rbp ), % rax movb $ 1 , 1 8 (% rax ) leaq string .. d (% rip ), % r 1 2 leaq go .. C 2 5 6 (% rip ), % r 1 3 movq % r 1 2 , - 6 4 (% rbp ) movq % r 1 3 , - 5 6 (% rbp ) leaq - 6 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq $ 1 , - 4 0 (% rbp ) movq $ 1 , - 3 2 (% rbp ) movq - 7 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 3 2 (% rbp ) pushq - 4 0 (% rbp ) pushq - 4 8 (% rbp ) movq % rax , % rdi call go . testing . common . Error addq $ 3 2 , % rsp leaq - 1 6 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 3 movl $ 3 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 6 3 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 3 6 0 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 2 : movq - 3 6 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 5 2 (% rbp ) movq % rbx , - 3 4 4 (% rbp ) movq % rbx , - 3 3 6 (% rbp ) . LBB 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 6 0 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 5 6 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 3 4 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 cmpq % rax , - 2 4 (% rbp ) jl . L 4 5 . L 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 3 5 2 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 3 2 0 (% rbp ) movq % rbx , - 3 1 2 (% rbp ) movq % rbx , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 3 0 4 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 . LBB 7 : movq - 3 2 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 6 . L 5 : . LBE 7 : . LBB 8 : movq - 3 2 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 : . LBE 8 : movq - 3 4 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 7 cmpq % rax , - 2 4 (% rbp ) jl . L 4 6 . L 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq - 3 5 2 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 9 cmpq % rax , - 2 4 (% rbp ) jge . L 9 movq - 2 8 8 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 1 , (% rax ) . LBE 6 : . LBB 9 : addq $ 1 , - 2 4 (% rbp ) jmp . L 2 . L 9 : . LBE 9 : . LBB 1 0 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 0 : movq - 2 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jl . L 6 0 . LBE 4 : . LBE 3 : . LBB 1 1 : movq $ 2 , - 3 2 (% rbp ) . LBB 1 2 : jmp . L 1 2 . L 6 2 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : . LBB 1 5 : movq $ 0 , - 4 0 (% rbp ) . LBB 1 6 : jmp . L 1 3 . L 6 1 : . LBB 1 7 : nop . LBE 1 7 : . LBB 1 8 : movq - 4 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax addq % rdx , % rax subq $ 1 , % rax movq % rax , - 6 4 (% rbp ) . LBB 1 9 : movq - 3 6 0 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 4 cmpq % rax , - 4 0 (% rbp ) jl . L 4 8 . L 1 4 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : movq - 3 6 0 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 6 cmpq % rax , - 6 4 (% rbp ) jl . L 4 9 . L 1 6 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : movq - 3 6 8 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % edx movq - 3 6 8 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax addq % rcx , % rax movzbl (% rax ), % eax cmpb % al , % dl jne . L 1 8 . LBB 2 0 : movq - 3 4 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 9 cmpq % rax , - 4 0 (% rbp ) jl . L 5 0 . L 1 9 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 0 : movq - 3 5 2 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 2 1 cmpq % rax , - 6 4 (% rbp ) jl . L 5 1 . L 2 1 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : movq - 4 0 (% rbp ), % rax addq $ 1 , % rax movq - 3 4 4 (% rbp ), % rdx testq % rax , % rax js . L 2 3 cmpq % rdx , % rax jl . L 5 2 . L 2 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : movq - 3 5 2 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 6 4 (% rbp ), % rax subq $ 1 , % rax movq - 2 1 6 (% rbp ), % rdx testq % rax , % rax js . L 2 5 cmpq % rdx , % rax jge . L 2 5 movq - 2 2 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 2 5 6 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax addq $ 2 , % rdx movq % rdx , (% rax ) . LBE 2 0 : jmp . L 2 6 . L 2 5 : . LBB 2 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : . LBE 2 1 : . LBB 2 2 : movq - 4 0 (% rbp ), % rax addq $ 1 , % rax movq - 3 4 4 (% rbp ), % rdx testq % rax , % rax js . L 2 7 cmpq % rdx , % rax jl . L 5 3 . L 2 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 3 : movq - 3 5 2 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 2 9 cmpq % rax , - 6 4 (% rbp ) jl . L 5 4 . L 2 9 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : movq - 3 4 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 1 cmpq % rax , - 4 0 (% rbp ) jl . L 5 5 . L 3 1 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 5 : movq - 3 5 2 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 6 4 (% rbp ), % rax subq $ 1 , % rax movq - 1 5 2 (% rbp ), % rdx testq % rax , % rax js . L 3 3 cmpq % rdx , % rax jge . L 3 3 movq - 1 6 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 1 9 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call go . leetcode 0 5 1 6 . max movq % rax , % rsi movq - 3 4 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) jns . L 3 4 jmp . L 3 5 . L 3 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : cmpq % rax , - 4 0 (% rbp ) jl . L 5 6 . L 3 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 6 : movq - 3 5 2 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 3 7 cmpq % rax , - 6 4 (% rbp ) jge . L 3 7 movq - 1 2 8 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) jmp . L 2 6 . L 3 7 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : . LBE 2 2 : . LBE 1 9 : . LBE 1 8 : . LBB 2 3 : addq $ 1 , - 4 0 (% rbp ) . L 1 3 : . LBE 2 3 : movq - 4 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax addq % rdx , % rax subq $ 1 , % rax cmpq % rax , - 5 6 (% rbp ) jg . L 6 1 . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBB 2 4 : addq $ 1 , - 3 2 (% rbp ) . L 1 2 : . LBE 2 4 : movq - 3 2 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jle . L 6 2 . LBE 1 2 : . LBE 1 1 : . LBB 2 5 : movq - 3 4 4 (% rbp ), % rax testq % rax , % rax jg . L 4 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 2 : movq - 3 5 2 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 8 0 (% rbp ) movq - 5 6 (% rbp ), % rax subq $ 1 , % rax movq - 8 8 (% rbp ), % rdx testq % rax , % rax js . L 4 3 cmpq % rdx , % rax jge . L 4 3 movq - 9 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax jmp . L 5 9 . L 4 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 9 : . LBE 2 5 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 7 1 movl $ 1 5 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 7 1 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 3 6 , % rsp movq $ 0 , - 7 2 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) . LBB 3 : . LBB 4 : movq 1 6 (% rbp ), % rax testq % rax , % rax sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 . LBB 5 : cmpq $ 0 , - 8 0 (% rbp ) sete % al . L 2 : . LBE 5 : . LBE 4 : testb % al , % al je . L 3 . LBB 6 : . LBB 7 : movq $ 0 , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax jmp . L 4 8 . L 3 : . LBE 7 : . LBE 6 : . LBE 3 : movq - 8 0 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 1 2 (% rbp ) movq % rbx , - 1 0 4 (% rbp ) movq % rbx , - 9 6 (% rbp ) movq - 8 0 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 4 4 (% rbp ) movq % rbx , - 1 3 6 (% rbp ) movq % rbx , - 1 2 8 (% rbp ) movq - 1 0 4 (% rbp ), % rax testq % rax , % rax jg . L 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 5 : movq - 1 1 2 (% rbp ), % rax movq $- 1 , (% rax ) movq - 8 0 (% rbp ), % rax subq $ 1 , % rax movq - 1 3 6 (% rbp ), % rdx testq % rax , % rax js . L 6 cmpq % rdx , % rax jl . L 4 9 . L 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : movq - 1 4 4 (% rbp ), % rdx salq $ 3 , % rax addq % rax , % rdx movq - 8 0 (% rbp ), % rax movq % rax , (% rdx ) . LBB 8 : movq $ 1 , - 3 2 (% rbp ) . LBB 9 : jmp . L 8 . L 6 7 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 4 0 (% rbp ) . LBB 1 2 : . LBB 1 3 : jmp . L 9 . L 6 6 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 0 cmpq % rax , - 4 0 (% rbp ) jl . L 5 0 . L 1 0 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 0 : movq - 1 1 2 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 4 0 (% rbp ) . L 9 : . LBE 1 5 : . LBB 1 6 : movq - 4 0 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax testb % al , % al je . L 1 2 . LBB 1 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 3 cmpq % rax , - 4 0 (% rbp ) jl . L 5 1 . L 1 3 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 5 cmpq % rax , - 3 2 (% rbp ) jl . L 5 2 . L 1 5 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setge % al . L 1 2 : . LBE 1 7 : . LBE 1 6 : testb % al , % al jne . L 6 6 . LBE 1 3 : . LBE 1 2 : movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 9 cmpq % rax , - 3 2 (% rbp ) jl . L 5 4 . L 1 9 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : movq - 1 1 2 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 4 0 (% rbp ), % rax movq % rax , (% rdx ) . LBE 1 1 : . LBB 1 8 : addq $ 1 , - 3 2 (% rbp ) . L 8 : . LBE 1 8 : movq - 3 2 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jl . L 6 7 . LBE 9 : . LBE 8 : . LBB 1 9 : movq - 8 0 (% rbp ), % rax subq $ 2 , % rax movq % rax , - 4 8 (% rbp ) . LBB 2 0 : jmp . L 2 3 . L 6 9 : . LBB 2 1 : nop . LBE 2 1 : . LBB 2 2 : movq - 4 8 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 5 6 (% rbp ) . LBB 2 3 : . LBB 2 4 : jmp . L 2 4 . L 6 8 : . LBB 2 5 : nop . LBE 2 5 : . LBB 2 6 : movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 2 5 cmpq % rax , - 5 6 (% rbp ) jl . L 5 6 . L 2 5 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 6 : movq - 1 4 4 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) . L 2 4 : . LBE 2 6 : . LBB 2 7 : movq - 5 6 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax setl % al testb % al , % al je . L 2 7 . LBB 2 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 2 8 cmpq % rax , - 5 6 (% rbp ) jl . L 5 7 . L 2 8 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 3 0 cmpq % rax , - 4 8 (% rbp ) jl . L 5 8 . L 3 0 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 8 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setge % al . L 2 7 : . LBE 2 8 : . LBE 2 7 : testb % al , % al jne . L 6 8 . LBE 2 4 : . LBE 2 3 : movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 3 4 cmpq % rax , - 4 8 (% rbp ) jl . L 6 0 . L 3 4 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 0 : movq - 1 4 4 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 5 6 (% rbp ), % rax movq % rax , (% rdx ) . LBE 2 2 : . LBB 2 9 : subq $ 1 , - 4 8 (% rbp ) . L 2 3 : . LBE 2 9 : cmpq $ 0 , - 4 8 (% rbp ) jns . L 6 9 . LBE 2 0 : . LBE 1 9 : movq $ 0 , - 2 4 (% rbp ) . LBB 3 0 : movq $ 0 , - 6 4 (% rbp ) . LBB 3 1 : jmp . L 3 8 . L 7 0 : . LBB 3 2 : nop . LBE 3 2 : . LBB 3 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 3 9 cmpq % rax , - 6 4 (% rbp ) jl . L 6 2 . L 3 9 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 2 : movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 4 1 cmpq % rax , - 6 4 (% rbp ) jl . L 6 3 . L 4 1 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 3 : movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 4 3 cmpq % rax , - 6 4 (% rbp ) jl . L 6 4 . L 4 3 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 4 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq - 1 4 4 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq - 1 1 2 (% rbp ), % rsi movq - 6 4 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rcx subq % rcx , % rdx subq $ 1 , % rdx imulq % rdx , % rax movq % rax , - 8 8 (% rbp ) . LBB 3 4 : movq - 8 8 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax jle . L 4 5 . LBB 3 5 : movq - 8 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . L 4 5 : . LBE 3 5 : . LBE 3 4 : . LBE 3 3 : . LBB 3 6 : addq $ 1 , - 6 4 (% rbp ) . L 3 8 : . LBE 3 6 : movq - 6 4 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jl . L 7 0 . LBE 3 1 : . LBE 3 0 : . LBB 3 7 : movq - 2 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax . L 4 8 : . LBE 3 7 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 4 1 movl $ 2 3 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 9 : ret . L 1 4 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 0 0 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 9 3 : leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) movq $ 0 , - 2 0 8 (% rbp ) . LBB 9 4 : movq $ 0 , - 1 9 2 (% rbp ) . LBB 9 5 : . LBB 9 6 : . LBB 9 7 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 9 7 : jmp . L 1 2 5 . L 1 4 0 : . LBB 9 8 : nop . LBE 9 8 : . LBB 9 9 : . LBB 1 0 0 : movq - 1 6 8 (% rbp ), % rax testq % rbx , % rbx js . L 1 2 6 cmpq % rax , % rbx jge . L 1 2 6 movq - 1 7 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 0 0 : . LBB 1 0 1 : movq % rax , - 1 9 2 (% rbp ) . LBE 1 0 1 : . LBB 1 0 2 : movq - 2 1 6 (% rbp ), % rdx leaq go . Solution . lengthOfLIS 2 .. func 1 (% rip ), % rdi leaq - 2 2 4 (% rbp ), % rsi leaq - 1 9 2 (% rbp ), % rcx movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq % rax , - 1 2 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq % rdi , (% rax ) movq % rsi , 8 (% rax ) movq % rcx , 1 6 (% rax ) movq - 1 2 0 (% rbp ), % rax movq % rax , % rsi movq % rdx , % rdi call sort . Search @ PLT movq % rax , - 4 8 (% rbp ) . LBB 1 0 3 : movq - 2 1 6 (% rbp ), % rax cmpq % rax , - 4 8 (% rbp ) je . L 1 2 7 jmp . L 1 3 7 . L 1 2 6 : . LBE 1 0 3 : . LBE 1 0 2 : . LBB 1 0 9 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 7 : . LBE 1 0 9 : . LBB 1 1 0 : . LBB 1 0 8 : . LBB 1 0 4 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 2 9 . LBB 1 0 5 : movq - 1 1 2 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) . LBE 1 0 5 : jmp . L 1 3 0 . L 1 2 9 : . LBB 1 0 6 : movq - 1 1 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rcx , - 2 2 4 (% rbp ) movq % rax , - 2 1 6 (% rbp ) movq % rdx , - 2 0 8 (% rbp ) . L 1 3 0 : . LBE 1 0 6 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 1 9 2 (% rbp ), % rax movq % rax , (% rdx ) . LBE 1 0 4 : jmp . L 1 3 1 . L 1 3 7 : . LBB 1 0 7 : movq - 2 1 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 3 2 cmpq % rax , - 4 8 (% rbp ) jl . L 1 3 8 . L 1 3 2 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 8 : movq - 2 2 4 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 1 9 2 (% rbp ), % rax movq % rax , (% rdx ) . L 1 3 1 : . LBE 1 0 7 : . LBE 1 0 8 : . LBE 1 1 0 : . LBE 9 9 : . LBB 1 1 1 : addq $ 1 , % rbx . L 1 2 5 : . LBE 1 1 1 : cmpq % r 1 3 , % rbx jl . L 1 4 0 . LBE 9 6 : . LBE 9 5 : . LBE 9 4 : . LBB 1 1 2 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 1 1 2 : . LBE 9 3 : addq $ 2 0 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 7 5 movl $ 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 3 : ret . L 7 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 subq $ 6 4 , % rsp movq % rdi , - 5 6 (% rbp ) movq % rdx , % rcx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq $ 0 , - 3 2 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 8 2 : movq go . streamingreadseeker . fSize (% rip ), % rdx movq go . streamingreadseeker . fSize (% rip ), % rsi movq - 5 6 (% rbp ), % rax movq % rdx , % rcx movl $ 0 , % edx movq % rax , % rdi call go . streamingreadseeker . seek movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) . LBB 8 3 : movq - 4 8 (% rbp ), % rax testq % rax , % rax je . L 7 2 . LBB 8 4 : . LBB 8 5 : movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx jmp . L 7 4 . L 7 2 : . LBE 8 5 : . LBE 8 4 : . LBE 8 3 : . LBB 8 6 : movl $ 0 , % r 1 2 d movl $ 0 , % r 1 3 d movq - 5 6 (% rbp ), % rax movq % r 1 2 , % rdx movq % r 1 3 , % rcx movl $ 1 , % esi movq % rax , % rdi call go . streamingreadseeker . read movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx . L 7 4 : . LBE 8 6 : . LBE 8 2 : addq $ 6 4 , % rsp popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 1 : leaq - 1 0 4 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 5 movl $ 1 0 4 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 0 0 0 , % rsp movq % rdi , - 8 5 6 (% rbp ) leaq . LC 1 4 (% rip ), % rax movl $ 2 , % edx movq % rax , - 8 0 0 (% rbp ) movq % rdx , - 7 9 2 (% rbp ) leaq . LC 1 5 (% rip ), % rcx movl $ 1 , % ebx movq % rcx , - 7 8 4 (% rbp ) movq % rbx , - 7 7 6 (% rbp ) movb $ 0 , - 7 6 8 (% rbp ) leaq . LC 1 4 (% rip ), % r 8 movl $ 2 , % r 9 d movq % r 8 , - 7 6 0 (% rbp ) movq % r 9 , - 7 5 2 (% rbp ) leaq . LC 1 6 (% rip ), % r 1 0 movl $ 2 , % r 1 1 d movq % r 1 0 , - 7 4 4 (% rbp ) movq % r 1 1 , - 7 3 6 (% rbp ) movb $ 1 , - 7 2 8 (% rbp ) leaq . LC 1 7 (% rip ), % r 1 2 movl $ 2 , % r 1 3 d movq % r 1 2 , - 7 2 0 (% rbp ) movq % r 1 3 , - 7 1 2 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 4 movl $ 2 , % r 1 5 d movq % r 1 4 , - 7 0 4 (% rbp ) movq % r 1 5 , - 6 9 6 (% rbp ) movb $ 1 , - 6 8 8 (% rbp ) leaq . LC 1 9 (% rip ), % rax movq % rax , - 9 7 6 (% rbp ) movq $ 3 , - 9 6 8 (% rbp ) movdqa - 9 7 6 (% rbp ), % xmm 0 movups % xmm 0 , - 6 8 0 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 9 6 0 (% rbp ) movq $ 5 , - 9 5 2 (% rbp ) movdqa - 9 6 0 (% rbp ), % xmm 1 movups % xmm 1 , - 6 6 4 (% rbp ) movb $ 1 , - 6 4 8 (% rbp ) leaq . LC 2 1 (% rip ), % rax movq % rax , - 9 4 4 (% rbp ) movq $ 1 1 , - 9 3 6 (% rbp ) movdqa - 9 4 4 (% rbp ), % xmm 2 movups % xmm 2 , - 6 4 0 (% rbp ) leaq . LC 2 2 (% rip ), % rax movq % rax , - 9 2 8 (% rbp ) movq $ 1 0 , - 9 2 0 (% rbp ) movdqa - 9 2 8 (% rbp ), % xmm 3 movups % xmm 3 , - 6 2 4 (% rbp ) movb $ 0 , - 6 0 8 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 9 1 2 (% rbp ) movq $ 0 , - 9 0 4 (% rbp ) movdqa - 9 1 2 (% rbp ), % xmm 4 movups % xmm 4 , - 6 0 0 (% rbp ) leaq . LC 2 4 (% rip ), % rax movq % rax , - 8 9 6 (% rbp ) movq $ 1 , - 8 8 8 (% rbp ) movdqa - 8 9 6 (% rbp ), % xmm 5 movups % xmm 5 , - 5 8 4 (% rbp ) movb $ 0 , - 5 6 8 (% rbp ) . LBB 6 : movq $ 0 , - 8 4 8 (% rbp ) movq $ 0 , - 8 4 0 (% rbp ) movq $ 0 , - 8 3 2 (% rbp ) movq $ 0 , - 8 2 4 (% rbp ) movq $ 0 , - 8 1 6 (% rbp ) . LBB 7 : . LBB 8 : . LBB 9 : movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movl $ 6 , % r 1 3 d movl $ 0 , % r 1 2 d . LBE 9 : jmp . L 1 1 . L 2 4 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : testq % r 1 2 , % r 1 2 js . L 1 2 cmpq $ 5 , % r 1 2 jg . L 1 2 movq % r 1 2 , % rax salq $ 2 , % rax addq % r 1 2 , % rax salq $ 3 , % rax leaq - 4 8 (% rbp ), % rbx addq % rbx , % rax leaq - 4 6 4 (% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq 3 2 (% rcx ), % rax movq % rax , - 5 2 8 (% rbp ) . LBE 1 2 : . LBB 1 3 : movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 8 4 8 (% rbp ) movq % rdx , - 8 4 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 8 3 2 (% rbp ) movq % rdx , - 8 2 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 8 1 6 (% rbp ) . LBE 1 3 : . LBB 1 4 : movq - 8 3 2 (% rbp ), % rax movq - 8 2 4 (% rbp ), % rdx movq - 8 4 8 (% rbp ), % rdi movq - 8 4 0 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call go . problem 1 0 . isMatch movb % al , - 4 9 (% rbp ) . LBB 1 5 : movzbl - 8 1 6 (% rbp ), % eax cmpb % al , - 4 9 (% rbp ) jne . L 1 3 jmp . L 1 4 . L 1 2 : . LBE 1 5 : . LBE 1 4 : . LBB 2 4 : movl $ 6 , % esi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : . LBE 2 4 : . LBB 2 5 : . LBB 2 3 : . LBB 1 6 : leaq string .. d (% rip ), % rax movq % rax , - 1 0 4 0 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 8 4 8 (% rbp ), % rax movq - 8 4 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 5 . LBB 1 7 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 6 . L 1 5 : . LBB 1 8 : movq - 2 3 2 (% rbp ), % rax leaq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 6 : . LBE 1 8 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 1 0 3 2 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 1 0 2 4 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 8 3 2 (% rbp ), % rax movq - 8 2 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 7 . LBB 1 9 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 9 : jmp . L 1 8 . L 1 7 : . LBB 2 0 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 8 : . LBE 2 0 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 1 0 1 6 (% rbp ) leaq bool .. d (% rip ), % rbx movq % rbx , - 1 0 0 8 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movzbl - 4 9 (% rbp ), % edx movb % dl , (% rax ) movq - 1 6 8 (% rbp ), % rax movq % rax , - 1 0 0 0 (% rbp ) movq % rbx , - 9 9 2 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movzbl - 8 1 6 (% rbp ), % edx movb % dl , (% rax ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 9 8 4 (% rbp ) leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movdqa - 1 0 4 0 (% rbp ), % xmm 6 movups % xmm 6 , - 1 4 4 (% rbp ) movdqa - 1 0 2 4 (% rbp ), % xmm 7 movups % xmm 7 , - 1 2 8 (% rbp ) movdqa - 1 0 0 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) movdqa - 9 9 2 (% rbp ), % xmm 1 movups % xmm 1 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 9 . LBB 2 1 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) . LBE 2 1 : jmp . L 2 0 . L 1 9 : . LBB 2 2 : movq - 1 5 2 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 0 : . LBE 2 2 : movq - 1 5 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 4 , - 7 2 (% rbp ) movq $ 4 , - 6 4 (% rbp ) leaq . LC 2 5 (% rip ), % rax movq % rax , - 8 8 0 (% rbp ) movq $ 2 8 , - 8 7 2 (% rbp ) movq - 8 8 0 (% rbp ), % rax movq - 8 7 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 8 5 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 1 4 : . LBE 1 6 : . LBE 2 3 : . LBE 2 5 : . LBE 1 1 : . LBB 2 6 : addq $ 1 , % r 1 2 . L 1 1 : . LBE 2 6 : cmpq % r 1 3 , % r 1 2 jl . L 2 4 . LBE 8 : . LBE 7 : . LBE 6 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 9 movl $ 3 4 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 9 6 , % rsp movq % rdi , - 3 1 2 (% rbp ) movq % rdx , % rcx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) . LBB 2 : movq - 3 2 8 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq 2 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) . LBB 3 : . LBB 4 : cmpq $ 0 , - 7 2 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 . LBB 5 : cmpq $ 0 , - 8 0 (% rbp ) sete % al . L 2 : . LBE 5 : . LBE 4 : testb % al , % al je . L 3 . LBB 6 : . LBB 7 : movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) movq - 3 1 2 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 2 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 3 : . LBE 7 : . LBE 6 : . LBE 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 5 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 8 (% rbp ) . LBB 8 : movq - 8 0 (% rbp ), % rax imulq - 8 8 (% rbp ), % rax cmpq % rax , - 7 2 (% rbp ) jge . L 6 . LBB 9 : . LBB 1 0 : movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) movq - 3 1 2 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 2 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 6 : . LBE 1 0 : . LBE 9 : . LBE 8 : movl $ 0 , % r 8 d movl $ 1 6 , % ecx movl $ 2 4 , % edx movl $ 0 , % esi leaq type .. map . 6 string . 7 int (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 9 6 (% rbp ) . LBB 1 1 : movq $ 0 , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) . LBB 1 2 : . LBB 1 3 : . LBB 1 4 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 1 4 : jmp . L 7 . L 3 4 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 8 cmpq % rax , % rbx jge . L 8 movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 1 7 : . LBB 1 8 : movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) . LBE 1 8 : . LBB 1 9 : . LBB 2 0 : movq - 2 8 8 (% rbp ), % r 1 2 movq - 2 8 0 (% rbp ), % r 1 3 movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq - 9 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 5 movq - 9 6 (% rbp ), % rax movq % r 1 2 , % rdx movq % r 1 3 , % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq % r 1 5 , (% rax ) . LBE 2 0 : . LBE 1 9 : . LBE 1 6 : . LBB 2 2 : addq $ 1 , % rbx jmp . L 7 . L 8 : . LBE 2 2 : . LBB 2 3 : . LBB 2 1 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 7 : . LBE 2 1 : . LBE 2 3 : cmpq % r 1 4 , % rbx jl . L 3 4 . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) . LBB 2 4 : movq $ 0 , - 5 6 (% rbp ) . LBB 2 5 : jmp . L 1 1 . L 3 8 : . LBB 2 6 : nop . LBE 2 6 : . LBB 2 7 : movl $ 0 , % r 8 d movl $ 1 6 , % ecx movl $ 2 4 , % edx movl $ 0 , % esi leaq type .. map . 6 string . 7 int (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 1 0 4 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 2 8 : . LBB 2 9 : jmp . L 1 2 . L 3 7 : . LBB 3 0 : nop . LBE 3 0 : . LBB 3 1 : movq - 6 4 (% rbp ), % rax imulq - 8 8 (% rbp ), % rax movq % rax , % rdx movq - 5 6 (% rbp ), % rax addq % rdx , % rax movq - 6 4 (% rbp ), % rdx addq $ 1 , % rdx movq % rdx , % rcx imulq - 8 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx leaq (% rcx ,% rdx ), % rdi movq - 3 2 8 (% rbp ), % rdx testq % rdi , % rdi js . L 1 3 cmpq % rdx , % rdi jg . L 1 3 testq % rax , % rax jns . L 1 4 jmp . L 1 5 . L 1 3 : movq % rdx , % rsi call runtime . goPanicSliceAlen @ PLT . L 1 4 : cmpq % rdi , % rax jg . L 1 5 movq - 3 3 6 (% rbp ), % rdx cmpq % rax , % rdi jne . L 1 6 jmp . L 3 1 . L 1 5 : movq % rdi , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 1 6 : movq % rax , % rcx jmp . L 1 8 . L 3 1 : movl $ 0 , % ecx . L 1 8 : addq % rcx , % rdx movq % rdx , - 3 0 4 (% rbp ) subq % rax , % rdi movq % rdi , % rdx movq % rdx , - 2 9 6 (% rbp ) . LBB 3 2 : movb $ 0 , - 1 0 5 (% rbp ) . LBB 3 3 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq - 9 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 2 _faststr @ PLT movl % edx , % eax movb % al , - 1 0 5 (% rbp ) . LBE 3 3 : cmpb $ 0 , - 1 0 5 (% rbp ) je . L 3 5 . LBB 3 4 : . LBB 3 5 : movq - 3 0 4 (% rbp ), % r 1 2 movq - 2 9 6 (% rbp ), % r 1 3 movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq - 1 0 4 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq (% rax ), % rax leaq 1 (% rax ), % rbx movq - 1 0 4 (% rbp ), % rax movq % r 1 2 , % rdx movq % r 1 3 , % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq % rbx , (% rax ) . LBE 3 5 : . LBB 3 6 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq - 1 0 4 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq % rax , % rbx movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq - 9 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq (% rbx ), % rdx movq (% rax ), % rax cmpq % rax , % rdx jg . L 3 6 . LBE 3 6 : . LBE 3 4 : . LBE 3 2 : addq $ 1 , - 6 4 (% rbp ) . L 1 2 : . LBE 3 1 : movq - 6 4 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jl . L 3 7 jmp . L 2 2 . L 3 5 : . LBB 4 2 : . LBB 4 1 : . LBB 3 9 : nop jmp . L 2 2 . L 3 6 : . LBE 3 9 : . LBB 4 0 : . LBB 3 8 : . LBB 3 7 : nop . L 2 2 : . LBE 3 7 : . LBE 3 8 : . LBE 4 0 : . LBE 4 1 : . LBE 4 2 : . LBE 2 9 : . LBE 2 8 : . LBB 4 3 : movq - 6 4 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jne . L 2 4 . LBB 4 4 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 5 . LBB 4 5 : movq - 1 7 6 (% rbp ), % rsi leaq - 1 4 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) . LBE 4 5 : jmp . L 2 6 . L 2 5 : . LBB 4 6 : movq - 1 7 6 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rdx movq % rcx , - 2 7 2 (% rbp ) movq % rax , - 2 6 4 (% rbp ) movq % rdx , - 2 5 6 (% rbp ) . L 2 6 : . LBE 4 6 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 5 6 (% rbp ), % rax movq % rax , (% rdx ) . L 2 4 : . LBE 4 4 : . LBE 4 3 : . LBE 2 7 : . LBB 4 7 : addq $ 1 , - 5 6 (% rbp ) . L 1 1 : . LBE 4 7 : movq - 8 0 (% rbp ), % rax imulq - 8 8 (% rbp ), % rax movq % rax , % rdx movq - 7 2 (% rbp ), % rax subq % rdx , % rax addq $ 1 , % rax cmpq % rax , - 5 6 (% rbp ) jl . L 3 8 . LBE 2 5 : . LBE 2 4 : . LBB 4 8 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 3 1 2 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 2 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 4 8 : . LBE 2 : movq - 3 1 2 (% rbp ), % rax addq $ 2 9 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 9 movl $ 1 3 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 9 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 2 0 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . LBB 3 : cmpq $ 0 , - 4 8 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq 1 6 (% rbp ), % rax movq (% rax ), % rbx leaq main . ListNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movq % rbx , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 . LBB 6 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 6 : jmp . L 6 . L 5 : . LBB 7 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq main . ListNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 : . LBE 7 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . LBB 8 : movq $ 1 , - 3 2 (% rbp ) . LBB 9 : jmp . L 7 . L 1 8 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 8 cmpq % rax , - 3 2 (% rbp ) jl . L 1 6 . L 8 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rbx leaq main . ListNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % rbx , - 8 0 (% rbp ) movq $ 0 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 . LBB 1 2 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 2 : jmp . L 1 1 . L 1 0 : . LBB 1 3 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq main . ListNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 1 : . LBE 1 3 : movq - 8 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 2 4 (% rbp ), % rax addq $ 8 , % rax movq - 6 4 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 1 2 . LBB 1 4 : movq % rdx , (% rax ) . LBE 1 4 : jmp . L 1 3 . L 1 2 : . LBB 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 3 : . LBE 1 5 : movq - 6 4 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . LBE 1 1 : . LBB 1 6 : addq $ 1 , - 3 2 (% rbp ) . L 7 : . LBE 1 6 : movq - 3 2 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 1 8 . LBE 9 : . LBE 8 : . LBB 1 7 : movq - 5 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 3 : . LBE 1 7 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 4 movl $ 3 7 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 2 8 , % rsp movq % rdi , - 3 2 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 2 0 (% rbp ) movq % rbx , - 3 1 2 (% rbp ) movq % rbx , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rax testq % rax , % rax jg . L 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq - 3 2 0 (% rbp ), % rax movq $ 0 , (% rax ) . LBB 3 : movq $ 0 , - 6 4 (% rbp ) . LBB 4 : jmp . L 3 . L 4 1 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 6 4 (% rbp ), % rax addq $ 1 , % rax movq - 3 1 2 (% rbp ), % rdx testq % rax , % rax js . L 4 cmpq % rdx , % rax jl . L 3 2 . L 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 6 4 (% rbp ) js . L 6 cmpq % rdx , - 6 4 (% rbp ) jl . L 3 3 . L 6 : movq - 6 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq - 3 1 2 (% rbp ), % rdx cmpq $ 0 , - 6 4 (% rbp ) js . L 8 cmpq % rdx , - 6 4 (% rbp ) jl . L 3 4 . L 8 : movq - 6 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq 1 6 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 3 2 0 (% rbp ), % rsi movq - 6 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rsi , % rdx movq (% rdx ), % rdx movq - 3 2 0 (% rbp ), % rsi salq $ 3 , % rax addq % rsi , % rax addq % rcx , % rdx movq % rdx , (% rax ) . LBE 6 : . LBB 7 : addq $ 1 , - 6 4 (% rbp ) . L 3 : . LBE 7 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 6 4 (% rbp ) jle . L 4 1 . LBE 4 : . LBE 3 : . LBB 8 : movq $ 0 , - 7 2 (% rbp ) . LBB 9 : jmp . L 1 2 . L 4 3 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq $ 0 , - 8 0 (% rbp ) . LBB 1 3 : jmp . L 1 3 . L 4 2 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 3 1 2 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 1 4 cmpq % rax , - 7 2 (% rbp ) jl . L 3 6 . L 1 4 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq - 3 1 2 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 1 6 cmpq % rax , - 8 0 (% rbp ) jl . L 3 7 . L 1 6 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 3 2 0 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq - 3 2 0 (% rbp ), % rcx movq - 8 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx subq % rdx , % rax cmpq % rax , - 3 2 8 (% rbp ) jne . L 1 8 . LBB 1 7 : movq 3 2 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 1 9 cmpq % rax , - 7 2 (% rbp ) jg . L 1 9 cmpq $ 0 , - 8 0 (% rbp ) jns . L 2 0 jmp . L 2 1 . L 1 9 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 2 0 : movq - 8 0 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jle . L 3 8 . L 2 1 : movq - 7 2 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 3 8 : leaq string .. d (% rip ), % r 1 2 leaq go .. C 1 1 (% rip ), % r 1 3 leaq int .. d (% rip ), % rbx movq % rbx , - 3 6 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq - 8 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 6 4 (% rbp ), % rax movq % rax , - 3 6 0 (% rbp ) movq % rbx , - 3 5 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 5 6 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) leaq type ... 6 . 7 int (% rip ), % r 1 4 leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax cmpq % rax , - 8 0 (% rbp ) je . L 2 3 movq - 8 0 (% rbp ), % rax salq $ 3 , % rax jmp . L 2 4 . L 2 3 : movl $ 0 , % eax . L 2 4 : addq % rdx , % rax movq % rax , - 2 4 0 (% rbp ) movq - 7 2 (% rbp ), % rax subq - 8 0 (% rbp ), % rax movq % rax , - 2 3 2 (% rbp ) movq 3 2 (% rbp ), % rax subq - 8 0 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 5 . LBB 1 8 : movq - 2 4 8 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 2 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 8 : jmp . L 2 6 . L 2 5 : . LBB 1 9 : movq - 2 4 8 (% rbp ), % rax leaq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 6 : . LBE 1 9 : movq - 2 4 8 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 2 , - 2 0 8 (% rbp ) movq % r 1 3 , - 2 0 0 (% rbp ) movdqa - 3 6 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 9 2 (% rbp ) movdqa - 3 5 2 (% rbp ), % xmm 1 movups % xmm 1 , - 1 7 6 (% rbp ) movq % r 1 4 , - 1 6 0 (% rbp ) movq % r 1 5 , - 1 5 2 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 4 , - 1 3 6 (% rbp ) movq $ 4 , - 1 2 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) addq $ 1 , - 5 6 (% rbp ) . L 1 8 : . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBB 2 0 : addq $ 1 , - 8 0 (% rbp ) . L 1 3 : . LBE 2 0 : movq - 8 0 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jl . L 4 2 . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 2 1 : addq $ 1 , - 7 2 (% rbp ) . L 1 2 : . LBE 2 1 : movq 2 4 (% rbp ), % rax cmpq % rax , - 7 2 (% rbp ) jle . L 4 3 . LBE 9 : . LBE 8 : movq - 5 6 (% rbp ), % rax . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 7 movl $ 7 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 7 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq % rdi , - 5 6 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) movq $ 0 , - 1 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 2 6 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : . LBB 8 : jmp . L 3 . L 2 4 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 4 cmpq % rax , - 1 6 (% rbp ) jl . L 1 9 . L 4 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq % rax , - 2 4 (% rbp ) addq $ 1 , - 1 6 (% rbp ) . L 3 : . LBE 1 0 : . LBB 1 1 : movq - 2 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax setl % al testb % al , % al je . L 6 . LBB 1 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) setl % al . L 6 : . LBE 1 2 : . LBE 1 1 : testb % al , % al jne . L 2 4 . LBE 8 : . LBE 7 : . LBB 1 3 : . LBB 1 4 : jmp . L 9 . L 2 5 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : . LBB 1 8 : cmpq $ 0 , - 3 2 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 0 . LBB 1 9 : movq - 1 6 (% rbp ), % rax subq - 8 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) setg % al . L 1 0 : . LBE 1 9 : . LBE 1 8 : testb % al , % al je . L 1 1 . LBB 2 0 : movq - 1 6 (% rbp ), % rax subq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . L 1 1 : . LBE 2 0 : . LBE 1 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 1 2 cmpq % rax , - 8 (% rbp ) jl . L 2 1 . L 1 2 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : movq 1 6 (% rbp ), % rdx movq - 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax subq % rax , - 2 4 (% rbp ) addq $ 1 , - 8 (% rbp ) . L 9 : . LBE 1 6 : . LBB 2 1 : movq - 2 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax setge % al testb % al , % al je . L 1 4 . LBB 2 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 8 (% rbp ) setl % al . L 1 4 : . LBE 2 2 : . LBE 2 1 : testb % al , % al jne . L 2 5 . L 2 : . LBE 1 4 : . LBE 1 3 : . LBE 6 : movq 2 4 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) jl . L 2 6 . LBE 4 : . LBE 3 : . LBB 2 3 : movq - 3 2 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 2 3 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 1 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 1 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) . LBB 6 : . LBB 7 : jmp . L 4 . L 1 0 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 8 (% rbp ), % rax movq (% rax ), % rdx movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax movq (% rax ), % rax cmpq % rax , % rdx jne . L 5 . LBB 1 1 : movq - 8 (% rbp ), % rax addq $ 8 , % rax movq - 8 (% rbp ), % rdx movq 8 (% rdx ), % rdx movq 8 (% rdx ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 6 . LBB 1 2 : movq % rdx , (% rax ) . LBE 1 2 : jmp . L 4 . L 6 : . LBB 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 4 . L 5 : . LBE 1 3 : . LBE 1 1 : . LBB 1 4 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) . L 4 : . LBE 1 4 : . LBE 1 0 : . LBE 9 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax jne . L 1 0 . LBE 7 : . LBE 6 : . LBB 1 5 : movq - 2 4 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax . L 3 : . LBE 1 5 : . LBE 2 : leave ret
. LFB 0 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 1 movl $ 3 7 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 2 8 , % rsp movq $ 0 , - 7 2 (% rbp ) . LBB 2 : call runtime . makemap_small @ PLT movq % rax , - 8 0 (% rbp ) . LBB 3 : movq $ 0 , - 3 6 8 (% rbp ) movq $ 0 , - 3 6 0 (% rbp ) movq $ 0 , - 3 5 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 9 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 9 6 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 3 0 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 2 0 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq $ 0 , - 6 4 (% rbp ) . LBB 1 2 : movq $ 0 , - 9 6 (% rbp ) . LBB 1 3 : . LBB 1 4 : . LBB 1 5 : movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % r 1 4 movl $ 0 , % r 1 2 d . LBE 1 5 : jmp . L 4 . L 3 : . LBE 1 4 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 2 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : . LBE 2 8 : . LBB 2 9 : . LBB 2 7 : . LBB 2 6 : . LBB 2 5 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : . LBB 1 8 : movq - 2 3 2 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 5 cmpq % rax , % r 1 2 jge . L 5 movq - 2 4 0 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 8 : . LBB 1 9 : movq % rax , - 9 6 (% rbp ) . LBE 1 9 : . LBB 2 0 : movq - 9 6 (% rbp ), % rax addq % rax , - 6 4 (% rbp ) . LBB 2 1 : movq - 6 4 (% rbp ), % rax movq % rax , - 2 1 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq (% rax ), % rdx movq - 8 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 5 leaq - 2 1 6 (% rbp ), % rax movq (% rax ), % rdx movq - 8 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 5 , (% rax ) . LBE 2 1 : . LBE 2 0 : . LBE 1 7 : . LBB 2 3 : addq $ 1 , % r 1 2 jmp . L 4 . L 5 : . LBE 2 3 : . LBB 2 4 : . LBB 2 2 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 2 2 : . LBE 2 4 : cmpq % r 1 4 , % r 1 2 jl . L 1 8 . LBE 2 5 : . LBE 2 6 : . LBE 2 7 : movq - 8 0 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , - 1 0 4 (% rbp ) leaq - 1 0 4 (% rbp ), % rdx movq (% rdx ), % rdx movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapdelete_fast 6 4 @ PLT . LBE 2 9 : . LBE 8 : . LBB 3 0 : addq $ 1 , % rbx . L 2 : . LBE 3 0 : cmpq % r 1 3 , % rbx jl . L 1 9 . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 5 6 (% rbp ) . LBB 3 1 : movq $ 0 , - 8 8 (% rbp ) . LBB 3 2 : . LBB 3 3 : . LBB 3 4 : leaq - 2 0 8 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 3 4 : jmp . L 1 0 . L 2 0 : . LBB 3 5 : nop . LBE 3 5 : . LBB 3 6 : . LBB 3 7 : movq - 2 0 8 (% rbp ), % rax movq (% rax ), % rax movq - 2 0 0 (% rbp ), % rax movq (% rax ), % rax . LBE 3 7 : . LBB 3 8 : movq % rax , - 8 8 (% rbp ) . LBE 3 8 : . LBB 3 9 : . LBB 4 0 : movq - 8 8 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jle . L 1 1 . LBB 4 1 : movq - 8 8 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . L 1 1 : . LBE 4 1 : . LBE 4 0 : . LBE 3 9 : . LBE 3 6 : . LBB 4 2 : leaq - 2 0 8 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 1 0 : . LBE 4 2 : movq - 2 0 8 (% rbp ), % rax testq % rax , % rax jne . L 2 0 . LBE 3 3 : . LBE 3 2 : . LBE 3 1 : . LBB 4 3 : movq 2 4 (% rbp ), % rax subq - 5 6 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax . LBE 4 3 : . LBE 2 : addq $ 3 2 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 9 movl $ 3 1 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 9 : pushq % rbp movq % rsp , % rbp subq $ 3 0 4 , % rsp movb $ 0 , - 1 (% rbp ) . LBB 2 5 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 0 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 0 : movq 1 6 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % rax testq % rax , % rax jg . L 2 1 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 1 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 2 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 2 : movq 1 6 (% rbp ), % rcx movq 2 4 (% rcx ), % rax movq 3 2 (% rcx ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq 4 0 (% rcx ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 3 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 3 : movq 2 4 (% rbp ), % rax cmpq $ 2 , % rax jg . L 2 4 movq % rax , % rsi movl $ 2 , % edi call runtime . goPanicIndex @ PLT . L 2 4 : movq 1 6 (% rbp ), % rcx movq 4 8 (% rcx ), % rax movq 5 6 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 6 4 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 5 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 5 : movq - 3 0 4 (% rbp ), % rax movq (% rax ), % rax movq - 2 7 2 (% rbp ), % rdx addq $ 8 , % rdx movq (% rdx ), % rdx movq - 2 4 0 (% rbp ), % rcx addq $ 8 , % rcx movq (% rcx ), % rcx subq % rcx , % rdx imulq % rdx , % rax movq % rax , - 1 6 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 6 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 6 : movq 1 6 (% rbp ), % rcx movq 2 4 (% rcx ), % rax movq 3 2 (% rcx ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 4 0 (% rcx ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax testq % rax , % rax jg . L 2 7 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 7 : movq 2 4 (% rbp ), % rax cmpq $ 2 , % rax jg . L 2 8 movq % rax , % rsi movl $ 2 , % edi call runtime . goPanicIndex @ PLT . L 2 8 : movq 1 6 (% rbp ), % rcx movq 4 8 (% rcx ), % rax movq 5 6 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 6 4 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 9 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 9 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 3 0 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 0 : movq 1 6 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax cmpq $ 1 , % rax jg . L 3 1 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 3 1 : movq - 2 0 8 (% rbp ), % rax movq (% rax ), % rax movq - 1 7 6 (% rbp ), % rdx addq $ 8 , % rdx movq (% rdx ), % rdx movq - 1 4 4 (% rbp ), % rcx addq $ 8 , % rcx movq (% rcx ), % rcx subq % rcx , % rdx imulq % rdx , % rax addq % rax , - 1 6 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 2 , % rax jg . L 3 2 movq % rax , % rsi movl $ 2 , % edi call runtime . goPanicIndex @ PLT . L 3 2 : movq 1 6 (% rbp ), % rcx movq 4 8 (% rcx ), % rax movq 5 6 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 6 4 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rax testq % rax , % rax jg . L 3 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 3 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 4 : movq 1 6 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rax cmpq $ 1 , % rax jg . L 3 5 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 3 5 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 3 6 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 3 6 : movq 1 6 (% rbp ), % rcx movq 2 4 (% rcx ), % rax movq 3 2 (% rcx ), % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq 4 0 (% rcx ), % rax movq % rax , - 3 2 (% rbp ) movq - 4 0 (% rbp ), % rax cmpq $ 1 , % rax jg . L 3 7 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 1 1 2 (% rbp ), % rax movq (% rax ), % rax movq - 8 0 (% rbp ), % rdx addq $ 8 , % rdx movq (% rdx ), % rdx movq - 4 8 (% rbp ), % rcx addq $ 8 , % rcx movq (% rcx ), % rcx subq % rcx , % rdx imulq % rdx , % rax addq % rax , - 1 6 (% rbp ) . LBB 2 6 : cmpq $ 0 , - 1 6 (% rbp ) setne % al movb % al , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax . LBE 2 6 : . LBE 2 5 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 3 movl $ 2 3 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 0 0 , % rsp movq % rdi , - 2 1 6 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) . LBB 2 : leaq type ... 6 0 x . 7 main . Interval (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) . LBB 3 : movq $ 0 , - 2 0 8 (% rbp ) movq $ 0 , - 2 0 0 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 2 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 1 2 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 1 2 8 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 4 jmp . L 1 0 . L 3 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 9 6 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq main . Interval .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) . LBE 1 2 : jmp . L 6 . L 1 0 : . LBB 1 3 : movq - 9 6 (% rbp ), % rcx movq - 8 0 (% rbp ), % rdx movq % rcx , - 1 9 2 (% rbp ) movq % rax , - 1 8 4 (% rbp ) movq % rdx , - 1 7 6 (% rbp ) . L 6 : . LBE 1 3 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 4 , % rdx leaq (% rax ,% rdx ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 5 : . LBE 8 : . LBB 1 6 : addq $ 1 , % rbx . L 2 : . LBE 1 6 : cmpq % r 1 3 , % rbx jl . L 1 2 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 7 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 2 1 6 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 7 : . LBE 2 : movq - 2 1 6 (% rbp ), % rax addq $ 2 0 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 0 0 movl $ 2 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 9 : ret . L 1 0 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 6 8 , % rsp movq % rdi , - 2 0 0 (% rbp ) leaq type ... 1 testing . T (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 1 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 0 . LBB 7 3 : movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 7 3 : jmp . L 8 1 . L 8 0 : . LBB 7 4 : movq - 1 0 4 (% rbp ), % rax movq % rax , % rdx movq - 1 1 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 8 1 : . LBE 7 4 : movq - 1 1 2 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) . LBB 7 5 : leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq $ 1 0 0 0 0 0 0 , (% rax ) movq % rax , - 8 0 (% rbp ) . LBB 7 6 : call testing . Short @ PLT testb % al , % al je . L 8 2 . LBB 7 7 : movq - 8 0 (% rbp ), % rax movq (% rax ), % rcx movabsq $- 6 6 4 0 8 2 7 8 6 6 5 3 5 4 3 8 5 8 1 , % rdx movq % rcx , % rax imulq % rdx leaq (% rdx ,% rcx ), % rax sarq $ 6 , % rax sarq $ 6 3 , % rcx subq % rcx , % rax movq % rax , % rdx movq - 8 0 (% rbp ), % rax movq % rdx , (% rax ) . L 8 2 : . LBE 7 7 : . LBE 7 6 : leaq go . pool . Pool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) leaq type .. chan . 0 bool (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 6 (% rbp ) movq - 9 6 (% rbp ), % rbx movl $ 0 , % esi leaq type .. chan . 0 bool (% rip ), % rdi call runtime . makechan @ PLT leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 8 3 . LBB 7 8 : movq % rax , (% rbx ) . LBE 7 8 : jmp . L 8 4 . L 8 3 : . LBB 7 9 : movq % rax , % rsi movq % rbx , % rdi call runtime . gcWriteBarrier @ PLT . L 8 4 : . LBE 7 9 : . LBB 8 0 : movq $ 0 , - 5 6 (% rbp ) . LBB 8 1 : jmp . L 8 5 . L 9 8 : . LBB 8 2 : nop . LBE 8 2 : . LBB 8 3 : . LBB 8 4 : leaq go . pool . TestPoolStress .. func 1 (% rip ), % r 1 5 movq - 8 0 (% rbp ), % r 1 4 movq - 8 8 (% rbp ), % r 1 3 movq - 7 2 (% rbp ), % r 1 2 movq - 9 6 (% rbp ), % rbx leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 N 1 . 0 . 1 int . 2 . go . pool . p 2 . 0 . 1 go . pool . Pool . 2 . go . pool . t 3 . 0 . 1 . 1 testing . T . 2 . go . pool . done 4 . 0 . 1 chan . 0 bool . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq % r 1 5 , - 1 7 6 (% rbp ) movq % r 1 4 , - 1 6 8 (% rbp ) movq % r 1 3 , - 1 6 0 (% rbp ) movq % r 1 2 , - 1 5 2 (% rbp ) movq % rbx , - 1 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 6 . LBB 8 5 : movq - 1 8 4 (% rbp ), % rax movq - 1 7 6 (% rbp ), % rcx movq - 1 6 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 1 6 0 (% rbp ), % rcx movq - 1 5 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 1 4 4 (% rbp ), % rdx movq % rdx , 3 2 (% rax ) . LBE 8 5 : jmp . L 8 7 . L 8 6 : . LBB 8 6 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 N 1 . 0 . 1 int . 2 . go . pool . p 2 . 0 . 1 go . pool . Pool . 2 . go . pool . t 3 . 0 . 1 . 1 testing . T . 2 . go . pool . done 4 . 0 . 1 chan . 0 bool . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 7 : . LBE 8 6 : movq - 1 8 4 (% rbp ), % rbx testq % rbx , % rbx jne . L 8 8 call runtime . panicgonil @ PLT . L 8 8 : leaq type .. struct . 4 . 4 x . 5 fn . 0 func . 8 . 9 . 8 . 9 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq % rbx , - 1 2 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 9 . LBB 8 7 : movq - 1 3 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 8 7 : jmp . L 9 0 . L 8 9 : . LBB 8 8 : movq - 1 2 8 (% rbp ), % rax movq % rax , % rdx movq - 1 3 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 9 0 : . LBE 8 8 : movq - 1 3 6 (% rbp ), % rax leaq go . pool . go . pool .. thunk 0 (% rip ), % rdx movq % rax , % rsi movq % rdx , % rdi call __go_go @ PLT . LBE 8 4 : . LBE 8 3 : . LBB 8 9 : addq $ 1 , - 5 6 (% rbp ) . L 8 5 : . LBE 8 9 : cmpq $ 9 , - 5 6 (% rbp ) jle . L 9 8 . LBE 8 1 : . LBE 8 0 : . LBB 9 0 : movq $ 0 , - 6 4 (% rbp ) . LBB 9 1 : jmp . L 9 3 . L 9 9 : . LBB 9 2 : nop . LBE 9 2 : . LBB 9 3 : movq - 9 6 (% rbp ), % rax movq (% rax ), % rax leaq - 1 1 3 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . chanrecv 1 @ PLT . LBE 9 3 : . LBB 9 4 : addq $ 1 , - 6 4 (% rbp ) . L 9 3 : . LBE 9 4 : cmpq $ 9 , - 6 4 (% rbp ) jle . L 9 9 . LBE 9 1 : . LBE 9 0 : . LBE 7 5 : addq $ 1 6 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 2 movl $ 2 1 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 8 4 , % rsp movq $ 0 , - 4 8 (% rbp ) . LBB 2 : . LBB 3 : movq $ 1 , - 4 0 (% rbp ) . LBB 4 : jmp . L 2 . L 3 1 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq $ 0 , - 5 6 (% rbp ) . LBB 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 cmpq % rax , - 4 0 (% rbp ) jl . L 2 2 . L 3 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : movq 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 9 2 (% rbp ) . LBB 9 : . LBB 1 0 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 1 0 : jmp . L 5 . L 3 0 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : movq % r 1 2 , - 5 6 (% rbp ) . LBB 1 3 : . LBB 1 4 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 4 0 (% rbp ), % rbx movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 6 cmpq % rdx , % rax jl . L 2 3 . L 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : movq 1 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 5 6 (% rbp ), % rdx subq $ 8 , % rsp pushq 1 6 (% rax ) pushq 8 (% rax ) pushq (% rax ) movq % rdx , % rdi call go . day 1 9 . minimum addq $ 3 2 , % rsp movq % rax , % rsi movq - 1 3 6 (% rbp ), % rax testq % rbx , % rbx js . L 8 cmpq % rax , % rbx jl . L 2 4 . L 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : movq - 1 4 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 0 cmpq % rax , - 5 6 (% rbp ) jl . L 2 5 . L 1 0 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq - 1 3 6 (% rbp ), % rax testq % rbx , % rbx js . L 1 2 cmpq % rax , % rbx jl . L 2 6 . L 1 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq - 1 4 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 4 cmpq % rax , - 5 6 (% rbp ) jge . L 1 4 movq - 8 0 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 1 1 2 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax addq % rsi , % rdx movq % rdx , (% rax ) . LBE 1 4 : . LBE 1 3 : . LBE 1 2 : . LBB 1 7 : addq $ 1 , % r 1 2 jmp . L 5 . L 1 4 : . LBE 1 7 : . LBB 1 8 : . LBB 1 6 : . LBB 1 5 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 : . LBE 1 5 : . LBE 1 6 : . LBE 1 8 : cmpq % r 1 3 , % r 1 2 jl . L 3 0 . LBE 9 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 1 9 : addq $ 1 , - 4 0 (% rbp ) . L 2 : . LBE 1 9 : movq 2 4 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 3 1 . LBE 4 : . LBE 3 : . LBB 2 0 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 9 cmpq % rdx , % rax jl . L 2 9 . L 1 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq 1 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax subq $ 8 , % rsp pushq 1 6 (% rax ) pushq 8 (% rax ) pushq (% rax ) movq $- 1 , % rdi call go . day 1 9 . minimum addq $ 3 2 , % rsp movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax . LBE 2 0 : . LBE 2 : leaq - 2 4 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 8 movl $ 2 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 8 : pushq % rbp movq % rsp , % rbp subq $ 1 6 , % rsp movq $ 0 , - 8 (% rbp ) . LBB 2 1 : movq $ 0 , - 1 6 (% rbp ) . LBB 2 2 : jmp . L 1 9 . L 3 7 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 2 0 cmpq % rax , - 1 6 (% rbp ) jl . L 3 2 . L 2 0 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax testq % rax , % rax je . L 2 2 . LBB 2 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 2 3 cmpq % rax , - 8 (% rbp ) jl . L 3 3 . L 2 3 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 2 5 cmpq % rax , - 1 6 (% rbp ) jl . L 3 4 . L 2 5 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . LBB 2 7 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax je . L 2 7 . LBB 2 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 2 8 cmpq % rax , - 1 6 (% rbp ) jl . L 3 5 . L 2 8 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 0 , (% rax ) . L 2 7 : . LBE 2 8 : . LBE 2 7 : addq $ 1 , - 8 (% rbp ) . L 2 2 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBB 2 9 : addq $ 1 , - 1 6 (% rbp ) . L 1 9 : . LBE 2 9 : movq 2 4 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) jl . L 3 7 . LBE 2 2 : . LBE 2 1 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 6 movl $ 1 3 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 0 4 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 2 : call runtime . makemap_small @ PLT movq % rax , - 6 4 (% rbp ) movq $- 1 , - 4 0 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 3 : movq $ 0 , - 7 2 (% rbp ) movl $ 0 , - 7 6 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 1 2 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 5 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 1 2 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 1 2 8 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 4 jmp . L 1 3 . L 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBB 1 0 : leaq 1 (% rbx ), % r 1 2 . LBE 1 0 : jmp . L 6 . L 1 3 : . LBB 1 1 : movq - 1 2 8 (% rbp ), % rcx movq - 1 2 0 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rsi movq % rdx , % rdi movl % esi , % eax movq % rdi , % r 1 2 . L 6 : . LBE 1 1 : . LBE 9 : . LBB 1 2 : movq % rbx , - 7 2 (% rbp ) movl % eax , - 7 6 (% rbp ) . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq $ 0 , - 8 8 (% rbp ) movb $ 0 , - 8 9 (% rbp ) . LBB 1 5 : movl - 7 6 (% rbp ), % eax movl % eax , - 1 0 0 (% rbp ) leaq - 1 0 0 (% rbp ), % rax movl (% rax ), % edx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 3 2 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 8 8 (% rbp ) movb % dl , - 8 9 (% rbp ) . LBE 1 5 : . LBB 1 6 : movzbl - 8 9 (% rbp ), % eax testb % al , % al je . L 7 . LBB 1 7 : movq - 8 8 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax setg % al . L 7 : . LBE 1 7 : . LBE 1 6 : testb % al , % al je . L 8 . LBB 1 8 : movq - 8 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . L 8 : . LBE 1 8 : . LBE 1 4 : . LBB 1 9 : movl - 7 6 (% rbp ), % eax movl % eax , - 9 6 (% rbp ) movq - 7 2 (% rbp ), % rbx leaq - 9 6 (% rbp ), % rax movl (% rax ), % edx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapassign_fast 3 2 @ PLT movq % rbx , (% rax ) . LBE 1 9 : . LBB 2 0 : movq - 7 2 (% rbp ), % rax subq - 4 0 (% rbp ), % rax cmpq % rax , - 4 8 (% rbp ) jge . L 9 . LBB 2 1 : movq - 7 2 (% rbp ), % rax subq - 4 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . L 9 : . LBE 2 1 : . LBE 2 0 : . LBE 1 3 : . LBE 8 : . LBB 2 2 : movq % r 1 2 , % rbx . L 2 : . LBE 2 2 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 2 3 : movq - 4 8 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax . LBE 2 3 : . LBE 2 : addq $ 1 0 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 1 : leaq - 6 4 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 5 movl $ 6 4 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 0 0 , % rsp movq % rdi , - 6 3 2 (% rbp ) movq $ 0 , - 5 7 6 (% rbp ) movq $ 0 , - 5 6 8 (% rbp ) . LBB 1 6 : . LBB 1 7 : cmpq $ 0 , - 6 3 2 (% rbp ) jne . L 1 4 . LBB 1 8 : . LBB 1 9 : leaq . LC 0 (% rip ), % rax movl $ 1 , % edx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx jmp . L 2 9 . L 1 4 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBB 2 0 : cmpq $ 0 , - 6 3 2 (% rbp ) jns . L 1 6 . LBB 2 1 : movabsq $ 4 2 9 4 9 6 7 2 9 6 , % rax addq % rax , - 6 3 2 (% rbp ) . L 1 6 : . LBE 2 1 : . LBE 2 0 : leaq - 5 6 0 (% rbp ), % rax leaq . LC 5 1 (% rip ), % rdx movl $ 4 8 , % ecx movq % rax , % rdi movq % rdx , % rsi rep movsq leaq - 5 6 0 (% rbp ), % rax movq % rax , % r 8 movl $ 8 , % ecx movl $ 2 4 , % edx movl $ 1 6 , % esi leaq type .. map . 6 int . 7 string (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 6 4 (% rbp ) movq $ 0 , - 6 0 8 (% rbp ) movq $ 0 , - 6 0 0 (% rbp ) movq $ 0 , - 5 9 2 (% rbp ) . LBB 2 2 : . LBB 2 3 : jmp . L 1 7 . L 3 3 : . LBB 2 4 : nop . LBE 2 4 : . LBB 2 5 : movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rbx movq - 6 3 2 (% rbp ), % rax cqto shrq $ 6 0 , % rdx addq % rdx , % rax andl $ 1 5 , % eax subq % rdx , % rax movq % rax , - 1 0 4 (% rbp ) leaq - 1 0 4 (% rbp ), % rax movq (% rax ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 string (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % r 1 2 movq 8 (% rax ), % r 1 3 leaq 1 (% rbx ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 8 . LBB 2 6 : movq - 1 7 6 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 6 0 8 (% rbp ) movq % rdx , - 6 0 0 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) . LBE 2 6 : jmp . L 1 9 . L 1 8 : . LBB 2 7 : movq - 1 7 6 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rdx movq % rcx , - 6 0 8 (% rbp ) movq % rax , - 6 0 0 (% rbp ) movq % rdx , - 5 9 2 (% rbp ) . L 1 9 : . LBE 2 7 : movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq % r 1 3 , % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 0 . LBB 2 8 : movq % r 1 2 , % rdx movq % rdx , (% rax ) jmp . L 2 1 . L 2 0 : . LBE 2 8 : . LBB 2 9 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 1 : . LBE 2 9 : movq - 6 3 2 (% rbp ), % rax leaq 1 5 (% rax ), % rdx testq % rax , % rax cmovs % rdx , % rax sarq $ 4 , % rax movq % rax , - 6 3 2 (% rbp ) . L 1 7 : . LBE 2 5 : cmpq $ 0 , - 6 3 2 (% rbp ) jg . L 3 3 . LBE 2 3 : . LBE 2 2 : leaq . LC 5 2 (% rip ), % r 1 4 movl $ 0 , % r 1 5 d movq % r 1 4 , - 6 2 4 (% rbp ) movq % r 1 5 , - 6 1 6 (% rbp ) . LBB 3 0 : movq - 6 0 0 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 5 6 (% rbp ) . LBB 3 1 : jmp . L 2 4 . L 3 4 : . LBB 3 2 : nop . LBE 3 2 : . LBB 3 3 : movq - 6 0 0 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 2 5 cmpq % rax , - 5 6 (% rbp ) jl . L 3 1 . L 2 5 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 6 0 8 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) . LBE 3 3 : . LBB 3 4 : subq $ 1 , - 5 6 (% rbp ) . L 2 4 : . LBE 3 4 : cmpq $ 0 , - 5 6 (% rbp ) jns . L 3 4 . LBE 3 1 : . LBE 3 0 : . LBB 3 5 : movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx . L 2 9 : . LBE 3 5 : . LBE 1 6 : addq $ 6 0 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 7 2 5 0 0 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 9 movl $ 7 2 5 0 0 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 9 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 7 2 4 9 8 4 , % rsp movq % rdi , - 7 2 4 9 8 4 (% rbp ) movq $ 0 , - 8 0 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 9 6 (% rbp ) leaq - 7 2 4 9 7 6 (% rbp ), % rax movl $ 7 2 4 8 0 8 , % edx movl $ 0 , % esi movq % rax , % rdi call memset @ PLT . LBB 3 : movq $ 1 , - 3 2 (% rbp ) . LBB 4 : jmp . L 3 . L 5 5 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq $ 1 , - 4 0 (% rbp ) . LBB 8 : jmp . L 4 . L 5 4 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : cmpq $ 0 , - 3 2 (% rbp ) js . L 5 cmpq $ 3 0 0 , - 3 2 (% rbp ) jle . L 3 9 . L 5 : movq - 3 2 (% rbp ), % rax movl $ 3 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : cmpq $ 0 , - 4 0 (% rbp ) js . L 7 cmpq $ 3 0 0 , - 4 0 (% rbp ) jle . L 4 0 . L 7 : movq - 4 0 (% rbp ), % rax movl $ 3 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : cmpq $ 0 , - 3 2 (% rbp ) js . L 9 cmpq $ 3 0 0 , - 3 2 (% rbp ) jle . L 4 1 . L 9 : movq - 3 2 (% rbp ), % rax movl $ 3 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq - 4 0 (% rbp ), % rax leaq - 1 (% rax ), % rdx testq % rdx , % rdx js . L 1 1 cmpq $ 3 0 0 , % rdx jle . L 4 2 . L 1 1 : movl $ 3 0 1 , % esi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rcx testq % rax , % rax js . L 1 3 cmpq % rcx , % rax jl . L 4 3 . L 1 3 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq 1 6 (% rbp ), % rcx movq % rax , % rsi movq % rsi , % rax addq % rax , % rax addq % rsi , % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq - 1 5 2 (% rbp ), % rcx testq % rax , % rax js . L 1 5 cmpq % rcx , % rax jl . L 4 4 . L 1 5 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq - 3 2 (% rbp ), % rcx imulq $ 3 0 1 , % rcx , % rcx addq % rcx , % rdx movq - 7 2 4 9 7 6 (% rbp ,% rdx , 8 ), % rdx movq - 1 6 0 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax addq % rax , % rdx movq - 3 2 (% rbp ), % rax imulq $ 3 0 1 , % rax , % rcx movq - 4 0 (% rbp ), % rax addq % rcx , % rax movq % rdx , - 7 2 4 9 7 6 (% rbp ,% rax , 8 ) . LBE 1 0 : . LBB 1 1 : addq $ 1 , - 4 0 (% rbp ) . L 4 : . LBE 1 1 : movq - 4 0 (% rbp ), % rax cmpq - 9 6 (% rbp ), % rax jle . L 5 4 . LBE 8 : . LBE 7 : . LBE 6 : . LBB 1 2 : addq $ 1 , - 3 2 (% rbp ) . L 3 : . LBE 1 2 : movq - 3 2 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax jle . L 5 5 . LBE 4 : . LBE 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 1 3 : movq $ 0 , - 4 8 (% rbp ) . LBB 1 4 : jmp . L 2 1 . L 5 8 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 4 8 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 5 6 (% rbp ) . LBB 1 8 : jmp . L 2 2 . L 5 7 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : movq - 8 8 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 1 0 4 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 2 1 : movq $ 0 , - 7 2 (% rbp ) . LBB 2 2 : jmp . L 2 3 . L 5 6 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : cmpq $ 0 , - 7 2 (% rbp ) js . L 2 4 cmpq $ 3 0 0 , - 7 2 (% rbp ) jle . L 4 7 . L 2 4 : movq - 7 2 (% rbp ), % rax movl $ 3 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : cmpq $ 0 , - 5 6 (% rbp ) js . L 2 6 cmpq $ 3 0 0 , - 5 6 (% rbp ) jle . L 4 8 . L 2 6 : movq - 5 6 (% rbp ), % rax movl $ 3 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : cmpq $ 0 , - 7 2 (% rbp ) js . L 2 8 cmpq $ 3 0 0 , - 7 2 (% rbp ) jle . L 4 9 . L 2 8 : movq - 7 2 (% rbp ), % rax movl $ 3 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : cmpq $ 0 , - 4 8 (% rbp ) js . L 3 0 cmpq $ 3 0 0 , - 4 8 (% rbp ) jle . L 5 0 . L 3 0 : movq - 4 8 (% rbp ), % rax movl $ 3 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 0 : movq - 7 2 (% rbp ), % rax imulq $ 3 0 1 , % rax , % rdx movq - 5 6 (% rbp ), % rax addq % rdx , % rax movq - 7 2 4 9 7 6 (% rbp ,% rax , 8 ), % rax movq - 7 2 (% rbp ), % rdx imulq $ 3 0 1 , % rdx , % rcx movq - 4 8 (% rbp ), % rdx addq % rcx , % rdx movq - 7 2 4 9 7 6 (% rbp ,% rdx , 8 ), % rdx subq % rdx , % rax addq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax subq - 7 2 4 9 8 4 (% rbp ), % rax movq % rax , - 1 2 0 (% rbp ) leaq - 1 2 0 (% rbp ), % rax movq (% rax ), % rdx movq - 1 0 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax addq % rax , - 2 4 (% rbp ) . LBB 2 5 : movq - 6 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq (% rax ), % rdx movq - 1 0 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % rbx leaq - 1 2 8 (% rbp ), % rax movq (% rax ), % rdx movq - 1 0 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % rbx , (% rax ) . LBE 2 5 : . LBE 2 4 : . LBB 2 6 : addq $ 1 , - 7 2 (% rbp ) . L 2 3 : . LBE 2 6 : movq - 7 2 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax jle . L 5 6 . LBE 2 2 : . LBE 2 1 : . LBE 2 0 : . LBB 2 7 : addq $ 1 , - 5 6 (% rbp ) . L 2 2 : . LBE 2 7 : movq - 5 6 (% rbp ), % rax cmpq - 9 6 (% rbp ), % rax jle . L 5 7 . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 2 8 : addq $ 1 , - 4 8 (% rbp ) . L 2 1 : . LBE 2 8 : movq - 4 8 (% rbp ), % rax cmpq - 9 6 (% rbp ), % rax jl . L 5 8 . LBE 1 4 : . LBE 1 3 : . LBB 2 9 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 0 (% rbp ), % rax . LBE 2 9 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 5 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 5 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movb $ 0 , - 9 (% rbp ) . LBB 2 : movq - 4 0 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , - 2 4 (% rbp ) . LBB 3 : movq $ 0 , - 8 (% rbp ) . LBB 4 : jmp . L 2 . L 1 4 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq - 4 0 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 3 cmpq % rax , - 8 (% rbp ) jl . L 1 1 . L 3 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 1 : movq - 4 0 (% rbp ), % rax subq - 8 (% rbp ), % rax subq $ 1 , % rax movq - 4 0 (% rbp ), % rdx testq % rax , % rax js . L 5 cmpq % rdx , % rax jl . L 1 2 . L 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : movq - 4 8 (% rbp ), % rcx movq - 8 (% rbp ), % rdx addq % rcx , % rdx movzbl (% rdx ), % edx movq - 4 8 (% rbp ), % rcx addq % rcx , % rax movzbl (% rax ), % eax cmpb % al , % dl je . L 7 . LBB 8 : . LBB 9 : movb $ 0 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax jmp . L 8 . L 7 : . LBE 9 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 1 0 : addq $ 1 , - 8 (% rbp ) . L 2 : . LBE 1 0 : movq - 8 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax jl . L 1 4 . LBE 4 : . LBE 3 : . LBB 1 1 : movb $ 1 , - 9 (% rbp ) movzbl - 9 (% rbp ), % eax . L 8 : . LBE 1 1 : . LBE 2 : leave ret
. LFB 2 8 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 0 1 movl $ 3 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 6 : ret . L 4 0 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 8 8 , % rsp movq % rdi , - 2 9 6 (% rbp ) movq % rsi , - 3 0 4 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 3 4 1 : movl $ 0 , % eax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % rax movq % rax , - 2 8 0 (% rbp ) leaq - 2 8 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 2 , - 8 8 (% rbp ) movq $ 2 , - 8 0 (% rbp ) subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) call go . util . MaxInt addq $ 3 2 , % rsp movq % rax , - 2 9 6 (% rbp ) movl $ 0 , % eax movq % rax , - 2 7 2 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 2 6 4 (% rbp ) leaq - 2 7 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq $ 2 , - 5 6 (% rbp ) movq $ 2 , - 4 8 (% rbp ) subq $ 8 , % rsp pushq - 4 8 (% rbp ) pushq - 5 6 (% rbp ) pushq - 6 4 (% rbp ) call go . util . MaxInt addq $ 3 2 , % rsp movq % rax , - 3 0 4 (% rbp ) leaq go . util . PriorityQueue .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rdx , 4 8 (% rax ) movq - 3 2 (% rbp ), % rax movq - 3 0 4 (% rbp ), % rdx movq % rdx , 5 6 (% rax ) movq - 2 9 6 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 1 go . util . Queue (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 3 2 (% rbp ), % rax movq % rdx , - 2 5 6 (% rbp ) movq % rbx , - 2 4 8 (% rbp ) movq % rbx , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 2 4 0 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 3 8 6 . LBB 3 4 2 : movq - 2 5 6 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 3 4 2 : jmp . L 3 8 7 . L 3 8 6 : . LBB 3 4 3 : movq - 2 5 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 8 7 : . LBE 3 4 3 : . LBB 3 4 4 : movq $ 0 , - 4 0 (% rbp ) . LBB 3 4 5 : movq - 3 2 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) . LBB 3 4 6 : . LBB 3 4 7 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 3 4 7 : jmp . L 3 8 8 . L 4 0 0 : . LBB 3 4 8 : nop . LBE 3 4 8 : . LBB 3 4 9 : movq % rbx , - 4 0 (% rbp ) . LBB 3 5 0 : call go . util . NewQueue movq % rax , % rcx movq - 3 2 (% rbp ), % rsi movq (% rsi ), % rax movq 8 (% rsi ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rsi ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 8 9 cmpq % rax , - 4 0 (% rbp ) jge . L 3 8 9 movq - 1 6 0 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 3 9 0 jmp . L 3 9 8 . L 3 8 9 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 0 : . LBB 3 5 1 : movq % rcx , (% rax ) . LBE 3 5 1 : jmp . L 3 9 2 . L 3 9 8 : . LBB 3 5 2 : movq % rcx , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 9 2 : . LBE 3 5 2 : . LBE 3 5 0 : . LBE 3 4 9 : . LBB 3 5 3 : addq $ 1 , % rbx . L 3 8 8 : . LBE 3 5 3 : cmpq % r 1 2 , % rbx jl . L 4 0 0 . LBE 3 4 6 : . LBE 3 4 5 : . LBE 3 4 4 : movq - 2 9 6 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 3 2 (% rbp ), % rax addq $ 2 4 , % rax movq % rdx , - 1 2 8 (% rbp ) movq % rbx , - 1 2 0 (% rbp ) movq % rbx , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 1 2 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 3 9 5 . LBB 3 5 4 : movq - 1 2 8 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 3 5 4 : jmp . L 3 9 6 . L 3 9 5 : . LBB 3 5 5 : movq - 1 2 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 9 6 : . LBE 3 5 5 : . LBB 3 5 6 : movq - 3 2 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . LBE 3 5 6 : . LBE 3 4 1 : leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 7 movl $ 3 4 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 9 6 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) . LBB 2 : movq - 3 3 6 (% rbp ), % rdx movq - 3 2 8 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call strings . ToLower @ PLT movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 2 movl $ 6 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call regexp . MustCompile @ PLT movq % rax , - 6 4 (% rbp ) leaq - 2 7 2 (% rbp ), % rdi movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rsi movq $- 1 , % r 8 movq % rdx , % rcx movq % rax , % rdx call regexp . Regexp . FindAllString @ PLT call runtime . makemap_small @ PLT movq % rax , - 7 2 (% rbp ) . LBB 3 : movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 5 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 3 0 4 (% rbp ), % rdx movq - 2 9 6 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rdx , % rdi movq % rax , % rsi call go . problem 8 1 9 . isContain addq $ 3 2 , % rsp xorl $ 1 , % eax testb % al , % al jne . L 4 jmp . L 5 . L 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 6 : . LBB 1 7 : . LBB 1 5 : . LBB 1 3 : . LBB 1 4 : movq - 3 0 4 (% rbp ), % r 1 2 movq - 2 9 6 (% rbp ), % r 1 3 movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq - 7 2 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 5 movq - 7 2 (% rbp ), % rax movq % r 1 2 , % rdx movq % r 1 3 , % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq % r 1 5 , (% rax ) . L 5 : . LBE 1 4 : . LBE 1 3 : . LBE 1 5 : . LBE 1 7 : . LBE 8 : . LBB 1 8 : addq $ 1 , % rbx . L 2 : . LBE 1 8 : cmpq % r 1 4 , % rbx jl . L 1 5 . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) . LBB 1 9 : movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) movq $ 0 , - 8 0 (% rbp ) . LBB 2 0 : . LBB 2 1 : . LBB 2 2 : leaq - 1 7 6 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 2 2 : jmp . L 8 . L 1 6 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movq - 1 7 6 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq - 1 6 8 (% rbp ), % rcx movq (% rcx ), % rcx . LBE 2 5 : . LBB 2 6 : movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq % rcx , - 8 0 (% rbp ) . LBE 2 6 : . LBB 2 7 : . LBB 2 8 : movq - 8 0 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jle . L 9 . LBB 2 9 : movq - 8 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) . L 9 : . LBE 2 9 : . LBE 2 8 : . LBE 2 7 : . LBE 2 4 : . LBB 3 0 : leaq - 1 7 6 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 8 : . LBE 3 0 : movq - 1 7 6 (% rbp ), % rax testq % rax , % rax jne . L 1 6 . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBB 3 1 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx . LBE 3 1 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 7 movl $ 1 3 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 7 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 2 0 , % rsp movq $ 0 , - 1 0 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 4 8 (% rbp ) . LBB 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 4 6 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq $ 0 , - 3 2 (% rbp ) . LBB 8 : jmp . L 3 . L 4 5 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : . LBB 1 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 cmpq % rax , - 2 4 (% rbp ) jl . L 3 4 . L 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rax movq % rax , - 4 0 (% rbp ) . LBB 1 2 : jmp . L 6 . L 4 4 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 7 cmpq % rax , - 2 4 (% rbp ) jl . L 3 5 . L 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movl $ 0 , % ecx movq % rdi , % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 9 cmpq % rax , - 3 2 (% rbp ) jg . L 9 testq % rcx , % rcx jns . L 1 0 jmp . L 1 1 . L 9 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAlen @ PLT . L 1 0 : cmpq - 3 2 (% rbp ), % rcx jle . L 3 6 . L 1 1 : movq - 3 2 (% rbp ), % rax movq % rax , % rsi movq % rcx , % rdi call runtime . goPanicSliceB @ PLT . L 3 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 3 cmpq % rax , - 2 4 (% rbp ) jl . L 3 7 . L 1 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % r 8 cmpq $ 0 , - 4 0 (% rbp ) js . L 1 5 cmpq % r 8 , - 4 0 (% rbp ) jle . L 3 8 . L 1 5 : movq - 4 0 (% rbp ), % rax movq % r 8 , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 3 8 : movq % rsi , % rdi cmpq % rcx , - 3 2 (% rbp ) je . L 1 7 movq % rcx , % rsi jmp . L 1 8 . L 1 7 : movl $ 0 , % esi . L 1 8 : addq % rdi , % rsi movq % rsi , - 9 6 (% rbp ) movq - 3 2 (% rbp ), % rsi subq % rcx , % rsi movq % rsi , - 8 8 (% rbp ) leaq . LC 2 7 (% rip ), % rcx movq % rcx , - 8 0 (% rbp ) movq $ 1 , - 7 2 (% rbp ) movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , - 4 0 (% rbp ) je . L 1 9 movq - 4 0 (% rbp ), % rcx jmp . L 2 0 . L 1 9 : movl $ 0 , % ecx . L 2 0 : addq % rsi , % rcx movq % rcx , - 6 4 (% rbp ) movq % rdx , % rax subq - 4 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) leaq - 9 6 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) . LBB 1 5 : movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq - 2 4 (% rbp ), % rbx movq - 4 8 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq % rbx , (% rax ) . LBE 1 5 : . LBE 1 4 : . LBB 1 6 : subq $ 1 , - 4 0 (% rbp ) . L 6 : . LBE 1 6 : . LBB 1 7 : movq - 4 0 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax testb % al , % al je . L 2 1 . LBB 1 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 2 cmpq % rax , - 2 4 (% rbp ) jl . L 3 9 . L 2 2 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rax subq $ 1 0 , % rax cmpq % rax , - 4 0 (% rbp ) setge % al . L 2 1 : . LBE 1 8 : . LBE 1 7 : testb % al , % al jne . L 4 4 . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : . LBB 1 9 : addq $ 1 , - 3 2 (% rbp ) . L 3 : . LBE 1 9 : . LBB 2 0 : cmpq $ 1 0 , - 3 2 (% rbp ) setle % al testb % al , % al je . L 2 6 . LBB 2 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 7 cmpq % rax , - 2 4 (% rbp ) jl . L 4 1 . L 2 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rax cmpq % rax , - 3 2 (% rbp ) setle % al . L 2 6 : . LBE 2 1 : . LBE 2 0 : testb % al , % al jne . L 4 5 . LBE 8 : . LBE 7 : . LBE 6 : . LBB 2 2 : addq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 2 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 4 6 . LBE 4 : . LBE 3 : . LBB 2 3 : movq - 4 8 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) movq - 1 0 4 (% rbp ), % rax . LBE 2 3 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 2 6 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 : pushq % rbp movq % rsp , % rbp movq % rdi , - 2 4 (% rbp ) movb $ 0 , - 1 (% rbp ) . LBB 2 : . LBB 3 : movq - 2 4 (% rbp ), % rax andl $ 1 , % eax testq % rax , % rax sete % al movb % al , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax . LBE 3 : . LBE 2 : popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 0 movl $ 2 1 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 0 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 0 0 , % rsp movq % rdi , - 2 0 0 (% rbp ) movq $ 0 , - 7 2 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movq - 8 0 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 3 2 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rdi call go . problem 1 0 0 5 . abs movq % rax , - 4 0 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 3 . L 4 7 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 cmpq % rax , - 2 4 (% rbp ) jl . L 3 5 . L 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , % rdi call go . problem 1 0 0 5 . abs movq % rax , % rdx movq - 4 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 1 0 0 5 . min movq % rax , - 4 0 (% rbp ) . LBB 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 6 cmpq % rax , - 2 4 (% rbp ) jl . L 3 6 . L 6 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax testq % rax , % rax js . L 8 . LBB 8 : . LBB 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 2 4 (% rbp ), % rdx movq 1 6 (% rbp ), % rcx movq 2 4 (% rbp ), % rbx movq % rcx , - 1 2 8 (% rbp ) movq % rbx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 3 2 (% rbp ), % rax movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 3 2 (% rbp ) js . L 9 cmpq % rcx , - 3 2 (% rbp ) jl . L 3 7 . L 9 : movq - 3 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq 1 6 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rdi movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 2 4 (% rbp ) js . L 1 1 cmpq % rcx , - 2 4 (% rbp ) jl . L 3 8 . L 1 1 : movq - 2 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq 1 6 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rsi movq - 1 5 2 (% rbp ), % rcx testq % rdx , % rdx js . L 1 3 cmpq % rcx , % rdx jl . L 3 9 . L 1 3 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 1 6 0 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq % rdi , (% rdx ) movq - 1 2 0 (% rbp ), % rdx testq % rax , % rax js . L 1 5 cmpq % rdx , % rax jl . L 4 0 . L 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq - 1 2 8 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . LBE 9 : subq $ 1 , - 3 2 (% rbp ) jmp . L 3 . L 8 : . LBE 8 : . LBE 7 : addq $ 1 , - 2 4 (% rbp ) . L 3 : . LBE 6 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jle . L 4 7 . LBE 4 : . LBE 3 : movq - 3 2 (% rbp ), % rax leaq 1 (% rax ), % rdi movq 3 2 (% rbp ), % rax testq % rdi , % rdi js . L 1 9 cmpq % rax , % rdi jg . L 1 9 testq % rdi , % rdi jns . L 2 0 jmp . L 4 2 . L 1 9 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 4 2 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 2 0 : movq 1 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq % rdi , - 1 8 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 8 8 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 1 0 : movq - 2 0 0 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax jl . L 2 2 . LBB 1 1 : . LBB 1 2 : movq - 2 0 0 (% rbp ), % rax subq - 8 8 (% rbp ), % rax andl $ 1 , % eax testq % rax , % rax je . L 2 3 . LBB 1 3 : movq - 4 0 (% rbp ), % rdx movl $ 0 , % eax subq % rdx , % rax addq % rax , % rax addq % rax , - 4 8 (% rbp ) jmp . L 2 3 . L 2 2 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 4 : subq $ 8 , % rsp pushq - 1 7 6 (% rbp ) pushq - 1 8 4 (% rbp ) pushq - 1 9 2 (% rbp ) call sort . Ints @ PLT addq $ 3 2 , % rsp . L 2 3 : . LBE 1 4 : . LBE 1 0 : movq - 8 8 (% rbp ), % rdx movq - 2 0 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 1 0 0 5 . min movq % rax , - 9 6 (% rbp ) . LBB 1 5 : movq $ 0 , - 5 6 (% rbp ) . LBB 1 6 : jmp . L 2 4 . L 4 8 : . LBB 1 7 : nop . LBE 1 7 : . LBB 1 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 2 5 cmpq % rax , - 5 6 (% rbp ) jl . L 4 3 . L 2 5 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax subq % rax , - 4 8 (% rbp ) . LBE 1 8 : . LBB 1 9 : addq $ 1 , - 5 6 (% rbp ) . L 2 4 : . LBE 1 9 : movq - 5 6 (% rbp ), % rax cmpq - 9 6 (% rbp ), % rax jl . L 4 8 . LBE 1 6 : . LBE 1 5 : . LBB 2 0 : movq - 9 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBB 2 1 : jmp . L 2 9 . L 4 9 : . LBB 2 2 : nop . LBE 2 2 : . LBB 2 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 3 0 cmpq % rax , - 6 4 (% rbp ) jl . L 4 5 . L 3 0 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq % rax , - 4 8 (% rbp ) . LBE 2 3 : . LBB 2 4 : addq $ 1 , - 6 4 (% rbp ) . L 2 9 : . LBE 2 4 : movq - 6 4 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jl . L 4 9 . LBE 2 1 : . LBE 2 0 : . LBB 2 5 : movq - 4 8 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax . LBE 2 5 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 8 movl $ 1 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 8 8 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 8 0 (% rbp ) movq % rdi , - 7 2 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq % rcx , - 9 6 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 2 : . LBB 3 : movq - 7 2 (% rbp ), % rax cmpq % rax , - 8 8 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 1 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 4 cmpq % rax , - 8 8 (% rbp ) jge . L 4 movq - 8 0 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 8 , % al je . L 5 jmp . L 1 6 . L 4 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 : . LBB 7 : . LBB 8 : movq $ 0 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 1 6 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 9 : movq $ 0 , - 4 0 (% rbp ) movb $ 0 , - 4 1 (% rbp ) . LBB 1 0 : movq - 8 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) leaq - 6 4 (% rbp ), % rax movq (% rax ), % rdx movq - 9 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 4 0 (% rbp ) movb % dl , - 4 1 (% rbp ) . LBE 1 0 : cmpb $ 0 , - 4 1 (% rbp ) je . L 7 . LBB 1 1 : . LBB 1 2 : movq - 4 0 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 7 : . LBE 1 2 : . LBE 1 1 : . LBE 9 : movq - 8 8 (% rbp ), % rax leaq 1 (% rax ), % rdi movq - 9 6 (% rbp ), % rdx movq - 8 0 (% rbp ), % rsi movq - 7 2 (% rbp ), % rax movq % rdx , % rcx movq % rdi , % rdx movq % rsi , % rdi movq % rax , % rsi call main . decode movq % rax , - 2 4 (% rbp ) . LBB 1 3 : movq - 7 2 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 8 8 (% rbp ) jge . L 8 . LBB 1 4 : . LBB 1 5 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 9 cmpq % rax , - 8 8 (% rbp ) jge . L 9 movq - 8 0 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 9 , % al je . L 1 0 jmp . L 1 7 . L 9 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : . LBB 1 6 : movq - 8 8 (% rbp ), % rax leaq 2 (% rax ), % rdi movq - 9 6 (% rbp ), % rdx movq - 8 0 (% rbp ), % rsi movq - 7 2 (% rbp ), % rax movq % rdx , % rcx movq % rdi , % rdx movq % rsi , % rdi movq % rax , % rsi call main . decode addq % rax , - 2 4 (% rbp ) . LBE 1 6 : jmp . L 8 . L 1 7 : . LBB 1 7 : . LBB 1 8 : . LBB 1 9 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 1 2 cmpq % rax , - 8 8 (% rbp ) jge . L 1 2 movq - 8 0 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 5 0 , % al sete % al testb % al , % al jne . L 1 3 jmp . L 1 4 . L 1 2 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : . LBB 2 0 : movq - 8 8 (% rbp ), % rax addq $ 1 , % rax movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 1 5 cmpq % rdx , % rax jge . L 1 5 movq - 8 0 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 5 4 , % al setbe % al jmp . L 1 4 . L 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : . LBE 2 0 : . LBE 1 9 : testb % al , % al je . L 8 . LBB 2 1 : movq - 8 8 (% rbp ), % rax leaq 2 (% rax ), % rdi movq - 9 6 (% rbp ), % rdx movq - 8 0 (% rbp ), % rsi movq - 7 2 (% rbp ), % rax movq % rdx , % rcx movq % rdi , % rdx movq % rsi , % rdi movq % rax , % rsi call main . decode addq % rax , - 2 4 (% rbp ) . L 8 : . LBE 2 1 : . LBE 1 8 : . LBE 1 7 : . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 2 2 : movq - 8 8 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 2 4 (% rbp ), % rbx leaq - 5 6 (% rbp ), % rax movq (% rax ), % rdx movq - 9 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % rbx , (% rax ) . LBE 2 2 : . LBB 2 3 : movq - 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 3 : . LBE 2 3 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 7 9 movl $ 2 4 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 5 : ret . L 7 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 0 8 , % rsp movq % rdi , - 2 3 2 (% rbp ) . LBB 7 2 : leaq type .. struct . 4 . go . xor . description . 0 string . 2 . go . xor . input . 0 string . 2 . go . xor . key . 0 int . 2 . go . xor . encrypted . 0 string . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 (% rbp ) . LBB 7 3 : . LBB 7 4 : . LBB 7 5 : movq go . xor . xorTestData (% rip ), % rax movq 8 + go . xor . xorTestData (% rip ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 + go . xor . xorTestData (% rip ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 5 : jmp . L 6 7 . L 7 8 : . LBB 7 6 : nop . LBE 7 6 : . LBB 7 7 : . LBB 7 8 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 6 8 cmpq % rax , % rbx jge . L 6 8 movq - 1 6 0 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 3 , % rax subq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 2 4 (% rbp ) movq % rdi , - 2 1 6 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 0 8 (% rbp ) movq % rdi , - 2 0 0 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 1 9 2 (% rbp ) movq % rdi , - 1 8 4 (% rbp ) movq 4 8 (% rax ), % rax movq % rax , - 1 7 6 (% rbp ) . LBE 7 8 : . LBB 7 9 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 4 0 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 9 jmp . L 7 6 . L 6 8 : . LBE 7 9 : . LBB 8 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 9 : . LBE 8 2 : . LBB 8 3 : . LBB 8 0 : movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 8 0 (% rbp ), % rdx movq % rdx , 4 8 (% rax ) . LBE 8 0 : jmp . L 7 1 . L 7 6 : . LBB 8 1 : leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . xor . description . 0 string . 2 . go . xor . input . 0 string . 2 . go . xor . key . 0 int . 2 . go . xor . encrypted . 0 string . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 1 : . LBE 8 1 : . LBE 8 3 : . LBB 8 4 : leaq go . xor . TestXorCipherDecrypt .. func 1 (% rip ), % r 1 4 movq - 4 0 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . xor . test 1 . 0 . 1 struct . 4 . go . xor . description . 0 string . 2 . go . xor . input . 0 string . 2 . go . xor . key . 0 int . 2 . go . xor . encrypted . 0 string . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq % r 1 4 , - 6 4 (% rbp ) movq % r 1 2 , - 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 2 . LBB 8 5 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 8 5 : jmp . L 7 3 . L 7 2 : . LBB 8 6 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . xor . test 1 . 0 . 1 struct . 4 . go . xor . description . 0 string . 2 . go . xor . input . 0 string . 2 . go . xor . key . 0 int . 2 . go . xor . encrypted . 0 string . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 3 : . LBE 8 6 : movq - 7 2 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 2 3 2 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 8 4 : . LBE 7 7 : . LBB 8 7 : addq $ 1 , % rbx . L 6 7 : . LBE 8 7 : cmpq % r 1 3 , % rbx jl . L 7 8 . LBE 7 4 : . LBE 7 3 : . LBE 7 2 : addq $ 2 0 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : leaq - 6 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 5 movl $ 6 8 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 3 2 , % rsp movq % rdi , - 5 6 8 (% rbp ) movq % rsi , - 5 7 6 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq % rcx , - 5 9 2 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 2 : movq - 5 6 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 9 6 (% rbp ) movq % rbx , - 4 8 8 (% rbp ) movq % rbx , - 4 8 0 (% rbp ) . LBB 3 : movq $ 0 , - 6 4 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 5 6 (% rbp ), % rax movq % rax , - 6 6 4 (% rbp ) movl $ 0 , % r 1 3 d . LBE 6 : jmp . L 2 . L 5 2 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq % r 1 3 , - 6 4 (% rbp ) . LBB 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 3 cmpq % rax , - 6 4 (% rbp ) jl . L 4 1 . L 3 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq 1 6 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 2 4 (% rbp ), % rax testq % rax , % rax jg . L 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 5 : movq - 4 3 2 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 8 8 (% rbp ) movq - 4 8 8 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 6 cmpq % rax , - 8 8 (% rbp ) jl . L 4 2 . L 6 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq - 4 9 6 (% rbp ), % rcx movq - 8 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 3 9 2 (% rbp ), % r 1 2 movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 8 cmpq % rax , - 6 4 (% rbp ) jl . L 4 3 . L 8 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq 1 6 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 3 5 2 (% rbp ), % rax testq % rax , % rax jg . L 1 0 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 1 0 : movq - 3 6 8 (% rbp ), % rdx movq - 3 5 2 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 3 , % rax addq % rdx , % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 6 0 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 3 2 8 (% rbp ) movq - 3 5 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 3 2 0 (% rbp ) leaq 1 (% r 1 2 ), % rsi movq - 3 8 4 (% rbp ), % r 8 movq % rsi , % rdx movq % r 8 , % rax cmpq % rax , % rdx jbe . L 1 1 . LBB 1 0 : movq - 4 8 8 (% rbp ), % rdx cmpq $ 0 , - 8 8 (% rbp ) js . L 1 2 cmpq % rdx , - 8 8 (% rbp ) jl . L 4 4 . L 1 2 : movq - 8 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq - 4 9 6 (% rbp ), % rcx movq - 8 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax leaq (% rcx ,% rax ), % rbx movq - 4 0 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdi movq % rsi , % r 9 movq % r 1 2 , % rcx movq % rax , % rdx leaq type ... 6 . 7 int (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 2 8 8 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 4 . LBB 1 1 : movq - 3 0 4 (% rbp ), % rax movq % rax , (% rbx ) jmp . L 1 5 . L 1 4 : . LBE 1 1 : . LBB 1 2 : movq - 3 0 4 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 1 5 . L 1 1 : . LBE 1 2 : . LBE 1 0 : . LBB 1 3 : movq - 4 8 8 (% rbp ), % rdx cmpq $ 0 , - 8 8 (% rbp ) js . L 1 6 cmpq % rdx , - 8 8 (% rbp ) jl . L 4 5 . L 1 6 : movq - 8 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 4 9 6 (% rbp ), % rcx movq - 8 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rcx , % rax movq - 4 0 0 (% rbp ), % rdx movq - 3 8 4 (% rbp ), % rcx movq % rdx , (% rax ) movq % rsi , 8 (% rax ) movq % rcx , 1 6 (% rax ) . L 1 5 : . LBE 1 3 : movq - 4 8 8 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 1 8 cmpq % rax , - 8 8 (% rbp ) jl . L 4 6 . L 1 8 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq - 4 9 6 (% rbp ), % rcx movq - 8 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 4 0 0 (% rbp ), % rdx movq % r 1 2 , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , - 2 7 2 (% rbp ) movq % rbx , - 2 6 4 (% rbp ) movq - 3 2 0 (% rbp ), % rdx movq % rdx , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 2 5 6 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 0 . LBB 1 4 : movq - 2 7 2 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 2 1 . L 2 0 : . LBE 1 4 : . LBB 1 5 : movq - 2 7 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 1 : . LBE 1 5 : . LBE 9 : . LBE 8 : . LBB 1 6 : addq $ 1 , % r 1 3 . L 2 : . LBE 1 6 : cmpq - 6 6 4 (% rbp ), % r 1 3 jl . L 5 2 . LBE 5 : . LBE 4 : . LBE 3 : movq - 5 6 8 (% rbp ), % r 1 2 leaq go . problem 0 7 8 7 . PQ .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rbx movq % r 1 2 , % rdx movl $ 0 , % esi leaq type ... 1 go . problem 0 7 8 7 . city (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq % r 1 2 , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 2 2 4 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 4 . LBB 1 7 : movq - 2 4 0 (% rbp ), % rax movq % rax , (% rbx ) jmp . L 2 5 . L 2 4 : . LBE 1 7 : . LBB 1 8 : movq - 2 4 0 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 5 : . LBE 1 8 : movl $ 0 , % r 1 2 d movq - 5 9 2 (% rbp ), % rax leaq 1 (% rax ), % rbx leaq type ... 1 go . problem 0 7 8 7 . city (% rip ), % rax movq % rax , - 6 5 6 (% rbp ) leaq go . problem 0 7 8 7 .. go . problem 0 7 8 7 . city .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq - 2 1 6 (% rbp ), % rax movq - 5 7 6 (% rbp ), % rdx movq % rdx , (% rax ) movq % r 1 2 , 8 (% rax ) movq % rbx , 1 6 (% rax ) movq - 2 1 6 (% rbp ), % rax movq % rax , - 6 4 8 (% rbp ) leaq pimt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Pop . 0 func . 8 . 9 . 8 interface . 4 . 5 . 9 . 2 Push . 0 func . 8 interface . 4 . 5 . 9 . 8 . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. go . problem 0 7 8 7 . PQ (% rip ), % r 1 4 movq - 7 2 (% rbp ), % r 1 5 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rcx , % rsi movq % rdx , % rax movq - 6 5 6 (% rbp ), % rdx movq - 6 4 8 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call container .. z 2 fheap . Push @ PLT . LBB 1 9 : . LBB 2 0 : jmp . L 2 6 . L 5 4 : . LBB 2 1 : nop . LBE 2 1 : . LBB 2 2 : movq $ 0 , - 8 0 (% rbp ) . LBB 2 3 : leaq pimt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Pop . 0 func . 8 . 9 . 8 interface . 4 . 5 . 9 . 2 Push . 0 func . 8 interface . 4 . 5 . 9 . 8 . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. go . problem 0 7 8 7 . PQ (% rip ), % rax movq % rax , - 6 4 0 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rax , - 6 3 2 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call container .. z 2 fheap . Pop @ PLT movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rsi movq % rax , % rdx leaq type ... 1 go . problem 0 7 8 7 . city (% rip ), % rdi call runtime . ifaceE 2 T 2 P @ PLT movq % rax , - 8 0 (% rbp ) . LBE 2 3 : . LBB 2 4 : movq - 8 0 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , - 5 8 4 (% rbp ) jne . L 2 7 . LBB 2 5 : . LBB 2 6 : movq - 8 0 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax jmp . L 4 0 . L 2 7 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBB 2 7 : movq - 8 0 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax jle . L 2 6 . LBB 2 8 : movq - 8 0 (% rbp ), % rax movq (% rax ), % rax movq - 4 8 8 (% rbp ), % rdx testq % rax , % rax js . L 2 9 cmpq % rdx , % rax jl . L 4 8 . L 2 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : movq - 4 9 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 5 1 2 (% rbp ) . LBB 2 9 : movq $ 0 , - 5 6 0 (% rbp ) movq $ 0 , - 5 5 2 (% rbp ) movq $ 0 , - 5 4 4 (% rbp ) . LBB 3 0 : . LBB 3 1 : . LBB 3 2 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 3 2 : jmp . L 3 1 . L 5 3 : . LBB 3 3 : nop . LBE 3 3 : . LBB 3 4 : . LBB 3 5 : movq - 1 6 8 (% rbp ), % rax testq % rbx , % rbx js . L 3 2 cmpq % rax , % rbx jge . L 3 2 movq - 1 7 6 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 9 2 (% rbp ) . LBE 3 5 : . LBB 3 6 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) . LBE 3 6 : . LBB 3 7 : movq - 5 5 2 (% rbp ), % rax testq % rax , % rax jg . L 3 3 jmp . L 4 9 . L 3 2 : . LBE 3 7 : . LBB 3 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : . LBE 3 8 : . LBB 3 9 : movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 3 : movq - 5 5 2 (% rbp ), % rax cmpq $ 1 , % rax jg . L 3 5 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 5 6 0 (% rbp ), % rax movq (% rax ), % r 1 2 movq - 8 0 (% rbp ), % rax movq 8 (% rax ), % rdx movq - 5 6 0 (% rbp ), % rax addq $ 8 , % rax movq (% rax ), % rax leaq (% rdx ,% rax ), % r 1 5 movq - 8 0 (% rbp ), % rax movq 1 6 (% rax ), % rax leaq - 1 (% rax ), % r 1 4 leaq type ... 1 go . problem 0 7 8 7 . city (% rip ), % rax movq % rax , - 6 2 4 (% rbp ) leaq go . problem 0 7 8 7 .. go . problem 0 7 8 7 . city .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq % r 1 2 , (% rax ) movq % r 1 5 , 8 (% rax ) movq % r 1 4 , 1 6 (% rax ) movq - 1 2 0 (% rbp ), % rax movq % rax , - 6 1 6 (% rbp ) leaq pimt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Pop . 0 func . 8 . 9 . 8 interface . 4 . 5 . 9 . 2 Push . 0 func . 8 interface . 4 . 5 . 9 . 8 . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. go . problem 0 7 8 7 . PQ (% rip ), % rax movq % rax , - 6 0 8 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rax , - 6 0 0 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi movq % rdx , % rax movq - 6 2 4 (% rbp ), % rdx movq - 6 1 6 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call container .. z 2 fheap . Push @ PLT . LBE 3 9 : . LBE 3 4 : . LBB 4 0 : addq $ 1 , % rbx . L 3 1 : . LBE 4 0 : cmpq % r 1 3 , % rbx jl . L 5 3 . L 2 6 : . LBE 3 1 : . LBE 3 0 : . LBE 2 9 : . LBE 2 8 : . LBE 2 7 : . LBE 2 2 : movq - 7 2 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax jg . L 5 4 . LBE 2 0 : . LBE 1 9 : . LBB 4 1 : movq $- 1 , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax . L 4 0 : . LBE 4 1 : . LBE 2 : addq $ 6 3 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 4 movl $ 2 9 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 6 4 , % rsp movb $ 0 , - 3 3 (% rbp ) . LBB 2 : call runtime . makemap_small @ PLT movq % rax , - 4 8 (% rbp ) call runtime . makemap_small @ PLT movq % rax , - 5 6 (% rbp ) . LBB 3 : movq $ 0 , - 6 4 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 2 1 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 8 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 2 8 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 6 4 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 6 4 (% rbp ), % rax movq % rax , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 3 leaq - 2 6 4 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . LBE 1 2 : . LBE 1 1 : . LBE 8 : . LBB 1 4 : addq $ 1 , % rbx jmp . L 2 . L 3 : . LBE 1 4 : . LBB 1 5 : . LBB 1 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 3 : . LBE 1 5 : cmpq % r 1 2 , % rbx jl . L 2 1 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 6 : movq $ 0 , - 7 2 (% rbp ) . LBB 1 7 : . LBB 1 8 : . LBB 1 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 9 : jmp . L 6 . L 2 3 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 2 4 8 (% rbp ), % rax testq % rbx , % rbx js . L 7 cmpq % rax , % rbx jge . L 7 movq - 2 5 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 2 2 : . LBB 2 3 : movq % rax , - 7 2 (% rbp ) . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movq - 7 2 (% rbp ), % rax movq % rax , - 1 6 8 (% rbp ) leaq - 1 6 8 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax testq % rax , % rax je . L 2 2 jmp . L 1 9 . L 7 : . LBE 2 5 : . LBE 2 4 : . LBB 4 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : . LBE 4 6 : . LBB 4 7 : . LBB 2 7 : movq - 7 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) leaq - 1 6 0 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax testq % rax , % rax jle . L 1 1 . LBB 2 8 : . LBB 2 9 : movq - 7 2 (% rbp ), % rax movq % rax , - 2 3 2 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rax , - 1 5 2 (% rbp ) leaq - 1 5 2 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq - 1 (% rax ), % r 1 3 leaq - 2 3 2 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . LBE 2 9 : . LBB 3 0 : movq - 7 2 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq - 1 (% rax ), % r 1 3 leaq - 2 2 4 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . LBE 3 0 : . LBB 3 1 : movq - 7 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 2 1 6 (% rbp ) movq - 7 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 1 3 6 (% rbp ) leaq - 1 3 6 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 3 leaq - 2 1 6 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . LBE 3 1 : . LBE 2 8 : jmp . L 1 0 . L 1 1 : . LBB 3 2 : . LBB 3 3 : . LBB 3 4 : . LBB 3 5 : movq - 7 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) leaq - 1 2 8 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax testq % rax , % rax setg % al testb % al , % al je . L 1 2 . LBB 3 6 : movq - 7 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 1 2 0 (% rbp ) leaq - 1 2 0 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax testq % rax , % rax setg % al . L 1 2 : . LBE 3 6 : . LBE 3 5 : testb % al , % al je . L 1 3 . LBB 3 7 : movq - 7 2 (% rbp ), % rax addq $ 2 , % rax movq % rax , - 1 1 2 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax testq % rax , % rax setg % al . L 1 3 : . LBE 3 7 : . LBE 3 4 : testb % al , % al je . L 1 4 . LBB 3 8 : . LBB 3 9 : movq - 7 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) leaq - 1 0 4 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq - 1 (% rax ), % r 1 3 leaq - 2 0 8 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . LBE 3 9 : . LBB 4 0 : movq - 7 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 2 0 0 (% rbp ) movq - 7 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 9 6 (% rbp ) leaq - 9 6 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq - 1 (% rax ), % r 1 3 leaq - 2 0 0 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . LBE 4 0 : . LBB 4 1 : movq - 7 2 (% rbp ), % rax addq $ 2 , % rax movq % rax , - 1 9 2 (% rbp ) movq - 7 2 (% rbp ), % rax addq $ 2 , % rax movq % rax , - 8 8 (% rbp ) leaq - 8 8 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq - 1 (% rax ), % r 1 3 leaq - 1 9 2 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . LBE 4 1 : . LBB 4 2 : movq - 7 2 (% rbp ), % rax addq $ 3 , % rax movq % rax , - 1 8 4 (% rbp ) movq - 7 2 (% rbp ), % rax addq $ 3 , % rax movq % rax , - 8 0 (% rbp ) leaq - 8 0 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 3 leaq - 1 8 4 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . LBE 4 2 : . LBE 3 8 : jmp . L 1 0 . L 1 4 : . LBB 4 3 : . LBB 4 4 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 1 5 . L 2 2 : . LBE 4 4 : . LBE 4 3 : . LBE 3 3 : . LBE 3 2 : . LBE 2 7 : . LBB 4 5 : . LBB 2 6 : nop . L 1 0 : . LBE 2 6 : . LBE 4 5 : . LBE 4 7 : . LBE 2 1 : . LBB 4 8 : addq $ 1 , % rbx . L 6 : . LBE 4 8 : cmpq % r 1 2 , % rbx jl . L 2 3 . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 4 9 : movb $ 1 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax . L 1 5 : . LBE 4 9 : . LBE 2 : addq $ 2 6 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 6 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 movl $ 6 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 4 8 , % rsp leaq - 6 4 0 (% rbp ), % rax movl $ 2 , % esi movq % rax , % rdi call main . Constructor leaq - 6 4 0 (% rbp ), % rax movl $ 1 , % edx movl $ 1 , % esi movq % rax , % rdi call main . LRUCache . Put leaq - 6 4 0 (% rbp ), % rax movl $ 2 , % edx movl $ 2 , % esi movq % rax , % rdi call main . LRUCache . Put leaq - 6 4 0 (% rbp ), % rax movl $ 1 , % esi movq % rax , % rdi call main . LRUCache . Get movq % rax , % rbx leaq int .. d (% rip ), % rax movq % rax , - 6 8 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 8 4 (% rbp ) movq - 5 8 4 (% rbp ), % rax movq % rbx , (% rax ) movq - 5 8 4 (% rbp ), % rax movq % rax , - 6 8 0 (% rbp ) movdqa - 6 8 8 (% rbp ), % xmm 0 movups % xmm 0 , - 5 7 6 (% rbp ) leaq - 5 7 6 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq $ 1 , - 3 6 0 (% rbp ) movq $ 1 , - 3 5 2 (% rbp ) leaq - 3 3 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 3 5 2 (% rbp ) pushq - 3 6 0 (% rbp ) pushq - 3 6 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 6 0 8 (% rbp ) movq % rdx , - 6 0 0 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) leaq - 6 4 0 (% rbp ), % rax movl $ 3 , % edx movl $ 3 , % esi movq % rax , % rdi call main . LRUCache . Put leaq - 6 4 0 (% rbp ), % rax movl $ 2 , % esi movq % rax , % rdi call main . LRUCache . Get movq % rax , % rbx leaq int .. d (% rip ), % rax movq % rax , - 6 7 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 3 6 (% rbp ) movq - 5 3 6 (% rbp ), % rax movq % rbx , (% rax ) movq - 5 3 6 (% rbp ), % rax movq % rax , - 6 6 4 (% rbp ) movdqa - 6 7 2 (% rbp ), % xmm 1 movups % xmm 1 , - 5 2 8 (% rbp ) leaq - 5 2 8 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 1 , - 2 9 6 (% rbp ) movq $ 1 , - 2 8 8 (% rbp ) leaq - 2 7 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 8 8 (% rbp ) pushq - 2 9 6 (% rbp ) pushq - 3 0 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) leaq - 6 4 0 (% rbp ), % rax movl $ 4 , % edx movl $ 4 , % esi movq % rax , % rdi call main . LRUCache . Put leaq - 6 4 0 (% rbp ), % rax movl $ 1 , % esi movq % rax , % rdi call main . LRUCache . Get movq % rax , % rbx leaq int .. d (% rip ), % rax movq % rax , - 6 5 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 8 (% rbp ) movq - 4 8 8 (% rbp ), % rax movq % rbx , (% rax ) movq - 4 8 8 (% rbp ), % rax movq % rax , - 6 4 8 (% rbp ) movdqa - 6 5 6 (% rbp ), % xmm 2 movups % xmm 2 , - 4 8 0 (% rbp ) leaq - 4 8 0 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 , - 2 3 2 (% rbp ) movq $ 1 , - 2 2 4 (% rbp ) leaq - 2 0 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) leaq - 6 4 0 (% rbp ), % rax movl $ 3 , % esi movq % rax , % rdi call main . LRUCache . Get movq % rax , % rbx leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 0 (% rbp ) movq - 4 4 0 (% rbp ), % rax movq % rbx , (% rax ) movq - 4 4 0 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 4 3 2 (% rbp ) movq % r 1 5 , - 4 2 4 (% rbp ) leaq - 4 3 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) leaq - 6 4 0 (% rbp ), % rax movl $ 4 , % esi movq % rax , % rdi call main . LRUCache . Get movq % rax , % rbx leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) movq - 3 9 2 (% rbp ), % rax movq % rbx , (% rax ) movq - 3 9 2 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 3 8 4 (% rbp ) movq % r 1 3 , - 3 7 6 (% rbp ) leaq - 3 8 4 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 2 movl $ 1 0 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 7 2 , % rsp movb $ 0 , - 3 3 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 int . 7 bool (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 4 8 (% rbp ) . LBB 3 : movq $ 0 , - 5 6 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 1 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 8 8 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 9 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 5 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 5 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) leaq - 6 4 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 bool (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movzbl (% rax ), % eax testb % al , % al jne . L 4 jmp . L 9 . L 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 7 : . LBB 1 8 : . LBB 1 5 : . LBB 1 3 : . LBB 1 4 : movb $ 1 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 6 . L 9 : . LBE 1 4 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 5 6 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movl $ 1 , % r 1 3 d leaq - 7 2 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 bool (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movb % r 1 3 b , (% rax ) . LBE 1 6 : . LBE 1 8 : . LBE 8 : . LBB 1 9 : addq $ 1 , % rbx . L 2 : . LBE 1 9 : cmpq % r 1 2 , % rbx jl . L 1 1 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 2 0 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax . L 6 : . LBE 2 0 : . LBE 2 : addq $ 7 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 5 movl $ 7 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 5 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq $ 0 , - 2 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 8 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 3 : movq $ 0 , - 3 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rcx movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 1 4 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq - 6 4 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 9 : . LBB 1 0 : movq % rdx , - 3 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 3 2 (% rbp ), % rdx addq % rdx , - 1 6 (% rbp ) . LBB 1 2 : . LBB 1 3 : jmp . L 4 . L 3 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 2 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : . LBE 2 0 : . LBB 2 1 : . LBB 1 9 : . LBB 1 8 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : movq - 8 (% rbp ), % rdx subq % rdx , - 1 6 (% rbp ) subq $ 1 , - 8 (% rbp ) . L 4 : . LBE 1 5 : . LBB 1 6 : cmpq $ 0 , - 1 6 (% rbp ) setg % dl testb % dl , % dl je . L 5 . LBB 1 7 : cmpq $ 0 , - 8 (% rbp ) setg % dl . L 5 : . LBE 1 7 : . LBE 1 6 : testb % dl , % dl jne . L 1 3 . LBE 1 8 : . LBE 1 9 : . LBE 2 1 : . LBE 8 : . LBB 2 2 : addq $ 1 , % rax . L 2 : . LBE 2 2 : cmpq % rcx , % rax jl . L 1 4 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 2 3 : movq - 1 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . LBE 2 3 : . LBE 2 : leave ret
. LFB 0 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 1 movl $ 3 7 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 4 4 , % rsp movq % rdi , - 3 6 0 (% rbp ) movq $ 0 , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) . LBB 2 : leaq . LC 1 8 (% rip ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 2 0 , - 2 3 2 (% rbp ) leaq . LC 1 9 (% rip ), % rax movq % rax , - 2 2 4 (% rbp ) movq $ 1 8 , - 2 1 6 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 1 4 , - 2 0 0 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 3 , - 2 9 6 (% rbp ) movq $ 3 , - 2 8 8 (% rbp ) call runtime . makemap_small @ PLT movq % rax , - 7 2 (% rbp ) . LBB 3 : movq $ 0 , - 4 0 (% rbp ) . LBB 4 : jmp . L 2 . L 3 8 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq $ 0 , - 4 8 (% rbp ) . LBB 8 : jmp . L 3 . L 3 7 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : . LBB 1 1 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 4 0 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx testq % rax , % rax js . L 4 cmpq % rdx , % rax jl . L 3 1 . L 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq - 1 9 2 (% rbp ), % rdx salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq - 4 8 (% rbp ), % rax movq % rbx , % rdx testq % rax , % rax js . L 6 cmpq % rdx , % rax jge . L 6 movq % rcx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 1 6 1 (% rbp ) movq - 4 0 (% rbp ), % rbx leaq - 1 6 1 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 uint 8 . 7 int (% rip ), % rdi call runtime . mapassign @ PLT movq % rbx , (% rax ) . LBE 1 1 : . LBE 1 0 : . LBB 1 3 : addq $ 1 , - 4 8 (% rbp ) jmp . L 3 . L 6 : . LBE 1 3 : . LBB 1 4 : . LBB 1 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 : . LBE 1 2 : . LBE 1 4 : movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 7 cmpq % rax , - 4 0 (% rbp ) jl . L 3 2 . L 7 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq - 3 0 4 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rax cmpq % rax , - 4 8 (% rbp ) jl . L 3 7 . LBE 8 : . LBE 7 : . LBE 6 : . LBB 1 5 : addq $ 1 , - 4 0 (% rbp ) . L 2 : . LBE 1 5 : movq - 2 9 6 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 3 8 . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movl $ 0 , % esi leaq string .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 3 6 (% rbp ) movq $ 0 , - 3 2 8 (% rbp ) movq % rbx , - 3 2 0 (% rbp ) . LBB 1 6 : movq $ 0 , - 3 5 2 (% rbp ) movq $ 0 , - 3 4 4 (% rbp ) . LBB 1 7 : . LBB 1 8 : . LBB 1 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 1 9 : jmp . L 1 3 . L 4 0 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 1 4 cmpq % rax , % rbx jge . L 1 4 movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 2 2 : . LBB 2 3 : movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) . LBE 2 3 : . LBB 2 4 : movb $ 1 , - 4 9 (% rbp ) . LBB 2 5 : movq $ 0 , - 6 4 (% rbp ) . LBB 2 6 : jmp . L 1 5 . L 1 4 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBB 4 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : . LBE 4 2 : . LBB 4 3 : . LBB 3 5 : . LBB 3 4 : . LBB 2 7 : nop . LBE 2 7 : . LBB 2 8 : . LBB 2 9 : movq - 3 4 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 6 cmpq % rax , - 6 4 (% rbp ) jge . L 1 6 movq - 3 5 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 9 8 (% rbp ) leaq - 9 8 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 uint 8 . 7 int (% rip ), % rdi call runtime . mapaccess 1 @ PLT movq % rax , % r 1 2 movq - 6 4 (% rbp ), % rax addq $ 1 , % rax movq - 3 4 4 (% rbp ), % rdx testq % rax , % rax jns . L 1 7 jmp . L 1 8 . L 1 6 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : cmpq % rdx , % rax jge . L 1 8 movq - 3 5 2 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 9 7 (% rbp ) leaq - 9 7 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 uint 8 . 7 int (% rip ), % rdi call runtime . mapaccess 1 @ PLT movq (% r 1 2 ), % rdx movq (% rax ), % rax cmpq % rax , % rdx jne . L 1 9 jmp . L 2 0 . L 1 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : . LBB 3 0 : movb $ 0 , - 4 9 (% rbp ) . L 2 0 : . LBE 3 0 : . LBE 2 9 : . LBE 2 8 : . LBB 3 1 : addq $ 1 , - 6 4 (% rbp ) . L 1 5 : . LBE 3 1 : . LBB 3 2 : movzbl - 4 9 (% rbp ), % eax testb % al , % al je . L 2 1 . LBB 3 3 : movq - 3 4 4 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 6 4 (% rbp ) setl % al . L 2 1 : . LBE 3 3 : . LBE 3 2 : testb % al , % al jne . L 3 9 . LBE 3 4 : . LBE 3 5 : . LBB 3 6 : cmpb $ 0 , - 4 9 (% rbp ) je . L 2 4 . LBB 3 7 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 5 . LBB 3 8 : movq - 1 2 8 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) . LBE 3 8 : jmp . L 2 6 . L 2 5 : . LBB 3 9 : movq - 1 2 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rdx movq % rcx , - 3 3 6 (% rbp ) movq % rax , - 3 2 8 (% rbp ) movq % rdx , - 3 2 0 (% rbp ) . L 2 6 : . LBE 3 9 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 4 , % rdx addq % rdx , % rax movq - 3 4 4 (% rbp ), % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 7 . LBB 4 0 : movq - 3 5 2 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 2 4 . L 2 7 : . LBE 4 0 : . LBB 4 1 : movq - 3 5 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 4 : . LBE 4 1 : . LBE 3 7 : . LBE 3 6 : . LBE 4 3 : . LBE 2 1 : . LBB 4 4 : addq $ 1 , % rbx . L 1 3 : . LBE 4 4 : cmpq % r 1 3 , % rbx jl . L 4 0 . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 4 5 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 3 6 0 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 5 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 5 : . LBE 2 : movq - 3 6 0 (% rbp ), % rax addq $ 3 4 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 9 movl $ 2 3 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 8 4 , % rsp movq $ 0 , - 2 0 8 (% rbp ) movq $ 0 , - 2 0 0 (% rbp ) . LBB 2 : movb $ 0 , - 4 9 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 3 : movq $ 0 , - 7 2 (% rbp ) . LBB 4 : jmp . L 2 . L 3 8 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq $ 0 , - 8 0 (% rbp ) . LBB 8 : jmp . L 3 . L 3 7 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : . LBB 1 1 : movq - 7 2 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax je . L 3 4 . LBE 1 1 : . LBB 1 3 : movq $ 0 , - 8 8 (% rbp ) . LBB 1 4 : jmp . L 6 . L 3 6 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : . LBB 1 8 : movq - 7 2 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 7 . LBB 1 9 : movq - 8 0 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax sete % al . L 7 : . LBE 1 9 : . LBE 1 8 : testb % al , % al jne . L 3 5 . LBE 1 7 : movq - 7 2 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax addq % rax , % rdx movq - 8 8 (% rbp ), % rax addq % rax , % rdx movl $ 6 , % eax subq % rdx , % rax movq % rax , - 9 6 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 1 0 cmpq % rax , - 7 2 (% rbp ) jl . L 2 7 . L 1 0 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 1 2 cmpq % rax , - 8 0 (% rbp ) jl . L 2 8 . L 1 2 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq 1 6 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax movq % rax , % rsi movq 1 6 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq % rsi , % rax movq % rax , - 1 0 4 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 8 (% rbp ) js . L 1 4 cmpq % rax , - 8 8 (% rbp ) jl . L 2 9 . L 1 4 : movq - 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 9 6 (% rbp ) js . L 1 6 cmpq % rax , - 9 6 (% rbp ) jl . L 3 0 . L 1 6 : movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq 1 6 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax movq % rax , % rsi movq 1 6 (% rbp ), % rdx movq - 9 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq % rsi , % rax movq % rax , - 1 1 2 (% rbp ) . LBB 2 1 : . LBB 2 2 : cmpq $ 2 3 , - 1 0 4 (% rbp ) setle % al testb % al , % al je . L 1 8 . LBB 2 3 : cmpq $ 5 9 , - 1 1 2 (% rbp ) setle % al . L 1 8 : . LBE 2 3 : . LBE 2 2 : testb % al , % al je . L 9 . LBB 2 4 : . LBB 2 5 : movq - 1 0 4 (% rbp ), % rdx movq % rdx , % rax salq $ 4 , % rax subq % rdx , % rax salq $ 2 , % rax movq % rax , % rdx movq - 1 1 2 (% rbp ), % rax addq % rdx , % rax cmpq % rax , - 6 4 (% rbp ) jg . L 9 . LBB 2 6 : movq - 1 0 4 (% rbp ), % rdx movq % rdx , % rax salq $ 4 , % rax subq % rdx , % rax salq $ 2 , % rax movq % rax , % rdx movq - 1 1 2 (% rbp ), % rax addq % rdx , % rax movq % rax , - 6 4 (% rbp ) movb $ 1 , - 4 9 (% rbp ) jmp . L 9 . L 3 5 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBE 2 1 : . LBB 2 7 : . LBB 2 0 : nop . L 9 : . LBE 2 0 : . LBE 2 7 : . LBE 1 6 : . LBB 2 8 : addq $ 1 , - 8 8 (% rbp ) . L 6 : . LBE 2 8 : cmpq $ 3 , - 8 8 (% rbp ) jle . L 3 6 jmp . L 5 . L 3 4 : . LBE 1 4 : . LBE 1 3 : . LBB 2 9 : . LBB 1 2 : nop . L 5 : . LBE 1 2 : . LBE 2 9 : . LBE 1 0 : . LBB 3 0 : addq $ 1 , - 8 0 (% rbp ) . L 3 : . LBE 3 0 : cmpq $ 3 , - 8 0 (% rbp ) jle . L 3 7 . LBE 8 : . LBE 7 : . LBE 6 : . LBB 3 1 : addq $ 1 , - 7 2 (% rbp ) . L 2 : . LBE 3 1 : cmpq $ 3 , - 7 2 (% rbp ) jle . L 3 8 . LBE 4 : . LBE 3 : . LBB 3 2 : cmpb $ 0 , - 4 9 (% rbp ) je . L 2 4 . LBB 3 3 : . LBB 3 4 : leaq int .. d (% rip ), % rax movq % rax , - 2 2 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 9 2 (% rbp ) movq - 6 4 (% rbp ), % rcx movabsq $- 8 6 0 8 4 8 0 5 6 7 7 3 1 1 2 4 0 8 7 , % rdx movq % rcx , % rax imulq % rdx leaq (% rdx ,% rcx ), % rax sarq $ 5 , % rax sarq $ 6 3 , % rcx subq % rcx , % rax movq % rax , % rdx movq - 1 9 2 (% rbp ), % rax movq % rdx , (% rax ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 2 1 6 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 6 4 (% rbp ), % rcx movabsq $- 8 6 0 8 4 8 0 5 6 7 7 3 1 1 2 4 0 8 7 , % rdx movq % rcx , % rax imulq % rdx leaq (% rdx ,% rcx ), % rax sarq $ 5 , % rax movq % rcx , % rsi sarq $ 6 3 , % rsi subq % rsi , % rax movq % rax , % rdx movq % rdx , % rax salq $ 4 , % rax subq % rdx , % rax salq $ 2 , % rax subq % rax , % rcx movq % rcx , % rdx movq - 1 8 4 (% rbp ), % rax movq % rdx , (% rax ) movq - 1 8 4 (% rbp ), % rax movq % rax , % r 1 5 movdqa - 2 2 4 (% rbp ), % xmm 0 movups % xmm 0 , - 1 7 6 (% rbp ) movq % r 1 4 , - 1 6 0 (% rbp ) movq % r 1 5 , - 1 5 2 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 2 , - 1 3 6 (% rbp ) movq $ 2 , - 1 2 8 (% rbp ) leaq . LC 1 7 (% rip ), % r 1 2 movl $ 9 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx jmp . L 2 6 . L 2 4 : . LBE 3 4 : . LBE 3 3 : . LBB 3 5 : . LBB 3 6 : leaq . LC 1 8 (% rip ), % rcx movl $ 0 , % ebx movq % rcx , - 2 0 8 (% rbp ) movq % rbx , - 2 0 0 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx . L 2 6 : . LBE 3 6 : . LBE 3 5 : . LBE 3 2 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 4 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 3 6 , % rsp movq % rdi , - 1 5 2 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 1 5 2 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : leaq . LC 3 1 (% rip ), % rcx movl $ 4 , % ebx movq % rcx , - 1 2 8 (% rbp ) movq % rbx , - 1 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx jmp . L 1 0 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : leaq . LC 0 (% rip ), % rax movl $ 0 , % edx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) . LBB 6 : movq $ 0 , - 4 0 (% rbp ) . LBB 7 : jmp . L 4 . L 1 3 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 1 5 2 (% rbp ), % rcx movabsq $ 2 3 6 1 1 8 3 2 4 1 4 3 4 8 2 2 6 0 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 7 , % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax imulq $ 1 0 0 0 , % rax , % rdx movq % rcx , % rax subq % rdx , % rax testq % rax , % rax je . L 5 . LBB 1 1 : movq - 1 5 2 (% rbp ), % rcx movabsq $ 2 3 6 1 1 8 3 2 4 1 4 3 4 8 2 2 6 0 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 7 , % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax imulq $ 1 0 0 0 , % rax , % rdx movq % rcx , % rax subq % rdx , % rax movq % rax , % rdi call go . leetcode 0 2 7 3 . lessK movq 8 + go . leetcode 0 2 7 3 . thousands (% rip ), % rcx cmpq $ 0 , - 4 0 (% rbp ) js . L 6 cmpq % rcx , - 4 0 (% rbp ) jl . L 1 1 . L 6 : movq - 4 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 1 : movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq go . leetcode 0 2 7 3 . thousands (% rip ), % rdx movq - 4 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) leaq . LC 3 2 (% rip ), % rax movq % rax , - 8 0 (% rbp ) movq $ 1 , - 7 2 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movl $ 4 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) . L 5 : . LBE 1 1 : . LBE 1 0 : movq - 1 5 2 (% rbp ), % rcx movabsq $ 2 3 6 1 1 8 3 2 4 1 4 3 4 8 2 2 6 0 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 7 , % rax sarq $ 6 3 , % rcx movq % rcx , % rdx subq % rdx , % rax movq % rax , - 1 5 2 (% rbp ) . LBE 9 : . LBB 1 2 : addq $ 1 , - 4 0 (% rbp ) . L 4 : . LBE 1 2 : cmpq $ 0 , - 1 5 2 (% rbp ) jg . L 1 3 . LBE 7 : . LBE 6 : . LBB 1 3 : leaq . LC 3 2 (% rip ), % r 1 2 movl $ 1 , % r 1 3 d movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rax movq % r 1 2 , % rdx movq % r 1 3 , % rcx movq % rsi , % rdi movq % rax , % rsi call strings . TrimRight @ PLT movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx . L 1 0 : . LBE 1 3 : . LBE 2 : addq $ 1 3 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) cmpq $ 0 , - 4 0 (% rbp ) jne . L 2 call runtime . panicmem @ PLT . L 2 : movq - 4 0 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . LBE 3 : . LBE 2 : leave ret
. LFB 0 : leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 1 movl $ 2 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 7 2 , % rsp movq % rdi , - 2 8 0 (% rbp ) movq % rsi , - 2 8 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 2 8 8 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) movq - 2 8 0 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 2 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : . LBB 7 : movq - 2 8 8 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax sete % al testb % al , % al je . L 4 . LBB 8 : movq - 2 8 8 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax sete % al . L 4 : . LBE 8 : . LBE 7 : testb % al , % al je . L 5 . LBB 9 : . LBB 1 0 : movq - 2 8 8 (% rbp ), % rax movq (% rax ), % rbx leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq - 2 1 6 (% rbp ), % rax movq % rbx , (% rax ) movq - 2 1 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 , - 2 3 2 (% rbp ) movq $ 1 , - 2 2 4 (% rbp ) movq - 2 8 0 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 2 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 5 : . LBE 1 0 : . LBE 9 : . LBE 6 : movq - 2 8 8 (% rbp ), % rax movq 8 (% rax ), % rdx leaq - 2 7 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . leetcode 0 0 9 4 . inorderTraversal movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rbx movq - 2 8 8 (% rbp ), % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 6 . LBB 1 1 : movq - 2 0 8 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) . LBE 1 1 : jmp . L 7 . L 6 : . LBB 1 2 : movq - 2 0 8 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rdx movq % rcx , - 2 7 2 (% rbp ) movq % rax , - 2 6 4 (% rbp ) movq % rdx , - 2 5 6 (% rbp ) . L 7 : . LBE 1 2 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) movq - 2 8 8 (% rbp ), % rax movq 1 6 (% rax ), % rdx leaq - 1 7 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . leetcode 0 0 9 4 . inorderTraversal movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rbx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % r 1 2 leaq (% rbx ,% r 1 2 ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 8 . LBB 1 3 : movq - 1 4 4 (% rbp ), % rsi leaq - 4 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) . LBE 1 3 : jmp . L 9 . L 8 : . LBB 1 4 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq % rcx , - 2 7 2 (% rbp ) movq % rax , - 2 6 4 (% rbp ) movq % rdx , - 2 5 6 (% rbp ) . L 9 : . LBE 1 4 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq % r 1 2 , % rax leaq 0 (,% rax , 8 ), % rdx movq - 1 1 2 (% rbp ), % rax movq - 1 4 4 (% rbp ), % rcx movq % rbx , % rsi salq $ 3 , % rsi addq % rsi , % rcx movq % rax , % rsi movq % rcx , % rdi call memmove @ PLT . LBB 1 5 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 8 0 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 2 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 1 5 : . LBE 2 : movq - 2 8 0 (% rbp ), % rax addq $ 2 7 2 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 3 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 9 movl $ 3 2 8 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 9 6 , % rsp movb $ 0 , - 3 3 (% rbp ) . LBB 2 : movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) . LBB 3 : movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 7 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 2 2 4 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : leaq - 9 6 (% rbp ), % rdi movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx leaq - 3 2 0 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call strings . Builder . WriteString @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) . LBE 1 1 : . LBE 8 : . LBB 1 3 : addq $ 1 , % rbx jmp . L 2 . L 3 : . LBE 1 3 : . LBB 1 4 : . LBB 1 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 2 : . LBE 1 4 : cmpq % r 1 2 , % rbx jl . L 1 7 . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) movq $ 0 , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) . LBB 1 5 : movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) . LBB 1 6 : . LBB 1 7 : . LBB 1 8 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 8 : jmp . L 6 . L 1 8 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : . LBB 2 1 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 7 cmpq % rax , % rbx jge . L 7 movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 2 1 : . LBB 2 2 : movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) . LBE 2 2 : . LBB 2 3 : leaq - 6 4 (% rbp ), % rdi movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx leaq - 2 8 8 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call strings . Builder . WriteString @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) . LBE 2 3 : . LBE 2 0 : . LBB 2 5 : addq $ 1 , % rbx jmp . L 6 . L 7 : . LBE 2 5 : . LBB 2 6 : . LBB 2 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 2 4 : . LBE 2 6 : cmpq % r 1 2 , % rbx jl . L 1 8 . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBB 2 7 : leaq - 3 2 0 (% rbp ), % rax movq % rax , % rdi call strings . Builder . String @ PLT movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq - 2 8 8 (% rbp ), % rax movq % rax , % rdi call strings . Builder . String @ PLT movq % r 1 3 , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jne . L 1 0 movq % r 1 2 , % rsi movq % rax , % rcx cmpq % rcx , % rsi jne . L 1 1 movl $ 1 , % eax jmp . L 1 3 . L 1 1 : movq % rdx , % rcx movq % rcx , % rsi movq % rax , % rcx movq % r 1 2 , % rax movq % rsi , % rdx movq % rcx , % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 1 3 . L 1 0 : movl $ 0 , % eax . L 1 3 : movb % al , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax . LBE 2 7 : . LBE 2 : addq $ 2 9 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 4 0 movl $ 2 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 6 : ret . L 4 0 : pushq % rbp movq % rsp , % rbp subq $ 1 6 , % rsp movq % rdi , - 8 (% rbp ) movq % rsi , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax movq 1 6 (% rax ), % rax addq $ 2 4 , % rax movq - 1 6 (% rbp ), % rdx movq 2 4 (% rdx ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 6 . LBB 3 7 : movq % rdx , (% rax ) . LBE 3 7 : jmp . L 3 7 . L 3 6 : . LBB 3 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 7 : . LBE 3 8 : movq - 1 6 (% rbp ), % rax movq 2 4 (% rax ), % rax addq $ 1 6 , % rax movq - 1 6 (% rbp ), % rdx movq 1 6 (% rdx ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 3 8 . LBB 3 9 : movq % rdx , (% rax ) . LBE 3 9 : jmp . L 3 5 . L 3 8 : . LBB 4 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 5 : . LBE 4 0 : leave ret
. LFB 0 : leaq - 3 9 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 9 movl $ 3 9 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 9 : pushq % rbp movq % rsp , % rbp subq $ 3 8 4 , % rsp movq $ 0 , - 8 (% rbp ) . LBB 2 : leaq - 1 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call go . day 1 6 0 . buildAdjacencyMatrix addq $ 3 2 , % rsp movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 3 0 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) . LBB 3 : cmpq $ 0 , - 1 6 (% rbp ) je . L 2 movq - 1 6 (% rbp ), % rax movq (% rax ), % rax testq % rax , % rax jne . L 3 . L 2 : . LBB 4 : . LBB 5 : movq $ 0 , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 8 . L 3 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : movq $ 0 , - 3 8 4 (% rbp ) movq $ 0 , - 3 7 6 (% rbp ) . LBB 7 : . LBB 8 : . LBB 9 : leaq - 2 8 8 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 string . 7 map . 6 string . 7 int (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 9 : movq - 2 8 8 (% rbp ), % rax testq % rax , % rax je . L 6 . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 2 8 8 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 1 2 : movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) . LBB 1 3 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) nop . L 6 : . LBE 1 3 : . LBE 1 1 : . LBE 8 : . LBE 7 : . LBE 6 : leaq - 9 6 (% rbp ), % rax movq - 1 6 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rsi movq - 3 2 8 (% rbp ), % rdx movq % rax , % rdi call go . day 1 6 0 . farthestNode movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) leaq - 6 4 (% rbp ), % rax movq - 1 6 (% rbp ), % rcx movq - 3 5 2 (% rbp ), % rsi movq - 3 4 4 (% rbp ), % rdx movq % rax , % rdi call go . day 1 6 0 . farthestNode movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . LBB 1 4 : movq - 3 2 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 8 : . LBE 1 4 : . LBE 2 : leave ret
leaq - 7 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 7 movl $ 7 2 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 4 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 8 0 , % rsp movq % rdi , - 5 0 4 (% rbp ) leaq type ... 6 5 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 string . 2 . go . Solution . expect . 0 string . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 7 2 (% rbp ) leaq . LC 2 6 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 4 6 4 (% rbp ) movq % r 1 3 , - 4 5 6 (% rbp ) leaq . LC 2 7 (% rip ), % r 1 4 movl $ 5 , % r 1 5 d movq % r 1 4 , - 4 4 8 (% rbp ) movq % r 1 5 , - 4 4 0 (% rbp ) leaq . LC 2 8 (% rip ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 3 , - 7 1 2 (% rbp ) movdqa - 7 2 0 (% rbp ), % xmm 0 movups % xmm 0 , - 4 3 2 (% rbp ) leaq . LC 2 9 (% rip ), % rax movq % rax , - 7 0 4 (% rbp ) movq $ 8 , - 6 9 6 (% rbp ) movdqa - 7 0 4 (% rbp ), % xmm 1 movups % xmm 1 , - 4 1 6 (% rbp ) leaq . LC 3 0 (% rip ), % rdi movq % rdi , - 6 8 8 (% rbp ) movq $ 4 , - 6 8 0 (% rbp ) movdqa - 6 8 8 (% rbp ), % xmm 2 movups % xmm 2 , - 4 0 0 (% rbp ) leaq . LC 3 1 (% rip ), % rbx movq % rbx , - 6 7 2 (% rbp ) movq $ 2 , - 6 6 4 (% rbp ) movdqa - 6 7 2 (% rbp ), % xmm 3 movups % xmm 3 , - 3 8 4 (% rbp ) movq % rax , - 6 5 6 (% rbp ) movq $ 8 , - 6 4 8 (% rbp ) movdqa - 6 5 6 (% rbp ), % xmm 4 movups % xmm 4 , - 3 6 8 (% rbp ) leaq . LC 3 3 (% rip ), % rdi movq % rdi , - 6 4 0 (% rbp ) movq $ 1 , - 6 3 2 (% rbp ) movdqa - 6 4 0 (% rbp ), % xmm 5 movups % xmm 5 , - 3 5 2 (% rbp ) movq % rdi , - 6 2 4 (% rbp ) movq $ 1 , - 6 1 6 (% rbp ) movdqa - 6 2 4 (% rbp ), % xmm 6 movups % xmm 6 , - 3 3 6 (% rbp ) movq % rax , - 6 0 8 (% rbp ) movq $ 8 , - 6 0 0 (% rbp ) movdqa - 6 0 8 (% rbp ), % xmm 7 movups % xmm 7 , - 3 2 0 (% rbp ) movq % rbx , - 5 9 2 (% rbp ) movq $ 2 , - 5 8 4 (% rbp ) movdqa - 5 9 2 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movq % rbx , - 5 7 6 (% rbp ) movq $ 2 , - 5 6 8 (% rbp ) movdqa - 5 7 6 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) movq % rax , - 5 6 0 (% rbp ) movq $ 8 , - 5 5 2 (% rbp ) movdqa - 5 6 0 (% rbp ), % xmm 2 movups % xmm 2 , - 2 7 2 (% rbp ) leaq . LC 3 4 (% rip ), % rax movq % rax , - 5 4 4 (% rbp ) movq $ 3 , - 5 3 6 (% rbp ) movdqa - 5 4 4 (% rbp ), % xmm 3 movups % xmm 3 , - 2 5 6 (% rbp ) movq % rax , - 5 2 8 (% rbp ) movq $ 3 , - 5 2 0 (% rbp ) movdqa - 5 2 8 (% rbp ), % xmm 4 movups % xmm 4 , - 2 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 3 . LBB 3 4 : movq - 4 7 2 (% rbp ), % rax movq - 4 6 4 (% rbp ), % rcx movq - 4 5 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 1 4 4 (% rax ) movq % rbx , 1 5 2 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 1 6 0 (% rax ) movq % rbx , 1 6 8 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 1 7 6 (% rax ) movq % rbx , 1 8 4 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 1 9 2 (% rax ) movq % rbx , 2 0 0 (% rax ) movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq % rcx , 2 0 8 (% rax ) movq % rbx , 2 1 6 (% rax ) movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rbx movq % rcx , 2 2 4 (% rax ) movq % rbx , 2 3 2 (% rax ) . LBE 3 4 : jmp . L 3 4 . L 3 3 : . LBB 3 5 : movq - 4 7 2 (% rbp ), % rax leaq - 4 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 5 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 string . 2 . go . Solution . expect . 0 string . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 4 : . LBE 3 5 : movq - 4 7 2 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq $ 5 , - 4 8 8 (% rbp ) movq $ 5 , - 4 8 0 (% rbp ) . LBB 3 6 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 string . 2 . go . Solution . expect . 0 string . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) . LBB 3 7 : . LBB 3 8 : . LBB 3 9 : movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 3 9 : jmp . L 3 5 . L 4 6 : . LBB 4 0 : nop . LBE 4 0 : . LBB 4 1 : . LBB 4 2 : movq - 1 6 8 (% rbp ), % rax testq % rbx , % rbx js . L 3 6 cmpq % rax , % rbx jge . L 3 6 movq - 1 7 6 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 2 4 (% rbp ) movq % rdi , - 2 1 6 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 0 8 (% rbp ) movq % rdi , - 2 0 0 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) . LBE 4 2 : . LBB 4 3 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 5 6 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 3 7 jmp . L 4 4 . L 3 6 : . LBE 4 3 : . LBB 4 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : . LBE 4 6 : . LBB 4 7 : . LBB 4 4 : movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 3 9 . L 4 4 : . LBE 4 4 : . LBB 4 5 : leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 string . 2 . go . Solution . expect . 0 string . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 9 : . LBE 4 5 : . LBE 4 7 : . LBB 4 8 : leaq go . Solution . TestSolution 3 .. func 1 (% rip ), % r 1 4 movq - 5 6 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 string . 2 . go . Solution . expect . 0 string . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 0 . LBB 4 9 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 9 : jmp . L 4 1 . L 4 0 : . LBB 5 0 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 string . 2 . go . Solution . expect . 0 string . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 1 : . LBE 5 0 : movq - 8 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 5 0 4 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 4 8 : . LBE 4 1 : . LBB 5 1 : addq $ 1 , % rbx . L 3 5 : . LBE 5 1 : cmpq % r 1 3 , % rbx jl . L 4 6 . LBE 3 8 : . LBE 3 7 : . LBE 3 6 : addq $ 6 8 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 5 8 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 5 5 0 movl $ 1 5 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 7 4 : ret . L 1 5 5 0 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 3 6 , % rsp movq % rdi , - 1 3 6 (% rbp ) movq % rsi , - 1 4 4 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 1 2 4 9 : movq 2 4 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 9 6 (% rbp ) movq % rbx , - 8 8 (% rbp ) movq % rbx , - 8 0 (% rbp ) . LBB 1 2 5 0 : movq $ 0 , - 3 2 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 1 2 5 1 : . LBB 1 2 5 2 : . LBB 1 2 5 3 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rsi movl $ 0 , % eax . LBE 1 2 5 3 : jmp . L 1 5 3 6 . L 1 5 4 9 : . LBB 1 2 5 4 : nop . LBE 1 2 5 4 : . LBB 1 2 5 5 : . LBB 1 2 5 6 : movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 1 5 3 7 cmpq % rdx , % rax jge . L 1 5 3 7 movq - 6 4 (% rbp ), % rdx movq % rax , % rcx salq $ 3 , % rcx addq % rcx , % rdx movq (% rdx ), % rdx . LBE 1 2 5 6 : . LBB 1 2 5 7 : movq % rax , - 3 2 (% rbp ) movq % rdx , - 4 0 (% rbp ) . LBE 1 2 5 7 : . LBB 1 2 5 8 : movq - 3 2 (% rbp ), % rdx addq $ 1 , % rdx movq - 8 8 (% rbp ), % rcx testq % rdx , % rdx jns . L 1 5 3 8 jmp . L 1 5 3 9 . L 1 5 3 7 : . LBE 1 2 5 8 : . LBB 1 2 5 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 5 3 8 : . LBE 1 2 5 9 : . LBB 1 2 6 0 : cmpq % rcx , % rdx jl . L 1 5 4 6 . L 1 5 3 9 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 4 6 : movq - 8 8 (% rbp ), % rcx cmpq $ 0 , - 3 2 (% rbp ) js . L 1 5 4 1 cmpq % rcx , - 3 2 (% rbp ) jl . L 1 5 4 7 . L 1 5 4 1 : movq - 3 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 5 4 7 : movq - 9 6 (% rbp ), % rdi movq - 3 2 (% rbp ), % rcx salq $ 3 , % rcx addq % rdi , % rcx movq (% rcx ), % rdi movq - 9 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq - 4 0 (% rbp ), % rcx addq % rdi , % rcx movq % rcx , (% rdx ) . LBE 1 2 6 0 : . LBE 1 2 5 5 : . LBB 1 2 6 1 : addq $ 1 , % rax . L 1 5 3 6 : . LBE 1 2 6 1 : cmpq % rsi , % rax jl . L 1 5 4 9 . LBE 1 2 5 2 : . LBE 1 2 5 1 : . LBE 1 2 5 0 : movq - 8 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 2 8 (% rbp ) movq % rbx , - 1 2 0 (% rbp ) movq % rbx , - 1 1 2 (% rbp ) . LBB 1 2 6 2 : movq - 8 8 (% rbp ), % rax leaq - 1 (% rax ), % rsi movq - 1 4 4 (% rbp ), % rdx movq - 1 3 6 (% rbp ), % rax pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rdx , % rcx movq % rax , % rdx movl $ 0 , % edi call go . leetcode . helper 3 2 7 addq $ 4 8 , % rsp movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . LBE 1 2 6 2 : . LBE 1 2 4 9 : movq - 8 (% rbp ), % rbx leave ret
leaq - 5 2 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 2 movl $ 5 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 2 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 subq $ 4 8 0 , % rsp leaq . LC 6 (% rip ), % rax movl $ 8 , % edx leaq - 2 0 8 (% rbp ), % rcx movq % rax , % rsi movq % rdx , % rdi movq % rdx , % rax movq % rax , % rdx movq % rcx , % rdi call main . ReadFile movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq - 4 1 6 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) leaq string .. d (% rip ), % r 1 2 leaq go .. C 6 (% rip ), % r 1 3 leaq type ... 6 . 7 uint 8 (% rip ), % rax movq % rax , - 5 1 2 (% rbp ) leaq type ... 6 . 7 uint 8 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 8 . LBB 8 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 8 : jmp . L 1 9 . L 1 8 : . LBB 9 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 uint 8 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 9 : . LBE 9 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 5 0 4 (% rbp ) movq % r 1 2 , - 3 0 4 (% rbp ) movq % r 1 3 , - 2 9 6 (% rbp ) movdqa - 5 1 2 (% rbp ), % xmm 0 movups % xmm 0 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 2 , - 1 5 2 (% rbp ) movq $ 2 , - 1 4 4 (% rbp ) leaq - 1 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) leaq string .. d (% rip ), % r 1 4 leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) subq $ 8 , % rsp pushq - 4 6 4 (% rbp ) pushq - 4 7 2 (% rbp ) pushq - 4 8 0 (% rbp ) movl $ 0 , % edi call runtime . slicebytetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 0 . LBB 1 0 : movq - 2 4 8 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 0 : jmp . L 2 1 . L 2 0 : . LBB 1 1 : movq - 2 4 8 (% rbp ), % rax leaq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 1 : . LBE 1 1 : movq - 2 4 8 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 2 2 4 (% rbp ) movq % r 1 5 , - 2 1 6 (% rbp ) leaq - 2 2 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 3 2 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 6 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 5 2 , % rsp movq % rdi , - 1 3 6 (% rbp ) movq % rsi , % rax movq % rdx , % rsi movq % rsi , % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq % rcx , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rdx movq - 1 5 2 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . HashTable . generateHash movb % al , - 2 5 (% rbp ) . LBB 2 : movzbl - 2 5 (% rbp ), % edx movq - 1 3 6 (% rbp ), % rax movq (% rax ,% rdx , 8 ), % rax testq % rax , % rax jne . L 2 . LBB 3 : movzbl - 2 5 (% rbp ), % eax leaq 0 (,% rax , 8 ), % rdx movq - 1 3 6 (% rbp ), % rax leaq (% rdx ,% rax ), % rbx leaq go . HashTable . TableItem .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 0 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 . LBB 4 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 4 : jmp . L 4 . L 3 : . LBB 5 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq go . HashTable . TableItem .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 : . LBE 5 : movq - 1 2 0 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 . LBB 6 : movq % rax , (% rbx ) . LBE 6 : jmp . L 1 . L 5 : . LBB 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . gcWriteBarrier @ PLT . LBE 7 : jmp . L 1 . L 2 : . LBE 3 : . LBE 2 : movzbl - 2 5 (% rbp ), % edx movq - 1 3 6 (% rbp ), % rax movq (% rax ,% rdx , 8 ), % rax movq % rax , - 2 4 (% rbp ) . LBB 8 : . LBB 9 : jmp . L 8 . L 1 5 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : movq - 2 4 (% rbp ), % rax movq 2 4 (% rax ), % rax movq % rax , - 2 4 (% rbp ) . L 8 : . LBE 1 1 : movq - 2 4 (% rbp ), % rax movq 2 4 (% rax ), % rax testq % rax , % rax jne . L 1 5 . LBE 9 : . LBE 8 : movq - 2 4 (% rbp ), % rax leaq 2 4 (% rax ), % rbx leaq go . HashTable . TableItem .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq $ 0 , - 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 . LBB 1 2 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 1 2 : jmp . L 1 2 . L 1 1 : . LBB 1 3 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq go . HashTable . TableItem .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 : . LBE 1 3 : movq - 7 2 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 3 . LBB 1 4 : movq % rax , (% rbx ) . LBE 1 4 : jmp . L 1 . L 1 3 : . LBB 1 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . gcWriteBarrier @ PLT . L 1 : . LBE 1 5 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 8 1 6 8 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 4 movl $ 8 1 6 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 4 : pushq % rbp movq % rsp , % rbp subq $ 8 1 6 8 0 , % rsp movq % rdi , - 8 1 6 5 6 (% rbp ) movq % rsi , - 8 1 6 6 4 (% rbp ) movq % rdx , - 8 1 6 7 2 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 : leaq - 8 1 6 4 8 (% rbp ), % rax movl $ 8 1 6 0 8 , % edx movl $ 0 , % esi movq % rax , % rdi call memset @ PLT . LBB 3 : movq - 8 1 6 7 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 8 (% rbp ) . LBB 4 : jmp . L 2 . L 4 3 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 8 (% rbp ), % rax movq % rax , % rdi call go . problem 0 9 2 0 . factorial cmpq $ 0 , - 8 (% rbp ) js . L 3 cmpq $ 1 0 0 , - 8 (% rbp ) jle . L 3 0 . L 3 : movq - 8 (% rbp ), % rax movl $ 1 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : cmpq $ 0 , - 8 (% rbp ) js . L 5 cmpq $ 1 0 0 , - 8 (% rbp ) jle . L 3 1 . L 5 : movq - 8 (% rbp ), % rax movl $ 1 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq - 8 (% rbp ), % rdx imulq $ 8 1 6 , % rdx , % rdx addq % rbp , % rdx subq $ 8 1 6 4 8 , % rdx movq % rax , (% rdx ) . LBB 7 : movq - 8 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . LBB 8 : jmp . L 7 . L 4 2 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : movq - 8 (% rbp ), % rax leaq - 1 (% rax ), % rdx testq % rdx , % rdx js . L 8 cmpq $ 1 0 0 , % rdx jle . L 3 2 . L 8 : movl $ 1 0 1 , % esi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq - 1 6 (% rbp ), % rax leaq - 1 (% rax ), % rdi testq % rdi , % rdi js . L 1 0 cmpq $ 1 0 0 , % rdi jle . L 3 3 . L 1 0 : movl $ 1 0 1 , % esi call runtime . goPanicIndex @ PLT . L 3 3 : cmpq $ 0 , - 8 (% rbp ) js . L 1 2 cmpq $ 1 0 0 , - 8 (% rbp ) jle . L 3 4 . L 1 2 : movq - 8 (% rbp ), % rax movl $ 1 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq - 1 6 (% rbp ), % rax leaq - 1 (% rax ), % rcx testq % rcx , % rcx js . L 1 4 cmpq $ 1 0 0 , % rcx jle . L 3 5 . L 1 4 : movl $ 1 0 1 , % esi movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax leaq 0 (,% rax , 4 ), % rsi addq % rsi , % rax salq $ 2 , % rax addq % rdx , % rax addq % rdi , % rax movq - 8 1 6 4 8 (% rbp ,% rax , 8 ), % rax imulq - 8 (% rbp ), % rax movq % rax , % rsi movq - 8 (% rbp ), % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax leaq 0 (,% rax , 4 ), % rdi addq % rdi , % rax salq $ 2 , % rax addq % rdx , % rax addq % rcx , % rax movq - 8 1 6 4 8 (% rbp ,% rax , 8 ), % rdx movq - 8 (% rbp ), % rax subq - 8 1 6 7 2 (% rbp ), % rax imulq % rdx , % rax addq % rsi , % rax movq % rax , - 3 2 (% rbp ) cmpq $ 0 , - 8 (% rbp ) js . L 1 6 cmpq $ 1 0 0 , - 8 (% rbp ) jle . L 3 6 . L 1 6 : movq - 8 (% rbp ), % rax movl $ 1 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : cmpq $ 0 , - 1 6 (% rbp ) js . L 1 8 cmpq $ 1 0 0 , - 1 6 (% rbp ) jle . L 3 7 . L 1 8 : movq - 1 6 (% rbp ), % rax movl $ 1 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 3 2 (% rbp ), % rcx movabsq $- 8 5 4 3 2 2 3 8 2 8 7 5 1 1 5 1 1 3 1 , % rdx movq % rcx , % rax imulq % rdx leaq (% rdx ,% rcx ), % rax sarq $ 2 9 , % rax movq % rcx , % rsi sarq $ 6 3 , % rsi subq % rsi , % rax movq % rax , % rdx imulq $ 1 0 0 0 0 0 0 0 0 7 , % rdx , % rax subq % rax , % rcx movq % rcx , % rdx movq - 8 (% rbp ), % rcx movq % rcx , % rax salq $ 2 , % rax addq % rcx , % rax leaq 0 (,% rax , 4 ), % rsi addq % rsi , % rax salq $ 2 , % rax addq % rcx , % rax movq - 1 6 (% rbp ), % rcx addq % rcx , % rax movq % rdx , - 8 1 6 4 8 (% rbp ,% rax , 8 ) . LBE 1 0 : . LBB 1 1 : addq $ 1 , - 1 6 (% rbp ) . L 7 : . LBE 1 1 : movq - 1 6 (% rbp ), % rax cmpq - 8 1 6 6 4 (% rbp ), % rax jle . L 4 2 . LBE 8 : . LBE 7 : . LBE 6 : . LBB 1 2 : addq $ 1 , - 8 (% rbp ) . L 2 : . LBE 1 2 : movq - 8 (% rbp ), % rax cmpq - 8 1 6 5 6 (% rbp ), % rax jle . L 4 3 . LBE 4 : . LBE 3 : . LBB 1 3 : cmpq $ 0 , - 8 1 6 5 6 (% rbp ) js . L 2 4 cmpq $ 1 0 0 , - 8 1 6 5 6 (% rbp ) jle . L 4 0 . L 2 4 : movq - 8 1 6 5 6 (% rbp ), % rax movl $ 1 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : cmpq $ 0 , - 8 1 6 6 4 (% rbp ) js . L 2 6 cmpq $ 1 0 0 , - 8 1 6 6 4 (% rbp ) jle . L 4 1 . L 2 6 : movq - 8 1 6 6 4 (% rbp ), % rax movl $ 1 0 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq - 8 1 6 5 6 (% rbp ), % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax leaq 0 (,% rax , 4 ), % rcx addq % rcx , % rax salq $ 2 , % rax addq % rdx , % rax movq - 8 1 6 6 4 (% rbp ), % rdx addq % rdx , % rax movq - 8 1 6 4 8 (% rbp ,% rax , 8 ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . LBE 1 3 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 7 movl $ 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 7 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) movq $ 1 , - 1 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 3 : movq $ 1 , - 3 2 (% rbp ) . LBB 4 : jmp . L 2 . L 1 6 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 cmpq % rax , - 3 2 (% rbp ) jl . L 1 3 . L 3 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 5 cmpq % rdx , % rax jl . L 1 4 . L 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : movq - 6 4 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx addq % rcx , % rdx movzbl (% rdx ), % edx movq - 6 4 (% rbp ), % rcx addq % rcx , % rax movzbl (% rax ), % eax cmpb % al , % dl jne . L 7 . LBB 8 : addq $ 1 , - 1 6 (% rbp ) . LBE 8 : jmp . L 8 . L 7 : . LBB 9 : movq - 1 6 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq $ 1 , - 1 6 (% rbp ) . L 8 : . LBE 9 : . LBE 7 : . LBB 1 0 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jl . L 9 . LBB 1 1 : addq $ 1 , - 2 4 (% rbp ) . L 9 : . LBE 1 1 : . LBE 1 0 : . LBE 6 : . LBB 1 2 : addq $ 1 , - 3 2 (% rbp ) . L 2 : . LBE 1 2 : movq - 5 6 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) jl . L 1 6 . LBE 4 : . LBE 3 : . LBB 1 3 : movq - 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 1 3 : . LBE 2 : leave ret
. LFB 2 : leaq - 6 0 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 4 movl $ 6 0 0 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 4 : ret . L 7 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 6 8 , % rsp movq % rdi , - 5 8 4 (% rbp ) movq $ 0 , - 5 1 2 (% rbp ) movq $ 0 , - 5 0 4 (% rbp ) movq $ 0 , - 4 9 6 (% rbp ) . LBB 3 6 : call runtime . makemap_small @ PLT movq % rax , - 5 6 (% rbp ) . LBB 3 7 : movq $ 0 , - 6 4 (% rbp ) . LBB 3 8 : . LBB 3 9 : . LBB 4 0 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq - 4 7 2 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 4 0 : jmp . L 3 9 . L 6 9 : . LBB 4 1 : nop . LBE 4 1 : . LBB 4 2 : . LBB 4 3 : movq - 4 7 2 (% rbp ), % rax testq % rbx , % rbx js . L 4 0 cmpq % rax , % rbx jge . L 4 0 movq - 4 8 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 4 3 : . LBB 4 4 : movq % rax , - 6 4 (% rbp ) . LBE 4 4 : . LBB 4 5 : . LBB 4 6 : movq - 6 4 (% rbp ), % rax movq % rax , - 4 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 0 0 (% rbp ) leaq - 2 0 0 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 3 leaq - 4 5 6 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . LBE 4 6 : . LBE 4 5 : . LBE 4 2 : . LBB 4 8 : addq $ 1 , % rbx jmp . L 3 9 . L 4 0 : . LBE 4 8 : . LBB 4 9 : . LBB 4 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : . LBE 4 7 : . LBE 4 9 : cmpq % r 1 2 , % rbx jl . L 6 9 . LBE 3 9 : . LBE 3 8 : . LBE 3 7 : movl $ 0 , % edx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 5 4 4 (% rbp ) movq $ 0 , - 5 3 6 (% rbp ) movq $ 0 , - 5 2 8 (% rbp ) movl $ 0 , % edx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 5 7 6 (% rbp ) movq $ 0 , - 5 6 8 (% rbp ) movq $ 0 , - 5 6 0 (% rbp ) . LBB 5 0 : movq $ 0 , - 7 2 (% rbp ) . LBB 5 1 : . LBB 5 2 : . LBB 5 3 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq - 4 4 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 5 3 : jmp . L 4 3 . L 7 1 : . LBB 5 4 : nop . LBE 5 4 : . LBB 5 5 : . LBB 5 6 : movq - 4 4 0 (% rbp ), % rax testq % rbx , % rbx js . L 4 4 cmpq % rax , % rbx jge . L 4 4 movq - 4 4 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 5 6 : . LBB 5 7 : movq % rax , - 7 2 (% rbp ) . LBE 5 7 : . LBB 5 8 : . LBB 5 9 : movq $ 0 , - 9 6 (% rbp ) movb $ 0 , - 9 7 (% rbp ) . LBB 6 0 : movq - 7 2 (% rbp ), % rax movq % rax , - 4 2 4 (% rbp ) leaq - 4 2 4 (% rbp ), % rax movq (% rax ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movb % dl , - 9 7 (% rbp ) . LBE 6 0 : cmpb $ 0 , - 9 7 (% rbp ) jne . L 4 5 . LBB 6 1 : . LBB 6 2 : . LBB 6 3 : jmp . L 4 6 . L 4 4 : . LBE 6 3 : . LBE 6 2 : . LBE 6 1 : . LBE 5 9 : . LBE 5 8 : . LBB 7 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : . LBE 7 3 : . LBB 7 4 : . LBB 7 2 : . LBB 7 1 : . LBB 7 0 : movq $ 0 , - 4 0 (% rbp ) . LBB 6 9 : jmp . L 4 7 . L 7 0 : . LBB 6 4 : nop . LBE 6 4 : . LBB 6 5 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 4 0 8 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 4 0 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 8 . LBB 6 6 : movq - 4 1 6 (% rbp ), % rsi leaq - 1 9 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) . LBE 6 6 : jmp . L 4 9 . L 4 8 : . LBB 6 7 : movq - 4 1 6 (% rbp ), % rcx movq - 4 0 0 (% rbp ), % rdx movq % rcx , - 5 4 4 (% rbp ) movq % rax , - 5 3 6 (% rbp ) movq % rdx , - 5 2 8 (% rbp ) . L 4 9 : . LBE 6 7 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 7 2 (% rbp ), % rax movq % rax , (% rdx ) . LBE 6 5 : . LBB 6 8 : addq $ 1 , - 4 0 (% rbp ) . L 4 7 : . LBE 6 8 : movq - 4 0 (% rbp ), % rax cmpq - 9 6 (% rbp ), % rax jl . L 7 0 . L 4 6 : . LBE 6 9 : . LBE 7 0 : . LBE 7 1 : . LBE 7 2 : movq - 5 6 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rdx , - 1 6 8 (% rbp ) leaq - 1 6 8 (% rbp ), % rdx movq (% rdx ), % rdx movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapdelete_fast 6 4 @ PLT . LBE 7 4 : . LBE 5 5 : . LBB 7 5 : addq $ 1 , % rbx . L 4 3 : . LBE 7 5 : cmpq % r 1 3 , % rbx jl . L 7 1 . LBE 5 2 : . LBE 5 1 : . LBE 5 0 : . LBB 7 6 : movq $ 0 , - 8 0 (% rbp ) movq $ 0 , - 8 8 (% rbp ) . LBB 7 7 : . LBB 7 8 : . LBB 7 9 : leaq - 3 8 4 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 7 9 : jmp . L 5 3 . L 7 3 : . LBB 8 0 : nop . LBE 8 0 : . LBB 8 1 : . LBB 8 2 : movq - 3 8 4 (% rbp ), % rax movq (% rax ), % rdx movq - 3 7 6 (% rbp ), % rax movq (% rax ), % rax . LBE 8 2 : . LBB 8 3 : movq % rdx , - 8 0 (% rbp ) movq % rax , - 8 8 (% rbp ) . LBE 8 3 : . LBB 8 4 : . LBB 8 5 : movq $ 0 , - 4 8 (% rbp ) . LBB 8 6 : jmp . L 5 4 . L 7 2 : . LBB 8 7 : nop . LBE 8 7 : . LBB 8 8 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 5 5 . LBB 8 9 : movq - 2 8 8 (% rbp ), % rsi leaq - 1 6 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) . LBE 8 9 : jmp . L 5 6 . L 5 5 : . LBB 9 0 : movq - 2 8 8 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rdx movq % rcx , - 5 7 6 (% rbp ) movq % rax , - 5 6 8 (% rbp ) movq % rdx , - 5 6 0 (% rbp ) . L 5 6 : . LBE 9 0 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 8 0 (% rbp ), % rax movq % rax , (% rdx ) . LBE 8 8 : . LBB 9 1 : addq $ 1 , - 4 8 (% rbp ) . L 5 4 : . LBE 9 1 : movq - 4 8 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax jl . L 7 2 . LBE 8 6 : . LBE 8 5 : . LBE 8 4 : . LBE 8 1 : . LBB 9 2 : leaq - 3 8 4 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 5 3 : . LBE 9 2 : movq - 3 8 4 (% rbp ), % rax testq % rax , % rax jne . L 7 3 . LBE 7 8 : . LBE 7 7 : . LBE 7 6 : subq $ 8 , % rsp pushq - 5 6 0 (% rbp ) pushq - 5 6 8 (% rbp ) pushq - 5 7 6 (% rbp ) call sort . Ints @ PLT addq $ 3 2 , % rsp movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rbx movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 2 leaq (% rbx ,% r 1 2 ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 6 1 . LBB 9 3 : movq - 2 5 6 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) . LBE 9 3 : jmp . L 6 2 . L 6 1 : . LBB 9 4 : movq - 2 5 6 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rdx movq % rcx , - 5 4 4 (% rbp ) movq % rax , - 5 3 6 (% rbp ) movq % rdx , - 5 2 8 (% rbp ) . L 6 2 : . LBE 9 4 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq % r 1 2 , % rax leaq 0 (,% rax , 8 ), % rdx movq - 2 2 4 (% rbp ), % rax movq - 2 5 6 (% rbp ), % rcx movq % rbx , % rsi salq $ 3 , % rsi addq % rsi , % rcx movq % rax , % rsi movq % rcx , % rdi call memmove @ PLT . LBB 9 5 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq - 5 8 4 (% rbp ), % rcx movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 9 5 : . LBE 3 6 : movq - 5 8 4 (% rbp ), % rax leaq - 2 4 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 8 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 : ret . L 3 8 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) movb $ 0 , - 1 (% rbp ) . LBB 3 0 : . LBB 3 1 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 3 3 . LBB 3 2 : . LBB 3 3 : movb $ 0 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 3 4 . L 3 3 : . LBE 3 3 : . LBE 3 2 : . LBE 3 1 : . LBB 3 4 : . LBB 3 5 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax sete % al testb % al , % al je . L 3 5 . LBB 3 6 : movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax sete % al . L 3 5 : . LBE 3 6 : . LBE 3 5 : testb % al , % al je . L 3 6 . LBB 3 7 : . LBB 3 8 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , - 3 2 (% rbp ) sete % al movb % al , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 3 4 . L 3 6 : . LBE 3 8 : . LBE 3 7 : . LBE 3 4 : . LBB 3 9 : . LBB 4 0 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rcx movq - 3 2 (% rbp ), % rax subq % rcx , % rax movq % rax , % rdx movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call go . Solution . hasPathSum movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 3 7 . LBB 4 1 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rcx movq - 3 2 (% rbp ), % rax subq % rcx , % rax movq % rax , % rdx movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call go . Solution . hasPathSum . L 3 7 : . LBE 4 1 : . LBE 4 0 : movb % al , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax . L 3 4 : . LBE 3 9 : . LBE 3 0 : leave ret
. LFB 0 : leaq - 4 4 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 0 movl $ 4 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 9 2 , % rsp movq $ 0 , - 6 4 (% rbp ) . LBB 2 : movq $ 1 , - 4 3 2 (% rbp ) movb $ 0 , - 4 2 4 (% rbp ) movq $ 2 , - 4 1 6 (% rbp ) movb $ 0 , - 4 0 8 (% rbp ) movq $ 3 , - 4 0 0 (% rbp ) movb $ 0 , - 3 9 2 (% rbp ) movq $ 4 , - 3 8 4 (% rbp ) movb $ 0 , - 3 7 6 (% rbp ) movq $ 5 , - 3 6 8 (% rbp ) movb $ 0 , - 3 6 0 (% rbp ) movq $ 6 , - 3 5 2 (% rbp ) movb $ 0 , - 3 4 4 (% rbp ) movq $ 7 , - 3 3 6 (% rbp ) movb $ 0 , - 3 2 8 (% rbp ) movq $ 8 , - 3 2 0 (% rbp ) movb $ 0 , - 3 1 2 (% rbp ) movq $ 9 , - 3 0 4 (% rbp ) movb $ 0 , - 2 9 6 (% rbp ) leaq - 4 3 2 (% rbp ), % rax movq % rax , % r 8 movl $ 8 , % ecx movl $ 1 6 , % edx movl $ 9 , % esi leaq type .. map . 6 int . 7 bool (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 7 2 (% rbp ) call runtime . makemap_small @ PLT movq % rax , - 8 0 (% rbp ) leaq . LC 2 0 (% rip ), % r 1 2 movl $ 0 , % r 1 3 d movq - 8 0 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rsi , % rdi movq % rbx , % rsi movq % rdx , % rcx movq % rax , % rdx call go . probs . findAllPandigitals movq $ 0 , - 5 6 (% rbp ) cmpq $ 0 , - 8 0 (% rbp ) je . L 2 movq - 8 0 (% rbp ), % rax movq (% rax ), % rbx jmp . L 3 . L 2 : movl $ 0 , % ebx . L 3 : leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq % rbx , (% rax ) movq - 2 6 4 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 2 5 6 (% rbp ) movq % r 1 5 , - 2 4 8 (% rbp ) leaq - 2 5 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 1 , - 1 3 6 (% rbp ) movq $ 1 , - 1 2 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) . LBB 3 : movq $ 0 , - 8 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : leaq - 2 4 0 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 bool (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 6 : jmp . L 4 . L 9 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 4 0 (% rbp ), % rax movq (% rax ), % rax . LBE 9 : movq % rax , - 8 8 (% rbp ) . LBB 1 0 : movq - 8 8 (% rbp ), % rax addq % rax , - 5 6 (% rbp ) . LBE 1 0 : . LBE 8 : . LBB 1 1 : leaq - 2 4 0 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 4 : . LBE 1 1 : movq - 2 4 0 (% rbp ), % rax testq % rax , % rax jne . L 9 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 2 : movq - 5 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax . LBE 1 2 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : leaq - 4 2 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 3 movl $ 4 2 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 5 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 4 0 0 , % rsp movq % rdi , - 3 9 2 (% rbp ) movq % rdx , % rcx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) . LBB 1 8 : leaq - 3 8 4 (% rbp ), % rdx movl $ 0 , % eax movl $ 2 6 , % ecx movq % rdx , % rdi rep stosq . LBB 1 9 : movq $ 0 , - 4 8 (% rbp ) movl $ 0 , - 5 2 (% rbp ) . LBB 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 4 0 8 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 2 2 : jmp . L 1 6 . L 5 0 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movq - 4 0 8 (% rbp ), % rax testq % rbx , % rbx js . L 1 7 cmpq % rax , % rbx jge . L 1 7 movq - 4 1 6 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 1 8 jmp . L 4 3 . L 1 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : . LBB 2 6 : leaq 1 (% rbx ), % rdx . LBE 2 6 : jmp . L 2 0 . L 4 3 : . LBB 2 7 : movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rsi movq % rdx , % rdi movl % esi , % eax movq % rdi , % rdx . L 2 0 : . LBE 2 7 : . LBE 2 5 : . LBB 2 8 : movq % rbx , - 4 8 (% rbp ) movl % eax , - 5 2 (% rbp ) . LBE 2 8 : . LBB 2 9 : movl - 5 2 (% rbp ), % eax subl $ 9 7 , % eax testl % eax , % eax js . L 2 1 cmpl $ 2 5 , % eax jg . L 2 1 cltq movq - 4 8 (% rbp ), % rcx movq % rcx , - 3 8 4 (% rbp ,% rax , 8 ) . LBE 2 9 : . LBE 2 4 : . LBB 3 1 : movq % rdx , % rbx jmp . L 1 6 . L 2 1 : . LBE 3 1 : . LBB 3 2 : . LBB 3 0 : cltq movl $ 2 6 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : . LBE 3 0 : . LBE 3 2 : cmpq % r 1 2 , % rbx jl . L 5 0 . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) . LBB 3 3 : movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 3 4 : jmp . L 2 4 . L 5 2 : . LBB 3 5 : nop . LBE 3 5 : . LBB 3 6 : movq - 4 0 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 5 cmpq % rax , - 2 4 (% rbp ) jge . L 2 5 movq - 4 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax subl $ 9 7 , % eax cmpb $ 2 5 , % al jbe . L 2 6 jmp . L 4 5 . L 2 5 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movzbl % al , % eax movl $ 2 6 , % esi movq % rax , % rdi call runtime . goPanicIndexU @ PLT . L 2 6 : movzbl % al , % eax movq - 3 8 4 (% rbp ,% rax , 8 ), % rax movq % rax , - 3 2 (% rbp ) . LBB 3 7 : movq - 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 3 8 : jmp . L 2 8 . L 5 1 : . LBB 3 9 : nop . LBE 3 9 : . LBB 4 0 : . LBB 4 1 : movq - 4 0 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 9 cmpq % rax , - 4 0 (% rbp ) jge . L 2 9 movq - 4 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax subl $ 9 7 , % eax cmpb $ 2 5 , % al jbe . L 3 0 jmp . L 4 6 . L 2 9 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movzbl % al , % eax movl $ 2 6 , % esi movq % rax , % rdi call runtime . goPanicIndexU @ PLT . L 3 0 : movzbl % al , % eax movq - 3 8 4 (% rbp ,% rax , 8 ), % rax cmpq % rax , - 3 2 (% rbp ) jge . L 3 2 . LBB 4 2 : movq - 4 0 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 3 cmpq % rax , - 4 0 (% rbp ) jge . L 3 3 movq - 4 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax subl $ 9 7 , % eax cmpb $ 2 5 , % al jbe . L 3 4 jmp . L 4 7 . L 3 3 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : movzbl % al , % eax movl $ 2 6 , % esi movq % rax , % rdi call runtime . goPanicIndexU @ PLT . L 3 4 : movzbl % al , % eax movq - 3 8 4 (% rbp ,% rax , 8 ), % rax movq % rax , - 3 2 (% rbp ) . L 3 2 : . LBE 4 2 : . LBE 4 1 : . LBE 4 0 : . LBB 4 3 : addq $ 1 , - 4 0 (% rbp ) . L 2 8 : . LBE 4 3 : movq - 4 0 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jl . L 5 1 . LBE 3 8 : . LBE 3 7 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rbx movq - 3 2 (% rbp ), % rax subq - 2 4 (% rbp ), % rax leaq 1 (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 3 8 . LBB 4 4 : movq - 1 1 2 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) . LBE 4 4 : jmp . L 3 9 . L 3 8 : . LBB 4 5 : movq - 1 1 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rcx , - 1 7 6 (% rbp ) movq % rax , - 1 6 8 (% rbp ) movq % rdx , - 1 6 0 (% rbp ) . L 3 9 : . LBE 4 5 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) . LBE 3 6 : . LBB 4 6 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 2 4 (% rbp ) . L 2 4 : . LBE 4 6 : movq - 4 0 8 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 5 2 . LBE 3 4 : . LBE 3 3 : . LBB 4 7 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 3 9 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 7 : . LBE 1 8 : movq - 3 9 2 (% rbp ), % rax addq $ 4 0 0 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 1 3 6 : leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 6 3 6 movl $ 3 4 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 8 1 : ret . L 3 6 3 6 : pushq % rbp movq % rsp , % rbp subq $ 3 3 6 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 3 2 0 (% rbp ) movq % rdi , - 3 1 2 (% rbp ) movq % rdx , - 3 3 6 (% rbp ) movq % rcx , - 3 2 8 (% rbp ) movb $ 0 , - 1 (% rbp ) . LBB 2 9 3 4 : leaq - 1 1 2 (% rbp ), % rax movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call go . leetcode . normalizeRational movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) leaq - 6 4 (% rbp ), % rax movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call go . leetcode . normalizeRational movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) . LBB 2 9 3 5 : . LBB 2 9 3 6 : . LBB 2 9 3 7 : movq - 2 1 6 (% rbp ), % rdx movq - 2 6 4 (% rbp ), % rax cmpq % rax , % rdx jne . L 3 6 2 1 movq - 2 2 4 (% rbp ), % rdx movq - 2 7 2 (% rbp ), % rax cmpq % rax , % rdx jne . L 3 6 2 2 movl $ 1 , % eax jmp . L 3 6 2 4 . L 3 6 2 2 : movq - 2 6 4 (% rbp ), % rax movq % rax , % rdx movq - 2 7 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 3 6 2 4 . L 3 6 2 1 : movl $ 0 , % eax . L 3 6 2 4 : testb % al , % al je . L 3 6 2 5 . LBB 2 9 3 8 : movq - 2 3 2 (% rbp ), % rdx movq - 2 8 0 (% rbp ), % rax cmpq % rax , % rdx jne . L 3 6 2 6 movq - 2 4 0 (% rbp ), % rdx movq - 2 8 8 (% rbp ), % rax cmpq % rax , % rdx jne . L 3 6 2 7 movl $ 1 , % eax jmp . L 3 6 2 5 . L 3 6 2 7 : movq - 2 8 0 (% rbp ), % rax movq % rax , % rdx movq - 2 8 8 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 3 6 2 5 . L 3 6 2 6 : movl $ 0 , % eax . L 3 6 2 5 : . LBE 2 9 3 8 : . LBE 2 9 3 7 : testb % al , % al je . L 3 6 3 0 . LBB 2 9 3 9 : movq - 2 4 8 (% rbp ), % rdx movq - 2 9 6 (% rbp ), % rax cmpq % rax , % rdx jne . L 3 6 3 1 movq - 2 5 6 (% rbp ), % rdx movq - 3 0 4 (% rbp ), % rax cmpq % rax , % rdx jne . L 3 6 3 2 movl $ 1 , % eax jmp . L 3 6 3 0 . L 3 6 3 2 : movq - 2 9 6 (% rbp ), % rax movq % rax , % rdx movq - 3 0 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 3 6 3 0 . L 3 6 3 1 : movl $ 0 , % eax . L 3 6 3 0 : . LBE 2 9 3 9 : . LBE 2 9 3 6 : movb % al , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax . LBE 2 9 3 5 : . LBE 2 9 3 4 : leave ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 0 movl $ 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 : ret . L 5 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 4 8 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movb $ 0 , - 3 3 (% rbp ) . LBB 2 6 : movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 2 7 : movq $ 0 , - 4 8 (% rbp ) . LBB 2 8 : . LBB 2 9 : . LBB 3 0 : movq - 5 6 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 3 0 : jmp . L 2 9 . L 4 9 : . LBB 3 1 : nop . LBE 3 1 : . LBB 3 2 : . LBB 3 3 : movq - 5 6 (% rbp ), % rax testq % rbx , % rbx js . L 3 0 cmpq % rax , % rbx jge . L 3 0 movq - 6 4 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 3 1 jmp . L 4 6 . L 3 0 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : . LBB 3 4 : leaq 1 (% rbx ), % rdx . LBE 3 4 : jmp . L 3 3 . L 4 6 : . LBB 3 5 : movq - 6 4 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx . L 3 3 : . LBE 3 5 : . LBE 3 3 : movq % rbx , - 4 8 (% rbp ) . LBB 3 6 : . LBB 3 7 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 3 4 cmpq % rax , - 4 8 (% rbp ) jge . L 3 4 movq - 6 4 (% rbp ), % rcx movq - 4 8 (% rbp ), % rax addq % rcx , % rax movzbl (% rax ), % eax cmpb $ 6 5 , % al je . L 3 5 jmp . L 3 6 . L 3 4 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : . LBB 3 8 : addq $ 1 , - 2 4 (% rbp ) . L 3 6 : . LBE 3 8 : . LBE 3 7 : . LBB 3 9 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 3 7 cmpq % rax , - 4 8 (% rbp ) jge . L 3 7 movq - 6 4 (% rbp ), % rcx movq - 4 8 (% rbp ), % rax addq % rcx , % rax movzbl (% rax ), % eax cmpb $ 7 6 , % al je . L 3 8 jmp . L 4 7 . L 3 7 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : . LBB 4 0 : addq $ 1 , - 3 2 (% rbp ) . LBE 4 0 : jmp . L 4 0 . L 4 7 : . LBB 4 1 : movq $ 0 , - 3 2 (% rbp ) . L 4 0 : . LBE 4 1 : . LBE 3 9 : . LBB 4 2 : . LBB 4 3 : cmpq $ 1 , - 2 4 (% rbp ) setg % al movl % eax , % ecx xorl $ 1 , % ecx testb % cl , % cl je . L 4 1 . LBB 4 4 : cmpq $ 2 , - 3 2 (% rbp ) setg % al . L 4 1 : . LBE 4 4 : . LBE 4 3 : testb % al , % al je . L 4 2 . LBB 4 5 : . LBB 4 6 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 4 3 . L 4 2 : . LBE 4 6 : . LBE 4 5 : . LBE 4 2 : . LBE 3 6 : . LBE 3 2 : . LBB 4 7 : movq % rdx , % rbx . L 2 9 : . LBE 4 7 : cmpq % r 1 2 , % rbx jl . L 4 9 . LBE 2 9 : . LBE 2 8 : . LBE 2 7 : . LBB 4 8 : movb $ 1 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax . L 4 3 : . LBE 4 8 : . LBE 2 6 : addq $ 4 8 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 7 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 6 movl $ 7 2 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 8 0 , % rsp movq % rdi , - 6 8 0 (% rbp ) movq % rsi , - 6 8 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 2 : movq - 6 8 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 8 0 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) leaq . LC 9 (% rip ), % r 1 4 movl $ 0 , % r 1 5 d leaq - 6 2 4 (% rbp ), % rax movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % rsi , % rdi movq % rbx , % r 8 movq - 5 9 2 (% rbp ), % rsi movq - 5 8 4 (% rbp ), % rdx movq % rdi , % rcx movq % rax , % rdi call strings . Split @ PLT movq - 6 8 8 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) leaq . LC 9 (% rip ), % r 1 2 movl $ 0 , % r 1 3 d leaq - 6 7 2 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rsi , % rdi movq % rbx , % r 8 movq - 6 4 0 (% rbp ), % rsi movq - 6 3 2 (% rbp ), % rdx movq % rdi , % rcx movq % rax , % rdi call strings . Split @ PLT . LBB 3 : movq - 6 1 6 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq - 6 2 4 (% rbp ), % rax movq 2 4 (% rax ), % rdx movq 1 6 (% rax ), % rax movq % rdx , % rcx cmpq $ 1 , % rcx jne . L 3 movq % rax , % rsi leaq . LC 1 0 (% rip ), % rcx cmpq % rcx , % rsi jne . L 4 movl $ 1 , % eax jmp . L 6 . L 4 : movzbl (% rax ), % eax movzbl % al , % eax leaq . LC 1 0 (% rip ), % rdx movzbl (% rdx ), % edx movzbl % dl , % edx subl % edx , % eax testl % eax , % eax sete % al jmp . L 6 . L 3 : movl $ 0 , % eax . L 6 : testb % al , % al je . L 7 . LBB 4 : movq - 5 6 (% rbp ), % rax movq % rax , - 7 2 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 7 1 2 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx jmp . L 4 5 . L 7 : . LBE 4 : . LBE 3 : . LBB 5 : movq - 6 1 6 (% rbp ), % rax testq % rax , % rax jg . L 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 9 : movq - 6 6 4 (% rbp ), % rax testq % rax , % rax jg . L 1 0 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 0 : movq - 6 2 4 (% rbp ), % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq - 6 7 2 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rbx , % rdi movq % rdx , % rsi cmpq % rsi , % rdi jne . L 1 1 movq % rcx , % rdi movq % rax , % rsi cmpq % rsi , % rdi jne . L 1 2 movl $ 1 , % eax jmp . L 1 4 . L 1 2 : movq % rdx , % rsi movq % rsi , % rdi movq % rax , % rsi movq % rcx , % rax movq % rdi , % rdx movq % rax , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 1 4 . L 1 1 : movl $ 0 , % eax . L 1 4 : testb % al , % al je . L 1 5 . LBB 6 : . LBB 7 : movq - 6 1 6 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 6 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 6 : movq - 6 2 4 (% rbp ), % rax addq $ 1 6 , % rax leaq - 3 2 0 (% rbp ), % rcx movq (% rax ), % rdx movq 8 (% rax ), % rax movq % rdx , % rsi movq % rax , % rdx movq % rcx , % rdi call strconv . Atoi @ PLT movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBE 7 : . LBB 8 : movq - 6 6 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 7 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 7 : movq - 6 7 2 (% rbp ), % rax addq $ 1 6 , % rax leaq - 2 8 8 (% rbp ), % rcx movq (% rax ), % rdx movq 8 (% rax ), % rax movq % rdx , % rsi movq % rax , % rdx movq % rcx , % rdi call strconv . Atoi @ PLT movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBE 8 : . LBE 6 : jmp . L 1 8 . L 1 5 : . LBB 9 : . LBB 1 0 : movq - 6 1 6 (% rbp ), % rax testq % rax , % rax jg . L 1 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 9 : movq - 6 6 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 0 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 0 : movq - 6 2 4 (% rbp ), % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq - 6 7 2 (% rbp ), % rax movq 2 4 (% rax ), % rdx movq 1 6 (% rax ), % rax movq % rbx , % rdi movq % rdx , % rsi cmpq % rsi , % rdi jne . L 2 1 movq % rcx , % rdi movq % rax , % rsi cmpq % rsi , % rdi jne . L 2 2 movl $ 1 , % eax jmp . L 2 4 . L 2 2 : movq % rdx , % rsi movq % rsi , % rdi movq % rax , % rsi movq % rcx , % rax movq % rdi , % rdx movq % rax , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 2 4 . L 2 1 : movl $ 0 , % eax . L 2 4 : testb % al , % al je . L 2 5 . LBB 1 1 : . LBB 1 2 : movq - 6 1 6 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 6 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 6 : movq - 6 2 4 (% rbp ), % rax addq $ 1 6 , % rax leaq - 2 5 6 (% rbp ), % rcx movq (% rax ), % rdx movq 8 (% rax ), % rax movq % rdx , % rsi movq % rax , % rdx movq % rcx , % rdi call strconv . Atoi @ PLT movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBE 1 2 : . LBB 1 3 : movq - 6 6 4 (% rbp ), % rax testq % rax , % rax jg . L 2 7 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 7 : movq - 6 7 2 (% rbp ), % rax leaq - 2 2 4 (% rbp ), % rcx movq (% rax ), % rdx movq 8 (% rax ), % rax movq % rdx , % rsi movq % rax , % rdx movq % rcx , % rdi call strconv . Atoi @ PLT movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBE 1 3 : . LBE 1 1 : jmp . L 1 8 . L 2 5 : . LBB 1 4 : . LBB 1 5 : movq - 6 1 6 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 8 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 8 : movq - 6 6 4 (% rbp ), % rax testq % rax , % rax jg . L 2 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 6 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rcx movq 2 4 (% rax ), % rbx movq - 6 7 2 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rbx , % rdi movq % rdx , % rsi cmpq % rsi , % rdi jne . L 3 0 movq % rcx , % rdi movq % rax , % rsi cmpq % rsi , % rdi jne . L 3 1 movl $ 1 , % eax jmp . L 3 3 . L 3 1 : movq % rdx , % rsi movq % rsi , % rdi movq % rax , % rsi movq % rcx , % rax movq % rdi , % rdx movq % rax , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 3 3 . L 3 0 : movl $ 0 , % eax . L 3 3 : testb % al , % al je . L 3 4 . LBB 1 6 : . LBB 1 7 : movq - 6 1 6 (% rbp ), % rax testq % rax , % rax jg . L 3 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 6 2 4 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rcx movq (% rax ), % rdx movq 8 (% rax ), % rax movq % rdx , % rsi movq % rax , % rdx movq % rcx , % rdi call strconv . Atoi @ PLT movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBE 1 7 : . LBB 1 8 : movq - 6 6 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 3 6 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 3 6 : movq - 6 7 2 (% rbp ), % rax addq $ 1 6 , % rax leaq - 1 6 0 (% rbp ), % rcx movq (% rax ), % rdx movq 8 (% rax ), % rax movq % rdx , % rsi movq % rax , % rdx movq % rcx , % rdi call strconv . Atoi @ PLT movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBE 1 8 : . LBE 1 6 : jmp . L 1 8 . L 3 4 : . LBB 1 9 : . LBB 2 0 : movq - 6 1 6 (% rbp ), % rax cmpq $ 1 , % rax jg . L 3 7 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 6 6 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 3 8 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 6 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rcx movq 2 4 (% rax ), % rbx movq - 6 7 2 (% rbp ), % rax movq 2 4 (% rax ), % rdx movq 1 6 (% rax ), % rax movq % rbx , % rdi movq % rdx , % rsi cmpq % rsi , % rdi jne . L 3 9 movq % rcx , % rdi movq % rax , % rsi cmpq % rsi , % rdi jne . L 4 0 movl $ 1 , % eax jmp . L 4 2 . L 4 0 : movq % rdx , % rsi movq % rsi , % rdi movq % rax , % rsi movq % rcx , % rax movq % rdi , % rdx movq % rax , % rdi call memcmp @ PLT testl % eax , % eax sete % al jmp . L 4 2 . L 3 9 : movl $ 0 , % eax . L 4 2 : testb % al , % al je . L 1 8 . LBB 2 1 : . LBB 2 2 : movq - 6 1 6 (% rbp ), % rax testq % rax , % rax jg . L 4 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 3 : movq - 6 2 4 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rcx movq (% rax ), % rdx movq 8 (% rax ), % rax movq % rdx , % rsi movq % rax , % rdx movq % rcx , % rdi call strconv . Atoi @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBE 2 2 : . LBB 2 3 : movq - 6 6 4 (% rbp ), % rax testq % rax , % rax jg . L 4 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 4 : movq - 6 7 2 (% rbp ), % rax leaq - 9 6 (% rbp ), % rcx movq (% rax ), % rdx movq 8 (% rax ), % rax movq % rdx , % rsi movq % rax , % rdx movq % rcx , % rdi call strconv . Atoi @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . L 1 8 : . LBE 2 3 : . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBE 1 5 : . LBE 1 4 : . LBE 1 0 : . LBE 9 : . LBE 5 : movq - 5 6 (% rbp ), % rax movq % rax , - 7 0 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 6 9 6 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx . L 4 5 : . LBE 2 : addq $ 6 8 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 6 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 1 movl $ 6 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 6 4 , % rsp movq % rdi , - 6 8 0 (% rbp ) leaq type ... 1 main . ChatServer (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq - 6 8 0 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 7 2 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 6 4 (% rbp ), % rax movq % rax , % rdx movq - 7 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 : . LBE 3 : movq - 7 2 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . L 2 8 : . LBB 4 : . LBB 5 : . LBB 6 : . LBB 7 : . LBB 8 : movq - 4 0 (% rbp ), % rax movq (% rax ), % rax movq 8 (% rax ), % rax movq % rax , - 6 0 8 (% rbp ) leaq - 4 9 6 (% rbp ), % rax movq % rax , - 6 0 0 (% rbp ) movw $ 1 , - 5 9 2 (% rbp ) movq - 4 0 (% rbp ), % rax movq (% rax ), % rax movq 1 6 (% rax ), % rax movq % rax , - 5 7 6 (% rbp ) leaq - 4 6 4 (% rbp ), % rax movq % rax , - 5 6 8 (% rbp ) movw $ 1 , - 5 6 0 (% rbp ) movq - 4 0 (% rbp ), % rax movq (% rax ), % rax movq 2 4 (% rax ), % rax movq % rax , - 5 4 4 (% rbp ) leaq - 4 3 2 (% rbp ), % rax movq % rax , - 5 3 6 (% rbp ) movw $ 1 , - 5 2 8 (% rbp ) leaq - 5 0 8 (% rbp ), % rcx leaq - 6 0 8 (% rbp ), % rax movl $ 3 , % edx movq % rcx , % rsi movq % rax , % rdi call runtime . selectgo @ PLT cmpq $ 2 , % rax je . L 4 cmpq $ 2 , % rax jg . L 5 testq % rax , % rax je . L 6 cmpq $ 1 , % rax je . L 7 jmp . L 5 . L 6 : . LBB 9 : leaq main . User .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 8 . LBB 1 0 : movq - 4 9 6 (% rbp ), % rcx movq - 4 8 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 8 0 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) . LBE 1 0 : jmp . L 9 . L 8 : . LBB 1 1 : leaq - 4 9 6 (% rbp ), % rdx movq % rax , % rsi leaq main . User .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 : . LBE 1 1 : . LBB 1 2 : movq - 4 0 (% rbp ), % rax movq (% rax ), % rdi movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq - 5 6 (% rbp ), % rsi movq (% rsi ), % rcx movq 8 (% rsi ), % rbx movq % rcx , - 4 0 0 (% rbp ) movq % rbx , - 3 9 2 (% rbp ) movq 1 6 (% rsi ), % rcx movq % rcx , - 3 8 4 (% rbp ) movq (% rdi ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 main . User (% rip ), % rdi call runtime . mapassign_faststr @ PLT leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 0 . LBB 1 3 : movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 8 4 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) . LBE 1 3 : jmp . L 1 1 . L 1 0 : . LBB 1 4 : leaq - 4 0 0 (% rbp ), % rdx movq % rax , % rsi leaq main . User .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 1 : . LBE 1 4 : . LBE 1 2 : . LBB 1 5 : leaq main .. 1 main . ChatServer . Run .. func 1 (% rip ), % r 1 3 movq - 4 0 (% rbp ), % r 1 2 movq - 5 6 (% rbp ), % rbx leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . main . cs 1 . 0 . 1 . 1 main . ChatServer . 2 . main . user 2 . 0 . 1 main . User . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq % r 1 3 , - 3 6 8 (% rbp ) movq % r 1 2 , - 3 6 0 (% rbp ) movq % rbx , - 3 5 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 2 . LBB 1 6 : movq - 3 7 6 (% rbp ), % rcx movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 5 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 6 : jmp . L 1 3 . L 1 2 : . LBB 1 7 : movq - 3 7 6 (% rbp ), % rax leaq - 3 6 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . main . cs 1 . 0 . 1 . 1 main . ChatServer . 2 . main . user 2 . 0 . 1 main . User . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 3 : . LBE 1 7 : movq - 3 7 6 (% rbp ), % rbx testq % rbx , % rbx jne . L 1 4 call runtime . panicgonil @ PLT . L 1 4 : leaq type .. struct . 4 . 4 x . 5 fn . 0 func . 8 . 9 . 8 . 9 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq % rbx , - 3 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 5 . LBB 1 8 : movq - 3 4 4 (% rbp ), % rax movq - 3 3 6 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 1 8 : jmp . L 1 6 . L 1 5 : . LBB 1 9 : movq - 3 3 6 (% rbp ), % rax movq % rax , % rdx movq - 3 4 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 6 : . LBE 1 9 : movq - 3 4 4 (% rbp ), % rax leaq main . main .. thunk 0 (% rip ), % rdx movq % rax , % rsi movq % rdx , % rdi call __go_go @ PLT . LBE 1 5 : . LBE 9 : jmp . L 1 7 . L 7 : . LBB 2 0 : leaq main . User .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 8 . LBB 2 1 : movq - 4 6 4 (% rbp ), % rcx movq - 4 5 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 4 8 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) . LBE 2 1 : jmp . L 1 9 . L 1 8 : . LBB 2 2 : leaq - 4 6 4 (% rbp ), % rdx movq % rax , % rsi leaq main . User .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 9 : . LBE 2 2 : movq - 4 0 (% rbp ), % rax movq (% rax ), % rax movq (% rax ), % rsi movq - 4 8 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 main . User (% rip ), % rdi call runtime . mapdelete_faststr @ PLT . LBB 2 3 : leaq main .. 1 main . ChatServer . Run .. func 2 (% rip ), % r 1 3 movq - 4 0 (% rbp ), % r 1 2 movq - 4 8 (% rbp ), % rbx leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . main . cs 1 . 0 . 1 . 1 main . ChatServer . 2 . main . user 2 . 0 . 1 main . User . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movq % r 1 3 , - 3 2 0 (% rbp ) movq % r 1 2 , - 3 1 2 (% rbp ) movq % rbx , - 3 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 0 . LBB 2 4 : movq - 3 2 8 (% rbp ), % rcx movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 0 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 4 : jmp . L 2 1 . L 2 0 : . LBB 2 5 : movq - 3 2 8 (% rbp ), % rax leaq - 3 2 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . main . cs 1 . 0 . 1 . 1 main . ChatServer . 2 . main . user 2 . 0 . 1 main . User . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 1 : . LBE 2 5 : movq - 3 2 8 (% rbp ), % rbx testq % rbx , % rbx jne . L 2 2 call runtime . panicgonil @ PLT . L 2 2 : leaq type .. struct . 4 . 4 x . 5 fn . 0 func . 8 . 9 . 8 . 9 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 8 (% rbp ) movq % rbx , - 2 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 3 . LBB 2 6 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 2 6 : jmp . L 2 4 . L 2 3 : . LBB 2 7 : movq - 2 8 0 (% rbp ), % rax movq % rax , % rdx movq - 2 8 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 4 : . LBE 2 7 : movq - 2 8 8 (% rbp ), % rax leaq main . main .. thunk 1 (% rip ), % rdx movq % rax , % rsi movq % rdx , % rdi call __go_go @ PLT . LBE 2 3 : . LBE 2 0 : jmp . L 1 7 . L 4 : . LBB 2 8 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 6 7 2 (% rbp ) movq % rdx , - 6 6 4 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 6 5 6 (% rbp ) movq % rdx , - 6 4 8 (% rbp ) . LBB 2 9 : movq $ 0 , - 6 4 0 (% rbp ) movq $ 0 , - 6 3 2 (% rbp ) movq $ 0 , - 6 2 4 (% rbp ) . LBB 3 0 : movq - 4 0 (% rbp ), % rax movq (% rax ), % rax movq (% rax ), % rax . LBB 3 1 : . LBB 3 2 : leaq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. map . 6 string . 7 main . User (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 3 2 : jmp . L 2 5 . L 2 9 : . LBB 3 3 : . LBB 3 4 : movq - 2 4 0 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq - 2 3 2 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 5 6 (% rbp ) . LBE 3 4 : . LBB 3 5 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) . LBE 3 5 : . LBB 3 6 : . LBB 3 7 : movq - 6 2 4 (% rbp ), % rcx movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq % rax , % rsi movq % rcx , % rdi call runtime . selectnbsend @ PLT . LBE 3 7 : . LBE 3 6 : . LBE 3 3 : . LBB 3 8 : leaq - 2 4 0 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 2 5 : . LBE 3 8 : movq - 2 4 0 (% rbp ), % rax testq % rax , % rax je . L 3 0 . LBB 3 9 : jmp . L 2 9 . L 5 : . L 3 0 : . LBE 3 9 : . LBE 3 1 : . LBE 3 0 : . LBE 2 9 : . LBE 2 8 : nop . L 1 7 : . LBE 8 : . LBE 7 : jmp . L 2 8 . LBE 6 : . LBE 5 : . LBE 4 :
leaq - 4 4 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 9 movl $ 4 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 9 2 , % rsp movq % rdi , - 4 2 4 (% rbp ) leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) leaq . LC 3 4 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 3 6 8 (% rbp ) movq % r 1 5 , - 3 6 0 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 8 4 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 2 , 2 4 (% rax ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 4 , - 3 4 4 (% rbp ) movq $ 4 , - 3 3 6 (% rbp ) movq $ 3 , - 3 2 8 (% rbp ) leaq . LC 3 4 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 2 0 (% rbp ) movq % r 1 3 , - 3 1 2 (% rbp ) leaq type ... 6 7 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 3 7 6 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq $ 0 , 3 2 (% rax ) movq $ 1 , 4 0 (% rax ) movq $ 9 9 , 4 8 (% rax ) movq - 3 7 6 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 7 , - 2 9 6 (% rbp ) movq $ 7 , - 2 8 8 (% rbp ) movq $ 9 9 , - 2 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 5 . LBB 2 6 : movq - 3 9 2 (% rbp ), % rax movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) . LBE 2 6 : jmp . L 2 6 . L 2 5 : . LBB 2 7 : movq - 3 9 2 (% rbp ), % rax leaq - 3 6 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 6 : . LBE 2 7 : movq - 3 9 2 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq $ 2 , - 4 0 8 (% rbp ) movq $ 2 , - 4 0 0 (% rbp ) . LBB 2 8 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 2 9 : . LBB 3 0 : . LBB 3 1 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 3 1 : jmp . L 2 7 . L 3 8 : . LBB 3 2 : nop . LBE 3 2 : . LBB 3 3 : . LBB 3 4 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 2 8 cmpq % rax , % rbx jge . L 2 8 movq - 2 2 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . LBE 3 4 : . LBB 3 5 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 2 9 jmp . L 3 6 . L 2 8 : . LBE 3 5 : . LBB 3 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : . LBE 3 8 : . LBB 3 9 : . LBB 3 6 : movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 3 1 . L 3 6 : . LBE 3 6 : . LBB 3 7 : leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 1 : . LBE 3 7 : . LBE 3 9 : . LBB 4 0 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 3 5 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution 2 .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 2 . LBB 4 1 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 1 : jmp . L 3 3 . L 3 2 : . LBB 4 2 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 3 : . LBE 4 2 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 4 2 4 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 4 0 : . LBE 3 3 : . LBB 4 3 : addq $ 1 , % rbx . L 2 7 : . LBE 4 3 : cmpq % r 1 3 , % rbx jl . L 3 8 . LBE 3 0 : . LBE 2 9 : . LBE 2 8 : addq $ 3 9 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
leaq - 6 1 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 7 movl $ 6 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 4 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 6 8 , % rsp movq % rdi , - 5 8 4 (% rbp ) leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expects . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 5 2 (% rbp ) leaq . LC 2 4 (% rip ), % rax movq % rax , - 6 0 8 (% rbp ) movq $ 8 , - 6 0 0 (% rbp ) movdqa - 6 0 8 (% rbp ), % xmm 0 movups % xmm 0 , - 4 9 6 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 4 4 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 1 2 , 3 2 (% rax ) movq - 5 4 4 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq $ 5 , - 4 7 2 (% rbp ) movq $ 5 , - 4 6 4 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 3 6 (% rbp ) movq - 5 3 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 1 2 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq $ 0 , 3 2 (% rax ) movq - 5 3 6 (% rbp ), % rax movq % rax , - 4 5 6 (% rbp ) movq $ 5 , - 4 4 8 (% rbp ) movq $ 5 , - 4 4 0 (% rbp ) leaq . LC 2 4 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 4 3 2 (% rbp ) movq % r 1 5 , - 4 2 4 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 2 8 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq $ 0 , (% rax ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq $ 1 , - 4 0 8 (% rbp ) movq $ 1 , - 4 0 0 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 2 0 (% rbp ) movq - 5 2 0 (% rbp ), % rax movq $ 0 , (% rax ) movq - 5 2 0 (% rbp ), % rax movq % rax , - 3 9 2 (% rbp ) movq $ 1 , - 3 8 4 (% rbp ) movq $ 1 , - 3 7 6 (% rbp ) leaq . LC 2 4 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 6 8 (% rbp ) movq % r 1 3 , - 3 6 0 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 1 2 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq $ 1 , (% rax ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 1 , - 3 4 4 (% rbp ) movq $ 1 , - 3 3 6 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) movq - 5 0 4 (% rbp ), % rax movq $ 1 , (% rax ) movq - 5 0 4 (% rbp ), % rax movq % rax , - 3 2 8 (% rbp ) movq $ 1 , - 3 2 0 (% rbp ) movq $ 1 , - 3 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 3 . LBB 3 4 : movq - 5 5 2 (% rbp ), % rax movq - 4 9 6 (% rbp ), % rcx movq - 4 8 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 8 0 (% rbp ), % rcx movq - 4 7 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 4 6 4 (% rbp ), % rcx movq - 4 5 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 1 4 4 (% rax ) movq % rbx , 1 5 2 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 1 6 0 (% rax ) movq % rbx , 1 6 8 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 1 7 6 (% rax ) movq % rbx , 1 8 4 (% rax ) . LBE 3 4 : jmp . L 3 4 . L 3 3 : . LBB 3 5 : movq - 5 5 2 (% rbp ), % rax leaq - 4 9 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expects . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 4 : . LBE 3 5 : movq - 5 5 2 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) movq $ 3 , - 5 6 8 (% rbp ) movq $ 3 , - 5 6 0 (% rbp ) . LBB 3 6 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expects . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 3 7 : . LBB 3 8 : . LBB 3 9 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 3 9 : jmp . L 3 5 . L 4 6 : . LBB 4 0 : nop . LBE 4 0 : . LBB 4 1 : . LBB 4 2 : movq - 2 3 2 (% rbp ), % rax testq % rbx , % rbx js . L 3 6 cmpq % rax , % rbx jge . L 3 6 movq - 2 4 0 (% rbp ), % rax movq % rbx , % rdx salq $ 6 , % rdx addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 3 0 4 (% rbp ) movq % rdi , - 2 9 6 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 8 8 (% rbp ) movq % rdi , - 2 8 0 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 5 6 (% rax ), % rdx movq 4 8 (% rax ), % rax movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) . LBE 4 2 : . LBB 4 3 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 3 7 jmp . L 4 4 . L 3 6 : . LBE 4 3 : . LBB 4 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : . LBE 4 6 : . LBB 4 7 : . LBB 4 4 : movq - 2 0 8 (% rbp ), % rsi movq - 2 0 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 4 8 (% rax ) movq % rdi , 5 6 (% rax ) jmp . L 3 9 . L 4 4 : . LBE 4 4 : . LBB 4 5 : leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expects . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 9 : . LBE 4 5 : . LBE 4 7 : . LBB 4 8 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 2 5 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestMoveZeroes 2 .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . testcase 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expects . 0 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 0 . LBB 4 9 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 9 : jmp . L 4 1 . L 4 0 : . LBB 5 0 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . testcase 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expects . 0 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 1 : . LBE 5 0 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 5 8 4 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 4 8 : . LBE 4 1 : . LBB 5 1 : addq $ 1 , % rbx . L 3 5 : . LBE 5 1 : cmpq % r 1 3 , % rbx jl . L 4 6 . LBE 3 8 : . LBE 3 7 : . LBE 3 6 : addq $ 5 6 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 6 movl $ 2 8 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 4 8 , % rsp movq % rdi , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 4 0 (% rbp ) . LBB 4 : jmp . L 2 . L 5 5 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 cmpq % rax , - 4 0 (% rbp ) jl . L 4 0 . L 3 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 5 cmpq % rdx , % rax jl . L 4 1 . L 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jle . L 7 . LBB 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 8 cmpq % rax , - 4 0 (% rbp ) jl . L 4 2 . L 8 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 9 : movq - 4 0 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBB 1 0 : jmp . L 1 0 . L 5 4 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : . LBB 1 3 : . LBB 1 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 1 cmpq % rax , - 6 4 (% rbp ) jl . L 4 3 . L 1 1 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 4 8 (% rbp ) setg % al testb % al , % al je . L 1 3 . LBB 1 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 4 cmpq % rax , - 6 4 (% rbp ) jl . L 4 4 . L 1 4 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 6 cmpq % rdx , % rax jl . L 4 5 . L 1 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq 1 6 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setg % al . L 1 3 : . LBE 1 5 : . LBE 1 4 : testb % al , % al je . L 1 8 . LBB 1 6 : . LBB 1 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 9 cmpq % rax , - 6 4 (% rbp ) jl . L 4 6 . L 1 9 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 6 4 (% rbp ), % rax movq % rdx , - 4 8 (% rbp ) movq % rax , - 5 6 (% rbp ) . L 1 8 : . LBE 1 7 : . LBE 1 6 : . LBE 1 3 : . LBE 1 2 : . LBB 1 8 : addq $ 1 , - 6 4 (% rbp ) . L 1 0 : . LBE 1 8 : movq 2 4 (% rbp ), % rax cmpq % rax , - 6 4 (% rbp ) jl . L 5 4 . LBE 1 0 : . LBE 9 : . LBB 1 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 4 0 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq 2 4 (% rbp ), % rbx movq % rcx , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 5 6 (% rbp ), % rax movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 5 6 (% rbp ) js . L 2 3 cmpq % rcx , - 5 6 (% rbp ) jl . L 4 8 . L 2 3 : movq - 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : movq 1 6 (% rbp ), % rsi movq - 5 6 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rdi movq - 4 0 (% rbp ), % rcx subq $ 1 , % rcx movq 2 4 (% rbp ), % rsi testq % rcx , % rcx js . L 2 5 cmpq % rsi , % rcx jl . L 4 9 . L 2 5 : movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : movq 1 6 (% rbp ), % rsi salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rsi movq - 1 8 4 (% rbp ), % rcx testq % rdx , % rdx js . L 2 7 cmpq % rcx , % rdx jl . L 5 0 . L 2 7 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 0 : movq - 1 9 2 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq % rdi , (% rdx ) movq - 1 5 2 (% rbp ), % rdx testq % rax , % rax js . L 2 9 cmpq % rdx , % rax jl . L 5 1 . L 2 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : movq - 1 6 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . LBE 1 9 : movq 3 2 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 1 cmpq % rax , - 4 0 (% rbp ) jle . L 5 2 . L 3 1 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 5 2 : movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) je . L 3 3 movq - 4 0 (% rbp ), % rax salq $ 3 , % rax jmp . L 3 4 . L 3 3 : movl $ 0 , % eax . L 3 4 : addq % rdx , % rax movq % rax , - 2 2 4 (% rbp ) movq 2 4 (% rbp ), % rax subq - 4 0 (% rbp ), % rax movq % rax , - 2 1 6 (% rbp ) movq 3 2 (% rbp ), % rax subq - 4 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq main . nextPermutation .. func 1 (% rip ), % rcx leaq - 2 2 4 (% rbp ), % rdx movq $ 0 , - 9 6 (% rbp ) movq $ 0 , - 8 8 (% rbp ) leaq - 9 6 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rcx , (% rax ) movq % rdx , 8 (% rax ) movq - 7 2 (% rbp ), % rbx leaq type ... 6 . 7 int (% rip ), % r 1 2 leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 5 . LBB 2 0 : movq - 1 3 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 0 : jmp . L 3 6 . L 3 5 : . LBB 2 1 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 6 : . LBE 2 1 : movq - 1 3 6 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call sort . Slice @ PLT jmp . L 3 7 . L 7 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 2 2 : subq $ 1 , - 4 0 (% rbp ) . L 2 : . LBE 2 2 : cmpq $ 0 , - 4 0 (% rbp ) jg . L 5 5 . L 3 7 : . LBE 4 : . LBE 3 : . LBB 2 3 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 3 : . LBE 2 : movq - 2 6 4 (% rbp ), % rax addq $ 2 4 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 6 6 movl $ 1 6 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 6 : ret . L 1 6 6 : pushq % rbp movq % rsp , % rbp subq $ 1 6 0 , % rsp movq % rdi , - 1 5 2 (% rbp ) movq % rsi , - 1 6 0 (% rbp ) movb $ 0 , - 4 1 (% rbp ) . LBB 9 5 : . LBB 9 6 : movq $ 0 , - 8 (% rbp ) . LBB 9 7 : jmp . L 1 1 5 . L 1 6 3 : . LBB 9 8 : nop . LBE 9 8 : . LBB 9 9 : . LBB 1 0 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 1 1 6 cmpq % rax , - 8 (% rbp ) jl . L 1 5 4 . L 1 1 6 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 4 : movq 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 1 6 0 (% rbp ) js . L 1 1 8 cmpq % rax , - 1 6 0 (% rbp ) jge . L 1 1 8 movq - 1 4 4 (% rbp ), % rdx movq - 1 6 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % rcx cmpq $ 1 , % rcx je . L 1 1 9 jmp . L 1 5 5 . L 1 1 8 : movq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 1 9 : movq % rax , % rsi leaq . LC 2 9 (% rip ), % rcx cmpq % rcx , % rsi jne . L 1 2 1 movl $ 1 , % eax jmp . L 1 2 3 . L 1 2 1 : movzbl (% rax ), % eax movzbl % al , % eax leaq . LC 2 9 (% rip ), % rdx movzbl (% rdx ), % edx movzbl % dl , % edx subl % edx , % eax testl % eax , % eax sete % al jmp . L 1 2 3 . L 1 5 5 : movl $ 0 , % eax . L 1 2 3 : testb % al , % al je . L 1 2 4 . LBB 1 0 1 : . LBB 1 0 2 : movb $ 0 , - 4 1 (% rbp ) movzbl - 4 1 (% rbp ), % eax jmp . L 1 2 5 . L 1 2 4 : . LBE 1 0 2 : . LBE 1 0 1 : . LBE 1 0 0 : . LBE 9 9 : . LBB 1 0 3 : addq $ 1 , - 8 (% rbp ) . L 1 1 5 : . LBE 1 0 3 : movq - 8 (% rbp ), % rax cmpq - 1 5 2 (% rbp ), % rax jl . L 1 6 3 . LBE 9 7 : . LBE 9 6 : . LBB 1 0 4 : movq - 1 5 2 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . LBB 1 0 5 : jmp . L 1 2 8 . L 1 6 4 : . LBB 1 0 6 : nop . LBE 1 0 6 : . LBB 1 0 7 : . LBB 1 0 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 2 9 cmpq % rax , - 1 6 (% rbp ) jl . L 1 5 7 . L 1 2 9 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 7 : movq 1 6 (% rbp ), % rcx movq - 1 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 3 1 cmpq % rax , - 2 4 (% rbp ) jge . L 1 3 1 movq - 1 1 2 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % rcx cmpq $ 1 , % rcx je . L 1 3 2 jmp . L 1 5 8 . L 1 3 1 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 2 : movq % rax , % rsi leaq . LC 2 9 (% rip ), % rcx cmpq % rcx , % rsi jne . L 1 3 4 movl $ 1 , % eax jmp . L 1 3 6 . L 1 3 4 : movzbl (% rax ), % eax movzbl % al , % eax leaq . LC 2 9 (% rip ), % rdx movzbl (% rdx ), % edx movzbl % dl , % edx subl % edx , % eax testl % eax , % eax sete % al jmp . L 1 3 6 . L 1 5 8 : movl $ 0 , % eax . L 1 3 6 : testb % al , % al je . L 1 3 7 . LBB 1 0 9 : . LBB 1 1 0 : movb $ 0 , - 4 1 (% rbp ) movzbl - 4 1 (% rbp ), % eax jmp . L 1 2 5 . L 1 3 7 : . LBE 1 1 0 : . LBE 1 0 9 : . LBE 1 0 8 : . LBE 1 0 7 : . LBB 1 1 1 : . LBB 1 1 2 : movq - 1 6 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rdx , - 1 6 (% rbp ) movq % rax , - 2 4 (% rbp ) . L 1 2 8 : . LBE 1 1 2 : . LBE 1 1 1 : . LBB 1 1 3 : movq - 1 6 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax testb % al , % al je . L 1 3 8 . LBB 1 1 4 : movq - 2 4 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax . L 1 3 8 : . LBE 1 1 4 : . LBE 1 1 3 : testb % al , % al jne . L 1 6 4 . LBE 1 0 5 : . LBE 1 0 4 : . LBB 1 1 5 : movq - 1 5 2 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 1 1 6 : jmp . L 1 4 1 . L 1 6 5 : . LBB 1 1 7 : nop . LBE 1 1 7 : . LBB 1 1 8 : . LBB 1 1 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 4 2 cmpq % rax , - 3 2 (% rbp ) jl . L 1 6 0 . L 1 4 2 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 6 0 : movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 4 4 cmpq % rax , - 4 0 (% rbp ) jge . L 1 4 4 movq - 8 0 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % rcx cmpq $ 1 , % rcx je . L 1 4 5 jmp . L 1 6 1 . L 1 4 4 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 4 5 : movq % rax , % rsi leaq . LC 2 9 (% rip ), % rcx cmpq % rcx , % rsi jne . L 1 4 7 movl $ 1 , % eax jmp . L 1 4 9 . L 1 4 7 : movzbl (% rax ), % eax movzbl % al , % eax leaq . LC 2 9 (% rip ), % rdx movzbl (% rdx ), % edx movzbl % dl , % edx subl % edx , % eax testl % eax , % eax sete % al jmp . L 1 4 9 . L 1 6 1 : movl $ 0 , % eax . L 1 4 9 : testb % al , % al je . L 1 5 0 . LBB 1 2 0 : . LBB 1 2 1 : movb $ 0 , - 4 1 (% rbp ) movzbl - 4 1 (% rbp ), % eax jmp . L 1 2 5 . L 1 5 0 : . LBE 1 2 1 : . LBE 1 2 0 : . LBE 1 1 9 : . LBE 1 1 8 : . LBB 1 2 2 : . LBB 1 2 3 : movq - 3 2 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 4 0 (% rbp ), % rax addq $ 1 , % rax movq % rdx , - 3 2 (% rbp ) movq % rax , - 4 0 (% rbp ) . L 1 4 1 : . LBE 1 2 3 : . LBE 1 2 2 : . LBB 1 2 4 : movq - 3 2 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax testb % al , % al je . L 1 5 1 . LBB 1 2 5 : movq 2 4 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) setl % al . L 1 5 1 : . LBE 1 2 5 : . LBE 1 2 4 : testb % al , % al jne . L 1 6 5 . LBE 1 1 6 : . LBE 1 1 5 : . LBB 1 2 6 : movb $ 1 , - 4 1 (% rbp ) movzbl - 4 1 (% rbp ), % eax . L 1 2 5 : . LBE 1 2 6 : . LBE 9 5 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 9 movl $ 4 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 9 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq $ 0 , - 2 4 (% rbp ) . LBB 2 : movq $ 1 , - 8 (% rbp ) movq 2 4 (% rbp ), % rax subq $ 2 , % rax movq % rax , - 1 6 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 4 8 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 1 6 (% rbp ), % rax subq - 8 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , % rdx movq - 8 (% rbp ), % rax addq % rdx , % rax movq % rax , - 3 2 (% rbp ) . LBB 7 : . LBB 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 cmpq % rax , - 3 2 (% rbp ) jl . L 3 5 . L 3 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 5 cmpq % rdx , % rax jl . L 3 6 . L 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setg % al testb % al , % al je . L 7 . LBB 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 8 cmpq % rax , - 3 2 (% rbp ) jl . L 3 7 . L 8 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 0 cmpq % rdx , % rax jl . L 3 8 . L 1 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setg % al . L 7 : . LBE 9 : . LBE 8 : testb % al , % al je . L 1 2 . LBB 1 0 : . LBB 1 1 : movq - 3 2 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 1 3 . L 1 2 : . LBE 1 1 : . LBE 1 0 : . LBE 7 : . LBB 1 2 : . LBB 1 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 4 cmpq % rax , - 3 2 (% rbp ) jl . L 3 9 . L 1 4 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 6 cmpq % rdx , % rax jl . L 4 0 . L 1 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setg % al testb % al , % al je . L 1 8 . LBB 1 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 9 cmpq % rax , - 3 2 (% rbp ) jl . L 4 1 . L 1 9 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 2 1 cmpq % rdx , % rax jl . L 4 2 . L 2 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setl % al . L 1 8 : . LBE 1 4 : . LBE 1 3 : testb % al , % al je . L 2 3 . LBB 1 5 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 8 (% rbp ) jmp . L 2 . L 2 3 : . LBE 1 5 : . LBE 1 2 : . LBB 1 6 : . LBB 1 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 4 cmpq % rax , - 3 2 (% rbp ) jl . L 4 3 . L 2 4 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 2 6 cmpq % rdx , % rax jl . L 4 4 . L 2 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setl % al testb % al , % al je . L 2 8 . LBB 1 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 9 cmpq % rax , - 3 2 (% rbp ) jl . L 4 5 . L 2 9 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 3 1 cmpq % rdx , % rax jl . L 4 6 . L 3 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setg % al . L 2 8 : . LBE 1 8 : . LBE 1 7 : testb % al , % al je . L 2 . LBB 1 9 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) nop . L 2 : . LBE 1 9 : . LBE 1 6 : . LBE 6 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jle . L 4 8 . LBE 4 : . LBE 3 : . LBB 2 0 : movq $ 0 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 1 3 : . LBE 2 0 : . LBE 2 : leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 2 4 movl $ 1 3 6 , % r 1 0 d movl $ 3 2 , % r 1 1 d call __morestack . LVL 1 0 : ret . L 2 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 8 , % rsp movq 2 4 (% rbp ), % r 1 4 movq 3 2 (% rbp ), % rbx movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rax testq % rax , % rax jg . L 2 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 2 : movq - 1 1 2 (% rbp ), % rax movzbl (% rax ), % eax movb % al , - 1 1 3 (% rbp ) movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 3 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 3 : movq - 8 0 (% rbp ), % rax movzbl 1 (% rax ), % eax movb % al , - 1 1 4 (% rbp ) movzbl 4 0 (% rbp ), % r 1 5 d call runtime . printlock @ PLT leaq . LC 6 3 (% rip ), % r 1 2 movl $ 5 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . printstring @ PLT call runtime . printsp @ PLT movq % r 1 4 , % rdi call runtime . printint @ PLT call runtime . printsp @ PLT movq % rbx , % rdi call runtime . printint @ PLT call runtime . printsp @ PLT movzbl - 1 1 3 (% rbp ), % eax movq % rax , % rdi call runtime . printuint @ PLT call runtime . printsp @ PLT movzbl - 1 1 4 (% rbp ), % eax movq % rax , % rdi call runtime . printuint @ PLT call runtime . printsp @ PLT movzbl % r 1 5 b , % eax movq % rax , % rdi call runtime . printuint @ PLT call runtime . printnl @ PLT call runtime . printunlock @ PLT addq $ 8 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 3 movl $ 2 4 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 0 0 , % rsp movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq string .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 9 2 (% rbp ) movq % rbx , - 1 8 4 (% rbp ) movq % rbx , - 1 7 6 (% rbp ) . LBB 3 : movq $ 0 , - 5 6 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 2 3 2 (% rbp ) movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 2 2 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq % rbx , - 5 6 (% rbp ) . LBB 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 3 cmpq % rax , - 5 6 (% rbp ) jl . L 1 8 . L 3 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 1 8 4 (% rbp ), % rcx cmpq $ 0 , - 5 6 (% rbp ) js . L 5 cmpq % rcx , - 5 6 (% rbp ) jl . L 1 9 . L 5 : movq - 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : movq - 1 9 2 (% rbp ), % rsi movq - 5 6 (% rbp ), % rcx salq $ 4 , % rcx addq % rsi , % rcx movq % rdx , % rsi movq % rsi , 8 (% rcx ) leaq runtime . writeBarrier (% rip ), % rsi movl (% rsi ), % esi testl % esi , % esi jne . L 7 . LBB 1 0 : movq % rax , (% rcx ) jmp . L 8 . L 7 : . LBE 1 0 : . LBB 1 1 : movq % rax , % rdx movq % rcx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 8 : . LBE 1 1 : . LBE 9 : . LBE 8 : . LBB 1 2 : addq $ 1 , % rbx . L 2 : . LBE 1 2 : cmpq - 2 3 2 (% rbp ), % rbx jl . L 2 2 . LBE 5 : . LBE 4 : . LBE 3 : leaq go . leetcode 0 1 7 9 . largestNumber .. func 1 (% rip ), % rcx leaq - 1 9 2 (% rbp ), % rdx movq $ 0 , - 8 0 (% rbp ) movq $ 0 , - 7 2 (% rbp ) leaq - 8 0 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rcx , (% rax ) movq % rdx , 8 (% rax ) movq - 6 4 (% rbp ), % rbx leaq type ... 6 . 7 string (% rip ), % r 1 4 leaq type ... 6 . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 . LBB 1 3 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 3 : jmp . L 1 2 . L 1 1 : . LBB 1 4 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 : . LBE 1 4 : movq - 1 2 0 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call sort . Slice @ PLT leaq . LC 3 (% rip ), % r 1 2 movl $ 0 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 7 6 (% rbp ) pushq - 1 8 4 (% rbp ) pushq - 1 9 2 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call strings . Join @ PLT addq $ 3 2 , % rsp movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) . LBB 1 5 : movl $ 0 , % eax movq - 2 0 0 (% rbp ), % rdx testq % rax , % rax js . L 1 3 cmpq % rdx , % rax jge . L 1 3 movq - 2 0 8 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 8 , % al je . L 1 4 jmp . L 2 1 . L 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : . LBB 1 6 : . LBB 1 7 : leaq . LC 4 (% rip ), % rax movq % rax , - 2 2 4 (% rbp ) movq $ 1 , - 2 1 6 (% rbp ) movdqa - 2 2 4 (% rbp ), % xmm 0 movups % xmm 0 , - 1 6 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx jmp . L 1 7 . L 2 1 : . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBB 1 8 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx . L 1 7 : . LBE 1 8 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 6 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 8 movl $ 6 8 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 3 2 , % rsp movq $ 0 , - 5 6 (% rbp ) . LBB 2 : movq $ 2 , - 6 4 (% rbp ) . LBB 3 : jmp . L 2 . L 7 : . LBB 4 : nop . LBE 4 : . LBB 5 : movq - 6 4 (% rbp ), % rcx movabsq $ 4 8 3 5 7 0 3 2 7 8 4 5 8 5 1 6 6 9 9 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 1 8 , % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rsi imulq $ 1 0 0 0 0 0 0 , % rsi , % rax subq % rax , % rcx movq % rcx , % rsi movabsq $ 3 0 2 2 3 1 4 5 4 9 0 3 6 5 7 2 9 3 7 , % rdx movq % rsi , % rax imulq % rdx movq % rdx , % rax sarq $ 1 4 , % rax sarq $ 6 3 , % rsi movq % rsi , % rdx subq % rdx , % rax movq % rax , - 7 2 (% rbp ) movq - 6 4 (% rbp ), % rcx movabsq $ 3 0 2 2 3 1 4 5 4 9 0 3 6 5 7 2 9 3 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 1 4 , % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rsi imulq $ 1 0 0 0 0 0 , % rsi , % rax subq % rax , % rcx movq % rcx , % rsi movabsq $ 3 7 7 7 8 9 3 1 8 6 2 9 5 7 1 6 1 7 1 , % rdx movq % rsi , % rax imulq % rdx movq % rdx , % rax sarq $ 1 1 , % rax sarq $ 6 3 , % rsi movq % rsi , % rdx subq % rdx , % rax movq % rax , - 8 0 (% rbp ) movq - 6 4 (% rbp ), % rcx movabsq $ 3 7 7 7 8 9 3 1 8 6 2 9 5 7 1 6 1 7 1 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 1 1 , % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rsi imulq $ 1 0 0 0 0 , % rsi , % rax subq % rax , % rcx movq % rcx , % rsi movabsq $ 2 3 6 1 1 8 3 2 4 1 4 3 4 8 2 2 6 0 7 , % rdx movq % rsi , % rax imulq % rdx movq % rdx , % rax sarq $ 7 , % rax sarq $ 6 3 , % rsi movq % rsi , % rdx subq % rdx , % rax movq % rax , - 8 8 (% rbp ) movq - 6 4 (% rbp ), % rcx movabsq $ 2 3 6 1 1 8 3 2 4 1 4 3 4 8 2 2 6 0 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 7 , % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rsi imulq $ 1 0 0 0 , % rsi , % rax subq % rax , % rcx movq % rcx , % rsi movabsq $- 6 6 4 0 8 2 7 8 6 6 5 3 5 4 3 8 5 8 1 , % rdx movq % rsi , % rax imulq % rdx leaq (% rdx ,% rsi ), % rax sarq $ 6 , % rax sarq $ 6 3 , % rsi movq % rsi , % rdx subq % rdx , % rax movq % rax , - 9 6 (% rbp ) movq - 6 4 (% rbp ), % rsi movabsq $- 6 6 4 0 8 2 7 8 6 6 5 3 5 4 3 8 5 8 1 , % rdx movq % rsi , % rax imulq % rdx leaq (% rdx ,% rsi ), % rax sarq $ 6 , % rax movq % rsi , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rcx movq % rcx , % rdx salq $ 2 , % rdx addq % rcx , % rdx leaq 0 (,% rdx , 4 ), % rax addq % rax , % rdx leaq 0 (,% rdx , 4 ), % rax movq % rax , % rdx movq % rsi , % rcx subq % rdx , % rcx movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 2 , % rax sarq $ 6 3 , % rcx movq % rcx , % rdx subq % rdx , % rax movq % rax , - 1 0 4 (% rbp ) movq - 6 4 (% rbp ), % rsi movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rsi , % rax imulq % rdx movq % rdx , % rax sarq $ 2 , % rax movq % rsi , % rcx sarq $ 6 3 , % rcx subq % rcx , % rax movq % rax , % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax subq % rax , % rsi movq % rsi , % rdx movq % rdx , - 1 1 2 (% rbp ) movq - 7 2 (% rbp ), % rax imulq % rax , % rax imulq - 7 2 (% rbp ), % rax imulq - 7 2 (% rbp ), % rax imulq - 7 2 (% rbp ), % rax movq % rax , % rdx movq - 8 0 (% rbp ), % rax imulq % rax , % rax imulq - 8 0 (% rbp ), % rax imulq - 8 0 (% rbp ), % rax imulq - 8 0 (% rbp ), % rax leaq (% rdx ,% rax ), % rcx movq - 9 6 (% rbp ), % rax imulq % rax , % rax imulq - 9 6 (% rbp ), % rax imulq - 9 6 (% rbp ), % rax imulq - 9 6 (% rbp ), % rax movq % rax , % rdx movq - 8 8 (% rbp ), % rax imulq % rax , % rax imulq - 8 8 (% rbp ), % rax imulq - 8 8 (% rbp ), % rax imulq - 8 8 (% rbp ), % rax addq % rdx , % rax addq % rax , % rcx movq - 1 1 2 (% rbp ), % rax imulq % rax , % rax imulq - 1 1 2 (% rbp ), % rax imulq - 1 1 2 (% rbp ), % rax imulq - 1 1 2 (% rbp ), % rax movq % rax , % rdx movq - 1 0 4 (% rbp ), % rax imulq % rax , % rax imulq - 1 0 4 (% rbp ), % rax imulq - 1 0 4 (% rbp ), % rax imulq - 1 0 4 (% rbp ), % rax addq % rdx , % rax addq % rcx , % rax movq % rax , - 1 2 0 (% rbp ) . LBB 6 : movq - 1 2 0 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax jne . L 3 . LBB 7 : movq - 6 4 (% rbp ), % rax addq % rax , - 5 6 (% rbp ) leaq int .. d (% rip ), % rbx movq % rbx , - 6 7 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 4 4 (% rbp ) movq - 5 4 4 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , (% rdx ) movq - 5 4 4 (% rbp ), % rax movq % rax , - 6 6 4 (% rbp ) movq % rbx , - 6 5 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 3 6 (% rbp ) movq - 5 3 6 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax movq % rax , (% rdx ) movq - 5 3 6 (% rbp ), % rax movq % rax , - 6 4 8 (% rbp ) movq % rbx , - 6 4 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 2 8 (% rbp ) movq - 5 2 8 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax movq % rax , (% rdx ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 6 3 2 (% rbp ) movq % rbx , - 6 2 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 2 0 (% rbp ) movq - 5 2 0 (% rbp ), % rdx movq - 9 6 (% rbp ), % rax movq % rax , (% rdx ) movq - 5 2 0 (% rbp ), % rax movq % rax , - 6 1 6 (% rbp ) movq % rbx , - 6 0 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 1 2 (% rbp ) movq - 5 1 2 (% rbp ), % rdx movq - 1 0 4 (% rbp ), % rax movq % rax , (% rdx ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 6 0 0 (% rbp ) movq % rbx , - 5 9 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) movq - 5 0 4 (% rbp ), % rdx movq - 1 1 2 (% rbp ), % rax movq % rax , (% rdx ) movq - 5 0 4 (% rbp ), % rax movq % rax , - 5 8 4 (% rbp ) movdqa - 6 7 2 (% rbp ), % xmm 0 movups % xmm 0 , - 4 9 6 (% rbp ) movdqa - 6 5 6 (% rbp ), % xmm 1 movups % xmm 1 , - 4 8 0 (% rbp ) movdqa - 6 4 0 (% rbp ), % xmm 2 movups % xmm 2 , - 4 6 4 (% rbp ) movdqa - 6 2 4 (% rbp ), % xmm 3 movups % xmm 3 , - 4 4 8 (% rbp ) movdqa - 6 0 8 (% rbp ), % xmm 4 movups % xmm 4 , - 4 3 2 (% rbp ) movdqa - 5 9 2 (% rbp ), % xmm 5 movups % xmm 5 , - 4 1 6 (% rbp ) leaq - 4 9 6 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 6 , - 2 9 6 (% rbp ) movq $ 6 , - 2 8 8 (% rbp ) leaq - 2 7 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 8 8 (% rbp ) pushq - 2 9 6 (% rbp ) pushq - 3 0 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 3 7 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , (% rdx ) movq - 3 7 6 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 3 6 8 (% rbp ) movq % r 1 5 , - 3 6 0 (% rbp ) leaq - 3 6 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 , - 2 3 2 (% rbp ) movq $ 1 , - 2 2 4 (% rbp ) leaq - 2 0 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) . L 3 : . LBE 7 : . LBE 6 : . LBE 5 : . LBB 8 : addq $ 1 , - 6 4 (% rbp ) . L 2 : . LBE 8 : cmpq $ 3 5 4 2 9 3 , - 6 4 (% rbp ) jle . L 7 . LBE 3 : . LBE 2 : leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movq - 3 2 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 3 2 8 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 3 2 0 (% rbp ) movq % r 1 3 , - 3 1 2 (% rbp ) leaq - 3 2 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 3 movl $ 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 3 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 5 6 , % rsp movq % rdi , % rcx movq % rsi , % rbx movq % rcx , - 6 4 (% rbp ) movq % rbx , - 5 6 (% rbp ) movb $ 0 , - 3 3 (% rbp ) . LBB 2 : leaq . LC 0 (% rip ), % rax movl $ 1 , % edx movq - 6 4 (% rbp ), % rdi movq - 5 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call strings . Trim @ PLT movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movb $ 0 , - 1 7 (% rbp ) movb $ 0 , - 1 8 (% rbp ) movb $ 0 , - 1 9 (% rbp ) . LBB 3 : movq $ 0 , - 3 2 (% rbp ) . LBB 4 : jmp . L 2 . L 2 2 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 cmpq % rax , - 3 2 (% rbp ) jge . L 3 movq - 6 4 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 3 4 (% rbp ) . LBB 7 : . LBB 8 : cmpb $ 4 7 , - 3 4 (% rbp ) seta % al testb % al , % al jne . L 4 jmp . L 5 . L 3 : . LBE 8 : . LBE 7 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBB 4 0 : . LBB 1 0 : . LBB 9 : cmpb $ 5 7 , - 3 4 (% rbp ) setbe % al . L 5 : . LBE 9 : . LBE 1 0 : testb % al , % al je . L 6 . LBB 1 1 : movb $ 1 , - 1 9 (% rbp ) . LBE 1 1 : jmp . L 7 . L 6 : . LBB 1 2 : . LBB 1 3 : cmpb $ 4 6 , - 3 4 (% rbp ) jne . L 8 . LBB 1 4 : . LBB 1 5 : . LBB 1 6 : movzbl - 1 8 (% rbp ), % eax movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 9 . LBB 1 7 : movzbl - 1 7 (% rbp ), % eax . L 9 : . LBE 1 7 : . LBE 1 6 : testb % al , % al je . L 1 0 . LBB 1 8 : . LBB 1 9 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 1 1 . L 1 0 : . LBE 1 9 : . LBE 1 8 : . LBE 1 5 : movb $ 1 , - 1 7 (% rbp ) . LBE 1 4 : jmp . L 7 . L 8 : . LBB 2 0 : . LBB 2 1 : cmpb $ 1 0 1 , - 3 4 (% rbp ) jne . L 1 2 . LBB 2 2 : . LBB 2 3 : . LBB 2 4 : movzbl - 1 8 (% rbp ), % eax movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 3 . LBB 2 5 : movzbl - 1 9 (% rbp ), % eax xorl $ 1 , % eax . L 1 3 : . LBE 2 5 : . LBE 2 4 : testb % al , % al je . L 1 4 . LBB 2 6 : . LBB 2 7 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 1 1 . L 1 4 : . LBE 2 7 : . LBE 2 6 : . LBE 2 3 : movb $ 0 , - 1 9 (% rbp ) movb $ 1 , - 1 8 (% rbp ) . LBE 2 2 : jmp . L 7 . L 1 2 : . LBB 2 8 : . LBB 2 9 : . LBB 3 0 : cmpb $ 4 5 , - 3 4 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 5 . LBB 3 1 : cmpb $ 4 3 , - 3 4 (% rbp ) sete % al . L 1 5 : . LBE 3 1 : . LBE 3 0 : testb % al , % al je . L 1 6 . LBB 3 2 : . LBB 3 3 : . LBB 3 4 : cmpq $ 0 , - 3 2 (% rbp ) setne % al testb % al , % al je . L 1 7 . LBB 3 5 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 1 8 cmpq % rdx , % rax jge . L 1 8 movq - 6 4 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 1 0 1 , % al setne % al jmp . L 1 7 . L 1 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : . LBE 3 5 : . LBE 3 4 : testb % al , % al je . L 7 . LBB 3 6 : . LBB 3 7 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 1 1 . L 1 6 : . LBE 3 7 : . LBE 3 6 : . LBE 3 3 : . LBE 3 2 : . LBB 3 8 : . LBB 3 9 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 1 1 . L 7 : . LBE 3 9 : . LBE 3 8 : . LBE 2 9 : . LBE 2 8 : . LBE 2 1 : . LBE 2 0 : . LBE 1 3 : . LBE 1 2 : . LBE 4 0 : . LBE 6 : . LBB 4 1 : addq $ 1 , - 3 2 (% rbp ) . L 2 : . LBE 4 1 : movq - 5 6 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) jl . L 2 2 . LBE 4 : . LBE 3 : . LBB 4 2 : movzbl - 1 9 (% rbp ), % eax movb % al , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax . L 1 1 : . LBE 4 2 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 4 5 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 9 movl $ 4 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 7 9 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 4 4 0 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 4 3 2 (% rbp ) movq % rdi , - 4 2 4 (% rbp ) movq % rdx , - 4 4 8 (% rbp ) movq % rcx , - 4 4 0 (% rbp ) movb $ 0 , - 4 9 (% rbp ) . LBB 2 : movq - 4 2 4 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 6 4 (% rbp ) movq - 4 4 0 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 7 2 (% rbp ) movq - 6 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 bool (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 1 6 (% rbp ) movq % rbx , - 4 0 8 (% rbp ) movq % rbx , - 4 0 0 (% rbp ) . LBB 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 7 3 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 7 2 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq bool .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 4 0 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 cmpq % rax , - 2 4 (% rbp ) jl . L 5 8 . L 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 8 : movq - 4 1 6 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 3 8 4 (% rbp ) movq % rbx , - 3 7 6 (% rbp ) movq % rbx , - 3 6 8 (% rbp ) movq - 3 7 6 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 3 6 8 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 . LBB 7 : movq - 3 8 4 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 6 . L 5 : . LBE 7 : . LBB 8 : movq - 3 8 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 : . LBE 8 : . LBE 6 : . LBB 9 : addq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 9 : movq - 2 4 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax jl . L 7 3 . LBE 4 : . LBE 3 : movq - 4 0 8 (% rbp ), % rax testq % rax , % rax jg . L 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 9 : movq - 4 1 6 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 4 4 (% rbp ), % rax testq % rax , % rax jg . L 1 0 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 0 : movq - 3 5 2 (% rbp ), % rax movb $ 1 , (% rax ) . LBB 1 0 : movq $ 1 , - 3 2 (% rbp ) . LBB 1 1 : jmp . L 1 1 . L 7 4 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq - 4 4 0 (% rbp ), % rdx testq % rax , % rax js . L 1 2 cmpq % rdx , % rax jge . L 1 2 movq - 4 4 8 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 2 , % al je . L 1 3 jmp . L 1 4 . L 1 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : . LBB 1 5 : movq - 4 0 8 (% rbp ), % rax testq % rax , % rax jg . L 1 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 5 : movq - 4 1 6 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 6 cmpq % rax , - 3 2 (% rbp ) jl . L 6 0 . L 1 6 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 0 : movq - 4 0 8 (% rbp ), % rax testq % rax , % rax jg . L 1 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 8 : movq - 4 1 6 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq - 2 8 0 (% rbp ), % rdx testq % rax , % rax js . L 1 9 cmpq % rdx , % rax jge . L 1 9 movq - 2 8 8 (% rbp ), % rdx addq % rdx , % rax movq - 3 2 0 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx addq % rcx , % rdx movzbl (% rax ), % eax movb % al , (% rdx ) jmp . L 1 4 . L 1 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 1 6 : addq $ 1 , - 3 2 (% rbp ) . L 1 1 : . LBE 1 6 : movq - 3 2 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jl . L 7 4 . LBE 1 1 : . LBE 1 0 : . LBB 1 7 : movq $ 1 , - 4 0 (% rbp ) . LBB 1 8 : jmp . L 2 2 . L 7 8 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : . LBB 2 1 : movq $ 1 , - 4 8 (% rbp ) . LBB 2 2 : jmp . L 2 3 . L 7 7 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : . LBB 2 6 : movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 4 4 0 (% rbp ), % rdx testq % rax , % rax js . L 2 4 cmpq % rdx , % rax jge . L 2 4 movq - 4 4 8 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % edx cmpb $ 4 2 , % dl jne . L 7 5 jmp . L 6 2 . L 2 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 2 : . LBB 2 7 : . LBB 2 8 : movq - 4 0 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 8 cmpq % rax , - 4 0 (% rbp ) jl . L 6 3 . L 2 8 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 3 : movq - 4 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 2 4 8 (% rbp ), % rdx testq % rax , % rax js . L 3 0 cmpq % rdx , % rax jge . L 3 0 movq - 2 5 6 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % edx movl % edx , % eax xorl $ 1 , % eax testb % al , % al jne . L 3 1 jmp . L 3 2 . L 3 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : . LBB 2 9 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq - 4 0 8 (% rbp ), % rdx testq % rax , % rax js . L 3 3 cmpq % rdx , % rax jl . L 6 4 . L 3 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 4 : movq - 4 1 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 3 5 cmpq % rax , - 4 8 (% rbp ) jge . L 3 5 movq - 2 2 4 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % edx jmp . L 3 2 . L 3 5 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : . LBE 2 9 : . LBE 2 8 : movq - 4 0 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 6 cmpq % rax , - 4 0 (% rbp ) jl . L 6 5 . L 3 6 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 5 : movq - 4 1 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 1 9 2 (% rbp ) movq % rbx , - 1 8 4 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 3 8 cmpq % rax , - 4 8 (% rbp ) jge . L 3 8 movq - 1 9 2 (% rbp ), % rcx movq - 4 8 (% rbp ), % rax addq % rcx , % rax movb % dl , (% rax ) . LBE 2 7 : jmp . L 3 9 . L 3 8 : . LBB 3 0 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 5 : . LBE 3 0 : . LBB 3 1 : nop . LBE 3 1 : . LBB 3 2 : cmpb $ 6 3 , % dl sete % al movl % eax , % ecx xorl $ 1 , % ecx testb % cl , % cl je . L 4 0 . LBB 3 3 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq - 4 2 4 (% rbp ), % rcx testq % rax , % rax js . L 4 1 cmpq % rcx , % rax jge . L 4 1 movq - 4 3 2 (% rbp ), % rcx addq % rcx , % rax movzbl (% rax ), % eax cmpb % al , % dl sete % al jmp . L 4 0 . L 4 1 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : . LBE 3 3 : . LBE 3 2 : xorl $ 1 , % eax testb % al , % al jne . L 7 6 . LBB 3 4 : movq - 4 0 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 4 3 cmpq % rax , - 4 0 (% rbp ) jl . L 6 6 . L 4 3 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 6 : movq - 4 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 4 5 cmpq % rax , - 4 8 (% rbp ) jl . L 6 7 . L 4 5 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 7 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq - 4 0 8 (% rbp ), % rdx testq % rax , % rax js . L 4 7 cmpq % rdx , % rax jl . L 6 8 . L 4 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 8 : movq - 4 1 6 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 1 2 0 (% rbp ), % rdx testq % rax , % rax js . L 4 9 cmpq % rdx , % rax jge . L 4 9 movq - 1 2 8 (% rbp ), % rdx addq % rdx , % rax movq - 1 6 0 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx addq % rcx , % rdx movzbl (% rax ), % eax movb % al , (% rdx ) . LBE 3 4 : jmp . L 3 9 . L 4 9 : . LBB 3 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 6 : . LBE 3 5 : . LBB 3 6 : nop . L 3 9 : . LBE 3 6 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBB 3 7 : addq $ 1 , - 4 8 (% rbp ) . L 2 3 : . LBE 3 7 : movq - 4 8 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jl . L 7 7 . LBE 2 2 : . LBE 2 1 : . LBE 2 0 : . LBB 3 8 : addq $ 1 , - 4 0 (% rbp ) . L 2 2 : . LBE 3 8 : movq - 4 0 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax jl . L 7 8 . LBE 1 8 : . LBE 1 7 : . LBB 3 9 : movq - 4 2 4 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq - 4 0 8 (% rbp ), % rcx testq % rax , % rax js . L 5 4 cmpq % rcx , % rax jl . L 7 1 . L 5 4 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 1 : movq - 4 1 6 (% rbp ), % rcx movq % rax , % rsi movq % rsi , % rax addq % rax , % rax addq % rsi , % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 9 6 (% rbp ) movq % rbx , - 8 8 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % rax testq % rdx , % rdx js . L 5 6 cmpq % rax , % rdx jge . L 5 6 movq - 9 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 4 9 (% rbp ) movzbl - 4 9 (% rbp ), % eax jmp . L 7 2 . L 5 6 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 2 : . LBE 3 9 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 4 , % rsp movq $ 0 , - 2 4 (% rbp ) . LBB 2 : leaq go . listing 1 2 . mockServer .. func 1 .. f (% rip ), % rcx movq % rcx , - 3 2 (% rbp ) . LBB 3 : leaq imt .. interface . 4 ServeHTTP . 0 func . 8 net .. z 2 fhttp . ResponseWriter . 3 . 1 net .. z 2 fhttp . Request . 9 . 8 . 9 . 5 .. net .. z 2 fhttp . HandlerFunc (% rip ), % rax movq - 3 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call net .. z 2 fhttp .. z 2 fhttptest . NewServer @ PLT movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . LBE 3 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 1 : leaq - 7 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 5 movl $ 7 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 7 2 8 , % rsp movq % rdi , - 7 1 2 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 1 6 (% rbp ) movq - 6 1 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq - 6 1 6 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 3 , - 5 8 4 (% rbp ) movq $ 3 , - 5 7 6 (% rbp ) movq $ 5 , - 5 6 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 8 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq $ 1 0 , (% rax ) movq $ 1 0 , 8 (% rax ) movq $ 1 0 , 1 6 (% rax ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 3 , - 5 5 2 (% rbp ) movq $ 3 , - 5 4 4 (% rbp ) movq $ 1 1 , - 5 3 6 (% rbp ) leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 0 (% rbp ) movq - 6 0 0 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 0 , - 5 2 0 (% rbp ) movq $ 0 , - 5 1 2 (% rbp ) movq $ 0 , - 5 0 4 (% rbp ) leaq - 5 9 2 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) movq $ 3 , - 6 3 2 (% rbp ) movq $ 3 , - 6 2 4 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 2 9 (% rip ), % rax movq % rax , - 7 3 6 (% rbp ) movq $ 6 9 , - 7 2 8 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 7 3 6 (% rbp ), % rcx movq - 7 2 8 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) . LBB 2 2 : movq $ 0 , - 7 0 4 (% rbp ) movq $ 0 , - 6 9 6 (% rbp ) movq $ 0 , - 6 8 8 (% rbp ) movq $ 0 , - 6 8 0 (% rbp ) . LBB 2 3 : . LBB 2 4 : . LBB 2 5 : movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 7 3 6 (% rbp ) movl $ 0 , % ebx . LBE 2 5 : jmp . L 1 5 . L 2 4 : . LBB 2 6 : nop . LBE 2 6 : . LBB 2 7 : . LBB 2 8 : movq - 4 2 4 (% rbp ), % rax testq % rbx , % rbx js . L 1 6 cmpq % rax , % rbx jge . L 1 6 movq - 4 3 2 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) . LBE 2 8 : . LBB 2 9 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 7 0 4 (% rbp ) movq % rdx , - 6 9 6 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 6 8 8 (% rbp ) movq % rdx , - 6 8 0 (% rbp ) . LBE 2 9 : . LBB 3 0 : movq - 6 8 0 (% rbp ), % rax movq % rax , - 6 4 8 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 6 7 2 (% rbp ) movq % rdx , - 6 6 4 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 6 5 6 (% rbp ) subq $ 8 , % rsp pushq - 6 5 6 (% rbp ) pushq - 6 6 4 (% rbp ) pushq - 6 7 2 (% rbp ) call go . leetcode . numRabbits addq $ 3 2 , % rsp movq % rax , - 7 2 0 (% rbp ) leaq go . leetcode .. go . leetcode . para 7 8 1 .. d (% rip ), % rax movq % rax , - 7 6 8 (% rbp ) leaq go . leetcode .. go . leetcode . para 7 8 1 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 1 7 jmp . L 2 2 . L 1 6 : . LBE 3 0 : . LBB 3 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : . LBE 3 3 : . LBB 3 4 : . LBB 3 1 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 1 : jmp . L 1 9 . L 2 2 : . LBB 3 2 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 7 8 1 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 9 : . LBE 3 2 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 7 6 0 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 7 5 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 7 2 0 (% rbp ), % rdi movq % rdi , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 7 4 4 (% rbp ) movdqa - 7 6 8 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 7 5 2 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 3 0 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) . LBE 3 4 : . LBE 2 7 : . LBB 3 5 : addq $ 1 , % rbx . L 1 5 : . LBE 3 5 : cmpq - 7 3 6 (% rbp ), % rbx jl . L 2 4 . LBE 2 4 : . LBE 2 3 : . LBE 2 2 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 3 1 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 9 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 3 movl $ 3 9 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 4 4 , % rsp movq $ 0 , - 6 4 (% rbp ) . LBB 2 : movl $ 0 , % edx movl $ 3 0 0 , % esi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 7 2 (% rbp ) movq $ 0 , - 3 8 4 (% rbp ) movq $ 0 , - 3 7 6 (% rbp ) movq $ 0 , - 3 6 8 (% rbp ) movq $ 0 , - 3 6 0 (% rbp ) . LBB 3 : movq $ 0 , - 3 5 2 (% rbp ) movq $ 0 , - 3 4 4 (% rbp ) movq $ 0 , - 3 3 6 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 2 1 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 8 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 2 8 8 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 0 4 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 3 4 4 (% rbp ), % rax testq % rax , % rax jg . L 4 jmp . L 1 6 . L 3 : . LBE 1 1 : . LBB 2 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : . LBE 2 6 : . LBB 2 7 : movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq - 3 5 2 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 8 8 (% rbp ) . LBB 1 2 : movq $ 0 , - 9 6 (% rbp ) . LBB 1 3 : . LBB 1 4 : . LBB 1 5 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 1 5 : jmp . L 6 . L 2 0 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : . LBB 1 8 : movq - 2 1 6 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 7 cmpq % rax , % r 1 2 jge . L 7 movq - 2 2 4 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 8 : . LBB 1 9 : movq % rax , - 9 6 (% rbp ) . LBE 1 9 : . LBB 2 0 : movq - 9 6 (% rbp ), % rax movl % eax , % edx movq - 8 8 (% rbp ), % rax xorl % edx , % eax addl $ 4 8 , % eax movl % eax , % edx leaq - 3 8 4 (% rbp ), % rax movl % edx , % esi movq % rax , % rdi call strings . Builder . WriteByte @ PLT . LBE 2 0 : . LBE 1 7 : . LBB 2 2 : addq $ 1 , % r 1 2 jmp . L 6 . L 7 : . LBE 2 2 : . LBB 2 3 : . LBB 2 1 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 2 1 : . LBE 2 3 : cmpq % r 1 3 , % r 1 2 jl . L 2 0 . LBE 1 4 : . LBE 1 3 : . LBE 1 2 : . LBB 2 4 : leaq - 3 8 4 (% rbp ), % rax movq % rax , % rdi call strings . Builder . String @ PLT . LBB 2 5 : movq % rax , % r 1 2 movq % rdx , % r 1 3 movq - 7 2 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 5 movq - 7 2 (% rbp ), % rax movq % r 1 2 , % rdx movq % r 1 3 , % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq % r 1 5 , (% rax ) . LBE 2 5 : . LBE 2 4 : leaq - 3 8 4 (% rbp ), % rax movq % rax , % rdi call strings . Builder . Reset @ PLT . LBE 2 7 : . LBE 8 : . LBB 2 8 : addq $ 1 , % rbx . L 2 : . LBE 2 8 : cmpq % r 1 4 , % rbx jl . L 2 1 . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 5 6 (% rbp ) . LBB 2 9 : movq $ 0 , - 8 0 (% rbp ) . LBB 3 0 : . LBB 3 1 : . LBB 3 2 : leaq - 1 9 2 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 3 2 : jmp . L 1 2 . L 2 2 : . LBB 3 3 : nop . LBE 3 3 : . LBB 3 4 : . LBB 3 5 : movq - 1 9 2 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq - 1 8 4 (% rbp ), % rax movq (% rax ), % rax . LBE 3 5 : . LBB 3 6 : movq % rax , - 8 0 (% rbp ) . LBE 3 6 : . LBB 3 7 : movq - 8 0 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 1 0 7 2 . max movq % rax , - 5 6 (% rbp ) . LBE 3 7 : . LBE 3 4 : . LBB 3 8 : leaq - 1 9 2 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 1 2 : . LBE 3 8 : movq - 1 9 2 (% rbp ), % rax testq % rax , % rax jne . L 2 2 . LBE 3 1 : . LBE 3 0 : . LBE 2 9 : . LBB 3 9 : movq - 5 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax . LBE 3 9 : . LBE 2 : addq $ 3 4 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 2 movl $ 2 3 2 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 0 0 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq 4 8 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 4 8 (% rbp ) movq 4 8 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 4 cmpq % rax , - 4 8 (% rbp ) jl . L 2 6 . L 4 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq 4 0 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call go . leetcode . findIndex addq $ 3 2 , % rsp movq % rax , - 5 6 (% rbp ) . LBB 6 : movq 3 2 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 6 cmpq % rax , - 5 6 (% rbp ) jg . L 6 cmpq $ 0 , - 5 6 (% rbp ) jns . L 7 jmp . L 2 7 . L 6 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 2 7 : movq - 5 6 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 7 : movq 5 6 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 9 cmpq % rax , - 5 6 (% rbp ) jg . L 9 cmpq $ 0 , - 5 6 (% rbp ) jns . L 1 0 jmp . L 2 8 . L 9 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 2 8 : movq - 5 6 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 0 : movq 4 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 1 6 8 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq 1 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 1 3 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) call go . leetcode . buildTree addq $ 4 8 , % rsp movq % rax , % r 1 2 movq - 5 6 (% rbp ), % rax addq $ 1 , % rax movq 3 2 (% rbp ), % rdx testq % rax , % rax js . L 1 2 cmpq % rdx , % rax jle . L 2 9 . L 1 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 2 9 : movq 5 6 (% rbp ), % rdx cmpq $ 0 , - 4 8 (% rbp ) js . L 1 4 cmpq % rdx , - 4 8 (% rbp ) jg . L 1 4 cmpq $ 0 , - 5 6 (% rbp ) jns . L 1 5 jmp . L 1 6 . L 1 4 : movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAcap @ PLT . L 1 5 : movq - 5 6 (% rbp ), % rdx cmpq - 4 8 (% rbp ), % rdx jle . L 3 0 . L 1 6 : movq - 4 8 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 3 0 : movq 4 0 (% rbp ), % rcx movq 5 6 (% rbp ), % rdx cmpq % rdx , - 5 6 (% rbp ) je . L 1 8 movq - 5 6 (% rbp ), % rdx salq $ 3 , % rdx jmp . L 1 9 . L 1 8 : movl $ 0 , % edx . L 1 9 : addq % rcx , % rdx movq % rdx , - 1 1 2 (% rbp ) movq - 4 8 (% rbp ), % rdx subq - 5 6 (% rbp ), % rdx movq % rdx , - 1 0 4 (% rbp ) movq 5 6 (% rbp ), % rdx subq - 5 6 (% rbp ), % rdx movq % rdx , - 9 6 (% rbp ) movq 1 6 (% rbp ), % rcx movq 3 2 (% rbp ), % rdx cmpq % rdx , % rax je . L 2 0 movq % rax , % rdx salq $ 3 , % rdx jmp . L 2 1 . L 2 0 : movl $ 0 , % edx . L 2 1 : addq % rcx , % rdx movq % rdx , - 8 0 (% rbp ) movq 2 4 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 6 4 (% rbp ) pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) call go . leetcode . buildTree addq $ 4 8 , % rsp movq % rax , % rbx movq 4 8 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 2 cmpq % rax , - 4 8 (% rbp ) jl . L 3 1 . L 2 2 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq 4 0 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % r 1 3 leaq go . leetcode . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq % r 1 3 , - 2 0 8 (% rbp ) movq % r 1 2 , - 2 0 0 (% rbp ) movq % rbx , - 1 9 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 4 . LBB 7 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 9 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 7 : jmp . L 2 5 . L 2 4 : . LBB 8 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 5 : . LBE 8 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 3 : . LBE 6 : . LBE 2 : leaq - 2 4 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 5 6 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 2 movl $ 5 6 8 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 2 0 , % rsp movq % rdi , - 4 7 2 (% rbp ) movq % rsi , - 4 8 0 (% rbp ) movq $ 0 , - 4 0 0 (% rbp ) movq $ 0 , - 3 9 2 (% rbp ) movq $ 0 , - 3 8 4 (% rbp ) . LBB 2 : leaq type ... 6 0 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 3 7 6 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq $ 0 , - 4 2 4 (% rbp ) movq $ 0 , - 4 1 6 (% rbp ) leaq go . leetcode .. go . leetcode . minHeap .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 8 (% rbp ) leaq type ... 6 0 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 3 6 0 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 0 , - 3 4 4 (% rbp ) movq $ 0 , - 3 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 3 : movq - 3 6 8 (% rbp ), % rcx movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 3 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 : jmp . L 3 . L 2 : . LBB 4 : movq - 3 6 8 (% rbp ), % rax leaq - 3 5 2 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . minHeap .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 4 : movq - 3 6 8 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq 2 4 (% rbp ), % rax testq % rax , % rax sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 4 . LBB 8 : movq 4 8 (% rbp ), % rax testq % rax , % rax sete % al . L 4 : . LBE 8 : . LBE 7 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 5 . LBB 9 : cmpq $ 0 , - 4 8 0 (% rbp ) sete % al . L 5 : . LBE 9 : . LBE 6 : testb % al , % al je . L 6 . LBB 1 0 : . LBB 1 1 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 4 7 2 (% rbp ), % rcx movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 8 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 6 : . LBE 1 1 : . LBE 1 0 : . LBE 5 : . LBB 1 2 : movq 2 4 (% rbp ), % rdx movq 4 8 (% rbp ), % rax imulq % rdx , % rax cmpq % rax , - 4 8 0 (% rbp ) jle . L 8 . LBB 1 3 : movq 2 4 (% rbp ), % rdx movq 4 8 (% rbp ), % rax imulq % rdx , % rax movq % rax , - 4 8 0 (% rbp ) . L 8 : . LBE 1 3 : . LBE 1 2 : leaq pimt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Pop . 0 func . 8 . 9 . 8 interface . 4 . 5 . 9 . 2 Push . 0 func . 8 interface . 4 . 5 . 9 . 8 . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. go . leetcode . minHeap (% rip ), % r 1 2 movq - 5 6 (% rbp ), % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call container .. z 2 fheap . Init @ PLT . LBB 1 4 : movq $ 0 , - 6 4 (% rbp ) . LBB 1 5 : . LBB 1 6 : . LBB 1 7 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 5 5 2 (% rbp ) movl $ 0 , % r 1 2 d . LBE 1 7 : jmp . L 9 . L 4 0 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : . LBB 2 0 : movq - 3 1 2 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 1 0 cmpq % rax , % r 1 2 jge . L 1 0 movq - 3 2 0 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 2 0 : . LBB 2 1 : movq % rax , - 6 4 (% rbp ) . LBE 2 1 : . LBB 2 2 : movq 4 8 (% rbp ), % rax testq % rax , % rax jg . L 1 1 jmp . L 3 6 . L 1 0 : . LBE 2 2 : . LBB 2 5 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : . LBE 2 5 : . LBB 2 6 : movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 1 : movq 4 0 (% rbp ), % rax movq (% rax ), % rbx movl $ 0 , % r 1 3 d leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 5 4 4 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq - 2 8 0 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , (% rax ) movq % rbx , 8 (% rax ) movq % r 1 3 , 1 6 (% rax ) movq - 2 8 0 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq $ 3 , - 2 6 4 (% rbp ) movq $ 3 , - 2 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 3 . LBB 2 3 : movq - 2 8 8 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 5 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 3 : jmp . L 1 4 . L 1 3 : . LBB 2 4 : movq - 2 8 8 (% rbp ), % rax leaq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 4 : . LBE 2 4 : movq - 2 8 8 (% rbp ), % rax movq % rax , - 5 3 6 (% rbp ) leaq pimt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Pop . 0 func . 8 . 9 . 8 interface . 4 . 5 . 9 . 2 Push . 0 func . 8 interface . 4 . 5 . 9 . 8 . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. go . leetcode . minHeap (% rip ), % rax movq % rax , - 5 2 8 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 5 2 0 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % rax movq - 5 4 4 (% rbp ), % rdx movq - 5 3 6 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call container .. z 2 fheap . Push @ PLT . LBE 2 6 : . LBE 1 9 : . LBB 2 7 : addq $ 1 , % r 1 2 . L 9 : . LBE 2 7 : cmpq - 5 5 2 (% rbp ), % r 1 2 jl . L 4 0 . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBB 2 8 : . LBB 2 9 : jmp . L 1 7 . L 4 1 : . LBB 3 0 : nop . LBE 3 0 : . LBB 3 1 : leaq pimt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Pop . 0 func . 8 . 9 . 8 interface . 4 . 5 . 9 . 2 Push . 0 func . 8 interface . 4 . 5 . 9 . 8 . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. go . leetcode . minHeap (% rip ), % rax movq % rax , - 5 1 2 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 5 0 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call container .. z 2 fheap . Pop @ PLT movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rcx cmpq % rcx , % rsi je . L 1 8 leaq type .. interface . 4 . 5 (% rip ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . panicdottype @ PLT . L 1 8 : movq % rdx , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rbx movq - 4 4 8 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 9 movq % rax , % rsi movl $ 2 , % edi call runtime . goPanicSliceAcap @ PLT . L 1 9 : movq - 4 6 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 2 , - 2 0 0 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) leaq 1 (% rbx ), % rax movq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 0 . LBB 3 2 : movq - 2 4 0 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 6 . 7 int (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) . LBE 3 2 : jmp . L 2 1 . L 2 0 : . LBB 3 3 : movq - 2 4 0 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rdx movq % rcx , - 4 3 2 (% rbp ) movq % rax , - 4 2 4 (% rbp ) movq % rdx , - 4 1 6 (% rbp ) . L 2 1 : . LBE 3 3 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 4 0 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 2 0 8 (% rbp ), % rcx movq - 2 0 0 (% rbp ), % rbx movq % rcx , - 1 7 6 (% rbp ) movq % rbx , - 1 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rdx movq % rdx , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 6 0 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 2 . LBB 3 4 : movq - 1 7 6 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 2 3 . L 2 2 : . LBE 3 4 : . LBB 3 5 : movq - 1 7 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 3 : . LBE 3 5 : . LBB 3 6 : movq - 4 5 6 (% rbp ), % rax cmpq $ 2 , % rax jg . L 2 4 movq % rax , % rsi movl $ 2 , % edi call runtime . goPanicIndex @ PLT . L 2 4 : movq - 4 6 4 (% rbp ), % rax addq $ 1 6 , % rax movq (% rax ), % rax movq 4 8 (% rbp ), % rdx subq $ 1 , % rdx cmpq % rdx , % rax jge . L 1 7 . LBB 3 7 : movq - 4 5 6 (% rbp ), % rax testq % rax , % rax jg . L 2 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 6 : movq - 4 5 6 (% rbp ), % rax cmpq $ 2 , % rax jg . L 2 7 movq % rax , % rsi movl $ 2 , % edi call runtime . goPanicIndex @ PLT . L 2 7 : movq - 4 6 4 (% rbp ), % rax addq $ 1 6 , % rax movq (% rax ), % rax addq $ 1 , % rax movq 4 8 (% rbp ), % rdx testq % rax , % rax js . L 2 8 cmpq % rdx , % rax jl . L 3 8 . L 2 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 4 5 6 (% rbp ), % rdx cmpq $ 2 , % rdx jg . L 3 0 movq % rdx , % rsi movl $ 2 , % edi call runtime . goPanicIndex @ PLT . L 3 0 : movq - 4 6 4 (% rbp ), % rdx movq (% rdx ), % r 1 2 movq 4 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rbx movq - 4 6 4 (% rbp ), % rax addq $ 1 6 , % rax movq (% rax ), % rax leaq 1 (% rax ), % r 1 3 leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 4 9 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 4 4 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq % r 1 2 , (% rax ) movq % rbx , 8 (% rax ) movq % r 1 3 , 1 6 (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 3 , - 1 2 0 (% rbp ) movq $ 3 , - 1 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 1 . LBB 3 8 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 8 : jmp . L 3 2 . L 3 1 : . LBB 3 9 : movq - 1 4 4 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 2 : . LBE 3 9 : movq - 1 4 4 (% rbp ), % rax movq % rax , - 4 8 8 (% rbp ) leaq pimt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Pop . 0 func . 8 . 9 . 8 interface . 4 . 5 . 9 . 2 Push . 0 func . 8 interface . 4 . 5 . 9 . 8 . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. go . leetcode . minHeap (% rip ), % r 1 4 movq - 5 6 (% rbp ), % r 1 5 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rcx , % rsi movq % rdx , % rax movq - 4 9 6 (% rbp ), % rdx movq - 4 8 8 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call container .. z 2 fheap . Push @ PLT . L 1 7 : . LBE 3 7 : . LBE 3 6 : . LBE 3 1 : movq - 4 2 4 (% rbp ), % rax cmpq % rax , - 4 8 0 (% rbp ) jg . L 4 1 . LBE 2 9 : . LBE 2 8 : . LBB 4 0 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 4 7 2 (% rbp ), % rcx movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 8 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 4 0 : . LBE 2 : movq - 4 7 2 (% rbp ), % rax addq $ 5 2 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 1 movl $ 1 3 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 1 2 , % rsp movq % rdi , - 1 2 0 (% rbp ) movq % rsi , - 1 2 8 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) . LBB 2 : . LBB 3 : movq $ 0 , - 3 2 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rcx movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 2 0 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq - 8 0 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 9 : . LBB 1 0 : movq % rax , - 3 2 (% rbp ) movq % rdx , - 4 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 3 2 (% rbp ), % rdx addq $ 1 , % rdx movq % rdx , - 2 4 (% rbp ) . LBB 1 3 : jmp . L 4 . L 3 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 2 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : . LBE 2 6 : . LBB 2 7 : . LBB 2 5 : . LBB 2 4 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) js . L 5 cmpq % rdx , - 2 4 (% rbp ) jl . L 1 5 . L 5 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : movq 1 6 (% rbp ), % rsi movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rsi , % rdx movq (% rdx ), % rsi movq - 4 0 (% rbp ), % rdx addq % rsi , % rdx movq % rdx , - 4 8 (% rbp ) . LBB 1 6 : movq - 4 8 (% rbp ), % rdx cmpq - 1 2 8 (% rbp ), % rdx jne . L 7 . LBB 1 7 : . LBB 1 8 : movq - 3 2 (% rbp ), % rax leaq 1 (% rax ), % r 1 2 movq - 2 4 (% rbp ), % rax leaq 1 (% rax ), % rbx leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax movq % r 1 2 , (% rax ) movq % rbx , 8 (% rax ) movq - 5 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 2 , - 1 0 4 (% rbp ) movq $ 2 , - 9 6 (% rbp ) movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 7 : . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 1 9 : movq - 4 8 (% rbp ), % rdx cmpq - 1 2 8 (% rbp ), % rdx jg . L 1 8 . LBE 1 9 : . LBE 1 5 : . LBB 2 2 : addq $ 1 , - 2 4 (% rbp ) . L 4 : . LBE 2 2 : movq 2 4 (% rbp ), % rdx cmpq % rdx , - 2 4 (% rbp ) jl . L 1 9 jmp . L 1 0 . L 1 8 : . LBB 2 3 : . LBB 2 1 : . LBB 2 0 : nop . L 1 0 : . LBE 2 0 : . LBE 2 1 : . LBE 2 3 : . LBE 2 4 : . LBE 2 5 : . LBE 2 7 : . LBE 8 : . LBB 2 8 : addq $ 1 , % rax . L 2 : . LBE 2 8 : cmpq % rcx , % rax jl . L 2 0 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 2 9 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 2 9 : . LBE 2 : movq - 1 2 0 (% rbp ), % rax addq $ 1 1 2 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 1 : leaq - 1 2 2 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 2 1 movl $ 1 2 2 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 1 2 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 1 7 6 , % rsp movq % rdi , - 1 1 6 0 (% rbp ) leaq type ... 6 1 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 6 4 (% rbp ) leaq . LC 2 5 (% rip ), % rax movq % rax , - 1 0 5 6 (% rbp ) movq $ 2 , - 1 0 4 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 3 . LBB 4 7 : movq - 1 0 6 4 (% rbp ), % rcx movq - 1 0 5 6 (% rbp ), % rax movq - 1 0 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 7 : jmp . L 1 0 4 . L 1 0 3 : . LBB 4 8 : movq - 1 0 6 4 (% rbp ), % rax leaq - 1 0 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 4 : . LBE 4 8 : movq - 1 0 6 4 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) movq $ 1 , - 6 1 6 (% rbp ) movq $ 1 , - 6 0 8 (% rbp ) movq $ 1 8 , - 6 0 0 (% rbp ) leaq type ... 6 5 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 3 2 (% rbp ) leaq . LC 2 6 (% rip ), % rax movq % rax , - 1 0 2 4 (% rbp ) movq $ 1 , - 1 0 1 6 (% rbp ) leaq . LC 2 7 (% rip ), % rax movq % rax , - 1 0 0 8 (% rbp ) movq $ 1 , - 1 0 0 0 (% rbp ) leaq . LC 2 1 (% rip ), % rax movq % rax , - 9 9 2 (% rbp ) movq $ 1 , - 9 8 4 (% rbp ) leaq . LC 2 8 (% rip ), % rax movq % rax , - 9 7 6 (% rbp ) movq $ 1 , - 9 6 8 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 9 6 0 (% rbp ) movq $ 1 , - 9 5 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 5 . LBB 4 9 : movq - 1 0 3 2 (% rbp ), % rax movq - 1 0 2 4 (% rbp ), % rcx movq - 1 0 1 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 1 0 0 8 (% rbp ), % rcx movq - 1 0 0 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 9 9 2 (% rbp ), % rcx movq - 9 8 4 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 9 7 6 (% rbp ), % rcx movq - 9 6 8 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 9 6 0 (% rbp ), % rcx movq - 9 5 2 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) . LBE 4 9 : jmp . L 1 0 6 . L 1 0 5 : . LBB 5 0 : movq - 1 0 3 2 (% rbp ), % rax leaq - 1 0 2 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 5 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 6 : . LBE 5 0 : movq - 1 0 3 2 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 5 , - 5 8 4 (% rbp ) movq $ 5 , - 5 7 6 (% rbp ) movq $ 9 , - 5 6 8 (% rbp ) leaq type ... 6 5 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 3 6 (% rbp ) leaq . LC 2 9 (% rip ), % rax movq % rax , - 9 2 8 (% rbp ) movq $ 1 , - 9 2 0 (% rbp ) leaq . LC 3 0 (% rip ), % rax movq % rax , - 9 1 2 (% rbp ) movq $ 2 , - 9 0 4 (% rbp ) leaq . LC 3 1 (% rip ), % rax movq % rax , - 8 9 6 (% rbp ) movq $ 1 , - 8 8 8 (% rbp ) leaq . LC 2 4 (% rip ), % rax movq % rax , - 8 8 0 (% rbp ) movq $ 1 , - 8 7 2 (% rbp ) leaq . LC 2 1 (% rip ), % rax movq % rax , - 8 6 4 (% rbp ) movq $ 1 , - 8 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 7 . LBB 5 1 : movq - 9 3 6 (% rbp ), % rax movq - 9 2 8 (% rbp ), % rcx movq - 9 2 0 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 9 1 2 (% rbp ), % rcx movq - 9 0 4 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 8 9 6 (% rbp ), % rcx movq - 8 8 8 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 8 8 0 (% rbp ), % rcx movq - 8 7 2 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 8 6 4 (% rbp ), % rcx movq - 8 5 6 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) . LBE 5 1 : jmp . L 1 0 8 . L 1 0 7 : . LBB 5 2 : movq - 9 3 6 (% rbp ), % rax leaq - 9 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 5 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 8 : . LBE 5 2 : movq - 9 3 6 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 5 , - 5 5 2 (% rbp ) movq $ 5 , - 5 4 4 (% rbp ) movq $ 6 , - 5 3 6 (% rbp ) leaq type ... 6 1 3 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 4 0 (% rbp ) leaq . LC 3 2 (% rip ), % rax movq % rax , - 8 3 2 (% rbp ) movq $ 2 , - 8 2 4 (% rbp ) leaq . LC 3 3 (% rip ), % rax movq % rax , - 8 1 6 (% rbp ) movq $ 1 , - 8 0 8 (% rbp ) leaq . LC 3 4 (% rip ), % rax movq % rax , - 8 0 0 (% rbp ) movq $ 1 , - 7 9 2 (% rbp ) leaq . LC 2 8 (% rip ), % rax movq % rax , - 7 8 4 (% rbp ) movq $ 1 , - 7 7 6 (% rbp ) leaq . LC 2 1 (% rip ), % rax movq % rax , - 7 6 8 (% rbp ) movq $ 1 , - 7 6 0 (% rbp ) leaq . LC 3 5 (% rip ), % rax movq % rax , - 7 5 2 (% rbp ) movq $ 3 , - 7 4 4 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 7 3 6 (% rbp ) movq $ 1 , - 7 2 8 (% rbp ) leaq . LC 2 4 (% rip ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 1 , - 7 1 2 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 7 0 4 (% rbp ) movq $ 1 , - 6 9 6 (% rbp ) leaq . LC 3 6 (% rip ), % rax movq % rax , - 6 8 8 (% rbp ) movq $ 2 , - 6 8 0 (% rbp ) leaq . LC 2 1 (% rip ), % rax movq % rax , - 6 7 2 (% rbp ) movq $ 1 , - 6 6 4 (% rbp ) leaq . LC 3 1 (% rip ), % rax movq % rax , - 6 5 6 (% rbp ) movq $ 1 , - 6 4 8 (% rbp ) leaq . LC 2 1 (% rip ), % rax movq % rax , - 6 4 0 (% rbp ) movq $ 1 , - 6 3 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 9 . LBB 5 3 : movq - 8 4 0 (% rbp ), % rax movq - 8 3 2 (% rbp ), % rcx movq - 8 2 4 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 8 1 6 (% rbp ), % rcx movq - 8 0 8 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 8 0 0 (% rbp ), % rcx movq - 7 9 2 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 7 8 4 (% rbp ), % rcx movq - 7 7 6 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 7 6 8 (% rbp ), % rcx movq - 7 6 0 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 7 5 2 (% rbp ), % rcx movq - 7 4 4 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 7 3 6 (% rbp ), % rcx movq - 7 2 8 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 7 2 0 (% rbp ), % rcx movq - 7 1 2 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 7 0 4 (% rbp ), % rcx movq - 6 9 6 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) movq - 6 8 8 (% rbp ), % rcx movq - 6 8 0 (% rbp ), % rbx movq % rcx , 1 4 4 (% rax ) movq % rbx , 1 5 2 (% rax ) movq - 6 7 2 (% rbp ), % rcx movq - 6 6 4 (% rbp ), % rbx movq % rcx , 1 6 0 (% rax ) movq % rbx , 1 6 8 (% rax ) movq - 6 5 6 (% rbp ), % rcx movq - 6 4 8 (% rbp ), % rbx movq % rcx , 1 7 6 (% rax ) movq % rbx , 1 8 4 (% rax ) movq - 6 4 0 (% rbp ), % rcx movq - 6 3 2 (% rbp ), % rbx movq % rcx , 1 9 2 (% rax ) movq % rbx , 2 0 0 (% rax ) . LBE 5 3 : jmp . L 1 1 0 . L 1 0 9 : . LBB 5 4 : movq - 8 4 0 (% rbp ), % rax leaq - 8 3 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 3 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 1 0 : . LBE 5 4 : movq - 8 4 0 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 1 3 , - 5 2 0 (% rbp ) movq $ 1 3 , - 5 1 2 (% rbp ) movq $ 2 2 , - 5 0 4 (% rbp ) leaq - 6 2 4 (% rbp ), % rax movq % rax , - 1 0 8 8 (% rbp ) movq $ 4 , - 1 0 8 0 (% rbp ) movq $ 4 , - 1 0 7 2 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 3 7 (% rip ), % rax movq % rax , - 1 1 8 4 (% rbp ) movq $ 6 9 , - 1 1 7 6 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 1 1 8 4 (% rbp ), % rcx movq - 1 1 7 6 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) . LBB 5 5 : movq $ 0 , - 1 1 5 2 (% rbp ) movq $ 0 , - 1 1 4 4 (% rbp ) movq $ 0 , - 1 1 3 6 (% rbp ) movq $ 0 , - 1 1 2 8 (% rbp ) . LBB 5 6 : . LBB 5 7 : . LBB 5 8 : movq - 1 0 8 8 (% rbp ), % rax movq - 1 0 8 0 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 1 0 7 2 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 1 1 8 4 (% rbp ) movl $ 0 , % ebx . LBE 5 8 : jmp . L 1 1 1 . L 1 2 0 : . LBB 5 9 : nop . LBE 5 9 : . LBB 6 0 : . LBB 6 1 : movq - 4 2 4 (% rbp ), % rax testq % rbx , % rbx js . L 1 1 2 cmpq % rax , % rbx jge . L 1 1 2 movq - 4 3 2 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) . LBE 6 1 : . LBB 6 2 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 1 1 5 2 (% rbp ) movq % rdx , - 1 1 4 4 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 1 1 3 6 (% rbp ) movq % rdx , - 1 1 2 8 (% rbp ) . LBE 6 2 : . LBB 6 3 : movq - 1 1 2 8 (% rbp ), % rax movq % rax , - 1 0 9 6 (% rbp ) movq - 1 1 5 2 (% rbp ), % rax movq - 1 1 4 4 (% rbp ), % rdx movq % rax , - 1 1 2 0 (% rbp ) movq % rdx , - 1 1 1 2 (% rbp ) movq - 1 1 3 6 (% rbp ), % rax movq % rax , - 1 1 0 4 (% rbp ) subq $ 8 , % rsp pushq - 1 1 0 4 (% rbp ) pushq - 1 1 1 2 (% rbp ) pushq - 1 1 2 0 (% rbp ) call go . leetcode . evalRPN addq $ 3 2 , % rsp movq % rax , - 1 1 6 8 (% rbp ) leaq go . leetcode .. go . leetcode . para 1 5 0 .. d (% rip ), % rax movq % rax , - 1 2 1 6 (% rbp ) leaq go . leetcode .. go . leetcode . para 1 5 0 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 1 1 2 0 (% rbp ), % rax movq - 1 1 1 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 1 1 0 4 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 1 1 3 jmp . L 1 1 8 . L 1 1 2 : . LBE 6 3 : . LBB 6 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 1 3 : . LBE 6 6 : . LBB 6 7 : . LBB 6 4 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 4 : jmp . L 1 1 5 . L 1 1 8 : . LBB 6 5 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 1 5 0 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 1 5 : . LBE 6 5 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 1 2 0 8 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 1 2 0 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 1 1 6 8 (% rbp ), % rdi movq % rdi , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 1 1 9 2 (% rbp ) movdqa - 1 2 1 6 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 1 2 0 0 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 3 8 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) . LBE 6 7 : . LBE 6 0 : . LBB 6 8 : addq $ 1 , % rbx . L 1 1 1 : . LBE 6 8 : cmpq - 1 1 8 4 (% rbp ), % rbx jl . L 1 2 0 . LBE 5 7 : . LBE 5 6 : . LBE 5 5 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 3 9 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 4 movl $ 1 5 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 4 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 3 6 , % rsp movq % rdi , - 1 3 6 (% rbp ) movq $ 0 , - 9 6 (% rbp ) movq $ 0 , - 8 8 (% rbp ) movq $ 0 , - 8 0 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBB 3 : cmpq $ 0 , - 6 4 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 9 6 (% rbp ) movq $ 0 , - 8 8 (% rbp ) movq $ 0 , - 8 0 (% rbp ) movq - 1 3 6 (% rbp ), % rcx movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 8 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq $ 1 , - 2 4 (% rbp ) movq $ 1 , - 3 2 (% rbp ) movq - 6 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 2 8 (% rbp ) movq % rbx , - 1 2 0 (% rbp ) movq % rbx , - 1 1 2 (% rbp ) . LBB 6 : movq $ 0 , - 4 0 (% rbp ) . LBB 7 : jmp . L 4 . L 3 2 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq - 1 2 0 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 5 cmpq % rax , - 4 0 (% rbp ) jl . L 2 5 . L 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq - 1 2 8 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 1 , (% rax ) . LBE 9 : . LBB 1 0 : addq $ 1 , - 4 0 (% rbp ) . L 4 : . LBE 1 0 : movq - 4 0 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax jl . L 3 2 . LBE 7 : . LBE 6 : . LBB 1 1 : movq $ 0 , - 4 8 (% rbp ) movq - 6 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 5 6 (% rbp ) . LBB 1 2 : jmp . L 9 . L 3 3 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : movq - 1 2 0 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 0 cmpq % rax , - 4 8 (% rbp ) jge . L 1 0 movq - 1 2 0 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) jns . L 1 1 jmp . L 1 2 . L 1 0 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 1 : cmpq % rax , - 4 8 (% rbp ) jl . L 2 7 . L 1 2 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq - 1 2 8 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq - 1 2 8 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx imulq - 2 4 (% rbp ), % rax movq % rax , (% rdx ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 4 cmpq % rax , - 4 8 (% rbp ) jl . L 2 8 . L 1 4 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq 1 6 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq - 2 4 (% rbp ), % rdx imulq % rdx , % rax movq % rax , - 2 4 (% rbp ) movq - 1 2 0 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 6 cmpq % rax , - 5 6 (% rbp ) jge . L 1 6 movq - 1 2 0 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) jns . L 1 7 jmp . L 1 8 . L 1 6 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : cmpq % rax , - 5 6 (% rbp ) jl . L 2 9 . L 1 8 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 1 2 8 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq - 1 2 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx imulq - 3 2 (% rbp ), % rax movq % rax , (% rdx ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 2 0 cmpq % rax , - 5 6 (% rbp ) jl . L 3 0 . L 2 0 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq - 3 2 (% rbp ), % rdx imulq % rdx , % rax movq % rax , - 3 2 (% rbp ) . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 4 8 (% rbp ), % rax leaq 1 (% rax ), % rdx movq - 5 6 (% rbp ), % rax subq $ 1 , % rax movq % rdx , - 4 8 (% rbp ) movq % rax , - 5 6 (% rbp ) . L 9 : . LBE 1 6 : . LBE 1 5 : movq - 4 8 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax jl . L 3 3 . LBE 1 2 : . LBE 1 1 : . LBB 1 7 : movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 1 3 6 (% rbp ), % rcx movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 8 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 1 7 : . LBE 2 : movq - 1 3 6 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 3 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 9 movl $ 3 2 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : . LEHB 0 : ret . L 1 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 8 0 , % rsp . LEHE 0 : movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movb $ 0 , - 2 4 1 (% rbp ) . LBB 2 : . LBB 3 : movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movq % rax , - 1 5 2 (% rbp ) movq - 1 5 2 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 5 2 (% rbp ), % rdx leaq main . main .. thunk 0 (% rip ), % rdi leaq - 2 4 1 (% rbp ), % rsi leaq - 2 4 0 (% rbp ), % rax movq % rdx , % rcx movq % rdi , % rdx movq % rax , % rdi . LEHB 1 : call runtime . deferprocStack @ PLT . L 6 : . LBE 3 : . LBB 4 : . LBB 5 : . LBB 6 : leaq - 1 1 2 (% rbp ), % rax movq % rax , % rdi call time . Now @ PLT leaq . LC 2 (% rip ), % r 1 2 movl $ 9 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx leaq - 1 1 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call time . Time . Format @ PLT movq % rax , % r 1 4 movq % rdx , % r 1 5 movq - 2 8 8 (% rbp ), % rax testq % rax , % rax jne . L 2 movl $ 0 , % eax jmp . L 3 . L 2 : movq - 2 8 8 (% rbp ), % rax movq (% rax ), % rax . L 3 : movq % rax , % rsi leaq io . Writer .. d (% rip ), % rdi call runtime . requireitab @ PLT movq % rax , - 3 0 4 (% rbp ) movq - 2 8 0 (% rbp ), % rax movq % rax , - 2 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % rsi , % r 8 movq % rbx , % r 9 movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx movq % r 8 , % rcx movq % r 9 , % r 8 movq % rax , % rdi call io . WriteString @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) . LBB 7 : movq - 2 7 2 (% rbp ), % rax testq % rax , % rax je . L 4 movl $ 0 , % ebx jmp . L 1 3 . L 4 : . LBE 7 : movl $ 1 0 0 0 0 0 0 0 0 0 , % edi call time . Sleep @ PLT . LEHE 1 : . LBE 6 : jmp . L 6 . L 1 8 : . LBE 5 : . LBE 4 : . LBE 2 : movl $ 2 , % ebx . L 1 3 : leaq - 2 4 1 (% rbp ), % rax movq % rax , % rdi . LEHB 2 : call runtime . deferreturn @ PLT . LEHE 2 : cmpl $ 1 , % ebx je . L 7 jmp . L 1 7 . L 1 4 : leaq - 2 4 1 (% rbp ), % rax movq % rax , % rdi . LEHB 3 : call runtime . checkdefer @ PLT . LEHE 3 : jmp . L 1 8 . L 1 5 : movq % rax , - 3 1 2 (% rbp ) movl $ 1 , % ebx jmp . L 1 3 . L 7 : movq - 3 1 2 (% rbp ), % rax movq % rax , % rdi . LEHB 4 : call _Unwind_Resume @ PLT . L 1 6 : leaq - 2 4 1 (% rbp ), % rax movq % rax , % rdi call runtime . checkdefer @ PLT jmp . L 1 3 . L 1 7 : addq $ 2 8 0 , % rsp . LEHE 4 : popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 7 2 movl $ 1 6 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 4 : ret . L 7 2 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 5 2 , % rsp movb $ 0 , - 4 1 (% rbp ) . LBB 2 8 : movq 2 4 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax imulq % rax , % rax movq % rax , % rcx movabsq $ 2 0 4 9 6 3 8 2 3 0 4 1 2 1 7 2 4 0 2 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rax sarq $ 6 3 , % rax movq % rdx , % rbx subq % rax , % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int 1 6 .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) movq % rbx , - 1 4 4 (% rbp ) . LBB 2 9 : movq $ 0 , - 2 4 (% rbp ) . LBB 3 0 : jmp . L 3 1 . L 7 1 : . LBB 3 1 : nop . LBE 3 1 : . LBB 3 2 : movw $ 0 , - 2 6 (% rbp ) movw $ 0 , - 2 8 (% rbp ) . LBB 3 3 : movq $ 0 , - 4 0 (% rbp ) . LBB 3 4 : jmp . L 3 2 . L 7 0 : . LBB 3 5 : nop . LBE 3 5 : . LBB 3 6 : . LBB 3 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 3 cmpq % rax , - 2 4 (% rbp ) jl . L 6 3 . L 3 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 3 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 5 cmpq % rax , - 4 0 (% rbp ) jge . L 3 5 movq - 1 2 8 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 5 7 (% rbp ) cmpb $ 4 6 , - 5 7 (% rbp ) jne . L 3 6 jmp . L 3 7 . L 3 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : . LBB 3 8 : movzbl - 5 7 (% rbp ), % eax subl $ 4 8 , % eax cmpb $ 1 5 , % al ja . L 3 8 movl $ 1 , % edx movl % eax , % ecx sall % cl , % edx movl % edx , % eax jmp . L 3 9 . L 3 8 : movl $ 0 , % eax . L 3 9 : movw % ax , - 6 0 (% rbp ) . LBB 3 9 : movzwl - 2 6 (% rbp ), % eax andw - 6 0 (% rbp ), % ax testw % ax , % ax jle . L 4 0 . LBB 4 0 : . LBB 4 1 : movb $ 0 , - 4 1 (% rbp ) movzbl - 4 1 (% rbp ), % eax jmp . L 6 1 . L 4 0 : . LBE 4 1 : . LBE 4 0 : . LBE 3 9 : movzwl - 6 0 (% rbp ), % eax orw % ax , - 2 6 (% rbp ) . LBB 4 2 : movq - 5 6 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rax sarq $ 6 3 , % rax movq % rdx , % rsi subq % rax , % rsi movq - 2 4 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx sarq $ 6 3 , % rcx movq % rdx , % rax subq % rcx , % rax imulq % rax , % rsi movq - 4 0 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx sarq $ 6 3 , % rcx movq % rdx , % rax subq % rcx , % rax addq % rsi , % rax movq - 1 5 2 (% rbp ), % rdx testq % rax , % rax js . L 4 2 cmpq % rdx , % rax jl . L 6 4 . L 4 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 4 : movq - 1 6 0 (% rbp ), % rdx addq % rax , % rax addq % rdx , % rax movzwl (% rax ), % eax andw - 6 0 (% rbp ), % ax testw % ax , % ax jle . L 4 4 . LBB 4 3 : . LBB 4 4 : movb $ 0 , - 4 1 (% rbp ) movzbl - 4 1 (% rbp ), % eax jmp . L 6 1 . L 4 4 : . LBE 4 4 : . LBE 4 3 : . LBE 4 2 : movq - 5 6 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx movq % rcx , % rax sarq $ 6 3 , % rax movq % rdx , % rsi subq % rax , % rsi movq - 2 4 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx sarq $ 6 3 , % rcx movq % rdx , % rax subq % rcx , % rax imulq % rax , % rsi movq - 4 0 (% rbp ), % rcx movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rcx , % rax imulq % rdx sarq $ 6 3 , % rcx movq % rdx , % rax subq % rcx , % rax leaq (% rax ,% rsi ), % rcx movq - 1 5 2 (% rbp ), % rax testq % rcx , % rcx js . L 4 5 cmpq % rax , % rcx jl . L 6 5 . L 4 5 : movq % rax , % rsi movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 6 5 : movq - 5 6 (% rbp ), % rsi movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rsi , % rax imulq % rdx movq % rsi , % rax sarq $ 6 3 , % rax movq % rdx , % rdi subq % rax , % rdi movq - 2 4 (% rbp ), % rsi movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rsi , % rax imulq % rdx sarq $ 6 3 , % rsi movq % rdx , % rax subq % rsi , % rax imulq % rax , % rdi movq - 4 0 (% rbp ), % rsi movabsq $ 6 1 4 8 9 1 4 6 9 1 2 3 6 5 1 7 2 0 6 , % rdx movq % rsi , % rax imulq % rdx sarq $ 6 3 , % rsi movq % rdx , % rax subq % rsi , % rax addq % rdi , % rax movq - 1 5 2 (% rbp ), % rdx testq % rax , % rax js . L 4 7 cmpq % rdx , % rax jl . L 6 6 . L 4 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 6 : movq - 1 6 0 (% rbp ), % rdx addq % rax , % rax addq % rdx , % rax movzwl (% rax ), % eax movq - 1 6 0 (% rbp ), % rdx addq % rcx , % rcx addq % rcx , % rdx orw - 6 0 (% rbp ), % ax movw % ax , (% rdx ) . L 3 7 : . LBE 3 8 : . LBE 3 7 : . LBB 4 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 4 9 cmpq % rax , - 4 0 (% rbp ) jl . L 6 7 . L 4 9 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 7 : movq 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 5 1 cmpq % rax , - 2 4 (% rbp ) jge . L 5 1 movq - 9 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 6 1 (% rbp ) cmpb $ 4 6 , - 6 1 (% rbp ) jne . L 5 2 jmp . L 5 3 . L 5 1 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : . LBB 4 6 : movzbl - 6 1 (% rbp ), % eax subl $ 4 8 , % eax cmpb $ 1 5 , % al ja . L 5 4 movl $ 1 , % edx movl % eax , % ecx sall % cl , % edx movl % edx , % eax jmp . L 5 5 . L 5 4 : movl $ 0 , % eax . L 5 5 : movw % ax , - 6 4 (% rbp ) . LBB 4 7 : movzwl - 2 8 (% rbp ), % eax andw - 6 4 (% rbp ), % ax testw % ax , % ax jle . L 5 6 . LBB 4 8 : . LBB 4 9 : movb $ 0 , - 4 1 (% rbp ) movzbl - 4 1 (% rbp ), % eax jmp . L 6 1 . L 5 6 : . LBE 4 9 : . LBE 4 8 : . LBE 4 7 : movzwl - 6 4 (% rbp ), % eax xorw % ax , - 2 8 (% rbp ) . L 5 3 : . LBE 4 6 : . LBE 4 5 : . LBE 3 6 : . LBB 5 0 : addq $ 1 , - 4 0 (% rbp ) . L 3 2 : . LBE 5 0 : movq - 4 0 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jl . L 7 0 . LBE 3 4 : . LBE 3 3 : . LBE 3 2 : . LBB 5 1 : addq $ 1 , - 2 4 (% rbp ) . L 3 1 : . LBE 5 1 : movq - 2 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jl . L 7 1 . LBE 3 0 : . LBE 2 9 : . LBB 5 2 : movb $ 1 , - 4 1 (% rbp ) movzbl - 4 1 (% rbp ), % eax . L 6 1 : . LBE 5 2 : . LBE 2 8 : movq - 8 (% rbp ), % rbx leave ret
leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 8 movl $ 2 9 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 7 2 , % rsp movq % rdi , - 2 8 0 (% rbp ) movq $ 0 , - 2 0 8 (% rbp ) movq $ 0 , - 2 0 0 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) . LBB 4 : . LBB 5 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 6 . LBB 6 : . LBB 7 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 8 0 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 9 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 5 . L 6 : . LBE 7 : . LBE 6 : . LBE 5 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 8 cmpq % rdx , % rax jl . L 1 6 . L 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 2 4 (% rbp ) movq 2 4 (% rbp ), % rax leaq - 1 (% rax ), % rdi movq 3 2 (% rbp ), % rax testq % rdi , % rdi js . L 1 0 cmpq % rax , % rdi jg . L 1 0 testq % rdi , % rdi jns . L 1 1 jmp . L 1 7 . L 1 0 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 1 7 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 1 : movq 1 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq % rdi , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) leaq - 1 7 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rax , % rdi call main . reverse addq $ 3 2 , % rsp movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq $ 1 , - 2 6 4 (% rbp ) movq $ 1 , - 2 5 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rbx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % r 1 2 leaq (% rbx ,% r 1 2 ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 3 . LBB 8 : movq - 1 4 4 (% rbp ), % rsi leaq - 4 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) . LBE 8 : jmp . L 1 4 . L 1 3 : . LBB 9 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq % rcx , - 2 7 2 (% rbp ) movq % rax , - 2 6 4 (% rbp ) movq % rdx , - 2 5 6 (% rbp ) . L 1 4 : . LBE 9 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq % r 1 2 , % rax leaq 0 (,% rax , 8 ), % rdx movq - 1 1 2 (% rbp ), % rax movq - 1 4 4 (% rbp ), % rcx movq % rbx , % rsi salq $ 3 , % rsi addq % rsi , % rcx movq % rax , % rsi movq % rcx , % rdi call memmove @ PLT . LBB 1 0 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 8 0 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 9 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 5 : . LBE 1 0 : . LBE 4 : movq - 2 8 0 (% rbp ), % rax leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 4 0 4 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 7 : ret . L 4 0 4 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 3 5 7 : . LBB 3 5 8 : movq - 2 4 (% rbp ), % rax movl $ 0 , % esi movq % rax , % rdi call go . util . NewPriorityQueueWithWaitLimit movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . LBE 3 5 8 : . LBE 3 5 7 : leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 2 3 movl $ 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 2 3 : pushq % rbp movq % rsp , % rbp pushq % rbx movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movb $ 0 , - 2 5 (% rbp ) . LBB 3 0 : . LBB 3 1 : movq - 4 0 (% rbp ), % rsi movq (% rsi ), % rsi testq % rsi , % rsi jne . L 2 1 . LBB 3 2 : . LBB 3 3 : . LBB 3 4 : movl $ 0 , % edx movl $ 0 , % eax movq % rdx , - 2 4 (% rbp ) movb % al , - 2 5 (% rbp ) . LBE 3 4 : movq - 2 4 (% rbp ), % rcx movb - 2 5 (% rbp ), % bl movq % rcx , % rax movq % rbx , % rdx jmp . L 2 2 . L 2 1 : . LBE 3 3 : . LBE 3 2 : . LBE 3 1 : . LBB 3 5 : . LBB 3 6 : movq - 4 0 (% rbp ), % rcx movq (% rcx ), % rcx movq (% rcx ), % rcx movl $ 1 , % esi movq % rcx , - 2 4 (% rbp ) movb % sil , - 2 5 (% rbp ) . LBE 3 6 : movq - 2 4 (% rbp ), % rax movb - 2 5 (% rbp ), % dl . L 2 2 : . LBE 3 5 : . LBE 3 0 : movq - 8 (% rbp ), % rbx leave ret
. LFB 4 : leaq - 5 0 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 4 movl $ 5 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 : ret . L 6 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 5 6 , % rsp movq % rdi , - 4 8 8 (% rbp ) leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 go . Solution . InputCase . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 5 6 (% rbp ) leaq . LC 3 2 (% rip ), % r 1 4 movl $ 1 0 , % r 1 5 d movq % r 1 4 , - 4 1 6 (% rbp ) movq % r 1 5 , - 4 0 8 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 8 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq $ 5 , 3 2 (% rax ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 5 , - 3 9 2 (% rbp ) movq $ 5 , - 3 8 4 (% rbp ) movq $ 2 , - 3 7 6 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 0 (% rbp ) movq - 4 4 0 (% rbp ), % rax movq $ 4 , (% rax ) movq $ 5 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 2 , 2 4 (% rax ) movq $ 3 , 3 2 (% rax ) movq - 4 4 0 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq $ 5 , - 3 6 0 (% rbp ) movq $ 5 , - 3 5 2 (% rbp ) leaq . LC 3 3 (% rip ), % r 1 2 movl $ 1 0 , % r 1 3 d movq % r 1 2 , - 3 4 4 (% rbp ) movq % r 1 3 , - 3 3 6 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 3 2 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq - 4 3 2 (% rbp ), % rax movq % rax , - 3 2 8 (% rbp ) movq $ 3 , - 3 2 0 (% rbp ) movq $ 3 , - 3 1 2 (% rbp ) movq $ 4 , - 3 0 4 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 2 4 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 2 9 6 (% rbp ) movq $ 3 , - 2 8 8 (% rbp ) movq $ 3 , - 2 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 0 . LBB 5 6 : movq - 4 5 6 (% rbp ), % rax movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) . LBE 5 6 : jmp . L 5 1 . L 5 0 : . LBB 5 7 : movq - 4 5 6 (% rbp ), % rax leaq - 4 1 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 go . Solution . InputCase . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 1 : . LBE 5 7 : movq - 4 5 6 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq $ 2 , - 4 7 2 (% rbp ) movq $ 2 , - 4 6 4 (% rbp ) . LBB 5 8 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 go . Solution . InputCase . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) . LBB 5 9 : . LBB 6 0 : . LBB 6 1 : movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 6 1 : jmp . L 5 2 . L 6 3 : . LBB 6 2 : nop . LBE 6 2 : . LBB 6 3 : . LBB 6 4 : movq - 1 8 4 (% rbp ), % rax testq % rbx , % rbx js . L 5 3 cmpq % rax , % rbx jge . L 5 3 movq - 1 9 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 3 , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 2 4 0 (% rbp ) movq % rdi , - 2 3 2 (% rbp ) movq 4 8 (% rax ), % rsi movq 5 6 (% rax ), % rdi movq % rsi , - 2 2 4 (% rbp ) movq % rdi , - 2 1 6 (% rbp ) movq 6 4 (% rax ), % rax movq % rax , - 2 0 8 (% rbp ) . LBE 6 4 : . LBB 6 5 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 5 6 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 5 4 jmp . L 6 1 . L 5 3 : . LBE 6 5 : . LBB 6 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : . LBE 6 8 : . LBB 6 9 : . LBB 6 6 : movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 4 8 (% rax ) movq % rdi , 5 6 (% rax ) movq - 9 6 (% rbp ), % rdx movq % rdx , 6 4 (% rax ) jmp . L 5 6 . L 6 1 : . LBE 6 6 : . LBB 6 7 : leaq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 go . Solution . InputCase . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 6 : . LBE 6 7 : . LBE 6 9 : . LBB 7 0 : leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 5 6 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 go . Solution . InputCase . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 7 . LBB 7 1 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 7 1 : jmp . L 5 8 . L 5 7 : . LBB 7 2 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 go . Solution . InputCase . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 8 : . LBE 7 2 : movq - 8 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 4 8 8 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 7 0 : . LBE 6 3 : . LBB 7 3 : addq $ 1 , % rbx . L 5 2 : . LBE 7 3 : cmpq % r 1 3 , % rbx jl . L 6 3 . LBE 6 0 : . LBE 5 9 : . LBE 5 8 : addq $ 4 5 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 8 5 movl $ 3 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 8 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 6 4 , % rsp movq % rdi , - 2 8 0 (% rbp ) movq - 2 8 0 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 5 3 : movq $ 0 , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) . LBB 5 4 : . LBB 5 5 : . LBB 5 6 : movq go . day 3 0 2 . testcases (% rip ), % rax movq 8 + go . day 3 0 2 . testcases (% rip ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 + go . day 3 0 2 . testcases (% rip ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movl $ 0 , % ebx . LBE 5 6 : jmp . L 7 5 . L 8 4 : . LBB 5 7 : nop . LBE 5 7 : . LBB 5 8 : . LBB 5 9 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 7 6 cmpq % rax , % rbx jge . L 7 6 movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) . LBE 5 9 : . LBB 6 0 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) . LBE 6 0 : . LBB 6 1 : . LBB 6 2 : subq $ 8 , % rsp pushq - 2 5 6 (% rbp ) pushq - 2 6 4 (% rbp ) pushq - 2 7 2 (% rbp ) call go . day 3 0 2 . DistinctRegions addq $ 3 2 , % rsp movq % rax , - 5 6 (% rbp ) movq - 2 4 8 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 7 7 jmp . L 7 8 . L 7 6 : . LBE 6 2 : . LBE 6 1 : . LBB 6 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 7 7 : . LBE 6 7 : . LBB 6 8 : . LBB 6 6 : . LBB 6 3 : leaq int .. d (% rip ), % rax movq % rax , - 3 0 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 2 9 6 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 2 8 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movdqa - 3 0 4 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 9 . LBB 6 4 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 6 4 : jmp . L 8 0 . L 7 9 : . LBB 6 5 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 0 : . LBE 6 5 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) leaq . LC 1 1 (% rip ), % r 1 2 movl $ 1 9 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 2 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 7 8 : . LBE 6 3 : . LBE 6 6 : . LBE 6 8 : . LBE 5 8 : . LBB 6 9 : addq $ 1 , % rbx . L 7 5 : . LBE 6 9 : cmpq - 2 8 8 (% rbp ), % rbx jl . L 8 4 . LBE 5 5 : . LBE 5 4 : . LBE 5 3 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 6 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 4 movl $ 3 6 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 4 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 3 4 4 , % rsp movq $ 0 , - 7 2 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 0 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 go . problem 0 1 4 9 . Point . 7 int (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 8 8 (% rbp ) . LBB 3 : movq $ 0 , - 3 2 (% rbp ) . LBB 4 : jmp . L 2 . L 4 9 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 2 (% rbp ), % rax . LBB 8 : movq - 3 2 8 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jl . L 3 8 . L 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 3 3 6 (% rbp ), % rdx movq % rax , % rcx salq $ 4 , % rcx addq % rcx , % rdx movq (% rdx ), % rcx movq 8 (% rdx ), % rbx movq % rcx , - 3 0 4 (% rbp ) movq % rbx , - 2 9 6 (% rbp ) movq - 3 2 8 (% rbp ), % rdx testq % rax , % rax js . L 5 cmpq % rdx , % rax jl . L 3 9 . L 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 3 3 6 (% rbp ), % rdx salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) leaq - 2 8 8 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 go . problem 0 1 4 9 . Point . 7 int (% rip ), % rdi call runtime . mapaccess 1 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % rbx leaq - 3 0 4 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 go . problem 0 1 4 9 . Point . 7 int (% rip ), % rdi call runtime . mapassign @ PLT movq % rbx , (% rax ) . LBE 8 : . LBE 7 : . LBE 6 : . LBB 9 : addq $ 1 , - 3 2 (% rbp ) . L 2 : . LBE 9 : movq - 3 2 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jl . L 4 9 . LBE 4 : . LBE 3 : cmpq $ 0 , - 8 8 (% rbp ) je . L 9 movq - 8 8 (% rbp ), % rax movq (% rax ), % rax jmp . L 1 0 . L 9 : movl $ 0 , % eax . L 1 0 : movq % rax , - 9 6 (% rbp ) . LBB 1 0 : cmpq $ 2 , - 9 6 (% rbp ) jg . L 1 1 . LBB 1 1 : . LBB 1 2 : movq - 8 0 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax jmp . L 1 2 . L 1 1 : . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : movq $ 0 , - 2 4 (% rbp ) . LBB 1 3 : movq - 9 6 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jge . L 1 3 . LBB 1 4 : movq - 9 6 (% rbp ), % rbx movq % rbx , % rdx movl $ 0 , % esi leaq go . problem 0 1 4 9 . Point .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , 1 6 (% rbp ) movq $ 0 , 2 4 (% rbp ) movq % rbx , 3 2 (% rbp ) . LBB 1 5 : movq $ 0 , - 3 5 2 (% rbp ) movq $ 0 , - 3 4 4 (% rbp ) . LBB 1 6 : . LBB 1 7 : . LBB 1 8 : leaq - 2 7 2 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 go . problem 0 1 4 9 . Point . 7 int (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 1 8 : jmp . L 1 4 . L 5 0 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : . LBB 2 1 : movq - 2 7 2 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 2 1 : movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) . LBB 2 2 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 5 . LBB 2 3 : movq - 1 7 6 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq go . problem 0 1 4 9 . Point .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , 1 6 (% rbp ) movq % rdx , 2 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , 3 2 (% rbp ) . LBE 2 3 : jmp . L 1 6 . L 1 5 : . LBB 2 4 : movq - 1 7 6 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rdx movq % rcx , 1 6 (% rbp ) movq % rax , 2 4 (% rbp ) movq % rdx , 3 2 (% rbp ) . L 1 6 : . LBE 2 4 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx leaq (% rax ,% rdx ), % rcx movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 2 : . LBE 2 0 : . LBB 2 5 : leaq - 2 7 2 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 1 4 : . LBE 2 5 : movq - 2 7 2 (% rbp ), % rax testq % rax , % rax jne . L 5 0 . L 1 3 : . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 2 6 : movq $ 0 , - 4 0 (% rbp ) . LBB 2 7 : jmp . L 1 9 . L 5 3 : . LBB 2 8 : nop . LBE 2 8 : . LBB 2 9 : . LBB 3 0 : movq - 4 0 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 4 8 (% rbp ) . LBB 3 1 : jmp . L 2 0 . L 5 2 : . LBB 3 2 : nop . LBE 3 2 : . LBB 3 3 : movq $ 0 , - 5 6 (% rbp ) . LBB 3 4 : movq $ 0 , - 6 4 (% rbp ) . LBB 3 5 : jmp . L 2 1 . L 5 1 : . LBB 3 6 : nop . LBE 3 6 : . LBB 3 7 : . LBB 3 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 2 cmpq % rax , - 4 0 (% rbp ) jl . L 4 2 . L 2 2 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 4 cmpq % rax , - 4 8 (% rbp ) jl . L 4 3 . L 2 4 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 2 6 cmpq % rax , - 6 4 (% rbp ) jl . L 4 4 . L 2 6 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 4 , % rax addq % rax , % rdx movq 1 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rax salq $ 4 , % rax addq % rcx , % rax movq 1 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rcx salq $ 4 , % rcx addq % rcx , % rsi movq (% rdx ), % rcx movq 8 (% rdx ), % rbx movq 8 (% rax ), % rdx movq (% rax ), % rax movq (% rsi ), % rdi movq 8 (% rsi ), % rsi movq % rcx , % r 8 movq % rbx , % r 9 movq % rdx , % rcx movq % rax , % rdx call go . problem 0 1 4 9 . isSameLine testb % al , % al je . L 2 8 . LBB 3 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 2 9 cmpq % rax , - 6 4 (% rbp ) jl . L 4 5 . L 2 9 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) leaq - 1 4 4 (% rbp ), % rdx movq - 8 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 go . problem 0 1 4 9 . Point . 7 int (% rip ), % rdi call runtime . mapaccess 1 @ PLT movq (% rax ), % rax addq % rax , - 5 6 (% rbp ) . L 2 8 : . LBE 3 9 : . LBE 3 8 : . LBE 3 7 : . LBB 4 0 : addq $ 1 , - 6 4 (% rbp ) . L 2 1 : . LBE 4 0 : movq - 6 4 (% rbp ), % rax cmpq - 9 6 (% rbp ), % rax jl . L 5 1 . LBE 3 5 : . LBE 3 4 : . LBB 4 1 : movq - 2 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jge . L 3 3 . LBB 4 2 : movq - 5 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . L 3 3 : . LBE 4 2 : . LBE 4 1 : . LBE 3 3 : . LBB 4 3 : addq $ 1 , - 4 8 (% rbp ) . L 2 0 : . LBE 4 3 : movq - 4 8 (% rbp ), % rax cmpq - 9 6 (% rbp ), % rax jl . L 5 2 . LBE 3 1 : . LBE 3 0 : . LBE 2 9 : . LBB 4 4 : addq $ 1 , - 4 0 (% rbp ) . L 1 9 : . LBE 4 4 : movq - 9 6 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 4 0 (% rbp ) jl . L 5 3 . LBE 2 7 : . LBE 2 6 : . LBB 4 5 : movq - 2 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax . L 1 2 : . LBE 4 5 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 4 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 4 3 movl $ 3 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 5 : ret . L 1 4 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 6 4 , % rsp movq % rdi , - 2 8 0 (% rbp ) movq - 2 8 0 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 6 8 : movq $ 0 , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) . LBB 6 9 : . LBB 7 0 : . LBB 7 1 : movq go . day 4 1 1 . testcases (% rip ), % rax movq 8 + go . day 4 1 1 . testcases (% rip ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 + go . day 4 1 1 . testcases (% rip ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movl $ 0 , % ebx . LBE 7 1 : jmp . L 1 3 3 . L 1 4 2 : . LBB 7 2 : nop . LBE 7 2 : . LBB 7 3 : . LBB 7 4 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 1 3 4 cmpq % rax , % rbx jge . L 1 3 4 movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) . LBE 7 4 : . LBB 7 5 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) . LBE 7 5 : . LBB 7 6 : . LBB 7 7 : movq - 2 5 6 (% rbp ), % rdx movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rax movq % rcx , % rdi movq % rax , % rsi call go . day 4 1 1 . IsKPalindromeBrute movb % al , - 4 9 (% rbp ) movzbl - 2 4 8 (% rbp ), % eax cmpb % al , - 4 9 (% rbp ) jne . L 1 3 5 jmp . L 1 3 6 . L 1 3 4 : . LBE 7 7 : . LBE 7 6 : . LBB 8 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 5 : . LBE 8 2 : . LBB 8 3 : . LBB 8 1 : . LBB 7 8 : leaq bool .. d (% rip ), % rax movq % rax , - 3 0 4 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movzbl - 2 4 8 (% rbp ), % edx movb % dl , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 2 9 6 (% rbp ) leaq bool .. d (% rip ), % r 1 4 leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movzbl - 4 9 (% rbp ), % edx movb % dl , (% rax ) movq - 1 2 8 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movdqa - 3 0 4 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 3 7 . LBB 7 9 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 7 9 : jmp . L 1 3 8 . L 1 3 7 : . LBB 8 0 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 3 8 : . LBE 8 0 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) leaq . LC 1 1 (% rip ), % r 1 2 movl $ 1 8 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 2 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 1 3 6 : . LBE 7 8 : . LBE 8 1 : . LBE 8 3 : . LBE 7 3 : . LBB 8 4 : addq $ 1 , % rbx . L 1 3 3 : . LBE 8 4 : cmpq - 2 8 8 (% rbp ), % rbx jl . L 1 4 2 . LBE 7 0 : . LBE 6 9 : . LBE 6 8 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : leaq - 4 2 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 4 movl $ 4 2 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 7 6 , % rsp movq % rdi , - 3 7 6 (% rbp ) leaq . LC 1 3 (% rip ), % rcx movl $ 8 , % ebx movq % rcx , - 3 3 6 (% rbp ) movq % rbx , - 3 2 8 (% rbp ) movq $ 6 , - 3 2 0 (% rbp ) leaq . LC 1 4 (% rip ), % rax movl $ 5 , % edx movq % rax , - 3 1 2 (% rbp ) movq % rdx , - 3 0 4 (% rbp ) movq $ 4 , - 2 9 6 (% rbp ) . LBB 1 7 : movq $ 0 , - 3 6 8 (% rbp ) movq $ 0 , - 3 6 0 (% rbp ) movq $ 0 , - 3 5 2 (% rbp ) . LBB 1 8 : . LBB 1 9 : . LBB 2 0 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq $ 2 , - 3 8 4 (% rbp ) movl $ 0 , % ebx . LBE 2 0 : jmp . L 2 2 . L 3 3 : . LBB 2 1 : nop . LBE 2 1 : . LBB 2 2 : . LBB 2 3 : testq % rbx , % rbx js . L 2 3 cmpq $ 1 , % rbx jg . L 2 3 movq % rbx , % rax addq % rax , % rax addq % rbx , % rax salq $ 3 , % rax leaq - 4 8 (% rbp ), % rcx addq % rcx , % rax leaq - 2 0 8 (% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 7 2 (% rbp ) . LBE 2 3 : . LBB 2 4 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) . LBE 2 4 : . LBB 2 5 : movq - 3 6 8 (% rbp ), % rdx movq - 3 6 0 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . problem 6 9 6 . countBinarySubstrings movq % rax , - 5 6 (% rbp ) . LBB 2 6 : movq - 3 5 2 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 2 4 jmp . L 2 5 . L 2 3 : . LBE 2 6 : . LBE 2 5 : . LBB 3 3 : movl $ 2 , % esi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : . LBE 3 3 : . LBB 3 4 : . LBB 3 2 : . LBB 2 7 : leaq string .. d (% rip ), % rax movq % rax , - 4 1 6 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 6 . LBB 2 8 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 8 : jmp . L 2 7 . L 2 6 : . LBB 2 9 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 7 : . LBE 2 9 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 4 0 8 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 4 0 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 3 9 2 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 4 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 3 5 2 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 4 4 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 4 1 6 (% rbp ), % xmm 0 movups % xmm 0 , - 1 2 8 (% rbp ) movdqa - 4 0 0 (% rbp ), % xmm 1 movups % xmm 1 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 8 . LBB 3 0 : movq - 1 3 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) . LBE 3 0 : jmp . L 2 9 . L 2 8 : . LBB 3 1 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 9 : . LBE 3 1 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 1 5 (% rip ), % r 1 2 movl $ 2 5 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 3 7 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 2 5 : . LBE 2 7 : . LBE 3 2 : . LBE 3 4 : . LBE 2 2 : . LBB 3 5 : addq $ 1 , % rbx . L 2 2 : . LBE 3 5 : cmpq - 3 8 4 (% rbp ), % rbx jl . L 3 3 . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 6 movl $ 7 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 6 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 5 6 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : . LBB 3 : . LBB 4 : movq 1 6 (% rbp ), % rax testq % rax , % rax sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 . LBB 5 : movq 2 4 (% rbp ), % rax testq % rax , % rax setle % al . L 2 : . LBE 5 : . LBE 4 : testb % al , % al je . L 3 . LBB 6 : . LBB 7 : movq $ 0 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 2 8 . L 3 : . LBE 7 : . LBE 6 : . LBE 3 : . LBB 8 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jne . L 5 . LBB 9 : . LBB 1 0 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 6 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 2 8 . L 5 : . LBE 1 0 : . LBE 9 : . LBB 1 1 : . LBB 1 2 : movq 2 4 (% rbp ), % rax cmpq $ 2 , % rax jne . L 7 . LBB 1 3 : . LBB 1 4 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 8 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 9 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 9 : movq 1 6 (% rbp ), % rax addq $ 8 , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 1 9 8 . maxInt movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 2 8 . L 7 : . LBE 1 4 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBE 8 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 6 4 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq % rbx , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rax testq % rax , % rax jg . L 1 0 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 0 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 1 1 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 1 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movq (% rdx ), % rdx movq % rdx , (% rax ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 1 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 2 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 3 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 3 : movq 1 6 (% rbp ), % rax addq $ 8 , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 1 9 8 . maxInt movq % rax , % rdx movq - 5 6 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 4 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 4 : movq - 6 4 (% rbp ), % rax addq $ 8 , % rax movq % rdx , (% rax ) . LBB 1 5 : movq $ 2 , - 2 4 (% rbp ) . LBB 1 6 : jmp . L 1 5 . L 3 5 : . LBB 1 7 : nop . LBE 1 7 : . LBB 1 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 6 cmpq % rax , - 2 4 (% rbp ) jl . L 2 9 . L 1 6 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 2 4 (% rbp ), % rax subq $ 2 , % rax movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 1 8 cmpq % rdx , % rax jl . L 3 0 . L 1 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq - 2 4 (% rbp ), % rdx subq $ 1 , % rdx movq - 5 6 (% rbp ), % rcx testq % rdx , % rdx js . L 2 0 cmpq % rcx , % rdx jl . L 3 1 . L 2 0 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq - 6 4 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rcx movq - 6 4 (% rbp ), % rsi salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rax addq % rcx , % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 1 9 8 . maxInt movq % rax , % rdx movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 2 cmpq % rax , - 2 4 (% rbp ) jl . L 3 2 . L 2 2 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq - 6 4 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq % rdx , (% rax ) . LBE 1 8 : . LBB 1 9 : addq $ 1 , - 2 4 (% rbp ) . L 1 5 : . LBE 1 9 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 3 5 . LBE 1 6 : . LBE 1 5 : . LBB 2 0 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 2 6 cmpq % rdx , % rax jl . L 3 4 . L 2 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq - 6 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 2 8 : . LBE 2 0 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 4 8 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 5 movl $ 4 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 4 0 , % rsp leaq . LC 1 8 (% rip ), % rax movl $ 8 , % edx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) call runtime . makemap_small @ PLT movq % rax , - 5 6 (% rbp ) . LBB 2 : movl $ 0 , - 6 0 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 3 9 2 (% rbp ), % rax movq % rax , - 4 7 2 (% rbp ) movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 2 3 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : movq - 3 9 2 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 4 0 0 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 4 jmp . L 2 0 . L 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBB 9 : addq $ 1 , % rbx . LBE 9 : jmp . L 6 . L 2 0 : . LBB 1 0 : movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movl % ecx , % eax . L 6 : . LBE 1 0 : . LBE 8 : . LBB 1 1 : movl % eax , - 6 0 (% rbp ) . LBE 1 1 : . LBB 1 2 : movb $ 0 , - 7 3 (% rbp ) . LBB 1 3 : movl - 6 0 (% rbp ), % eax movslq % eax , % rdx leaq - 3 7 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . intstring @ PLT movq - 5 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 2 _faststr @ PLT movl % edx , % eax movb % al , - 7 3 (% rbp ) . LBE 1 3 : . LBB 1 4 : movzbl - 7 3 (% rbp ), % eax xorl $ 1 , % eax testb % al , % al je . L 7 . LBB 1 5 : . LBB 1 6 : movl - 6 0 (% rbp ), % eax cltq movq % rax , % rsi movl $ 0 , % edi call runtime . intstring @ PLT movl $ 1 , % r 1 4 d movq - 5 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq % r 1 4 , (% rax ) jmp . L 2 . L 7 : . LBE 1 6 : . LBE 1 5 : . LBB 1 7 : . LBB 1 8 : movl - 6 0 (% rbp ), % eax cltq movq % rax , % rsi movl $ 0 , % edi call runtime . intstring @ PLT movq % rax , % r 1 4 movq % rdx , % r 1 5 movl - 6 0 (% rbp ), % eax movslq % eax , % rdx leaq - 3 7 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . intstring @ PLT movq - 5 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq (% rax ), % rax addq $ 1 , % rax movq % rax , - 4 8 0 (% rbp ) movq - 5 6 (% rbp ), % rax movq % r 1 4 , % rdx movq % r 1 5 , % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapassign_faststr @ PLT movq - 4 8 0 (% rbp ), % rdi movq % rdi , (% rax ) . L 2 : . LBE 1 8 : . LBE 1 7 : . LBE 1 4 : . LBE 1 2 : . LBE 7 : cmpq - 4 7 2 (% rbp ), % rbx jl . L 2 3 . LBE 4 : . LBE 3 : . LBE 2 : movq $ 0 , - 4 3 2 (% rbp ) movq $ 0 , - 4 2 4 (% rbp ) movq $ 0 , - 4 1 6 (% rbp ) . LBB 1 9 : movq $ 0 , - 4 4 8 (% rbp ) movq $ 0 , - 4 4 0 (% rbp ) movq $ 0 , - 7 2 (% rbp ) . LBB 2 0 : . LBB 2 1 : . LBB 2 2 : leaq - 3 6 8 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 2 2 : jmp . L 1 1 . L 2 4 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movq - 3 6 8 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq - 3 6 0 (% rbp ), % rcx movq (% rcx ), % rcx . LBE 2 5 : . LBB 2 6 : movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq % rcx , - 7 2 (% rbp ) . LBE 2 6 : . LBB 2 7 : . LBB 2 8 : cmpq $ 1 , - 7 2 (% rbp ) jle . L 1 2 . LBB 2 9 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 3 . LBB 3 0 : movq - 2 7 2 (% rbp ), % rsi leaq - 1 7 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) . LBE 3 0 : jmp . L 1 4 . L 1 3 : . LBB 3 1 : movq - 2 7 2 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rdx movq % rcx , - 4 3 2 (% rbp ) movq % rax , - 4 2 4 (% rbp ) movq % rdx , - 4 1 6 (% rbp ) . L 1 4 : . LBE 3 1 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq - 4 4 0 (% rbp ), % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 5 . LBB 3 2 : movq - 4 4 8 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 2 . L 1 5 : . LBE 3 2 : . LBB 3 3 : movq - 4 4 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 2 : . LBE 3 3 : . LBE 2 9 : . LBE 2 8 : . LBE 2 7 : . LBE 2 4 : . LBB 3 4 : leaq - 3 6 8 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 1 1 : . LBE 3 4 : movq - 3 6 8 (% rbp ), % rax testq % rax , % rax jne . L 2 4 . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : leaq . LC 1 9 (% rip ), % r 1 2 movl $ 0 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax subq $ 8 , % rsp pushq - 4 1 6 (% rbp ) pushq - 4 2 4 (% rbp ) pushq - 4 3 2 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call strings . Join @ PLT addq $ 3 2 , % rsp movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq string .. d (% rip ), % rax movq % rax , - 4 6 4 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq % r 1 2 , - 2 0 8 (% rbp ) movq % r 1 3 , - 2 0 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 8 . LBB 3 5 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 3 5 : jmp . L 1 9 . L 1 8 : . LBB 3 6 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 9 : . LBE 3 6 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 4 5 6 (% rbp ) movdqa - 4 6 4 (% rbp ), % xmm 0 movups % xmm 0 , - 1 9 2 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 1 , - 1 3 6 (% rbp ) movq $ 1 , - 1 2 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 4 8 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 1 movl $ 4 8 8 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 4 8 , % rsp movq % rdi , - 4 7 2 (% rbp ) movq $ 0 , - 3 6 8 (% rbp ) movq $ 0 , - 3 6 0 (% rbp ) movq $ 0 , - 3 5 2 (% rbp ) . LBB 2 : movq 4 8 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 0 0 (% rbp ) movq % rbx , - 3 9 2 (% rbp ) movq % rbx , - 3 8 4 (% rbp ) . LBB 3 : movq $ 0 , - 4 6 4 (% rbp ) movq $ 0 , - 4 5 6 (% rbp ) movq $ 0 , - 4 4 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 3 8 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 9 6 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 3 0 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 2 0 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 4 5 6 (% rbp ), % rax testq % rax , % rax jg . L 4 jmp . L 2 9 . L 3 : . LBE 1 1 : . LBB 1 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : . LBE 1 6 : . LBB 1 7 : movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq - 4 6 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 6 4 (% rbp ) movq - 4 5 6 (% rbp ), % rax cmpq $ 1 , % rax jg . L 6 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 6 : movq - 4 6 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 7 2 (% rbp ) movq - 3 9 2 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 7 cmpq % rax , - 7 2 (% rbp ) jl . L 3 0 . L 7 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq - 4 0 0 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % r 1 3 leaq 1 (% r 1 3 ), % rdx movq - 2 2 4 (% rbp ), % rcx movq % rdx , % rsi movq % rcx , % rax cmpq % rax , % rsi jbe . L 9 . LBB 1 2 : movq - 3 9 2 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 1 0 cmpq % rax , - 7 2 (% rbp ) jl . L 3 1 . L 1 0 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq - 4 0 0 (% rbp ), % rdi movq - 7 2 (% rbp ), % rsi movq % rsi , % rax addq % rax , % rax addq % rsi , % rax salq $ 3 , % rax leaq (% rdi ,% rax ), % r 1 2 movq - 2 4 0 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rax movq % rdx , % r 9 movq % rcx , % r 8 movq % r 1 3 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi movq % rax , % rdi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rax , 8 (% r 1 2 ) movq - 1 9 2 (% rbp ), % rax movq % rax , 1 6 (% r 1 2 ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 2 . LBB 1 3 : movq - 2 0 8 (% rbp ), % rax movq % rax , (% r 1 2 ) jmp . L 1 3 . L 1 2 : . LBE 1 3 : . LBB 1 4 : movq - 2 0 8 (% rbp ), % rax movq % rax , % rdx movq % r 1 2 , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 1 3 . L 9 : . LBE 1 4 : . LBE 1 2 : . LBB 1 5 : movq - 3 9 2 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 1 4 cmpq % rax , - 7 2 (% rbp ) jl . L 3 2 . L 1 4 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq - 4 0 0 (% rbp ), % rsi movq - 7 2 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq - 2 4 0 (% rbp ), % rsi movq - 2 2 4 (% rbp ), % rcx movq % rsi , (% rax ) movq % rdx , 8 (% rax ) movq % rcx , 1 6 (% rax ) . L 1 3 : . LBE 1 5 : movq - 3 9 2 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 1 6 cmpq % rax , - 7 2 (% rbp ) jl . L 3 3 . L 1 6 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq - 4 0 0 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % r 1 3 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 6 4 (% rbp ), % rax movq % rax , (% rdx ) . LBE 1 7 : . LBE 8 : . LBB 1 8 : addq $ 1 , % rbx . L 2 : . LBE 1 8 : cmpq % r 1 4 , % rbx jl . L 3 8 . LBE 5 : . LBE 4 : . LBE 3 : movq - 4 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 3 2 (% rbp ) movq % rbx , - 4 2 4 (% rbp ) movq % rbx , - 4 1 6 (% rbp ) . LBB 1 9 : movq $ 0 , - 5 6 (% rbp ) . LBB 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movl $ 0 , % eax . LBE 2 2 : jmp . L 2 0 . L 3 9 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : movq % rax , - 5 6 (% rbp ) . LBB 2 5 : movq - 4 2 4 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 2 1 cmpq % rdx , - 5 6 (% rbp ) jl . L 3 5 . L 2 1 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 4 3 2 (% rbp ), % rsi movq - 5 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rsi , % rdx movq $- 1 , (% rdx ) . LBE 2 5 : . LBE 2 4 : . LBB 2 6 : addq $ 1 , % rax . L 2 0 : . LBE 2 6 : cmpq % rcx , % rax jl . L 3 9 . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : movq $ 0 , - 4 4 0 (% rbp ) leaq go . problem 0 8 5 1 . loudAndRich .. func 1 (% rip ), % r 8 leaq - 4 3 2 (% rbp ), % rdi leaq - 4 0 0 (% rbp ), % rsi leaq 4 0 (% rbp ), % rcx leaq - 4 4 0 (% rbp ), % rdx movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) movq - 1 0 4 (% rbp ), % rax movq % r 8 , (% rax ) movq % rdi , 8 (% rax ) movq % rsi , 1 6 (% rax ) movq % rcx , 2 4 (% rax ) movq % rdx , 3 2 (% rax ) movq - 1 0 4 (% rbp ), % rax movq % rax , - 4 4 0 (% rbp ) . LBB 2 7 : movq $ 0 , - 4 0 (% rbp ) . LBB 2 8 : jmp . L 2 5 . L 4 0 : . LBB 2 9 : nop . LBE 2 9 : . LBB 3 0 : movq - 4 4 0 (% rbp ), % rdx movq - 4 4 0 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rcx movq - 4 0 (% rbp ), % rax movq % rdx , % r 1 0 movq % rax , % rdi call *% rcx . LVL 1 : . LBE 3 0 : . LBB 3 1 : addq $ 1 , - 4 0 (% rbp ) . L 2 5 : . LBE 3 1 : movq - 4 0 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 4 0 . LBE 2 8 : . LBE 2 7 : . LBB 3 2 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 4 7 2 (% rbp ), % rcx movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 5 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 2 : . LBE 2 : movq - 4 7 2 (% rbp ), % rax addq $ 4 4 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : leaq - 9 3 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 4 movl $ 9 3 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 8 8 , % rsp movq % rdi , - 8 8 8 (% rbp ) leaq type ... 6 4 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 4 8 (% rbp ) leaq . LC 4 0 (% rip ), % rax movq % rax , - 9 2 8 (% rbp ) movq $ 8 , - 9 2 0 (% rbp ) movdqa - 9 2 8 (% rbp ), % xmm 0 movups % xmm 0 , - 5 1 2 (% rbp ) leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 4 0 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 3 2 (% rbp ) movq - 8 3 2 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 7 , 8 (% rax ) movq $ 1 1 , 1 6 (% rax ) movq $ 1 5 , 2 4 (% rax ) movq - 8 3 2 (% rbp ), % rax movq % rax , - 8 1 6 (% rbp ) movq $ 4 , - 8 0 8 (% rbp ) movq $ 4 , - 8 0 0 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 2 4 (% rbp ) movq - 8 2 4 (% rbp ), % rax movq $ 9 , (% rax ) movq - 8 2 4 (% rbp ), % rax movq % rax , - 7 9 2 (% rbp ) movq $ 1 , - 7 8 4 (% rbp ) movq $ 1 , - 7 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 8 4 0 (% rbp ), % rax movq - 8 1 6 (% rbp ), % rcx movq - 8 0 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 8 0 0 (% rbp ), % rcx movq - 7 9 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 7 8 4 (% rbp ), % rcx movq - 7 7 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 8 4 0 (% rbp ), % rax leaq - 8 1 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 8 4 0 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq $ 2 , - 4 8 8 (% rbp ) movq $ 2 , - 4 8 0 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 6 8 (% rbp ) movq - 7 6 8 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq - 7 6 8 (% rbp ), % rax movq % rax , - 4 7 2 (% rbp ) movq $ 2 , - 4 6 4 (% rbp ) movq $ 2 , - 4 5 6 (% rbp ) leaq . LC 4 1 (% rip ), % rax movq % rax , - 9 1 2 (% rbp ) movq $ 8 , - 9 0 4 (% rbp ) movdqa - 9 1 2 (% rbp ), % xmm 1 movups % xmm 1 , - 4 4 8 (% rbp ) leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 6 0 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 5 2 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 4 , 1 6 (% rax ) movq - 7 5 2 (% rbp ), % rax movq % rax , - 7 3 6 (% rbp ) movq $ 3 , - 7 2 8 (% rbp ) movq $ 3 , - 7 2 0 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 4 4 (% rbp ) movq - 7 4 4 (% rbp ), % rax movq $ 6 , (% rax ) movq - 7 4 4 (% rbp ), % rax movq % rax , - 7 1 2 (% rbp ) movq $ 1 , - 7 0 4 (% rbp ) movq $ 1 , - 6 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 7 6 0 (% rbp ), % rax movq - 7 3 6 (% rbp ), % rcx movq - 7 2 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 7 2 0 (% rbp ), % rcx movq - 7 1 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 7 0 4 (% rbp ), % rcx movq - 6 9 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 7 6 0 (% rbp ), % rax leaq - 7 3 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 7 6 0 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq $ 2 , - 4 2 4 (% rbp ) movq $ 2 , - 4 1 6 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 8 8 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 4 0 8 (% rbp ) movq $ 2 , - 4 0 0 (% rbp ) movq $ 2 , - 3 9 2 (% rbp ) leaq . LC 4 2 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 3 8 4 (% rbp ) movq % r 1 5 , - 3 7 6 (% rbp ) leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 8 0 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 7 2 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 7 , 8 (% rax ) movq $ 1 1 , 1 6 (% rax ) movq $ 1 5 , 2 4 (% rax ) movq - 6 7 2 (% rbp ), % rax movq % rax , - 6 5 6 (% rbp ) movq $ 4 , - 6 4 8 (% rbp ) movq $ 4 , - 6 4 0 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 6 4 (% rbp ) movq - 6 6 4 (% rbp ), % rax movq $ 9 , (% rax ) movq - 6 6 4 (% rbp ), % rax movq % rax , - 6 3 2 (% rbp ) movq $ 1 , - 6 2 4 (% rbp ) movq $ 1 , - 6 1 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 6 : movq - 6 8 0 (% rbp ), % rax movq - 6 5 6 (% rbp ), % rcx movq - 6 4 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 6 4 0 (% rbp ), % rcx movq - 6 3 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 6 2 4 (% rbp ), % rcx movq - 6 1 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 6 : jmp . L 7 . L 6 : . LBB 7 : movq - 6 8 0 (% rbp ), % rax leaq - 6 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 7 : movq - 6 8 0 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq $ 2 , - 3 6 0 (% rbp ) movq $ 2 , - 3 5 2 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 8 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) movq $ 2 , - 3 3 6 (% rbp ) movq $ 2 , - 3 2 8 (% rbp ) leaq . LC 4 3 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 2 0 (% rbp ) movq % r 1 3 , - 3 1 2 (% rbp ) leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 0 (% rbp ) leaq type ... 6 9 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 9 2 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq $ 7 , (% rax ) movq $ 6 , 8 (% rax ) movq $ 5 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 2 , 3 2 (% rax ) movq $ 1 , 4 0 (% rax ) movq $ 4 , 4 8 (% rax ) movq $ 9 , 5 6 (% rax ) movq $ 1 0 , 6 4 (% rax ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) movq $ 9 , - 5 6 8 (% rbp ) movq $ 9 , - 5 6 0 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 8 4 (% rbp ) movq - 5 8 4 (% rbp ), % rax movq $ 1 7 , (% rax ) movq - 5 8 4 (% rbp ), % rax movq % rax , - 5 5 2 (% rbp ) movq $ 1 , - 5 4 4 (% rbp ) movq $ 1 , - 5 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 . LBB 8 : movq - 6 0 0 (% rbp ), % rax movq - 5 7 6 (% rbp ), % rcx movq - 5 6 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 5 6 0 (% rbp ), % rcx movq - 5 5 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 5 4 4 (% rbp ), % rcx movq - 5 3 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 8 : jmp . L 9 . L 8 : . LBB 9 : movq - 6 0 0 (% rbp ), % rax leaq - 5 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 : . LBE 9 : movq - 6 0 0 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 2 , - 2 9 6 (% rbp ) movq $ 2 , - 2 8 8 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 2 0 (% rbp ) movq - 5 2 0 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 8 , 8 (% rax ) movq - 5 2 0 (% rbp ), % rax movq % rax , - 2 8 0 (% rbp ) movq $ 2 , - 2 7 2 (% rbp ) movq $ 2 , - 2 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 . LBB 1 0 : movq - 8 4 8 (% rbp ), % rax movq - 5 1 2 (% rbp ), % rcx movq - 5 0 4 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 9 6 (% rbp ), % rcx movq - 4 8 8 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 4 8 0 (% rbp ), % rcx movq - 4 7 2 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 4 6 4 (% rbp ), % rcx movq - 4 5 6 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 1 4 4 (% rax ) movq % rbx , 1 5 2 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 1 6 0 (% rax ) movq % rbx , 1 6 8 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 1 7 6 (% rax ) movq % rbx , 1 8 4 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 1 9 2 (% rax ) movq % rbx , 2 0 0 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 2 0 8 (% rax ) movq % rbx , 2 1 6 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 2 2 4 (% rax ) movq % rbx , 2 3 2 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 2 4 0 (% rax ) movq % rbx , 2 4 8 (% rax ) . LBE 1 0 : jmp . L 1 1 . L 1 0 : . LBB 1 1 : movq - 8 4 8 (% rbp ), % rax leaq - 5 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 1 : . LBE 1 1 : movq - 8 4 8 (% rbp ), % rax movq % rax , - 8 8 0 (% rbp ) movq $ 4 , - 8 7 2 (% rbp ) movq $ 4 , - 8 6 4 (% rbp ) . LBB 1 2 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) . LBB 1 3 : . LBB 1 4 : . LBB 1 5 : movq - 8 8 0 (% rbp ), % rax movq - 8 7 2 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 8 6 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 1 5 : jmp . L 1 2 . L 2 3 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : . LBB 1 8 : movq - 1 8 4 (% rbp ), % rax testq % rbx , % rbx js . L 1 3 cmpq % rax , % rbx jge . L 1 3 movq - 1 9 2 (% rbp ), % rax movq % rbx , % rdx salq $ 6 , % rdx addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 4 0 (% rbp ) movq % rdi , - 2 3 2 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 2 2 4 (% rbp ) movq % rdi , - 2 1 6 (% rbp ) movq 5 6 (% rax ), % rdx movq 4 8 (% rax ), % rax movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) . LBE 1 8 : . LBB 1 9 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 5 6 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 1 4 jmp . L 2 1 . L 1 3 : . LBE 1 9 : . LBB 2 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : . LBE 2 2 : . LBB 2 3 : . LBB 2 0 : movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 4 8 (% rax ) movq % rdi , 5 6 (% rax ) jmp . L 1 6 . L 2 1 : . LBE 2 0 : . LBB 2 1 : leaq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 6 : . LBE 2 1 : . LBE 2 3 : . LBB 2 4 : leaq go . Solution . TestTwoSum 1 .. func 1 (% rip ), % r 1 4 movq - 5 6 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 7 . LBB 2 5 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 5 : jmp . L 1 8 . L 1 7 : . LBB 2 6 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 8 : . LBE 2 6 : movq - 8 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 8 8 8 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 2 4 : . LBE 1 7 : . LBB 2 7 : addq $ 1 , % rbx . L 1 2 : . LBE 2 7 : cmpq % r 1 3 , % rbx jl . L 2 3 . LBE 1 4 : . LBE 1 3 : . LBE 1 2 : addq $ 8 8 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 5 movl $ 1 5 2 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 0 4 , % rsp movq % rdi , - 1 2 0 (% rbp ) movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 1 2 0 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : . LBB 6 : movl $ 1 , % edi call math .. z 2 fbig . NewInt @ PLT movq % rax , % rbx movl $ 1 , % edi call math .. z 2 fbig . NewInt @ PLT movq % rbx , - 5 6 (% rbp ) movq % rax , - 6 4 (% rbp ) . LBE 6 : movq - 5 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 3 6 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 7 : cmpq $ 1 , - 1 2 0 (% rbp ) jne . L 4 . LBB 8 : . LBB 9 : . LBB 1 0 : movl $ 3 , % edi call math .. z 2 fbig . NewInt @ PLT movq % rax , % rbx movl $ 2 , % edi call math .. z 2 fbig . NewInt @ PLT movq % rbx , - 5 6 (% rbp ) movq % rax , - 6 4 (% rbp ) . LBE 1 0 : movq - 5 6 (% rbp ), % r 1 4 movq - 6 4 (% rbp ), % r 1 5 movq % r 1 4 , % rax movq % r 1 5 , % rdx jmp . L 3 . L 4 : . LBE 9 : . LBE 8 : . LBE 7 : . LBB 1 1 : movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 1 2 0 (% rbp ) js . L 5 cmpq % rcx , - 1 2 0 (% rbp ) jl . L 2 0 . L 5 : movq - 1 2 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : movq 1 6 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rcx testq % rcx , % rcx je . L 7 . LBB 1 2 : . LBB 1 3 : . LBB 1 4 : movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 1 2 0 (% rbp ) js . L 8 cmpq % rcx , - 1 2 0 (% rbp ) jl . L 2 1 . L 8 : movq - 1 2 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : movq 1 6 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rsi movq 4 8 (% rbp ), % rcx cmpq $ 0 , - 1 2 0 (% rbp ) js . L 1 0 cmpq % rcx , - 1 2 0 (% rbp ) jl . L 2 2 . L 1 0 : movq - 1 2 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : movq 4 0 (% rbp ), % rdi movq - 1 2 0 (% rbp ), % rcx salq $ 3 , % rcx addq % rdi , % rcx movq (% rcx ), % rcx movq % rsi , - 5 6 (% rbp ) movq % rcx , - 6 4 (% rbp ) . LBE 1 4 : movq - 5 6 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx jmp . L 3 . L 7 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : movq - 1 2 0 (% rbp ), % rax subq $ 1 , % rax pushq 5 6 (% rbp ) pushq 4 8 (% rbp ) pushq 4 0 (% rbp ) pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call go . problem 5 7 . Expansion addq $ 4 8 , % rsp movq % rax , % rcx movq % rcx , - 7 2 (% rbp ) movq % rdx , % rax movq % rax , - 8 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax subq $ 2 , % rax pushq 5 6 (% rbp ) pushq 4 8 (% rbp ) pushq 4 0 (% rbp ) pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call go . problem 5 7 . Expansion addq $ 4 8 , % rsp movq % rax , % rcx movq % rcx , - 8 8 (% rbp ) movq % rdx , % rax movq % rax , - 9 6 (% rbp ) movl $ 0 , % edi call math .. z 2 fbig . NewInt @ PLT movq % rax , % rbx movl $ 0 , % edi call math .. z 2 fbig . NewInt @ PLT movq % rax , % r 1 4 movl $ 2 , % edi call math .. z 2 fbig . NewInt @ PLT movq % rax , % rcx movq - 7 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi movq % r 1 4 , % rdi call math .. z 2 fbig . Int . Mul @ PLT movq % rax , % rcx movq - 8 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi movq % rbx , % rdi call math .. z 2 fbig . Int . Add @ PLT movq % rax , - 1 0 4 (% rbp ) movl $ 0 , % edi call math .. z 2 fbig . NewInt @ PLT movq % rax , % rbx movl $ 0 , % edi call math .. z 2 fbig . NewInt @ PLT movq % rax , % r 1 4 movl $ 2 , % edi call math .. z 2 fbig . NewInt @ PLT movq % rax , % rcx movq - 8 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi movq % r 1 4 , % rdi call math .. z 2 fbig . Int . Mul @ PLT movq % rax , % rcx movq - 9 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi movq % rbx , % rdi call math .. z 2 fbig . Int . Add @ PLT movq % rax , - 1 1 2 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 2 0 (% rbp ) js . L 1 2 cmpq % rax , - 1 2 0 (% rbp ) jl . L 2 3 . L 1 2 : movq - 1 2 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : movq 1 6 (% rbp ), % rdx movq - 1 2 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 4 . LBB 1 5 : movq - 1 0 4 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 1 5 : jmp . L 1 5 . L 1 4 : . LBB 1 6 : movq - 1 0 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 5 : . LBE 1 6 : movq 4 8 (% rbp ), % rax cmpq $ 0 , - 1 2 0 (% rbp ) js . L 1 6 cmpq % rax , - 1 2 0 (% rbp ) jl . L 2 4 . L 1 6 : movq - 1 2 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : movq 4 0 (% rbp ), % rdx movq - 1 2 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 8 . LBB 1 7 : movq - 1 1 2 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 1 7 : jmp . L 1 9 . L 1 8 : . LBB 1 8 : movq - 1 1 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 9 : . LBE 1 8 : . LBB 1 9 : . LBB 2 0 : movq - 1 0 4 (% rbp ), % rdx movq - 1 1 2 (% rbp ), % rax movq % rdx , - 5 6 (% rbp ) movq % rax , - 6 4 (% rbp ) . LBE 2 0 : movq - 5 6 (% rbp ), % r 1 2 movq - 6 4 (% rbp ), % r 1 3 movq % r 1 2 , % rax movq % r 1 3 , % rdx . L 3 : . LBE 1 9 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 0 movl $ 4 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : . LBB 3 : movq 1 6 (% rbp ), % rax testq % rax , % rax jne . L 4 . LBB 4 : . LBB 5 : movq $ 0 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 5 . L 4 : . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 8 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 6 : movq $ 0 , - 2 4 (% rbp ) . LBB 7 : jmp . L 6 . L 1 9 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : . LBB 1 1 : cmpq $ 0 , - 2 4 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 7 . LBB 1 2 : movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 8 cmpq % rdx , % rax jl . L 1 6 . L 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) js . L 1 0 cmpq % rdx , - 2 4 (% rbp ) jl . L 1 7 . L 1 0 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setl % al . L 7 : . LBE 1 2 : . LBE 1 1 : testb % al , % al je . L 1 2 . LBB 1 3 : addq $ 1 , - 1 6 (% rbp ) . LBB 1 4 : movq - 1 6 (% rbp ), % rax cmpq - 8 (% rbp ), % rax jle . L 1 3 . LBB 1 5 : movq - 1 6 (% rbp ), % rax movq % rax , - 8 (% rbp ) jmp . L 1 3 . L 1 2 : . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 1 6 : movq $ 1 , - 1 6 (% rbp ) . L 1 3 : . LBE 1 6 : . LBE 1 0 : . LBE 9 : . LBB 1 7 : addq $ 1 , - 2 4 (% rbp ) . L 6 : . LBE 1 7 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 1 9 . LBE 7 : . LBE 6 : . LBB 1 8 : movq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 5 : . LBE 1 8 : . LBE 2 : leave ret
. LFB 4 0 9 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 0 6 5 1 movl $ 8 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 5 0 6 : ret . L 1 0 6 5 1 : pushq % rbp movq % rsp , % rbp subq $ 8 0 , % rsp movq % rdi , - 7 2 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 8 5 1 3 : . LBB 8 5 1 4 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 1 0 6 2 7 . LBB 8 5 1 5 : . LBB 8 5 1 6 : movq $- 1 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 1 0 6 2 8 . L 1 0 6 2 7 : . LBE 8 5 1 6 : . LBE 8 5 1 5 : . LBE 8 5 1 4 : leaq go . leetcode . search .. func 1 .. f (% rip ), % rax movq % rax , - 4 8 (% rbp ) movq $ 0 , - 8 (% rbp ) movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 8 5 1 7 : . LBB 8 5 1 8 : jmp . L 1 0 6 2 9 . L 1 0 6 5 0 : . LBB 8 5 1 9 : nop . LBE 8 5 1 9 : . LBB 8 5 2 0 : . LBB 8 5 2 1 : movq - 8 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 1 6 (% rbp ) jne . L 1 0 6 3 0 . LBB 8 5 2 2 : movq - 1 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) jmp . L 1 0 6 3 1 . L 1 0 6 3 0 : . LBE 8 5 2 2 : . LBE 8 5 2 1 : movq - 8 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , - 5 6 (% rbp ) . LBB 8 5 2 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 0 6 3 2 cmpq % rax , - 5 6 (% rbp ) jl . L 1 0 6 4 5 . L 1 0 6 3 2 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 6 4 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 1 0 6 3 4 cmpq % rax , - 8 (% rbp ) jl . L 1 0 6 4 6 . L 1 0 6 3 4 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 6 4 6 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jle . L 1 0 6 3 6 . LBB 8 5 2 4 : movq - 5 6 (% rbp ), % rax movq % rax , - 8 (% rbp ) . LBE 8 5 2 4 : jmp . L 1 0 6 2 9 . L 1 0 6 3 6 : . LBB 8 5 2 5 : movq - 5 6 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) . L 1 0 6 2 9 : . LBE 8 5 2 5 : . LBE 8 5 2 3 : . LBE 8 5 2 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 1 0 6 3 7 cmpq % rax , - 8 (% rbp ) jl . L 1 0 6 4 7 . L 1 0 6 3 7 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 6 4 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 0 6 3 9 cmpq % rax , - 1 6 (% rbp ) jl . L 1 0 6 4 8 . L 1 0 6 3 9 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 6 4 8 : movq 1 6 (% rbp ), % rdx movq - 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jg . L 1 0 6 5 0 . L 1 0 6 3 1 : . LBE 8 5 1 8 : . LBE 8 5 1 7 : . LBB 8 5 2 6 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 1 0 6 4 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 0 6 4 2 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , - 7 2 (% rbp ) jl . L 1 0 6 4 3 . LBB 8 5 2 7 : movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 3 2 (% rbp ) . LBB 8 5 2 8 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 1 0 6 4 4 . LBB 8 5 2 9 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 3 2 (% rbp ) . L 1 0 6 4 4 : . LBE 8 5 2 9 : . LBE 8 5 2 8 : . LBB 8 5 3 0 : movq - 4 8 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rcx movq - 7 2 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq - 4 8 (% rbp ), % r 1 0 movq % rax , % rsi movl $ 0 , % edi call *% rcx . LVL 5 0 7 : addq $ 3 2 , % rsp movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 1 0 6 2 8 . L 1 0 6 4 3 : . LBE 8 5 3 0 : . LBE 8 5 2 7 : . LBE 8 5 2 6 : . LBB 8 5 3 1 : movq 2 4 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax movq (% rax ), % rax movq % rax , % r 8 leaq - 1 (% rdx ), % rcx movq - 7 2 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq - 4 8 (% rbp ), % r 1 0 movq % rcx , % rsi movq % rax , % rdi call *% r 8 . LVL 5 0 8 : addq $ 3 2 , % rsp movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 1 0 6 2 8 : . LBE 8 5 3 1 : . LBE 8 5 1 3 : leave ret
. LFB 0 : leaq - 4 4 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 4 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 9 2 , % rsp movq % rdi , - 4 2 4 (% rbp ) leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 3 6 8 (% rbp ) movq % r 1 5 , - 3 6 0 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 8 4 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 4 , - 3 4 4 (% rbp ) movq $ 4 , - 3 3 6 (% rbp ) movq $ 2 , - 3 2 8 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 2 0 (% rbp ) movq % r 1 3 , - 3 1 2 (% rbp ) leaq type ... 6 7 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 3 7 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 5 , 3 2 (% rax ) movq $ 6 , 4 0 (% rax ) movq $ 4 , 4 8 (% rax ) movq - 3 7 6 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 7 , - 2 9 6 (% rbp ) movq $ 7 , - 2 8 8 (% rbp ) movq $ 5 , - 2 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 3 9 2 (% rbp ), % rax movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 3 9 2 (% rbp ), % rax leaq - 3 6 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 3 9 2 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq $ 2 , - 4 0 8 (% rbp ) movq $ 2 , - 4 0 0 (% rbp ) . LBB 4 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 2 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 2 2 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 4 2 4 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 3 9 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : leaq - 1 2 4 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 7 movl $ 1 2 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 2 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 1 9 2 , % rsp movq % rdi , - 1 1 7 6 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 0 8 (% rbp ) movq - 1 0 0 8 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 4 , 1 6 (% rax ) movq - 1 0 0 8 (% rbp ), % rax movq % rax , - 9 2 8 (% rbp ) movq $ 3 , - 9 2 0 (% rbp ) movq $ 3 , - 9 1 2 (% rbp ) movq $ 6 , - 9 0 4 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 0 0 (% rbp ) movq - 1 0 0 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq - 1 0 0 0 (% rbp ), % rax movq % rax , - 8 9 6 (% rbp ) movq $ 2 , - 8 8 8 (% rbp ) movq $ 2 , - 8 8 0 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 9 2 (% rbp ) movq - 9 9 2 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 4 , 1 6 (% rax ) movq - 9 9 2 (% rbp ), % rax movq % rax , - 8 7 2 (% rbp ) movq $ 3 , - 8 6 4 (% rbp ) movq $ 3 , - 8 5 6 (% rbp ) movq $ 5 , - 8 4 8 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 8 4 (% rbp ) movq - 9 8 4 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq - 9 8 4 (% rbp ), % rax movq % rax , - 8 4 0 (% rbp ) movq $ 2 , - 8 3 2 (% rbp ) movq $ 2 , - 8 2 4 (% rbp ) leaq type ... 6 7 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 7 6 (% rbp ) movq - 9 7 6 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 8 , 8 (% rax ) movq $ 7 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 3 , 3 2 (% rax ) movq $ 4 , 4 0 (% rax ) movq $ 2 , 4 8 (% rax ) movq - 9 7 6 (% rbp ), % rax movq % rax , - 8 1 6 (% rbp ) movq $ 7 , - 8 0 8 (% rbp ) movq $ 7 , - 8 0 0 (% rbp ) movq $ 1 1 , - 7 9 2 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 6 8 (% rbp ) movq - 9 6 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 3 , 8 (% rax ) movq - 9 6 8 (% rbp ), % rax movq % rax , - 7 8 4 (% rbp ) movq $ 2 , - 7 7 6 (% rbp ) movq $ 2 , - 7 6 8 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 6 0 (% rbp ) movq - 9 6 0 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq - 9 6 0 (% rbp ), % rax movq % rax , - 7 6 0 (% rbp ) movq $ 2 , - 7 5 2 (% rbp ) movq $ 2 , - 7 4 4 (% rbp ) movq $ 1 , - 7 3 6 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 5 2 (% rbp ) movq - 9 5 2 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq - 9 5 2 (% rbp ), % rax movq % rax , - 7 2 8 (% rbp ) movq $ 2 , - 7 2 0 (% rbp ) movq $ 2 , - 7 1 2 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 4 4 (% rbp ) movq - 9 4 4 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 3 , 8 (% rax ) movq - 9 4 4 (% rbp ), % rax movq % rax , - 7 0 4 (% rbp ) movq $ 2 , - 6 9 6 (% rbp ) movq $ 2 , - 6 8 8 (% rbp ) movq $ 5 , - 6 8 0 (% rbp ) leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 3 6 (% rbp ) movq - 9 3 6 (% rbp ), % rax movq % rax , - 6 7 2 (% rbp ) movq $ 0 , - 6 6 4 (% rbp ) movq $ 0 , - 6 5 6 (% rbp ) leaq - 9 2 8 (% rbp ), % rax movq % rax , - 1 0 4 0 (% rbp ) movq $ 5 , - 1 0 3 2 (% rbp ) movq $ 5 , - 1 0 2 4 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 3 3 (% rip ), % rax movq % rax , - 1 2 0 0 (% rbp ) movq $ 6 7 , - 1 1 9 2 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq - 1 2 0 0 (% rbp ), % rcx movq - 1 1 9 2 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) . LBB 2 2 : movq $ 0 , - 1 1 3 6 (% rbp ) movq $ 0 , - 1 1 2 8 (% rbp ) movq $ 0 , - 1 1 2 0 (% rbp ) movq $ 0 , - 1 1 1 2 (% rbp ) movq $ 0 , - 1 1 0 4 (% rbp ) movq $ 0 , - 1 0 9 6 (% rbp ) movq $ 0 , - 1 0 8 8 (% rbp ) . LBB 2 3 : . LBB 2 4 : . LBB 2 5 : movq - 1 0 4 0 (% rbp ), % rax movq - 1 0 3 2 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 1 0 2 4 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq - 5 3 6 (% rbp ), % rax movq % rax , - 1 2 0 0 (% rbp ) movl $ 0 , % ebx . LBE 2 5 : jmp . L 1 5 . L 2 6 : . LBB 2 6 : nop . LBE 2 6 : . LBB 2 7 : . LBB 2 8 : movq - 5 3 6 (% rbp ), % rax testq % rbx , % rbx js . L 1 6 cmpq % rax , % rbx jge . L 1 6 movq - 5 4 4 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 3 , % rax subq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 6 0 8 (% rbp ) movq % rdi , - 6 0 0 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 5 9 2 (% rbp ) movq % rdi , - 5 8 4 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 5 7 6 (% rbp ) movq % rdi , - 5 6 8 (% rbp ) movq 4 8 (% rax ), % rax movq % rax , - 5 6 0 (% rbp ) . LBE 2 8 : . LBB 2 9 : movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 1 1 3 6 (% rbp ) movq % rdx , - 1 1 2 8 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 1 1 2 0 (% rbp ) movq % rdx , - 1 1 1 2 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 1 1 0 4 (% rbp ) movq % rdx , - 1 0 9 6 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 1 0 8 8 (% rbp ) . LBE 2 9 : . LBB 3 0 : movq - 1 1 0 4 (% rbp ), % rax movq - 1 0 9 6 (% rbp ), % rdx movq % rax , - 1 0 7 2 (% rbp ) movq % rdx , - 1 0 6 4 (% rbp ) movq - 1 0 8 8 (% rbp ), % rax movq % rax , - 1 0 5 6 (% rbp ) movq - 1 1 3 6 (% rbp ), % rax movq - 1 1 2 8 (% rbp ), % rdx movq % rax , - 1 1 6 8 (% rbp ) movq % rdx , - 1 1 6 0 (% rbp ) movq - 1 1 2 0 (% rbp ), % rax movq - 1 1 1 2 (% rbp ), % rdx movq % rax , - 1 1 5 2 (% rbp ) movq % rdx , - 1 1 4 4 (% rbp ) movq - 1 1 4 4 (% rbp ), % rdx leaq - 4 1 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 5 2 (% rbp ) pushq - 1 1 6 0 (% rbp ) pushq - 1 1 6 8 (% rbp ) movq % rdx , % rsi movq % rax , % rdi call go . leetcode . twoSum addq $ 3 2 , % rsp leaq go . leetcode .. go . leetcode . para 1 .. d (% rip ), % rax movq % rax , - 1 2 3 2 (% rbp ) leaq go . leetcode .. go . leetcode . para 1 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) movq - 1 1 6 8 (% rbp ), % rax movq - 1 1 6 0 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 1 1 5 2 (% rbp ), % rax movq - 1 1 4 4 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 1 7 jmp . L 2 4 . L 1 6 : . LBE 3 0 : . LBB 3 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : . LBE 3 5 : . LBB 3 6 : . LBB 3 1 : movq - 3 9 2 (% rbp ), % rcx movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 3 1 : jmp . L 1 9 . L 2 4 : . LBB 3 2 : movq - 3 9 2 (% rbp ), % rax leaq - 3 8 4 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 1 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 9 : . LBE 3 2 : movq - 3 9 2 (% rbp ), % rax movq % rax , - 1 2 2 4 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 1 2 1 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 0 . LBB 3 3 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 3 : jmp . L 2 1 . L 2 0 : . LBB 3 4 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 1 : . LBE 3 4 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 1 2 0 8 (% rbp ) movdqa - 1 2 3 2 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 1 2 1 6 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 3 4 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) . LBE 3 6 : . LBE 2 7 : . LBB 3 7 : addq $ 1 , % rbx . L 1 5 : . LBE 3 7 : cmpq - 1 2 0 0 (% rbp ), % rbx jl . L 2 6 . LBE 2 4 : . LBE 2 3 : . LBE 2 2 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 3 5 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 5 movl $ 1 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 5 : pushq % rbp movq % rsp , % rbp subq $ 1 7 6 , % rsp movq % rsi , % rax movq % rdi , % r 1 0 movq % r 1 0 , % rsi movq % r 1 1 , % rdi movq % rax , % rdi movq % rsi , - 1 6 0 (% rbp ) movq % rdi , - 1 5 2 (% rbp ) movq % rdx , - 1 7 6 (% rbp ) movq % rcx , - 1 6 8 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) . LBB 2 : leaq . LC 0 (% rip ), % r 8 movl $ 0 , % r 9 d movq % r 8 , - 1 4 4 (% rbp ) movq % r 9 , - 1 3 6 (% rbp ) movq $ 0 , - 8 (% rbp ) movq - 1 5 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 8 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 2 4 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 1 4 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq $ 0 , - 3 2 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 7 : cmpq $ 0 , - 1 6 (% rbp ) js . L 3 . LBB 8 : movq - 1 5 2 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 4 cmpq % rax , - 1 6 (% rbp ) jge . L 4 movq - 1 6 0 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax subq $ 4 8 , % rax movq % rax , - 3 2 (% rbp ) subq $ 1 , - 1 6 (% rbp ) jmp . L 3 . L 4 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 : . LBE 8 : . LBE 7 : . LBB 9 : cmpq $ 0 , - 2 4 (% rbp ) js . L 5 . LBB 1 0 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 6 cmpq % rax , - 2 4 (% rbp ) jge . L 6 movq - 1 7 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax subq $ 4 8 , % rax movq % rax , - 4 0 (% rbp ) subq $ 1 , - 2 4 (% rbp ) jmp . L 5 . L 6 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 : . LBE 1 0 : . LBE 9 : movq - 3 2 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax addq % rax , % rdx movq - 8 (% rbp ), % rax addq % rdx , % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax cqto shrq $ 6 3 , % rdx addq % rdx , % rax andl $ 1 , % eax subq % rdx , % rax movq % rax , % rdi call strconv . Itoa @ PLT movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , - 8 (% rbp ) . L 2 : . LBE 6 : . LBB 1 1 : movq - 1 6 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 7 . LBB 1 2 : movq - 2 4 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax . L 7 : . LBE 1 2 : . LBE 1 1 : testb % al , % al jne . L 1 4 . LBE 4 : . LBE 3 : . LBB 1 3 : cmpq $ 0 , - 8 (% rbp ) jne . L 1 0 . LBB 1 4 : . LBB 1 5 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx jmp . L 1 2 . L 1 0 : . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 1 6 : leaq . LC 1 (% rip ), % rax movq % rax , - 8 0 (% rbp ) movq $ 1 , - 7 2 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) leaq - 8 0 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx . L 1 2 : . LBE 1 6 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 0 movl $ 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 0 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq % rdi , - 5 6 (% rbp ) movq % rsi , - 6 4 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 5 6 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : leaq go . leetcode 0 7 0 1 . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 1 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 . LBB 6 : movq - 4 0 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 : jmp . L 4 . L 3 : . LBB 7 : movq - 4 0 (% rbp ), % rax leaq - 3 2 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode 0 7 0 1 . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 : . LBE 7 : movq - 4 0 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 5 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 8 : movq - 5 6 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , - 6 4 (% rbp ) jge . L 6 . LBB 9 : movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call go . leetcode 0 7 0 1 . insertIntoBST movq % rax , % rdx movq - 5 6 (% rbp ), % rax addq $ 8 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 7 . LBB 1 0 : movq % rdx , (% rax ) . LBE 1 0 : jmp . L 8 . L 7 : . LBB 1 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 8 . L 6 : . LBE 1 1 : . LBE 9 : . LBB 1 2 : movq - 5 6 (% rbp ), % rax movq 1 6 (% rax ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call go . leetcode 0 7 0 1 . insertIntoBST movq % rax , % rdx movq - 5 6 (% rbp ), % rax addq $ 1 6 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 9 . LBB 1 3 : movq % rdx , (% rax ) . LBE 1 3 : jmp . L 8 . L 9 : . LBB 1 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 8 : . LBE 1 4 : . LBE 1 2 : . LBE 8 : . LBB 1 5 : movq - 5 6 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 5 : . LBE 1 5 : . LBE 2 : leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 5 9 movl $ 1 5 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 7 : ret . L 5 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 2 0 , % rsp movq % rdi , - 1 3 6 (% rbp ) movq % rsi , - 1 4 4 (% rbp ) leaq type .. func . 8 . 9 . 8 . 9 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 7 . LBB 3 8 : movq - 7 2 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 3 8 : jmp . L 4 8 . L 4 7 : . LBB 3 9 : movq - 6 4 (% rbp ), % rax movq % rax , % rdx movq - 7 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 4 8 : . LBE 3 9 : movq - 7 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . LBB 4 0 : leaq sync . WaitGroup .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) . LBB 4 1 : movq $ 0 , - 4 0 (% rbp ) . LBB 4 2 : jmp . L 4 9 . L 5 8 : . LBB 4 3 : nop . LBE 4 3 : . LBB 4 4 : movq - 5 6 (% rbp ), % rax movl $ 1 , % esi movq % rax , % rdi call sync . WaitGroup . Add @ PLT . LBB 4 5 : leaq main . runMultiple .. func 1 (% rip ), % r 1 3 movq - 4 8 (% rbp ), % r 1 2 movq - 5 6 (% rbp ), % rbx leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . main . callback 1 . 0 . 1 func . 8 . 9 . 8 . 9 . 2 . main . wg 2 . 0 . 1 sync . WaitGroup . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movq % r 1 3 , - 1 1 2 (% rbp ) movq % r 1 2 , - 1 0 4 (% rbp ) movq % rbx , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 0 . LBB 4 6 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 6 : jmp . L 5 1 . L 5 0 : . LBB 4 7 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . main . callback 1 . 0 . 1 func . 8 . 9 . 8 . 9 . 2 . main . wg 2 . 0 . 1 sync . WaitGroup . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 1 : . LBE 4 7 : movq - 1 2 0 (% rbp ), % rbx testq % rbx , % rbx jne . L 5 2 call runtime . panicgonil @ PLT . L 5 2 : leaq type .. struct . 4 . 4 x . 5 fn . 0 func . 8 . 9 . 8 . 9 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % rbx , - 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 3 . LBB 4 8 : movq - 8 8 (% rbp ), % rax movq - 8 0 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 4 8 : jmp . L 5 4 . L 5 3 : . LBB 4 9 : movq - 8 0 (% rbp ), % rax movq % rax , % rdx movq - 8 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 5 4 : . LBE 4 9 : movq - 8 8 (% rbp ), % rax leaq main . main .. thunk 1 (% rip ), % rdx movq % rax , % rsi movq % rdx , % rdi call __go_go @ PLT . LBE 4 5 : . LBE 4 4 : . LBB 5 0 : addq $ 1 , - 4 0 (% rbp ) . L 4 9 : . LBE 5 0 : movq - 4 0 (% rbp ), % rax cmpq - 1 3 6 (% rbp ), % rax jl . L 5 8 . LBE 4 2 : . LBE 4 1 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call sync . WaitGroup . Wait @ PLT . LBE 4 0 : addq $ 1 2 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 6 : cmpq % fs : 1 1 2 , % rsp jnb . L 8 3 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 9 : ret . L 8 3 : pushq % rbp movq % rsp , % rbp movq % rdi , - 4 0 (% rbp ) movq % rsi , - 4 8 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 7 7 : movq - 4 0 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) . LBB 7 8 : . LBB 7 9 : jmp . L 7 4 . L 8 2 : . LBB 8 0 : nop . LBE 8 0 : . LBB 8 1 : . LBB 8 2 : cmpq $ 0 , - 8 (% rbp ) je . L 7 5 . LBB 8 3 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) . LBE 8 3 : jmp . L 7 6 . L 7 5 : . LBB 8 4 : movq - 4 8 (% rbp ), % rax movq % rax , - 8 (% rbp ) . L 7 6 : . LBE 8 4 : . LBE 8 2 : . LBB 8 5 : cmpq $ 0 , - 1 6 (% rbp ) je . L 7 7 . LBB 8 6 : movq - 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 6 (% rbp ) . LBE 8 6 : jmp . L 7 4 . L 7 7 : . LBB 8 7 : movq - 4 0 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) . L 7 4 : . LBE 8 7 : . LBE 8 5 : . LBE 8 1 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jne . L 8 2 . LBE 7 9 : . LBE 7 8 : . LBB 8 8 : movq - 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . LBE 8 8 : . LBE 7 7 : popq % rbp ret
. LFB 0 : leaq - 3 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 movl $ 3 2 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 8 0 , % rsp movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) leaq - 3 2 0 (% rbp ), % rax movq % rax , % rdi call main . MyStack . Empty movl % eax , % ebx leaq bool .. d (% rip ), % r 1 4 leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq - 2 4 8 (% rbp ), % rax movb % bl , (% rax ) movq - 2 4 8 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 2 4 0 (% rbp ) movq % r 1 5 , - 2 3 2 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 3 2 0 (% rbp ), % rax movl $ 1 , % esi movq % rax , % rdi call main . MyStack . Push leaq - 3 2 0 (% rbp ), % rax movl $ 2 , % esi movq % rax , % rdi call main . MyStack . Push leaq - 3 2 0 (% rbp ), % rax movl $ 3 , % esi movq % rax , % rdi call main . MyStack . Push leaq - 3 2 0 (% rbp ), % rax movq % rax , % rdi call main . MyStack . Pop movq % rax , % rbx leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rbx , (% rax ) movq - 2 0 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 1 9 2 (% rbp ) movq % r 1 3 , - 1 8 4 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 1 0 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 0 movl $ 1 0 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 0 1 6 , % rsp movq % rdi , - 9 6 8 (% rbp ) leaq . LC 2 2 (% rip ), % rax movl $ 1 1 , % edx movq % rax , - 7 2 0 (% rbp ) movq % rdx , - 7 1 2 (% rbp ) leaq type ... 6 2 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 4 0 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 8 3 2 (% rbp ) movq $ 1 4 , - 8 2 4 (% rbp ) leaq . LC 2 4 (% rip ), % rax movq % rax , - 8 1 6 (% rbp ) movq $ 1 4 , - 8 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 8 4 0 (% rbp ), % rcx movq - 8 3 2 (% rbp ), % rax movq - 8 2 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 8 4 0 (% rbp ), % rcx leaq - 8 3 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 2 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 8 4 0 (% rbp ), % rax movq % rax , - 7 0 4 (% rbp ) movq $ 2 , - 6 9 6 (% rbp ) movq $ 2 , - 6 8 8 (% rbp ) leaq . LC 2 5 (% rip ), % rax movq % rax , - 1 0 2 4 (% rbp ) movq $ 4 , - 1 0 1 6 (% rbp ) movdqa - 1 0 2 4 (% rbp ), % xmm 0 movups % xmm 0 , - 6 8 0 (% rbp ) leaq type ... 6 1 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 9 2 (% rbp ) leaq . LC 2 6 (% rip ), % rax movq % rax , - 7 8 4 (% rbp ) movq $ 7 , - 7 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 7 9 2 (% rbp ), % rcx movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 7 9 2 (% rbp ), % rax leaq - 7 8 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 7 9 2 (% rbp ), % rax movq % rax , - 6 6 4 (% rbp ) movq $ 1 , - 6 5 6 (% rbp ) movq $ 1 , - 6 4 8 (% rbp ) leaq . LC 2 7 (% rip ), % rax movq % rax , - 1 0 0 8 (% rbp ) movq $ 6 , - 1 0 0 0 (% rbp ) movdqa - 1 0 0 8 (% rbp ), % xmm 1 movups % xmm 1 , - 6 4 0 (% rbp ) leaq type ... 6 2 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 6 0 (% rbp ) leaq . LC 2 8 (% rip ), % rax movq % rax , - 7 5 2 (% rbp ) movq $ 9 , - 7 4 4 (% rbp ) leaq . LC 2 9 (% rip ), % rax movq % rax , - 7 3 6 (% rbp ) movq $ 9 , - 7 2 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 6 : movq - 7 6 0 (% rbp ), % rcx movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 6 : jmp . L 7 . L 6 : . LBB 7 : movq - 7 6 0 (% rbp ), % rax leaq - 7 5 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 7 : movq - 7 6 0 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) movq $ 2 , - 6 1 6 (% rbp ) movq $ 2 , - 6 0 8 (% rbp ) leaq - 7 2 0 (% rbp ), % rax movq % rax , - 8 6 4 (% rbp ) movq $ 3 , - 8 5 6 (% rbp ) movq $ 3 , - 8 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 3 0 (% rip ), % r 1 2 movl $ 6 8 , % r 1 3 d leaq - 2 0 8 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) . LBB 8 : movq $ 0 , - 9 6 0 (% rbp ) movq $ 0 , - 9 5 2 (% rbp ) movq $ 0 , - 9 4 4 (% rbp ) movq $ 0 , - 9 3 6 (% rbp ) movq $ 0 , - 9 2 8 (% rbp ) . LBB 9 : . LBB 1 0 : . LBB 1 1 : movq - 8 6 4 (% rbp ), % rax movq - 8 5 6 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 8 4 8 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq - 5 0 4 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 1 : jmp . L 8 . L 1 9 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq - 5 0 4 (% rbp ), % rax testq % rbx , % rbx js . L 9 cmpq % rax , % rbx jge . L 9 movq - 5 1 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 2 , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 5 6 0 (% rbp ) movq % rdi , - 5 5 2 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 5 4 4 (% rbp ) movq % rdi , - 5 3 6 (% rbp ) movq 3 2 (% rax ), % rax movq % rax , - 5 2 8 (% rbp ) . LBE 1 4 : . LBB 1 5 : movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 9 6 0 (% rbp ) movq % rdx , - 9 5 2 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 9 4 4 (% rbp ) movq % rdx , - 9 3 6 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 9 2 8 (% rbp ) . LBE 1 5 : . LBB 1 6 : movq - 9 4 4 (% rbp ), % rax movq - 9 3 6 (% rbp ), % rdx movq % rax , - 8 9 6 (% rbp ) movq % rdx , - 8 8 8 (% rbp ) movq - 9 2 8 (% rbp ), % rax movq % rax , - 8 8 0 (% rbp ) movq - 9 6 0 (% rbp ), % rax movq - 9 5 2 (% rbp ), % rdx movq % rax , - 9 1 2 (% rbp ) movq % rdx , - 9 0 4 (% rbp ) leaq - 4 0 0 (% rbp ), % rax movq - 9 1 2 (% rbp ), % rcx movq - 9 0 4 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call go . leetcode . restoreIPAddresses leaq go . leetcode .. go . leetcode . para 9 3 .. d (% rip ), % rax movq % rax , - 1 0 5 6 (% rbp ) leaq go . leetcode .. go . leetcode . para 9 3 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 9 1 2 (% rbp ), % rax movq - 9 0 4 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 1 0 jmp . L 1 7 . L 9 : . LBE 1 6 : . LBB 2 1 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : . LBE 2 1 : . LBB 2 2 : . LBB 1 7 : movq - 3 7 6 (% rbp ), % rcx movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 2 . L 1 7 : . LBB 1 8 : movq - 3 7 6 (% rbp ), % rax leaq - 3 6 8 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 9 3 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 : . LBE 1 8 : movq - 3 7 6 (% rbp ), % rax movq % rax , - 1 0 4 8 (% rbp ) leaq type ... 6 . 7 string (% rip ), % rax movq % rax , - 1 0 4 0 (% rbp ) leaq type ... 6 . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 3 . LBB 1 9 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 9 : jmp . L 1 4 . L 1 3 : . LBB 2 0 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 4 : . LBE 2 0 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 1 0 3 2 (% rbp ) movdqa - 1 0 5 6 (% rbp ), % xmm 2 movups % xmm 2 , - 3 0 4 (% rbp ) movdqa - 1 0 4 0 (% rbp ), % xmm 3 movups % xmm 3 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 3 1 (% rip ), % rax movq % rax , - 9 9 2 (% rbp ) movq $ 3 7 , - 9 8 4 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq - 9 9 2 (% rbp ), % rsi movq - 9 8 4 (% rbp ), % rdi movq % rsi , % r 8 movq % rdi , % r 9 movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) . LBE 2 2 : . LBE 1 3 : . LBB 2 3 : addq $ 1 , % rbx . L 8 : . LBE 2 3 : cmpq % r 1 2 , % rbx jl . L 1 9 . LBE 1 0 : . LBE 9 : . LBE 8 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 3 2 (% rip ), % r 1 4 movl $ 3 , % r 1 5 d leaq - 8 0 (% rbp ), % rax movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : leaq - 5 5 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 9 movl $ 5 5 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 0 4 , % rsp movq % rdi , % rcx movq % rsi , % rax movq % rax , % rbx movq % rcx , - 5 2 8 (% rbp ) movq % rbx , - 5 2 0 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 5 3 6 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq strings . Builder .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 5 1 2 (% rbp ) movq % rbx , - 5 0 4 (% rbp ) movq % rbx , - 4 9 6 (% rbp ) movq $ 0 , - 5 6 (% rbp ) movb $ 0 , - 5 7 (% rbp ) . LBB 2 : movl $ 0 , - 6 4 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 5 2 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 4 7 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : movq - 5 2 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 5 2 8 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 4 jmp . L 3 3 . L 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBB 9 : addq $ 1 , % rbx . LBE 9 : jmp . L 6 . L 3 3 : . LBB 1 0 : movq - 5 2 8 (% rbp ), % rcx movq - 5 2 0 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movl % ecx , % eax . L 6 : . LBE 1 0 : . LBE 8 : . LBB 1 1 : movl % eax , - 6 4 (% rbp ) . LBE 1 1 : . LBB 1 2 : . LBB 1 3 : . LBB 1 4 : movl $ 1 , % edx movq - 5 6 (% rbp ), % rax cmpq - 5 3 6 (% rbp ), % rax sete % al cmpb % al , % dl jne . L 4 2 . LBB 1 5 : movb $ 1 , - 5 7 (% rbp ) subq $ 2 , - 5 6 (% rbp ) . LBE 1 5 : jmp . L 9 . L 4 2 : . LBB 1 6 : nop . LBE 1 6 : cmpq $- 1 , - 5 6 (% rbp ) sete % al cmpb % al , % dl jne . L 4 3 . LBB 1 7 : movb $ 0 , - 5 7 (% rbp ) addq $ 2 , - 5 6 (% rbp ) . LBE 1 7 : jmp . L 9 . L 4 3 : . LBB 1 8 : nop . L 9 : . LBE 1 8 : . LBE 1 4 : . LBE 1 3 : . LBB 1 9 : movq $ 0 , - 7 2 (% rbp ) . LBB 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq - 4 4 0 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) movl $ 0 , % r 1 2 d . LBE 2 2 : jmp . L 1 1 . L 4 4 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : movq % r 1 2 , - 7 2 (% rbp ) . LBB 2 5 : . LBB 2 6 : movq - 7 2 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jne . L 1 2 . LBB 2 7 : movq - 5 0 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 1 3 cmpq % rax , - 7 2 (% rbp ) jl . L 3 5 . L 1 3 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 5 1 2 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 5 , % rax leaq (% rdx ,% rax ), % rcx leaq - 1 9 2 (% rbp ), % rax movl - 6 4 (% rbp ), % edx movq % rcx , % rsi movq % rax , % rdi call strings . Builder . WriteRune @ PLT movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) . LBE 2 7 : jmp . L 1 5 . L 1 2 : . LBB 2 8 : movq - 5 0 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 1 6 cmpq % rax , - 7 2 (% rbp ) jl . L 3 6 . L 1 6 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq - 5 1 2 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 5 , % rax leaq (% rdx ,% rax ), % rcx leaq - 1 6 0 (% rbp ), % rax movl $ 3 2 , % edx movq % rcx , % rsi movq % rax , % rdi call strings . Builder . WriteRune @ PLT movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) . L 1 5 : . LBE 2 8 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBB 2 9 : addq $ 1 , % r 1 2 . L 1 1 : . LBE 2 9 : cmpq - 5 4 4 (% rbp ), % r 1 2 jl . L 4 4 . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBB 3 0 : . LBB 3 1 : movl $ 1 , % eax cmpb - 5 7 (% rbp ), % al jne . L 4 5 . LBB 3 2 : subq $ 1 , - 5 6 (% rbp ) . LBE 3 2 : jmp . L 2 . L 4 5 : . LBB 3 3 : nop . LBE 3 3 : movzbl - 5 7 (% rbp ), % edx xorl $ 1 , % edx cmpb % dl , % al jne . L 4 6 . LBB 3 4 : addq $ 1 , - 5 6 (% rbp ) . LBE 3 4 : jmp . L 2 . L 4 6 : . LBB 3 5 : nop . L 2 : . LBE 3 5 : . LBE 3 1 : . LBE 3 0 : . LBE 1 2 : . LBE 7 : cmpq % r 1 3 , % rbx jl . L 4 7 . LBE 4 : . LBE 3 : . LBE 2 : . LBB 3 6 : movq $ 0 , - 4 8 0 (% rbp ) movq $ 0 , - 4 7 2 (% rbp ) movq $ 0 , - 4 6 4 (% rbp ) movq $ 0 , - 4 5 6 (% rbp ) . LBB 3 7 : . LBB 3 8 : . LBB 3 9 : movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) movl $ 0 , % ebx . LBE 3 9 : jmp . L 2 6 . L 4 8 : . LBB 4 0 : nop . LBE 4 0 : . LBB 4 1 : . LBB 4 2 : movq - 3 1 2 (% rbp ), % rax testq % rbx , % rbx js . L 2 7 cmpq % rax , % rbx jge . L 2 7 movq - 3 2 0 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) . LBE 4 2 : . LBB 4 3 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) . LBE 4 3 : . LBB 4 4 : leaq - 4 8 0 (% rbp ), % rax movq % rax , % rdi call strings . Builder . String @ PLT movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq string .. d (% rip ), % r 1 4 leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq % r 1 2 , - 2 2 4 (% rbp ) movq % r 1 3 , - 2 1 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 2 8 jmp . L 4 0 . L 2 7 : . LBE 4 4 : . LBB 4 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : . LBE 4 7 : . LBB 4 8 : . LBB 4 5 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 5 : jmp . L 3 0 . L 4 0 : . LBB 4 6 : movq - 2 3 2 (% rbp ), % rax leaq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 0 : . LBE 4 6 : movq - 2 3 2 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 2 0 8 (% rbp ) movq % r 1 5 , - 2 0 0 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) leaq - 9 6 (% rbp ), % rax movq go . day 2 5 3 . out (% rip ), % rcx movq 8 + go . day 2 5 3 . out (% rip ), % rdx subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Fprintln @ PLT addq $ 3 2 , % rsp movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) . LBE 4 8 : . LBE 4 1 : . LBB 4 9 : addq $ 1 , % rbx . L 2 6 : . LBE 4 9 : cmpq - 5 4 4 (% rbp ), % rbx jl . L 4 8 . LBE 3 8 : . LBE 3 7 : . LBE 3 6 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
leaq - 8 2 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 9 movl $ 8 2 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 1 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 7 7 6 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 7 2 0 (% rbp ) movq % rdx , - 7 1 2 (% rbp ) movq $ 0 , - 3 6 8 (% rbp ) movq $ 0 , - 3 6 0 (% rbp ) movq $ 0 , - 3 5 2 (% rbp ) leaq - 3 3 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 3 5 2 (% rbp ) pushq - 3 6 0 (% rbp ) pushq - 3 6 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 7 0 4 (% rbp ) movq % rdx , - 6 9 6 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 6 8 8 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 8 1 6 (% rbp ) leaq go .. C 1 3 (% rip ), % rsi movq % rsi , - 8 0 8 (% rbp ) movq % rax , - 8 0 0 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 8 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 5 . LBB 6 : movq - 6 4 8 (% rbp ), % rcx movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 6 : jmp . L 1 6 . L 1 5 : . LBB 7 : movq - 6 4 8 (% rbp ), % rcx leaq - 6 4 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 6 : . LBE 7 : movq - 6 4 8 (% rbp ), % rax movq % rax , - 7 9 2 (% rbp ) movdqa - 8 1 6 (% rbp ), % xmm 0 movups % xmm 0 , - 6 2 4 (% rbp ) movdqa - 8 0 0 (% rbp ), % xmm 1 movups % xmm 1 , - 6 0 8 (% rbp ) leaq - 6 2 4 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 2 , - 2 9 6 (% rbp ) movq $ 2 , - 2 8 8 (% rbp ) leaq - 2 7 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 8 8 (% rbp ) pushq - 2 9 6 (% rbp ) pushq - 3 0 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 6 7 2 (% rbp ) movq % rdx , - 6 6 4 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 6 5 6 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 7 8 4 (% rbp ) leaq go .. C 1 4 (% rip ), % rax movq % rax , - 7 7 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 7 6 8 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 8 (% rbp ) movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 7 . LBB 8 : movq - 5 6 8 (% rbp ), % rcx movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 8 : jmp . L 1 8 . L 1 7 : . LBB 9 : movq - 5 6 8 (% rbp ), % rax leaq - 5 6 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 8 : . LBE 9 : movq - 5 6 8 (% rbp ), % rax movq % rax , - 7 6 0 (% rbp ) movdqa - 7 8 4 (% rbp ), % xmm 2 movups % xmm 2 , - 5 2 8 (% rbp ) movdqa - 7 6 8 (% rbp ), % xmm 3 movups % xmm 3 , - 5 1 2 (% rbp ) leaq - 5 2 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 2 , - 2 3 2 (% rbp ) movq $ 2 , - 2 2 4 (% rbp ) leaq - 2 0 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) movq 2 4 (% rbp ), % rbx leaq string .. d (% rip ), % r 1 4 leaq go .. C 1 5 (% rip ), % r 1 5 leaq int .. d (% rip ), % rax movq % rax , - 7 5 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 7 2 (% rbp ) movq - 4 7 2 (% rbp ), % rax movq % rbx , (% rax ) movq - 4 7 2 (% rbp ), % rax movq % rax , - 7 4 4 (% rbp ) movq % r 1 4 , - 4 6 4 (% rbp ) movq % r 1 5 , - 4 5 6 (% rbp ) movdqa - 7 5 2 (% rbp ), % xmm 4 movups % xmm 4 , - 4 4 8 (% rbp ) leaq - 4 6 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq 3 2 (% rbp ), % rbx leaq string .. d (% rip ), % r 1 2 leaq go .. C 1 6 (% rip ), % r 1 3 leaq int .. d (% rip ), % rax movq % rax , - 7 3 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 8 (% rbp ) movq - 4 0 8 (% rbp ), % rax movq % rbx , (% rax ) movq - 4 0 8 (% rbp ), % rax movq % rax , - 7 2 8 (% rbp ) movq % r 1 2 , - 4 0 0 (% rbp ) movq % r 1 3 , - 3 9 2 (% rbp ) movdqa - 7 3 6 (% rbp ), % xmm 5 movups % xmm 5 , - 3 8 4 (% rbp ) leaq - 4 0 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 2 , - 1 0 4 (% rbp ) movq $ 2 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
leaq - 6 0 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 4 9 movl $ 6 0 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 7 3 : ret . L 4 4 9 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 5 8 4 , % rsp movq % rdi , - 5 6 8 (% rbp ) movq % rsi , - 5 7 6 (% rbp ) movq % rdx , - 5 9 2 (% rbp ) movq % rcx , - 5 8 4 (% rbp ) movq $ 0 , - 5 4 4 (% rbp ) movq $ 0 , - 5 3 6 (% rbp ) movq $ 0 , - 5 2 8 (% rbp ) movq $ 0 , - 5 6 0 (% rbp ) movq $ 0 , - 5 5 2 (% rbp ) . LBB 4 2 4 : . LBB 4 2 5 : movq - 5 8 4 (% rbp ), % rax testq % rax , % rax jne . L 4 3 8 movq - 5 9 2 (% rbp ), % rax leaq . LC 1 9 7 (% rip ), % rdx cmpq % rdx , % rax jne . L 4 3 9 movl $ 1 , % eax jmp . L 4 4 1 . L 4 3 9 : movl $ 1 , % eax jmp . L 4 4 1 . L 4 3 8 : movl $ 0 , % eax . L 4 4 1 : testb % al , % al je . L 4 4 2 . LBB 4 2 6 : . LBB 4 2 7 : . LBB 4 2 8 : movq $ 0 , - 5 1 2 (% rbp ) movq $ 0 , - 5 0 4 (% rbp ) movq $ 0 , - 4 9 6 (% rbp ) movl $ 0 , % r 8 d movl $ 0 , % r 9 d movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq % r 8 , - 5 6 0 (% rbp ) movq % r 9 , - 5 5 2 (% rbp ) . LBE 4 2 8 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 4 5 6 (% rbp ) movq % rdx , - 4 4 8 (% rbp ) movq - 5 6 8 (% rbp ), % rax movq - 4 8 0 (% rbp ), % rcx movq - 4 7 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 6 4 (% rbp ), % rcx movq - 4 5 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 4 4 8 (% rbp ), % rdx movq % rdx , 3 2 (% rax ) jmp . L 4 3 7 . L 4 4 2 : . LBE 4 2 7 : . LBE 4 2 6 : . LBE 4 2 5 : . LBB 4 2 9 : movq - 5 7 6 (% rbp ), % rax movq 5 6 (% rax ), % rax testq % rax , % rax je . L 4 4 4 . LBB 4 3 0 : leaq - 4 3 2 (% rbp ), % rax movq % rax , % rdi call time . Now @ PLT movq - 5 7 6 (% rbp ), % rax movq 5 6 (% rax ), % rdx leaq - 4 0 0 (% rbp ), % rax leaq - 4 3 2 (% rbp ), % rcx movq % rcx , % rsi movq % rax , % rdi call time . Time . Add @ PLT movq - 5 7 6 (% rbp ), % rax movq 3 2 (% rax ), % rdx movq 2 4 (% rax ), % rax movq % rax , % rcx movq 5 6 (% rcx ), % rcx movq % rdx , % rax subq $ 8 , % rsp pushq - 3 8 4 (% rbp ) pushq - 3 9 2 (% rbp ) pushq - 4 0 0 (% rbp ) movq % rax , % rdi call *% rcx . LVL 7 4 : addq $ 3 2 , % rsp . L 4 4 4 : . LBE 4 3 0 : . LBE 4 2 9 : . LBB 4 3 1 : movq - 5 9 2 (% rbp ), % rcx movq - 5 8 4 (% rbp ), % rdx movq - 5 7 6 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call go . memcache . conn . writeGetCommand addq $ 3 2 , % rsp movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq - 5 6 0 (% rbp ), % rax testq % rax , % rax jne . L 4 4 5 . LBB 4 3 2 : movq - 5 7 6 (% rbp ), % rax movq 6 4 (% rax ), % rax movq % rax , % rdi call bufio . Writer . Flush @ PLT movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) . L 4 4 5 : . LBE 4 3 2 : . LBE 4 3 1 : . LBB 4 3 3 : movq - 5 6 0 (% rbp ), % rax testq % rax , % rax je . L 4 4 6 . LBB 4 3 4 : . LBB 4 3 5 : . LBB 4 3 6 : movq $ 0 , - 3 6 8 (% rbp ) movq $ 0 , - 3 6 0 (% rbp ) movq $ 0 , - 3 5 2 (% rbp ) movq - 5 6 0 (% rbp ), % rcx movq - 5 5 2 (% rbp ), % rdx movq - 5 7 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . memcache . conn . fatal movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , - 5 4 4 (% rbp ) movq % rbx , - 5 3 6 (% rbp ) movq - 3 5 2 (% rbp ), % rcx movq % rcx , - 5 2 8 (% rbp ) movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) . LBE 4 3 6 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 3 1 2 (% rbp ) movq % rdx , - 3 0 4 (% rbp ) movq - 5 6 8 (% rbp ), % rax movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 0 4 (% rbp ), % rdx movq % rdx , 3 2 (% rax ) jmp . L 4 3 7 . L 4 4 6 : . LBE 4 3 5 : . LBE 4 3 4 : . LBE 4 3 3 : . LBB 4 3 7 : movq - 5 7 6 (% rbp ), % rax movq 4 0 (% rax ), % rax testq % rax , % rax je . L 4 4 7 . LBB 4 3 8 : leaq - 2 8 8 (% rbp ), % rax movq % rax , % rdi call time . Now @ PLT movq - 5 7 6 (% rbp ), % rax movq 4 0 (% rax ), % rdx leaq - 2 5 6 (% rbp ), % rax leaq - 2 8 8 (% rbp ), % rcx movq % rcx , % rsi movq % rax , % rdi call time . Time . Add @ PLT movq - 5 7 6 (% rbp ), % rax movq 3 2 (% rax ), % rdx movq 2 4 (% rax ), % rax movq % rax , % rcx movq 4 8 (% rcx ), % rcx movq % rdx , % rax subq $ 8 , % rsp pushq - 2 4 0 (% rbp ) pushq - 2 4 8 (% rbp ) pushq - 2 5 6 (% rbp ) movq % rax , % rdi call *% rcx . LVL 7 5 : addq $ 3 2 , % rsp . L 4 4 7 : . LBE 4 3 8 : . LBE 4 3 7 : . LBB 4 3 9 : leaq - 6 4 (% rbp ), % rax movq - 5 7 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call go . memcache . conn . readGetReply movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq % rcx , - 5 6 0 (% rbp ) movq % rbx , - 5 5 2 (% rbp ) . LBE 4 3 9 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 8 8 (% rbp ) movq % rdx , - 8 0 (% rbp ) movq - 5 6 8 (% rbp ), % rax movq - 1 1 2 (% rbp ), % rcx movq - 1 0 4 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 9 6 (% rbp ), % rcx movq - 8 8 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 8 0 (% rbp ), % rdx movq % rdx , 3 2 (% rax ) . L 4 3 7 : . LBE 4 2 4 : movq - 5 6 8 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 2 8 9 movl $ 1 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 7 : ret . L 2 8 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 7 2 , % rsp movq % rdi , - 7 2 (% rbp ) movq % rdx , % rcx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 2 7 0 : movq - 9 6 (% rbp ), % rcx movq - 8 8 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . structs . Struct . FieldOk movq % rax , % rcx movq % rcx , - 4 8 (% rbp ) movl % edx , % eax movb % al , - 4 9 (% rbp ) . LBB 2 7 1 : movzbl - 4 9 (% rbp ), % eax xorl $ 1 , % eax testb % al , % al je . L 2 8 7 . LBB 2 7 2 : leaq string .. d (% rip ), % r 1 2 leaq go .. C 3 9 0 (% rip ), % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . gopanic @ PLT . L 2 8 7 : . LBE 2 7 2 : . LBE 2 7 1 : . LBB 2 7 3 : movq - 4 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 2 7 3 : . LBE 2 7 0 : addq $ 7 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 2 3 0 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 5 : ret . L 2 3 0 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) . LBB 1 9 1 : movq $ 0 , - 8 (% rbp ) . LBB 1 9 2 : jmp . L 2 2 5 . L 2 2 9 : . LBB 1 9 3 : nop . LBE 1 9 3 : . LBB 1 9 4 : movl $ 1 0 0 0 , % edi call time . Sleep @ PLT movq - 8 (% rbp ), % rax addq $ 1 2 , % rax movq % rax , - 1 6 (% rbp ) leaq - 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . chansend 1 @ PLT . LBE 1 9 4 : . LBB 1 9 5 : addq $ 1 , - 8 (% rbp ) . L 2 2 5 : . LBE 1 9 5 : cmpq $ 5 , - 8 (% rbp ) jle . L 2 2 9 . LBE 1 9 2 : . LBE 1 9 1 : leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 2 0 1 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 8 : ret . L 2 0 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 subq $ 1 4 4 , % rsp movq % rdi , - 1 5 2 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) . LBB 1 6 9 : cmpq $ 0 , - 1 5 2 (% rbp ) jne . L 1 8 4 call runtime . panicmem @ PLT . L 1 8 4 : movq - 1 5 2 (% rbp ), % rax addq $ 3 2 , % rax movq % rax , % rdi call sync . Mutex . Lock @ PLT movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) . LBB 1 7 0 : movq - 1 5 2 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 2 4 (% rbp ) cmpq $ 0 , - 2 4 (% rbp ) jle . L 1 8 5 . LBB 1 7 1 : movq - 1 5 2 (% rbp ), % rcx movq 8 (% rcx ), % rax movq 1 6 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 2 4 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 1 8 6 cmpq % rdx , % rax jge . L 1 8 6 movq - 1 1 2 (% rbp ), % rdx salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 5 2 (% rbp ), % rcx movq 8 (% rcx ), % rax movq 1 6 (% rcx ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 2 4 (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq - 7 2 (% rbp ), % rdx testq % rax , % rax jns . L 1 8 7 jmp . L 1 8 8 . L 1 8 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 8 7 : cmpq % rdx , % rax jge . L 1 8 8 movq - 8 0 (% rbp ), % rdx salq $ 4 , % rax addq % rdx , % rax movl $ 0 , % r 1 2 d movl $ 0 , % r 1 3 d movq % r 1 2 , % rdx movq % rdx , (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 1 8 9 jmp . L 1 9 9 . L 1 8 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 8 9 : . LBB 1 7 2 : movq % r 1 3 , % rdx movq % rdx , 8 (% rax ) jmp . L 1 9 1 . L 1 9 9 : . LBE 1 7 2 : . LBB 1 7 3 : movq % r 1 3 , % rdx addq $ 8 , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 9 1 : . LBE 1 7 3 : movq - 1 5 2 (% rbp ), % rcx movq 8 (% rcx ), % rax movq 1 6 (% rcx ), % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq 2 4 (% rcx ), % rax movq % rax , - 3 2 (% rbp ) movq - 2 4 (% rbp ), % rax leaq - 1 (% rax ), % rdi movq - 3 2 (% rbp ), % rax testq % rdi , % rdi js . L 1 9 2 cmpq % rax , % rdi jg . L 1 9 2 testq % rdi , % rdi jns . L 1 9 3 jmp . L 2 0 0 . L 1 9 2 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 2 0 0 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 9 3 : movq - 4 8 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx movq - 1 5 2 (% rbp ), % rax movq % rcx , 8 (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rdi , 1 6 (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rdx , 2 4 (% rax ) . L 1 8 5 : . LBE 1 7 1 : . LBE 1 7 0 : cmpq $ 0 , - 1 5 2 (% rbp ) jne . L 1 9 5 call runtime . panicmem @ PLT . L 1 9 5 : movq - 1 5 2 (% rbp ), % rax addq $ 3 2 , % rax movq % rax , % rdi call sync . Mutex . Unlock @ PLT . LBB 1 7 4 : . LBB 1 7 5 : movq - 1 4 4 (% rbp ), % rax testq % rax , % rax sete % al testb % al , % al je . L 1 9 6 . LBB 1 7 6 : movq - 1 5 2 (% rbp ), % rax movq 4 0 (% rax ), % rax testq % rax , % rax setne % al . L 1 9 6 : . LBE 1 7 6 : . LBE 1 7 5 : testb % al , % al je . L 1 9 7 . LBB 1 7 7 : movq - 1 5 2 (% rbp ), % rax movq 4 0 (% rax ), % rdx movq - 1 5 2 (% rbp ), % rax movq 4 0 (% rax ), % rax movq (% rax ), % rax movq % rdx , % r 1 0 call *% rax . LVL 1 9 : movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) . L 1 9 7 : . LBE 1 7 7 : . LBE 1 7 4 : . LBB 1 7 8 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx . LBE 1 7 8 : . LBE 1 6 9 : addq $ 1 4 4 , % rsp popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 3 6 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 5 movl $ 3 6 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 1 2 , % rsp movq % rdi , - 3 4 4 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) movq $ 0 , - 2 0 8 (% rbp ) movq $ 0 , - 2 0 0 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 7 2 (% rbp ) movq % rbx , - 2 6 4 (% rbp ) movq % rbx , - 2 5 6 (% rbp ) movq - 6 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 1 go . leetcode 0 4 9 7 . rect (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 0 4 (% rbp ) movq % rbx , - 2 9 6 (% rbp ) movq % rbx , - 2 8 8 (% rbp ) . LBB 3 : movq $ 0 , - 7 2 (% rbp ) movq $ 0 , - 3 3 6 (% rbp ) movq $ 0 , - 3 2 8 (% rbp ) movq $ 0 , - 3 2 0 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 5 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 2 4 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 1 6 0 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 7 6 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq % rbx , - 7 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 3 2 8 (% rbp ), % rax cmpq $ 2 , % rax jg . L 4 jmp . L 2 0 . L 3 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : . LBE 1 4 : . LBB 1 5 : movq % rax , % rsi movl $ 2 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq - 3 2 8 (% rbp ), % rax testq % rax , % rax jg . L 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 6 : movq - 3 3 6 (% rbp ), % rax addq $ 1 6 , % rax movq (% rax ), % rdx movq - 3 3 6 (% rbp ), % rax movq (% rax ), % rcx movq % rdx , % rax subq % rcx , % rax addq $ 1 , % rax movq % rax , - 8 0 (% rbp ) movq - 3 2 8 (% rbp ), % rax cmpq $ 3 , % rax jg . L 7 movq % rax , % rsi movl $ 3 , % edi call runtime . goPanicIndex @ PLT . L 7 : movq - 3 2 8 (% rbp ), % rax cmpq $ 1 , % rax jg . L 8 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 8 : movq - 3 3 6 (% rbp ), % rax addq $ 2 4 , % rax movq (% rax ), % rax movq - 3 3 6 (% rbp ), % rdx addq $ 8 , % rdx movq (% rdx ), % rdx subq % rdx , % rax addq $ 1 , % rax movq % rax , - 8 8 (% rbp ) movq - 8 0 (% rbp ), % rax imulq - 8 8 (% rbp ), % rax addq % rax , - 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 9 cmpq % rax , - 7 2 (% rbp ) jl . L 2 1 . L 9 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : movq - 2 7 2 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 5 6 (% rbp ), % rax movq % rax , (% rdx ) movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 1 1 cmpq % rax , - 7 2 (% rbp ) jl . L 2 2 . L 1 1 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : movq - 3 0 4 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % r 1 2 movq - 3 2 8 (% rbp ), % rax testq % rax , % rax jg . L 1 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 3 : movq - 3 2 8 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 4 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 4 : movq - 3 3 6 (% rbp ), % rax movq (% rax ), % r 1 4 movq - 3 3 6 (% rbp ), % rax movq 8 (% rax ), % r 1 3 leaq go . leetcode 0 4 9 7 .. go . leetcode 0 4 9 7 . rect .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq % r 1 4 , (% rax ) movq % r 1 3 , 8 (% rax ) movq - 8 0 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) movq - 8 8 (% rbp ), % rdx movq % rdx , 2 4 (% rax ) movq - 9 6 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 5 . LBB 1 2 : movq % rax , (% r 1 2 ) jmp . L 1 6 . L 1 5 : . LBE 1 2 : . LBB 1 3 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . gcWriteBarrier @ PLT . L 1 6 : . LBE 1 3 : . LBE 1 5 : . LBE 8 : . LBB 1 6 : addq $ 1 , % rbx . L 2 : . LBE 1 6 : cmpq % r 1 5 , % rbx jl . L 2 4 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 7 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 1 6 (% rbp ) movq % rdx , - 2 0 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 0 0 (% rbp ) movq - 3 4 4 (% rbp ), % rax movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 2 2 4 (% rbp ), % rcx movq - 2 1 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 2 0 8 (% rbp ), % rcx movq - 2 0 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 1 7 : . LBE 2 : movq - 3 4 4 (% rbp ), % rax addq $ 3 1 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 0 movl $ 3 7 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 3 5 2 , % rsp movq % rdi , - 3 4 4 (% rbp ) movq % rsi , - 3 5 2 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq % rcx , - 3 6 8 (% rbp ) . LBB 2 : cmpq $ 0 , - 3 4 4 (% rbp ) je . L 1 9 . LBE 2 : leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % rbx movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % r 1 2 leaq (% rbx ,% r 1 2 ), % rax movq - 2 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 movq - 3 0 4 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) jmp . L 5 . L 4 : movq - 3 0 4 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 5 : movq % r 1 2 , % rax leaq 0 (,% rax , 8 ), % rdx movq - 2 7 2 (% rbp ), % rax movq - 3 0 4 (% rbp ), % rcx movq % rbx , % rsi salq $ 3 , % rsi addq % rsi , % rcx movq % rax , % rsi movq % rcx , % rdi call memmove @ PLT movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rbx movq - 3 4 4 (% rbp ), % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 6 . LBB 4 : movq - 2 4 0 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) . LBE 4 : jmp . L 7 . L 6 : . LBB 5 : movq - 2 4 0 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rdx movq % rcx , - 3 3 6 (% rbp ) movq % rax , - 3 2 8 (% rbp ) movq % rdx , - 3 2 0 (% rbp ) . L 7 : . LBE 5 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) movq - 3 4 4 (% rbp ), % rax movq (% rax ), % rdx movq - 3 5 2 (% rbp ), % rax addq % rdx , % rax movq % rax , - 2 4 (% rbp ) . LBB 6 : . LBB 7 : . LBB 8 : movq - 3 4 4 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax sete % al testb % al , % al je . L 8 . LBB 9 : movq - 3 4 4 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax sete % al . L 8 : . LBE 9 : . LBE 8 : testb % al , % al je . L 9 . LBB 1 0 : movq - 2 4 (% rbp ), % rax cmpq - 3 6 0 (% rbp ), % rax sete % al . L 9 : . LBE 1 0 : . LBE 7 : testb % al , % al je . L 1 0 . LBB 1 1 : movq - 3 6 8 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 1 . LBB 1 2 : movq - 3 6 8 (% rbp ), % rbx movq - 2 0 8 (% rbp ), % rsi leaq - 4 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 6 . 7 int (% rip ), % rsi call runtime . growslice @ PLT movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 2 . LBB 1 3 : movq - 1 7 6 (% rbp ), % rax movq % rax , (% rbx ) jmp . L 1 3 . L 1 2 : . LBE 1 3 : . LBB 1 4 : movq - 1 7 6 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 1 3 . L 1 1 : . LBE 1 4 : . LBE 1 2 : . LBB 1 5 : movq - 2 0 8 (% rbp ), % rsi movq - 1 9 2 (% rbp ), % rdx movq - 3 6 8 (% rbp ), % rcx movq % rsi , (% rcx ) movq - 3 6 8 (% rbp ), % rcx movq % rax , 8 (% rcx ) movq - 3 6 8 (% rbp ), % rax movq % rdx , 1 6 (% rax ) . L 1 3 : . LBE 1 5 : movq - 3 6 8 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rdx movq % r 1 2 , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , - 1 4 4 (% rbp ) movq % rbx , - 1 3 6 (% rbp ) movq - 3 2 0 (% rbp ), % rdx movq % rdx , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 2 8 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 4 . LBB 1 6 : movq - 1 4 4 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 1 6 : jmp . L 1 . L 1 4 : . LBB 1 7 : movq - 1 4 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . LBE 1 7 : jmp . L 1 . L 1 0 : . LBE 1 1 : . LBE 6 : . LBB 1 8 : movq - 3 4 4 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax je . L 1 6 . LBB 1 9 : movq - 3 4 4 (% rbp ), % rax movq 8 (% rax ), % rax movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rdx movq - 2 4 (% rbp ), % rsi subq $ 8 , % rsp pushq - 3 2 0 (% rbp ) pushq - 3 2 8 (% rbp ) pushq - 3 3 6 (% rbp ) movq % rax , % rdi call main . traverse addq $ 3 2 , % rsp . L 1 6 : . LBE 1 9 : . LBE 1 8 : . LBB 2 0 : movq - 3 4 4 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax je . L 1 . LBB 2 1 : movq - 3 4 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rdx movq - 2 4 (% rbp ), % rsi subq $ 8 , % rsp pushq - 3 2 0 (% rbp ) pushq - 3 2 8 (% rbp ) pushq - 3 3 6 (% rbp ) movq % rax , % rdi call main . traverse addq $ 3 2 , % rsp jmp . L 1 . L 1 9 : . LBE 2 1 : . LBE 2 0 : . LBB 2 2 : . LBB 3 : nop . L 1 : . LBE 3 : . LBE 2 2 : leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 7 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 4 movl $ 7 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 6 4 , % rsp movq % rdi , - 6 6 4 (% rbp ) leaq type ... 6 8 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 5 6 (% rbp ) movq - 4 5 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq $ 4 , 3 2 (% rax ) movq $ 3 , 4 0 (% rax ) movq $ 2 , 4 8 (% rax ) movq $ 1 , 5 6 (% rax ) movq - 4 5 6 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) movq $ 8 , - 6 1 6 (% rbp ) movq $ 8 , - 6 0 8 (% rbp ) movb $ 1 , - 6 0 0 (% rbp ) leaq type ... 6 8 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 8 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 2 , 2 4 (% rax ) movq $ 2 , 3 2 (% rax ) movq $ 2 , 4 0 (% rax ) movq $ 3 , 4 8 (% rax ) movq $ 3 , 5 6 (% rax ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 8 , - 5 8 4 (% rbp ) movq $ 8 , - 5 7 6 (% rbp ) movb $ 0 , - 5 6 8 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 0 (% rbp ) movq - 4 4 0 (% rbp ), % rax movq $ 1 , (% rax ) movq - 4 4 0 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 1 , - 5 5 2 (% rbp ) movq $ 1 , - 5 4 4 (% rbp ) movb $ 0 , - 5 3 6 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 3 2 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 1 , 8 (% rax ) movq - 4 3 2 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 2 , - 5 2 0 (% rbp ) movq $ 2 , - 5 1 2 (% rbp ) movb $ 1 , - 5 0 4 (% rbp ) leaq type ... 6 6 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 2 4 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 2 , 2 4 (% rax ) movq $ 2 , 3 2 (% rax ) movq $ 2 , 4 0 (% rax ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq $ 6 , - 4 8 8 (% rbp ) movq $ 6 , - 4 8 0 (% rbp ) movb $ 1 , - 4 7 2 (% rbp ) . LBB 2 : movq $ 0 , - 6 5 6 (% rbp ) movq $ 0 , - 6 4 8 (% rbp ) movq $ 0 , - 6 4 0 (% rbp ) movq $ 0 , - 6 3 2 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq $ 5 , - 6 7 2 (% rbp ) movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 1 3 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : testq % rbx , % rbx js . L 3 cmpq $ 4 , % rbx jg . L 3 movq % rbx , % rax salq $ 5 , % rax leaq - 4 8 (% rbp ), % rcx addq % rcx , % rax leaq - 3 3 6 (% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) . LBE 8 : . LBB 9 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 6 5 6 (% rbp ) movq % rdx , - 6 4 8 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) . LBE 9 : . LBB 1 0 : subq $ 8 , % rsp pushq - 6 4 0 (% rbp ) pushq - 6 4 8 (% rbp ) pushq - 6 5 6 (% rbp ) call go . problem 9 1 4 . hasGroupsSizeX addq $ 3 2 , % rsp movb % al , - 4 9 (% rbp ) . LBB 1 1 : movzbl - 6 3 2 (% rbp ), % eax cmpb % al , - 4 9 (% rbp ) jne . L 4 jmp . L 5 . L 3 : . LBE 1 1 : . LBE 1 0 : . LBB 1 8 : movl $ 5 , % esi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 8 : . LBB 1 9 : . LBB 1 7 : . LBB 1 2 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 7 0 4 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 1 3 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 3 : jmp . L 7 . L 6 : . LBB 1 4 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 1 4 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 6 9 6 (% rbp ) leaq bool .. d (% rip ), % rax movq % rax , - 6 8 8 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 1 5 2 (% rbp ), % rax movzbl - 4 9 (% rbp ), % edx movb % dl , (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 6 8 0 (% rbp ) leaq bool .. d (% rip ), % r 1 4 leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 4 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movzbl - 6 3 2 (% rbp ), % edx movb % dl , (% rax ) movq - 1 4 4 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 7 0 4 (% rbp ), % xmm 0 movups % xmm 0 , - 1 2 8 (% rbp ) movdqa - 6 8 8 (% rbp ), % xmm 1 movups % xmm 1 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 . LBB 1 5 : movq - 1 3 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) . LBE 1 5 : jmp . L 9 . L 8 : . LBB 1 6 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 : . LBE 1 6 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 3 0 (% rip ), % r 1 2 movl $ 2 5 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 6 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 5 : . LBE 1 2 : . LBE 1 7 : . LBE 1 9 : . LBE 7 : . LBB 2 0 : addq $ 1 , % rbx . L 2 : . LBE 2 0 : cmpq - 6 7 2 (% rbp ), % rbx jl . L 1 3 . LBE 4 : . LBE 3 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 5 8 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 5 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 3 6 , % rsp movq % rdi , - 5 5 2 (% rbp ) leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . amount . 0 int . 2 . go . Solution . coins . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 1 2 (% rbp ) leaq . LC 2 2 (% rip ), % rax movq % rax , - 5 7 6 (% rbp ) movq $ 9 , - 5 6 8 (% rbp ) movdqa - 5 7 6 (% rbp ), % xmm 0 movups % xmm 0 , - 4 8 0 (% rbp ) movq $ 5 , - 4 6 4 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) movq - 5 0 4 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 5 , 1 6 (% rax ) movq - 5 0 4 (% rbp ), % rax movq % rax , - 4 5 6 (% rbp ) movq $ 3 , - 4 4 8 (% rbp ) movq $ 3 , - 4 4 0 (% rbp ) movq $ 4 , - 4 3 2 (% rbp ) leaq . LC 2 3 (% rip ), % r 1 4 movl $ 9 , % r 1 5 d movq % r 1 4 , - 4 2 4 (% rbp ) movq % r 1 5 , - 4 1 6 (% rbp ) movq $ 1 0 , - 4 0 8 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 9 6 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq $ 1 0 , (% rax ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 1 , - 3 9 2 (% rbp ) movq $ 1 , - 3 8 4 (% rbp ) movq $ 1 , - 3 7 6 (% rbp ) leaq . LC 2 4 (% rip ), % r 1 2 movl $ 9 , % r 1 3 d movq % r 1 2 , - 3 6 8 (% rbp ) movq % r 1 3 , - 3 6 0 (% rbp ) movq $ 3 , - 3 5 2 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 8 (% rbp ) movq - 4 8 8 (% rbp ), % rax movq $ 2 , (% rax ) movq - 4 8 8 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) movq $ 1 , - 3 3 6 (% rbp ) movq $ 1 , - 3 2 8 (% rbp ) movq $ 0 , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 5 1 2 (% rbp ), % rax movq - 4 8 0 (% rbp ), % rcx movq - 4 7 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 6 4 (% rbp ), % rcx movq - 4 5 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 1 4 4 (% rax ) movq % rbx , 1 5 2 (% rax ) movq - 3 2 0 (% rbp ), % rdx movq % rdx , 1 6 0 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 5 1 2 (% rbp ), % rax leaq - 4 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . amount . 0 int . 2 . go . Solution . coins . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 5 1 2 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) movq $ 3 , - 5 3 6 (% rbp ) movq $ 3 , - 5 2 8 (% rbp ) . LBB 4 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . amount . 0 int . 2 . go . Solution . coins . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 3 2 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 4 0 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 3 , % rax subq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 3 0 4 (% rbp ) movq % rdi , - 2 9 6 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 8 8 (% rbp ) movq % rdi , - 2 8 0 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 4 8 (% rax ), % rax movq % rax , - 2 5 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 2 0 8 (% rbp ), % rsi movq - 2 0 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 1 6 0 (% rbp ), % rdx movq % rdx , 4 8 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . amount . 0 int . 2 . go . Solution . coins . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 2 5 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . amount . 0 int . 2 . go . Solution . coins . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . amount . 0 int . 2 . go . Solution . coins . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 5 5 2 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 5 3 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 8 movl $ 2 3 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 subq $ 1 9 2 , % rsp movq $ 3 3 3 0 , - 4 8 (% rbp ) . LBB 2 : movq $ 1 0 0 0 , - 4 0 (% rbp ) . LBB 3 : jmp . L 2 . L 7 : . LBB 4 : nop . LBE 4 : . LBB 5 : . LBB 6 : movq - 4 0 (% rbp ), % rax movq % rax , % rdi call main . isPrime testb % al , % al je . L 3 . LBB 7 : . LBB 8 : movq - 4 0 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax addq % rdx , % rax movq % rax , % rdi call main . isPrime testb % al , % al je . L 3 . LBB 9 : . LBB 1 0 : movq - 4 8 (% rbp ), % rax leaq (% rax ,% rax ), % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax movq % rax , % rdi call main . isPrime testb % al , % al je . L 3 . LBB 1 1 : leaq int .. d (% rip ), % rax movq % rax , - 2 2 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 2 1 6 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 7 6 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 4 0 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx addq % rcx , % rdx movq % rdx , (% rax ) movq - 1 7 6 (% rbp ), % rax movq % rax , % r 1 5 leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 4 0 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax leaq (% rdx ,% rax ), % rcx movq - 1 6 8 (% rbp ), % rax movq - 4 8 (% rbp ), % rdx addq % rcx , % rdx movq % rdx , (% rax ) movq - 1 6 8 (% rbp ), % rax movq % rax , % r 1 3 movdqa - 2 2 4 (% rbp ), % xmm 0 movups % xmm 0 , - 1 6 0 (% rbp ) movq % r 1 4 , - 1 4 4 (% rbp ) movq % r 1 5 , - 1 3 6 (% rbp ) movq % r 1 2 , - 1 2 8 (% rbp ) movq % r 1 3 , - 1 2 0 (% rbp ) leaq - 1 6 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 3 , - 1 0 4 (% rbp ) movq $ 3 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) . L 3 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBE 8 : . LBE 7 : . LBE 6 : . LBE 5 : . LBB 1 2 : addq $ 1 , - 4 0 (% rbp ) . L 2 : . LBE 1 2 : cmpq $ 9 9 9 9 , - 4 0 (% rbp ) jle . L 7 . LBE 3 : . LBE 2 : leaq - 3 2 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 2 5 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 1 6 : . LBB 1 7 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax je . L 1 7 . LBB 1 8 : . LBB 1 9 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rdx movq - 3 2 (% rbp ), % rax movq 8 (% rax ), % rax cmpq % rax , % rdx jge . L 1 8 . LBB 2 0 : movq - 2 4 (% rbp ), % rax movq - 3 2 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 1 9 . LBB 2 1 : movq % rdx , (% rax ) . LBE 2 1 : jmp . L 2 0 . L 1 9 : . LBB 2 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 0 : . LBE 2 2 : . LBB 2 3 : movq - 3 2 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 2 1 . L 1 8 : . LBE 2 3 : . LBE 2 0 : . LBE 1 9 : movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 2 2 . LBB 2 4 : movq % rdx , (% rax ) . LBE 2 4 : jmp . L 2 3 . L 2 2 : . LBB 2 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 3 : . LBE 2 5 : . LBB 2 6 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rdx movq - 3 2 (% rbp ), % rax movq 8 (% rax ), % rax cmpq % rax , % rdx jne . L 2 4 . LBB 2 7 : . LBB 2 8 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rdx addq $ 1 , % rdx movq % rdx , 8 (% rax ) . L 2 4 : . LBE 2 8 : . LBE 2 7 : . LBE 2 6 : . LBB 2 9 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 2 1 . L 1 7 : . LBE 2 9 : . LBE 1 8 : . LBE 1 7 : . LBB 3 0 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 2 1 : . LBE 3 0 : . LBE 1 6 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 movl $ 1 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 : pushq % rbp movq % rsp , % rbp pushq % rbx movq % rdi , - 7 2 (% rbp ) movq $ 0 , - 6 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 4 0 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax movq $ 0 , - 6 4 (% rbp ) movq % rax , - 5 6 (% rbp ) movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 7 2 (% rbp ), % rax movq - 6 4 (% rbp ), % rcx movq - 5 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 8 (% rbp ), % rcx movq - 4 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 2 (% rbp ), % rdx movq % rdx , 3 2 (% rax ) . LBE 3 : . LBE 2 : movq - 7 2 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 4 5 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 6 movl $ 4 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 0 8 , % rsp movq % rdi , - 4 4 0 (% rbp ) movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq $ 0 , - 3 5 2 (% rbp ) movq $ 0 , - 3 4 4 (% rbp ) movq $ 0 , - 3 3 6 (% rbp ) movq $ 0 , - 3 8 4 (% rbp ) movq $ 0 , - 3 7 6 (% rbp ) movq $ 0 , - 3 6 8 (% rbp ) movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) movq $ 0 , - 4 0 0 (% rbp ) . LBB 3 : movq $ 0 , - 4 3 2 (% rbp ) movq $ 0 , - 4 2 4 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 8 0 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 3 4 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 8 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 2 8 8 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 2 movq - 4 3 2 (% rbp ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 4 jmp . L 2 7 . L 3 : . LBE 1 1 : . LBB 1 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 6 : . LBB 1 7 : . LBB 1 2 : movq - 2 5 6 (% rbp ), % rsi leaq - 1 6 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) . LBE 1 2 : jmp . L 6 . L 2 7 : . LBB 1 3 : movq - 2 5 6 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rdx movq % rcx , - 3 5 2 (% rbp ) movq % rax , - 3 4 4 (% rbp ) movq % rdx , - 3 3 6 (% rbp ) . L 6 : . LBE 1 3 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 3 , (% rax ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 2 movq - 4 2 4 (% rbp ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 7 . LBB 1 4 : movq - 2 2 4 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) . LBE 1 4 : jmp . L 8 . L 7 : . LBB 1 5 : movq - 2 2 4 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rdx movq % rcx , - 3 8 4 (% rbp ) movq % rax , - 3 7 6 (% rbp ) movq % rdx , - 3 6 8 (% rbp ) . L 8 : . LBE 1 5 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 3 , (% rax ) . LBE 1 7 : . LBE 8 : . LBB 1 8 : addq $ 1 , % rbx . L 2 : . LBE 1 8 : cmpq - 4 4 8 (% rbp ), % rbx jl . L 3 4 . LBE 5 : . LBE 4 : . LBE 3 : subq $ 8 , % rsp pushq - 3 3 6 (% rbp ) pushq - 3 4 4 (% rbp ) pushq - 3 5 2 (% rbp ) call sort . Ints @ PLT addq $ 3 2 , % rsp subq $ 8 , % rsp pushq - 3 6 8 (% rbp ) pushq - 3 7 6 (% rbp ) pushq - 3 8 4 (% rbp ) call sort . Ints @ PLT addq $ 3 2 , % rsp . LBB 1 9 : movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 2 0 : jmp . L 1 1 . L 3 5 : . LBB 2 1 : nop . LBE 2 1 : . LBB 2 2 : . LBB 2 3 : . LBB 2 4 : movq - 7 2 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 5 6 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 2 . LBB 2 5 : movq - 5 6 (% rbp ), % rax addq $ 1 , % rax movq - 3 4 4 (% rbp ), % rdx testq % rax , % rax js . L 1 3 cmpq % rdx , % rax jl . L 2 9 . L 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 3 7 6 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 1 5 cmpq % rdx , - 5 6 (% rbp ) jl . L 3 0 . L 1 5 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq - 3 5 2 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 3 8 4 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setg % al . L 1 2 : . LBE 2 5 : . LBE 2 4 : testb % al , % al je . L 1 7 . LBB 2 6 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rbx movq - 3 4 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 8 cmpq % rax , - 6 4 (% rbp ) jl . L 3 1 . L 1 8 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq - 3 7 6 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 2 0 cmpq % rax , - 5 6 (% rbp ) jl . L 3 2 . L 2 0 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq - 3 5 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 3 8 4 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rdx , % r 1 4 movq % rax , % r 1 5 leaq 1 (% rbx ), % rax movq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 2 . LBB 2 7 : movq - 1 9 2 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq main . Interval .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) . LBE 2 7 : jmp . L 2 3 . L 2 2 : . LBB 2 8 : movq - 1 9 2 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rdx movq % rcx , - 4 1 6 (% rbp ) movq % rax , - 4 0 8 (% rbp ) movq % rdx , - 4 0 0 (% rbp ) . L 2 3 : . LBE 2 8 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq % r 1 4 , (% rax ) movq % r 1 5 , 8 (% rax ) movq - 5 6 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 6 4 (% rbp ) . L 1 7 : . LBE 2 6 : . LBE 2 3 : . LBE 2 2 : . LBB 2 9 : addq $ 1 , - 5 6 (% rbp ) . L 1 1 : . LBE 2 9 : movq - 5 6 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jl . L 3 5 . LBE 2 0 : . LBE 1 9 : . LBB 3 0 : movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 4 4 0 (% rbp ), % rcx movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 0 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 0 : . LBE 2 : movq - 4 4 0 (% rbp ), % rax leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 6 movl $ 3 2 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 3 0 4 , % rsp movq % rdi , - 3 1 2 (% rbp ) movq % rsi , - 3 2 0 (% rbp ) . LBB 2 : movq - 3 1 2 (% rbp ), % rax cmpq - 3 2 0 (% rbp ), % rax jg . L 4 5 . LBE 2 : movq - 3 2 0 (% rbp ), % rax subq - 3 1 2 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , % rdx movq - 3 1 2 (% rbp ), % rax addq % rdx , % rax movq % rax , - 2 4 (% rbp ) . LBB 4 : . LBB 5 : cmpq $ 0 , - 2 4 (% rbp ) sete % al testb % al , % al je . L 4 . LBB 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 5 cmpq % rax , - 2 4 (% rbp ) jl . L 3 7 . L 5 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 2 4 (% rbp ), % rax addq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 7 cmpq % rdx , % rax jl . L 3 8 . L 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setg % al . L 4 : . LBE 6 : . LBE 5 : testb % al , % al je . L 9 . LBB 7 : movq main . res (% rip ), % rax movq 8 + main . res (% rip ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq 1 6 + main . res (% rip ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 2 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 0 . LBB 8 : leaq main . res (% rip ), % rbx movq - 3 0 4 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 2 5 6 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 . LBB 9 : movq - 2 7 2 (% rbp ), % rax movq % rax , (% rbx ) . LBE 9 : jmp . L 1 2 . L 1 1 : . LBB 1 0 : movq - 2 7 2 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 1 2 . L 1 0 : . LBE 1 0 : . LBE 8 : . LBB 1 1 : movq - 3 0 4 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rdx movq % rcx , main . res (% rip ) movq % rax , 8 + main . res (% rip ) movq % rdx , 1 6 + main . res (% rip ) . L 1 2 : . LBE 1 1 : movq main . res (% rip ), % rax movq 8 + main . res (% rip ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq 1 6 + main . res (% rip ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rax , (% rdx ) jmp . L 1 . L 9 : . LBE 7 : . LBE 4 : . LBB 1 2 : . LBB 1 3 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 2 4 (% rbp ) sete % al testb % al , % al je . L 1 3 . LBB 1 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 4 cmpq % rax , - 2 4 (% rbp ) jl . L 3 9 . L 1 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 6 cmpq % rdx , % rax jl . L 4 0 . L 1 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setg % al . L 1 3 : . LBE 1 4 : . LBE 1 3 : testb % al , % al je . L 1 8 . LBB 1 5 : movq main . res (% rip ), % rax movq 8 + main . res (% rip ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 + main . res (% rip ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 9 . LBB 1 6 : leaq main . res (% rip ), % rbx movq - 2 4 0 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 1 9 2 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 0 . LBB 1 7 : movq - 2 0 8 (% rbp ), % rax movq % rax , (% rbx ) . LBE 1 7 : jmp . L 2 1 . L 2 0 : . LBB 1 8 : movq - 2 0 8 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 2 1 . L 1 9 : . LBE 1 8 : . LBE 1 6 : . LBB 1 9 : movq - 2 4 0 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rdx movq % rcx , main . res (% rip ) movq % rax , 8 + main . res (% rip ) movq % rdx , 1 6 + main . res (% rip ) . L 2 1 : . LBE 1 9 : movq main . res (% rip ), % rax movq 8 + main . res (% rip ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 + main . res (% rip ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rax , (% rdx ) jmp . L 1 . L 1 8 : . LBE 1 5 : . LBE 1 2 : . LBB 2 0 : . LBB 2 1 : . LBB 2 2 : . LBB 2 3 : cmpq $ 0 , - 2 4 (% rbp ) setg % al testb % al , % al je . L 2 2 . LBB 2 4 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 2 4 (% rbp ) setl % al . L 2 2 : . LBE 2 4 : . LBE 2 3 : testb % al , % al je . L 2 3 . LBB 2 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 4 cmpq % rax , - 2 4 (% rbp ) jl . L 4 1 . L 2 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 2 6 cmpq % rdx , % rax jl . L 4 2 . L 2 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setg % al . L 2 3 : . LBE 2 5 : . LBE 2 2 : testb % al , % al je . L 2 8 . LBB 2 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 9 cmpq % rax , - 2 4 (% rbp ) jl . L 4 3 . L 2 9 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq - 2 4 (% rbp ), % rax addq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 3 1 cmpq % rdx , % rax jl . L 4 4 . L 3 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setg % al . L 2 8 : . LBE 2 6 : . LBE 2 1 : testb % al , % al je . L 3 3 . LBB 2 7 : movq main . res (% rip ), % rax movq 8 + main . res (% rip ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 + main . res (% rip ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 3 4 . LBB 2 8 : leaq main . res (% rip ), % rbx movq - 1 7 6 (% rbp ), % rsi leaq - 4 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 1 2 8 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 5 . LBB 2 9 : movq - 1 4 4 (% rbp ), % rax movq % rax , (% rbx ) . LBE 2 9 : jmp . L 3 6 . L 3 5 : . LBB 3 0 : movq - 1 4 4 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 3 6 . L 3 4 : . LBE 3 0 : . LBE 2 8 : . LBB 3 1 : movq - 1 7 6 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rdx movq % rcx , main . res (% rip ) movq % rax , 8 + main . res (% rip ) movq % rdx , 1 6 + main . res (% rip ) . L 3 6 : . LBE 3 1 : movq main . res (% rip ), % rax movq 8 + main . res (% rip ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 + main . res (% rip ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rax , (% rdx ) jmp . L 1 . L 3 3 : . LBE 2 7 : . LBE 2 0 : movq - 2 4 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 3 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rdx , % rsi movq % rax , % rdi call main . find addq $ 3 2 , % rsp movq - 2 4 (% rbp ), % rax leaq 1 (% rax ), % rdx movq - 3 2 0 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rsi movq % rdx , % rdi call main . find addq $ 3 2 , % rsp jmp . L 1 . L 4 5 : . LBB 3 2 : . LBB 3 : nop . L 1 : . LBE 3 : . LBE 3 2 : leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 6 3 movl $ 1 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 6 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 6 0 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movb $ 0 , - 2 5 (% rbp ) . LBB 2 5 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 2 6 : movq - 4 0 (% rbp ), % rax cqto shrq $ 6 3 , % rdx addq % rdx , % rax andl $ 1 , % eax subq % rdx , % rax cmpq $ 1 , % rax jne . L 3 5 . LBB 2 7 : . LBB 2 8 : movb $ 0 , - 2 5 (% rbp ) movzbl - 2 5 (% rbp ), % eax jmp . L 5 6 . L 3 5 : . LBE 2 8 : . LBE 2 7 : . LBE 2 6 : movb $ 4 1 , - 1 2 6 (% rbp ) movb $ 4 0 , - 1 2 5 (% rbp ) movb $ 9 3 , - 1 2 4 (% rbp ) movb $ 9 1 , - 1 2 3 (% rbp ) movb $ 1 2 5 , - 1 2 2 (% rbp ) movb $ 1 2 3 , - 1 2 1 (% rbp ) leaq - 1 2 6 (% rbp ), % rax movq % rax , % r 8 movl $ 1 , % ecx movl $ 2 , % edx movl $ 3 , % esi leaq type .. map . 6 uint 8 . 7 uint 8 (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 4 8 (% rbp ) leaq type ... 6 0 x . 7 uint 8 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) . LBB 2 9 : movq $ 0 , - 2 4 (% rbp ) . LBB 3 0 : jmp . L 3 7 . L 6 2 : . LBB 3 1 : nop . LBE 3 1 : . LBB 3 2 : . LBB 3 3 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 8 cmpq % rax , - 2 4 (% rbp ) jge . L 3 8 movq - 1 7 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 8 2 (% rbp ) leaq - 8 2 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 uint 8 . 7 uint 8 (% rip ), % rdi call runtime . mapaccess 1 @ PLT movzbl (% rax ), % eax testb % al , % al jne . L 3 9 jmp . L 5 7 . L 3 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : . LBB 3 4 : . LBB 3 5 : . LBB 3 6 : movq - 1 5 2 (% rbp ), % rax testq % rax , % rax sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 4 1 . LBB 3 7 : movq - 1 5 2 (% rbp ), % rax leaq - 1 (% rax ), % rbx movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 4 2 cmpq % rax , % rbx jl . L 5 8 . L 4 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 5 8 : movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 4 cmpq % rax , - 2 4 (% rbp ) jge . L 4 4 movq - 1 7 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 8 1 (% rbp ) leaq - 8 1 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 uint 8 . 7 uint 8 (% rip ), % rdi call runtime . mapaccess 1 @ PLT movq - 1 6 0 (% rbp ), % rdx movq % rbx , % rcx addq % rcx , % rdx movzbl (% rdx ), % edx movzbl (% rax ), % eax cmpb % al , % dl setne % al jmp . L 4 1 . L 4 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : . LBE 3 7 : . LBE 3 6 : testb % al , % al je . L 4 5 . LBB 3 8 : . LBB 3 9 : movb $ 0 , - 2 5 (% rbp ) movzbl - 2 5 (% rbp ), % eax jmp . L 5 6 . L 4 5 : . LBE 3 9 : . LBE 3 8 : . LBE 3 5 : movq - 1 5 2 (% rbp ), % rax leaq - 1 (% rax ), % rdi movq - 1 4 4 (% rbp ), % rax testq % rdi , % rdi js . L 4 6 cmpq % rax , % rdi jg . L 4 6 testq % rdi , % rdi jns . L 4 7 jmp . L 5 9 . L 4 6 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 5 9 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 4 7 : movq - 1 6 0 (% rbp ), % rdx movq - 1 4 4 (% rbp ), % rax movq % rdx , - 1 6 0 (% rbp ) movq % rdi , - 1 5 2 (% rbp ) movq % rax , - 1 4 4 (% rbp ) . LBE 3 4 : jmp . L 4 9 . L 5 7 : . LBB 4 0 : movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rbx movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 5 0 cmpq % rax , - 2 4 (% rbp ) jge . L 5 0 movq - 1 7 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % r 1 2 d leaq 1 (% rbx ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 5 1 jmp . L 6 0 . L 5 0 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : . LBB 4 1 : movq - 1 1 2 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq uint 8 .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) . LBE 4 1 : jmp . L 5 3 . L 6 0 : . LBB 4 2 : movq - 1 1 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rcx , - 1 6 0 (% rbp ) movq % rax , - 1 5 2 (% rbp ) movq % rdx , - 1 4 4 (% rbp ) . L 5 3 : . LBE 4 2 : movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movb % r 1 2 b , (% rax ) . L 4 9 : . LBE 4 0 : . LBE 3 3 : . LBE 3 2 : . LBB 4 3 : addq $ 1 , - 2 4 (% rbp ) . L 3 7 : . LBE 4 3 : movq - 2 4 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jl . L 6 2 . LBE 3 0 : . LBE 2 9 : . LBB 4 4 : movq - 1 5 2 (% rbp ), % rax testq % rax , % rax sete % al movb % al , - 2 5 (% rbp ) movzbl - 2 5 (% rbp ), % eax . L 5 6 : . LBE 4 4 : . LBE 2 5 : addq $ 1 6 0 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 6 0 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 0 movl $ 6 0 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 5 2 , % rsp movq % rdi , - 4 7 2 (% rbp ) movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 4 7 2 (% rbp ) jg . L 2 . LBB 4 : leaq string .. d (% rip ), % rax leaq go .. C 6 (% rip ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . gopanic @ PLT . L 2 : . LBE 4 : . LBE 3 : leaq . LC 5 (% rip ), % rcx movl $ 1 , % ebx movq % rcx , - 4 3 2 (% rbp ) movq % rbx , - 4 2 4 (% rbp ) . LBB 5 : movq $ 1 , - 5 6 (% rbp ) . LBB 6 : jmp . L 3 . L 3 9 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq $ 0 , - 4 6 4 (% rbp ) movq $ 0 , - 4 5 6 (% rbp ) movq $ 0 , - 4 4 8 (% rbp ) movl $ 0 , - 6 0 (% rbp ) movq $ 0 , - 7 2 (% rbp ) . LBB 9 : movq $ 0 , - 8 0 (% rbp ) movl $ 0 , - 8 4 (% rbp ) . LBB 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 4 2 4 (% rbp ), % rax movq % rax , - 5 8 4 (% rbp ) movl $ 0 , % r 1 2 d . LBE 1 2 : jmp . L 4 . L 3 8 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : . LBB 1 5 : movq - 4 2 4 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 5 cmpq % rax , % r 1 2 jge . L 5 movq - 4 3 2 (% rbp ), % rax movq % r 1 2 , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % ecx cmpl $ 1 2 7 , % ecx jle . L 6 jmp . L 3 1 . L 5 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBB 1 6 : leaq 1 (% r 1 2 ), % rax movq % rax , - 4 8 0 (% rbp ) . LBE 1 6 : jmp . L 8 . L 3 1 : . LBB 1 7 : movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rax movq % r 1 2 , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movl % eax , % ecx movq % rdx , % rax movq % rax , % rbx movq % rcx , % rax movq % rbx , % rdx movl % eax , % ecx movq % rdx , - 4 8 0 (% rbp ) . L 8 : . LBE 1 7 : . LBE 1 5 : . LBB 1 8 : movq % r 1 2 , - 8 0 (% rbp ) movl % ecx , - 8 4 (% rbp ) . LBE 1 8 : . LBB 1 9 : . LBB 2 0 : . LBB 2 1 : movl $ 1 , % edx cmpq $ 0 , - 8 0 (% rbp ) sete % al cmpb % al , % dl jne . L 3 6 . LBB 2 2 : movl - 8 4 (% rbp ), % eax movl % eax , - 6 0 (% rbp ) movq $ 1 , - 7 2 (% rbp ) . LBE 2 2 : jmp . L 1 1 . L 3 6 : . LBB 2 3 : nop . LBE 2 3 : movl - 6 0 (% rbp ), % eax cmpl - 8 4 (% rbp ), % eax setne % al cmpb % al , % dl jne . L 3 7 . LBB 2 4 : leaq int .. d (% rip ), % rax movq % rax , - 5 7 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 0 (% rbp ) movq - 4 0 0 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , (% rdx ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 5 6 8 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 5 6 0 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) movl - 6 0 (% rbp ), % eax cltq movq % rax , % rsi movl $ 0 , % edi call runtime . intstring @ PLT movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 4 . LBB 2 5 : movq - 3 9 2 (% rbp ), % rcx movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 5 : jmp . L 1 5 . L 1 4 : . LBB 2 6 : movq - 3 9 2 (% rbp ), % rcx leaq - 3 8 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 5 : . LBE 2 6 : movq - 3 9 2 (% rbp ), % rax movq % rax , - 5 5 2 (% rbp ) movdqa - 5 7 6 (% rbp ), % xmm 0 movups % xmm 0 , - 3 6 8 (% rbp ) movdqa - 5 6 0 (% rbp ), % xmm 1 movups % xmm 1 , - 3 5 2 (% rbp ) leaq - 3 6 8 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 2 , - 2 0 0 (% rbp ) movq $ 2 , - 1 9 2 (% rbp ) leaq . LC 1 6 (% rip ), % rax movq % rax , - 5 1 2 (% rbp ) movq $ 4 , - 5 0 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 9 2 (% rbp ) pushq - 2 0 0 (% rbp ) pushq - 2 0 8 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq % rax , % r 1 2 movq % rdx , % r 1 3 movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 2 8 (% rbp ), % rbx leaq 1 (% rbx ), % rcx movq - 3 2 0 (% rbp ), % rsi movq % rcx , % rdx movq % rsi , % rax cmpq % rax , % rdx jbe . L 1 6 . LBB 2 7 : movq - 3 3 6 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdi movq % rcx , % r 9 movq % rsi , % r 8 movq % rbx , % rcx movq % rax , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) . LBE 2 7 : jmp . L 1 7 . L 1 6 : . LBB 2 8 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 0 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rcx , - 4 5 6 (% rbp ) movq % rdx , - 4 4 8 (% rbp ) . L 1 7 : . LBE 2 8 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 3 6 (% rbp ), % rdx movq % rbx , % rax salq $ 4 , % rax leaq (% rdx ,% rax ), % rcx movq % r 1 3 , % rax movq % rax , 8 (% rcx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 8 . LBB 2 9 : movq % r 1 2 , % rax movq % rax , (% rcx ) jmp . L 1 9 . L 1 8 : . LBE 2 9 : . LBB 3 0 : movq % r 1 2 , % rax movq % rax , % rdx movq % rcx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 9 : . LBE 3 0 : movl - 8 4 (% rbp ), % eax movl % eax , - 6 0 (% rbp ) movq $ 1 , - 7 2 (% rbp ) . LBE 2 4 : jmp . L 1 1 . L 3 7 : . LBB 3 1 : nop . LBE 3 1 : . LBB 3 2 : addq $ 1 , - 7 2 (% rbp ) . LBE 3 2 : nop . L 1 1 : . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBE 1 4 : . LBB 3 3 : movq - 4 8 0 (% rbp ), % r 1 2 . L 4 : . LBE 3 3 : cmpq - 5 8 4 (% rbp ), % r 1 2 jl . L 3 8 . LBE 1 1 : . LBE 1 0 : . LBE 9 : leaq int .. d (% rip ), % rax movq % rax , - 5 4 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 0 4 (% rbp ) movq - 3 0 4 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , (% rdx ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 5 3 6 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 5 2 8 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 9 6 (% rbp ) movl - 6 0 (% rbp ), % eax cltq movq % rax , % rsi movl $ 0 , % edi call runtime . intstring @ PLT movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 2 . LBB 3 4 : movq - 2 9 6 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 3 4 : jmp . L 2 3 . L 2 2 : . LBB 3 5 : movq - 2 9 6 (% rbp ), % rcx leaq - 2 8 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 3 : . LBE 3 5 : movq - 2 9 6 (% rbp ), % rax movq % rax , - 5 2 0 (% rbp ) movdqa - 5 4 4 (% rbp ), % xmm 2 movups % xmm 2 , - 2 7 2 (% rbp ) movdqa - 5 2 8 (% rbp ), % xmm 3 movups % xmm 3 , - 2 5 6 (% rbp ) leaq - 2 7 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 2 , - 1 3 6 (% rbp ) movq $ 2 , - 1 2 8 (% rbp ) leaq . LC 1 6 (% rip ), % rax movq % rax , - 4 9 6 (% rbp ) movq $ 4 , - 4 8 8 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq % rax , % r 1 2 movq % rdx , % r 1 3 movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rbx leaq 1 (% rbx ), % rcx movq - 2 2 4 (% rbp ), % rsi movq % rcx , % rdx movq % rsi , % rax cmpq % rax , % rdx jbe . L 2 4 . LBB 3 6 : movq - 2 4 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdi movq % rcx , % r 9 movq % rsi , % r 8 movq % rbx , % rcx movq % rax , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) . LBE 3 6 : jmp . L 2 5 . L 2 4 : . LBB 3 7 : movq - 2 4 0 (% rbp ), % rax movq - 2 2 4 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rcx , - 4 5 6 (% rbp ) movq % rdx , - 4 4 8 (% rbp ) . L 2 5 : . LBE 3 7 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 4 0 (% rbp ), % rdx movq % rbx , % rax salq $ 4 , % rax leaq (% rdx ,% rax ), % rcx movq % r 1 3 , % rax movq % rax , 8 (% rcx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 6 . LBB 3 8 : movq % r 1 2 , % rax movq % rax , (% rcx ) jmp . L 2 7 . L 2 6 : . LBE 3 8 : . LBB 3 9 : movq % r 1 2 , % rax movq % rax , % rdx movq % rcx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 7 : . LBE 3 9 : leaq . LC 1 7 (% rip ), % r 1 4 movl $ 0 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax subq $ 8 , % rsp pushq - 4 4 8 (% rbp ) pushq - 4 5 6 (% rbp ) pushq - 4 6 4 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call strings . Join @ PLT addq $ 3 2 , % rsp movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) . LBE 8 : . LBB 4 0 : addq $ 1 , - 5 6 (% rbp ) . L 3 : . LBE 4 0 : movq - 5 6 (% rbp ), % rax cmpq - 4 7 2 (% rbp ), % rax jl . L 3 9 . LBE 6 : . LBE 5 : . LBB 4 1 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx . LBE 4 1 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 1 4 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 movl $ 1 4 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 4 1 6 , % rsp movq $ 1 , - 1 4 0 8 (% rbp ) movq $ 3 , - 1 4 0 0 (% rbp ) movq $ 0 , - 1 3 9 2 (% rbp ) movq $ 2 , - 1 3 8 4 (% rbp ) movq $ 1 , - 1 3 7 6 (% rbp ) movq $ 3 , - 1 3 6 8 (% rbp ) movq $ 0 , - 1 3 6 0 (% rbp ) movq $ 2 , - 1 3 5 2 (% rbp ) leaq - 1 4 0 8 (% rbp ), % rax movq % rax , - 1 3 4 4 (% rbp ) movq $ 2 , - 1 3 3 6 (% rbp ) movq $ 2 , - 1 3 2 8 (% rbp ) leaq - 1 3 9 2 (% rbp ), % rax movq % rax , - 1 3 2 0 (% rbp ) movq $ 2 , - 1 3 1 2 (% rbp ) movq $ 2 , - 1 3 0 4 (% rbp ) leaq - 1 3 7 6 (% rbp ), % rax movq % rax , - 1 2 9 6 (% rbp ) movq $ 2 , - 1 2 8 8 (% rbp ) movq $ 2 , - 1 2 8 0 (% rbp ) leaq - 1 3 6 0 (% rbp ), % rax movq % rax , - 1 2 7 2 (% rbp ) movq $ 2 , - 1 2 6 4 (% rbp ) movq $ 2 , - 1 2 5 6 (% rbp ) leaq - 1 3 4 4 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq $ 4 , - 3 2 8 (% rbp ) movq $ 4 , - 3 2 0 (% rbp ) subq $ 8 , % rsp pushq - 3 2 0 (% rbp ) pushq - 3 2 8 (% rbp ) pushq - 3 3 6 (% rbp ) call main . isBipartite addq $ 3 2 , % rsp movl % eax , % ebx leaq bool .. d (% rip ), % rax movq % rax , - 1 4 5 6 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 4 0 (% rbp ) movq - 1 2 4 0 (% rbp ), % rax movb % bl , (% rax ) movq - 1 2 4 0 (% rbp ), % rax movq % rax , - 1 4 4 8 (% rbp ) movdqa - 1 4 5 6 (% rbp ), % xmm 0 movups % xmm 0 , - 1 2 3 2 (% rbp ) leaq - 1 2 3 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 1 , - 2 9 6 (% rbp ) movq $ 1 , - 2 8 8 (% rbp ) leaq - 2 7 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 8 8 (% rbp ) pushq - 2 9 6 (% rbp ) pushq - 3 0 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 4 4 0 (% rbp ) movq % rdx , - 1 4 3 2 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 4 2 4 (% rbp ) movq $ 1 , - 1 1 8 4 (% rbp ) movq $ 2 , - 1 1 7 6 (% rbp ) movq $ 3 , - 1 1 6 8 (% rbp ) movq $ 0 , - 1 1 5 2 (% rbp ) movq $ 2 , - 1 1 4 4 (% rbp ) movq $ 0 , - 1 1 3 6 (% rbp ) movq $ 1 , - 1 1 2 8 (% rbp ) movq $ 3 , - 1 1 2 0 (% rbp ) movq $ 0 , - 1 1 0 4 (% rbp ) movq $ 2 , - 1 0 9 6 (% rbp ) leaq - 1 1 8 4 (% rbp ), % rax movq % rax , - 1 0 8 8 (% rbp ) movq $ 3 , - 1 0 8 0 (% rbp ) movq $ 3 , - 1 0 7 2 (% rbp ) leaq - 1 1 5 2 (% rbp ), % rax movq % rax , - 1 0 6 4 (% rbp ) movq $ 2 , - 1 0 5 6 (% rbp ) movq $ 2 , - 1 0 4 8 (% rbp ) leaq - 1 1 3 6 (% rbp ), % rax movq % rax , - 1 0 4 0 (% rbp ) movq $ 3 , - 1 0 3 2 (% rbp ) movq $ 3 , - 1 0 2 4 (% rbp ) leaq - 1 1 0 4 (% rbp ), % rax movq % rax , - 1 0 1 6 (% rbp ) movq $ 2 , - 1 0 0 8 (% rbp ) movq $ 2 , - 1 0 0 0 (% rbp ) leaq - 1 0 8 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 4 , - 2 3 2 (% rbp ) movq $ 4 , - 2 2 4 (% rbp ) subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) call main . isBipartite addq $ 3 2 , % rsp movl % eax , % ebx leaq bool .. d (% rip ), % r 1 4 leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 8 4 (% rbp ) movq - 9 8 4 (% rbp ), % rax movb % bl , (% rax ) movq - 9 8 4 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 9 7 6 (% rbp ) movq % r 1 5 , - 9 6 8 (% rbp ) leaq - 9 7 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 1 , - 2 0 0 (% rbp ) movq $ 1 , - 1 9 2 (% rbp ) leaq - 1 7 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 9 2 (% rbp ) pushq - 2 0 0 (% rbp ) pushq - 2 0 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 2 1 6 (% rbp ) movq % rdx , - 1 2 0 8 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 1 2 0 0 (% rbp ) movq $ 2 , - 9 2 8 (% rbp ) movq $ 4 , - 9 2 0 (% rbp ) movq $ 6 , - 9 1 2 (% rbp ) movq $ 1 , - 8 9 6 (% rbp ) movq $ 4 , - 8 8 8 (% rbp ) movq $ 8 , - 8 8 0 (% rbp ) movq $ 9 , - 8 7 2 (% rbp ) movq $ 7 , - 8 6 4 (% rbp ) movq $ 8 , - 8 5 6 (% rbp ) movq $ 1 , - 8 4 8 (% rbp ) movq $ 2 , - 8 4 0 (% rbp ) movq $ 8 , - 8 3 2 (% rbp ) movq $ 9 , - 8 2 4 (% rbp ) movq $ 6 , - 8 1 6 (% rbp ) movq $ 9 , - 8 0 8 (% rbp ) movq $ 1 , - 8 0 0 (% rbp ) movq $ 5 , - 7 9 2 (% rbp ) movq $ 7 , - 7 8 4 (% rbp ) movq $ 8 , - 7 7 6 (% rbp ) movq $ 9 , - 7 6 8 (% rbp ) movq $ 3 , - 7 5 2 (% rbp ) movq $ 6 , - 7 4 4 (% rbp ) movq $ 9 , - 7 3 6 (% rbp ) movq $ 2 , - 7 2 0 (% rbp ) movq $ 3 , - 7 1 2 (% rbp ) movq $ 4 , - 7 0 4 (% rbp ) movq $ 6 , - 6 9 6 (% rbp ) movq $ 9 , - 6 8 8 (% rbp ) movq $ 2 , - 6 7 2 (% rbp ) movq $ 4 , - 6 6 4 (% rbp ) movq $ 5 , - 6 5 6 (% rbp ) movq $ 6 , - 6 4 8 (% rbp ) movq $ 7 , - 6 4 0 (% rbp ) movq $ 8 , - 6 3 2 (% rbp ) leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 1 6 (% rbp ) movq - 6 1 6 (% rbp ), % rax movq % rax , - 6 0 8 (% rbp ) movq $ 0 , - 6 0 0 (% rbp ) movq $ 0 , - 5 9 2 (% rbp ) leaq - 9 2 8 (% rbp ), % rax movq % rax , - 5 8 4 (% rbp ) movq $ 3 , - 5 7 6 (% rbp ) movq $ 3 , - 5 6 8 (% rbp ) leaq - 8 9 6 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 4 , - 5 5 2 (% rbp ) movq $ 4 , - 5 4 4 (% rbp ) leaq - 8 6 4 (% rbp ), % rax movq % rax , - 5 3 6 (% rbp ) movq $ 2 , - 5 2 8 (% rbp ) movq $ 2 , - 5 2 0 (% rbp ) leaq - 8 4 8 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) movq $ 4 , - 5 0 4 (% rbp ) movq $ 4 , - 4 9 6 (% rbp ) leaq - 8 1 6 (% rbp ), % rax movq % rax , - 4 8 8 (% rbp ) movq $ 2 , - 4 8 0 (% rbp ) movq $ 2 , - 4 7 2 (% rbp ) leaq - 8 0 0 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq $ 5 , - 4 5 6 (% rbp ) movq $ 5 , - 4 4 8 (% rbp ) leaq - 7 5 2 (% rbp ), % rax movq % rax , - 4 4 0 (% rbp ) movq $ 3 , - 4 3 2 (% rbp ) movq $ 3 , - 4 2 4 (% rbp ) leaq - 7 2 0 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq $ 5 , - 4 0 8 (% rbp ) movq $ 5 , - 4 0 0 (% rbp ) leaq - 6 7 2 (% rbp ), % rax movq % rax , - 3 9 2 (% rbp ) movq $ 6 , - 3 8 4 (% rbp ) movq $ 6 , - 3 7 6 (% rbp ) leaq - 6 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 1 0 , - 1 3 6 (% rbp ) movq $ 1 0 , - 1 2 8 (% rbp ) subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) call main . isBipartite addq $ 3 2 , % rsp movl % eax , % ebx leaq bool .. d (% rip ), % r 1 2 leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 3 6 0 (% rbp ), % rax movb % bl , (% rax ) movq - 3 6 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 3 5 2 (% rbp ) movq % r 1 3 , - 3 4 4 (% rbp ) leaq - 3 5 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 9 6 0 (% rbp ) movq % rdx , - 9 5 2 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 9 4 4 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : leaq - 3 9 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 0 movl $ 3 9 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 4 4 , % rsp movq % rdi , - 3 1 2 (% rbp ) movq $ 1 , - 2 5 6 (% rbp ) movq $ 2 , - 2 4 8 (% rbp ) movq $- 2 , - 2 4 0 (% rbp ) movq $ 3 , - 2 3 2 (% rbp ) movq $- 1 , - 2 2 4 (% rbp ) movq $- 1 , - 2 1 6 (% rbp ) leaq - 2 5 6 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 3 , - 2 8 0 (% rbp ) movq $ 3 , - 2 7 2 (% rbp ) . LBB 9 : movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) . LBB 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 1 2 : jmp . L 1 0 . L 1 9 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : . LBB 1 5 : movq - 2 0 0 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 1 1 cmpq % rax , % r 1 2 jge . L 1 1 movq - 2 0 8 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 1 5 : . LBB 1 6 : movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) . LBE 1 6 : . LBB 1 7 : movq - 2 9 6 (% rbp ), % rdx movq - 3 0 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . leetcode . getSum movq % rax , - 5 6 (% rbp ) . LBB 1 8 : movq - 3 0 4 (% rbp ), % rdx movq - 2 9 6 (% rbp ), % rax addq % rdx , % rax cmpq % rax , - 5 6 (% rbp ) jne . L 1 2 jmp . L 1 3 . L 1 1 : . LBE 1 8 : . LBE 1 7 : . LBB 2 3 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : . LBE 2 3 : . LBB 2 4 : . LBB 2 2 : . LBB 1 9 : leaq int .. d (% rip ), % rbx movq % rbx , - 3 8 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq - 3 0 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 3 7 6 (% rbp ) movq % rbx , - 3 6 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 7 6 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 7 6 (% rbp ), % rax movq % rax , - 3 6 0 (% rbp ) movq % rbx , - 3 5 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 6 8 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) movq % rbx , - 3 3 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 0 (% rbp ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rax movq - 1 6 0 (% rbp ), % rdx addq % rcx , % rax movq % rax , (% rdx ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 3 2 8 (% rbp ) leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movdqa - 3 8 4 (% rbp ), % xmm 0 movups % xmm 0 , - 1 4 4 (% rbp ) movdqa - 3 6 8 (% rbp ), % xmm 1 movups % xmm 1 , - 1 2 8 (% rbp ) movdqa - 3 5 2 (% rbp ), % xmm 2 movups % xmm 2 , - 1 1 2 (% rbp ) movdqa - 3 3 6 (% rbp ), % xmm 3 movups % xmm 3 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 4 . LBB 2 0 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) . LBE 2 0 : jmp . L 1 5 . L 1 4 : . LBB 2 1 : movq - 1 5 2 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 5 : . LBE 2 1 : movq - 1 5 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 4 , - 7 2 (% rbp ) movq $ 4 , - 6 4 (% rbp ) leaq . LC 5 (% rip ), % r 1 4 movl $ 3 3 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 3 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 1 3 : . LBE 1 9 : . LBE 2 2 : . LBE 2 4 : . LBE 1 4 : . LBB 2 5 : addq $ 1 , % r 1 2 . L 1 0 : . LBE 2 5 : cmpq % r 1 3 , % r 1 2 jl . L 1 9 . LBE 1 1 : . LBE 1 0 : . LBE 9 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 9 movl $ 3 4 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 2 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 9 6 , % rsp movq % rdi , - 3 2 8 (% rbp ) movb % sil , - 3 2 9 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) . LBB 2 5 : leaq - 2 5 6 (% rbp ), % rax movq % rax , % rdi call time . Now @ PLT movq - 3 2 8 (% rbp ), % rax movq 5 6 (% rax ), % rax movq % rax , % rdi call os . File . Close @ PLT movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) . LBB 2 6 : movq - 2 7 2 (% rbp ), % rax testq % rax , % rax je . L 1 9 . LBB 2 7 : . LBB 2 8 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx jmp . L 2 8 . L 1 9 : . LBE 2 8 : . LBE 2 7 : . LBE 2 6 : leaq - 2 5 6 (% rbp ), % rax movq % rax , % rdi call time . Time . UnixNano @ PLT movq % rax , % rbx leaq int 6 4 .. d (% rip ), % r 1 4 leaq int 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movabsq $ 4 8 3 5 7 0 3 2 7 8 4 5 8 5 1 6 6 9 9 , % rdx movq % rbx , % rax imulq % rdx movq % rdx , % rax sarq $ 1 8 , % rax sarq $ 6 3 , % rbx movq % rbx , % rcx subq % rcx , % rax movq % rax , % rdx movq - 2 0 0 (% rbp ), % rax movq % rdx , (% rax ) movq - 2 0 0 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 1 9 2 (% rbp ) movq % r 1 5 , - 1 8 4 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq . LC 4 2 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq - 3 2 8 (% rbp ), % rcx movq 1 6 (% rcx ), % rbx movq 8 (% rcx ), % rcx movq % rcx , - 1 7 6 (% rbp ) movq % rbx , - 1 6 8 (% rbp ) movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq - 3 2 8 (% rbp ), % rcx movq 8 (% rcx ), % rdi movq 1 6 (% rcx ), % rsi movq % rdx , % rcx movq % rax , % rdx call os . Rename @ PLT movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) . LBB 2 9 : movq - 2 7 2 (% rbp ), % rax testq % rax , % rax je . L 2 1 . LBB 3 0 : . LBB 3 1 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx jmp . L 2 8 . L 2 1 : . LBE 3 1 : . LBE 3 0 : . LBE 2 9 : leaq - 8 0 (% rbp ), % rdi movq - 3 2 8 (% rbp ), % rax movq 8 (% rax ), % rdx movq 1 6 (% rax ), % rax movl $ 4 2 0 , % r 8 d movl $ 5 7 7 , % ecx movq % rdx , % rsi movq % rax , % rdx call os . OpenFile @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) . LBB 3 2 : movq - 2 7 2 (% rbp ), % rax testq % rax , % rax je . L 2 2 . LBB 3 3 : . LBB 3 4 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx jmp . L 2 8 . L 2 2 : . LBE 3 4 : . LBE 3 3 : . LBE 3 2 : movq - 3 2 8 (% rbp ), % rax addq $ 5 6 , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 3 . LBB 3 5 : movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 2 4 . L 2 3 : . LBE 3 5 : . LBB 3 6 : movq - 5 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 4 : . LBE 3 6 : movq - 3 2 8 (% rbp ), % rcx movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq 4 8 (% rcx ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 2 8 (% rbp ), % rax addq $ 3 2 , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 5 . LBB 3 7 : movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 2 4 0 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) jmp . L 2 6 . L 2 5 : . LBE 3 7 : . LBB 3 8 : leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq time . Time .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 6 : . LBE 3 8 : movq - 3 2 8 (% rbp ), % rax movq $ 0 , 2 4 (% rax ) . LBB 3 9 : movq - 3 2 8 (% rbp ), % rax movq 6 4 (% rax ), % rax testq % rax , % rax je . L 2 7 . LBB 4 0 : movq - 3 2 8 (% rbp ), % rax movq 6 4 (% rax ), % r 8 movq - 3 2 8 (% rbp ), % rax movq 6 4 (% rax ), % rax movq (% rax ), % rax movq % rax , % r 9 movq - 3 2 8 (% rbp ), % rax movq 7 2 (% rax ), % rcx movq 8 0 (% rax ), % rdi movzbl - 3 2 9 (% rbp ), % edx movq - 2 8 8 (% rbp ), % rsi movq - 2 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 3 0 4 (% rbp ) pushq - 3 1 2 (% rbp ) pushq - 3 2 0 (% rbp ) movq % r 8 , % r 1 0 movq % rdi , % r 8 movq % rsi , % rdi movq % rax , % rsi call *% r 9 . LVL 3 : addq $ 3 2 , % rsp . L 2 7 : . LBE 4 0 : . LBE 3 9 : . LBB 4 1 : movq $ 0 , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx . L 2 8 : . LBE 4 1 : . LBE 2 5 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 7 movl $ 2 4 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 subq $ 2 0 8 , % rsp movq % rdi , - 2 3 2 (% rbp ) leaq . LC 1 9 (% rip ), % rax movl $ 5 5 , % edx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 3 , - 1 6 8 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq $ 1 , - 2 1 6 (% rbp ) movq $ 1 , - 2 0 8 (% rbp ) movq - 1 9 2 (% rbp ), % rdx movq - 1 8 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 0 8 (% rbp ) pushq - 2 1 6 (% rbp ) pushq - 2 2 4 (% rbp ) movq % rdx , % rdi movq % rax , % rsi call go . problem 8 1 9 . mostCommonWord addq $ 3 2 , % rsp movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq string .. d (% rip ), % r 1 4 leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq % r 1 2 , - 1 2 8 (% rbp ) movq % r 1 3 , - 1 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 5 . LBB 5 0 : movq - 1 3 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 5 0 : jmp . L 3 6 . L 3 5 : . LBB 5 1 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 6 : . LBE 5 1 : movq - 1 3 6 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 1 1 2 (% rbp ) movq % r 1 5 , - 1 0 4 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) leaq - 3 2 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 2 movl $ 8 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 2 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 7 2 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 3 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jne . L 4 . LBB 7 : . LBB 8 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 5 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 3 1 . L 4 : . LBE 8 : . LBE 7 : . LBE 6 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 8 0 (% rbp ) movq % rbx , - 7 2 (% rbp ) movq % rbx , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rax testq % rax , % rax jg . L 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 6 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 7 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 7 : movq 1 6 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax movq (% rdx ), % rdx movq % rdx , (% rax ) movq - 7 2 (% rbp ), % rax testq % rax , % rax jg . L 8 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 8 : movq - 8 0 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 2 4 (% rbp ) . LBB 9 : movq $ 1 , - 3 2 (% rbp ) . LBB 1 0 : jmp . L 9 . L 4 1 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 1 0 cmpq % rdx , % rax jl . L 3 2 . L 1 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 1 2 cmpq % rdx , - 3 2 (% rbp ) jl . L 3 3 . L 1 2 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq - 8 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax addq % rdx , % rax movq % rax , - 4 8 (% rbp ) . LBB 1 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 4 cmpq % rax , - 3 2 (% rbp ) jl . L 3 4 . L 1 4 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 4 8 (% rbp ) jle . L 1 6 . LBB 1 4 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 7 cmpq % rax , - 3 2 (% rbp ) jl . L 3 5 . L 1 7 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 8 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 4 8 (% rbp ), % rax movq % rax , (% rdx ) . LBE 1 4 : jmp . L 1 9 . L 1 6 : . LBB 1 5 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 0 cmpq % rax , - 3 2 (% rbp ) jl . L 3 6 . L 2 0 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 2 cmpq % rax , - 3 2 (% rbp ) jl . L 3 7 . L 2 2 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq - 8 0 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . L 1 9 : . LBE 1 5 : . LBE 1 3 : . LBB 1 6 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 4 cmpq % rax , - 3 2 (% rbp ) jl . L 3 8 . L 2 4 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 8 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 2 4 (% rbp ) jge . L 2 6 . LBB 1 7 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 7 cmpq % rax , - 3 2 (% rbp ) jl . L 3 9 . L 2 7 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 8 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 2 4 (% rbp ) . L 2 6 : . LBE 1 7 : . LBE 1 6 : . LBE 1 2 : . LBB 1 8 : addq $ 1 , - 3 2 (% rbp ) . L 9 : . LBE 1 8 : movq 2 4 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) jl . L 4 1 . LBE 1 0 : . LBE 9 : . LBB 1 9 : movq - 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 3 1 : . LBE 1 9 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 4 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 3 6 , % rsp movq % rdi , - 1 5 2 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 1 5 2 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : leaq . LC 3 1 (% rip ), % rcx movl $ 4 , % ebx movq % rcx , - 1 2 8 (% rbp ) movq % rbx , - 1 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx jmp . L 1 0 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : leaq . LC 0 (% rip ), % rax movl $ 0 , % edx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 6 : . LBB 7 : jmp . L 4 . L 1 3 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 1 5 2 (% rbp ), % rcx movabsq $ 2 3 6 1 1 8 3 2 4 1 4 3 4 8 2 2 6 0 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 7 , % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax imulq $ 1 0 0 0 , % rax , % rdx movq % rcx , % rax subq % rdx , % rax testq % rax , % rax je . L 5 . LBB 1 1 : movq - 1 5 2 (% rbp ), % rcx movabsq $ 2 3 6 1 1 8 3 2 4 1 4 3 4 8 2 2 6 0 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 7 , % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax imulq $ 1 0 0 0 , % rax , % rdx movq % rcx , % rax subq % rdx , % rax movq % rax , % rdi call go . problem 0 2 7 3 . lessK movq 8 + go . problem 0 2 7 3 . thousand (% rip ), % rcx cmpq $ 0 , - 4 0 (% rbp ) js . L 6 cmpq % rcx , - 4 0 (% rbp ) jl . L 1 1 . L 6 : movq - 4 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 1 : movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq go . problem 0 2 7 3 . thousand (% rip ), % rdx movq - 4 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) leaq . LC 3 2 (% rip ), % rax movq % rax , - 8 0 (% rbp ) movq $ 1 , - 7 2 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movl $ 4 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) . L 5 : . LBE 1 1 : . LBE 1 0 : movq - 1 5 2 (% rbp ), % rcx movabsq $ 2 3 6 1 1 8 3 2 4 1 4 3 4 8 2 2 6 0 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 7 , % rax sarq $ 6 3 , % rcx movq % rcx , % rdx subq % rdx , % rax movq % rax , - 1 5 2 (% rbp ) addq $ 1 , - 4 0 (% rbp ) . L 4 : . LBE 9 : cmpq $ 0 , - 1 5 2 (% rbp ) jg . L 1 3 . LBE 7 : . LBE 6 : . LBB 1 2 : leaq . LC 3 2 (% rip ), % r 1 2 movl $ 1 , % r 1 3 d movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rax movq % r 1 2 , % rdx movq % r 1 3 , % rcx movq % rsi , % rdi movq % rax , % rsi call strings . TrimRight @ PLT movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx . L 1 0 : . LBE 1 2 : . LBE 2 : addq $ 1 3 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 8 movl $ 2 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 1 6 , % rsp movq % rdi , - 2 3 2 (% rbp ) movl $ 1 0 , % edi call go . circularbuffer . NewCircularBuffer movq % rax , - 7 2 (% rbp ) . LBB 9 : movq $ 0 , - 5 6 (% rbp ) . LBB 1 0 : jmp . L 2 1 . L 3 6 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq - 2 1 6 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 1 6 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq - 7 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . circularbuffer . CircularBuffer . NBPush . LBE 1 2 : . LBB 1 3 : addq $ 1 , - 5 6 (% rbp ) . L 2 1 : . LBE 1 3 : cmpq $ 3 , - 5 6 (% rbp ) jle . L 3 6 . LBE 1 0 : . LBE 9 : . LBB 1 4 : movq $ 0 , - 6 4 (% rbp ) . LBB 1 5 : jmp . L 2 4 . L 3 7 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : movq - 7 2 (% rbp ), % rax movq % rax , % rdi call go . circularbuffer . CircularBuffer . Get movq % rax , % rsi leaq int .. d (% rip ), % rcx cmpq % rcx , % rsi je . L 2 5 leaq type .. interface . 4 . 5 (% rip ), % rdx movq % rax , % rsi leaq int .. d (% rip ), % rdi call runtime . panicdottype @ PLT . L 2 5 : movq % rdx , % rax movq (% rax ), % rax movq % rax , - 8 0 (% rbp ) . LBB 1 8 : movq - 6 4 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax je . L 2 6 . LBB 1 9 : leaq int .. d (% rip ), % rax movq % rax , - 2 5 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 8 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 8 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 2 4 8 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movdqa - 2 5 6 (% rbp ), % xmm 0 movups % xmm 0 , - 1 9 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 7 . LBB 2 0 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 0 : jmp . L 2 8 . L 2 7 : . LBB 2 1 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 8 : . LBE 2 1 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 1 , - 1 3 6 (% rbp ) movq $ 1 , - 1 2 8 (% rbp ) movq - 2 3 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rax , % rdi call testing . T . Error .. stub @ PLT addq $ 3 2 , % rsp . L 2 6 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBB 2 2 : addq $ 1 , - 6 4 (% rbp ) . L 2 4 : . LBE 2 2 : cmpq $ 3 , - 6 4 (% rbp ) jle . L 3 7 . LBE 1 5 : . LBE 1 4 : . LBB 2 3 : movq - 7 2 (% rbp ), % rax movq % rax , % rdi call go . circularbuffer . CircularBuffer . verifyIsEmpty xorl $ 1 , % eax testb % al , % al je . L 2 0 . LBB 2 4 : leaq string .. d (% rip ), % r 1 4 leaq go .. C 1 6 (% rip ), % r 1 5 leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq % r 1 4 , - 1 6 0 (% rbp ) movq % r 1 5 , - 1 5 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 2 . LBB 2 5 : movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 5 : jmp . L 3 3 . L 3 2 : . LBB 2 6 : movq - 1 6 8 (% rbp ), % rax leaq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 3 : . LBE 2 6 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) movq - 2 3 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call testing . T . Error .. stub @ PLT addq $ 3 2 , % rsp . L 2 0 : . LBE 2 4 : . LBE 2 3 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 3 movl $ 1 8 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 6 0 , % rsp movq % rdi , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) . LBB 2 : movq $ 1 , - 2 4 (% rbp ) . LBB 3 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 3 2 (% rbp ) . LBB 4 : jmp . L 2 . L 2 2 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 cmpq % rax , - 3 2 (% rbp ) jl . L 1 8 . L 3 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movq % rax , - 4 0 (% rbp ) . LBB 7 : cmpq $ 9 , - 4 0 (% rbp ) jg . L 5 . LBB 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 6 cmpq % rax , - 3 2 (% rbp ) jl . L 1 9 . L 6 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 4 0 (% rbp ), % rax movq % rax , (% rdx ) . LBB 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 5 : . LBE 9 : . LBE 8 : . LBE 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 9 cmpq % rax , - 3 2 (% rbp ) jl . L 2 0 . L 9 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : movq - 4 0 (% rbp ), % rcx movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 2 , % rax movq % rcx , % rsi sarq $ 6 3 , % rsi subq % rsi , % rax movq % rax , % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax subq % rax , % rcx movq % rcx , % rdx movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq % rdx , (% rax ) movq $ 1 , - 2 4 (% rbp ) . LBE 6 : . LBB 1 0 : subq $ 1 , - 3 2 (% rbp ) . L 2 : . LBE 1 0 : cmpq $ 0 , - 3 2 (% rbp ) jns . L 2 2 . LBE 4 : . LBE 3 : . LBB 1 1 : cmpq $ 1 , - 2 4 (% rbp ) jne . L 1 3 . LBB 1 2 : . LBB 1 3 : leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rbx movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % r 1 2 leaq (% rbx ,% r 1 2 ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 4 movq - 1 2 8 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) jmp . L 1 5 . L 1 4 : movq - 1 2 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rdx movq % rcx , - 1 2 8 (% rbp ) movq % rax , - 1 2 0 (% rbp ) movq % rdx , - 1 1 2 (% rbp ) . L 1 5 : movq % r 1 2 , % rax leaq 0 (,% rax , 8 ), % rdx movq - 9 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rcx movq % rbx , % rsi salq $ 3 , % rsi addq % rsi , % rcx movq % rax , % rsi movq % rcx , % rdi call memmove @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 1 3 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 4 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 1 4 : . LBE 2 : movq - 1 6 8 (% rbp ), % rax addq $ 1 6 0 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 1 : leaq - 9 6 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 4 movl $ 9 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 4 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 2 0 , % rsp movq % rdi , - 8 5 6 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 0 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq - 7 2 0 (% rbp ), % rax movq % rax , - 6 8 8 (% rbp ) movq $ 4 , - 6 8 0 (% rbp ) movq $ 4 , - 6 7 2 (% rbp ) movq $ 3 , - 6 6 4 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 1 2 (% rbp ) movq - 7 1 2 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 2 , 8 (% rax ) movq - 7 1 2 (% rbp ), % rax movq % rax , - 6 5 6 (% rbp ) movq $ 2 , - 6 4 8 (% rbp ) movq $ 2 , - 6 4 0 (% rbp ) leaq type ... 6 8 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 0 4 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 2 , 2 4 (% rax ) movq $ 3 , 3 2 (% rax ) movq $ 0 , 4 0 (% rax ) movq $ 4 , 4 8 (% rax ) movq $ 2 , 5 6 (% rax ) movq - 7 0 4 (% rbp ), % rax movq % rax , - 6 3 2 (% rbp ) movq $ 8 , - 6 2 4 (% rbp ) movq $ 8 , - 6 1 6 (% rbp ) movq $ 2 , - 6 0 8 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 9 6 (% rbp ) movq - 6 9 6 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq $ 4 , 3 2 (% rax ) movq - 6 9 6 (% rbp ), % rax movq % rax , - 6 0 0 (% rbp ) movq $ 5 , - 5 9 2 (% rbp ) movq $ 5 , - 5 8 4 (% rbp ) leaq - 6 8 8 (% rbp ), % rax movq % rax , - 7 5 2 (% rbp ) movq $ 2 , - 7 4 4 (% rbp ) movq $ 2 , - 7 3 6 (% rbp ) . LBB 1 9 : movq $ 0 , - 8 4 8 (% rbp ) movq $ 0 , - 8 4 0 (% rbp ) movq $ 0 , - 8 3 2 (% rbp ) movq $ 0 , - 8 2 4 (% rbp ) movq $ 0 , - 8 1 6 (% rbp ) movq $ 0 , - 8 0 8 (% rbp ) movq $ 0 , - 8 0 0 (% rbp ) . LBB 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq - 5 0 4 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 2 2 : jmp . L 1 6 . L 4 3 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movq - 5 0 4 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 1 7 cmpq % rax , % r 1 2 jge . L 1 7 movq - 5 1 2 (% rbp ), % rcx movq % r 1 2 , % rdx movq % rdx , % rax salq $ 3 , % rax subq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq 4 8 (% rcx ), % rax movq % rax , - 5 2 8 (% rbp ) . LBE 2 5 : . LBB 2 6 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 8 4 8 (% rbp ) movq % rdx , - 8 4 0 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 8 3 2 (% rbp ) movq % rdx , - 8 2 4 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 8 1 6 (% rbp ) movq % rdx , - 8 0 8 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq % rax , - 8 0 0 (% rbp ) . LBE 2 6 : . LBB 2 7 : movq - 8 4 0 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 7 8 4 (% rbp ) movq % rbx , - 7 7 6 (% rbp ) movq % rbx , - 7 6 8 (% rbp ) movq - 8 4 8 (% rbp ), % rax movq - 8 4 0 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 8 3 2 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq - 7 7 6 (% rbp ), % rdx movq - 4 0 8 (% rbp ), % rax cmpq % rdx , % rax cmovg % rdx , % rax leaq 0 (,% rax , 8 ), % rdx movq - 4 1 6 (% rbp ), % rcx movq - 7 8 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memmove @ PLT movq - 8 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 3 2 (% rbp ) pushq - 8 4 0 (% rbp ) pushq - 8 4 8 (% rbp ) movq % rax , % rdi call go . leetcode . removeElement addq $ 3 2 , % rsp movq % rax , - 5 6 (% rbp ) . LBB 2 8 : movq - 8 4 8 (% rbp ), % rax movq - 8 4 0 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 8 3 2 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 6 8 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) jns . L 1 8 jmp . L 1 9 . L 1 7 : . LBE 2 8 : . LBE 2 7 : . LBB 4 3 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : . LBE 4 3 : . LBB 4 4 : . LBB 4 2 : cmpq % rdx , - 5 6 (% rbp ) jg . L 1 9 cmpq $ 0 , - 5 6 (% rbp ) jns . L 2 0 jmp . L 4 0 . L 1 9 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAcap @ PLT . L 4 0 : movq - 5 6 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 2 0 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 8 9 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 2 . LBB 2 9 : movq - 3 2 8 (% rbp ), % rcx movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 0 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 9 : jmp . L 2 3 . L 2 2 : . LBB 3 0 : movq - 3 2 8 (% rbp ), % rcx leaq - 3 2 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 3 : . LBE 3 0 : movq - 3 2 8 (% rbp ), % rax movq % rax , - 8 8 8 (% rbp ) leaq type ... 6 . 7 int (% rip ), % r 1 4 leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 4 . LBB 3 1 : movq - 3 6 0 (% rbp ), % rcx movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 3 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 1 : jmp . L 2 5 . L 2 4 : . LBB 3 2 : movq - 3 6 0 (% rbp ), % rcx leaq - 3 5 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 5 : . LBE 3 2 : movq - 3 6 0 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rcx , % rsi movq % rdx , % rax movq - 8 9 6 (% rbp ), % rdx movq - 8 8 8 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT xorl $ 1 , % eax testb % al , % al je . L 2 6 . LBB 3 3 : movq - 8 4 8 (% rbp ), % rax movq - 8 4 0 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 8 3 2 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 7 2 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 2 7 cmpq % rdx , - 5 6 (% rbp ) jg . L 2 7 cmpq $ 0 , - 5 6 (% rbp ) jns . L 2 8 jmp . L 4 1 . L 2 7 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAcap @ PLT . L 4 1 : movq - 5 6 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 2 8 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 9 6 0 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 7 6 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 0 . LBB 3 4 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 4 : jmp . L 3 1 . L 3 0 : . LBB 3 5 : movq - 2 6 4 (% rbp ), % rcx leaq - 2 5 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 1 : . LBE 3 5 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 9 5 2 (% rbp ) leaq int .. d (% rip ), % rax movq % rax , - 9 4 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 2 4 (% rbp ) movq - 2 2 4 (% rbp ), % rdx movq - 8 2 4 (% rbp ), % rax movq % rax , (% rdx ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 9 3 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 9 2 8 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , - 2 0 0 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 2 . LBB 3 6 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 9 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 6 : jmp . L 3 3 . L 3 2 : . LBB 3 7 : movq - 2 1 6 (% rbp ), % rcx leaq - 2 0 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 3 : . LBE 3 7 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 9 2 0 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 9 1 2 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 4 . LBB 3 8 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 8 : jmp . L 3 5 . L 3 4 : . LBB 3 9 : movq - 1 8 4 (% rbp ), % rcx leaq - 1 7 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 5 : . LBE 3 9 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 9 0 4 (% rbp ) leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movdqa - 9 6 0 (% rbp ), % xmm 0 movups % xmm 0 , - 1 4 4 (% rbp ) movdqa - 9 4 4 (% rbp ), % xmm 1 movups % xmm 1 , - 1 2 8 (% rbp ) movdqa - 9 2 8 (% rbp ), % xmm 2 movups % xmm 2 , - 1 1 2 (% rbp ) movdqa - 9 1 2 (% rbp ), % xmm 3 movups % xmm 3 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 6 . LBB 4 0 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) . LBE 4 0 : jmp . L 3 7 . L 3 6 : . LBB 4 1 : movq - 1 5 2 (% rbp ), % rcx leaq - 1 4 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 7 : . LBE 4 1 : movq - 1 5 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 4 , - 7 2 (% rbp ) movq $ 4 , - 6 4 (% rbp ) leaq . LC 1 0 (% rip ), % rax movq % rax , - 8 8 0 (% rbp ) movq $ 4 0 , - 8 7 2 (% rbp ) movq - 8 8 0 (% rbp ), % rax movq - 8 7 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 8 5 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 2 6 : . LBE 3 3 : . LBE 4 2 : . LBE 4 4 : . LBE 2 4 : . LBB 4 5 : addq $ 1 , % r 1 2 . L 1 6 : . LBE 4 5 : cmpq % r 1 3 , % r 1 2 jl . L 4 3 . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 8 3 movl $ 2 4 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 8 3 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 3 2 , % rsp movq 2 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 4 0 (% rbp ) movq % rbx , - 2 3 2 (% rbp ) movq % rbx , - 2 2 4 (% rbp ) . LBB 4 5 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 6 : jmp . L 4 7 . L 8 0 : . LBB 4 7 : nop . LBE 4 7 : . LBB 4 8 : movq - 4 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 2 3 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 8 cmpq % rax , - 2 4 (% rbp ) jl . L 7 1 . L 4 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 1 : movq - 2 4 0 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 2 0 8 (% rbp ) movq % rbx , - 2 0 0 (% rbp ) movq % rbx , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 9 2 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 0 . LBB 4 9 : movq - 2 0 8 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 5 1 . L 5 0 : . LBE 4 9 : . LBB 5 0 : movq - 2 0 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 5 1 : . LBE 5 0 : movq - 2 3 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 5 2 cmpq % rax , - 2 4 (% rbp ) jl . L 7 2 . L 5 2 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 5 4 cmpq % rax , - 2 4 (% rbp ) jl . L 7 3 . L 5 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 3 : movq - 2 4 0 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx cmpq % rax , % rdx cmovle % rdx , % rax leaq 0 (,% rax , 8 ), % rdx movq - 1 4 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memmove @ PLT . LBE 4 8 : . LBB 5 1 : addq $ 1 , - 2 4 (% rbp ) . L 4 7 : . LBE 5 1 : movq - 2 4 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 8 0 . LBE 4 6 : . LBE 4 5 : . LBB 5 2 : movq $ 0 , - 3 2 (% rbp ) . LBB 5 3 : jmp . L 5 8 . L 8 2 : . LBB 5 4 : nop . LBE 5 4 : . LBB 5 5 : . LBB 5 6 : movq $ 0 , - 4 0 (% rbp ) . LBB 5 7 : jmp . L 5 9 . L 8 1 : . LBB 5 8 : nop . LBE 5 8 : . LBB 5 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 6 0 cmpq % rax , - 4 0 (% rbp ) jl . L 7 5 . L 6 0 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 5 : movq 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 4 8 (% rbp ), % rax subq - 3 2 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 1 0 4 (% rbp ), % rax testq % rdx , % rdx js . L 6 2 cmpq % rax , % rdx jl . L 7 6 . L 6 2 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 6 : movq - 2 3 2 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 6 4 cmpq % rax , - 3 2 (% rbp ) jl . L 7 7 . L 6 4 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 7 : movq - 2 4 0 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 8 0 (% rbp ) movq % rbx , - 7 2 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 6 6 cmpq % rax , - 4 0 (% rbp ) jge . L 6 6 movq - 8 0 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq - 1 1 2 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . LBE 5 9 : . LBB 6 0 : addq $ 1 , - 4 0 (% rbp ) jmp . L 5 9 . L 6 6 : . LBE 6 0 : . LBB 6 1 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 9 : . LBE 6 1 : movq - 4 0 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 8 1 . LBE 5 7 : . LBE 5 6 : . LBE 5 5 : . LBB 6 2 : addq $ 1 , - 3 2 (% rbp ) . L 5 8 : . LBE 6 2 : movq - 3 2 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 8 2 . LBE 5 3 : . LBE 5 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 9 movl $ 7 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 2 9 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 1 6 : movabsq $- 9 2 2 3 3 7 2 0 3 6 8 5 4 7 7 5 8 0 8 , % rax movq % rax , - 8 (% rbp ) movq % rax , - 1 6 (% rbp ) movq % rax , - 2 4 (% rbp ) . LBB 1 7 : movq $ 0 , - 4 0 (% rbp ) . LBB 1 8 : . LBB 1 9 : . LBB 2 0 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rcx movl $ 0 , % eax . LBE 2 0 : jmp . L 1 4 . L 2 8 : . LBB 2 1 : nop . LBE 2 1 : . LBB 2 2 : . LBB 2 3 : movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 1 5 cmpq % rdx , % rax jge . L 1 5 movq - 6 4 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 2 3 : . LBB 2 4 : movq % rdx , - 4 0 (% rbp ) . LBE 2 4 : . LBB 2 5 : . LBB 2 6 : movq - 4 0 (% rbp ), % rdx cmpq - 8 (% rbp ), % rdx jg . L 1 6 jmp . L 2 6 . L 1 5 : . LBE 2 6 : . LBE 2 5 : . LBB 3 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : . LBE 3 9 : . LBB 4 0 : . LBB 3 8 : . LBB 2 7 : movq - 1 6 (% rbp ), % rdx movq % rdx , - 2 4 (% rbp ) movq - 8 (% rbp ), % rdx movq % rdx , - 1 6 (% rbp ) movq - 4 0 (% rbp ), % rdx movq % rdx , - 8 (% rbp ) . LBE 2 7 : jmp . L 1 8 . L 2 6 : . LBB 2 8 : . LBB 2 9 : . LBB 3 0 : movq - 4 0 (% rbp ), % rdx cmpq - 8 (% rbp ), % rdx setl % dl testb % dl , % dl je . L 1 9 . LBB 3 1 : movq - 4 0 (% rbp ), % rdx cmpq - 1 6 (% rbp ), % rdx setg % dl . L 1 9 : . LBE 3 1 : . LBE 3 0 : testb % dl , % dl je . L 2 0 . LBB 3 2 : movq - 1 6 (% rbp ), % rdx movq % rdx , - 2 4 (% rbp ) movq - 4 0 (% rbp ), % rdx movq % rdx , - 1 6 (% rbp ) . LBE 3 2 : jmp . L 1 8 . L 2 0 : . LBB 3 3 : . LBB 3 4 : . LBB 3 5 : movq - 4 0 (% rbp ), % rdx cmpq - 1 6 (% rbp ), % rdx setl % dl testb % dl , % dl je . L 2 1 . LBB 3 6 : movq - 4 0 (% rbp ), % rdx cmpq - 2 4 (% rbp ), % rdx setg % dl . L 2 1 : . LBE 3 6 : . LBE 3 5 : testb % dl , % dl je . L 1 8 . LBB 3 7 : movq - 4 0 (% rbp ), % rdx movq % rdx , - 2 4 (% rbp ) . L 1 8 : . LBE 3 7 : . LBE 3 4 : . LBE 3 3 : . LBE 2 9 : . LBE 2 8 : . LBE 3 8 : . LBE 4 0 : . LBE 2 2 : . LBB 4 1 : addq $ 1 , % rax . L 1 4 : . LBE 4 1 : cmpq % rcx , % rax jl . L 2 8 . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBB 4 2 : movabsq $- 9 2 2 3 3 7 2 0 3 6 8 5 4 7 7 5 8 0 8 , % rax cmpq % rax , - 2 4 (% rbp ) jne . L 2 4 . LBB 4 3 : . LBB 4 4 : movq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 2 5 . L 2 4 : . LBE 4 4 : . LBE 4 3 : . LBE 4 2 : . LBB 4 5 : movq - 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 2 5 : . LBE 4 5 : . LBE 1 6 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 9 movl $ 1 5 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 2 0 , % rsp movq % rdi , - 1 3 6 (% rbp ) movq % rsi , - 1 4 4 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) . LBB 2 : leaq go . problem 0 9 7 3 . kClosest .. func 1 (% rip ), % rdx leaq 1 6 (% rbp ), % rcx movq $ 0 , - 6 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) leaq - 6 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax movq % rdx , (% rax ) movq % rcx , 8 (% rax ) movq - 4 0 (% rbp ), % rbx leaq type ... 6 . 7 . 6 . 7 int (% rip ), % r 1 2 leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 (% rbp ) movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 3 : movq - 1 0 4 (% rbp ), % rcx movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 8 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 : jmp . L 3 . L 2 : . LBB 4 : movq - 1 0 4 (% rbp ), % rax leaq - 9 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 4 : movq - 1 0 4 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call sort . Slice @ PLT . LBB 5 : movq 3 2 (% rbp ), % rax cmpq $ 0 , - 1 4 4 (% rbp ) js . L 4 cmpq % rax , - 1 4 4 (% rbp ) jg . L 4 cmpq $ 0 , - 1 4 4 (% rbp ) jns . L 5 jmp . L 8 . L 4 : movq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 8 : movq - 1 4 4 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 5 : movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax movq % rdx , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rdx movq % rdx , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq - 1 3 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 5 : . LBE 2 : movq - 1 3 6 (% rbp ), % rax addq $ 1 2 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 1 movl $ 2 1 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 9 2 , % rsp movq % rdi , - 2 0 0 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) . LBB 2 : movq $ 1 , - 2 4 (% rbp ) movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 3 2 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 2 0 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 3 cmpq % rax , - 3 2 (% rbp ) jl . L 1 7 . L 3 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movq % rax , - 4 0 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 5 cmpq % rax , - 3 2 (% rbp ) jl . L 1 8 . L 5 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : movq - 4 0 (% rbp ), % rcx movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 2 , % rax movq % rcx , % rsi sarq $ 6 3 , % rsi subq % rsi , % rax movq % rax , % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax subq % rax , % rcx movq % rcx , % rdx movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq % rdx , (% rax ) movq - 4 0 (% rbp ), % rcx movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 2 , % rax sarq $ 6 3 , % rcx movq % rcx , % rdx subq % rdx , % rax movq % rax , - 2 4 (% rbp ) subq $ 1 , - 3 2 (% rbp ) . L 2 : . LBE 6 : cmpq $ 0 , - 3 2 (% rbp ) jns . L 2 0 . LBE 4 : . LBE 3 : . LBB 7 : cmpq $ 0 , - 2 4 (% rbp ) jle . L 9 . LBB 8 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rbx movl $ 0 , % r 1 2 d leaq 1 (% rbx ), % rax movq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 0 . LBB 9 : movq - 1 6 0 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , 1 6 (% rbp ) movq % rdx , 2 4 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , 3 2 (% rbp ) . LBE 9 : jmp . L 1 1 . L 1 0 : . LBB 1 0 : movq - 1 6 0 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rdx movq % rcx , 1 6 (% rbp ) movq % rax , 2 4 (% rbp ) movq % rdx , 3 2 (% rbp ) . L 1 1 : . LBE 1 0 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) movq 3 2 (% rbp ), % rax testq % rax , % rax jg . L 1 2 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 1 2 : movq 3 2 (% rbp ), % rax testq % rax , % rax jns . L 1 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 3 : movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 3 , % rax addq % rdx , % rax movq % rax , - 1 2 8 (% rbp ) movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 1 2 (% rbp ) movq 1 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq 2 4 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx cmpq % rax , % rdx cmovle % rdx , % rax leaq 0 (,% rax , 8 ), % rdx movq - 9 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memmove @ PLT movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 1 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 4 : movq 1 6 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rdx , (% rax ) . L 9 : . LBE 8 : . LBE 7 : . LBB 1 1 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 1 : . LBE 2 : movq - 2 0 0 (% rbp ), % rax addq $ 1 9 2 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 6 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 7 movl $ 6 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 2 4 , % rsp movq % rdi , - 6 4 8 (% rbp ) movq % rsi , - 6 5 6 (% rbp ) movq $ 0 , - 5 1 2 (% rbp ) movq $ 0 , - 5 0 4 (% rbp ) movq $ 0 , - 4 9 6 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 6 5 6 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : leaq type ... 6 0 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 8 (% rbp ) movq - 4 8 8 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) movq $ 0 , - 5 0 4 (% rbp ) movq $ 0 , - 4 9 6 (% rbp ) movq - 6 4 8 (% rbp ), % rcx movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 5 4 4 (% rbp ) movq $ 0 , - 5 3 6 (% rbp ) movq $ 0 , - 5 2 8 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) leaq - 4 8 0 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) movq $ 1 , - 5 6 8 (% rbp ) movq $ 1 , - 5 6 0 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 6 : . LBB 7 : jmp . L 4 . L 3 6 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq $ 0 , - 6 0 8 (% rbp ) movq $ 0 , - 6 0 0 (% rbp ) movq $ 0 , - 5 9 2 (% rbp ) movq - 5 6 0 (% rbp ), % rax testq % rax , % rax jns . L 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 5 : movq - 5 7 6 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) movq - 5 6 8 (% rbp ), % rax movq % rax , - 6 3 2 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) leaq type ... 6 0 x . 7 . 1 main . TreeNode (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 7 2 (% rbp ) movq - 4 7 2 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) movq $ 0 , - 5 6 8 (% rbp ) movq $ 0 , - 5 6 0 (% rbp ) . LBB 1 0 : movq $ 0 , - 4 8 (% rbp ) . LBB 1 1 : . LBB 1 2 : . LBB 1 3 : movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 5 6 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 1 3 : jmp . L 6 . L 3 5 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 4 5 6 (% rbp ), % rax testq % rbx , % rbx js . L 7 cmpq % rax , % rbx jge . L 7 movq - 4 6 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 6 : . LBB 1 7 : movq % rax , - 4 8 (% rbp ) . LBE 1 7 : . LBB 1 8 : . LBB 1 9 : movq - 4 0 (% rbp ), % rax andl $ 1 , % eax testq % rax , % rax je . L 8 jmp . L 3 2 . L 7 : . LBE 1 9 : . LBE 1 8 : . LBB 3 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 8 : . LBE 3 7 : . LBB 3 8 : . LBB 2 4 : . LBB 2 0 : movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 2 4 (% rbp ), % r 1 2 movq - 4 8 (% rbp ), % rax movq (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 4 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 0 . LBB 2 1 : movq - 4 3 2 (% rbp ), % rsi leaq - 2 0 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 6 0 8 (% rbp ) movq % rdx , - 6 0 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) . LBE 2 1 : jmp . L 1 1 . L 1 0 : . LBB 2 2 : movq - 4 3 2 (% rbp ), % rcx movq - 4 1 6 (% rbp ), % rdx movq % rcx , - 6 0 8 (% rbp ) movq % rax , - 6 0 0 (% rbp ) movq % rdx , - 5 9 2 (% rbp ) . L 1 1 : . LBE 2 2 : movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 3 , (% rax ) . LBE 2 0 : jmp . L 1 2 . L 3 2 : . LBB 2 3 : movq - 4 8 (% rbp ), % rax movq (% rax ), % r 1 2 leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 8 (% rbp ) movq - 4 0 8 (% rbp ), % rax movq % r 1 2 , (% rax ) movq - 4 0 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 1 , - 3 9 2 (% rbp ) movq $ 1 , - 3 8 4 (% rbp ) movq - 3 9 2 (% rbp ), % r 1 2 movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 3 6 0 (% rbp ), % r 1 3 leaq (% r 1 2 ,% r 1 3 ), % rax movq - 3 8 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 3 movq - 4 0 0 (% rbp ), % rsi leaq - 1 7 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) jmp . L 1 4 . L 1 3 : movq - 4 0 0 (% rbp ), % rcx movq - 3 8 4 (% rbp ), % rdx movq % rcx , - 4 0 0 (% rbp ) movq % rax , - 3 9 2 (% rbp ) movq % rdx , - 3 8 4 (% rbp ) . L 1 4 : movq % r 1 3 , % rax leaq 0 (,% rax , 8 ), % rdx movq - 3 6 8 (% rbp ), % rax movq - 4 0 0 (% rbp ), % rcx movq % r 1 2 , % rsi salq $ 3 , % rsi addq % rsi , % rcx movq % rax , % rsi movq % rcx , % rdi call memmove @ PLT movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 6 0 8 (% rbp ) movq % rdx , - 6 0 0 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) . L 1 2 : . LBE 2 3 : . LBE 2 4 : . LBB 2 5 : movq - 4 8 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax je . L 1 5 . LBB 2 6 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 2 8 (% rbp ), % r 1 2 movq - 4 8 (% rbp ), % rax movq 8 (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 3 2 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 6 . LBB 2 7 : movq - 3 3 6 (% rbp ), % rsi leaq - 1 4 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 main . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) . LBE 2 7 : jmp . L 1 7 . L 1 6 : . LBB 2 8 : movq - 3 3 6 (% rbp ), % rcx movq - 3 2 0 (% rbp ), % rdx movq % rcx , - 5 7 6 (% rbp ) movq % rax , - 5 6 8 (% rbp ) movq % rdx , - 5 6 0 (% rbp ) . L 1 7 : . LBE 2 8 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 8 . LBB 2 9 : movq % r 1 3 , (% rax ) jmp . L 1 5 . L 1 8 : . LBE 2 9 : . LBB 3 0 : movq % r 1 3 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 5 : . LBE 3 0 : . LBE 2 6 : . LBE 2 5 : . LBB 3 1 : movq - 4 8 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax je . L 1 9 . LBB 3 2 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % r 1 2 movq - 4 8 (% rbp ), % rax movq 1 6 (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 2 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 0 . LBB 3 3 : movq - 3 0 4 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 main . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) . LBE 3 3 : jmp . L 2 1 . L 2 0 : . LBB 3 4 : movq - 3 0 4 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rdx movq % rcx , - 5 7 6 (% rbp ) movq % rax , - 5 6 8 (% rbp ) movq % rdx , - 5 6 0 (% rbp ) . L 2 1 : . LBE 3 4 : movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 2 . LBB 3 5 : movq % r 1 3 , (% rax ) jmp . L 1 9 . L 2 2 : . LBE 3 5 : . LBB 3 6 : movq % r 1 3 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 9 : . LBE 3 6 : . LBE 3 2 : . LBE 3 1 : . LBE 3 8 : . LBE 1 5 : . LBB 3 9 : addq $ 1 , % rbx . L 6 : . LBE 3 9 : cmpq % r 1 4 , % rbx jl . L 3 5 . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 5 . LBB 4 0 : movq - 2 7 2 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 6 . 7 int (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) . LBE 4 0 : jmp . L 2 6 . L 2 5 : . LBB 4 1 : movq - 2 7 2 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rdx movq % rcx , - 5 4 4 (% rbp ) movq % rax , - 5 3 6 (% rbp ) movq % rdx , - 5 2 8 (% rbp ) . L 2 6 : . LBE 4 1 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 7 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 6 0 8 (% rbp ), % rcx movq - 6 0 0 (% rbp ), % rbx movq % rcx , - 2 4 0 (% rbp ) movq % rbx , - 2 3 2 (% rbp ) movq - 5 9 2 (% rbp ), % rdx movq % rdx , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 2 2 4 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 7 . LBB 4 2 : movq - 2 4 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 2 8 . L 2 7 : . LBE 4 2 : . LBB 4 3 : movq - 2 4 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 8 : . LBE 4 3 : addq $ 1 , - 4 0 (% rbp ) . L 4 : . LBE 9 : movq - 5 6 8 (% rbp ), % rax testq % rax , % rax jg . L 3 6 . LBE 7 : . LBE 6 : . LBB 4 4 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq - 6 4 8 (% rbp ), % rcx movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 4 4 : . LBE 2 : movq - 6 4 8 (% rbp ), % rax addq $ 6 2 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 0 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movb $ 0 , - 2 5 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 1 9 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq - 4 0 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 cmpq % rax , - 2 4 (% rbp ) jge . L 3 movq - 4 8 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 0 , % al je . L 4 jmp . L 1 6 . L 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBB 8 : addq $ 1 , - 8 (% rbp ) addq $ 1 , - 1 6 (% rbp ) . LBE 8 : jmp . L 6 . L 1 6 : . LBB 9 : . LBB 1 0 : movq - 4 0 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 7 cmpq % rax , - 2 4 (% rbp ) jge . L 7 movq - 4 8 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 1 , % al je . L 8 jmp . L 1 7 . L 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 : . LBB 1 1 : . LBB 1 2 : cmpq $ 0 , - 8 (% rbp ) jle . L 1 0 . LBB 1 3 : subq $ 1 , - 8 (% rbp ) . L 1 0 : . LBE 1 3 : . LBE 1 2 : subq $ 1 , - 1 6 (% rbp ) . LBE 1 1 : jmp . L 6 . L 1 7 : . LBB 1 4 : . LBB 1 5 : cmpq $ 0 , - 8 (% rbp ) jle . L 1 1 . LBB 1 6 : subq $ 1 , - 8 (% rbp ) . L 1 1 : . LBE 1 6 : . LBE 1 5 : addq $ 1 , - 1 6 (% rbp ) . L 6 : . LBE 1 4 : . LBE 1 0 : . LBE 9 : . LBE 7 : . LBB 1 7 : cmpq $ 0 , - 1 6 (% rbp ) jns . L 1 2 . LBB 1 8 : . LBB 1 9 : movb $ 0 , - 2 5 (% rbp ) movzbl - 2 5 (% rbp ), % eax jmp . L 1 3 . L 1 2 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBE 6 : . LBB 2 0 : addq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 2 0 : movq - 4 0 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 1 9 . LBE 4 : . LBE 3 : . LBB 2 1 : cmpq $ 0 , - 8 (% rbp ) sete % al movb % al , - 2 5 (% rbp ) movzbl - 2 5 (% rbp ), % eax . L 1 3 : . LBE 2 1 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 5 movl $ 2 0 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 5 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 8 4 , % rsp . LBB 2 : movq 2 4 (% rbp ), % rax testq % rax , % rax je . L 3 0 . LBE 2 : movq 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 8 (% rbp ) . LBB 4 : movq $ 0 , - 2 4 (% rbp ) . LBB 5 : jmp . L 5 . L 3 1 : . LBB 6 : nop . LBE 6 : . LBB 7 : movq - 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movl $ 0 , % esi movq % rax , % rdi call go . algorithms . search addq $ 3 2 , % rsp movq - 4 8 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rdx , % rsi movq % rax , % rdi call go . algorithms . search addq $ 3 2 , % rsp . LBE 7 : . LBB 8 : addq $ 1 , - 2 4 (% rbp ) . L 5 : . LBE 8 : movq - 2 4 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jl . L 3 1 . LBE 5 : . LBE 4 : . LBB 9 : movq $ 0 , - 3 2 (% rbp ) . LBB 1 0 : jmp . L 8 . L 3 2 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : movq - 3 2 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rsi movl $ 0 , % edi call go . algorithms . search addq $ 3 2 , % rsp movq - 4 0 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 3 2 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rsi movq % rdx , % rdi call go . algorithms . search addq $ 3 2 , % rsp . LBE 1 2 : . LBB 1 3 : addq $ 1 , - 3 2 (% rbp ) . L 8 : . LBE 1 3 : movq - 3 2 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 3 2 . LBE 1 0 : . LBE 9 : . LBB 1 4 : movq $ 0 , - 5 6 (% rbp ) . LBB 1 5 : . LBB 1 6 : . LBB 1 7 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % r 8 movl $ 0 , % edx . LBE 1 7 : jmp . L 1 1 . L 3 4 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : movq % rdx , - 5 6 (% rbp ) . LBB 2 0 : . LBB 2 1 : movq $ 0 , - 6 4 (% rbp ) . LBB 2 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 2 cmpq % rax , - 5 6 (% rbp ) jl . L 2 6 . L 1 2 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq 1 6 (% rbp ), % rsi movq - 5 6 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 1 4 4 (% rbp ) . LBB 2 3 : . LBB 2 4 : movq - 1 6 0 (% rbp ), % rcx movq - 1 5 2 (% rbp ), % rbx movq % rcx , - 1 2 8 (% rbp ) movq % rbx , - 1 2 0 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 9 movl $ 0 , % ecx . LBE 2 4 : jmp . L 1 4 . L 3 3 : . LBB 2 5 : nop . LBE 2 5 : . LBB 2 6 : movq % rcx , - 6 4 (% rbp ) . LBB 2 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 5 cmpq % rax , - 5 6 (% rbp ) jl . L 2 7 . L 1 5 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq 1 6 (% rbp ), % rdi movq - 5 6 (% rbp ), % rsi movq % rsi , % rax addq % rax , % rax addq % rsi , % rax salq $ 3 , % rax addq % rdi , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 9 6 (% rbp ) movq % rdi , - 8 8 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 7 cmpq % rax , - 6 4 (% rbp ) jge . L 1 7 movq - 9 6 (% rbp ), % rsi movq - 6 4 (% rbp ), % rax addq % rsi , % rax movq % rax , - 7 2 (% rbp ) . LBB 2 8 : movq - 7 2 (% rbp ), % rax movzbl (% rax ), % eax cmpb $ 3 5 , % al je . L 1 8 cmpb $ 7 9 , % al je . L 1 9 jmp . L 2 0 . L 1 7 : . LBE 2 8 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : . LBB 3 1 : . LBB 2 9 : movq - 7 2 (% rbp ), % rax movb $ 7 9 , (% rax ) . LBE 2 9 : jmp . L 2 0 . L 1 9 : . LBB 3 0 : movq - 7 2 (% rbp ), % rax movb $ 8 8 , (% rax ) . LBE 3 0 : nop . L 2 0 : . LBE 3 1 : . LBE 2 7 : . LBE 2 6 : . LBB 3 2 : addq $ 1 , % rcx . L 1 4 : . LBE 3 2 : cmpq % r 9 , % rcx jl . L 3 3 . LBE 2 3 : . LBE 2 2 : . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBB 3 3 : addq $ 1 , % rdx . L 1 1 : . LBE 3 3 : cmpq % r 8 , % rdx jl . L 3 4 jmp . L 1 . L 3 0 : . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBB 3 4 : . LBB 3 : nop . L 1 : . LBE 3 : . LBE 3 4 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 4 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 subq $ 1 4 4 , % rsp movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 2 : movq $ 1 0 0 , - 3 2 (% rbp ) . LBB 3 : jmp . L 2 . L 1 3 : . LBB 4 : nop . LBE 4 : . LBB 5 : . LBB 6 : movq - 3 2 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 7 : jmp . L 3 . L 1 2 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq - 3 2 (% rbp ), % rax imulq - 4 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . LBB 1 0 : . LBB 1 1 : movq - 4 8 (% rbp ), % rax movq % rax , % rdi call main . isPalindrome testb % al , % al je . L 4 . LBB 1 2 : movq - 4 8 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax setg % al . L 4 : . LBE 1 2 : . LBE 1 1 : testb % al , % al je . L 5 . LBB 1 3 : movq - 4 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . L 5 : . LBE 1 3 : . LBE 1 0 : . LBE 9 : . LBB 1 4 : addq $ 1 , - 4 0 (% rbp ) . L 3 : . LBE 1 4 : cmpq $ 9 9 9 , - 4 0 (% rbp ) jle . L 1 2 . LBE 7 : . LBE 6 : . LBE 5 : . LBB 1 5 : addq $ 1 , - 3 2 (% rbp ) . L 2 : . LBE 1 5 : cmpq $ 9 9 9 , - 3 2 (% rbp ) jle . L 1 3 . LBE 3 : . LBE 2 : leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 1 2 8 (% rbp ) movq % r 1 3 , - 1 2 0 (% rbp ) leaq - 1 2 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) leaq - 1 6 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 6 1 4 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 4 : ret . L 6 1 4 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq $ 0 , - 1 6 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 6 1 7 : . LBB 6 1 8 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rax movq 1 6 (% rax ), % rdx movq 2 4 (% rax ), % rax movq % rdx , % rdi movq % rax , % rsi call main . formatText movq % rax , - 1 6 (% rbp ) movq % rdx , - 8 (% rbp ) movq - 1 6 (% rbp ), % rax movq - 8 (% rbp ), % rdx . LBE 6 1 8 : . LBE 6 1 7 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 4 movl $ 1 6 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 4 : pushq % rbp movq % rsp , % rbp subq $ 1 6 0 , % rsp movq % rdi , - 1 5 2 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) . LBB 2 : movl $ 2 , % edx movl $ 2 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 4 4 (% rbp ) movq $ 2 , - 1 3 6 (% rbp ) movq $ 2 , - 1 2 8 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 8 (% rbp ) . LBB 3 : movq $ 1 , - 3 2 (% rbp ) . LBB 4 : jmp . L 3 . L 2 2 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 4 cmpq % rax , - 3 2 (% rbp ) jl . L 1 8 . L 4 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax xorq % rax , - 8 (% rbp ) . LBE 6 : . LBB 7 : addq $ 1 , - 3 2 (% rbp ) . L 3 : . LBE 7 : movq 2 4 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) jl . L 2 2 . LBE 4 : . LBE 3 : movq - 8 (% rbp ), % rax negq % rax andq - 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq $ 0 , - 1 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 8 : movq $ 0 , - 4 8 (% rbp ) . LBB 9 : . LBB 1 0 : . LBB 1 1 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rcx movl $ 0 , % eax . LBE 1 1 : jmp . L 8 . L 2 3 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 9 cmpq % rdx , % rax jge . L 9 movq - 8 0 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 1 4 : . LBB 1 5 : movq % rdx , - 4 8 (% rbp ) . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 4 8 (% rbp ), % rdx andq - 4 0 (% rbp ), % rdx testq % rdx , % rdx jg . L 1 0 jmp . L 2 0 . L 9 : . LBE 1 7 : . LBE 1 6 : . LBB 2 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : . LBE 2 1 : . LBB 2 2 : . LBB 2 0 : . LBB 1 8 : movq - 4 8 (% rbp ), % rdx xorq % rdx , - 1 6 (% rbp ) . LBE 1 8 : jmp . L 1 2 . L 2 0 : . LBB 1 9 : movq - 4 8 (% rbp ), % rdx xorq % rdx , - 2 4 (% rbp ) . L 1 2 : . LBE 1 9 : . LBE 2 0 : . LBE 2 2 : . LBE 1 3 : . LBB 2 3 : addq $ 1 , % rax . L 8 : . LBE 2 3 : cmpq % rcx , % rax jl . L 2 3 . LBE 1 0 : . LBE 9 : . LBE 8 : movq - 1 3 6 (% rbp ), % rax testq % rax , % rax jg . L 1 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 5 : movq - 1 4 4 (% rbp ), % rax movq - 1 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 3 6 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 6 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 6 : movq - 1 4 4 (% rbp ), % rax leaq 8 (% rax ), % rdx movq - 2 4 (% rbp ), % rax movq % rax , (% rdx ) . LBB 2 4 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 5 2 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 4 : . LBE 2 : movq - 1 5 2 (% rbp ), % rax leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 4 movl $ 1 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 8 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 9 6 (% rbp ) movq % rdi , - 8 8 (% rbp ) movq % rdx , - 1 1 2 (% rbp ) movq % rcx , - 1 0 4 (% rbp ) movb $ 0 , - 3 3 (% rbp ) . LBB 2 : call runtime . makemap_small @ PLT movq % rax , - 4 8 (% rbp ) . LBB 3 : movl $ 0 , - 5 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 1 0 4 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 2 2 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 1 0 4 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 4 jmp . L 1 8 . L 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBB 1 0 : addq $ 1 , % rbx . LBE 1 0 : jmp . L 6 . L 1 8 : . LBB 1 1 : movq - 1 1 2 (% rbp ), % rcx movq - 1 0 4 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movl % ecx , % eax . L 6 : . LBE 1 1 : . LBE 9 : . LBB 1 2 : movl % eax , - 5 2 (% rbp ) . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movl - 5 2 (% rbp ), % eax movl % eax , - 7 6 (% rbp ) movl - 5 2 (% rbp ), % eax movl % eax , - 6 8 (% rbp ) leaq - 6 8 (% rbp ), % rax movl (% rax ), % edx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 3 leaq - 7 6 (% rbp ), % rax movl (% rax ), % edx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapassign_fast 3 2 @ PLT movq % r 1 3 , (% rax ) . L 2 : . LBE 1 4 : . LBE 1 3 : . LBE 8 : cmpq % r 1 2 , % rbx jl . L 2 2 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 5 : movl $ 0 , - 5 6 (% rbp ) . LBB 1 6 : . LBB 1 7 : . LBB 1 8 : movq - 8 8 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 8 : jmp . L 9 . L 2 3 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : . LBB 2 1 : movq - 8 8 (% rbp ), % rax testq % rbx , % rbx js . L 1 0 cmpq % rax , % rbx jge . L 1 0 movq - 9 6 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 1 1 jmp . L 2 0 . L 1 0 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 1 : . LBB 2 2 : addq $ 1 , % rbx . LBE 2 2 : jmp . L 1 3 . L 2 0 : . LBB 2 3 : movq - 9 6 (% rbp ), % rcx movq - 8 8 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movl % ecx , % eax . L 1 3 : . LBE 2 3 : . LBE 2 1 : . LBB 2 4 : movl % eax , - 5 6 (% rbp ) . LBE 2 4 : . LBB 2 5 : . LBB 2 6 : . LBB 2 7 : movl - 5 6 (% rbp ), % eax movl % eax , - 7 2 (% rbp ) movl - 5 6 (% rbp ), % eax movl % eax , - 6 4 (% rbp ) leaq - 6 4 (% rbp ), % rax movl (% rax ), % edx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax leaq - 1 (% rax ), % r 1 3 leaq - 7 2 (% rbp ), % rax movl (% rax ), % edx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapassign_fast 3 2 @ PLT movq % r 1 3 , (% rax ) . LBE 2 7 : movl - 5 6 (% rbp ), % eax movl % eax , - 6 0 (% rbp ) leaq - 6 0 (% rbp ), % rax movl (% rax ), % edx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax testq % rax , % rax jns . L 9 . LBB 2 8 : . LBB 2 9 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 1 5 . L 9 : . LBE 2 9 : . LBE 2 8 : . LBE 2 6 : . LBE 2 5 : . LBE 2 0 : cmpq % r 1 2 , % rbx jl . L 2 3 . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBB 3 0 : movb $ 1 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax . L 1 5 : . LBE 3 0 : . LBE 2 : addq $ 8 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 4 2 2 : leaq - 5 5 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 1 0 8 5 movl $ 5 5 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 5 2 3 : ret . L 1 1 0 8 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 5 2 8 , % rsp movq % rdi , - 5 3 6 (% rbp ) movq % rsi , - 5 4 4 (% rbp ) movq $ 0 , - 4 0 0 (% rbp ) movq $ 0 , - 3 9 2 (% rbp ) movq $ 0 , - 3 8 4 (% rbp ) . LBB 8 8 0 9 : movl $ 0 , % edx movl $ 0 , % esi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 3 2 (% rbp ) movq $ 0 , - 4 2 4 (% rbp ) movq $ 0 , - 4 1 6 (% rbp ) . LBB 8 8 1 0 : cmpq $ 0 , - 5 4 4 (% rbp ) jne . L 1 1 0 5 7 . LBB 8 8 1 1 : . LBB 8 8 1 2 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 5 3 6 (% rbp ), % rcx movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 8 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 1 0 5 6 . L 1 1 0 5 7 : . LBE 8 8 1 2 : . LBE 8 8 1 1 : . LBE 8 8 1 0 : leaq - 3 6 8 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq $ 0 , - 4 5 6 (% rbp ) movq $ 0 , - 4 4 8 (% rbp ) leaq - 3 6 8 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq $ 0 , - 4 8 8 (% rbp ) movq $ 0 , - 4 8 0 (% rbp ) movl $ 0 , % edx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 5 2 8 (% rbp ) movq $ 0 , - 5 2 0 (% rbp ) movq $ 0 , - 5 1 2 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 3 6 0 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 3 5 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 1 0 5 9 . LBB 8 8 1 3 : movq - 3 6 8 (% rbp ), % rsi leaq - 1 7 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 1 go . leetcode . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) . LBE 8 8 1 3 : jmp . L 1 1 0 6 0 . L 1 1 0 5 9 : . LBB 8 8 1 4 : movq - 3 6 8 (% rbp ), % rcx movq - 3 5 2 (% rbp ), % rdx movq % rcx , - 4 6 4 (% rbp ) movq % rax , - 4 5 6 (% rbp ) movq % rdx , - 4 4 8 (% rbp ) . L 1 1 0 6 0 : . LBE 8 8 1 4 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 1 0 6 1 . LBB 8 8 1 5 : movq - 5 4 4 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 1 0 6 3 . L 1 1 0 6 1 : . LBE 8 8 1 5 : . LBB 8 8 1 6 : movq - 5 4 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . LBE 8 8 1 6 : . LBB 8 8 1 7 : . LBB 8 8 1 8 : jmp . L 1 1 0 6 3 . L 1 1 0 8 4 : . LBB 8 8 1 9 : nop . LBE 8 8 1 9 : . LBB 8 8 2 0 : movq - 4 5 6 (% rbp ), % rax testq % rax , % rax jg . L 1 1 0 6 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 1 0 6 4 : movq - 4 6 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 2 4 (% rbp ) movq - 4 4 8 (% rbp ), % rax testq % rax , % rax jg . L 1 1 0 6 5 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 1 1 0 6 5 : movq - 4 6 4 (% rbp ), % rdx movq - 4 4 8 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq - 4 5 6 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 4 4 8 (% rbp ), % rax subq $ 1 , % rax movq % rcx , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq % rax , - 4 4 8 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 2 8 (% rbp ), % rbx movq - 2 4 (% rbp ), % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 3 2 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 1 0 6 6 . LBB 8 8 2 1 : movq - 3 3 6 (% rbp ), % rsi leaq - 1 4 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) . LBE 8 8 2 1 : jmp . L 1 1 0 6 7 . L 1 1 0 6 6 : . LBB 8 8 2 2 : movq - 3 3 6 (% rbp ), % rcx movq - 3 2 0 (% rbp ), % rdx movq % rcx , - 5 2 8 (% rbp ) movq % rax , - 5 2 0 (% rbp ) movq % rdx , - 5 1 2 (% rbp ) . L 1 1 0 6 7 : . LBE 8 8 2 2 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) . LBB 8 8 2 3 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax je . L 1 1 0 6 8 . LBB 8 8 2 4 : movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % rbx movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 2 8 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 1 0 6 9 . LBB 8 8 2 5 : movq - 3 0 4 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 1 go . leetcode . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) . LBE 8 8 2 5 : jmp . L 1 1 0 7 0 . L 1 1 0 6 9 : . LBB 8 8 2 6 : movq - 3 0 4 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rdx movq % rcx , - 4 9 6 (% rbp ) movq % rax , - 4 8 8 (% rbp ) movq % rdx , - 4 8 0 (% rbp ) . L 1 1 0 7 0 : . LBE 8 8 2 6 : movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 1 0 7 1 . LBB 8 8 2 7 : movq % r 1 2 , (% rax ) jmp . L 1 1 0 6 8 . L 1 1 0 7 1 : . LBE 8 8 2 7 : . LBB 8 8 2 8 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 1 0 6 8 : . LBE 8 8 2 8 : . LBE 8 8 2 4 : . LBE 8 8 2 3 : . LBB 8 8 2 9 : movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax je . L 1 1 0 7 2 . LBB 8 8 3 0 : movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rbx movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 1 0 7 3 . LBB 8 8 3 1 : movq - 2 7 2 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 1 go . leetcode . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) . LBE 8 8 3 1 : jmp . L 1 1 0 7 4 . L 1 1 0 7 3 : . LBB 8 8 3 2 : movq - 2 7 2 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rdx movq % rcx , - 4 9 6 (% rbp ) movq % rax , - 4 8 8 (% rbp ) movq % rdx , - 4 8 0 (% rbp ) . L 1 1 0 7 4 : . LBE 8 8 3 2 : movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 1 0 7 5 . LBB 8 8 3 3 : movq % r 1 2 , (% rax ) jmp . L 1 1 0 7 2 . L 1 1 0 7 5 : . LBE 8 8 3 3 : . LBB 8 8 3 4 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 1 0 7 2 : . LBE 8 8 3 4 : . LBE 8 8 3 0 : . LBE 8 8 2 9 : . LBB 8 8 3 5 : movq - 4 5 6 (% rbp ), % rax testq % rax , % rax jne . L 1 1 0 6 3 . LBB 8 8 3 6 : movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movl $ 0 , % edx movl $ 0 , % esi leaq type ... 1 go . leetcode . TreeNode (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 9 6 (% rbp ) movq $ 0 , - 4 8 8 (% rbp ) movq $ 0 , - 4 8 0 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 1 0 7 6 . LBB 8 8 3 7 : movq - 2 4 0 (% rbp ), % rsi leaq - 4 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 6 . 7 int (% rip ), % rsi call runtime . growslice @ PLT movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) . LBE 8 8 3 7 : jmp . L 1 1 0 7 7 . L 1 1 0 7 6 : . LBB 8 8 3 8 : movq - 2 4 0 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rdx movq % rcx , - 4 3 2 (% rbp ) movq % rax , - 4 2 4 (% rbp ) movq % rdx , - 4 1 6 (% rbp ) . L 1 1 0 7 7 : . LBE 8 8 3 8 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 4 0 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 5 2 8 (% rbp ), % rcx movq - 5 2 0 (% rbp ), % rbx movq % rcx , - 2 0 8 (% rbp ) movq % rbx , - 2 0 0 (% rbp ) movq - 5 1 2 (% rbp ), % rdx movq % rdx , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 9 2 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 1 0 7 8 . LBB 8 8 3 9 : movq - 2 0 8 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 1 0 7 9 . L 1 1 0 7 8 : . LBE 8 8 3 9 : . LBB 8 8 4 0 : movq - 2 0 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 1 0 7 9 : . LBE 8 8 4 0 : movl $ 0 , % edx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 5 2 8 (% rbp ) movq $ 0 , - 5 2 0 (% rbp ) movq $ 0 , - 5 1 2 (% rbp ) . L 1 1 0 6 3 : . LBE 8 8 3 6 : . LBE 8 8 3 5 : . LBE 8 8 2 0 : movq - 4 5 6 (% rbp ), % rax testq % rax , % rax jg . L 1 1 0 8 4 . LBE 8 8 1 8 : . LBE 8 8 1 7 : . LBB 8 8 4 1 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 5 3 6 (% rbp ), % rcx movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 8 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 1 0 5 6 : . LBE 8 8 4 1 : . LBE 8 8 0 9 : movq - 5 3 6 (% rbp ), % rax addq $ 5 2 8 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 5 7 movl $ 2 8 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 0 : . LEHB 5 : ret . L 3 5 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 3 2 , % rsp . LEHE 5 : movq % rdi , - 2 4 8 (% rbp ) movb $ 0 , - 1 9 4 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) . LBB 2 6 7 : movq - 2 4 8 (% rbp ), % rax . LEHB 6 : movq 4 8 (% rax ), % rax leaq - 1 9 3 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . chanrecv 1 @ PLT cmpq $ 0 , - 2 4 8 (% rbp ) jne . L 3 3 0 call runtime . panicmem @ PLT . L 3 3 0 : movq - 2 4 8 (% rbp ), % rax addq $ 5 6 , % rax movq % rax , % rdi call sync . Mutex . Lock @ PLT . LBB 2 6 8 : cmpq $ 0 , - 2 4 8 (% rbp ) jne . L 3 3 1 call runtime . panicmem @ PLT . L 3 3 1 : movq - 2 4 8 (% rbp ), % rax leaq 5 6 (% rax ), % rdx movq $ 0 , - 1 2 8 (% rbp ) leaq - 1 2 8 (% rbp ), % rax movq % rax , - 1 2 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq % rdx , (% rax ) movq - 1 2 0 (% rbp ), % rdx leaq go . circularbuffer . go . circularbuffer .. thunk 3 (% rip ), % rdi leaq - 1 9 4 (% rbp ), % rsi leaq - 1 9 2 (% rbp ), % rax movq % rdx , % rcx movq % rdi , % rdx movq % rax , % rdi call runtime . deferprocStack @ PLT . LBE 2 6 8 : . LBB 2 6 9 : movq - 2 4 8 (% rbp ), % rax movq (% rax ), % rdx movq - 2 4 8 (% rbp ), % rax movq 8 (% rax ), % rax cmpq % rax , % rdx jne . L 3 3 2 . LBB 2 7 0 : leaq string .. d (% rip ), % r 1 2 leaq go .. C 1 9 0 (% rip ), % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . gopanic @ PLT . L 3 3 2 : . LBE 2 7 0 : . LBE 2 6 9 : movq - 2 4 8 (% rbp ), % rcx movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 3 2 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 2 4 8 (% rbp ), % rax movq (% rax ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , % rcx testq % rcx , % rcx js . L 3 3 3 movq % rax , % rcx cmpq % rcx , % rdx jle . L 3 3 3 movq - 1 1 2 (% rbp ), % rdx salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 2 4 8 (% rbp ), % rcx movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movq - 2 4 8 (% rbp ), % rax movq (% rax ), % rax jmp . L 3 5 4 . L 3 3 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndexU @ PLT . L 3 5 4 : movq - 7 2 (% rbp ), % rdx movq % rax , % rcx testq % rcx , % rcx js . L 3 3 5 movq % rax , % rcx cmpq % rcx , % rdx jle . L 3 3 5 movq - 8 0 (% rbp ), % rdx salq $ 4 , % rax addq % rdx , % rax movl $ 0 , % r 1 4 d movl $ 0 , % r 1 5 d movq % r 1 4 , % rdx movq % rdx , (% rax ) jmp . L 3 5 5 . L 3 3 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndexU @ PLT . L 3 5 5 : leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 3 3 7 . LBB 2 7 1 : movq % r 1 5 , % rdx movq % rdx , 8 (% rax ) jmp . L 3 3 8 . L 3 3 7 : . LBE 2 7 1 : . LBB 2 7 2 : movq % r 1 5 , % rdx addq $ 8 , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 3 8 : . LBE 2 7 2 : movq - 2 4 8 (% rbp ), % rax movq (% rax ), % rax addq $ 1 , % rax movq - 2 4 8 (% rbp ), % rdx movq 4 0 (% rdx ), % rbx cmpq $- 1 , % rbx jne . L 3 3 9 cmpq % rbx , % rax jne . L 3 4 2 movl $ 0 , % eax jmp . L 3 4 2 . L 3 3 9 : testq % rbx , % rbx jne . L 3 4 3 call runtime . panicdivide @ PLT . L 3 4 3 : movl $ 0 , % edx divq % rbx movq % rdx , % rcx movq % rcx , % rax . L 3 4 2 : movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rdx ) . LEHE 6 : . LBB 2 7 3 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movdqu - 2 2 4 (% rbp ), % xmm 0 movaps % xmm 0 , - 2 7 2 (% rbp ) movl $ 0 , % ebx . L 3 5 0 : . LBE 2 7 3 : . LBE 2 6 7 : leaq - 1 9 4 (% rbp ), % rax movq % rax , % rdi . LEHB 7 : call runtime . deferreturn @ PLT . LEHE 7 : cmpl $ 1 , % ebx je . L 3 4 4 movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx jmp . L 3 5 6 . L 3 5 1 : leaq - 1 9 4 (% rbp ), % rax movq % rax , % rdi . LEHB 8 : call runtime . checkdefer @ PLT . LEHE 8 : movdqu - 2 2 4 (% rbp ), % xmm 1 movaps % xmm 1 , - 2 7 2 (% rbp ) movl $ 0 , % ebx jmp . L 3 5 0 . L 3 5 2 : movq % rax , - 2 5 6 (% rbp ) movl $ 1 , % ebx jmp . L 3 5 0 . L 3 4 4 : movq - 2 5 6 (% rbp ), % rax movq % rax , % rdi . LEHB 9 : call _Unwind_Resume @ PLT . L 3 5 3 : leaq - 1 9 4 (% rbp ), % rax movq % rax , % rdi call runtime . checkdefer @ PLT jmp . L 3 5 0 . L 3 5 6 : addq $ 2 3 2 , % rsp . LEHE 9 : popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 6 movl $ 2 8 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 5 6 , % rsp movq % rdi , - 2 6 4 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) . LBB 6 : movb $ 4 8 , - 1 7 6 (% rbp ) movb $ 4 9 , - 1 7 5 (% rbp ) movb $ 5 0 , - 1 7 4 (% rbp ) movb $ 5 1 , - 1 7 3 (% rbp ) movb $ 5 2 , - 1 7 2 (% rbp ) movb $ 5 3 , - 1 7 1 (% rbp ) movb $ 5 4 , - 1 7 0 (% rbp ) movb $ 5 5 , - 1 6 9 (% rbp ) movb $ 5 6 , - 1 6 8 (% rbp ) movb $ 5 7 , - 1 6 7 (% rbp ) movb $ 9 7 , - 1 6 6 (% rbp ) movb $ 9 8 , - 1 6 5 (% rbp ) movb $ 9 9 , - 1 6 4 (% rbp ) movb $ 1 0 0 , - 1 6 3 (% rbp ) movb $ 1 0 1 , - 1 6 2 (% rbp ) movb $ 1 0 2 , - 1 6 1 (% rbp ) leaq - 1 7 6 (% rbp ), % rcx movq % rcx , - 2 2 4 (% rbp ) movq $ 1 6 , - 2 1 6 (% rbp ) movq $ 1 6 , - 2 0 8 (% rbp ) . LBB 7 : cmpq $ 0 , - 2 6 4 (% rbp ) jne . L 8 . LBB 8 : . LBB 9 : leaq . LC 4 (% rip ), % rax movl $ 1 , % edx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx jmp . L 2 7 . L 8 : . LBE 9 : . LBE 8 : . LBE 7 : movq - 2 6 4 (% rbp ), % rax movl % eax , - 2 0 (% rbp ) leaq - 1 6 0 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) . LBB 1 0 : . LBB 1 1 : jmp . L 1 0 . L 3 4 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rbx movl - 2 0 (% rbp ), % eax andl $ 1 5 , % eax movl % eax , % edx movq - 2 1 6 (% rbp ), % rax movl % edx , % ecx cmpq % rcx , % rax jg . L 1 1 movl % edx , % edx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndexU @ PLT . L 1 1 : movq - 2 2 4 (% rbp ), % rax movl % edx , % edx addq % rdx , % rax movzbl (% rax ), % r 1 2 d leaq 1 (% rbx ), % rax movq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 2 . LBB 1 4 : movq - 1 6 0 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq uint 8 .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) . LBE 1 4 : jmp . L 1 3 . L 1 2 : . LBB 1 5 : movq - 1 6 0 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rdx movq % rcx , - 2 5 6 (% rbp ) movq % rax , - 2 4 8 (% rbp ) movq % rdx , - 2 4 0 (% rbp ) . L 1 3 : . LBE 1 5 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movb % r 1 2 b , (% rax ) shrl $ 4 , - 2 0 (% rbp ) . L 1 0 : . LBE 1 3 : cmpl $ 0 , - 2 0 (% rbp ) jne . L 3 4 . LBE 1 1 : . LBE 1 0 : . LBB 1 6 : movq $ 0 , - 3 2 (% rbp ) movq - 2 4 8 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 4 0 (% rbp ) . LBB 1 7 : jmp . L 1 6 . L 3 5 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : . LBB 2 0 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 3 2 (% rbp ), % rdx movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq % rcx , - 9 6 (% rbp ) movq % rbx , - 8 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 4 0 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rcx cmpq $ 0 , - 4 0 (% rbp ) js . L 1 7 cmpq % rcx , - 4 0 (% rbp ) jl . L 2 9 . L 1 7 : movq - 4 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 2 5 6 (% rbp ), % rsi movq - 4 0 (% rbp ), % rcx addq % rsi , % rcx movzbl (% rcx ), % edi movq - 2 4 8 (% rbp ), % rcx cmpq $ 0 , - 3 2 (% rbp ) js . L 1 9 cmpq % rcx , - 3 2 (% rbp ) jl . L 3 0 . L 1 9 : movq - 3 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq - 2 5 6 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx addq % rsi , % rcx movzbl (% rcx ), % esi movq - 1 2 0 (% rbp ), % rcx testq % rdx , % rdx js . L 2 1 cmpq % rcx , % rdx jl . L 3 1 . L 2 1 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq - 1 2 8 (% rbp ), % rcx addq % rcx , % rdx movb % dil , (% rdx ) movq - 8 8 (% rbp ), % rdx testq % rax , % rax js . L 2 3 cmpq % rdx , % rax jl . L 3 2 . L 2 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq - 9 6 (% rbp ), % rdx addq % rdx , % rax movb % sil , (% rax ) . LBE 2 0 : addq $ 1 , - 3 2 (% rbp ) subq $ 1 , - 4 0 (% rbp ) . L 1 6 : . LBE 1 9 : movq - 3 2 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jl . L 3 5 . LBE 1 7 : . LBE 1 6 : . LBB 2 1 : subq $ 8 , % rsp pushq - 2 4 0 (% rbp ) pushq - 2 4 8 (% rbp ) pushq - 2 5 6 (% rbp ) movl $ 0 , % edi call runtime . slicebytetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx . L 2 7 : . LBE 2 1 : . LBE 6 : leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 1 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 7 movl $ 3 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 7 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 9 6 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) . LBB 8 : movl $ 9 7 , - 2 4 0 (% rbp ) movb $ 1 , - 2 3 6 (% rbp ) movl $ 1 0 1 , - 2 3 2 (% rbp ) movb $ 1 , - 2 2 8 (% rbp ) movl $ 1 0 5 , - 2 2 4 (% rbp ) movb $ 1 , - 2 2 0 (% rbp ) movl $ 1 1 1 , - 2 1 6 (% rbp ) movb $ 1 , - 2 1 2 (% rbp ) movl $ 1 1 7 , - 2 0 8 (% rbp ) movb $ 1 , - 2 0 4 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movq % rax , % r 8 movl $ 4 , % ecx movl $ 8 , % edx movl $ 5 , % esi leaq type .. map . 6 int 3 2 . 7 bool (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movq - 2 9 6 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 3 2 (% rbp ) leaq - 8 0 (% rbp ), % rdi movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx leaq - 1 9 2 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . stringtoslicebyte @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) . LBB 9 : . LBB 1 0 : jmp . L 1 0 . L 3 6 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : movb $ 0 , - 4 1 (% rbp ) . LBB 1 3 : movq - 2 8 0 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 1 cmpq % rax , - 2 4 (% rbp ) jl . L 2 9 . L 1 1 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 2 8 8 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax movl % eax , % edi call unicode . ToLower @ PLT movl % eax , - 1 5 2 (% rbp ) leaq - 1 5 2 (% rbp ), % rax movl (% rax ), % edx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 bool (% rip ), % rdi call runtime . mapaccess 2 _fast 3 2 @ PLT movl % edx , % eax movb % al , - 4 1 (% rbp ) . LBE 1 3 : . LBB 1 4 : movzbl - 4 1 (% rbp ), % eax xorl $ 1 , % eax testb % al , % al je . L 1 3 . LBB 1 5 : addq $ 1 , - 2 4 (% rbp ) . L 1 3 : . LBE 1 5 : . LBE 1 4 : movb $ 0 , - 4 2 (% rbp ) . LBB 1 6 : movq - 2 8 0 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 4 cmpq % rax , - 3 2 (% rbp ) jl . L 3 0 . L 1 4 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq - 2 8 8 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax movl % eax , % edi call unicode . ToLower @ PLT movl % eax , - 1 4 8 (% rbp ) leaq - 1 4 8 (% rbp ), % rax movl (% rax ), % edx movq - 4 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 bool (% rip ), % rdi call runtime . mapaccess 2 _fast 3 2 @ PLT movl % edx , % eax movb % al , - 4 2 (% rbp ) . LBE 1 6 : . LBB 1 7 : movzbl - 4 2 (% rbp ), % eax xorl $ 1 , % eax testb % al , % al je . L 1 6 . LBB 1 8 : subq $ 1 , - 3 2 (% rbp ) . L 1 6 : . LBE 1 8 : . LBE 1 7 : . LBB 1 9 : . LBB 2 0 : movzbl - 4 1 (% rbp ), % eax testb % al , % al je . L 1 7 . LBB 2 1 : movzbl - 4 2 (% rbp ), % eax . L 1 7 : . LBE 2 1 : . LBE 2 0 : testb % al , % al je . L 1 0 . LBB 2 2 : . LBB 2 3 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 2 4 (% rbp ), % rdx movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , - 1 1 2 (% rbp ) movq % rbx , - 1 0 4 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rcx cmpq $ 0 , - 3 2 (% rbp ) js . L 1 8 cmpq % rcx , - 3 2 (% rbp ) jl . L 3 1 . L 1 8 : movq - 3 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq - 2 8 8 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx addq % rsi , % rcx movzbl (% rcx ), % edi movq - 2 8 0 (% rbp ), % rcx cmpq $ 0 , - 2 4 (% rbp ) js . L 2 0 cmpq % rcx , - 2 4 (% rbp ) jl . L 3 2 . L 2 0 : movq - 2 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq - 2 8 8 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx addq % rsi , % rcx movzbl (% rcx ), % esi movq - 1 3 6 (% rbp ), % rcx testq % rdx , % rdx js . L 2 2 cmpq % rcx , % rdx jl . L 3 3 . L 2 2 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq - 1 4 4 (% rbp ), % rcx addq % rcx , % rdx movb % dil , (% rdx ) movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 2 4 cmpq % rdx , % rax jl . L 3 4 . L 2 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq - 1 1 2 (% rbp ), % rdx addq % rdx , % rax movb % sil , (% rax ) . LBE 2 3 : addq $ 1 , - 2 4 (% rbp ) subq $ 1 , - 3 2 (% rbp ) . L 1 0 : . LBE 2 2 : . LBE 1 9 : . LBE 1 2 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jl . L 3 6 . LBE 1 0 : . LBE 9 : . LBB 2 4 : subq $ 8 , % rsp pushq - 2 7 2 (% rbp ) pushq - 2 8 0 (% rbp ) pushq - 2 8 8 (% rbp ) movl $ 0 , % edi call runtime . slicebytetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx . LBE 2 4 : . LBE 8 : movq - 8 (% rbp ), % rbx leave ret
. LFB 2 8 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movabsq $- 9 2 2 3 3 7 2 0 3 6 8 5 4 7 7 5 8 0 8 , % rax movq % rax , main . res (% rip ) movq - 2 4 (% rbp ), % rax movq % rax , % rdi call main . dfs . LBB 6 : movq main . res (% rip ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 3 : . LBE 6 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 3 movl $ 2 4 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 1 6 , % rsp movq % rdi , - 2 1 6 (% rbp ) movq % rsi , - 2 2 4 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq % rcx , - 2 4 0 (% rbp ) movb $ 0 , - 4 1 (% rbp ) . LBB 2 : . LBB 3 : movq - 2 1 6 (% rbp ), % rax movq 8 (% rax ), % rax cmpq % rax , - 2 4 0 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movb $ 1 , - 4 1 (% rbp ) movzbl - 4 1 (% rbp ), % eax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 2 1 6 (% rbp ), % rbx movq - 2 1 6 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) leaq . LC 8 (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rdx , % rcx movq % rcx , 8 (% rbx ) leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 4 . LBB 6 : movq % rax , (% rbx ) . LBE 6 : jmp . L 5 . L 4 : . LBB 7 : movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 5 : . LBE 7 : . LBB 8 : movq $ 0 , - 4 0 (% rbp ) . LBB 9 : jmp . L 6 . L 4 2 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : movq - 2 1 6 (% rbp ), % rax movq 8 (% rax ), % rdx movq - 2 1 6 (% rbp ), % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movl $ 0 , % eax leaq - 1 (% rdx ), % rdi movq % rbx , % rdx testq % rdi , % rdi js . L 7 cmpq % rdx , % rdi jg . L 7 testq % rax , % rax jns . L 8 jmp . L 9 . L 7 : movq % rdx , % rsi call runtime . goPanicSliceAlen @ PLT . L 8 : cmpq % rdi , % rax jg . L 9 cmpq % rax , % rdi jne . L 1 0 jmp . L 3 5 . L 9 : movq % rdi , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 1 0 : movq % rax , % rdx jmp . L 1 2 . L 3 5 : movl $ 0 , % edx . L 1 2 : addq % rdx , % rcx subq % rax , % rdi movq % rdi , % rdx movq - 2 1 6 (% rbp ), % rax movq % rcx , (% rax ) movq - 2 1 6 (% rbp ), % rax movq % rdx , 8 (% rax ) movq - 2 1 6 (% rbp ), % rbx movq - 2 1 6 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 4 0 (% rbp ), % rax leaq 4 8 (% rax ), % rdx leaq - 1 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . intstring @ PLT movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rdx , % rcx movq % rcx , 8 (% rbx ) leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 1 3 . LBB 1 2 : movq % rax , (% rbx ) jmp . L 1 4 . L 1 3 : . LBE 1 2 : . LBB 1 3 : movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 4 : . LBE 1 3 : movq - 2 1 6 (% rbp ), % rax movq 8 (% rax ), % rcx movq - 2 1 6 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax subq - 2 2 4 (% rbp ), % rcx movq % rdx , % rsi testq % rcx , % rcx js . L 1 5 cmpq % rsi , % rcx jg . L 1 5 movq % rax , % rdi movq % rdx , % rsi cmpq % rsi , % rcx jne . L 1 6 jmp . L 3 6 . L 1 5 : movq % rcx , % rdi call runtime . goPanicSliceB @ PLT . L 1 6 : movq % rcx , % rsi jmp . L 1 8 . L 3 6 : movl $ 0 , % esi . L 1 8 : addq % rdi , % rsi movq % rsi , % r 1 2 movq % rdx , % rax subq % rcx , % rax movq % rax , % r 1 3 leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx movq % rax , % rdi call strconv . Atoi @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 1 0 4 (% rbp ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) . LBB 1 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 9 cmpq % rax , - 5 6 (% rbp ) jl . L 3 7 . L 1 9 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax testq % rax , % rax jne . L 2 1 . LBB 1 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 2 2 cmpq % rax , - 5 6 (% rbp ) jl . L 3 8 . L 2 2 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 1 , (% rax ) . LBB 1 6 : movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rdx movq - 2 2 4 (% rbp ), % rsi movq - 2 1 6 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call main . dfs addq $ 3 2 , % rsp testb % al , % al je . L 2 4 . LBB 1 7 : . LBB 1 8 : movb $ 1 , - 4 1 (% rbp ) movzbl - 4 1 (% rbp ), % eax jmp . L 3 . L 2 4 : . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 2 5 cmpq % rax , - 5 6 (% rbp ) jl . L 3 9 . L 2 5 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 0 , (% rax ) . L 2 1 : . LBE 1 5 : . LBE 1 4 : . LBE 1 1 : . LBB 1 9 : addq $ 1 , - 4 0 (% rbp ) . L 6 : . LBE 1 9 : movq - 4 0 (% rbp ), % rax cmpq - 2 3 2 (% rbp ), % rax jl . L 4 2 . LBE 9 : . LBE 8 : movq - 2 1 6 (% rbp ), % rax movq 8 (% rax ), % rdx movq - 2 1 6 (% rbp ), % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movl $ 0 , % eax leaq - 1 (% rdx ), % rdi movq % rbx , % rdx testq % rdi , % rdi js . L 2 9 cmpq % rdx , % rdi jg . L 2 9 testq % rax , % rax jns . L 3 0 jmp . L 3 1 . L 2 9 : movq % rdx , % rsi call runtime . goPanicSliceAlen @ PLT . L 3 0 : cmpq % rdi , % rax jg . L 3 1 cmpq % rax , % rdi jne . L 3 2 jmp . L 4 1 . L 3 1 : movq % rdi , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 3 2 : movq % rax , % rdx jmp . L 3 4 . L 4 1 : movl $ 0 , % edx . L 3 4 : addq % rdx , % rcx subq % rax , % rdi movq % rdi , % rdx movq - 2 1 6 (% rbp ), % rax movq % rcx , (% rax ) movq - 2 1 6 (% rbp ), % rax movq % rdx , 8 (% rax ) . LBB 2 0 : movb $ 0 , - 4 1 (% rbp ) movzbl - 4 1 (% rbp ), % eax . L 3 : . LBE 2 0 : . LBE 2 : leaq - 2 4 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 6 3 8 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 9 : . LEHB 8 5 : ret . L 6 3 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 3 6 , % rsp . LEHE 8 5 : movq % rdi , - 1 5 2 (% rbp ) movb $ 0 , - 1 2 9 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 4 6 6 : cmpq $ 0 , - 1 5 2 (% rbp ) jne . L 6 2 5 . LEHB 8 6 : call runtime . panicmem @ PLT . L 6 2 5 : movq - 1 5 2 (% rbp ), % rax addq $ 8 0 , % rax movq % rax , % rdi call sync . Mutex . Lock @ PLT . LBB 4 6 7 : cmpq $ 0 , - 1 5 2 (% rbp ) jne . L 6 2 6 call runtime . panicmem @ PLT . L 6 2 6 : movq - 1 5 2 (% rbp ), % rax leaq 8 0 (% rax ), % rdx movq $ 0 , - 5 6 (% rbp ) leaq - 5 6 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rdx , (% rax ) movq - 4 8 (% rbp ), % rdx leaq go . util . go . util .. thunk 2 0 (% rip ), % rdi leaq - 1 2 9 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rax movq % rdx , % rcx movq % rdi , % rdx movq % rax , % rdi call runtime . deferprocStack @ PLT . LBE 4 6 7 : . LBB 4 6 8 : movq - 1 5 2 (% rbp ), % rax movq 7 2 (% rax ), % rax . LEHE 8 6 : movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rbx movl $ 0 , % r 1 2 d . L 6 3 3 : . LBE 4 6 8 : . LBE 4 6 6 : leaq - 1 2 9 (% rbp ), % rax movq % rax , % rdi . LEHB 8 7 : call runtime . deferreturn @ PLT . LEHE 8 7 : cmpl $ 1 , % r 1 2 d je . L 6 2 7 movq % rbx , % rax jmp . L 6 3 7 . L 6 3 4 : leaq - 1 2 9 (% rbp ), % rax movq % rax , % rdi . LEHB 8 8 : call runtime . checkdefer @ PLT . LEHE 8 8 : movq - 4 0 (% rbp ), % rbx movl $ 0 , % r 1 2 d jmp . L 6 3 3 . L 6 3 5 : movq % rax , % r 1 3 movl $ 1 , % r 1 2 d jmp . L 6 3 3 . L 6 2 7 : movq % r 1 3 , % rax movq % rax , % rdi . LEHB 8 9 : call _Unwind_Resume @ PLT . L 6 3 6 : leaq - 1 2 9 (% rbp ), % rax movq % rax , % rdi call runtime . checkdefer @ PLT jmp . L 6 3 3 . L 6 3 7 : addq $ 1 3 6 , % rsp . LEHE 8 9 : popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 0 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 0 : pushq % rbp movq % rsp , % rbp movq % rdi , - 2 4 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 9 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 8 (% rbp ), % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax movq % rax , % rdi movq - 2 4 (% rbp ), % rcx movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 2 , % rax movq % rcx , % rsi sarq $ 6 3 , % rsi subq % rsi , % rax movq % rax , % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax subq % rax , % rcx movq % rcx , % rdx leaq (% rdx ,% rdi ), % rax movq % rax , - 8 (% rbp ) . LBB 7 : . LBB 8 : movabsq $- 2 1 4 7 4 8 3 6 4 9 , % rax cmpq % rax , - 8 (% rbp ) setle % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 3 . LBB 9 : movl $ 2 1 4 7 4 8 3 6 4 8 , % eax cmpq % rax , - 8 (% rbp ) setge % al . L 3 : . LBE 9 : . LBE 8 : testb % al , % al je . L 4 . LBB 1 0 : . LBB 1 1 : movq $ 0 , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax jmp . L 5 . L 4 : . LBE 1 1 : . LBE 1 0 : . LBE 7 : movq - 2 4 (% rbp ), % rcx movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 2 , % rax sarq $ 6 3 , % rcx movq % rcx , % rdx subq % rdx , % rax movq % rax , - 2 4 (% rbp ) . L 2 : . LBE 6 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 9 . LBE 4 : . LBE 3 : . LBB 1 2 : movq - 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax . L 5 : . LBE 1 2 : . LBE 2 : popq % rbp ret
. LFB 0 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 movl $ 3 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 2 8 , % rsp movq % rdi , - 3 6 0 (% rbp ) leaq type ... 6 7 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 6 , 8 (% rax ) movq $ 4 , 1 6 (% rax ) movq $ 8 , 2 4 (% rax ) movq $ 1 0 , 3 2 (% rax ) movq $ 9 , 4 0 (% rax ) movq $ 1 5 , 4 8 (% rax ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq $ 7 , - 3 1 2 (% rbp ) movq $ 7 , - 3 0 4 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq - 2 8 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq - 2 8 0 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 4 , - 3 4 4 (% rbp ) movq $ 4 , - 3 3 6 (% rbp ) subq $ 8 , % rsp pushq - 3 0 4 (% rbp ) pushq - 3 1 2 (% rbp ) pushq - 3 2 0 (% rbp ) call go . problem 5 8 1 . findUnsortedSubarray addq $ 3 2 , % rsp movq % rax , % rbx leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq - 2 4 8 (% rbp ), % rax movq % rbx , (% rax ) movq - 2 4 8 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 2 4 0 (% rbp ) movq % r 1 5 , - 2 3 2 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) subq $ 8 , % rsp pushq - 3 3 6 (% rbp ) pushq - 3 4 4 (% rbp ) pushq - 3 5 2 (% rbp ) call go . problem 5 8 1 . findUnsortedSubarray addq $ 3 2 , % rsp movq % rax , % rbx leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq % rbx , (% rax ) movq - 2 0 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 1 9 2 (% rbp ) movq % r 1 3 , - 1 8 4 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 5 6 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 5 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 2 0 , % rsp movq % rdi , - 5 3 6 (% rbp ) leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 1 1 , - 5 5 2 (% rbp ) movdqa - 5 6 0 (% rbp ), % xmm 0 movups % xmm 0 , - 4 4 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 9 6 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq $ 3 , - 4 2 4 (% rbp ) movq $ 3 , - 4 1 6 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 8 (% rbp ) movq - 4 8 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq - 4 8 8 (% rbp ), % rax movq % rax , - 4 0 8 (% rbp ) movq $ 3 , - 4 0 0 (% rbp ) movq $ 3 , - 3 9 2 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 4 movl $ 1 1 , % r 1 5 d movq % r 1 4 , - 3 8 4 (% rbp ) movq % r 1 5 , - 3 7 6 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 0 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq $ 3 , - 3 6 0 (% rbp ) movq $ 3 , - 3 5 2 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 7 2 (% rbp ) movq - 4 7 2 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 4 7 2 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) movq $ 3 , - 3 3 6 (% rbp ) movq $ 3 , - 3 2 8 (% rbp ) leaq . LC 2 2 (% rip ), % r 1 2 movl $ 1 1 , % r 1 3 d movq % r 1 2 , - 3 2 0 (% rbp ) movq % r 1 3 , - 3 1 2 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 6 4 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 5 , 1 6 (% rax ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 3 , - 2 9 6 (% rbp ) movq $ 3 , - 2 8 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 5 6 (% rbp ) movq - 4 5 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 5 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq - 4 5 6 (% rbp ), % rax movq % rax , - 2 8 0 (% rbp ) movq $ 3 , - 2 7 2 (% rbp ) movq $ 3 , - 2 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 5 0 4 (% rbp ), % rax movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 1 4 4 (% rax ) movq % rbx , 1 5 2 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 1 6 0 (% rax ) movq % rbx , 1 6 8 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 1 7 6 (% rax ) movq % rbx , 1 8 4 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 5 0 4 (% rbp ), % rax leaq - 4 4 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 5 0 4 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 3 , - 5 2 0 (% rbp ) movq $ 3 , - 5 1 2 (% rbp ) . LBB 4 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 1 8 4 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 1 9 2 (% rbp ), % rax movq % rbx , % rdx salq $ 6 , % rdx addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 4 0 (% rbp ) movq % rdi , - 2 3 2 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 2 2 4 (% rbp ) movq % rdi , - 2 1 6 (% rbp ) movq 5 6 (% rax ), % rdx movq 4 8 (% rax ), % rax movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 5 6 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 4 8 (% rax ) movq % rdi , 5 6 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 5 6 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 8 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 5 3 6 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 5 2 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 3 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 3 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq $ 0 , - 8 (% rbp ) movq $ 1 , - 1 6 (% rbp ) movq $ 1 , - 2 4 (% rbp ) . LBB 2 : movq $ 1 9 0 0 , - 3 2 (% rbp ) . LBB 3 : jmp . L 2 . L 2 2 : . LBB 4 : nop . LBE 4 : . LBB 5 : . LBB 6 : movq $ 1 , - 1 6 (% rbp ) . LBB 7 : jmp . L 3 . L 2 1 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : cmpq $ 1 2 , - 1 6 (% rbp ) ja . L 1 7 movq - 1 6 (% rbp ), % rax leaq 0 (,% rax , 4 ), % rdx leaq . L 6 (% rip ), % rax movl (% rdx ,% rax ), % eax cltq leaq . L 6 (% rip ), % rdx addq % rdx , % rax jmp *% rax . L 6 : . L 5 : . LBB 1 1 : addq $ 3 1 , - 2 4 (% rbp ) . LBE 1 1 : jmp . L 1 7 . L 7 : . LBB 1 2 : addq $ 3 0 , - 2 4 (% rbp ) . LBE 1 2 : jmp . L 1 7 . L 8 : . LBB 1 3 : . LBB 1 4 : . LBB 1 5 : movq - 3 2 (% rbp ), % rax andl $ 3 , % eax testq % rax , % rax jne . L 2 0 . LBB 1 6 : . LBB 1 7 : movq - 3 2 (% rbp ), % rcx movabsq $- 6 6 4 0 8 2 7 8 6 6 5 3 5 4 3 8 5 8 1 , % rdx movq % rcx , % rax imulq % rdx leaq (% rdx ,% rcx ), % rax sarq $ 6 , % rax movq % rcx , % rsi sarq $ 6 3 , % rsi subq % rsi , % rax movq % rax , % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax leaq 0 (,% rax , 4 ), % rdx addq % rdx , % rax salq $ 2 , % rax subq % rax , % rcx movq % rcx , % rdx testq % rdx , % rdx jne . L 1 0 . LBB 1 8 : . LBB 1 9 : movq - 3 2 (% rbp ), % rcx movabsq $- 6 6 4 0 8 2 7 8 6 6 5 3 5 4 3 8 5 8 1 , % rdx movq % rcx , % rax imulq % rdx leaq (% rdx ,% rcx ), % rax sarq $ 8 , % rax movq % rcx , % rsi sarq $ 6 3 , % rsi subq % rsi , % rax movq % rax , % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax leaq 0 (,% rax , 4 ), % rdx addq % rdx , % rax salq $ 4 , % rax subq % rax , % rcx movq % rcx , % rdx testq % rdx , % rdx jne . L 2 0 . LBB 2 0 : addq $ 2 9 , - 2 4 (% rbp ) . LBE 2 0 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : jmp . L 2 0 . L 1 0 : . LBB 2 6 : . LBB 2 5 : . LBB 2 4 : . LBB 2 3 : . LBB 2 2 : . LBB 2 1 : addq $ 2 9 , - 2 4 (% rbp ) . L 2 0 : . LBE 2 1 : . LBE 2 2 : . LBE 2 3 : . LBE 2 4 : . LBE 2 5 : . LBE 2 6 : nop . L 1 7 : . LBE 1 0 : movq - 2 4 (% rbp ), % rcx movabsq $ 5 2 7 0 4 9 8 3 0 6 7 7 4 1 5 7 6 0 5 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movq % rax , % rdx salq $ 3 , % rdx subq % rax , % rdx movq % rcx , % rax subq % rdx , % rax movq % rax , - 2 4 (% rbp ) . LBB 2 7 : . LBB 2 8 : cmpq $ 0 , - 2 4 (% rbp ) sete % al testb % al , % al je . L 1 1 . LBB 2 9 : cmpq $ 1 9 0 0 , - 3 2 (% rbp ) setg % al . L 1 1 : . LBE 2 9 : . LBE 2 8 : testb % al , % al je . L 1 2 . LBB 3 0 : addq $ 1 , - 8 (% rbp ) . L 1 2 : . LBE 3 0 : . LBE 2 7 : . LBE 9 : . LBB 3 1 : addq $ 1 , - 1 6 (% rbp ) . L 3 : . LBE 3 1 : cmpq $ 1 2 , - 1 6 (% rbp ) jle . L 2 1 . LBE 7 : . LBE 6 : . LBE 5 : . LBB 3 2 : addq $ 1 , - 3 2 (% rbp ) . L 2 : . LBE 3 2 : cmpq $ 2 0 0 0 , - 3 2 (% rbp ) jle . L 2 2 . LBE 3 : . LBE 2 : call runtime . printlock @ PLT movq - 8 (% rbp ), % rax movq % rax , % rdi call runtime . printint @ PLT call runtime . printnl @ PLT call runtime . printunlock @ PLT leave ret
. LFB 0 : leaq - 4 7 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 movl $ 4 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 2 4 , % rsp movq % rdi , - 4 5 6 (% rbp ) movb $ 0 , - 4 9 (% rbp ) movq $ 0 , - 4 4 8 (% rbp ) movq $ 0 , - 4 4 0 (% rbp ) movq $ 0 , - 4 3 2 (% rbp ) movb $ 1 , - 4 9 (% rbp ) movb $ 5 3 , - 4 1 7 (% rbp ) movb $ 5 1 , - 4 1 6 (% rbp ) movb $ 4 6 , - 4 1 5 (% rbp ) movb $ 4 6 , - 4 1 4 (% rbp ) movb $ 5 5 , - 4 1 3 (% rbp ) movb $ 4 6 , - 4 1 2 (% rbp ) movb $ 4 6 , - 4 1 1 (% rbp ) movb $ 4 6 , - 4 1 0 (% rbp ) movb $ 4 6 , - 4 0 9 (% rbp ) movb $ 5 4 , - 4 0 8 (% rbp ) movb $ 4 6 , - 4 0 7 (% rbp ) movb $ 4 6 , - 4 0 6 (% rbp ) movb $ 4 9 , - 4 0 5 (% rbp ) movb $ 5 7 , - 4 0 4 (% rbp ) movb $ 5 3 , - 4 0 3 (% rbp ) movb $ 4 6 , - 4 0 2 (% rbp ) movb $ 4 6 , - 4 0 1 (% rbp ) movb $ 4 6 , - 4 0 0 (% rbp ) movb $ 4 6 , - 3 9 9 (% rbp ) movb $ 5 7 , - 3 9 8 (% rbp ) movb $ 5 6 , - 3 9 7 (% rbp ) movb $ 4 6 , - 3 9 6 (% rbp ) movb $ 4 6 , - 3 9 5 (% rbp ) movb $ 4 6 , - 3 9 4 (% rbp ) movb $ 4 6 , - 3 9 3 (% rbp ) movb $ 5 4 , - 3 9 2 (% rbp ) movb $ 4 6 , - 3 9 1 (% rbp ) movb $ 5 6 , - 3 9 0 (% rbp ) movb $ 4 6 , - 3 8 9 (% rbp ) movb $ 4 6 , - 3 8 8 (% rbp ) movb $ 4 6 , - 3 8 7 (% rbp ) movb $ 5 4 , - 3 8 6 (% rbp ) movb $ 4 6 , - 3 8 5 (% rbp ) movb $ 4 6 , - 3 8 4 (% rbp ) movb $ 4 6 , - 3 8 3 (% rbp ) movb $ 5 1 , - 3 8 2 (% rbp ) movb $ 5 2 , - 3 8 1 (% rbp ) movb $ 4 6 , - 3 8 0 (% rbp ) movb $ 4 6 , - 3 7 9 (% rbp ) movb $ 5 6 , - 3 7 8 (% rbp ) movb $ 4 6 , - 3 7 7 (% rbp ) movb $ 5 1 , - 3 7 6 (% rbp ) movb $ 4 6 , - 3 7 5 (% rbp ) movb $ 4 6 , - 3 7 4 (% rbp ) movb $ 4 9 , - 3 7 3 (% rbp ) movb $ 5 5 , - 3 7 2 (% rbp ) movb $ 4 6 , - 3 7 1 (% rbp ) movb $ 4 6 , - 3 7 0 (% rbp ) movb $ 4 6 , - 3 6 9 (% rbp ) movb $ 5 0 , - 3 6 8 (% rbp ) movb $ 4 6 , - 3 6 7 (% rbp ) movb $ 4 6 , - 3 6 6 (% rbp ) movb $ 4 6 , - 3 6 5 (% rbp ) movb $ 5 4 , - 3 6 4 (% rbp ) movb $ 4 6 , - 3 6 3 (% rbp ) movb $ 5 4 , - 3 6 2 (% rbp ) movb $ 4 6 , - 3 6 1 (% rbp ) movb $ 4 6 , - 3 6 0 (% rbp ) movb $ 4 6 , - 3 5 9 (% rbp ) movb $ 4 6 , - 3 5 8 (% rbp ) movb $ 5 0 , - 3 5 7 (% rbp ) movb $ 5 6 , - 3 5 6 (% rbp ) movb $ 4 6 , - 3 5 5 (% rbp ) movb $ 4 6 , - 3 5 4 (% rbp ) movb $ 4 6 , - 3 5 3 (% rbp ) movb $ 4 6 , - 3 5 2 (% rbp ) movb $ 5 2 , - 3 5 1 (% rbp ) movb $ 4 9 , - 3 5 0 (% rbp ) movb $ 5 7 , - 3 4 9 (% rbp ) movb $ 4 6 , - 3 4 8 (% rbp ) movb $ 4 6 , - 3 4 7 (% rbp ) movb $ 5 3 , - 3 4 6 (% rbp ) movb $ 4 6 , - 3 4 5 (% rbp ) movb $ 4 6 , - 3 4 4 (% rbp ) movb $ 4 6 , - 3 4 3 (% rbp ) movb $ 4 6 , - 3 4 2 (% rbp ) movb $ 5 6 , - 3 4 1 (% rbp ) movb $ 4 6 , - 3 4 0 (% rbp ) movb $ 4 6 , - 3 3 9 (% rbp ) movb $ 5 5 , - 3 3 8 (% rbp ) movb $ 5 7 , - 3 3 7 (% rbp ) leaq - 4 1 7 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq $ 9 , - 3 2 8 (% rbp ) movq $ 9 , - 3 2 0 (% rbp ) leaq - 4 0 8 (% rbp ), % rax movq % rax , - 3 1 2 (% rbp ) movq $ 9 , - 3 0 4 (% rbp ) movq $ 9 , - 2 9 6 (% rbp ) leaq - 3 9 9 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 9 , - 2 8 0 (% rbp ) movq $ 9 , - 2 7 2 (% rbp ) leaq - 3 9 0 (% rbp ), % rax movq % rax , - 2 6 4 (% rbp ) movq $ 9 , - 2 5 6 (% rbp ) movq $ 9 , - 2 4 8 (% rbp ) leaq - 3 8 1 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 9 , - 2 3 2 (% rbp ) movq $ 9 , - 2 2 4 (% rbp ) leaq - 3 7 2 (% rbp ), % rax movq % rax , - 2 1 6 (% rbp ) movq $ 9 , - 2 0 8 (% rbp ) movq $ 9 , - 2 0 0 (% rbp ) leaq - 3 6 3 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq $ 9 , - 1 8 4 (% rbp ) movq $ 9 , - 1 7 6 (% rbp ) leaq - 3 5 4 (% rbp ), % rax movq % rax , - 1 6 8 (% rbp ) movq $ 9 , - 1 6 0 (% rbp ) movq $ 9 , - 1 5 2 (% rbp ) leaq - 3 4 5 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 9 , - 1 3 6 (% rbp ) movq $ 9 , - 1 2 8 (% rbp ) leaq - 3 3 6 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq $ 9 , - 4 4 0 (% rbp ) movq $ 9 , - 4 3 2 (% rbp ) . LBB 2 : subq $ 8 , % rsp pushq - 4 3 2 (% rbp ) pushq - 4 4 0 (% rbp ) pushq - 4 4 8 (% rbp ) call go . leetcode . isValidSudoku addq $ 3 2 , % rsp cmpb % al , - 4 9 (% rbp ) je . L 1 . LBB 3 : leaq bool .. d (% rip ), % r 1 4 leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 1 2 (% rbp ) movq - 1 1 2 (% rbp ), % rax movzbl - 4 9 (% rbp ), % edx movb % dl , (% rax ) movq - 1 1 2 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 . LBB 4 : movq - 1 0 4 (% rbp ), % rcx movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 : jmp . L 4 . L 3 : . LBB 5 : movq - 1 0 4 (% rbp ), % rax leaq - 9 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 : . LBE 5 : movq - 1 0 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 1 , - 7 2 (% rbp ) movq $ 1 , - 6 4 (% rbp ) leaq . LC 5 (% rip ), % r 1 2 movl $ 1 4 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq - 4 5 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 1 : . LBE 3 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 9 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : . LEHB 0 : ret . L 1 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx addq $- 1 2 8 , % rsp . LEHE 0 : movq % rdi , - 1 5 2 (% rbp ) movb $ 0 , - 1 2 9 (% rbp ) movb $ 0 , - 3 3 (% rbp ) . LBB 2 : cmpq $ 0 , - 1 5 2 (% rbp ) jne . L 2 . LEHB 1 : call runtime . panicmem @ PLT . L 2 : movq - 1 5 2 (% rbp ), % rax addq $ 5 6 , % rax movq % rax , % rdi call sync . Mutex . Lock @ PLT . LBB 3 : cmpq $ 0 , - 1 5 2 (% rbp ) jne . L 3 call runtime . panicmem @ PLT . L 3 : movq - 1 5 2 (% rbp ), % rax leaq 5 6 (% rax ), % rdx movq $ 0 , - 5 6 (% rbp ) leaq - 5 6 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rdx , (% rax ) movq - 4 8 (% rbp ), % rdx leaq go . circularbuffer . go . circularbuffer .. thunk 0 (% rip ), % rdi leaq - 1 2 9 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rax movq % rdx , % rcx movq % rdi , % rdx movq % rax , % rdi call runtime . deferprocStack @ PLT . LBE 3 : movq - 1 5 2 (% rbp ), % rax movq 4 8 (% rax ), % rax testq % rax , % rax je . L 4 movq (% rax ), % rax testq % rax , % rax jne . L 5 . L 4 : movl $ 1 , % eax jmp . L 6 . L 5 : movl $ 0 , % eax . L 6 : movb % al , - 3 4 (% rbp ) . LBB 4 : cmpb $ 0 , - 3 4 (% rbp ) je . L 7 . LBB 5 : . LBB 6 : movq - 1 5 2 (% rbp ), % rax movq 8 (% rax ), % rdx movq - 1 5 2 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx je . L 7 . LBB 7 : leaq string .. d (% rip ), % r 1 2 leaq go .. C 6 (% rip ), % r 1 3 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . gopanic @ PLT . LEHE 1 : . L 7 : . LBE 7 : . LBE 6 : . LBE 5 : . LBE 4 : . LBB 8 : movzbl - 3 4 (% rbp ), % eax movb % al , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % ebx movl $ 0 , % r 1 2 d . L 1 4 : . LBE 8 : . LBE 2 : leaq - 1 2 9 (% rbp ), % rax movq % rax , % rdi . LEHB 2 : call runtime . deferreturn @ PLT . LEHE 2 : cmpl $ 1 , % r 1 2 d je . L 8 movl % ebx , % eax jmp . L 1 8 . L 1 5 : leaq - 1 2 9 (% rbp ), % rax movq % rax , % rdi . LEHB 3 : call runtime . checkdefer @ PLT . LEHE 3 : movzbl - 3 3 (% rbp ), % ebx movl $ 0 , % r 1 2 d jmp . L 1 4 . L 1 6 : movq % rax , % r 1 4 movl $ 1 , % r 1 2 d jmp . L 1 4 . L 8 : movq % r 1 4 , % rax movq % rax , % rdi . LEHB 4 : call _Unwind_Resume @ PLT . L 1 7 : leaq - 1 2 9 (% rbp ), % rax movq % rax , % rdi call runtime . checkdefer @ PLT jmp . L 1 4 . L 1 8 : subq $- 1 2 8 , % rsp . LEHE 4 : popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 3 0 movl $ 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 0 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq $ 0 , - 1 6 (% rbp ) . LBB 2 4 : movq $ 0 , - 8 (% rbp ) . LBB 2 5 : movq $ 0 , - 2 4 (% rbp ) . LBB 2 6 : . LBB 2 7 : . LBB 2 8 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 4 0 (% rbp ), % rcx movl $ 0 , % eax . LBE 2 8 : jmp . L 2 3 . L 2 9 : . LBB 2 9 : nop . LBE 2 9 : . LBB 3 0 : . LBB 3 1 : movq - 4 0 (% rbp ), % rdx testq % rax , % rax js . L 2 4 cmpq % rdx , % rax jge . L 2 4 movq - 4 8 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 3 1 : . LBB 3 2 : movq % rdx , - 2 4 (% rbp ) . LBE 3 2 : . LBB 3 3 : movq - 2 4 (% rbp ), % rdx addq % rdx , - 8 (% rbp ) . LBE 3 3 : . LBE 3 0 : . LBB 3 5 : addq $ 1 , % rax jmp . L 2 3 . L 2 4 : . LBE 3 5 : . LBB 3 6 : . LBB 3 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : . LBE 3 4 : . LBE 3 6 : cmpq % rcx , % rax jl . L 2 9 . LBE 2 7 : . LBE 2 6 : . LBE 2 5 : . LBB 3 7 : movq - 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax . LBE 3 7 : . LBE 2 4 : leave ret
. LFB 2 2 5 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 7 9 8 movl $ 4 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 2 8 4 : ret . L 4 7 9 8 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movb $ 0 , - 1 (% rbp ) . LBB 5 3 4 3 : . LBB 5 3 4 4 : . LBB 5 3 4 5 : . LBB 5 3 4 6 : . LBB 5 3 4 7 : . LBB 5 3 4 8 : . LBB 5 3 4 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 7 6 6 cmpq % rax , - 2 4 (% rbp ) jl . L 4 7 9 0 . L 4 7 6 6 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 9 0 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 7 , % al seta % al testb % al , % al je . L 4 7 6 8 . LBB 5 3 5 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 7 6 9 cmpq % rax , - 2 4 (% rbp ) jl . L 4 7 9 1 . L 4 7 6 9 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 9 1 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 5 7 , % al setbe % al . L 4 7 6 8 : . LBE 5 3 5 0 : . LBE 5 3 4 9 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 4 7 7 1 . LBB 5 3 5 1 : . LBB 5 3 5 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 7 7 2 cmpq % rax , - 2 4 (% rbp ) jl . L 4 7 9 2 . L 4 7 7 2 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 9 2 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 6 4 , % al seta % al testb % al , % al je . L 4 7 7 1 . LBB 5 3 5 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 7 7 5 cmpq % rax , - 2 4 (% rbp ) jl . L 4 7 9 3 . L 4 7 7 5 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 9 3 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 9 0 , % al setbe % al . L 4 7 7 1 : . LBE 5 3 5 3 : . LBE 5 3 5 2 : . LBE 5 3 5 1 : . LBE 5 3 4 8 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 4 7 7 7 . LBB 5 3 5 4 : . LBB 5 3 5 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 7 7 8 cmpq % rax , - 2 4 (% rbp ) jl . L 4 7 9 4 . L 4 7 7 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 9 4 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 9 6 , % al seta % al testb % al , % al je . L 4 7 7 7 . LBB 5 3 5 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 7 8 1 cmpq % rax , - 2 4 (% rbp ) jl . L 4 7 9 5 . L 4 7 8 1 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 9 5 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 1 2 2 , % al setbe % al . L 4 7 7 7 : . LBE 5 3 5 6 : . LBE 5 3 5 5 : . LBE 5 3 5 4 : . LBE 5 3 4 7 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 4 7 8 3 . LBB 5 3 5 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 7 8 4 cmpq % rax , - 2 4 (% rbp ) jl . L 4 7 9 6 . L 4 7 8 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 9 6 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 9 5 , % al sete % al . L 4 7 8 3 : . LBE 5 3 5 7 : . LBE 5 3 4 6 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 4 7 8 6 . LBB 5 3 5 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 7 8 7 cmpq % rax , - 2 4 (% rbp ) jl . L 4 7 9 7 . L 4 7 8 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 9 7 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 5 , % al sete % al . L 4 7 8 6 : . LBE 5 3 5 8 : . LBE 5 3 4 5 : movb % al , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax . LBE 5 3 4 4 : . LBE 5 3 4 3 : leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 2 2 3 movl $ 2 3 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 5 : ret . L 2 2 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 0 0 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) . LBB 1 9 3 : leaq - 1 6 0 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 0 , - 2 0 0 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rbx movl $ 3 6 , % r 1 2 d leaq 1 (% rbx ), % rax movq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 1 0 . LBB 1 9 4 : movq - 1 6 0 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int 3 2 .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) . LBE 1 9 4 : jmp . L 2 1 1 . L 2 1 0 : . LBB 1 9 5 : movq - 1 6 0 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rdx movq % rcx , - 2 0 8 (% rbp ) movq % rax , - 2 0 0 (% rbp ) movq % rdx , - 1 9 2 (% rbp ) . L 2 1 1 : . LBE 1 9 5 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 2 , % rdx addq % rdx , % rax movl % r 1 2 d , (% rax ) . LBB 1 9 6 : movq $ 0 , - 4 0 (% rbp ) . LBB 1 9 7 : jmp . L 2 1 2 . L 2 2 2 : . LBB 1 9 8 : nop . LBE 1 9 8 : . LBB 1 9 9 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rbx movq - 2 1 6 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 1 3 cmpq % rax , - 4 0 (% rbp ) jge . L 2 1 3 movq - 2 2 4 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % r 1 2 d movl $ 3 6 , % r 1 3 d leaq 2 (% rbx ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 2 1 4 jmp . L 2 2 0 . L 2 1 3 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 4 : . LBB 2 0 0 : movq - 1 2 8 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int 3 2 .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) . LBE 2 0 0 : jmp . L 2 1 6 . L 2 2 0 : . LBB 2 0 1 : movq - 1 2 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rdx movq % rcx , - 2 0 8 (% rbp ) movq % rax , - 2 0 0 (% rbp ) movq % rdx , - 1 9 2 (% rbp ) . L 2 1 6 : . LBE 2 0 1 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rbx , % rdx salq $ 2 , % rdx addq % rdx , % rax movl % r 1 2 d , (% rax ) leaq 1 (% rbx ), % rax movq - 1 2 8 (% rbp ), % rdx salq $ 2 , % rax addq % rdx , % rax movl % r 1 3 d , (% rax ) . LBE 1 9 9 : . LBB 2 0 2 : addq $ 1 , - 4 0 (% rbp ) . L 2 1 2 : . LBE 2 0 2 : movq - 2 1 6 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 2 2 2 . LBE 1 9 7 : . LBE 1 9 6 : . LBB 2 0 3 : subq $ 8 , % rsp pushq - 1 9 2 (% rbp ) pushq - 2 0 0 (% rbp ) pushq - 2 0 8 (% rbp ) movl $ 0 , % edi call runtime . slicerunetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx . LBE 2 0 3 : . LBE 1 9 3 : leaq - 2 4 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 7 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 3 movl $ 7 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 7 2 , % rsp movq % rdi , - 6 9 6 (% rbp ) movq % rsi , - 7 0 4 (% rbp ) movq $ 0 , - 5 6 0 (% rbp ) movq $ 0 , - 5 5 2 (% rbp ) movq $ 0 , - 5 4 4 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 7 0 4 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 5 6 0 (% rbp ) movq $ 0 , - 5 5 2 (% rbp ) movq $ 0 , - 5 4 4 (% rbp ) movq - 6 9 6 (% rbp ), % rcx movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 7 0 4 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) leaq - 5 2 8 (% rbp ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 1 , - 5 8 4 (% rbp ) movq $ 1 , - 5 7 6 (% rbp ) leaq type ... 6 0 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 2 0 (% rbp ) movq - 5 2 0 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) movq $ 0 , - 6 1 6 (% rbp ) movq $ 0 , - 6 0 8 (% rbp ) . LBB 6 : . LBB 7 : jmp . L 4 . L 5 1 : . LBB 8 : nop . LBE 8 : . LBB 9 : leaq type ... 6 0 x . 7 . 1 go . leetcode 0 1 0 7 . TreeNode (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 1 2 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 6 5 6 (% rbp ) movq $ 0 , - 6 4 8 (% rbp ) movq $ 0 , - 6 4 0 (% rbp ) leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) movq - 5 0 4 (% rbp ), % rax movq % rax , - 6 8 8 (% rbp ) movq $ 0 , - 6 8 0 (% rbp ) movq $ 0 , - 6 7 2 (% rbp ) . LBB 1 0 : movq $ 0 , - 5 6 (% rbp ) . LBB 1 1 : . LBB 1 2 : . LBB 1 3 : movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq - 4 8 8 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 1 3 : jmp . L 5 . L 5 0 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 4 8 8 (% rbp ), % rax testq % rbx , % rbx js . L 6 cmpq % rax , % rbx jge . L 6 movq - 4 9 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 6 : . LBB 1 7 : movq % rax , - 5 6 (% rbp ) . LBE 1 7 : . LBB 1 8 : movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 5 6 (% rbp ), % r 1 2 movq - 5 6 (% rbp ), % rax movq (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 4 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi ja . L 7 jmp . L 4 2 . L 6 : . LBE 1 8 : . LBB 3 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 7 : . LBE 3 3 : . LBB 3 4 : . LBB 1 9 : movq - 4 6 4 (% rbp ), % rsi leaq - 1 7 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 6 8 8 (% rbp ) movq % rdx , - 6 8 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 6 7 2 (% rbp ) . LBE 1 9 : jmp . L 9 . L 4 2 : . LBB 2 0 : movq - 4 6 4 (% rbp ), % rcx movq - 4 4 8 (% rbp ), % rdx movq % rcx , - 6 8 8 (% rbp ) movq % rax , - 6 8 0 (% rbp ) movq % rdx , - 6 7 2 (% rbp ) . L 9 : . LBE 2 0 : movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 3 , (% rax ) . LBB 2 1 : movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax je . L 1 0 . LBB 2 2 : movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 2 4 (% rbp ), % r 1 2 movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 4 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 1 . LBB 2 3 : movq - 4 3 2 (% rbp ), % rsi leaq - 1 4 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 go . leetcode 0 1 0 7 . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 6 5 6 (% rbp ) movq % rdx , - 6 4 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) . LBE 2 3 : jmp . L 1 2 . L 1 1 : . LBB 2 4 : movq - 4 3 2 (% rbp ), % rcx movq - 4 1 6 (% rbp ), % rdx movq % rcx , - 6 5 6 (% rbp ) movq % rax , - 6 4 8 (% rbp ) movq % rdx , - 6 4 0 (% rbp ) . L 1 2 : . LBE 2 4 : movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 3 . LBB 2 5 : movq % r 1 3 , (% rax ) jmp . L 1 0 . L 1 3 : . LBE 2 5 : . LBB 2 6 : movq % r 1 3 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 0 : . LBE 2 6 : . LBE 2 2 : . LBE 2 1 : . LBB 2 7 : movq - 5 6 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax je . L 1 4 . LBB 2 8 : movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 3 9 2 (% rbp ), % r 1 2 movq - 5 6 (% rbp ), % rax movq 1 6 (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 3 8 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 5 . LBB 2 9 : movq - 4 0 0 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 go . leetcode 0 1 0 7 . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 6 5 6 (% rbp ) movq % rdx , - 6 4 8 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) . LBE 2 9 : jmp . L 1 6 . L 1 5 : . LBB 3 0 : movq - 4 0 0 (% rbp ), % rcx movq - 3 8 4 (% rbp ), % rdx movq % rcx , - 6 5 6 (% rbp ) movq % rax , - 6 4 8 (% rbp ) movq % rdx , - 6 4 0 (% rbp ) . L 1 6 : . LBE 3 0 : movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 7 . LBB 3 1 : movq % r 1 3 , (% rax ) jmp . L 1 4 . L 1 7 : . LBE 3 1 : . LBB 3 2 : movq % r 1 3 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 4 : . LBE 3 2 : . LBE 2 8 : . LBE 2 7 : . LBE 3 4 : . LBE 1 5 : . LBB 3 5 : addq $ 1 , % rbx . L 5 : . LBE 3 5 : cmpq % r 1 4 , % rbx jl . L 5 0 . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 3 6 0 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 3 5 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 0 . LBB 3 6 : movq - 3 6 8 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 6 . 7 int (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 6 0 8 (% rbp ) . LBE 3 6 : jmp . L 2 1 . L 2 0 : . LBB 3 7 : movq - 3 6 8 (% rbp ), % rcx movq - 3 5 2 (% rbp ), % rdx movq % rcx , - 6 2 4 (% rbp ) movq % rax , - 6 1 6 (% rbp ) movq % rdx , - 6 0 8 (% rbp ) . L 2 1 : . LBE 3 7 : movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 3 6 8 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 6 8 8 (% rbp ), % rcx movq - 6 8 0 (% rbp ), % rbx movq % rcx , - 3 3 6 (% rbp ) movq % rbx , - 3 2 8 (% rbp ) movq - 6 7 2 (% rbp ), % rdx movq % rdx , - 3 2 0 (% rbp ) movq - 3 2 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 3 2 0 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 2 . LBB 3 8 : movq - 3 3 6 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 2 3 . L 2 2 : . LBE 3 8 : . LBB 3 9 : movq - 3 3 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 3 : . LBE 3 9 : movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) . L 4 : . LBE 9 : movq - 5 8 4 (% rbp ), % rax testq % rax , % rax jne . L 5 1 . LBE 7 : . LBE 6 : movq $ 0 , - 4 0 (% rbp ) movq - 6 1 6 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 4 8 (% rbp ) . LBB 4 0 : . LBB 4 1 : jmp . L 2 6 . L 5 2 : . LBB 4 2 : nop . LBE 4 2 : . LBB 4 3 : . LBB 4 4 : movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 4 0 (% rbp ), % rdx movq - 6 2 4 (% rbp ), % rcx movq - 6 1 6 (% rbp ), % rbx movq % rcx , - 2 7 2 (% rbp ) movq % rbx , - 2 6 4 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 4 8 (% rbp ), % rbx movq - 6 1 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 7 cmpq % rax , - 4 8 (% rbp ) jl . L 4 5 . L 2 7 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 6 2 4 (% rbp ), % rsi movq - 4 8 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 4 0 (% rbp ) movq % rdi , - 2 3 2 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 6 1 6 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 9 cmpq % rax , - 4 0 (% rbp ) jl . L 4 6 . L 2 9 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq - 6 2 4 (% rbp ), % rsi movq - 4 0 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 0 8 (% rbp ) movq % rdi , - 2 0 0 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 9 6 (% rbp ), % rax testq % rdx , % rdx js . L 3 1 cmpq % rax , % rdx jl . L 4 7 . L 3 1 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : movq - 3 0 4 (% rbp ), % rcx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rcx , % rax movq - 2 3 2 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 2 2 4 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 3 3 . LBB 4 5 : movq - 2 4 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 3 4 . L 3 3 : . LBE 4 5 : . LBB 4 6 : movq - 2 4 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 4 : . LBE 4 6 : movq - 2 6 4 (% rbp ), % rax testq % rbx , % rbx js . L 3 5 cmpq % rax , % rbx jl . L 4 8 . L 3 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : movq - 2 7 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 2 0 0 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 9 2 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 3 7 . LBB 4 7 : movq - 2 0 8 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 3 8 . L 3 7 : . LBE 4 7 : . LBB 4 8 : movq - 2 0 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 8 : . LBE 4 8 : . LBE 4 4 : addq $ 1 , - 4 0 (% rbp ) subq $ 1 , - 4 8 (% rbp ) . L 2 6 : . LBE 4 3 : movq - 4 0 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 5 2 . LBE 4 1 : . LBE 4 0 : . LBB 4 9 : movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) movq - 6 9 6 (% rbp ), % rcx movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 4 9 : . LBE 2 : movq - 6 9 6 (% rbp ), % rax addq $ 6 7 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 8 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 : pushq % rbp movq % rsp , % rbp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 : movq $ 1 , - 8 (% rbp ) . LBB 3 : movq $ 0 , - 1 6 (% rbp ) . LBB 4 : jmp . L 2 . L 7 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 8 (% rbp ), % rax leaq (% rax ,% rax ), % rcx movabsq $ 2 4 7 5 8 8 0 0 7 8 5 7 0 7 6 0 5 5 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 2 7 , % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax movabsq $ 1 0 0 0 0 0 0 0 0 0 0 , % rdx imulq % rax , % rdx movq % rcx , % rax subq % rdx , % rax movq % rax , - 8 (% rbp ) . LBE 6 : . LBB 7 : addq $ 1 , - 1 6 (% rbp ) . L 2 : . LBE 7 : movq - 1 6 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jl . L 7 . LBE 4 : . LBE 3 : . LBB 8 : movq - 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . LBE 8 : . LBE 2 : popq % rbp ret
. LFB 0 : leaq - 1 3 3 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 4 movl $ 1 3 3 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 2 8 8 , % rsp movq % rdi , - 1 2 5 6 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 6 4 (% rbp ) movq - 1 0 6 4 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 4 , 3 2 (% rax ) movq - 1 0 6 4 (% rbp ), % rax movq % rax , - 9 9 2 (% rbp ) movq $ 5 , - 9 8 4 (% rbp ) movq $ 5 , - 9 7 6 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 5 6 (% rbp ) movq - 1 0 5 6 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 2 , 2 4 (% rax ) movq $ 1 , 3 2 (% rax ) movq - 1 0 5 6 (% rbp ), % rax movq % rax , - 9 6 8 (% rbp ) movq $ 5 , - 9 6 0 (% rbp ) movq $ 5 , - 9 5 2 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 8 (% rbp ) movq - 1 0 4 8 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 4 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 2 , 3 2 (% rax ) movq - 1 0 4 8 (% rbp ), % rax movq % rax , - 9 4 4 (% rbp ) movq $ 5 , - 9 3 6 (% rbp ) movq $ 5 , - 9 2 8 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 0 (% rbp ) movq - 1 0 4 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq $ 0 , 3 2 (% rax ) movq - 1 0 4 0 (% rbp ), % rax movq % rax , - 9 2 0 (% rbp ) movq $ 5 , - 9 1 2 (% rbp ) movq $ 5 , - 9 0 4 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 3 2 (% rbp ) movq - 1 0 3 2 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 0 , 3 2 (% rax ) movq - 1 0 3 2 (% rbp ), % rax movq % rax , - 8 9 6 (% rbp ) movq $ 5 , - 8 8 8 (% rbp ) movq $ 5 , - 8 8 0 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 2 4 (% rbp ) movq - 1 0 2 4 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 4 , 3 2 (% rax ) movq - 1 0 2 4 (% rbp ), % rax movq % rax , - 8 7 2 (% rbp ) movq $ 5 , - 8 6 4 (% rbp ) movq $ 5 , - 8 5 6 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 1 6 (% rbp ) movq - 1 0 1 6 (% rbp ), % rax movq $ 1 , (% rax ) movq - 1 0 1 6 (% rbp ), % rax movq % rax , - 8 4 8 (% rbp ) movq $ 1 , - 8 4 0 (% rbp ) movq $ 1 , - 8 3 2 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 0 8 (% rbp ) movq - 1 0 0 8 (% rbp ), % rax movq $ 0 , (% rax ) movq - 1 0 0 8 (% rbp ), % rax movq % rax , - 8 2 4 (% rbp ) movq $ 1 , - 8 1 6 (% rbp ) movq $ 1 , - 8 0 8 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 0 0 (% rbp ) movq - 1 0 0 0 (% rbp ), % rax movq $ 1 , (% rax ) movq - 1 0 0 0 (% rbp ), % rax movq % rax , - 8 0 0 (% rbp ) movq $ 1 , - 7 9 2 (% rbp ) movq $ 1 , - 7 8 4 (% rbp ) leaq - 9 9 2 (% rbp ), % rax movq % rax , - 1 0 8 8 (% rbp ) movq $ 3 , - 1 0 8 0 (% rbp ) movq $ 3 , - 1 0 7 2 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 2 movl $ 7 0 , % r 1 3 d leaq - 2 7 2 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 2 8 8 (% rbp ) pushq - 2 9 6 (% rbp ) pushq - 3 0 4 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 7 6 8 (% rbp ) movq % rdx , - 7 6 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 7 5 2 (% rbp ) . LBB 2 : movq $ 0 , - 1 2 0 0 (% rbp ) movq $ 0 , - 1 1 9 2 (% rbp ) movq $ 0 , - 1 1 8 4 (% rbp ) movq $ 0 , - 1 1 7 6 (% rbp ) movq $ 0 , - 1 1 6 8 (% rbp ) movq $ 0 , - 1 1 6 0 (% rbp ) movq $ 0 , - 1 1 5 2 (% rbp ) movq $ 0 , - 1 1 4 4 (% rbp ) movq $ 0 , - 1 1 3 6 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 1 0 8 8 (% rbp ), % rax movq - 1 0 8 0 (% rbp ), % rdx movq % rax , - 6 5 6 (% rbp ) movq % rdx , - 6 4 8 (% rbp ) movq - 1 0 7 2 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) movq - 6 4 8 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 5 : jmp . L 2 . L 1 3 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : movq - 6 4 8 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 3 cmpq % rax , % r 1 2 jge . L 3 movq - 6 5 6 (% rbp ), % rdx movq % r 1 2 , % rcx movq % rcx , % rax salq $ 3 , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 7 3 6 (% rbp ) movq % rdx , - 7 2 8 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 7 2 0 (% rbp ) movq % rdx , - 7 1 2 (% rbp ) movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 7 0 4 (% rbp ) movq % rdx , - 6 9 6 (% rbp ) movq 4 8 (% rcx ), % rax movq 5 6 (% rcx ), % rdx movq % rax , - 6 8 8 (% rbp ) movq % rdx , - 6 8 0 (% rbp ) movq 6 4 (% rcx ), % rax movq % rax , - 6 7 2 (% rbp ) . LBE 8 : . LBB 9 : movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , - 6 0 8 (% rbp ) movq % rdx , - 6 0 0 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 1 2 0 0 (% rbp ) movq % rdx , - 1 1 9 2 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 1 1 8 4 (% rbp ) movq % rdx , - 1 1 7 6 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 1 1 6 8 (% rbp ) movq % rdx , - 1 1 6 0 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 1 1 5 2 (% rbp ) movq % rdx , - 1 1 4 4 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 1 1 3 6 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 1 1 5 2 (% rbp ), % rax movq - 1 1 4 4 (% rbp ), % rdx movq % rax , - 1 1 2 0 (% rbp ) movq % rdx , - 1 1 1 2 (% rbp ) movq - 1 1 3 6 (% rbp ), % rax movq % rax , - 1 1 0 4 (% rbp ) movq - 1 2 0 0 (% rbp ), % rax movq - 1 1 9 2 (% rbp ), % rdx movq % rax , - 1 2 4 8 (% rbp ) movq % rdx , - 1 2 4 0 (% rbp ) movq - 1 1 8 4 (% rbp ), % rax movq - 1 1 7 6 (% rbp ), % rdx movq % rax , - 1 2 3 2 (% rbp ) movq % rdx , - 1 2 2 4 (% rbp ) movq - 1 1 6 8 (% rbp ), % rax movq - 1 1 6 0 (% rbp ), % rdx movq % rax , - 1 2 1 6 (% rbp ) movq % rdx , - 1 2 0 8 (% rbp ) leaq go . leetcode .. go . leetcode . para 1 3 8 9 .. d (% rip ), % rax movq % rax , - 1 3 2 8 (% rbp ) leaq go . leetcode .. go . leetcode . para 1 3 8 9 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 2 0 (% rbp ) movq - 1 2 4 8 (% rbp ), % rax movq - 1 2 4 0 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 1 2 3 2 (% rbp ), % rax movq - 1 2 2 4 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 1 2 1 6 (% rbp ), % rax movq - 1 2 0 8 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 4 jmp . L 1 1 . L 3 : . LBE 1 0 : . LBB 1 5 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 5 : . LBB 1 6 : . LBB 1 1 : movq - 5 2 0 (% rbp ), % rcx movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 1 1 : jmp . L 6 . L 1 1 : . LBB 1 2 : movq - 5 2 0 (% rbp ), % rax leaq - 5 1 2 (% rbp ), % rdx movq % rax , % rsi leaq go . leetcode .. go . leetcode . para 1 3 8 9 .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 : . LBE 1 2 : movq - 5 2 0 (% rbp ), % rax movq % rax , - 1 3 2 0 (% rbp ) movdqa - 1 3 2 8 (% rbp ), % xmm 0 movups % xmm 0 , - 4 6 4 (% rbp ) leaq - 4 6 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 , - 2 3 2 (% rbp ) movq $ 1 , - 2 2 4 (% rbp ) leaq . LC 1 9 (% rip ), % rax movq % rax , - 1 2 9 6 (% rbp ) movq $ 2 0 , - 1 2 8 8 (% rbp ) leaq - 2 0 8 (% rbp ), % rdi movq - 1 2 9 6 (% rbp ), % rax movq - 1 2 8 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdx call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) leaq - 4 1 6 (% rbp ), % rax pushq - 1 2 0 8 (% rbp ) pushq - 1 2 1 6 (% rbp ) pushq - 1 2 2 4 (% rbp ) pushq - 1 2 3 2 (% rbp ) pushq - 1 2 4 0 (% rbp ) pushq - 1 2 4 8 (% rbp ) movq % rax , % rdi call go . leetcode . createTargetArray addq $ 4 8 , % rsp leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 1 3 1 2 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 . LBB 1 3 : movq - 3 9 2 (% rbp ), % rcx movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 6 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 3 : jmp . L 8 . L 7 : . LBB 1 4 : movq - 3 9 2 (% rbp ), % rax leaq - 3 8 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 4 : movq - 3 9 2 (% rbp ), % rax movq % rax , - 1 3 0 4 (% rbp ) movdqa - 1 3 1 2 (% rbp ), % xmm 1 movups % xmm 1 , - 3 5 2 (% rbp ) leaq - 3 5 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 1 2 8 0 (% rbp ) movq $ 2 2 , - 1 2 7 2 (% rbp ) leaq - 1 4 4 (% rbp ), % rdi movq - 1 2 8 0 (% rbp ), % rax movq - 1 2 7 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdx call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) . LBE 1 6 : . LBE 7 : . LBB 1 7 : addq $ 1 , % r 1 2 . L 2 : . LBE 1 7 : cmpq % r 1 3 , % r 1 2 jl . L 1 3 . LBE 4 : . LBE 3 : . LBE 2 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 4 movl $ 3 , % r 1 5 d leaq - 8 0 (% rbp ), % rax movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 7 movl $ 7 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 7 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq $ 0 , - 2 4 (% rbp ) . LBB 2 1 : movq $ 0 , - 8 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 2 2 : movq $ 0 , - 3 2 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 2 3 : . LBB 2 4 : . LBB 2 5 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rsi movl $ 0 , % eax . LBE 2 5 : jmp . L 1 6 . L 3 6 : . LBB 2 6 : nop . LBE 2 6 : . LBB 2 7 : . LBB 2 8 : movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 1 7 cmpq % rdx , % rax jge . L 1 7 movq - 6 4 (% rbp ), % rdx movq % rax , % rcx salq $ 3 , % rcx addq % rcx , % rdx movq (% rdx ), % rdx . LBE 2 8 : . LBB 2 9 : movq % rax , - 3 2 (% rbp ) movq % rdx , - 4 0 (% rbp ) . LBE 2 9 : . LBB 3 0 : . LBB 3 1 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 8 (% rbp ) jns . L 1 8 jmp . L 1 9 . L 1 7 : . LBE 3 1 : . LBE 3 0 : . LBB 4 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : . LBE 4 0 : . LBB 4 1 : . LBB 3 9 : cmpq % rdx , - 8 (% rbp ) jl . L 3 2 . L 1 9 : movq - 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx cmpq % rdx , - 4 0 (% rbp ) jle . L 2 1 . LBB 3 2 : . LBB 3 3 : movq - 3 2 (% rbp ), % rcx movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 8 (% rbp ) js . L 2 2 cmpq % rdx , - 8 (% rbp ) jl . L 3 3 . L 2 2 : movq - 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq 1 6 (% rbp ), % rdi movq - 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rdi , % rdx movq (% rdx ), % rdx movq % rcx , - 8 (% rbp ) movq % rdx , - 1 6 (% rbp ) . LBE 3 3 : . LBE 3 2 : jmp . L 2 4 . L 2 1 : . LBB 3 4 : . LBB 3 5 : . LBB 3 6 : movq - 4 0 (% rbp ), % rdx cmpq - 1 6 (% rbp ), % rdx setg % dl testb % dl , % dl je . L 2 5 . LBB 3 7 : movq - 3 2 (% rbp ), % rdx cmpq - 8 (% rbp ), % rdx setne % dl . L 2 5 : . LBE 3 7 : . LBE 3 6 : testb % dl , % dl je . L 2 4 . LBB 3 8 : movq - 4 0 (% rbp ), % rdx movq % rdx , - 1 6 (% rbp ) . L 2 4 : . LBE 3 8 : . LBE 3 5 : . LBE 3 4 : . LBE 3 9 : . LBE 4 1 : . LBE 2 7 : . LBB 4 2 : addq $ 1 , % rax . L 1 6 : . LBE 4 2 : cmpq % rsi , % rax jl . L 3 6 . LBE 2 4 : . LBE 2 3 : . LBE 2 2 : . LBB 4 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 2 8 cmpq % rax , - 8 (% rbp ) jl . L 3 5 . L 2 8 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq 1 6 (% rbp ), % rdx movq - 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq - 1 6 (% rbp ), % rdx addq % rdx , % rdx cmpq % rdx , % rax jl . L 3 0 . LBB 4 4 : . LBB 4 5 : movq - 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 3 1 . L 3 0 : . LBE 4 5 : . LBE 4 4 : . LBE 4 3 : . LBB 4 6 : movq $- 1 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 3 1 : . LBE 4 6 : . LBE 2 1 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 movl $ 1 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 8 8 , % rsp movq % rdi , - 8 8 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 : . LBB 3 : movq $ 0 , - 3 2 (% rbp ) movb $ 0 , - 3 3 (% rbp ) . LBB 4 : movq - 8 8 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) leaq - 8 0 (% rbp ), % rax movq (% rax ), % rdx movq main . randMemo (% rip ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int 6 4 (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 3 2 (% rbp ) movb % dl , - 3 3 (% rbp ) . LBE 4 : cmpb $ 0 , - 3 3 (% rbp ) je . L 2 . LBB 5 : . LBB 6 : movq - 3 2 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 6 : . LBE 5 : . LBE 3 : . LBB 7 : cmpq $ 5 5 , - 8 8 (% rbp ) jg . L 4 . LBB 8 : movq - 8 8 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax imulq $- 2 0 0 0 0 3 , % rax , % rdx movq - 4 8 (% rbp ), % rax imulq % rax , % rax imulq - 4 8 (% rbp ), % rax imulq $ 3 0 0 0 0 7 , % rax , % rax addq % rdx , % rax leaq 1 0 0 0 0 3 (% rax ), % rcx movabsq $ 4 8 3 5 7 0 3 2 7 8 4 5 8 5 1 6 6 9 9 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 1 8 , % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax imulq $ 1 0 0 0 0 0 0 , % rax , % rdx movq % rcx , % rax subq % rdx , % rax subq $ 5 0 0 0 0 0 , % rax movq % rax , - 5 6 (% rbp ) . LBB 9 : movq - 8 8 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 5 6 (% rbp ), % rbx leaq - 7 2 (% rbp ), % rax movq (% rax ), % rdx movq main . randMemo (% rip ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int 6 4 (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % rbx , (% rax ) . LBE 9 : . LBB 1 0 : movq - 8 8 (% rbp ), % rax movq % rax , % rdi call main . S movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 3 . L 4 : . LBE 1 0 : . LBE 8 : . LBE 7 : . LBB 1 1 : movq - 8 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 8 8 (% rbp ), % rax subq $ 2 4 , % rax movq % rax , % rdi call main . S movq % rax , % rbx movq - 8 8 (% rbp ), % rax subq $ 5 5 , % rax movq % rax , % rdi call main . S addq % rbx , % rax leaq 1 0 0 0 0 0 0 (% rax ), % rcx movabsq $ 4 8 3 5 7 0 3 2 7 8 4 5 8 5 1 6 6 9 9 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 1 8 , % rax movq % rcx , % rdx sarq $ 6 3 , % rdx subq % rdx , % rax imulq $ 1 0 0 0 0 0 0 , % rax , % rdx movq % rcx , % rax subq % rdx , % rax leaq - 5 0 0 0 0 0 (% rax ), % rbx leaq - 6 4 (% rbp ), % rax movq (% rax ), % rdx movq main . randMemo (% rip ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int 6 4 (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % rbx , (% rax ) . LBE 1 1 : . LBB 1 2 : movq - 8 8 (% rbp ), % rax movq % rax , % rdi call main . S movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 3 : . LBE 1 2 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 movl $ 2 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 : pushq % rbp movq % rsp , % rbp subq $ 1 6 , % rsp . LBB 2 : movq $ 2 , - 8 (% rbp ) . L 2 : . LBB 3 : . LBB 4 : movq - 8 (% rbp ), % rax movq % rax , % rcx movl $ 0 , % edx movl $ 1 , % esi movl $ 0 , % edi call main . findAllCombos . LBE 4 : . LBB 5 : addq $ 1 , - 8 (% rbp ) . LBE 5 : jmp . L 2 . LBE 3 : . LBE 2 :
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 8 movl $ 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 3 : movq $ 0 , - 1 6 (% rbp ) . LBB 4 : jmp . L 2 . L 1 7 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 3 cmpq % rax , - 1 6 (% rbp ) jl . L 1 3 . L 3 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) je . L 5 . LBB 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 6 cmpq % rax , - 8 (% rbp ) jl . L 1 4 . L 6 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 8 cmpq % rax , - 1 6 (% rbp ) jl . L 1 5 . L 8 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) addq $ 1 , - 8 (% rbp ) . L 5 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 9 : addq $ 1 , - 1 6 (% rbp ) . L 2 : . LBE 9 : movq - 1 6 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jl . L 1 7 . LBE 4 : . LBE 3 : . LBB 1 0 : movq - 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . LBE 1 0 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 5 movl $ 1 6 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 3 6 , % rsp movq $ 0 , - 6 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 7 2 (% rbp ) . LBB 3 : movq $ 0 , - 1 5 2 (% rbp ) movq $- 1 , % rbx leaq - 1 5 2 (% rbp ), % rax movq (% rax ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % rbx , (% rax ) . LBE 3 : movq $ 0 , - 4 0 (% rbp ) movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 4 : movq $ 0 , - 8 0 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 2 . L 1 4 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq % rbx , - 8 0 (% rbp ) . LBB 1 0 : . LBB 1 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 3 cmpq % rax , - 8 0 (% rbp ) jl . L 1 2 . L 3 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : movq 1 6 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq $ 1 , % rax jne . L 5 . LBB 1 2 : addq $ 1 , - 4 0 (% rbp ) . LBE 1 2 : jmp . L 6 . L 5 : . LBB 1 3 : addq $ 1 , - 4 8 (% rbp ) . L 6 : . LBE 1 3 : . LBE 1 1 : . LBB 1 4 : movq $ 0 , - 8 8 (% rbp ) movb $ 0 , - 8 9 (% rbp ) . LBB 1 5 : movq - 4 0 (% rbp ), % rax subq - 4 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq (% rax ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 8 8 (% rbp ) movb % dl , - 8 9 (% rbp ) . LBE 1 5 : cmpb $ 0 , - 8 9 (% rbp ) je . L 7 . LBB 1 6 : movq - 8 0 (% rbp ), % rax subq - 8 8 (% rbp ), % rax movq % rax , % rdx movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 0 5 2 5 . max movq % rax , - 5 6 (% rbp ) . LBE 1 6 : jmp . L 8 . L 7 : . LBB 1 7 : . LBB 1 8 : movq - 4 0 (% rbp ), % rax subq - 4 8 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) movq - 8 0 (% rbp ), % r 1 2 leaq - 1 0 4 (% rbp ), % rax movq (% rax ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 2 , (% rax ) . L 8 : . LBE 1 8 : . LBE 1 7 : . LBE 1 4 : . LBE 1 0 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 2 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 4 . LBE 6 : . LBE 5 : . LBE 4 : . LBB 2 0 : movq - 5 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax . LBE 2 0 : . LBE 2 : addq $ 1 3 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 7 4 movl $ 1 0 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 4 : ret . L 7 4 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 8 8 , % rsp movq 2 4 (% rbp ), % rax subq $ 2 , % rax movq % rax , - 2 4 (% rbp ) . LBB 3 4 : . LBB 3 5 : jmp . L 3 7 . L 7 2 : . LBB 3 6 : nop . LBE 3 6 : . LBB 3 7 : subq $ 1 , - 2 4 (% rbp ) . L 3 7 : . LBE 3 7 : . LBB 3 8 : movq - 2 4 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax testb % al , % al je . L 3 8 . LBB 3 9 : movq - 2 4 (% rbp ), % rax addq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 3 9 cmpq % rdx , % rax jl . L 6 2 . L 3 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 2 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) js . L 4 1 cmpq % rdx , - 2 4 (% rbp ) jl . L 6 3 . L 4 1 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 3 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setle % al . L 3 8 : . LBE 3 9 : . LBE 3 8 : testb % al , % al jne . L 7 2 . LBE 3 5 : . LBE 3 4 : . LBB 4 0 : cmpq $ 0 , - 2 4 (% rbp ) js . L 4 5 . LBB 4 1 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 3 2 (% rbp ) . LBB 4 2 : . LBB 4 3 : jmp . L 4 6 . L 7 3 : . LBB 4 4 : nop . LBE 4 4 : . LBB 4 5 : subq $ 1 , - 3 2 (% rbp ) . L 4 6 : . LBE 4 5 : . LBB 4 6 : movq - 3 2 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax testb % al , % al je . L 4 7 . LBB 4 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 4 8 cmpq % rax , - 3 2 (% rbp ) jl . L 6 5 . L 4 8 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 5 0 cmpq % rax , - 2 4 (% rbp ) jl . L 6 6 . L 5 0 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 6 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setle % al . L 4 7 : . LBE 4 7 : . LBE 4 6 : testb % al , % al jne . L 7 3 . LBE 4 3 : . LBE 4 2 : . LBB 4 8 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 2 4 (% rbp ), % rdx movq 1 6 (% rbp ), % rcx movq 2 4 (% rbp ), % rbx movq % rcx , - 6 4 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 3 2 (% rbp ), % rax movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 3 2 (% rbp ) js . L 5 4 cmpq % rcx , - 3 2 (% rbp ) jl . L 6 8 . L 5 4 : movq - 3 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 8 : movq 1 6 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rdi movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 2 4 (% rbp ) js . L 5 6 cmpq % rcx , - 2 4 (% rbp ) jl . L 6 9 . L 5 6 : movq - 2 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 9 : movq 1 6 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rsi movq - 8 8 (% rbp ), % rcx testq % rdx , % rdx js . L 5 8 cmpq % rcx , % rdx jl . L 7 0 . L 5 8 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 0 : movq - 9 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq % rdi , (% rdx ) movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 6 0 cmpq % rdx , % rax jl . L 7 1 . L 6 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 1 : movq - 6 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . L 4 5 : . LBE 4 8 : . LBE 4 1 : . LBE 4 0 : movq - 2 4 (% rbp ), % rax addq $ 1 , % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call go . Solution . reverse addq $ 3 2 , % rsp movq - 8 (% rbp ), % rbx leave ret
. LFB 1 1 : leaq - 1 7 3 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 2 2 movl $ 1 7 3 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 2 : ret . L 1 2 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 6 8 8 , % rsp leaq string .. d (% rip ), % rax leaq go .. C 2 6 (% rip ), % rdx movq % rax , - 1 4 5 6 (% rbp ) movq % rdx , - 1 4 4 8 (% rbp ) leaq - 1 4 5 6 (% rbp ), % rax movq % rax , - 8 8 0 (% rbp ) movq $ 1 , - 8 7 2 (% rbp ) movq $ 1 , - 8 6 4 (% rbp ) leaq - 8 4 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 6 4 (% rbp ) pushq - 8 7 2 (% rbp ) pushq - 8 8 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 4 8 (% rbp ), % rax movq - 8 4 0 (% rbp ), % rdx movq % rax , - 1 4 8 8 (% rbp ) movq % rdx , - 1 4 8 0 (% rbp ) movq - 8 3 2 (% rbp ), % rax movq % rax , - 1 4 7 2 (% rbp ) leaq string .. d (% rip ), % r 1 2 leaq go .. C 2 7 (% rip ), % r 1 3 movq % r 1 2 , - 1 4 0 8 (% rbp ) movq % r 1 3 , - 1 4 0 0 (% rbp ) leaq - 1 4 0 8 (% rbp ), % rax movq % rax , - 8 1 6 (% rbp ) movq $ 1 , - 8 0 8 (% rbp ) movq $ 1 , - 8 0 0 (% rbp ) leaq - 7 8 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 0 (% rbp ) pushq - 8 0 8 (% rbp ) pushq - 8 1 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , - 1 4 4 0 (% rbp ) movq % rdx , - 1 4 3 2 (% rbp ) movq - 7 6 8 (% rbp ), % rax movq % rax , - 1 4 2 4 (% rbp ) movl $ 1 0 0 0 , % edi call main . Mul 3 And 5 movq % rax , - 5 6 (% rbp ) leaq int .. d (% rip ), % r 1 3 movq % r 1 3 , - 1 7 2 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 8 (% rbp ) movq - 1 3 6 8 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , (% rdx ) movq - 1 3 6 8 (% rbp ), % rax movq % rax , - 1 7 2 0 (% rbp ) movdqa - 1 7 2 8 (% rbp ), % xmm 1 movups % xmm 1 , - 1 3 6 0 (% rbp ) leaq - 1 3 6 0 (% rbp ), % rax movq % rax , - 7 5 2 (% rbp ) movq $ 1 , - 7 4 4 (% rbp ) movq $ 1 , - 7 3 6 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 4 movl $ 1 1 , % r 1 5 d leaq - 7 2 0 (% rbp ), % rdi movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax subq $ 8 , % rsp pushq - 7 3 6 (% rbp ) pushq - 7 4 4 (% rbp ) pushq - 7 5 2 (% rbp ) movq % rcx , % rsi movq % rax , % rdx call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , - 1 3 9 2 (% rbp ) movq % rdx , - 1 3 8 4 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq % rax , - 1 3 7 6 (% rbp ) leaq string .. d (% rip ), % r 1 5 movq % r 1 5 , - 1 7 1 2 (% rbp ) leaq go .. C 2 8 (% rip ), % rax movq % rax , - 1 7 0 4 (% rbp ) movdqa - 1 7 1 2 (% rbp ), % xmm 2 movups % xmm 2 , - 1 3 1 2 (% rbp ) leaq - 1 3 1 2 (% rbp ), % rax movq % rax , - 6 8 8 (% rbp ) movq $ 1 , - 6 8 0 (% rbp ) movq $ 1 , - 6 7 2 (% rbp ) leaq - 6 5 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 7 2 (% rbp ) pushq - 6 8 0 (% rbp ) pushq - 6 8 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 1 3 4 4 (% rbp ) movq % rdx , - 1 3 3 6 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq % rax , - 1 3 2 8 (% rbp ) movl $ 4 0 0 0 0 0 0 , % edi call main . FibEvenTotal movq % rax , - 6 4 (% rbp ) movq % r 1 3 , % r 1 4 movq % r 1 4 , - 1 6 9 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 7 2 (% rbp ) movq - 1 2 7 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , (% rdx ) movq - 1 2 7 2 (% rbp ), % rax movq % rax , - 1 6 8 8 (% rbp ) movdqa - 1 6 9 6 (% rbp ), % xmm 3 movups % xmm 3 , - 1 2 6 4 (% rbp ) leaq - 1 2 6 4 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) movq $ 1 , - 6 1 6 (% rbp ) movq $ 1 , - 6 0 8 (% rbp ) leaq . LC 2 2 (% rip ), % rax movq % rax , - 1 5 6 8 (% rbp ) movq $ 1 1 , - 1 5 6 0 (% rbp ) leaq - 5 9 2 (% rbp ), % rdi movq - 1 5 6 8 (% rbp ), % rax movq - 1 5 6 0 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 6 0 8 (% rbp ) pushq - 6 1 6 (% rbp ) pushq - 6 2 4 (% rbp ) movq % rcx , % rsi movq % rax , % rdx call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 1 2 9 6 (% rbp ) movq % rdx , - 1 2 8 8 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 1 2 8 0 (% rbp ) movq % r 1 5 , - 1 6 8 0 (% rbp ) leaq go .. C 2 9 (% rip ), % rax movq % rax , - 1 6 7 2 (% rbp ) movdqa - 1 6 8 0 (% rbp ), % xmm 4 movups % xmm 4 , - 1 2 1 6 (% rbp ) leaq - 1 2 1 6 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 1 , - 5 5 2 (% rbp ) movq $ 1 , - 5 4 4 (% rbp ) leaq - 5 2 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 5 4 4 (% rbp ) pushq - 5 5 2 (% rbp ) pushq - 5 6 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 1 2 4 8 (% rbp ) movq % rdx , - 1 2 4 0 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 1 2 3 2 (% rbp ) leaq - 4 9 6 (% rbp ), % rax movabsq $ 6 0 0 8 5 1 4 7 5 1 4 3 , % rsi movq % rax , % rdi call main . LargestPrimeFactor movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 1 2 0 0 (% rbp ) movq % rdx , - 1 1 9 2 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq % rax , - 1 1 8 4 (% rbp ) movq - 1 2 0 0 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 1 1 9 2 (% rbp ), % rax movq - 1 1 8 4 (% rbp ), % rdx movq % rax , - 1 5 0 4 (% rbp ) movq % rdx , - 1 4 9 6 (% rbp ) movq % r 1 4 , - 1 6 6 4 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 1 4 4 (% rbp ) movq - 1 1 4 4 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , (% rdx ) movq - 1 1 4 4 (% rbp ), % rax movq % rax , - 1 6 5 6 (% rbp ) movdqa - 1 6 6 4 (% rbp ), % xmm 5 movups % xmm 5 , - 1 1 3 6 (% rbp ) leaq - 1 1 3 6 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq $ 1 , - 4 5 6 (% rbp ) movq $ 1 , - 4 4 8 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 1 5 5 2 (% rbp ) movq $ 1 1 , - 1 5 4 4 (% rbp ) leaq - 4 3 2 (% rbp ), % rdi movq - 1 5 5 2 (% rbp ), % rax movq - 1 5 4 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 4 4 8 (% rbp ) pushq - 4 5 6 (% rbp ) pushq - 4 6 4 (% rbp ) movq % rcx , % rsi movq % rax , % rdx call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 1 1 6 8 (% rbp ) movq % rdx , - 1 1 6 0 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 1 1 5 2 (% rbp ) movq % r 1 5 , - 1 6 4 8 (% rbp ) leaq go .. C 3 0 (% rip ), % rax movq % rax , - 1 6 4 0 (% rbp ) movdqa - 1 6 4 8 (% rbp ), % xmm 6 movups % xmm 6 , - 1 0 8 8 (% rbp ) leaq - 1 0 8 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 1 , - 3 9 2 (% rbp ) movq $ 1 , - 3 8 4 (% rbp ) leaq - 3 6 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 3 8 4 (% rbp ) pushq - 3 9 2 (% rbp ) pushq - 4 0 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 1 1 2 0 (% rbp ) movq % rdx , - 1 1 1 2 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 1 1 0 4 (% rbp ) movl $ 3 , % edi call main . LargestPalindromeProduct movq % xmm 0 , % rax movq % rax , - 8 0 (% rbp ) leaq float 6 4 .. d (% rip ), % rax movq % rax , - 1 6 3 2 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 8 (% rbp ) movq - 1 0 4 8 (% rbp ), % rax movsd - 8 0 (% rbp ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 1 0 4 8 (% rbp ), % rax movq % rax , - 1 6 2 4 (% rbp ) movdqa - 1 6 3 2 (% rbp ), % xmm 7 movups % xmm 7 , - 1 0 4 0 (% rbp ) leaq - 1 0 4 0 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq $ 1 , - 3 2 8 (% rbp ) movq $ 1 , - 3 2 0 (% rbp ) leaq . LC 2 4 (% rip ), % rax movq % rax , - 1 5 3 6 (% rbp ) movq $ 1 1 , - 1 5 2 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq - 1 5 3 6 (% rbp ), % rcx movq - 1 5 2 8 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 3 2 0 (% rbp ) pushq - 3 2 8 (% rbp ) pushq - 3 3 6 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 0 7 2 (% rbp ) movq % rdx , - 1 0 6 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 0 5 6 (% rbp ) movq % r 1 5 , - 1 6 1 6 (% rbp ) leaq go .. C 3 1 (% rip ), % rax movq % rax , - 1 6 0 8 (% rbp ) movdqa - 1 6 1 6 (% rbp ), % xmm 1 movups % xmm 1 , - 9 9 2 (% rbp ) leaq - 9 9 2 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq $ 1 , - 2 6 4 (% rbp ) movq $ 1 , - 2 5 6 (% rbp ) leaq - 2 4 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 5 6 (% rbp ) pushq - 2 6 4 (% rbp ) pushq - 2 7 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 0 2 4 (% rbp ) movq % rdx , - 1 0 1 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 1 0 0 8 (% rbp ) movl $ 2 0 , % edi call main . LeastCommonMultiple movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 1 6 0 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 9 5 2 (% rbp ) movq - 9 5 2 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rdx , (% rax ) movq - 9 5 2 (% rbp ), % rax movq % rax , - 1 5 9 2 (% rbp ) movdqa - 1 6 0 0 (% rbp ), % xmm 2 movups % xmm 2 , - 9 4 4 (% rbp ) leaq - 9 4 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 1 , - 2 0 0 (% rbp ) movq $ 1 , - 1 9 2 (% rbp ) leaq . LC 2 5 (% rip ), % rax movq % rax , - 1 5 2 0 (% rbp ) movq $ 1 1 , - 1 5 1 2 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movq - 1 5 2 0 (% rbp ), % rcx movq - 1 5 1 2 (% rbp ), % rbx movq % rcx , % rsi movq % rbx , % rdi movq % rbx , % rdx subq $ 8 , % rsp pushq - 1 9 2 (% rbp ) pushq - 2 0 0 (% rbp ) pushq - 2 0 8 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 9 7 6 (% rbp ) movq % rdx , - 9 6 8 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 9 6 0 (% rbp ) movq % r 1 5 , - 1 5 8 4 (% rbp ) leaq go .. C 3 2 (% rip ), % rax movq % rax , - 1 5 7 6 (% rbp ) movdqa - 1 5 8 4 (% rbp ), % xmm 3 movups % xmm 3 , - 8 9 6 (% rbp ) leaq - 8 9 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 1 , - 1 3 6 (% rbp ) movq $ 1 , - 1 2 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 9 2 8 (% rbp ) movq % rdx , - 9 2 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 9 1 2 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 4 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 4 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movb $ 9 7 , - 3 (% rbp ) movb $ 9 8 , - 2 (% rbp ) movb $ 9 9 , - 1 (% rbp ) leaq - 3 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq $ 3 , - 2 4 (% rbp ) movq $ 3 , - 1 6 (% rbp ) subq $ 8 , % rsp pushq - 1 6 (% rbp ) pushq - 2 4 (% rbp ) pushq - 3 2 (% rbp ) movl $ 0 , % edi call go . problem 3 8 . permutation addq $ 3 2 , % rsp leave ret
. LFB 5 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 6 movl $ 3 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 5 : ret . L 7 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 8 0 , % rsp movq $ 2 , - 7 2 (% rbp ) movq $ 9 9 9 , - 8 0 (% rbp ) leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 7 2 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) movq $ 0 , - 4 0 (% rbp ) movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 4 6 : movq - 8 0 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBB 4 7 : jmp . L 5 8 . L 7 5 : . LBB 4 8 : nop . LBE 4 8 : . LBB 4 9 : leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) movq $ 1 , - 5 6 (% rbp ) . LBB 5 0 : . LBB 5 1 : jmp . L 5 9 . L 7 4 : . LBB 5 2 : nop . LBE 5 2 : . LBB 5 3 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 6 0 . LBB 5 4 : movq - 2 5 6 (% rbp ), % rsi leaq - 1 7 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 5 4 : jmp . L 6 1 . L 6 0 : . LBB 5 5 : movq - 2 5 6 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 6 1 : . LBE 5 5 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 5 6 (% rbp ), % rax movq % rax , (% rdx ) movq - 5 6 (% rbp ), % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax cmpq $- 1 , - 6 4 (% rbp ) jne . L 6 2 movl $ 0 , % eax jmp . L 6 3 . L 6 2 : cmpq $ 0 , - 6 4 (% rbp ) jne . L 6 4 call runtime . panicdivide @ PLT . L 6 4 : cqto idivq - 6 4 (% rbp ) movq % rdx , % rax . L 6 3 : movq % rax , - 5 6 (% rbp ) . L 5 9 : . LBE 5 3 : . LBB 5 6 : cmpq $ 0 , - 5 6 (% rbp ) setne % al testb % al , % al je . L 6 5 . LBB 5 7 : movq - 5 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 8 8 (% rbp ) pushq - 2 9 6 (% rbp ) pushq - 3 0 4 (% rbp ) movq % rax , % rdi call go . algo . Contains addq $ 3 2 , % rsp xorl $ 1 , % eax . L 6 5 : . LBE 5 7 : . LBE 5 6 : testb % al , % al jne . L 7 4 . LBE 5 1 : . LBE 5 0 : . LBB 5 8 : movq - 2 9 6 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) jge . L 6 8 . LBB 5 9 : movq - 2 9 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . L 6 8 : . LBE 5 9 : . LBE 5 8 : . LBE 4 9 : . LBB 6 0 : subq $ 1 , - 6 4 (% rbp ) . L 5 8 : . LBE 6 0 : . LBB 6 1 : movq - 6 4 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax setge % al testb % al , % al je . L 6 9 . LBB 6 2 : movq - 4 0 (% rbp ), % rax cmpq - 6 4 (% rbp ), % rax setl % al . L 6 9 : . LBE 6 2 : . LBE 6 1 : testb % al , % al jne . L 7 5 . LBE 4 7 : . LBE 4 6 : leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 2 0 0 (% rbp ), % rax movq - 4 8 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 0 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 1 9 2 (% rbp ) movq % r 1 3 , - 1 8 4 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 1 , - 1 3 6 (% rbp ) movq $ 1 , - 1 2 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq - 2 4 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 0 movl $ 1 3 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 2 0 , % rsp movq % rdi , - 1 2 0 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) movq 2 4 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 1 2 (% rbp ) movq % rbx , - 1 0 4 (% rbp ) movq % rbx , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rax testq % rax , % rax jg . L 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq - 1 1 2 (% rbp ), % rax movq $ 1 , (% rax ) . LBB 3 : movq $ 0 , - 4 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rsi movl $ 0 , % eax . LBE 6 : jmp . L 3 . L 1 9 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 4 cmpq % rdx , % rax jge . L 4 movq - 8 0 (% rbp ), % rdx movq % rax , % rcx salq $ 3 , % rcx addq % rcx , % rdx movq (% rdx ), % rdx . LBE 9 : . LBB 1 0 : movq % rdx , - 4 8 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 4 8 (% rbp ), % rdx addq % rdx , - 2 4 (% rbp ) . LBB 1 2 : movq - 2 4 (% rbp ), % rdx cmpq - 1 2 0 (% rbp ), % rdx jge . L 5 jmp . L 6 . L 4 : . LBE 1 2 : . LBE 1 1 : . LBB 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 : . LBE 1 5 : . LBB 1 6 : . LBB 1 4 : . LBB 1 3 : movq - 2 4 (% rbp ), % rdx subq - 1 2 0 (% rbp ), % rdx movq - 1 0 4 (% rbp ), % rcx testq % rdx , % rdx js . L 7 cmpq % rcx , % rdx jl . L 1 6 . L 7 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : movq - 1 1 2 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx addq % rdx , - 3 2 (% rbp ) . L 6 : . LBE 1 3 : . LBE 1 4 : movq - 1 0 4 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) js . L 9 cmpq % rdx , - 2 4 (% rbp ) jge . L 9 movq - 1 0 4 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) jns . L 1 0 jmp . L 1 1 . L 9 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : cmpq % rdx , - 2 4 (% rbp ) jl . L 1 7 . L 1 1 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : movq - 1 1 2 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 1 1 2 (% rbp ), % rdi movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rdi , % rdx addq $ 1 , % rcx movq % rcx , (% rdx ) . LBE 1 6 : . LBE 8 : . LBB 1 7 : addq $ 1 , % rax . L 3 : . LBE 1 7 : cmpq % rsi , % rax jl . L 1 9 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 8 : movq - 3 2 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 1 8 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 5 movl $ 1 2 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp subq $ 1 1 2 , % rsp movq % rdi , - 1 0 4 (% rbp ) movb $ 0 , - 1 7 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movb $ 0 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 0 (% rbp ) . LBB 6 : movq $ 0 , - 8 (% rbp ) movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . LBB 7 : jmp . L 5 . L 2 4 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 6 cmpq % rax , - 8 (% rbp ) jl . L 1 9 . L 6 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : movq 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 8 cmpq % rax , - 1 6 (% rbp ) jge . L 8 movq - 9 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 1 0 4 (% rbp ) je . L 9 jmp . L 2 0 . L 8 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 9 : . LBB 1 1 : . LBB 1 2 : movb $ 1 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax jmp . L 3 . L 2 0 : . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : . LBB 1 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 1 1 cmpq % rax , - 8 (% rbp ) jl . L 2 1 . L 1 1 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : movq 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 3 cmpq % rax , - 1 6 (% rbp ) jge . L 1 3 movq - 6 4 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 1 0 4 (% rbp ) jl . L 1 4 jmp . L 2 2 . L 1 3 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : . LBB 1 4 : subq $ 1 , - 1 6 (% rbp ) . LBE 1 4 : jmp . L 5 . L 2 2 : . LBB 1 5 : addq $ 1 , - 8 (% rbp ) . L 5 : . LBE 1 5 : . LBE 1 3 : . LBE 9 : . LBB 1 6 : movq - 8 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax setl % al testb % al , % al je . L 1 6 . LBB 1 7 : movq - 1 6 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax . L 1 6 : . LBE 1 7 : . LBE 1 6 : testb % al , % al jne . L 2 4 . LBE 7 : . LBE 6 : . LBB 1 8 : movb $ 0 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax . L 3 : . LBE 1 8 : . LBE 2 : leave ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 3 movl $ 2 1 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 8 4 , % rsp movq % rdi , - 2 0 0 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) . LBB 2 : leaq type ... 6 0 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) . L 2 : . LBB 3 : movq $ 0 , - 4 0 (% rbp ) . LBB 4 : jmp . L 3 . L 3 2 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 4 cmpq % rax , - 4 0 (% rbp ) jl . L 2 5 . L 4 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 8 (% rax ), % rax movq % rdx , % rdi movq % rax , % rsi call strings . ToLower @ PLT movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) . LBB 7 : movq $ 1 , - 4 8 (% rbp ) . LBB 8 : jmp . L 6 . L 3 1 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : . LBB 1 1 : movq - 1 8 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 7 cmpq % rax , - 4 8 (% rbp ) jge . L 7 movq - 1 9 2 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 8 2 (% rbp ) movq main . byteMap (% rip ), % rax leaq - 8 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. map . 6 uint 8 . 7 int (% rip ), % rdi call runtime . mapaccess 1 @ PLT movq % rax , % rbx movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 1 8 4 (% rbp ), % rdx testq % rax , % rax jns . L 8 jmp . L 9 . L 7 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 : cmpq % rdx , % rax jge . L 9 movq - 1 9 2 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 8 1 (% rbp ) movq main . byteMap (% rip ), % rax leaq - 8 1 (% rbp ), % rdx movq % rax , % rsi leaq type .. map . 6 uint 8 . 7 int (% rip ), % rdi call runtime . mapaccess 1 @ PLT movq (% rbx ), % rdx movq (% rax ), % rax cmpq % rax , % rdx jne . L 3 0 jmp . L 2 6 . L 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : . LBE 1 1 : . LBE 1 0 : . LBB 1 4 : addq $ 1 , - 4 8 (% rbp ) . L 6 : . LBE 1 4 : movq - 1 8 4 (% rbp ), % rax cmpq % rax , - 4 8 (% rbp ) jl . L 3 1 . LBE 8 : . LBE 7 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rbx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 5 cmpq % rax , - 4 0 (% rbp ) jl . L 2 8 . L 1 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq 1 6 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 movq 8 (% rax ), % r 1 3 leaq 1 (% rbx ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 7 . LBB 1 7 : movq - 1 1 2 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) . LBE 1 7 : jmp . L 1 8 . L 1 7 : . LBB 1 8 : movq - 1 1 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rcx , - 1 7 6 (% rbp ) movq % rax , - 1 6 8 (% rbp ) movq % rdx , - 1 6 0 (% rbp ) . L 1 8 : . LBE 1 8 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq % r 1 3 , % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 9 . LBB 1 9 : movq % r 1 2 , % rdx movq % rdx , (% rax ) jmp . L 2 1 . L 1 9 : . LBE 1 9 : . LBB 2 0 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 2 1 . L 3 0 : . LBE 2 0 : . LBB 2 1 : . LBB 1 6 : . LBB 1 5 : . LBB 1 3 : . LBB 1 2 : nop . L 2 1 : . LBE 1 2 : . LBE 1 3 : . LBE 1 5 : . LBE 1 6 : . LBE 2 1 : . LBE 6 : . LBB 2 2 : addq $ 1 , - 4 0 (% rbp ) . L 3 : . LBE 2 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 3 2 . LBE 4 : . LBE 3 : . LBB 2 3 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 2 0 0 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 3 : . LBE 2 : movq - 2 0 0 (% rbp ), % rax addq $ 1 8 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 8 2 movl $ 1 8 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 4 : ret . L 8 2 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 6 8 , % rsp movq % rdi , - 1 6 8 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) . LBB 4 2 : . LBB 4 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 4 : jmp . L 4 5 . L 8 1 : . LBB 4 5 : nop . LBE 4 5 : . LBB 4 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 6 cmpq % rax , - 2 4 (% rbp ) jl . L 7 0 . L 4 6 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 0 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rcx , % rax movq 8 (% rax ), % rax movq % rax , - 4 0 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 8 cmpq % rax , - 2 4 (% rbp ) jl . L 7 1 . L 4 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 1 : movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) . LBB 4 7 : movq $ 0 , - 3 2 (% rbp ) . LBB 4 8 : jmp . L 5 0 . L 8 0 : . LBB 4 9 : nop . LBE 4 9 : . LBB 5 0 : . LBB 5 1 : movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 1 6 0 (% rbp ), % rcx movq - 1 5 2 (% rbp ), % rbx movq % rcx , - 6 4 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 1 4 4 (% rbp ), % rdx movq % rdx , - 4 8 (% rbp ) movq - 4 0 (% rbp ), % rdx subq - 3 2 (% rbp ), % rdx subq $ 1 , % rdx movq - 4 0 (% rbp ), % rcx subq - 3 2 (% rbp ), % rcx subq $ 1 , % rcx movq - 1 5 2 (% rbp ), % rsi testq % rcx , % rcx js . L 5 1 cmpq % rsi , % rcx jl . L 7 2 . L 5 1 : movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 7 2 : movq - 1 6 0 (% rbp ), % rsi salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rcx movl $ 1 , % esi movq % rsi , % rdi subq % rcx , % rdi movq - 1 5 2 (% rbp ), % rcx cmpq $ 0 , - 3 2 (% rbp ) js . L 5 3 cmpq % rcx , - 3 2 (% rbp ) jl . L 7 3 . L 5 3 : movq - 3 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 3 : movq - 1 6 0 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rcx movl $ 1 , % esi subq % rcx , % rsi movq - 8 8 (% rbp ), % rcx testq % rax , % rax js . L 5 5 cmpq % rcx , % rax jl . L 7 4 . L 5 5 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 4 : movq - 9 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq % rdi , (% rax ) movq - 5 6 (% rbp ), % rax testq % rdx , % rdx js . L 5 7 cmpq % rax , % rdx jl . L 7 5 . L 5 7 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 5 : movq - 6 4 (% rbp ), % rax salq $ 3 , % rdx addq % rdx , % rax movq % rsi , (% rax ) . LBE 5 1 : . LBE 5 0 : . LBB 5 2 : addq $ 1 , - 3 2 (% rbp ) . L 5 0 : . LBE 5 2 : movq - 4 0 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax cmpq - 3 2 (% rbp ), % rax jg . L 8 0 . LBE 4 8 : . LBE 4 7 : . LBB 5 3 : movq - 4 0 (% rbp ), % rax cqto shrq $ 6 3 , % rdx addq % rdx , % rax andl $ 1 , % eax subq % rdx , % rax cmpq $ 1 , % rax jne . L 6 1 . LBB 5 4 : movq - 4 0 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq - 1 5 2 (% rbp ), % rdx testq % rax , % rax js . L 6 2 cmpq % rdx , % rax jl . L 7 7 . L 6 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 7 : movq - 4 0 (% rbp ), % rdx movq % rdx , % rcx shrq $ 6 3 , % rcx addq % rcx , % rdx sarq % rdx movq - 1 5 2 (% rbp ), % rcx testq % rdx , % rdx js . L 6 4 cmpq % rcx , % rdx jl . L 7 8 . L 6 4 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 8 : movq - 1 6 0 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 1 6 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movl $ 1 , % edx subq % rcx , % rdx movq % rdx , (% rax ) . L 6 1 : . LBE 5 4 : . LBE 5 3 : . LBE 4 6 : . LBB 5 5 : addq $ 1 , - 2 4 (% rbp ) . L 4 5 : . LBE 5 5 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 8 1 . LBE 4 4 : . LBE 4 3 : . LBB 5 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 6 8 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 5 6 : . LBE 4 2 : movq - 1 6 8 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 3 movl $ 7 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 3 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 5 6 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : . LBB 3 : . LBB 4 : movq 1 6 (% rbp ), % rax testq % rax , % rax sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 4 . LBB 5 : movq 2 4 (% rbp ), % rax testq % rax , % rax sete % al . L 4 : . LBE 5 : . LBE 4 : testb % al , % al je . L 5 . LBB 6 : . LBB 7 : movq $ 0 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 2 4 . L 5 : . LBE 7 : . LBE 6 : . LBE 3 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 6 4 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq % rbx , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx cmpq % rax , % rdx cmovle % rdx , % rax leaq 0 (,% rax , 8 ), % rdx movq 1 6 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memmove @ PLT subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) call sort . Ints @ PLT addq $ 3 2 , % rsp movq $ 0 , - 2 4 (% rbp ) movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 3 2 (% rbp ) . LBB 8 : . LBB 9 : jmp . L 7 . L 3 1 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : addq $ 1 , - 2 4 (% rbp ) . L 7 : . LBE 1 1 : . LBB 1 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) setl % al testb % al , % al je . L 8 . LBB 1 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 9 cmpq % rax , - 2 4 (% rbp ) jl . L 2 5 . L 9 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 1 cmpq % rax , - 2 4 (% rbp ) jl . L 2 6 . L 1 1 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 6 4 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx sete % al . L 8 : . LBE 1 3 : . LBE 1 2 : testb % al , % al jne . L 3 1 . LBE 9 : . LBE 8 : . LBB 1 4 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jne . L 1 6 . LBB 1 5 : . LBB 1 6 : movq $ 0 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 2 4 . L 3 2 : . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBB 1 7 : . LBB 1 8 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : subq $ 1 , - 3 2 (% rbp ) . L 1 6 : . LBE 2 0 : . LBB 2 1 : movq - 3 2 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax testb % al , % al je . L 1 7 . LBB 2 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 8 cmpq % rax , - 3 2 (% rbp ) jl . L 2 8 . L 1 8 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 2 0 cmpq % rax , - 3 2 (% rbp ) jl . L 2 9 . L 2 0 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 6 4 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx sete % al . L 1 7 : . LBE 2 2 : . LBE 2 1 : testb % al , % al jne . L 3 2 . LBE 1 8 : . LBE 1 7 : . LBB 2 3 : movq - 3 2 (% rbp ), % rax subq - 2 4 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 2 4 : . LBE 2 3 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 3 movl $ 2 4 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 2 4 , % rsp movq % rdi , - 2 3 2 (% rbp ) movq % rsi , - 2 4 0 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 2 3 2 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : leaq . LC 2 (% rip ), % rax movl $ 0 , % edx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx jmp . L 4 0 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 2 3 2 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq uint 8 .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 9 2 (% rbp ) movq % rbx , - 1 8 4 (% rbp ) movq % rbx , - 1 7 6 (% rbp ) movq - 2 3 2 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq uint 8 .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 2 4 (% rbp ) movq % rbx , - 2 1 6 (% rbp ) movq % rbx , - 2 0 8 (% rbp ) . LBB 6 : movq $ 0 , - 3 2 (% rbp ) . LBB 7 : jmp . L 4 . L 5 0 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq - 2 1 6 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 5 cmpq % rax , - 3 2 (% rbp ) jl . L 4 1 . L 5 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq - 3 2 (% rbp ), % rax movl % eax , % ecx movq - 2 2 4 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax addq % rdx , % rax leal 4 9 (% rcx ), % edx movb % dl , (% rax ) . LBE 9 : . LBB 1 0 : addq $ 1 , - 3 2 (% rbp ) . L 4 : . LBE 1 0 : movq - 3 2 (% rbp ), % rax cmpq - 2 3 2 (% rbp ), % rax jl . L 5 0 . LBE 7 : . LBE 6 : subq $ 1 , - 2 4 0 (% rbp ) movq $ 1 , - 2 4 (% rbp ) . LBB 1 1 : movq $ 2 , - 4 0 (% rbp ) . LBB 1 2 : jmp . L 9 . L 5 1 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : movq - 2 4 (% rbp ), % rax imulq - 4 0 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . LBE 1 4 : . LBB 1 5 : addq $ 1 , - 4 0 (% rbp ) . L 9 : . LBE 1 5 : movq - 4 0 (% rbp ), % rax cmpq - 2 3 2 (% rbp ), % rax jl . L 5 1 . LBE 1 2 : . LBE 1 1 : . LBB 1 6 : movq $ 0 , - 4 8 (% rbp ) . LBB 1 7 : jmp . L 1 2 . L 5 2 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : cmpq $- 1 , - 2 4 (% rbp ) jne . L 1 3 movq - 2 4 0 (% rbp ), % rax negq % rax jmp . L 1 4 . L 1 3 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 1 5 call runtime . panicdivide @ PLT . L 1 5 : movq - 2 4 0 (% rbp ), % rax cqto idivq - 2 4 (% rbp ) . L 1 4 : movq % rax , - 5 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 6 cmpq % rax , - 4 8 (% rbp ) jl . L 4 4 . L 1 6 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq - 2 1 6 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 8 cmpq % rax , - 5 6 (% rbp ) jl . L 4 5 . L 1 8 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 2 2 4 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax addq % rdx , % rax movq - 1 9 2 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx addq % rcx , % rdx movzbl (% rax ), % eax movb % al , (% rdx ) movq - 2 0 8 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 2 0 cmpq % rax , - 5 6 (% rbp ) jg . L 2 0 cmpq $ 0 , - 5 6 (% rbp ) jns . L 2 1 jmp . L 4 6 . L 2 0 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 4 6 : movq - 5 6 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 2 1 : movq - 5 6 (% rbp ), % rax addq $ 1 , % rax movq - 2 0 8 (% rbp ), % rdx testq % rax , % rax js . L 2 3 cmpq % rdx , % rax jle . L 4 7 . L 2 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 4 7 : movq - 2 2 4 (% rbp ), % rdx movq % rdx , - 1 4 4 (% rbp ) movq - 5 6 (% rbp ), % rdx movq % rdx , - 1 3 6 (% rbp ) movq - 2 0 8 (% rbp ), % rdx movq % rdx , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rbx movq - 2 2 4 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rdx cmpq % rdx , % rax je . L 2 5 movq % rax , % rdx jmp . L 2 6 . L 2 5 : movl $ 0 , % edx . L 2 6 : addq % rcx , % rdx movq % rdx , - 1 1 2 (% rbp ) movq - 2 1 6 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 1 0 4 (% rbp ) movq - 2 0 8 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % r 1 2 leaq (% rbx ,% r 1 2 ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 7 movq - 1 4 4 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq uint 8 .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) jmp . L 2 8 . L 2 7 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq % rcx , - 1 4 4 (% rbp ) movq % rax , - 1 3 6 (% rbp ) movq % rdx , - 1 2 8 (% rbp ) . L 2 8 : movq % r 1 2 , % rdx movq - 1 1 2 (% rbp ), % rax movq - 1 4 4 (% rbp ), % rcx movq % rbx , % rsi addq % rsi , % rcx movq % rax , % rsi movq % rcx , % rdi call memmove @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) cmpq $- 1 , - 2 4 (% rbp ) jne . L 2 9 movl $ 0 , % eax jmp . L 3 0 . L 2 9 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 3 1 call runtime . panicdivide @ PLT . L 3 1 : movq - 2 4 0 (% rbp ), % rax cqto idivq - 2 4 (% rbp ) movq % rdx , % rax . L 3 0 : movq % rax , - 2 4 0 (% rbp ) movq - 2 3 2 (% rbp ), % rax subq - 4 8 (% rbp ), % rax leaq - 1 (% rax ), % rbx cmpq $- 1 , % rbx jne . L 3 2 movq - 2 4 (% rbp ), % rax negq % rax jmp . L 3 3 . L 3 2 : testq % rbx , % rbx jne . L 3 4 call runtime . panicdivide @ PLT . L 3 4 : movq - 2 4 (% rbp ), % rax cqto idivq % rbx . L 3 3 : movq % rax , - 2 4 (% rbp ) . LBE 1 9 : . LBB 2 0 : addq $ 1 , - 4 8 (% rbp ) . L 1 2 : . LBE 2 0 : movq - 2 3 2 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 4 8 (% rbp ) jl . L 5 2 . LBE 1 7 : . LBE 1 6 : movq - 2 3 2 (% rbp ), % rax subq $ 1 , % rax movq - 1 8 4 (% rbp ), % rdx testq % rax , % rax js . L 3 7 cmpq % rdx , % rax jl . L 4 9 . L 3 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : movq - 2 1 6 (% rbp ), % rdx testq % rdx , % rdx jg . L 3 9 movq % rdx , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 2 2 4 (% rbp ), % rdx movq - 1 9 2 (% rbp ), % rcx addq % rax , % rcx movzbl (% rdx ), % eax movb % al , (% rcx ) . LBB 2 1 : subq $ 8 , % rsp pushq - 1 7 6 (% rbp ) pushq - 1 8 4 (% rbp ) pushq - 1 9 2 (% rbp ) movl $ 0 , % edi call runtime . slicebytetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx . L 4 0 : . LBE 2 1 : . LBE 2 : leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 1 : leaq - 7 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 1 movl $ 7 2 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 6 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 8 0 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 3 2 : leaq . LC 2 8 (% rip ), % r 8 movl $ 1 , % r 9 d movq % r 8 , - 5 1 2 (% rbp ) movq % r 9 , - 5 0 4 (% rbp ) movq $ 1 , - 4 9 6 (% rbp ) leaq . LC 2 9 (% rip ), % r 1 0 movl $ 1 , % r 1 1 d movq % r 1 0 , - 4 8 8 (% rbp ) movq % r 1 1 , - 4 8 0 (% rbp ) movq $ 5 , - 4 7 2 (% rbp ) leaq . LC 3 0 (% rip ), % r 1 2 movl $ 1 , % r 1 3 d movq % r 1 2 , - 4 6 4 (% rbp ) movq % r 1 3 , - 4 5 6 (% rbp ) movq $ 1 0 , - 4 4 8 (% rbp ) leaq . LC 3 1 (% rip ), % r 1 4 movl $ 1 , % r 1 5 d movq % r 1 4 , - 4 4 0 (% rbp ) movq % r 1 5 , - 4 3 2 (% rbp ) movq $ 5 0 , - 4 2 4 (% rbp ) leaq . LC 3 2 (% rip ), % rax movq % rax , - 6 8 8 (% rbp ) movq $ 1 , - 6 8 0 (% rbp ) movdqa - 6 8 8 (% rbp ), % xmm 0 movups % xmm 0 , - 4 1 6 (% rbp ) movq $ 1 0 0 , - 4 0 0 (% rbp ) leaq . LC 3 3 (% rip ), % rax movq % rax , - 6 7 2 (% rbp ) movq $ 1 , - 6 6 4 (% rbp ) movdqa - 6 7 2 (% rbp ), % xmm 1 movups % xmm 1 , - 3 9 2 (% rbp ) movq $ 5 0 0 , - 3 7 6 (% rbp ) leaq . LC 3 4 (% rip ), % rax movq % rax , - 6 5 6 (% rbp ) movq $ 1 , - 6 4 8 (% rbp ) movdqa - 6 5 6 (% rbp ), % xmm 2 movups % xmm 2 , - 3 6 8 (% rbp ) movq $ 1 0 0 0 , - 3 5 2 (% rbp ) leaq - 5 1 2 (% rbp ), % rax movq % rax , % r 8 movl $ 1 6 , % ecx movl $ 2 4 , % edx movl $ 7 , % esi leaq type .. map . 6 string . 7 int (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 7 2 (% rbp ) leaq . LC 2 4 (% rip ), % rax movq % rax , - 6 4 0 (% rbp ) movq $ 2 , - 6 3 2 (% rbp ) movdqa - 6 4 0 (% rbp ), % xmm 3 movups % xmm 3 , - 3 3 6 (% rbp ) movq $ 4 , - 3 2 0 (% rbp ) leaq . LC 2 5 (% rip ), % rax movq % rax , - 6 2 4 (% rbp ) movq $ 2 , - 6 1 6 (% rbp ) movdqa - 6 2 4 (% rbp ), % xmm 4 movups % xmm 4 , - 3 1 2 (% rbp ) movq $ 9 , - 2 9 6 (% rbp ) leaq . LC 3 5 (% rip ), % rax movq % rax , - 6 0 8 (% rbp ) movq $ 2 , - 6 0 0 (% rbp ) movdqa - 6 0 8 (% rbp ), % xmm 5 movups % xmm 5 , - 2 8 8 (% rbp ) movq $ 4 0 , - 2 7 2 (% rbp ) leaq . LC 3 6 (% rip ), % rax movq % rax , - 5 9 2 (% rbp ) movq $ 2 , - 5 8 4 (% rbp ) movdqa - 5 9 2 (% rbp ), % xmm 6 movups % xmm 6 , - 2 6 4 (% rbp ) movq $ 9 0 , - 2 4 8 (% rbp ) leaq . LC 3 7 (% rip ), % rax movq % rax , - 5 7 6 (% rbp ) movq $ 2 , - 5 6 8 (% rbp ) movdqa - 5 7 6 (% rbp ), % xmm 7 movups % xmm 7 , - 2 4 0 (% rbp ) movq $ 4 0 0 , - 2 2 4 (% rbp ) leaq . LC 3 8 (% rip ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 2 , - 5 5 2 (% rbp ) movdqa - 5 6 0 (% rbp ), % xmm 0 movups % xmm 0 , - 2 1 6 (% rbp ) movq $ 9 0 0 , - 2 0 0 (% rbp ) leaq - 3 3 6 (% rbp ), % rax movq % rax , % r 8 movl $ 1 6 , % ecx movl $ 2 4 , % edx movl $ 6 , % esi leaq type .. map . 6 string . 7 int (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 8 0 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 3 3 : movq $ 0 , - 5 2 8 (% rbp ) movq $ 0 , - 5 2 0 (% rbp ) movq $ 0 , - 8 8 (% rbp ) . LBB 3 4 : . LBB 3 5 : . LBB 3 6 : leaq - 1 9 2 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 3 6 : jmp . L 2 9 . L 5 9 : . LBB 3 7 : nop . LBE 3 7 : . LBB 3 8 : . LBB 3 9 : movq - 1 9 2 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq - 1 8 4 (% rbp ), % rcx movq (% rcx ), % rcx . LBE 3 9 : . LBB 4 0 : movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq % rcx , - 8 8 (% rbp ) . LBE 4 0 : . LBB 4 1 : . LBB 4 2 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq - 5 4 4 (% rbp ), % rdi movq - 5 3 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call strings . Contains @ PLT testb % al , % al je . L 3 0 . LBB 4 3 : movq - 8 8 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 5 2 8 (% rbp ), % rcx movq - 5 2 0 (% rbp ), % rbx movq - 5 4 4 (% rbp ), % rdi movq - 5 3 6 (% rbp ), % rsi subq $ 8 , % rsp pushq $- 1 movq % rax , % r 8 movq % rdx , % r 9 movq % rcx , % rdx movq % rbx , % rcx call strings . Replace @ PLT addq $ 1 6 , % rsp movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) movq - 8 8 (% rbp ), % rax addq % rax , - 5 6 (% rbp ) . L 3 0 : . LBE 4 3 : . LBE 4 2 : . LBE 4 1 : . LBE 3 8 : . LBB 4 4 : leaq - 1 9 2 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 2 9 : . LBE 4 4 : movq - 1 9 2 (% rbp ), % rax testq % rax , % rax jne . L 5 9 . LBE 3 5 : . LBE 3 4 : . LBE 3 3 : . LBB 4 5 : movq $ 0 , - 9 6 (% rbp ) . LBB 4 6 : . LBB 4 7 : . LBB 4 8 : movq - 5 3 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 4 8 : jmp . L 3 3 . L 6 0 : . LBB 4 9 : nop . LBE 4 9 : . LBB 5 0 : . LBB 5 1 : movq - 5 3 6 (% rbp ), % rax testq % rbx , % rbx js . L 3 4 cmpq % rax , % rbx jge . L 3 4 movq - 5 4 4 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 3 5 jmp . L 5 5 . L 3 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : . LBB 5 2 : leaq 1 (% rbx ), % r 1 2 . LBE 5 2 : jmp . L 3 7 . L 5 5 : . LBB 5 3 : movq - 5 4 4 (% rbp ), % rcx movq - 5 3 6 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rdx , % r 1 2 . L 3 7 : . LBE 5 3 : . LBE 5 1 : movq % rbx , - 9 6 (% rbp ) . LBB 5 4 : . LBB 5 5 : movq - 9 6 (% rbp ), % rax leaq 1 (% rax ), % rdi movq - 5 3 6 (% rbp ), % rax testq % rdi , % rdi js . L 3 8 cmpq % rax , % rdi jg . L 3 8 cmpq $ 0 , - 9 6 (% rbp ) jns . L 3 9 jmp . L 4 0 . L 3 8 : movq % rax , % rsi call runtime . goPanicSliceAlen @ PLT . L 3 9 : cmpq % rdi , - 9 6 (% rbp ) jg . L 4 0 movq - 5 4 4 (% rbp ), % rdx cmpq - 9 6 (% rbp ), % rdi jne . L 4 1 jmp . L 5 6 . L 4 0 : movq - 9 6 (% rbp ), % rax movq % rdi , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 4 1 : movq - 9 6 (% rbp ), % rax jmp . L 4 3 . L 5 6 : movl $ 0 , % eax . L 4 3 : addq % rdx , % rax movq % rax , - 7 2 0 (% rbp ) movq % rdi , % rax subq - 9 6 (% rbp ), % rax movq % rax , - 7 1 2 (% rbp ) movq - 7 2 (% rbp ), % rax movq - 7 2 0 (% rbp ), % rdx movq - 7 1 2 (% rbp ), % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq (% rax ), % rax testq % rax , % rax je . L 4 4 . LBB 5 6 : movq - 9 6 (% rbp ), % rax leaq 1 (% rax ), % rdi movq - 5 3 6 (% rbp ), % rax testq % rdi , % rdi js . L 4 5 cmpq % rax , % rdi jg . L 4 5 cmpq $ 0 , - 9 6 (% rbp ) jns . L 4 6 jmp . L 4 7 . L 4 5 : movq % rax , % rsi call runtime . goPanicSliceAlen @ PLT . L 4 6 : cmpq % rdi , - 9 6 (% rbp ) jg . L 4 7 movq - 5 4 4 (% rbp ), % rdx cmpq - 9 6 (% rbp ), % rdi jne . L 4 8 jmp . L 5 7 . L 4 7 : movq - 9 6 (% rbp ), % rax movq % rdi , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 4 8 : movq - 9 6 (% rbp ), % rax jmp . L 5 0 . L 5 7 : movl $ 0 , % eax . L 5 0 : addq % rdx , % rax movq % rax , - 7 0 4 (% rbp ) movq % rdi , % rax subq - 9 6 (% rbp ), % rax movq % rax , - 6 9 6 (% rbp ) movq - 7 2 (% rbp ), % rax movq - 7 0 4 (% rbp ), % rdx movq - 6 9 6 (% rbp ), % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movq (% rax ), % rax addq % rax , - 5 6 (% rbp ) . L 4 4 : . LBE 5 6 : . LBE 5 5 : . LBE 5 4 : . LBE 5 0 : . LBB 5 7 : movq % r 1 2 , % rbx . L 3 3 : . LBE 5 7 : cmpq % r 1 3 , % rbx jl . L 6 0 . LBE 4 7 : . LBE 4 6 : . LBE 4 5 : . LBB 5 8 : movq - 5 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax . LBE 5 8 : . LBE 3 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 6 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 4 movl $ 6 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 1 6 , % rsp movq % rdi , - 6 4 8 (% rbp ) movl $ 5 , % r 1 5 d leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 1 6 (% rbp ) movq $ 4 , - 6 0 8 (% rbp ) movq $ 0 , - 6 0 0 (% rbp ) movq $ 0 , - 5 9 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 6 1 6 (% rbp ), % rcx movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 9 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 6 1 6 (% rbp ), % rax leaq - 6 0 8 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 6 1 6 (% rbp ), % r 1 4 leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 8 4 (% rbp ) movq $ 8 , - 5 7 6 (% rbp ) movq $ 0 , - 5 6 8 (% rbp ) movq $ 0 , - 5 6 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 5 8 4 (% rbp ), % rcx movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 6 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 5 8 4 (% rbp ), % rax leaq - 5 7 6 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 5 8 4 (% rbp ), % rbx leaq . LC 2 9 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 5 2 (% rbp ) movq % r 1 5 , - 5 4 4 (% rbp ) movq % r 1 4 , - 5 3 6 (% rbp ) movq % rbx , - 5 2 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 6 : movq - 5 5 2 (% rbp ), % rcx movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 2 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 : jmp . L 7 . L 6 : . LBB 7 : movq - 5 5 2 (% rbp ), % rax leaq - 5 4 4 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 7 : movq - 5 5 2 (% rbp ), % rbx movl $ 9 , % r 1 4 d leaq type ... 6 1 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 1 2 (% rbp ) leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) movq - 5 0 4 (% rbp ), % rax movq $ 5 , (% rax ) movq $ 4 , 8 (% rax ) movq - 5 0 4 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq $ 2 , - 4 8 8 (% rbp ) movq $ 2 , - 4 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 . LBB 8 : movq - 5 1 2 (% rbp ), % rcx movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 8 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 8 : jmp . L 9 . L 8 : . LBB 9 : movq - 5 1 2 (% rbp ), % rax leaq - 4 9 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 : . LBE 9 : movq - 5 1 2 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq $ 1 , - 4 5 6 (% rbp ) movq $ 1 , - 4 4 8 (% rbp ) movq % r 1 2 , - 4 3 2 (% rbp ) movq % r 1 3 , - 4 2 4 (% rbp ) movq % rbx , - 4 1 6 (% rbp ) movq % r 1 4 , - 4 0 8 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 1 go . Solution . TreeNode . 2 . go . Solution . sum . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 . LBB 1 0 : movq - 3 7 6 (% rbp ), % rax movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 3 2 0 (% rbp ), % rdx movq % rdx , 4 8 (% rax ) . LBE 1 0 : jmp . L 1 1 . L 1 0 : . LBB 1 1 : movq - 3 7 6 (% rbp ), % rax leaq - 3 6 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 1 go . Solution . TreeNode . 2 . go . Solution . sum . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 1 : . LBE 1 1 : movq - 3 7 6 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) movq $ 1 , - 6 3 2 (% rbp ) movq $ 1 , - 6 2 4 (% rbp ) . LBB 1 2 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 1 go . Solution . TreeNode . 2 . go . Solution . sum . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 . 6 . 7 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 1 3 : . LBB 1 4 : . LBB 1 5 : movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 1 5 : jmp . L 1 2 . L 2 3 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : . LBB 1 8 : movq - 2 3 2 (% rbp ), % rax testq % rbx , % rbx js . L 1 3 cmpq % rax , % rbx jge . L 1 3 movq - 2 4 0 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 3 , % rax subq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 3 0 4 (% rbp ) movq % rdi , - 2 9 6 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 8 8 (% rbp ) movq % rdi , - 2 8 0 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 4 8 (% rax ), % rax movq % rax , - 2 5 6 (% rbp ) . LBE 1 8 : . LBB 1 9 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 1 4 jmp . L 2 1 . L 1 3 : . LBE 1 9 : . LBB 2 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : . LBE 2 2 : . LBB 2 3 : . LBB 2 0 : movq - 2 0 8 (% rbp ), % rsi movq - 2 0 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 1 6 0 (% rbp ), % rdx movq % rdx , 4 8 (% rax ) jmp . L 1 6 . L 2 1 : . LBE 2 0 : . LBB 2 1 : leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 1 go . Solution . TreeNode . 2 . go . Solution . sum . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 . 6 . 7 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 6 : . LBE 2 1 : . LBE 2 3 : . LBB 2 4 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 3 0 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 1 go . Solution . TreeNode . 2 . go . Solution . sum . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 7 . LBB 2 5 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 5 : jmp . L 1 8 . L 1 7 : . LBB 2 6 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 1 go . Solution . TreeNode . 2 . go . Solution . sum . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 . 6 . 7 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 8 : . LBE 2 6 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 6 4 8 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 2 4 : . LBE 1 7 : . LBB 2 7 : addq $ 1 , % rbx . L 1 2 : . LBE 2 7 : cmpq % r 1 3 , % rbx jl . L 2 3 . LBE 1 4 : . LBE 1 3 : . LBE 1 2 : addq $ 6 1 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 5 8 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 5 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 3 6 , % rsp movq % rdi , - 5 5 2 (% rbp ) leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . nums . 0 . 6 . 7 int . 2 . go . Solution . k . 0 int . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 1 2 (% rbp ) leaq . LC 3 7 (% rip ), % rax movq % rax , - 5 7 6 (% rbp ) movq $ 8 , - 5 6 8 (% rbp ) movdqa - 5 7 6 (% rbp ), % xmm 0 movups % xmm 0 , - 4 8 0 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) movq - 5 0 4 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq - 5 0 4 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq $ 4 , - 4 5 6 (% rbp ) movq $ 4 , - 4 4 8 (% rbp ) movq $ 3 , - 4 4 0 (% rbp ) movb $ 1 , - 4 3 2 (% rbp ) leaq . LC 3 7 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , - 4 2 4 (% rbp ) movq % r 1 5 , - 4 1 6 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 9 6 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 4 0 8 (% rbp ) movq $ 4 , - 4 0 0 (% rbp ) movq $ 4 , - 3 9 2 (% rbp ) movq $ 1 , - 3 8 4 (% rbp ) movb $ 1 , - 3 7 6 (% rbp ) leaq . LC 3 7 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 6 8 (% rbp ) movq % r 1 3 , - 3 6 0 (% rbp ) leaq type ... 6 6 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 8 (% rbp ) movq - 4 8 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq $ 2 , 3 2 (% rax ) movq $ 3 , 4 0 (% rax ) movq - 4 8 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 6 , - 3 4 4 (% rbp ) movq $ 6 , - 3 3 6 (% rbp ) movq $ 2 , - 3 2 8 (% rbp ) movb $ 0 , - 3 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 5 1 2 (% rbp ), % rax movq - 4 8 0 (% rbp ), % rcx movq - 4 7 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 6 4 (% rbp ), % rcx movq - 4 5 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 4 4 8 (% rbp ), % rcx movq - 4 4 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 4 3 2 (% rbp ), % rcx movq - 4 2 4 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 1 4 4 (% rax ) movq % rbx , 1 5 2 (% rax ) movq - 3 2 0 (% rbp ), % rdx movq % rdx , 1 6 0 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 5 1 2 (% rbp ), % rax leaq - 4 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . nums . 0 . 6 . 7 int . 2 . go . Solution . k . 0 int . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 5 1 2 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) movq $ 3 , - 5 3 6 (% rbp ) movq $ 3 , - 5 2 8 (% rbp ) . LBB 4 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . nums . 0 . 6 . 7 int . 2 . go . Solution . k . 0 int . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 3 2 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 4 0 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 3 , % rax subq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 3 0 4 (% rbp ) movq % rdi , - 2 9 6 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 8 8 (% rbp ) movq % rdi , - 2 8 0 (% rbp ) movq 3 2 (% rax ), % rsi movq 4 0 (% rax ), % rdi movq % rsi , - 2 7 2 (% rbp ) movq % rdi , - 2 6 4 (% rbp ) movq 4 8 (% rax ), % rax movq % rax , - 2 5 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 2 0 8 (% rbp ), % rsi movq - 2 0 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 9 2 (% rbp ), % rsi movq - 1 8 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) movq - 1 6 0 (% rbp ), % rdx movq % rdx , 4 8 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . nums . 0 . 6 . 7 int . 2 . go . Solution . k . 0 int . 2 . go . Solution . expect . 0 bool . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 3 8 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . nums . 0 . 6 . 7 int . 2 . go . Solution . k . 0 int . 2 . go . Solution . expect . 0 bool . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . nums . 0 . 6 . 7 int . 2 . go . Solution . k . 0 int . 2 . go . Solution . expect . 0 bool . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 5 5 2 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 5 3 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 0 movl $ 4 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 0 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jl . L 2 8 . L 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 8 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 5 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 6 cmpq % rdx , % rax jl . L 2 9 . L 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 8 cmpq % rdx , % rax jl . L 3 0 . L 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 1 6 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 1 0 . L 3 8 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 1 1 cmpq % rax , - 8 (% rbp ) jl . L 3 1 . L 1 1 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 1 : movq 1 6 (% rbp ), % rdx movq - 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 8 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 3 cmpq % rax , - 1 6 (% rbp ) jl . L 3 2 . L 1 3 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 5 cmpq % rdx , % rax jl . L 3 3 . L 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 1 6 (% rbp ) . L 1 0 : . LBE 6 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jne . L 3 8 . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 1 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 9 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 2 4 (% rbp ) . LBB 7 : . LBB 8 : jmp . L 2 0 . L 3 9 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 1 cmpq % rax , - 2 4 (% rbp ) jl . L 3 5 . L 2 1 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 2 4 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 2 3 cmpq % rax , - 8 (% rbp ) jl . L 3 6 . L 2 3 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq 1 6 (% rbp ), % rdx movq - 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 8 (% rbp ) . L 2 0 : . LBE 1 0 : movq - 2 4 (% rbp ), % rax cmpq - 8 (% rbp ), % rax jne . L 3 9 . LBE 8 : . LBE 7 : . LBB 1 1 : movq - 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . LBE 1 1 : . LBE 2 : leave ret
. LFB 0 : leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 9 movl $ 3 4 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 9 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 3 2 8 , % rsp movq % rdi , - 3 2 8 (% rbp ) movq % rsi , - 3 3 6 (% rbp ) movq $ 0 , - 7 2 (% rbp ) . LBB 2 : movq - 3 2 8 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 0 4 (% rbp ) movq % rbx , - 2 9 6 (% rbp ) movq % rbx , - 2 8 8 (% rbp ) . LBB 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 5 4 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 3 3 6 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 cmpq % rax , - 2 4 (% rbp ) jl . L 4 2 . L 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq - 3 0 4 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 2 7 2 (% rbp ) movq % rbx , - 2 6 4 (% rbp ) movq % rbx , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 2 5 6 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 . LBB 7 : movq - 2 7 2 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 6 . L 5 : . LBE 7 : . LBB 8 : movq - 2 7 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 : . LBE 8 : . LBE 6 : . LBB 9 : addq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 9 : movq - 3 2 8 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 2 4 (% rbp ) jl . L 5 4 . LBE 4 : . LBE 3 : . LBB 1 0 : movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) . LBB 1 1 : . LBB 1 2 : . LBB 1 3 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rsi movl $ 0 , % eax . LBE 1 3 : jmp . L 9 . L 5 8 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 2 3 2 (% rbp ), % rdx testq % rax , % rax js . L 1 0 cmpq % rdx , % rax jge . L 1 0 movq - 2 4 0 (% rbp ), % rdx movq % rax , % rcx salq $ 4 , % rcx addq % rcx , % rdx movq (% rdx ), % rcx movq 8 (% rdx ), % rbx . LBE 1 6 : . LBB 1 7 : movq % rcx , - 3 2 0 (% rbp ) movq % rbx , - 3 1 2 (% rbp ) . LBE 1 7 : . LBB 1 8 : movq $ 0 , - 3 2 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 1 9 : movq $ 0 , - 4 8 (% rbp ) . LBB 2 0 : jmp . L 1 1 . L 1 0 : . LBE 2 0 : . LBE 1 9 : . LBE 1 8 : . LBB 4 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 5 : . LBE 4 2 : . LBB 4 3 : . LBB 2 8 : . LBB 2 7 : . LBB 2 1 : nop . LBE 2 1 : . LBB 2 2 : . LBB 2 3 : movq - 3 1 2 (% rbp ), % rdx cmpq $ 0 , - 4 8 (% rbp ) js . L 1 2 cmpq % rdx , - 4 8 (% rbp ) jge . L 1 2 movq - 3 2 0 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx addq % rcx , % rdx movzbl (% rdx ), % edx cmpb $ 4 8 , % dl je . L 1 3 jmp . L 4 4 . L 1 2 : movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : . LBB 2 4 : addq $ 1 , - 3 2 (% rbp ) . LBE 2 4 : jmp . L 1 5 . L 4 4 : . LBB 2 5 : addq $ 1 , - 4 0 (% rbp ) . L 1 5 : . LBE 2 5 : . LBE 2 3 : . LBE 2 2 : . LBB 2 6 : addq $ 1 , - 4 8 (% rbp ) . L 1 1 : . LBE 2 6 : movq - 3 1 2 (% rbp ), % rdx cmpq % rdx , - 4 8 (% rbp ) jl . L 5 5 . LBE 2 7 : . LBE 2 8 : . LBB 2 9 : movq - 3 2 8 (% rbp ), % rdx movq % rdx , - 5 6 (% rbp ) . LBB 3 0 : jmp . L 1 8 . L 5 7 : . LBB 3 1 : nop . LBE 3 1 : . LBB 3 2 : . LBB 3 3 : movq - 3 3 6 (% rbp ), % rdx movq % rdx , - 6 4 (% rbp ) . LBB 3 4 : jmp . L 1 9 . L 5 6 : . LBB 3 5 : nop . LBE 3 5 : . LBB 3 6 : movq - 5 6 (% rbp ), % rdx subq - 3 2 (% rbp ), % rdx movq - 2 9 6 (% rbp ), % rcx testq % rdx , % rdx js . L 2 0 cmpq % rcx , % rdx jl . L 4 6 . L 2 0 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq - 3 0 4 (% rbp ), % rcx movq % rdx , % rdi movq % rdi , % rdx addq % rdx , % rdx addq % rdi , % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq 8 (% rdx ), % rbx movq % rcx , - 2 0 8 (% rbp ) movq % rbx , - 2 0 0 (% rbp ) movq 1 6 (% rdx ), % rdx movq % rdx , - 1 9 2 (% rbp ) movq - 6 4 (% rbp ), % rdx subq - 4 0 (% rbp ), % rdx movq - 2 0 0 (% rbp ), % rcx testq % rdx , % rdx js . L 2 2 cmpq % rcx , % rdx jge . L 2 2 movq - 2 0 8 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx addq $ 1 , % rdx movq % rdx , - 8 0 (% rbp ) . LBB 3 7 : movq - 2 9 6 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) jns . L 2 3 jmp . L 2 4 . L 2 2 : . LBE 3 7 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : . LBB 3 9 : cmpq % rdx , - 5 6 (% rbp ) jl . L 4 7 . L 2 4 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : movq - 3 0 4 (% rbp ), % rdi movq - 5 6 (% rbp ), % rcx movq % rcx , % rdx addq % rdx , % rdx addq % rcx , % rdx salq $ 3 , % rdx addq % rdi , % rdx movq (% rdx ), % rcx movq 8 (% rdx ), % rbx movq % rcx , - 1 7 6 (% rbp ) movq % rbx , - 1 6 8 (% rbp ) movq 1 6 (% rdx ), % rdx movq % rdx , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rdx cmpq $ 0 , - 6 4 (% rbp ) js . L 2 6 cmpq % rdx , - 6 4 (% rbp ) jge . L 2 6 movq - 1 7 6 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx cmpq % rdx , - 8 0 (% rbp ) jg . L 2 7 jmp . L 2 8 . L 2 6 : movq - 6 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : . LBB 3 8 : movq - 2 9 6 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 2 9 cmpq % rdx , - 5 6 (% rbp ) jl . L 4 8 . L 2 9 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : movq - 3 0 4 (% rbp ), % rdi movq - 5 6 (% rbp ), % rcx movq % rcx , % rdx addq % rdx , % rdx addq % rcx , % rdx salq $ 3 , % rdx addq % rdi , % rdx movq (% rdx ), % rcx movq 8 (% rdx ), % rbx movq % rcx , - 1 4 4 (% rbp ) movq % rbx , - 1 3 6 (% rbp ) movq 1 6 (% rdx ), % rdx movq % rdx , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rdx cmpq $ 0 , - 6 4 (% rbp ) js . L 3 1 cmpq % rdx , - 6 4 (% rbp ) jge . L 3 1 movq - 1 4 4 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rdx , % rcx movq - 8 0 (% rbp ), % rdx movq % rdx , (% rcx ) jmp . L 2 8 . L 3 1 : movq - 6 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : . LBE 3 8 : . LBE 3 9 : . LBE 3 6 : . LBB 4 0 : subq $ 1 , - 6 4 (% rbp ) . L 1 9 : . LBE 4 0 : movq - 6 4 (% rbp ), % rdx cmpq - 4 0 (% rbp ), % rdx jge . L 5 6 . LBE 3 4 : . LBE 3 3 : . LBE 3 2 : . LBB 4 1 : subq $ 1 , - 5 6 (% rbp ) . L 1 8 : . LBE 4 1 : movq - 5 6 (% rbp ), % rdx cmpq - 3 2 (% rbp ), % rdx jge . L 5 7 . LBE 3 0 : . LBE 2 9 : . LBE 4 3 : . LBE 1 5 : . LBB 4 4 : addq $ 1 , % rax . L 9 : . LBE 4 4 : cmpq % rsi , % rax jl . L 5 8 . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : . LBB 4 5 : movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 3 2 8 (% rbp ) js . L 3 8 cmpq % rax , - 3 2 8 (% rbp ) jl . L 5 2 . L 3 8 : movq - 3 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : movq - 3 0 4 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 3 3 6 (% rbp ) js . L 4 0 cmpq % rax , - 3 3 6 (% rbp ) jge . L 4 0 movq - 1 1 2 (% rbp ), % rdx movq - 3 3 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax jmp . L 5 3 . L 4 0 : movq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 3 : . LBE 4 5 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 4 0 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 4 movl $ 4 0 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 6 0 , % rsp movl $ 0 , % edi call math .. z 2 fbig . NewInt @ PLT movq % rax , - 5 6 (% rbp ) . LBB 2 : movq $ 1 , - 6 4 (% rbp ) . LBB 3 : jmp . L 2 . L 1 3 : . LBB 4 : nop . LBE 4 : . LBB 5 : movl $ 1 , % edi call math .. z 2 fbig . NewInt @ PLT movq % rax , - 7 2 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , % rdi call math .. z 2 fbig . NewInt @ PLT movq % rax , - 8 0 (% rbp ) movq - 8 0 (% rbp ), % rdx movq - 8 0 (% rbp ), % rsi movq - 7 2 (% rbp ), % rax movl $ 0 , % ecx movq % rax , % rdi call math .. z 2 fbig . Int . Exp @ PLT movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rdx movq - 5 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call math .. z 2 fbig . Int . Add @ PLT movq % rax , - 5 6 (% rbp ) . LBE 5 : . LBB 6 : addq $ 1 , - 6 4 (% rbp ) . L 2 : . LBE 6 : cmpq $ 1 0 0 0 , - 6 4 (% rbp ) jle . L 1 3 . LBE 3 : . LBE 2 : leaq - 1 9 2 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call math .. z 2 fbig . Int . MarshalText @ PLT movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 2 8 (% rbp ), % rax movq - 3 2 0 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 3 7 6 (% rbp ), % rax leaq - 1 0 (% rax ), % rbx movq - 3 6 8 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jle . L 1 2 . L 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicSliceB @ PLT . L 1 2 : leaq type ... 6 . 7 uint 8 (% rip ), % r 1 4 leaq type ... 6 . 7 uint 8 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq - 3 8 4 (% rbp ), % rdx movq - 3 6 8 (% rbp ), % rax cmpq % rax , % rbx je . L 7 movq % rbx , % rax jmp . L 8 . L 7 : movl $ 0 , % eax . L 8 : addq % rdx , % rax movq % rax , - 2 4 0 (% rbp ) movq - 3 7 6 (% rbp ), % rax subq % rbx , % rax movq % rax , - 2 3 2 (% rbp ) movq - 3 6 8 (% rbp ), % rax subq % rbx , % rax movq % rax , - 2 2 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 7 : movq - 2 4 8 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 2 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 7 : jmp . L 1 0 . L 9 : . LBB 8 : movq - 2 4 8 (% rbp ), % rax leaq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 uint 8 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 8 : movq - 2 4 8 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 2 0 8 (% rbp ) movq % r 1 5 , - 2 0 0 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 1 , - 1 3 6 (% rbp ) movq $ 1 , - 1 2 8 (% rbp ) leaq . LC 3 (% rip ), % r 1 2 movl $ 2 , % r 1 3 d leaq - 1 1 2 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 1 movl $ 2 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 4 8 , % rsp movq % rdi , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 2 1 : movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) . LBB 2 2 : . LBB 2 3 : . LBB 2 4 : movq go . day 4 4 7 . testcases (% rip ), % rax movq 8 + go . day 4 4 7 . testcases (% rip ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 + go . day 4 4 7 . testcases (% rip ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movl $ 0 , % ebx . LBE 2 4 : jmp . L 2 1 . L 3 0 : . LBB 2 5 : nop . LBE 2 5 : . LBB 2 6 : . LBB 2 7 : movq - 1 8 4 (% rbp ), % rax testq % rbx , % rbx js . L 2 2 cmpq % rax , % rbx jge . L 2 2 movq - 1 9 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) . LBE 2 7 : . LBB 2 8 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) . LBE 2 8 : . LBB 2 9 : . LBB 3 0 : movq - 2 4 8 (% rbp ), % rdx movq - 2 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . day 4 4 7 . NaiveIntegerExponentiation movq % rax , - 5 6 (% rbp ) movq - 2 4 0 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jne . L 2 3 jmp . L 2 4 . L 2 2 : . LBE 3 0 : . LBE 2 9 : . LBB 3 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : . LBE 3 5 : . LBB 3 6 : . LBB 3 4 : . LBB 3 1 : leaq uint .. d (% rip ), % rax movq % rax , - 2 8 8 (% rbp ) leaq uint .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 2 8 0 (% rbp ) leaq uint .. d (% rip ), % r 1 4 leaq uint .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 2 8 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movdqa - 2 8 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 5 . LBB 3 2 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 3 2 : jmp . L 2 6 . L 2 5 : . LBB 3 3 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 6 : . LBE 3 3 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) leaq . LC 5 (% rip ), % r 1 2 movl $ 1 8 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 2 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 2 4 : . LBE 3 1 : . LBE 3 4 : . LBE 3 6 : . LBE 2 6 : . LBB 3 7 : addq $ 1 , % rbx . L 2 1 : . LBE 3 7 : cmpq - 2 7 2 (% rbp ), % rbx jl . L 3 0 . LBE 2 3 : . LBE 2 2 : . LBE 2 1 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 8 5 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 8 movl $ 8 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 0 8 , % rsp movq % rdi , - 7 9 2 (% rbp ) movq $ 3 , - 6 7 2 (% rbp ) movq $ 2 , - 6 6 4 (% rbp ) movq $ 3 , - 6 5 6 (% rbp ) movq $ 5 , - 6 4 8 (% rbp ) movq $ 4 , - 6 4 0 (% rbp ) movq $ 4 , - 6 3 2 (% rbp ) movq $ 2 , - 6 2 4 (% rbp ) movq $ 3 , - 6 1 6 (% rbp ) movq $ 4 , - 6 0 8 (% rbp ) movq $ 6 , - 6 0 0 (% rbp ) movq $ 5 , - 5 9 2 (% rbp ) movq $ 2 , - 5 8 4 (% rbp ) movq $ 1 1 , - 5 7 6 (% rbp ) movq $ 1 3 , - 5 6 8 (% rbp ) movq $ 1 0 , - 5 6 0 (% rbp ) movq $ 1 0 0 0 0 0 0 0 0 0 , - 5 5 2 (% rbp ) movq $ 2 , - 5 4 4 (% rbp ) movq $ 2 1 7 9 8 3 6 5 3 , - 5 3 6 (% rbp ) movq $ 3 3 6 9 1 6 4 6 7 , - 5 2 8 (% rbp ) movq $ 1 9 9 9 9 9 9 9 8 4 , - 5 2 0 (% rbp ) leaq - 6 7 2 (% rbp ), % rcx movq % rcx , - 7 0 4 (% rbp ) movq $ 4 , - 6 9 6 (% rbp ) movq $ 4 , - 6 8 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 1 7 (% rip ), % rax movl $ 7 0 , % edx leaq - 2 0 8 (% rbp ), % rcx movq % rax , % rsi movq % rdx , % rdi movq % rdx , % rax subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdx movq % rcx , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) . LBB 2 : movq $ 0 , - 7 5 2 (% rbp ) movq $ 0 , - 7 4 4 (% rbp ) movq $ 0 , - 7 3 6 (% rbp ) movq $ 0 , - 7 2 8 (% rbp ) movq $ 0 , - 7 2 0 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 8 0 0 (% rbp ) movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 7 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : movq - 4 2 4 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 4 3 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax salq $ 2 , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 4 8 0 (% rbp ) movq % rdi , - 4 7 2 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 4 6 4 (% rbp ) movq % rdi , - 4 5 6 (% rbp ) movq 3 2 (% rax ), % rax movq % rax , - 4 4 8 (% rbp ) . LBE 8 : . LBB 9 : movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 7 5 2 (% rbp ) movq % rdx , - 7 4 4 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 7 3 6 (% rbp ) movq % rdx , - 7 2 8 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 7 2 0 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 7 2 0 (% rbp ), % rax movq % rax , - 7 1 2 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , - 7 8 4 (% rbp ) movq % rdx , - 7 7 6 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , - 7 6 8 (% rbp ) movq % rdx , - 7 6 0 (% rbp ) movq - 7 6 0 (% rbp ), % rcx movq - 7 6 8 (% rbp ), % rdx movq - 7 7 6 (% rbp ), % rsi movq - 7 8 4 (% rbp ), % rax movq % rax , % rdi call go . leetcode . nthUglyNumber movq % rax , - 8 4 0 (% rbp ) leaq go . leetcode .. go . leetcode . para 1 2 0 1 .. d (% rip ), % rdi movq % rdi , - 8 3 2 (% rbp ) leaq go . leetcode .. go . leetcode . para 1 2 0 1 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 0 (% rbp ) movq - 3 2 0 (% rbp ), % rcx movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 8 2 4 (% rbp ) leaq int .. d (% rip ), % rdi movq % rdi , - 8 1 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 8 4 0 (% rbp ), % rdx movq % rdx , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 8 0 8 (% rbp ) movdqa - 8 3 2 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 8 1 6 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) . LBE 1 0 : . LBE 7 : . LBB 1 2 : addq $ 1 , % rbx jmp . L 2 . L 3 : . LBE 1 2 : . LBB 1 3 : . LBB 1 1 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 1 : . LBE 1 3 : cmpq - 8 0 0 (% rbp ), % rbx jl . L 7 . LBE 4 : . LBE 3 : . LBE 2 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 1 9 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 9 8 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 2 movl $ 9 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 3 6 , % rsp movq % rdi , - 8 8 8 (% rbp ) leaq . LC 2 3 (% rip ), % rax movl $ 8 , % edx movq % rax , - 9 7 6 (% rbp ) movq % rdx , - 9 6 8 (% rbp ) leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 5 6 (% rbp ) movq $ 1 , - 8 4 8 (% rbp ) movq $ 0 , - 8 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 8 5 6 (% rbp ), % rcx movq - 8 4 8 (% rbp ), % rax movq - 8 4 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 8 5 6 (% rbp ), % rax leaq - 8 4 8 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 8 5 6 (% rbp ), % rax movq % rax , - 8 9 6 (% rbp ) leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 2 4 (% rbp ) movq $ 1 , - 8 1 6 (% rbp ) movq $ 0 , - 8 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 8 2 4 (% rbp ), % rcx movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 8 2 4 (% rbp ), % rax leaq - 8 1 6 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 8 2 4 (% rbp ), % rax movq % rax , - 9 2 0 (% rbp ) movl $ 2 , % r 1 4 d leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 9 2 (% rbp ) movq $ 3 , - 7 8 4 (% rbp ) movq $ 0 , - 7 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 6 : movq - 7 9 2 (% rbp ), % rcx movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 6 : jmp . L 7 . L 6 : . LBB 7 : movq - 7 9 2 (% rbp ), % rax leaq - 7 8 4 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 7 : movq - 7 9 2 (% rbp ), % rbx movq $ 1 , - 9 2 8 (% rbp ) leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 6 0 (% rbp ) movq % r 1 4 , - 7 5 2 (% rbp ) movq % rbx , - 7 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 . LBB 8 : movq - 7 6 0 (% rbp ), % rcx movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 8 : jmp . L 9 . L 8 : . LBB 9 : movq - 7 6 0 (% rbp ), % rax leaq - 7 5 2 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 : . LBE 9 : movq - 7 6 0 (% rbp ), % r 1 4 movl $ 2 , % r 1 5 d leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 8 (% rbp ) movq $ 3 , - 7 2 0 (% rbp ) movq $ 0 , - 7 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 . LBB 1 0 : movq - 7 2 8 (% rbp ), % rcx movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 0 : jmp . L 1 1 . L 1 0 : . LBB 1 1 : movq - 7 2 8 (% rbp ), % rax leaq - 7 2 0 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 1 : . LBE 1 1 : movq - 7 2 8 (% rbp ), % rbx leaq . LC 2 3 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 9 6 0 (% rbp ) movq % r 1 3 , - 9 5 2 (% rbp ) leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 9 6 (% rbp ) movq - 9 2 8 (% rbp ), % rax movq % rax , - 6 8 8 (% rbp ) movq % r 1 4 , - 6 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 2 . LBB 1 2 : movq - 6 9 6 (% rbp ), % rcx movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 2 : jmp . L 1 3 . L 1 2 : . LBB 1 3 : movq - 6 9 6 (% rbp ), % rax leaq - 6 8 8 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 3 : . LBE 1 3 : movq - 6 9 6 (% rbp ), % rax movq % rax , - 9 2 8 (% rbp ) leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 6 4 (% rbp ) movq % r 1 5 , - 6 5 6 (% rbp ) movq % rbx , - 6 4 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 4 . LBB 1 4 : movq - 6 6 4 (% rbp ), % rcx movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 4 : jmp . L 1 5 . L 1 4 : . LBB 1 5 : movq - 6 6 4 (% rbp ), % rax leaq - 6 5 6 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 5 : . LBE 1 5 : movq - 6 6 4 (% rbp ), % r 1 5 movl $ 3 , % r 1 3 d leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 3 2 (% rbp ) movq $ 4 , - 6 2 4 (% rbp ) movq $ 0 , - 6 1 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 6 . LBB 1 6 : movq - 6 3 2 (% rbp ), % rcx movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 6 : jmp . L 1 7 . L 1 6 : . LBB 1 7 : movq - 6 3 2 (% rbp ), % rax leaq - 6 2 4 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 7 : . LBE 1 7 : movq - 6 3 2 (% rbp ), % rbx movl $ 2 , % r 1 2 d leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 0 (% rbp ) movq % r 1 3 , - 5 9 2 (% rbp ) movq % rbx , - 5 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 8 . LBB 1 8 : movq - 6 0 0 (% rbp ), % rcx movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 8 : jmp . L 1 9 . L 1 8 : . LBB 1 9 : movq - 6 0 0 (% rbp ), % rax leaq - 5 9 2 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 9 : . LBE 1 9 : movq - 6 0 0 (% rbp ), % rbx movq $ 1 , - 9 3 6 (% rbp ) leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 8 (% rbp ) movq % r 1 2 , - 5 6 0 (% rbp ) movq % rbx , - 5 5 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 0 . LBB 2 0 : movq - 5 6 8 (% rbp ), % rcx movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 0 : jmp . L 2 1 . L 2 0 : . LBB 2 1 : movq - 5 6 8 (% rbp ), % rax leaq - 5 6 0 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 1 : . LBE 2 1 : movq - 5 6 8 (% rbp ), % rbx movq $ 3 , - 9 4 4 (% rbp ) leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 3 6 (% rbp ) movq $ 4 , - 5 2 8 (% rbp ) movq $ 0 , - 5 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 2 . LBB 2 2 : movq - 5 3 6 (% rbp ), % rcx movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 2 : jmp . L 2 3 . L 2 2 : . LBB 2 3 : movq - 5 3 6 (% rbp ), % rcx leaq - 5 2 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 3 : . LBE 2 3 : movq - 5 3 6 (% rbp ), % r 1 4 leaq . LC 2 3 (% rip ), % rax movq % rax , - 9 1 2 (% rbp ) movq $ 8 , - 9 0 4 (% rbp ) movq - 9 1 2 (% rbp ), % r 1 2 movq - 9 0 4 (% rbp ), % r 1 3 leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) movq - 9 3 6 (% rbp ), % rax movq % rax , - 4 9 6 (% rbp ) movq % rbx , - 4 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 4 . LBB 2 4 : movq - 5 0 4 (% rbp ), % rcx movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 4 : jmp . L 2 5 . L 2 4 : . LBB 2 5 : movq - 5 0 4 (% rbp ), % rax leaq - 4 9 6 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 5 : . LBE 2 5 : movq - 5 0 4 (% rbp ), % rbx leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 7 2 (% rbp ) movq - 9 4 4 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq % r 1 4 , - 4 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 6 . LBB 2 6 : movq - 4 7 2 (% rbp ), % rcx movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 6 : jmp . L 2 7 . L 2 6 : . LBB 2 7 : movq - 4 7 2 (% rbp ), % rax leaq - 4 6 4 (% rbp ), % rdx movq % rax , % rsi leaq go . Solution . ListNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 7 : . LBE 2 7 : movq - 4 7 2 (% rbp ), % rax movdqa - 9 7 6 (% rbp ), % xmm 0 movups % xmm 0 , - 4 4 8 (% rbp ) movq - 8 9 6 (% rbp ), % rsi movq % rsi , - 4 3 2 (% rbp ) movq - 9 2 0 (% rbp ), % rsi movq % rsi , - 4 2 4 (% rbp ) movdqa - 9 6 0 (% rbp ), % xmm 1 movups % xmm 1 , - 4 1 6 (% rbp ) movq - 9 2 8 (% rbp ), % rsi movq % rsi , - 4 0 0 (% rbp ) movq % r 1 5 , - 3 9 2 (% rbp ) movq % r 1 2 , - 3 8 4 (% rbp ) movq % r 1 3 , - 3 7 6 (% rbp ) movq % rbx , - 3 6 8 (% rbp ) movq % rax , - 3 6 0 (% rbp ) leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 1 go . Solution . ListNode . 2 . go . Solution . expect . 0 . 1 go . Solution . ListNode . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 8 . LBB 2 8 : movq - 3 4 4 (% rbp ), % rax movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) . LBE 2 8 : jmp . L 2 9 . L 2 8 : . LBB 2 9 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 1 go . Solution . ListNode . 2 . go . Solution . expect . 0 . 1 go . Solution . ListNode . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 9 : . LBE 2 9 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 8 8 0 (% rbp ) movq $ 3 , - 8 7 2 (% rbp ) movq $ 3 , - 8 6 4 (% rbp ) . LBB 3 0 : movq $ 0 , - 5 6 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 1 go . Solution . ListNode . 2 . go . Solution . expect . 0 . 1 go . Solution . ListNode . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) . LBB 3 1 : . LBB 3 2 : . LBB 3 3 : movq - 8 8 0 (% rbp ), % rax movq - 8 7 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 8 6 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 3 3 : jmp . L 3 0 . L 4 1 : . LBB 3 4 : nop . LBE 3 4 : . LBB 3 5 : . LBB 3 6 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 1 cmpq % rax , % rbx jge . L 3 1 movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) . LBE 3 6 : . LBB 3 7 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 6 4 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 3 2 jmp . L 3 9 . L 3 1 : . LBE 3 7 : . LBB 4 0 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : . LBE 4 0 : . LBB 4 1 : . LBB 3 8 : movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) jmp . L 3 4 . L 3 9 : . LBE 3 8 : . LBB 3 9 : leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 1 go . Solution . ListNode . 2 . go . Solution . expect . 0 . 1 go . Solution . ListNode . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 4 : . LBE 3 9 : . LBE 4 1 : . LBB 4 2 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 6 4 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 4 4 (% rbp ) movq % rdi , - 1 3 6 (% rbp ) leaq . LC 2 4 (% rip ), % rcx movq % rcx , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 6 4 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 1 go . Solution . ListNode . 2 . go . Solution . expect . 0 . 1 go . Solution . ListNode . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 5 . LBB 4 3 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 3 : jmp . L 3 6 . L 3 5 : . LBB 4 4 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 1 go . Solution . ListNode . 2 . go . Solution . expect . 0 . 1 go . Solution . ListNode . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 6 : . LBE 4 4 : movq - 8 8 (% rbp ), % r 1 2 leaq - 1 4 4 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 8 8 8 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 4 2 : . LBE 3 5 : . LBB 4 5 : addq $ 1 , % rbx . L 3 0 : . LBE 4 5 : cmpq % r 1 3 , % rbx jl . L 4 1 . LBE 3 2 : . LBE 3 1 : . LBE 3 0 : addq $ 9 3 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 6 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 4 6 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 3 7 : . LBB 3 8 : . LBB 3 9 : cmpq $ 0 , - 4 0 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 3 5 . LBB 4 0 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax sete % al . L 3 5 : . LBE 4 0 : . LBE 3 9 : testb % al , % al je . L 3 6 . LBB 4 1 : . LBB 4 2 : movq - 4 0 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 3 7 . L 3 6 : . LBE 4 2 : . LBE 4 1 : . LBE 3 8 : movq - 4 0 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 6 (% rbp ) . LBB 4 3 : . LBB 4 4 : jmp . L 3 8 . L 4 5 : . LBB 4 5 : nop . LBE 4 5 : . LBB 4 6 : . LBB 4 7 : movq - 1 6 (% rbp ), % rax movq (% rax ), % rdx movq - 8 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx jne . L 3 9 . LBB 4 8 : movq - 8 (% rbp ), % rax addq $ 8 , % rax movq - 1 6 (% rbp ), % rdx movq 8 (% rdx ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 4 0 . LBB 4 9 : movq % rdx , (% rax ) . LBE 4 9 : jmp . L 4 1 . L 4 0 : . LBB 5 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 4 1 : . LBE 5 0 : movq - 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 6 (% rbp ) . LBE 4 8 : jmp . L 3 8 . L 3 9 : . LBB 5 1 : movq - 1 6 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 6 (% rbp ) . L 3 8 : . LBE 5 1 : . LBE 4 7 : . LBE 4 6 : cmpq $ 0 , - 1 6 (% rbp ) jne . L 4 5 . LBE 4 4 : . LBE 4 3 : . LBB 5 2 : movq - 4 0 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 3 7 : . LBE 5 2 : . LBE 3 7 : leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 3 2 4 movl $ 7 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 0 : ret . L 3 2 4 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq % rdi , - 5 6 (% rbp ) movq $ 0 , - 3 2 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 8 1 : . LBB 2 8 2 : movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax jne . L 3 1 3 . LBB 2 8 3 : . LBB 2 8 4 : leaq int .. d (% rip ), % rax movq % rax , - 3 2 (% rbp ) leaq go .. C 1 9 2 (% rip ), % rax movq % rax , - 2 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx jmp . L 3 2 1 . L 3 1 3 : . LBE 2 8 4 : . LBE 2 8 3 : . LBE 2 8 2 : . LBB 2 8 5 : movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax movq 2 4 (% rax ), % rax testq % rax , % rax jne . L 3 1 5 . LBB 2 8 6 : . LBB 2 8 7 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call go . linkedlist . Singly . DelAtBeg movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx jmp . L 3 2 1 . L 3 1 5 : . LBE 2 8 7 : . LBE 2 8 6 : . LBE 2 8 5 : movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) . LBB 2 8 8 : . LBB 2 8 9 : jmp . L 3 1 6 . L 3 2 3 : . LBB 2 9 0 : nop . LBE 2 9 0 : . LBB 2 9 1 : movq - 8 (% rbp ), % rax movq 2 4 (% rax ), % rax movq % rax , - 8 (% rbp ) . L 3 1 6 : . LBE 2 9 1 : movq - 8 (% rbp ), % rax movq 2 4 (% rax ), % rax movq 2 4 (% rax ), % rax testq % rax , % rax jne . L 3 2 3 . LBE 2 8 9 : . LBE 2 8 8 : movq - 8 (% rbp ), % rax movq 2 4 (% rax ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq - 8 (% rbp ), % rax addq $ 2 4 , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 3 1 9 . LBB 2 9 2 : movq $ 0 , (% rax ) jmp . L 3 2 0 . L 3 1 9 : . LBE 2 9 2 : . LBB 2 9 3 : movl $ 0 , % esi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 2 0 : . LBE 2 9 3 : . LBB 2 9 4 : movq - 5 6 (% rbp ), % rax movq (% rax ), % rdx subq $ 1 , % rdx movq % rdx , (% rax ) . LBE 2 9 4 : . LBB 2 9 5 : movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq - 2 4 (% rbp ), % rdx . L 3 2 1 : . LBE 2 9 5 : . LBE 2 8 1 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 0 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 0 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq - 3 2 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : cmpq $ 0 , - 3 2 (% rbp ) jne . L 4 . LBB 7 : . LBB 8 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 3 . L 4 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 9 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rdx movq - 3 2 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx jge . L 5 . LBB 1 0 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq - 3 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call go . leetcode 0 0 2 1 . mergeTwoLists movq % rax , % rdx movq - 2 4 (% rbp ), % rax addq $ 8 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 6 . LBB 1 1 : movq % rdx , (% rax ) . LBE 1 1 : jmp . L 7 . L 6 : . LBB 1 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 7 : . LBE 1 2 : . LBB 1 3 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 3 . L 5 : . LBE 1 3 : . LBE 1 0 : . LBE 9 : movq - 3 2 (% rbp ), % rax movq 8 (% rax ), % rax movq - 2 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call go . leetcode 0 0 2 1 . mergeTwoLists movq % rax , % rdx movq - 3 2 (% rbp ), % rax addq $ 8 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 8 . LBB 1 4 : movq % rdx , (% rax ) . LBE 1 4 : jmp . L 9 . L 8 : . LBB 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 9 : . LBE 1 5 : . LBB 1 6 : movq - 3 2 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 3 : . LBE 1 6 : . LBE 2 : leave ret
. LFB 1 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 6 movl $ 3 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 4 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 2 8 , % rsp movq % rdi , - 3 4 4 (% rbp ) movq - 3 4 4 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 2 9 : movq $ 0 , - 3 3 6 (% rbp ) movq $ 0 , - 3 2 8 (% rbp ) movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) . LBB 3 0 : . LBB 3 1 : . LBB 3 2 : movq go . day 4 3 0 . testcases (% rip ), % rax movq 8 + go . day 4 3 0 . testcases (% rip ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq 1 6 + go . day 4 3 0 . testcases (% rip ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movl $ 0 , % ebx . LBE 3 2 : jmp . L 3 0 . L 4 5 : . LBB 3 3 : nop . LBE 3 3 : . LBB 3 4 : . LBB 3 5 : movq - 2 4 8 (% rbp ), % rax testq % rbx , % rbx js . L 3 1 cmpq % rax , % rbx jge . L 3 1 movq - 2 5 6 (% rbp ), % rax movq % rbx , % rdx salq $ 5 , % rdx leaq (% rax ,% rdx ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) . LBE 3 5 : . LBB 3 6 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) . LBE 3 6 : . LBB 3 7 : . LBB 3 8 : movq - 3 3 6 (% rbp ), % rdx movq - 3 2 8 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . day 4 3 0 . BalanceParens movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq - 2 9 6 (% rbp ), % rcx movq % rdx , % rsi cmpq % rsi , % rcx jne . L 3 2 jmp . L 4 3 . L 3 1 : . LBE 3 8 : . LBE 3 7 : . LBB 4 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : . LBE 4 7 : . LBB 4 8 : . LBB 4 6 : movq - 3 0 4 (% rbp ), % rcx movq % rax , % rsi cmpq % rsi , % rcx je . L 3 4 movq % rdx , % rcx movq % rcx , % rsi movq % rax , % rcx movq - 3 0 4 (% rbp ), % rax movq % rsi , % rdx movq % rcx , % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax je . L 3 4 . L 3 2 : . LBB 3 9 : leaq string .. d (% rip ), % rax movq % rax , - 3 6 8 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 5 . LBB 4 0 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 0 : jmp . L 3 6 . L 3 5 : . LBB 4 1 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 6 : . LBE 4 1 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 3 6 0 (% rbp ) leaq string .. d (% rip ), % r 1 4 leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 7 . LBB 4 2 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 2 : jmp . L 3 8 . L 3 7 : . LBB 4 3 : movq - 1 5 2 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 8 : . LBE 4 3 : movq - 1 5 2 (% rbp ), % rax movq % rax , % r 1 5 leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movdqa - 3 6 8 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 9 . LBB 4 4 : movq - 1 2 0 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 4 4 : jmp . L 4 0 . L 3 9 : . LBB 4 5 : movq - 1 2 0 (% rbp ), % rax leaq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 0 : . LBE 4 5 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) leaq . LC 1 1 (% rip ), % r 1 2 movl $ 1 9 , % r 1 3 d movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq - 3 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 3 4 : . LBE 3 9 : . LBE 4 6 : . LBE 4 8 : . LBE 3 4 : . LBB 4 9 : addq $ 1 , % rbx . L 3 0 : . LBE 4 9 : cmpq - 3 5 2 (% rbp ), % rbx jl . L 4 5 . LBE 3 1 : . LBE 3 0 : . LBE 2 9 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 5 movl $ 1 5 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 2 0 , % rsp movq % rdi , - 1 3 6 (% rbp ) movb $ 0 , - 3 3 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 . LBB 4 : . LBB 5 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : call runtime . makemap_small @ PLT movq % rax , - 4 8 (% rbp ) . LBB 6 : movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 7 : . LBB 8 : . LBB 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 9 : jmp . L 4 . L 1 4 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 1 2 0 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 1 2 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 2 : . LBB 1 3 : movq % rbx , - 5 6 (% rbp ) movq % rax , - 6 4 (% rbp ) . LBE 1 3 : . LBB 1 4 : movq $ 0 , - 7 2 (% rbp ) movb $ 0 , - 7 3 (% rbp ) . LBB 1 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) jns . L 6 jmp . L 7 . L 5 : . LBE 1 5 : . LBE 1 4 : . LBB 2 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 2 3 : . LBB 2 4 : . LBB 1 6 : cmpq % rax , - 5 6 (% rbp ) jl . L 1 2 . L 7 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 9 6 (% rbp ) leaq - 9 6 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq % rax , % rcx movq (% rcx ), % rax movq % rax , - 7 2 (% rbp ) movb % dl , - 7 3 (% rbp ) . LBE 1 6 : . LBB 1 7 : cmpb $ 0 , - 7 3 (% rbp ) je . L 9 . LBB 1 8 : . LBB 1 9 : movq - 7 2 (% rbp ), % rdx movq - 1 3 6 (% rbp ), % rax addq % rdx , % rax cmpq % rax , - 5 6 (% rbp ) jg . L 9 . LBB 2 0 : . LBB 2 1 : movb $ 1 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 3 . L 9 : . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBB 2 2 : movq - 6 4 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) movq - 5 6 (% rbp ), % r 1 2 leaq - 8 8 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 2 , (% rax ) . LBE 2 2 : . LBE 2 4 : . LBE 1 1 : . LBB 2 5 : addq $ 1 , % rbx . L 4 : . LBE 2 5 : cmpq % r 1 3 , % rbx jl . L 1 4 . LBE 8 : . LBE 7 : . LBE 6 : . LBB 2 6 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax . L 3 : . LBE 2 6 : . LBE 2 : addq $ 1 2 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
leaq - 4 0 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 2 movl $ 4 0 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 9 : ret . L 4 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 6 0 , % rsp call net .. z 2 fhttp . NewServeMux @ PLT movq % rax , - 5 6 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 1 , - 3 7 6 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq - 5 6 (% rbp ), % rax leaq main . index .. f (% rip ), % rcx movq % rax , % rdi call net .. z 2 fhttp . ServeMux . HandleFunc @ PLT leaq . LC 1 5 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rcx , % rsi movq - 5 6 (% rbp ), % rax leaq main . message .. f (% rip ), % rcx movq % rax , % rdi call net .. z 2 fhttp . ServeMux . HandleFunc @ PLT leaq pimt .. interface . 4 ServeHTTP . 0 func . 8 net .. z 2 fhttp . ResponseWriter . 3 . 1 net .. z 2 fhttp . Request . 9 . 8 . 9 . 5 .. net .. z 2 fhttp . ServeMux (% rip ), % r 1 2 movq - 5 6 (% rbp ), % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call main . middlewareSecond movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call main . middlewareFirst movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq . LC 2 1 (% rip ), % rax movq % rax , - 3 6 8 (% rbp ) movq $ 5 , - 3 6 0 (% rbp ) movq - 3 6 8 (% rbp ), % r 1 4 movq - 3 6 0 (% rbp ), % r 1 5 leaq net .. z 2 fhttp . Server .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) leaq - 3 3 6 (% rbp ), % rdx movl $ 0 , % eax movl $ 2 7 , % ecx movq % rdx , % rdi rep stosq movq % r 1 4 , - 3 3 6 (% rbp ) movq % r 1 5 , - 3 2 8 (% rbp ) movq % r 1 2 , - 3 2 0 (% rbp ) movq % r 1 3 , - 3 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 0 . LBB 2 0 : movq - 3 4 4 (% rbp ), % rax movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 2 2 4 (% rbp ), % rcx movq - 2 1 6 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 2 0 8 (% rbp ), % rcx movq - 2 0 0 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) movq - 1 9 2 (% rbp ), % rcx movq - 1 8 4 (% rbp ), % rbx movq % rcx , 1 4 4 (% rax ) movq % rbx , 1 5 2 (% rax ) movq - 1 7 6 (% rbp ), % rcx movq - 1 6 8 (% rbp ), % rbx movq % rcx , 1 6 0 (% rax ) movq % rbx , 1 6 8 (% rax ) movq - 1 6 0 (% rbp ), % rcx movq - 1 5 2 (% rbp ), % rbx movq % rcx , 1 7 6 (% rax ) movq % rbx , 1 8 4 (% rax ) movq - 1 4 4 (% rbp ), % rcx movq - 1 3 6 (% rbp ), % rbx movq % rcx , 1 9 2 (% rax ) movq % rbx , 2 0 0 (% rax ) movq - 1 2 8 (% rbp ), % rdx movq % rdx , 2 0 8 (% rax ) . LBE 2 0 : jmp . L 4 1 . L 4 0 : . LBB 2 1 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq net .. z 2 fhttp . Server .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 1 : . LBE 2 1 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 4 0 0 (% rbp ) leaq go .. C 2 0 (% rip ), % rax movq % rax , - 3 9 2 (% rbp ) movdqa - 4 0 0 (% rbp ), % xmm 0 movups % xmm 0 , - 1 1 2 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) call log . Println @ PLT addq $ 3 2 , % rsp movq - 6 4 (% rbp ), % rax movq % rax , % rdi call net .. z 2 fhttp . Server . ListenAndServe @ PLT leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 6 1 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 8 7 movl $ 6 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 8 4 , % rsp movq % rdi , - 6 0 0 (% rbp ) movq % rsi , - 6 0 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 2 : movq $ 1 0 0 0 0 0 0 0 0 7 , - 6 4 (% rbp ) movq - 6 0 0 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 5 9 2 (% rbp ) movq % rbx , - 5 8 4 (% rbp ) movq % rbx , - 5 7 6 (% rbp ) . LBB 3 : movq $ 0 , - 7 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 5 6 0 (% rbp ) movq % rdx , - 5 5 2 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) movq - 5 5 2 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 6 : jmp . L 2 . L 8 4 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq % r 1 2 , - 7 2 (% rbp ) . LBB 9 : movq - 6 0 8 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 5 8 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 3 cmpq % rax , - 7 2 (% rbp ) jl . L 6 1 . L 3 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 1 : movq - 5 9 2 (% rbp ), % rsi movq - 7 2 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 5 2 8 (% rbp ) movq % rbx , - 5 2 0 (% rbp ) movq % rbx , - 5 1 2 (% rbp ) movq - 5 2 0 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 5 1 2 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 . LBB 1 0 : movq - 5 2 8 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 6 . L 5 : . LBE 1 0 : . LBB 1 1 : movq - 5 2 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 : . LBE 1 1 : movq - 5 8 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 7 cmpq % rax , - 7 2 (% rbp ) jl . L 6 2 . L 7 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 2 : movq - 5 9 2 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 8 0 (% rbp ) movq - 4 8 8 (% rbp ), % rax testq % rax , % rax jg . L 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 9 : movq - 4 9 6 (% rbp ), % rax movq $ 1 , (% rax ) . LBE 9 : . LBE 8 : . LBB 1 2 : addq $ 1 , % r 1 2 . L 2 : . LBE 1 2 : cmpq % r 1 3 , % r 1 2 jl . L 8 4 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 3 : movq $ 1 , - 4 0 (% rbp ) . LBB 1 4 : jmp . L 1 2 . L 8 6 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax imulq - 4 0 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , % rdx movq - 6 0 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . leetcode 0 6 2 9 . min movq % rax , - 8 0 (% rbp ) . LBB 1 7 : movq $ 1 , - 4 8 (% rbp ) . LBB 1 8 : jmp . L 1 3 . L 8 5 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : movq - 5 8 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 4 cmpq % rax , - 4 0 (% rbp ) jl . L 6 4 . L 1 4 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 4 : movq - 5 9 2 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 4 8 (% rbp ) movq - 4 5 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 6 cmpq % rax , - 4 8 (% rbp ) jl . L 6 5 . L 1 6 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 5 : movq - 5 8 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 8 cmpq % rax , - 4 0 (% rbp ) jl . L 6 6 . L 1 8 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 6 : movq - 5 9 2 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 1 6 (% rbp ) movq - 4 8 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 4 2 4 (% rbp ), % rax testq % rdx , % rdx js . L 2 0 cmpq % rax , % rdx jl . L 6 7 . L 2 0 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 7 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq - 5 8 4 (% rbp ), % rcx testq % rax , % rax js . L 2 2 cmpq % rcx , % rax jl . L 6 8 . L 2 2 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 8 : movq - 5 9 2 (% rbp ), % rcx movq % rax , % rsi movq % rsi , % rax addq % rax , % rax addq % rsi , % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rcx , - 4 0 0 (% rbp ) movq % rbx , - 3 9 2 (% rbp ) movq 1 6 (% rax ), % rax movq % rax , - 3 8 4 (% rbp ) movq - 3 9 2 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 4 cmpq % rax , - 4 8 (% rbp ) jl . L 6 9 . L 2 4 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 9 : movq - 4 3 2 (% rbp ), % rax salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rdx movq - 4 0 0 (% rbp ), % rcx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax addq % rdx , % rax cmpq $- 1 , - 6 4 (% rbp ) jne . L 2 6 movl $ 0 , % edx jmp . L 2 7 . L 2 6 : cmpq $ 0 , - 6 4 (% rbp ) jne . L 2 8 call runtime . panicdivide @ PLT . L 2 8 : cqto idivq - 6 4 (% rbp ) . L 2 7 : movq - 4 6 4 (% rbp ), % rcx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq % rdx , (% rax ) . LBB 2 1 : movq - 4 8 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jl . L 2 9 . LBB 2 2 : . LBB 2 3 : movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 4 0 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx testq % rax , % rax js . L 3 0 cmpq % rdx , % rax jl . L 7 0 . L 3 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 0 : movq - 3 6 8 (% rbp ), % rcx movq % rax , % rsi movq % rsi , % rdx addq % rdx , % rdx addq % rsi , % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq 8 (% rdx ), % rbx movq % rcx , - 3 3 6 (% rbp ) movq % rbx , - 3 2 8 (% rbp ) movq 1 6 (% rdx ), % rdx movq % rdx , - 3 2 0 (% rbp ) movq - 3 2 8 (% rbp ), % rdx cmpq $ 0 , - 4 8 (% rbp ) js . L 3 2 cmpq % rdx , - 4 8 (% rbp ) jl . L 7 1 . L 3 2 : movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 1 : movq - 3 6 0 (% rbp ), % rdx testq % rax , % rax js . L 3 4 cmpq % rdx , % rax jl . L 7 2 . L 3 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 2 : movq - 3 6 8 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 8 8 (% rbp ) movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 3 6 cmpq % rax , - 4 8 (% rbp ) jl . L 7 3 . L 3 6 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 3 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq - 5 8 4 (% rbp ), % rdx testq % rax , % rax js . L 3 8 cmpq % rdx , % rax jl . L 7 4 . L 3 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 4 : movq - 5 9 2 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 4 8 (% rbp ), % rax subq - 4 0 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx testq % rax , % rax js . L 4 0 cmpq % rdx , % rax jl . L 7 5 . L 4 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 5 : movq - 3 0 4 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq - 2 7 2 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rcx movq - 3 3 6 (% rbp ), % rsi movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax subq % rcx , % rdx movq % rdx , (% rax ) . LBE 2 3 : . LBB 2 4 : movq - 5 8 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 4 2 cmpq % rax , - 4 0 (% rbp ) jl . L 7 6 . L 4 2 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 6 : movq - 5 9 2 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 4 4 cmpq % rax , - 4 8 (% rbp ) jge . L 4 4 movq - 2 4 0 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax testq % rax , % rax js . L 4 5 jmp . L 2 9 . L 4 4 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : . LBB 2 5 : . LBB 2 6 : movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 4 0 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx testq % rax , % rax js . L 4 6 cmpq % rdx , % rax jl . L 7 7 . L 4 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 7 : movq - 2 0 8 (% rbp ), % rcx movq % rax , % rsi movq % rsi , % rdx addq % rdx , % rdx addq % rsi , % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq 8 (% rdx ), % rbx movq % rcx , - 1 7 6 (% rbp ) movq % rbx , - 1 6 8 (% rbp ) movq 1 6 (% rdx ), % rdx movq % rdx , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rdx cmpq $ 0 , - 4 8 (% rbp ) js . L 4 8 cmpq % rdx , - 4 8 (% rbp ) jl . L 7 8 . L 4 8 : movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 8 : movq - 2 0 0 (% rbp ), % rdx testq % rax , % rax js . L 5 0 cmpq % rdx , % rax jl . L 7 9 . L 5 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 7 9 : movq - 2 0 8 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 5 2 cmpq % rax , - 4 8 (% rbp ) jge . L 5 2 movq - 1 4 4 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rcx movq - 1 7 6 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq - 6 4 (% rbp ), % rdx addq % rcx , % rdx movq % rdx , (% rax ) jmp . L 2 9 . L 5 2 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBE 2 2 : . LBE 2 1 : . LBE 2 0 : . LBB 2 7 : addq $ 1 , - 4 8 (% rbp ) . L 1 3 : . LBE 2 7 : movq - 4 8 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jle . L 8 5 . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 2 8 : addq $ 1 , - 4 0 (% rbp ) . L 1 2 : . LBE 2 8 : movq - 4 0 (% rbp ), % rax cmpq - 6 0 0 (% rbp ), % rax jle . L 8 6 . LBE 1 4 : . LBE 1 3 : . LBB 2 9 : movq - 5 8 4 (% rbp ), % rax cmpq $ 0 , - 6 0 0 (% rbp ) js . L 5 7 cmpq % rax , - 6 0 0 (% rbp ) jl . L 8 2 . L 5 7 : movq - 6 0 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 2 : movq - 5 9 2 (% rbp ), % rcx movq - 6 0 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 6 0 8 (% rbp ) js . L 5 9 cmpq % rax , - 6 0 8 (% rbp ) jge . L 5 9 movq - 1 1 2 (% rbp ), % rdx movq - 6 0 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax jmp . L 8 3 . L 5 9 : movq - 6 0 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 3 : . LBE 2 9 : . LBE 2 : addq $ 5 8 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 7 1 movl $ 3 4 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 9 : ret . L 2 7 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 3 2 0 , % rsp movq % rdi , - 3 2 8 (% rbp ) movq - 3 2 8 (% rbp ), % rax movq 3 2 (% rax ), % rax subq $ 1 , % rax movq % rax , - 2 4 (% rbp ) movq - 3 2 8 (% rbp ), % rcx movq 2 4 (% rcx ), % rax movq 3 2 (% rcx ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq 4 0 (% rcx ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 1 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 5 2 cmpq % rax , - 2 4 (% rbp ) jge . L 2 5 2 movq - 3 2 0 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 3 2 (% rbp ) . LBB 2 3 8 : movq - 3 2 (% rbp ), % rax movl (% rax ), % eax cmpl $ 3 2 , % eax je . L 2 5 3 jmp . L 2 5 4 . L 2 5 2 : . LBE 2 3 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 3 : . LBB 2 4 1 : . LBB 2 3 9 : . LBB 2 4 0 : movq - 3 2 (% rbp ), % rax movq 2 4 (% rax ), % rcx movq - 3 2 8 (% rbp ), % rdx movq 4 8 (% rdx ), % rdx addq % rcx , % rdx movq % rdx , 2 4 (% rax ) . LBE 2 4 0 : movq - 3 2 8 (% rbp ), % rcx movq 2 4 (% rcx ), % rax movq 3 2 (% rcx ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq 4 0 (% rcx ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 2 7 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 2 5 5 cmpq % rax , - 2 4 (% rbp ) jg . L 2 5 5 cmpq $ 0 , - 2 4 (% rbp ) jns . L 2 5 6 jmp . L 2 7 0 . L 2 5 5 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 2 7 0 : movq - 2 4 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 2 5 6 : movq - 2 8 8 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rdx movq - 3 2 8 (% rbp ), % rax movq % rcx , 2 4 (% rax ) movq - 3 2 8 (% rbp ), % rax movq - 2 4 (% rbp ), % rcx movq % rcx , 3 2 (% rax ) movq - 3 2 8 (% rbp ), % rax movq % rdx , 4 0 (% rax ) . L 2 5 4 : . LBE 2 3 9 : . LBE 2 4 1 : movl $ 3 2 , % r 1 2 d movq - 3 2 8 (% rbp ), % rax movq 4 8 (% rax ), % rax negq % rax movq % rax , % rbx leaq go . sexpr .. go . sexpr . token .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movl % r 1 2 d , - 2 5 6 (% rbp ) movq % rbx , - 2 3 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 5 8 . LBB 2 4 2 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) . LBE 2 4 2 : jmp . L 2 5 9 . L 2 5 8 : . LBB 2 4 3 : movq - 2 6 4 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq go . sexpr .. go . sexpr . token .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 5 9 : . LBE 2 4 3 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 3 2 8 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 6 0 . LBB 2 4 4 : movq - 3 2 8 (% rbp ), % rbx movq - 2 2 4 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 go . sexpr . token (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 6 1 . LBB 2 4 5 : movq - 1 9 2 (% rbp ), % rax movq % rax , (% rbx ) . LBE 2 4 5 : jmp . L 2 6 2 . L 2 6 1 : . LBB 2 4 6 : movq - 1 9 2 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 2 6 2 . L 2 6 0 : . LBE 2 4 6 : . LBE 2 4 4 : . LBB 2 4 7 : movq - 2 2 4 (% rbp ), % rsi movq - 2 0 8 (% rbp ), % rdx movq - 3 2 8 (% rbp ), % rcx movq % rsi , (% rcx ) movq - 3 2 8 (% rbp ), % rcx movq % rax , 8 (% rcx ) movq - 3 2 8 (% rbp ), % rax movq % rdx , 1 6 (% rax ) . L 2 6 2 : . LBE 2 4 7 : movq - 3 2 8 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 6 3 . LBB 2 4 8 : movq - 4 0 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 2 4 8 : jmp . L 2 6 4 . L 2 6 3 : . LBB 2 4 9 : movq - 4 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 6 4 : . LBE 2 4 9 : movq - 3 2 8 (% rbp ), % rcx movq 2 4 (% rcx ), % rax movq 3 2 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 4 0 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 6 5 . LBB 2 5 0 : movq - 3 2 8 (% rbp ), % rcx leaq 2 4 (% rcx ), % rbx movq - 1 6 0 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 go . sexpr . token (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 1 1 2 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 6 6 . LBB 2 5 1 : movq - 1 2 8 (% rbp ), % rax movq % rax , (% rbx ) . LBE 2 5 1 : jmp . L 2 6 7 . L 2 6 6 : . LBB 2 5 2 : movq - 1 2 8 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 2 6 7 . L 2 6 5 : . LBE 2 5 2 : . LBE 2 5 0 : . LBB 2 5 3 : movq - 1 6 0 (% rbp ), % rsi movq - 1 4 4 (% rbp ), % rdx movq - 3 2 8 (% rbp ), % rcx movq % rsi , 2 4 (% rcx ) movq - 3 2 8 (% rbp ), % rcx movq % rax , 3 2 (% rcx ) movq - 3 2 8 (% rbp ), % rax movq % rdx , 4 0 (% rax ) . L 2 6 7 : . LBE 2 5 3 : movq - 3 2 8 (% rbp ), % rcx movq 2 4 (% rcx ), % rax movq 3 2 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 4 0 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 6 8 . LBB 2 5 4 : movq - 4 0 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 2 5 4 : jmp . L 2 6 9 . L 2 6 8 : . LBB 2 5 5 : movq - 4 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 6 9 : . LBE 2 5 5 : . LBB 2 5 6 : movq - 3 2 8 (% rbp ), % rax movq 4 8 (% rax ), % rdx addq $ 1 , % rdx movq % rdx , 4 8 (% rax ) . LBE 2 5 6 : addq $ 3 2 0 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 2 movl $ 4 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 2 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movb $ 0 , - 1 7 (% rbp ) . LBB 2 : movq $- 1 , - 8 (% rbp ) . LBB 3 : movq $ 1 , - 1 6 (% rbp ) . LBB 4 : jmp . L 2 . L 3 1 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 3 cmpq % rax , - 1 6 (% rbp ) jl . L 2 4 . L 3 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : movq - 1 6 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 5 cmpq % rdx , % rax jl . L 2 5 . L 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq 1 6 (% rbp ), % rcx movq - 1 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jge . L 7 . LBB 8 : . LBB 9 : cmpq $- 1 , - 8 (% rbp ) je . L 8 . LBB 1 0 : . LBB 1 1 : movb $ 0 , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax jmp . L 9 . L 8 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : movq - 1 6 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 8 (% rbp ) . L 7 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 1 2 : addq $ 1 , - 1 6 (% rbp ) . L 2 : . LBE 1 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) jl . L 3 1 . LBE 4 : . LBE 3 : . LBB 1 3 : . LBB 1 4 : . LBB 1 5 : . LBB 1 6 : . LBB 1 7 : cmpq $- 1 , - 8 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 2 . LBB 1 8 : cmpq $ 0 , - 8 (% rbp ) sete % al . L 1 2 : . LBE 1 8 : . LBE 1 7 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 3 . LBB 1 9 : movq 2 4 (% rbp ), % rax subq $ 2 , % rax cmpq % rax , - 8 (% rbp ) sete % al . L 1 3 : . LBE 1 9 : . LBE 1 6 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 4 . LBB 2 0 : movq - 8 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq 2 4 (% rbp ), % rax testq % rdx , % rdx js . L 1 5 cmpq % rax , % rdx jl . L 2 7 . L 1 5 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq - 8 (% rbp ), % rax addq $ 1 , % rax movq 2 4 (% rbp ), % rcx testq % rax , % rax js . L 1 7 cmpq % rcx , % rax jl . L 2 8 . L 1 7 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq 1 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setle % al . L 1 4 : . LBE 2 0 : . LBE 1 5 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 1 9 . LBB 2 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 2 0 cmpq % rax , - 8 (% rbp ) jl . L 2 9 . L 2 0 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 8 (% rbp ), % rax addq $ 2 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 2 2 cmpq % rdx , % rax jl . L 3 0 . L 2 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq 1 6 (% rbp ), % rcx movq - 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setle % al . L 1 9 : . LBE 2 1 : . LBE 1 4 : movb % al , - 1 7 (% rbp ) movzbl - 1 7 (% rbp ), % eax . L 9 : . LBE 1 3 : . LBE 2 : leave ret
. LFB 0 : leaq - 8 5 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 4 movl $ 8 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 0 8 , % rsp movq % rdi , - 7 6 0 (% rbp ) leaq type ... 6 3 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 8 (% rbp ) leaq . LC 1 3 (% rip ), % rax movq % rax , - 5 6 0 (% rbp ) movq $ 6 , - 5 5 2 (% rbp ) leaq . LC 1 4 (% rip ), % rax movq % rax , - 5 4 4 (% rbp ) movq $ 4 , - 5 3 6 (% rbp ) leaq . LC 1 5 (% rip ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 6 , - 5 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 5 6 8 (% rbp ), % rcx movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 5 6 8 (% rbp ), % rcx leaq - 5 6 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 3 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 5 6 8 (% rbp ), % rax movq % rax , - 6 8 8 (% rbp ) movq $ 3 , - 6 8 0 (% rbp ) movq $ 3 , - 6 7 2 (% rbp ) leaq . LC 1 6 (% rip ), % r 1 2 movl $ 2 , % r 1 3 d movq % r 1 2 , - 6 6 4 (% rbp ) movq % r 1 3 , - 6 5 6 (% rbp ) leaq type ... 6 3 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 0 4 (% rbp ) leaq . LC 1 7 (% rip ), % rax movq % rax , - 4 9 6 (% rbp ) movq $ 3 , - 4 8 8 (% rbp ) leaq . LC 1 8 (% rip ), % rax movq % rax , - 4 8 0 (% rbp ) movq $ 4 , - 4 7 2 (% rbp ) leaq . LC 1 9 (% rip ), % rax movq % rax , - 4 6 4 (% rbp ) movq $ 3 , - 4 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 5 0 4 (% rbp ), % rcx movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 5 0 4 (% rbp ), % rax leaq - 4 9 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 5 0 4 (% rbp ), % rax movq % rax , - 6 4 8 (% rbp ) movq $ 3 , - 6 4 0 (% rbp ) movq $ 3 , - 6 3 2 (% rbp ) leaq . LC 2 0 (% rip ), % rax movq % rax , - 8 0 0 (% rbp ) movq $ 0 , - 7 9 2 (% rbp ) movdqa - 8 0 0 (% rbp ), % xmm 0 movups % xmm 0 , - 6 2 4 (% rbp ) movq $ 0 , - 6 0 8 (% rbp ) movq $ 0 , - 6 0 0 (% rbp ) movq $ 0 , - 5 9 2 (% rbp ) movq % rax , - 7 8 4 (% rbp ) movq $ 0 , - 7 7 6 (% rbp ) movdqa - 7 8 4 (% rbp ), % xmm 1 movups % xmm 1 , - 5 8 4 (% rbp ) . LBB 6 : movq $ 0 , - 7 5 2 (% rbp ) movq $ 0 , - 7 4 4 (% rbp ) movq $ 0 , - 7 3 6 (% rbp ) movq $ 0 , - 7 2 8 (% rbp ) movq $ 0 , - 7 2 0 (% rbp ) . LBB 7 : . LBB 8 : . LBB 9 : movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movl $ 3 , % r 1 2 d movl $ 0 , % ebx . LBE 9 : jmp . L 6 . L 2 3 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : testq % rbx , % rbx js . L 7 cmpq $ 2 , % rbx jg . L 7 movq % rbx , % rax salq $ 2 , % rax addq % rbx , % rax salq $ 3 , % rax leaq - 4 8 (% rbp ), % rdi addq % rdi , % rax subq $ 3 5 2 , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 4 4 8 (% rbp ) movq % rdi , - 4 4 0 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 4 3 2 (% rbp ) movq % rdi , - 4 2 4 (% rbp ) movq 3 2 (% rax ), % rax movq % rax , - 4 1 6 (% rbp ) . LBE 1 2 : . LBB 1 3 : movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 7 5 2 (% rbp ) movq % rdx , - 7 4 4 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 7 3 6 (% rbp ) movq % rdx , - 7 2 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 7 2 0 (% rbp ) . LBE 1 3 : . LBB 1 4 : subq $ 8 , % rsp pushq - 7 3 6 (% rbp ) pushq - 7 4 4 (% rbp ) pushq - 7 5 2 (% rbp ) call go . problem 1 4 . longestCommonPrefix addq $ 3 2 , % rsp movq % rax , - 7 0 4 (% rbp ) movq % rdx , - 6 9 6 (% rbp ) . LBB 1 5 : movq - 7 2 8 (% rbp ), % rax movq - 7 2 0 (% rbp ), % rdx movq - 6 9 6 (% rbp ), % rcx movq % rdx , % rsi cmpq % rsi , % rcx jne . L 8 jmp . L 2 1 . L 7 : . LBE 1 5 : . LBE 1 4 : . LBB 2 6 : movl $ 3 , % esi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : . LBE 2 6 : . LBB 2 7 : . LBB 2 5 : movq - 7 0 4 (% rbp ), % rcx movq % rax , % rsi cmpq % rsi , % rcx je . L 1 0 movq % rdx , % rcx movq % rcx , % rsi movq % rax , % rcx movq - 7 0 4 (% rbp ), % rax movq % rsi , % rdx movq % rcx , % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax je . L 1 0 . L 8 : . LBB 1 6 : leaq type ... 6 . 7 string (% rip ), % rax movq % rax , - 8 4 8 (% rbp ) leaq type ... 6 . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 . LBB 1 7 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 7 : jmp . L 1 2 . L 1 1 : . LBB 1 8 : movq - 2 3 2 (% rbp ), % rax leaq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 : . LBE 1 8 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 8 4 0 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 8 3 2 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 3 . LBB 1 9 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 9 : jmp . L 1 4 . L 1 3 : . LBB 2 0 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 4 : . LBE 2 0 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 8 2 4 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 8 1 6 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 7 2 8 (% rbp ), % rax movq - 7 2 0 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 5 . LBB 2 1 : movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 1 : jmp . L 1 6 . L 1 5 : . LBB 2 2 : movq - 1 6 8 (% rbp ), % rax leaq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 6 : . LBE 2 2 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 8 0 8 (% rbp ) leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 8 4 8 (% rbp ), % xmm 2 movups % xmm 2 , - 1 2 8 (% rbp ) movdqa - 8 3 2 (% rbp ), % xmm 3 movups % xmm 3 , - 1 1 2 (% rbp ) movdqa - 8 1 6 (% rbp ), % xmm 4 movups % xmm 4 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 7 . LBB 2 3 : movq - 1 3 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) . LBE 2 3 : jmp . L 1 8 . L 1 7 : . LBB 2 4 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 8 : . LBE 2 4 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 4 movl $ 2 5 , % r 1 5 d movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rsi , % rcx movq - 7 6 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 1 0 : . LBE 1 6 : . LBE 2 5 : . LBE 2 7 : . LBE 1 1 : . LBB 2 8 : addq $ 1 , % rbx . L 6 : . LBE 2 8 : cmpq % r 1 2 , % rbx jl . L 2 3 . LBE 8 : . LBE 7 : . LBE 6 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 7 movl $ 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 7 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 3 : cmpq $ 2 , - 4 0 (% rbp ) jg . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 8 (% rbp ) . LBB 6 : movq $ 0 , - 1 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 7 : jmp . L 4 . L 2 6 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq - 1 6 (% rbp ), % rax addq $ 2 , % rax movq % rax , - 2 4 (% rbp ) . LBB 1 0 : . LBB 1 1 : jmp . L 5 . L 2 5 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : addq $ 1 , - 2 4 (% rbp ) . L 5 : . LBE 1 3 : . LBB 1 4 : movq - 2 4 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax setl % al testb % al , % al je . L 6 . LBB 1 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 7 cmpq % rax , - 2 4 (% rbp ) jl . L 1 9 . L 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : movq - 2 4 (% rbp ), % rax leaq - 1 (% rax ), % rcx movq 2 4 (% rbp ), % rax testq % rcx , % rcx js . L 9 cmpq % rax , % rcx jl . L 2 0 . L 9 : movq % rax , % rsi movq % rcx , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : movq - 2 4 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq 2 4 (% rbp ), % rax testq % rdx , % rdx js . L 1 1 cmpq % rax , % rdx jl . L 2 1 . L 1 1 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : movq - 2 4 (% rbp ), % rax subq $ 2 , % rax movq 2 4 (% rbp ), % rsi testq % rax , % rax js . L 1 3 cmpq % rsi , % rax jl . L 2 2 . L 1 3 : movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : movq 1 6 (% rbp ), % rdi movq - 2 4 (% rbp ), % rsi salq $ 3 , % rsi addq % rdi , % rsi movq (% rsi ), % rsi movq 1 6 (% rbp ), % rdi salq $ 3 , % rcx addq % rdi , % rcx movq (% rcx ), % rdi movq % rsi , % rcx subq % rdi , % rcx movq 1 6 (% rbp ), % rsi salq $ 3 , % rdx addq % rsi , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rsi salq $ 3 , % rax addq % rsi , % rax movq (% rax ), % rsi movq % rdx , % rax subq % rsi , % rax cmpq % rax , % rcx sete % al . L 6 : . LBE 1 5 : . LBE 1 4 : testb % al , % al jne . L 2 5 . LBE 1 1 : . LBE 1 0 : subq $ 1 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax subq - 1 6 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 2 4 (% rbp ), % rax subq - 1 6 (% rbp ), % rax imulq % rdx , % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax addq % rax , - 8 (% rbp ) movq - 2 4 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) . L 4 : . LBE 9 : movq - 1 6 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jl . L 2 6 . LBE 7 : . LBE 6 : . LBB 1 6 : movq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 3 : . LBE 1 6 : . LBE 2 : leave ret
. LFB 0 : leaq - 3 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 7 movl $ 3 2 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 7 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 3 1 2 , % rsp movq % rdi , - 3 1 2 (% rbp ) movq % rsi , - 3 2 0 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 2 : movq - 3 1 2 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 0 4 (% rbp ) movq % rbx , - 2 9 6 (% rbp ) movq % rbx , - 2 8 8 (% rbp ) . LBB 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 5 3 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 3 2 0 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 cmpq % rax , - 2 4 (% rbp ) jl . L 3 9 . L 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 3 0 4 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 2 7 2 (% rbp ) movq % rbx , - 2 6 4 (% rbp ) movq % rbx , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 2 5 6 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 . LBB 7 : movq - 2 7 2 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 6 . L 5 : . LBE 7 : . LBB 8 : movq - 2 7 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 : . LBE 8 : movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 7 cmpq % rax , - 2 4 (% rbp ) jl . L 4 0 . L 7 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq - 3 0 4 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax testq % rax , % rax jg . L 9 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 9 : movq - 2 4 0 (% rbp ), % rax movq $ 1 , (% rax ) . LBE 6 : . LBB 9 : addq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 9 : movq - 2 4 (% rbp ), % rax cmpq - 3 1 2 (% rbp ), % rax jl . L 5 3 . LBE 4 : . LBE 3 : . LBB 1 0 : movq $ 0 , - 3 2 (% rbp ) . LBB 1 1 : jmp . L 1 2 . L 5 4 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : movq - 2 9 6 (% rbp ), % rax testq % rax , % rax jg . L 1 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 3 : movq - 3 0 4 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 4 cmpq % rax , - 3 2 (% rbp ) jge . L 1 4 movq - 2 0 8 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 1 , (% rax ) . LBE 1 3 : . LBB 1 4 : addq $ 1 , - 3 2 (% rbp ) jmp . L 1 2 . L 1 4 : . LBE 1 4 : . LBB 1 5 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : . LBE 1 5 : movq - 3 2 (% rbp ), % rax cmpq - 3 2 0 (% rbp ), % rax jl . L 5 4 . LBE 1 1 : . LBE 1 0 : . LBB 1 6 : movq $ 1 , - 4 0 (% rbp ) . LBB 1 7 : jmp . L 1 7 . L 5 6 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : . LBB 2 0 : movq $ 1 , - 4 8 (% rbp ) . LBB 2 1 : jmp . L 1 8 . L 5 5 : . LBB 2 2 : nop . LBE 2 2 : . LBB 2 3 : movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 9 cmpq % rax , - 4 0 (% rbp ) jl . L 4 3 . L 1 9 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq - 3 0 4 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 1 cmpq % rax , - 4 8 (% rbp ) jl . L 4 4 . L 2 1 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq - 2 9 6 (% rbp ), % rdx testq % rax , % rax js . L 2 3 cmpq % rdx , % rax jl . L 4 5 . L 2 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 3 0 4 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 5 cmpq % rax , - 4 8 (% rbp ) jl . L 4 6 . L 2 5 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 7 cmpq % rax , - 4 0 (% rbp ) jl . L 4 7 . L 2 7 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : movq - 3 0 4 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 4 8 (% rbp ), % rax subq $ 1 , % rax movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 2 9 cmpq % rdx , % rax jl . L 4 8 . L 2 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : movq - 1 4 4 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 1 1 2 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 1 7 6 (% rbp ), % rsi movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax addq % rcx , % rdx movq % rdx , (% rax ) . LBE 2 3 : . LBB 2 4 : addq $ 1 , - 4 8 (% rbp ) . L 1 8 : . LBE 2 4 : movq - 4 8 (% rbp ), % rax cmpq - 3 2 0 (% rbp ), % rax jl . L 5 5 . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBB 2 5 : addq $ 1 , - 4 0 (% rbp ) . L 1 7 : . LBE 2 5 : movq - 4 0 (% rbp ), % rax cmpq - 3 1 2 (% rbp ), % rax jl . L 5 6 . LBE 1 7 : . LBE 1 6 : . LBB 2 6 : movq - 3 1 2 (% rbp ), % rax subq $ 1 , % rax movq - 2 9 6 (% rbp ), % rdx testq % rax , % rax js . L 3 5 cmpq % rdx , % rax jl . L 5 1 . L 3 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : movq - 3 0 4 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movq - 3 2 0 (% rbp ), % rax subq $ 1 , % rax movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 3 7 cmpq % rdx , % rax jge . L 3 7 movq - 8 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax jmp . L 5 2 . L 3 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : . LBE 2 6 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 5 movl $ 2 0 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 5 2 , % rsp movq $ 0 , - 6 4 (% rbp ) . LBB 2 : call runtime . makemap_small @ PLT movq % rax , % rbx leaq go . day 1 7 2 .. go . day 1 7 2 . trie .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 3 : movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 3 : jmp . L 3 . L 2 : . LBB 4 : movq - 1 5 2 (% rbp ), % rax movq % rax , % rdx movq - 1 6 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 3 : . LBE 4 : movq - 1 6 0 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) . LBB 5 : movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) . LBB 6 : . LBB 7 : . LBB 8 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % r 1 5 movl $ 0 , % r 1 2 d . LBE 8 : jmp . L 4 . L 2 4 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : . LBB 1 1 : movq - 1 3 6 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 5 cmpq % rax , % r 1 2 jge . L 5 movq - 1 4 4 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 1 1 : . LBB 1 2 : movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) . LBE 1 2 : . LBB 1 3 : movq - 7 2 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 1 4 : movl $ 0 , - 7 6 (% rbp ) . LBB 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 1 8 4 (% rbp ) movl $ 0 , % ebx . LBE 1 7 : jmp . L 6 . L 5 : . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 3 6 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 2 3 : . LBE 3 6 : . LBB 3 7 : . LBB 3 5 : . LBB 3 4 : . LBB 3 3 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : . LBB 2 0 : movq - 1 6 8 (% rbp ), % rax testq % rbx , % rbx js . L 7 cmpq % rax , % rbx jge . L 7 movq - 1 7 6 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 8 jmp . L 2 0 . L 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 8 : . LBB 2 1 : addq $ 1 , % rbx . LBE 2 1 : jmp . L 1 0 . L 2 0 : . LBB 2 2 : movq - 1 7 6 (% rbp ), % rcx movq - 1 6 8 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movl % ecx , % eax . L 1 0 : . LBE 2 2 : . LBE 2 0 : . LBB 2 3 : movl % eax , - 7 6 (% rbp ) . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movb $ 0 , - 7 7 (% rbp ) . LBB 2 6 : movl - 7 6 (% rbp ), % eax movl % eax , - 1 1 2 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movl (% rax ), % edx movq - 5 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 . 1 go . day 1 7 2 . trie (% rip ), % rdi call runtime . mapaccess 2 _fast 3 2 @ PLT movl % edx , % eax movb % al , - 7 7 (% rbp ) . LBE 2 6 : movzbl - 7 7 (% rbp ), % eax xorl $ 1 , % eax testb % al , % al je . L 1 1 . LBB 2 7 : . LBB 2 8 : movq - 5 6 (% rbp ), % r 1 4 movl - 7 6 (% rbp ), % eax movl % eax , - 1 0 8 (% rbp ) call runtime . makemap_small @ PLT movq % rax , % r 1 3 leaq go . day 1 7 2 .. go . day 1 7 2 . trie .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 (% rbp ) movq % r 1 3 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 2 . LBB 2 9 : movq - 1 0 4 (% rbp ), % rax movq - 9 6 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 2 9 : jmp . L 1 3 . L 1 2 : . LBB 3 0 : movq - 9 6 (% rbp ), % rax movq % rax , % rdx movq - 1 0 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 3 : . LBE 3 0 : movq - 1 0 4 (% rbp ), % r 1 3 leaq - 1 0 8 (% rbp ), % rax movl (% rax ), % edx movq (% r 1 4 ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 . 1 go . day 1 7 2 . trie (% rip ), % rdi call runtime . mapassign_fast 3 2 @ PLT leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 4 . LBB 3 1 : movq % r 1 3 , (% rax ) jmp . L 1 1 . L 1 4 : . LBE 3 1 : . LBB 3 2 : movq % r 1 3 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 1 : . LBE 3 2 : . LBE 2 8 : . LBE 2 7 : . LBE 2 5 : movl - 7 6 (% rbp ), % eax movl % eax , - 8 4 (% rbp ) leaq - 8 4 (% rbp ), % rax movl (% rax ), % edx movq - 5 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 . 1 go . day 1 7 2 . trie (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) . L 6 : . LBE 2 4 : . LBE 1 9 : cmpq - 1 8 4 (% rbp ), % rbx jl . L 2 3 . LBE 3 3 : . LBE 3 4 : . LBE 3 5 : . LBE 3 7 : . LBE 1 0 : . LBB 3 8 : addq $ 1 , % r 1 2 . L 4 : . LBE 3 8 : cmpq % r 1 5 , % r 1 2 jl . L 2 4 . LBE 7 : . LBE 6 : . LBE 5 : . LBB 3 9 : movq - 7 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax . LBE 3 9 : . LBE 2 : addq $ 1 5 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
leaq - 1 3 0 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 0 6 movl $ 1 3 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 9 : ret . L 1 0 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 2 5 6 , % rsp movq % rdi , - 1 0 6 4 (% rbp ) movq % rdx , % rcx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rdx movq % rax , - 1 0 8 8 (% rbp ) movq % rdx , - 1 0 8 0 (% rbp ) leaq - 1 0 2 4 (% rbp ), % rdi leaq . LC 1 3 5 (% rip ), % rdx movl $ 3 6 , % eax movq % rdx , % rsi movq % rax , % rcx rep movsq leaq - 1 0 2 4 (% rbp ), % rax movq % rax , % r 8 movl $ 1 6 , % ecx movl $ 2 4 , % edx movl $ 1 2 , % esi leaq type .. map . 6 string . 7 int (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 5 6 (% rbp ) . LBB 7 5 : movq $ 0 , - 1 0 4 0 (% rbp ) movq $ 0 , - 1 0 3 2 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 7 6 : . LBB 7 7 : . LBB 7 8 : leaq - 7 3 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 string . 7 int (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 7 8 : jmp . L 8 1 . L 1 0 5 : . LBB 7 9 : nop . LBE 7 9 : . LBB 8 0 : . LBB 8 1 : movq - 7 3 6 (% rbp ), % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq - 7 2 8 (% rbp ), % rax movq (% rax ), % rsi . LBE 8 1 : . LBB 8 2 : movq % rcx , % rax movq % rbx , % rdx movq % rax , - 1 0 4 0 (% rbp ) movq % rdx , - 1 0 3 2 (% rbp ) movq % rsi , - 6 4 (% rbp ) . LBE 8 2 : . LBB 8 3 : movq - 1 0 8 8 (% rbp ), % rax movq % rax , % rsi leaq go . hashMap .. go . hashMap . hashMap .. d (% rip ), % rdi call runtime . assertitab @ PLT movq % rax , - 1 1 3 6 (% rbp ) movq - 1 0 8 0 (% rbp ), % rax movq % rax , - 1 1 2 8 (% rbp ) movq - 1 1 3 6 (% rbp ), % rax movq 2 4 (% rax ), % r 1 2 leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 8 (% rbp ) movq - 6 0 8 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , (% rdx ) movq - 6 0 8 (% rbp ), % rax movq % rax , % r 1 5 leaq string .. d (% rip ), % rax movq % rax , - 1 2 3 2 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 3 2 (% rbp ) movq - 1 0 4 0 (% rbp ), % rax movq - 1 0 3 2 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 2 . LBB 8 4 : movq - 6 3 2 (% rbp ), % rcx movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 8 4 : jmp . L 8 3 . L 8 2 : . LBB 8 5 : movq - 6 3 2 (% rbp ), % rcx leaq - 6 2 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 3 : . LBE 8 5 : movq - 6 3 2 (% rbp ), % rax movq % rax , - 1 2 2 4 (% rbp ) movq - 1 1 2 8 (% rbp ), % r 9 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rcx , % rdi movq % rdx , % r 8 movq - 1 2 3 2 (% rbp ), % rax movq - 1 2 2 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % rax movq % rdi , % rcx movq % rax , % rdx movq % r 9 , % rdi call *% r 1 2 . LVL 2 0 : movq - 1 0 8 8 (% rbp ), % rax movq % rax , % rsi leaq go . hashMap .. go . hashMap . hashMap .. d (% rip ), % rdi call runtime . assertitab @ PLT movq % rax , - 1 1 2 0 (% rbp ) movq - 1 0 8 0 (% rbp ), % rax movq % rax , - 1 1 1 2 (% rbp ) movq - 1 1 2 0 (% rbp ), % rax movq 8 (% rax ), % r 1 2 leaq string .. d (% rip ), % rax movq % rax , - 1 2 1 6 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 0 0 (% rbp ) movq - 1 0 4 0 (% rbp ), % rax movq - 1 0 3 2 (% rbp ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 4 . LBB 8 6 : movq - 6 0 0 (% rbp ), % rcx movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 8 6 : jmp . L 8 5 . L 8 4 : . LBB 8 7 : movq - 6 0 0 (% rbp ), % rcx leaq - 5 9 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 5 : . LBE 8 7 : movq - 6 0 0 (% rbp ), % rax movq % rax , - 1 2 0 8 (% rbp ) movq - 1 1 1 2 (% rbp ), % rdi movq - 1 2 1 6 (% rbp ), % rax movq - 1 2 0 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rsi movq % rax , % rdx call *% r 1 2 . LVL 2 1 : movq - 1 0 8 8 (% rbp ), % rax movq % rax , % rsi leaq go . hashMap .. go . hashMap . hashMap .. d (% rip ), % rdi call runtime . assertitab @ PLT movq % rax , - 1 1 0 4 (% rbp ) movq - 1 0 8 0 (% rbp ), % rax movq % rax , - 1 0 9 6 (% rbp ) movq - 1 1 0 4 (% rbp ), % rax movq 1 6 (% rax ), % rbx leaq string .. d (% rip ), % rax movq % rax , - 1 2 0 0 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 5 2 (% rbp ) movq - 1 0 4 0 (% rbp ), % rax movq - 1 0 3 2 (% rbp ), % rdx movq % rax , - 5 4 4 (% rbp ) movq % rdx , - 5 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 6 . LBB 8 8 : movq - 5 5 2 (% rbp ), % rcx movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 8 8 : jmp . L 8 7 . L 8 6 : . LBB 8 9 : movq - 5 5 2 (% rbp ), % rcx leaq - 5 4 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 7 : . LBE 8 9 : movq - 5 5 2 (% rbp ), % rax movq % rax , - 1 1 9 2 (% rbp ) movq - 1 0 9 6 (% rbp ), % rsi leaq - 2 5 6 (% rbp ), % rax movq - 1 2 0 0 (% rbp ), % rdx movq - 1 1 9 2 (% rbp ), % rcx movq % rax , % rdi call *% rbx . LVL 2 2 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 5 7 6 (% rbp ) movq % rdx , - 5 6 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 1 0 5 6 (% rbp ) movq % rdx , - 1 0 4 8 (% rbp ) movzbl - 5 6 0 (% rbp ), % eax movb % al , - 6 5 (% rbp ) . LBB 9 0 : movq - 1 0 5 6 (% rbp ), % rax testq % rax , % rax je . L 8 8 . LBB 9 1 : leaq string .. d (% rip ), % rax movq % rax , - 1 2 9 6 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 2 0 (% rbp ) movq - 1 0 4 0 (% rbp ), % rax movq - 1 0 3 2 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 9 . LBB 9 2 : movq - 5 2 0 (% rbp ), % rcx movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 9 2 : jmp . L 9 0 . L 8 9 : . LBB 9 3 : movq - 5 2 0 (% rbp ), % rcx leaq - 5 1 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 0 : . LBE 9 3 : movq - 5 2 0 (% rbp ), % rax movq % rax , - 1 2 8 8 (% rbp ) movdqa - 1 2 9 6 (% rbp ), % xmm 0 movups % xmm 0 , - 4 9 6 (% rbp ) leaq - 4 9 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq $ 1 , - 2 1 6 (% rbp ) movq $ 1 , - 2 0 8 (% rbp ) leaq . LC 1 3 6 (% rip ), % rax movq % rax , - 1 1 8 4 (% rbp ) movq $ 3 6 , - 1 1 7 6 (% rbp ) movq - 1 1 8 4 (% rbp ), % rax movq - 1 1 7 6 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 2 0 8 (% rbp ) pushq - 2 1 6 (% rbp ) pushq - 2 2 4 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq % rax , % r 1 2 movq % rdx , % r 1 3 movq - 1 0 5 6 (% rbp ), % rax movq - 1 0 4 8 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) leaq - 4 8 0 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq $ 1 , - 1 8 4 (% rbp ) movq $ 1 , - 1 7 6 (% rbp ) leaq . LC 1 3 7 (% rip ), % rax movq % rax , - 1 1 6 8 (% rbp ) movq $ 1 1 , - 1 1 6 0 (% rbp ) movq - 1 1 6 8 (% rbp ), % rax movq - 1 1 6 0 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 7 6 (% rbp ) pushq - 1 8 4 (% rbp ) pushq - 1 9 2 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq % r 1 2 , - 4 6 4 (% rbp ) movq % r 1 3 , - 4 5 6 (% rbp ) movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 1 2 8 0 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 2 4 (% rbp ) leaq - 4 6 4 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 1 . LBB 9 4 : movq - 4 2 4 (% rbp ), % rcx movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 9 4 : jmp . L 9 2 . L 9 1 : . LBB 9 5 : movq - 4 2 4 (% rbp ), % rcx leaq - 4 1 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 2 : . LBE 9 5 : movq - 4 2 4 (% rbp ), % rax movq % rax , - 1 2 7 2 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) movdqa - 1 2 8 0 (% rbp ), % xmm 1 movups % xmm 1 , - 3 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 3 . LBB 9 6 : movq - 3 9 2 (% rbp ), % rcx movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 9 6 : jmp . L 9 4 . L 9 3 : . LBB 9 7 : movq - 3 9 2 (% rbp ), % rcx leaq - 3 8 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 4 : . LBE 9 7 : movq - 3 9 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq $ 1 , - 1 5 2 (% rbp ) movq $ 1 , - 1 4 4 (% rbp ) movq - 1 0 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) movq % rax , % rdi call testing . T . Log .. stub @ PLT addq $ 3 2 , % rsp movq - 1 0 6 4 (% rbp ), % rax movq % rax , % rdi call testing . T . Fail .. stub @ PLT . L 8 8 : . LBE 9 1 : . LBE 9 0 : . LBB 9 8 : cmpb $ 0 , - 6 5 (% rbp ) je . L 9 5 . LBB 9 9 : leaq string .. d (% rip ), % rax movq % rax , - 1 2 6 4 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 1 0 4 0 (% rbp ), % rax movq - 1 0 3 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 6 . LBB 1 0 0 : movq - 3 6 0 (% rbp ), % rcx movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 0 0 : jmp . L 9 7 . L 9 6 : . LBB 1 0 1 : movq - 3 6 0 (% rbp ), % rcx leaq - 3 5 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 7 : . LBE 1 0 1 : movq - 3 6 0 (% rbp ), % rax movq % rax , - 1 2 5 6 (% rbp ) movdqa - 1 2 6 4 (% rbp ), % xmm 2 movups % xmm 2 , - 3 3 6 (% rbp ) leaq - 3 3 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) leaq . LC 1 3 8 (% rip ), % rax movq % rax , - 1 1 5 2 (% rbp ) movq $ 3 0 , - 1 1 4 4 (% rbp ) movq - 1 1 5 2 (% rbp ), % rax movq - 1 1 4 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq string .. d (% rip ), % rax movq % rax , - 1 2 4 8 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq % r 1 2 , - 3 0 4 (% rbp ) movq % r 1 3 , - 2 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 8 . LBB 1 0 2 : movq - 3 1 2 (% rbp ), % rcx movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 0 2 : jmp . L 9 9 . L 9 8 : . LBB 1 0 3 : movq - 3 1 2 (% rbp ), % rcx leaq - 3 0 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 9 : . LBE 1 0 3 : movq - 3 1 2 (% rbp ), % rax movq % rax , - 1 2 4 0 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movdqa - 1 2 4 8 (% rbp ), % xmm 3 movups % xmm 3 , - 2 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 0 0 . LBB 1 0 4 : movq - 2 8 0 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 0 4 : jmp . L 1 0 1 . L 1 0 0 : . LBB 1 0 5 : movq - 2 8 0 (% rbp ), % rcx leaq - 2 7 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 1 : . LBE 1 0 5 : movq - 2 8 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) movq - 1 0 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rax , % rdi call testing . T . Log .. stub @ PLT addq $ 3 2 , % rsp movq - 1 0 6 4 (% rbp ), % rax movq % rax , % rdi call testing . T . Fail .. stub @ PLT . L 9 5 : . LBE 9 9 : . LBE 9 8 : . LBE 8 3 : . LBE 8 0 : . LBB 1 0 6 : leaq - 7 3 6 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 8 1 : . LBE 1 0 6 : movq - 7 3 6 (% rbp ), % rax testq % rax , % rax jne . L 1 0 5 . LBE 7 7 : . LBE 7 6 : . LBE 7 5 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : leaq - 9 0 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 3 movl $ 9 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 6 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 5 6 , % rsp movq % rdi , - 8 0 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 8 8 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq $ 3 , - 4 7 2 (% rbp ) movq $ 3 , - 4 6 4 (% rbp ) leaq type ... 6 6 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 8 0 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 7 2 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 6 7 2 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) movq $ 3 , - 6 1 6 (% rbp ) movq $ 3 , - 6 0 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 6 4 (% rbp ) movq - 6 6 4 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 6 6 4 (% rbp ), % rax movq % rax , - 6 0 0 (% rbp ) movq $ 3 , - 5 9 2 (% rbp ) movq $ 3 , - 5 8 4 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 5 6 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq - 6 5 6 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) movq $ 3 , - 5 6 8 (% rbp ) movq $ 3 , - 5 6 0 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 8 (% rbp ) movq - 6 4 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq - 6 4 8 (% rbp ), % rax movq % rax , - 5 5 2 (% rbp ) movq $ 3 , - 5 4 4 (% rbp ) movq $ 3 , - 5 3 6 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 0 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq - 6 4 0 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 3 , - 5 2 0 (% rbp ) movq $ 3 , - 5 1 2 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 3 2 (% rbp ) movq - 6 3 2 (% rbp ), % rax movq $ 3 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq - 6 3 2 (% rbp ), % rax movq % rax , - 5 0 4 (% rbp ) movq $ 3 , - 4 9 6 (% rbp ) movq $ 3 , - 4 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 0 . LBB 3 4 : movq - 6 8 0 (% rbp ), % rcx movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , 6 4 (% rcx ) movq % rdx , 7 2 (% rcx ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , 8 0 (% rcx ) movq % rdx , 8 8 (% rcx ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , 9 6 (% rcx ) movq % rdx , 1 0 4 (% rcx ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , 1 1 2 (% rcx ) movq % rdx , 1 2 0 (% rcx ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , 1 2 8 (% rcx ) movq % rdx , 1 3 6 (% rcx ) . LBE 3 4 : jmp . L 4 1 . L 4 0 : . LBB 3 5 : movq - 6 8 0 (% rbp ), % rax leaq - 6 2 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 6 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 1 : . LBE 3 5 : movq - 6 8 0 (% rbp ), % rax movq % rax , - 4 5 6 (% rbp ) movq $ 6 , - 4 4 8 (% rbp ) movq $ 6 , - 4 4 0 (% rbp ) leaq - 4 8 0 (% rbp ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 1 , - 7 1 2 (% rbp ) movq $ 1 , - 7 0 4 (% rbp ) . LBB 3 6 : movq $ 0 , - 8 0 0 (% rbp ) movq $ 0 , - 7 9 2 (% rbp ) movq $ 0 , - 7 8 4 (% rbp ) movq $ 0 , - 7 7 6 (% rbp ) movq $ 0 , - 7 6 8 (% rbp ) movq $ 0 , - 7 6 0 (% rbp ) . LBB 3 7 : . LBB 3 8 : . LBB 3 9 : movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 7 6 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 3 9 : jmp . L 4 2 . L 6 2 : . LBB 4 0 : nop . LBE 4 0 : . LBB 4 1 : . LBB 4 2 : movq - 3 7 6 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 4 3 cmpq % rax , % r 1 2 jge . L 4 3 movq - 3 8 4 (% rbp ), % rcx movq % r 1 2 , % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 4 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) . LBE 4 2 : . LBB 4 3 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 8 0 0 (% rbp ) movq % rdx , - 7 9 2 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 7 8 4 (% rbp ) movq % rdx , - 7 7 6 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 7 6 8 (% rbp ) movq % rdx , - 7 6 0 (% rbp ) . LBE 4 3 : . LBB 4 4 : leaq - 7 5 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 7 8 4 (% rbp ) pushq - 7 9 2 (% rbp ) pushq - 8 0 0 (% rbp ) movq % rax , % rdi call go . leetcode . permute addq $ 3 2 , % rsp . LBB 4 5 : leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rax movq % rax , - 8 4 8 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 7 7 6 (% rbp ), % rax movq - 7 6 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 7 6 0 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 4 4 jmp . L 6 0 . L 4 3 : . LBE 4 5 : . LBE 4 4 : . LBB 6 0 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : . LBE 6 0 : . LBB 6 1 : . LBB 5 9 : . LBB 4 6 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 6 : jmp . L 4 6 . L 6 0 : . LBB 4 7 : movq - 2 6 4 (% rbp ), % rcx leaq - 2 5 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 6 : . LBE 4 7 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 8 4 0 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rax movq % rax , - 8 3 2 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 9 6 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 7 . LBB 4 8 : movq - 2 9 6 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 7 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 8 : jmp . L 4 8 . L 4 7 : . LBB 4 9 : movq - 2 9 6 (% rbp ), % rcx leaq - 2 8 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 8 : . LBE 4 9 : movq - 2 9 6 (% rbp ), % rax movq % rax , - 8 2 4 (% rbp ) movq - 8 3 2 (% rbp ), % rax movq - 8 2 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % rax movq - 8 4 8 (% rbp ), % rdx movq - 8 4 0 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT xorl $ 1 , % eax testb % al , % al je . L 4 9 . LBB 5 0 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 8 9 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 0 . LBB 5 1 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 5 1 : jmp . L 5 1 . L 5 0 : . LBB 5 2 : movq - 2 3 2 (% rbp ), % rcx leaq - 2 2 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 1 : . LBE 5 2 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 8 8 8 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rax movq % rax , - 8 8 0 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 2 . LBB 5 3 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 5 3 : jmp . L 5 3 . L 5 2 : . LBB 5 4 : movq - 2 0 0 (% rbp ), % rcx leaq - 1 9 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 3 : . LBE 5 4 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 8 7 2 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rax movq % rax , - 8 6 4 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 7 7 6 (% rbp ), % rax movq - 7 6 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 7 6 0 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 4 . LBB 5 5 : movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 5 5 : jmp . L 5 5 . L 5 4 : . LBB 5 6 : movq - 1 6 8 (% rbp ), % rcx leaq - 1 6 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 5 : . LBE 5 6 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 8 5 6 (% rbp ) leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 8 9 6 (% rbp ), % xmm 0 movups % xmm 0 , - 1 2 8 (% rbp ) movdqa - 8 8 0 (% rbp ), % xmm 1 movups % xmm 1 , - 1 1 2 (% rbp ) movdqa - 8 6 4 (% rbp ), % xmm 2 movups % xmm 2 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 6 . LBB 5 7 : movq - 1 3 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 5 7 : jmp . L 5 7 . L 5 6 : . LBB 5 8 : movq - 1 3 6 (% rbp ), % rcx leaq - 1 2 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 7 : . LBE 5 8 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 1 0 (% rip ), % r 1 4 movl $ 3 0 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 8 0 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 4 9 : . LBE 5 0 : . LBE 5 9 : . LBE 6 1 : . LBE 4 1 : . LBB 6 2 : addq $ 1 , % r 1 2 . L 4 2 : . LBE 6 2 : cmpq % r 1 3 , % r 1 2 jl . L 6 2 . LBE 3 8 : . LBE 3 7 : . LBE 3 6 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 5 movl $ 1 8 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 5 2 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 7 6 (% rbp ) movq % rbx , - 1 6 8 (% rbp ) movq % rbx , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq 2 4 (% rbp ), % rdx cmpq % rax , % rdx cmovle % rdx , % rax leaq 0 (,% rax , 8 ), % rdx movq 1 6 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memmove @ PLT leaq go . day 2 4 1 . HIndex .. func 1 (% rip ), % rcx leaq - 1 7 6 (% rbp ), % rdx movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) movq - 8 8 (% rbp ), % rax movq % rcx , (% rax ) movq % rdx , 8 (% rax ) movq - 8 8 (% rbp ), % rbx leaq type ... 6 . 7 int (% rip ), % r 1 2 leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 3 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 : jmp . L 3 . L 2 : . LBB 4 : movq - 1 5 2 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 4 : movq - 1 5 2 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call sort . Slice @ PLT . LBB 5 : movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 6 : . LBB 7 : . LBB 8 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rcx movl $ 0 , % eax . LBE 8 : jmp . L 4 . L 1 4 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : . LBB 1 1 : movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 5 cmpq % rdx , % rax jge . L 5 movq - 8 0 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 1 1 : . LBB 1 2 : movq % rax , - 4 8 (% rbp ) movq % rdx , - 5 6 (% rbp ) . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq - 4 8 (% rbp ), % rdx addq $ 1 , % rdx cmpq % rdx , - 5 6 (% rbp ) jl . L 6 jmp . L 1 2 . L 5 : . LBE 1 4 : . LBE 1 3 : . LBB 1 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 8 : . LBB 1 9 : . LBB 1 7 : . LBB 1 5 : . LBB 1 6 : movq - 4 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 1 1 . L 1 2 : . LBE 1 6 : . LBE 1 5 : . LBE 1 7 : . LBE 1 9 : . LBE 1 0 : . LBB 2 0 : addq $ 1 , % rax . L 4 : . LBE 2 0 : cmpq % rcx , % rax jl . L 1 4 . LBE 7 : . LBE 6 : . LBE 5 : . LBB 2 1 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 1 1 : . LBE 2 1 : . LBE 2 : addq $ 1 5 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 3 movl $ 1 0 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 8 0 , % rsp movq $ 0 , - 6 4 (% rbp ) . LBB 2 : movq $- 1 , - 2 4 (% rbp ) movq $- 1 , - 3 2 (% rbp ) movq $ 0 , - 4 0 (% rbp ) movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) . LBB 3 : movq $ 0 , - 7 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 2 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 8 8 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 9 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 7 2 (% rbp ) . LBE 1 0 : . LBB 1 1 : addq $ 1 , - 4 8 (% rbp ) . LBB 1 2 : . LBB 1 3 : movq - 7 2 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax setne % al testb % al , % al jne . L 4 jmp . L 5 . L 3 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 2 1 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 2 1 : . LBB 2 2 : . LBB 1 7 : . LBB 1 5 : . LBB 1 4 : movq - 7 2 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax setne % al . L 5 : . LBE 1 4 : . LBE 1 5 : testb % al , % al je . L 6 . LBB 1 6 : movq - 4 0 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 4 8 (% rbp ) . L 6 : . LBE 1 6 : . LBE 1 7 : movq - 4 8 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 0 9 0 4 . max movq % rax , - 5 6 (% rbp ) addq $ 1 , - 4 0 (% rbp ) . LBB 1 8 : movq - 7 2 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax je . L 7 . LBB 1 9 : . LBB 2 0 : movq - 2 4 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % rdx , - 3 2 (% rbp ) movq % rax , - 2 4 (% rbp ) . LBE 2 0 : movq $ 1 , - 4 0 (% rbp ) . L 7 : . LBE 1 9 : . LBE 1 8 : . LBE 2 2 : . LBE 8 : . LBB 2 3 : addq $ 1 , % rbx . L 2 : . LBE 2 3 : cmpq % r 1 2 , % rbx jl . L 1 2 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 2 4 : movq - 5 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax . LBE 2 4 : . LBE 2 : addq $ 8 0 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 5 movl $ 2 6 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 3 2 , % rsp movq $ 0 , - 5 6 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 2 3 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) . LBB 3 : movq $ 0 , - 7 2 (% rbp ) movq $ 0 , - 8 0 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 2 3 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 2 2 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rbx , - 7 2 (% rbp ) movq % rax , - 8 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : cmpq $ 1 , - 8 0 (% rbp ) je . L 4 jmp . L 5 . L 3 : . LBE 1 2 : . LBE 1 1 : . LBB 1 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 7 : . LBB 1 8 : . LBB 1 6 : . LBB 1 3 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 6 . LBB 1 4 : movq - 1 9 2 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) . LBE 1 4 : jmp . L 7 . L 6 : . LBB 1 5 : movq - 1 9 2 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rdx movq % rcx , - 2 5 6 (% rbp ) movq % rax , - 2 4 8 (% rbp ) movq % rdx , - 2 4 0 (% rbp ) . L 7 : . LBE 1 5 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 7 2 (% rbp ), % rax movq % rax , (% rdx ) . L 5 : . LBE 1 3 : . LBE 1 6 : . LBE 1 8 : . LBE 8 : . LBB 1 9 : addq $ 1 , % rbx . L 2 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 2 3 . LBE 5 : . LBE 4 : . LBE 3 : movq - 2 4 8 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) movq - 2 4 8 (% rbp ), % rax testq % rax , % rax jg . L 1 0 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 0 : movq - 2 5 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 4 0 (% rbp ) movq - 8 8 (% rbp ), % rax subq $ 1 , % rax movq - 2 4 8 (% rbp ), % rdx testq % rax , % rax js . L 1 1 cmpq % rdx , % rax jl . L 2 0 . L 1 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : movq - 2 5 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 6 4 (% rbp ), % rax subq % rdx , % rax leaq - 1 (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call main . mymax movq % rax , - 4 8 (% rbp ) . LBB 2 0 : movq $ 0 , - 9 6 (% rbp ) . LBB 2 1 : . LBB 2 2 : . LBB 2 3 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 2 3 : jmp . L 1 3 . L 2 4 : . LBB 2 4 : nop . LBE 2 4 : . LBB 2 5 : . LBB 2 6 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 1 4 cmpq % rax , % rbx jge . L 1 4 movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 2 6 : . LBB 2 7 : movq % rax , - 9 6 (% rbp ) . LBE 2 7 : . LBB 2 8 : movq - 9 6 (% rbp ), % rax subq - 4 0 (% rbp ), % rax jmp . L 2 1 . L 1 4 : . LBE 2 8 : . LBB 2 9 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : . LBE 2 9 : . LBB 3 0 : movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , % rdx movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call main . mymax movq % rax , - 4 8 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBE 3 0 : . LBE 2 5 : . LBB 3 1 : addq $ 1 , % rbx . L 1 3 : . LBE 3 1 : cmpq % r 1 2 , % rbx jl . L 2 4 . LBE 2 2 : . LBE 2 1 : . LBE 2 0 : . LBB 3 2 : movq - 4 8 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax . LBE 3 2 : . LBE 2 : addq $ 2 3 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 3 movl $ 1 8 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 5 2 , % rsp movq % rdi , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) . LBB 2 : movl $ 0 , % r 8 d movl $ 8 , % ecx movl $ 1 6 , % edx movl $ 0 , % esi leaq type .. map . 6 int . 7 int (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 4 8 (% rbp ) . LBB 3 : movq $ 0 , - 4 0 (% rbp ) . LBB 4 : jmp . L 2 . L 2 0 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 4 0 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jl . L 1 7 . L 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : movq - 1 4 4 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 1 2 0 (% rbp ) movl $ 1 , % ebx leaq - 1 2 0 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % rbx , (% rax ) . LBE 7 : . LBE 6 : . LBB 8 : addq $ 1 , - 4 0 (% rbp ) . L 2 : . LBE 8 : movq 2 4 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 2 0 . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rdx movq - 1 6 8 (% rbp ), % rax subq % rdx , % rax movq % rax , - 5 6 (% rbp ) . LBB 9 : movq $ 0 , - 6 4 (% rbp ) . LBB 1 0 : . LBB 1 1 : . LBB 1 2 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 2 : jmp . L 7 . L 2 2 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : . LBB 1 5 : movq - 1 0 4 (% rbp ), % rax testq % rbx , % rbx js . L 8 cmpq % rax , % rbx jge . L 8 movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 5 : . LBB 1 6 : movq % rax , - 6 4 (% rbp ) . LBE 1 6 : . LBB 1 7 : . LBB 1 8 : movq - 6 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jl . L 9 jmp . L 1 0 . L 8 : . LBE 1 8 : . LBE 1 7 : . LBB 3 1 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 9 : . LBE 3 1 : . LBB 3 2 : . LBB 3 0 : . LBB 1 9 : . LBB 2 0 : . LBB 2 1 : . LBB 2 2 : . LBB 2 3 : movb $ 0 , - 6 5 (% rbp ) . LBB 2 4 : movq - 1 6 8 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 8 8 (% rbp ) leaq - 8 8 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movl % edx , % eax movb % al , - 6 5 (% rbp ) . LBE 2 4 : cmpb $ 0 , - 6 5 (% rbp ) je . L 2 1 . LBB 2 5 : subq $ 1 , - 1 6 8 (% rbp ) . LBE 2 5 : . LBE 2 3 : . LBE 2 2 : jmp . L 9 . L 2 1 : . LBB 2 8 : . LBB 2 7 : . LBB 2 6 : nop . LBE 2 6 : . LBE 2 7 : . LBE 2 8 : . LBE 2 1 : . LBE 2 0 : . LBB 2 9 : movq - 6 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 1 6 8 (% rbp ), % rax leaq - 1 (% rax ), % r 1 3 leaq - 8 0 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . LBE 2 9 : subq $ 1 , - 1 6 8 (% rbp ) . L 1 0 : . LBE 1 9 : . LBE 3 0 : . LBE 3 2 : . LBE 1 4 : . LBB 3 3 : addq $ 1 , % rbx . L 7 : . LBE 3 3 : cmpq % r 1 2 , % rbx jl . L 2 2 . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 3 4 : movq - 5 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 5 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx . LBE 3 4 : . LBE 2 : addq $ 1 5 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 8 movl $ 3 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 2 8 , % rsp . LBB 2 : movq $ 1 , - 5 6 (% rbp ) . LBB 3 : jmp . L 2 . L 1 7 : . LBB 4 : nop . LBE 4 : . LBB 5 : . LBB 6 : movq - 5 6 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 6 4 (% rbp ) . LBB 7 : jmp . L 3 . L 1 6 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 6 4 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 7 2 (% rbp ) . LBB 1 1 : jmp . L 4 . L 1 5 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq - 5 6 (% rbp ), % rax imulq % rax , % rax movq % rax , % rdx movq - 6 4 (% rbp ), % rax imulq % rax , % rax addq % rax , % rdx movq - 7 2 (% rbp ), % rax imulq % rax , % rax cmpq % rax , % rdx jne . L 5 . LBB 1 5 : . LBB 1 6 : movq - 5 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax addq % rax , % rdx movq - 7 2 (% rbp ), % rax addq % rdx , % rax cmpq $ 1 0 0 0 , % rax jne . L 5 . LBB 1 7 : leaq int .. d (% rip ), % rbx movq % rbx , - 3 6 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 3 6 0 (% rbp ) movq % rbx , - 3 5 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 0 4 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 9 6 (% rbp ) movq - 2 9 6 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 9 6 (% rbp ), % rax movq % rax , % r 1 5 movdqa - 3 6 8 (% rbp ), % xmm 0 movups % xmm 0 , - 2 8 8 (% rbp ) movdqa - 3 5 2 (% rbp ), % xmm 1 movups % xmm 1 , - 2 7 2 (% rbp ) movq % r 1 4 , - 2 5 6 (% rbp ) movq % r 1 5 , - 2 4 8 (% rbp ) leaq - 2 8 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq $ 3 , - 1 8 4 (% rbp ) movq $ 3 , - 1 7 6 (% rbp ) leaq - 1 6 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 7 6 (% rbp ) pushq - 1 8 4 (% rbp ) pushq - 1 9 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movq - 5 6 (% rbp ), % rax imulq - 6 4 (% rbp ), % rax movq % rax , % rdx movq - 2 1 6 (% rbp ), % rax imulq - 7 2 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 1 6 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 2 0 8 (% rbp ) movq % r 1 3 , - 2 0 0 (% rbp ) leaq - 2 0 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) leaq - 9 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) . L 5 : . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 1 8 : addq $ 1 , - 7 2 (% rbp ) . L 4 : . LBE 1 8 : cmpq $ 1 0 0 0 , - 7 2 (% rbp ) jle . L 1 5 . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 1 9 : addq $ 1 , - 6 4 (% rbp ) . L 3 : . LBE 1 9 : cmpq $ 9 9 9 , - 6 4 (% rbp ) jle . L 1 6 . LBE 7 : . LBE 6 : . LBE 5 : . LBB 2 0 : addq $ 1 , - 5 6 (% rbp ) . L 2 : . LBE 2 0 : cmpq $ 9 9 9 , - 5 6 (% rbp ) jle . L 1 7 . LBE 3 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 4 4 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 movl $ 4 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 9 2 , % rsp leaq . LC 2 (% rip ), % rax movl $ 3 , % edx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call main . detectCapitalUse movl % eax , % ebx leaq bool .. d (% rip ), % rax movq % rax , - 4 3 2 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 3 6 0 (% rbp ), % rax movb % bl , (% rax ) movq - 3 6 0 (% rbp ), % rax movq % rax , - 4 2 4 (% rbp ) movdqa - 4 3 2 (% rbp ), % xmm 0 movups % xmm 0 , - 3 5 2 (% rbp ) leaq - 3 5 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 , - 2 3 2 (% rbp ) movq $ 1 , - 2 2 4 (% rbp ) leaq - 2 0 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) leaq . LC 3 (% rip ), % r 1 4 movl $ 8 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call main . detectCapitalUse movl % eax , % ebx leaq bool .. d (% rip ), % r 1 5 movq % r 1 5 , - 4 1 6 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movb % bl , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 4 0 8 (% rbp ) movdqa - 4 1 6 (% rbp ), % xmm 1 movups % xmm 1 , - 3 0 4 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 1 , - 1 6 8 (% rbp ) movq $ 1 , - 1 6 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq . LC 4 (% rip ), % r 1 2 movl $ 2 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call main . detectCapitalUse movl % eax , % ebx movq % r 1 5 , - 4 0 0 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movb % bl , (% rax ) movq - 2 6 4 (% rbp ), % rax movq % rax , - 3 9 2 (% rbp ) movdqa - 4 0 0 (% rbp ), % xmm 2 movups % xmm 2 , - 2 5 6 (% rbp ) leaq - 2 5 6 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq $ 1 , - 9 6 (% rbp ) leaq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 4 2 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 0 movl $ 4 2 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 8 4 , % rsp movq % rdi , - 3 9 2 (% rbp ) movq % rsi , - 4 0 0 (% rbp ) movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) . LBB 2 : leaq type ... 6 0 x . 7 float 6 4 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 0 , - 3 4 4 (% rbp ) movq $ 0 , - 3 3 6 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq % rax , - 2 8 0 (% rbp ) leaq - 2 8 0 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 1 , - 3 7 6 (% rbp ) movq $ 1 , - 3 6 8 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 2 9 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 3 7 6 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 7 : movq $ 0 , - 5 6 (% rbp ) . LBB 8 : . LBB 9 : . LBB 1 0 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 1 0 : jmp . L 3 . L 2 8 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : . LBB 1 3 : movq - 2 6 4 (% rbp ), % rax testq % rbx , % rbx js . L 4 cmpq % rax , % rbx jge . L 4 movq - 2 7 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 3 : . LBB 1 4 : movq % rax , - 5 6 (% rbp ) . LBE 1 4 : . LBB 1 5 : movq - 5 6 (% rbp ), % rax movq (% rax ), % rax addq % rax , - 4 0 (% rbp ) . LBB 1 6 : movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax jne . L 5 . LBB 1 7 : jmp . L 6 . L 4 : . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBB 3 0 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 5 : . LBE 3 0 : . LBB 3 1 : . LBB 2 3 : . LBB 2 2 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % r 1 2 movq - 5 6 (% rbp ), % rax movq 8 (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 7 . LBB 1 8 : movq - 2 4 0 (% rbp ), % rsi leaq - 1 4 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 go . leetcode 0 6 3 7 . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) . LBE 1 8 : jmp . L 8 . L 7 : . LBB 1 9 : movq - 2 4 0 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rdx movq % rcx , - 3 8 4 (% rbp ) movq % rax , - 3 7 6 (% rbp ) movq % rdx , - 3 6 8 (% rbp ) . L 8 : . LBE 1 9 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 9 . LBB 2 0 : movq % r 1 3 , (% rax ) jmp . L 6 . L 9 : . LBE 2 0 : . LBB 2 1 : movq % r 1 3 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 : . LBE 2 1 : . LBE 2 2 : . LBE 2 3 : . LBB 2 4 : movq - 5 6 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax je . L 1 0 . LBB 2 5 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 2 movq - 5 6 (% rbp ), % rax movq 1 6 (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 1 . LBB 2 6 : movq - 2 0 8 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 go . leetcode 0 6 3 7 . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) . LBE 2 6 : jmp . L 1 2 . L 1 1 : . LBB 2 7 : movq - 2 0 8 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rdx movq % rcx , - 3 8 4 (% rbp ) movq % rax , - 3 7 6 (% rbp ) movq % rdx , - 3 6 8 (% rbp ) . L 1 2 : . LBE 2 7 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 3 . LBB 2 8 : movq % r 1 3 , (% rax ) jmp . L 1 0 . L 1 3 : . LBE 2 8 : . LBB 2 9 : movq % r 1 3 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 0 : . LBE 2 9 : . LBE 2 5 : . LBE 2 4 : . LBE 3 1 : . LBE 1 2 : . LBB 3 2 : addq $ 1 , % rbx . L 3 : . LBE 3 2 : cmpq % r 1 4 , % rbx jl . L 2 8 . LBE 9 : . LBE 8 : . LBE 7 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rbx pxor % xmm 0 , % xmm 0 cvtsi 2 sdq - 4 0 (% rbp ), % xmm 0 pxor % xmm 1 , % xmm 1 cvtsi 2 sdq - 4 8 (% rbp ), % xmm 1 divsd % xmm 1 , % xmm 0 movsd % xmm 0 , - 4 0 8 (% rbp ) leaq 1 (% rbx ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 6 . LBB 3 3 : movq - 1 7 6 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq float 6 4 .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) . LBE 3 3 : jmp . L 1 7 . L 1 6 : . LBB 3 4 : movq - 1 7 6 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rdx movq % rcx , - 3 5 2 (% rbp ) movq % rax , - 3 4 4 (% rbp ) movq % rdx , - 3 3 6 (% rbp ) . L 1 7 : . LBE 3 4 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movsd - 4 0 8 (% rbp ), % xmm 2 movsd % xmm 2 , (% rax ) movq - 3 6 8 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 8 cmpq % rax , - 4 8 (% rbp ) jle . L 2 6 . L 1 8 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 2 6 : movq - 3 8 4 (% rbp ), % rdx movq - 3 6 8 (% rbp ), % rax cmpq % rax , - 4 8 (% rbp ) je . L 2 0 movq - 4 8 (% rbp ), % rax salq $ 3 , % rax jmp . L 2 1 . L 2 0 : movl $ 0 , % eax . L 2 1 : leaq (% rdx ,% rax ), % rcx movq - 3 7 6 (% rbp ), % rax subq - 4 8 (% rbp ), % rax movq % rax , % rdx movq - 3 6 8 (% rbp ), % rax subq - 4 8 (% rbp ), % rax movq % rcx , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq % rax , - 3 6 8 (% rbp ) . L 2 : . LBE 6 : movq - 3 7 6 (% rbp ), % rax testq % rax , % rax jne . L 2 9 . LBE 4 : . LBE 3 : . LBB 3 5 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 9 2 (% rbp ), % rcx movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 0 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 5 : . LBE 2 : movq - 3 9 2 (% rbp ), % rax addq $ 3 8 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 6 movl $ 7 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 6 : pushq % rbp movq % rsp , % rbp subq $ 6 4 , % rsp movq % rdi , - 5 6 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) movq $ 0 , - 1 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movq 2 4 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 3 2 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 2 5 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : . LBB 8 : jmp . L 3 . L 2 3 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 4 cmpq % rax , - 1 6 (% rbp ) jl . L 1 8 . L 4 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq % rax , - 2 4 (% rbp ) . LBE 1 0 : . LBB 1 1 : addq $ 1 , - 1 6 (% rbp ) . L 3 : . LBE 1 1 : . LBB 1 2 : movq - 2 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax setl % al testb % al , % al je . L 6 . LBB 1 3 : movq 2 4 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) setl % al . L 6 : . LBE 1 3 : . LBE 1 2 : testb % al , % al jne . L 2 3 . LBE 8 : . LBE 7 : . LBB 1 4 : . LBB 1 5 : jmp . L 9 . L 2 4 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 1 0 cmpq % rax , - 8 (% rbp ) jl . L 2 0 . L 1 0 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : movq 1 6 (% rbp ), % rdx movq - 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax subq % rax , - 2 4 (% rbp ) . LBB 1 8 : movq - 1 6 (% rbp ), % rax subq - 8 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) jle . L 1 2 . LBB 1 9 : movq - 1 6 (% rbp ), % rax subq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . L 1 2 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBB 2 0 : addq $ 1 , - 8 (% rbp ) . L 9 : . LBE 2 0 : movq - 2 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jge . L 2 4 . L 2 : . LBE 1 5 : . LBE 1 4 : . LBE 6 : movq 2 4 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) jl . L 2 5 . LBE 4 : . LBE 3 : . LBB 2 1 : movq 2 4 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 3 2 (% rbp ) jne . L 1 6 . LBB 2 2 : . LBB 2 3 : movq $ 0 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 1 7 . L 1 6 : . LBE 2 3 : . LBE 2 2 : . LBE 2 1 : . LBB 2 4 : movq - 3 2 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 1 7 : . LBE 2 4 : . LBE 2 : leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 4 4 movl $ 8 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 1 : ret . L 1 4 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 6 4 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 1 0 5 : movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 1 0 6 : movq $ 0 , - 4 8 (% rbp ) . LBB 1 0 7 : . LBB 1 0 8 : . LBB 1 0 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 0 9 : jmp . L 1 3 7 . L 1 4 3 : . LBB 1 1 0 : nop . LBE 1 1 0 : . LBB 1 1 1 : . LBB 1 1 2 : movq - 7 2 (% rbp ), % rax testq % rbx , % rbx js . L 1 3 8 cmpq % rax , % rbx jge . L 1 3 8 movq - 8 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 1 2 : . LBB 1 1 3 : movq % rax , - 4 8 (% rbp ) . LBE 1 1 3 : . LBB 1 1 4 : movq - 2 4 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 3 2 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . Solution . max movq % rax , - 2 4 (% rbp ) movq - 4 8 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax addq % rdx , % rax movq % rax , - 3 2 (% rbp ) . LBE 1 1 4 : . LBE 1 1 1 : . LBB 1 1 6 : addq $ 1 , % rbx jmp . L 1 3 7 . L 1 3 8 : . LBE 1 1 6 : . LBB 1 1 7 : . LBB 1 1 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 7 : . LBE 1 1 5 : . LBE 1 1 7 : cmpq % r 1 2 , % rbx jl . L 1 4 3 . LBE 1 0 8 : . LBE 1 0 7 : . LBE 1 0 6 : . LBB 1 1 8 : movq - 3 2 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . Solution . max movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 1 1 8 : . LBE 1 0 5 : addq $ 6 4 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 8 movl $ 1 0 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp subq $ 9 6 , % rsp movq % rdi , - 7 2 (% rbp ) movq % rsi , - 8 0 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq % rcx , - 9 6 (% rbp ) . LBB 2 : . LBB 3 : . LBB 4 : . LBB 5 : . LBB 6 : movq - 7 2 (% rbp ), % rax shrq $ 6 3 , % rax movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 . LBB 7 : movq - 8 0 (% rbp ), % rax shrq $ 6 3 , % rax . L 2 : . LBE 7 : . LBE 6 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 3 . LBB 8 : movq 2 4 (% rbp ), % rax cmpq % rax , - 7 2 (% rbp ) setge % al . L 3 : . LBE 8 : . LBE 5 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 4 . LBB 9 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 5 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 5 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax cmpq % rax , - 8 0 (% rbp ) setge % al . L 4 : . LBE 9 : . LBE 4 : movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 6 . LBB 1 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 7 cmpq % rax , - 7 2 (% rbp ) jl . L 1 5 . L 7 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : movq 1 6 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 4 8 (% rbp ) movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 9 cmpq % rax , - 8 0 (% rbp ) jge . L 9 movq - 6 4 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 8 8 (% rbp ) setne % al jmp . L 6 . L 9 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 0 : . LBE 3 : testb % al , % al jne . L 1 7 . LBE 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 1 2 cmpq % rax , - 7 2 (% rbp ) jl . L 1 6 . L 1 2 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : movq 1 6 (% rbp ), % rcx movq - 7 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 (% rbp ) movq - 2 4 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 1 4 cmpq % rax , - 8 0 (% rbp ) jge . L 1 4 movq - 3 2 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax salq $ 3 , % rax addq % rax , % rdx movq - 9 6 (% rbp ), % rax movq % rax , (% rdx ) movq - 8 0 (% rbp ), % rax leaq - 1 (% rax ), % rsi movq - 9 6 (% rbp ), % rcx movq - 8 8 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call main . dfs addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax leaq 1 (% rax ), % rsi movq - 9 6 (% rbp ), % rcx movq - 8 8 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call main . dfs addq $ 3 2 , % rsp movq - 7 2 (% rbp ), % rax leaq - 1 (% rax ), % rdi movq - 9 6 (% rbp ), % rcx movq - 8 8 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rsi call main . dfs addq $ 3 2 , % rsp movq - 7 2 (% rbp ), % rax leaq 1 (% rax ), % rdi movq - 9 6 (% rbp ), % rcx movq - 8 8 (% rbp ), % rdx movq - 8 0 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rsi call main . dfs addq $ 3 2 , % rsp jmp . L 1 . L 1 4 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : . LBB 1 2 : . LBB 1 1 : nop . L 1 : . LBE 1 1 : . LBE 1 2 : leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 4 3 6 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 9 1 : ret . L 1 4 3 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 2 0 , % rsp movq % rdi , - 1 0 4 (% rbp ) movq % rsi , % rax movq % rdx , % rsi movq % rsi , % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq % rcx , % rax movq % r 8 , % rcx movq % rcx , % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq $ 0 , - 9 6 (% rbp ) movq $ 0 , - 8 8 (% rbp ) . LBB 1 4 6 7 : movq - 1 4 4 (% rbp ), % rax leaq type ... 1 go . binaryTree . gbtElement (% rip ), % rdx cmpq % rdx , % rax je . L 1 4 2 1 movq - 1 4 4 (% rbp ), % rax leaq type .. interface . 4 . 5 (% rip ), % rdx movq % rax , % rsi leaq type ... 1 go . binaryTree . gbtElement (% rip ), % rdi call runtime . panicdottype @ PLT . L 1 4 2 1 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 1 4 6 8 : cmpq $ 0 , - 5 6 (% rbp ) jne . L 1 4 2 2 . LBB 1 4 6 9 : movq - 1 0 4 (% rbp ), % rax movq % rax , % rdi call go . binaryTree . gbt . Root movq % rax , % rsi leaq type ... 1 go . binaryTree . gbtElement (% rip ), % rcx cmpq % rcx , % rsi je . L 1 4 2 3 leaq type .. interface . 4 . 5 (% rip ), % rdx movq % rax , % rsi leaq type ... 1 go . binaryTree . gbtElement (% rip ), % rdi call runtime . panicdottype @ PLT . L 1 4 2 3 : movq % rdx , - 5 6 (% rbp ) . L 1 4 2 2 : . LBE 1 4 6 9 : . LBE 1 4 6 8 : movq - 1 2 8 (% rbp ), % rax leaq type ... 1 go . binaryTree . gbtElement (% rip ), % rdx cmpq % rdx , % rax je . L 1 4 2 4 movq - 1 2 8 (% rbp ), % rax leaq type .. interface . 4 . 5 (% rip ), % rdx movq % rax , % rsi leaq type ... 1 go . binaryTree . gbtElement (% rip ), % rdi call runtime . panicdottype @ PLT . L 1 4 2 4 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) . LBB 1 4 7 0 : leaq type ... 1 go . binaryTree . gbtElement (% rip ), % r 1 2 movq - 7 2 (% rbp ), % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq - 1 0 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . binaryTree . gbt . IsNil testb % al , % al je . L 1 4 2 5 . LBB 1 4 7 1 : . LBB 1 4 7 2 : movq - 1 0 4 (% rbp ), % rax movq (% rax ), % rax leaq type ... 1 go . binaryTree . gbtElement (% rip ), % rdx movq % rdx , - 9 6 (% rbp ) movq % rax , - 8 8 (% rbp ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx jmp . L 1 4 3 3 . L 1 4 2 5 : . LBE 1 4 7 2 : . LBE 1 4 7 1 : . LBE 1 4 7 0 : . LBB 1 4 7 3 : leaq type ... 1 go . binaryTree . gbtElement (% rip ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 7 2 (% rbp ), % rax movq 4 0 (% rax ), % rax movq % rax , - 1 5 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 1 0 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . binaryTree . gbt . IsNil xorl $ 1 , % eax testb % al , % al je . L 1 4 2 7 . LBB 1 4 7 4 : . LBB 1 4 7 5 : leaq type ... 1 go . binaryTree . gbtElement (% rip ), % r 1 4 movq - 7 2 (% rbp ), % rax movq 4 0 (% rax ), % rax movq % rax , % r 1 5 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 1 0 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . binaryTree . gbt . Min movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx jmp . L 1 4 3 3 . L 1 4 2 7 : . LBE 1 4 7 5 : . LBE 1 4 7 4 : . LBE 1 4 7 3 : movq - 7 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) . LBB 1 4 7 6 : . LBB 1 4 7 7 : jmp . L 1 4 2 8 . L 1 4 3 5 : . LBB 1 4 7 8 : nop . LBE 1 4 7 8 : . LBB 1 4 7 9 : movq - 6 4 (% rbp ), % rax movq 2 4 (% rax ), % rax movq % rax , - 6 4 (% rbp ) . L 1 4 2 8 : . LBE 1 4 7 9 : . LBB 1 4 8 0 : movq - 6 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax setne % al testb % al , % al je . L 1 4 2 9 . LBB 1 4 8 1 : movq - 6 4 (% rbp ), % rax movq 2 4 (% rax ), % rax movq 3 2 (% rax ), % rax cmpq % rax , - 6 4 (% rbp ) setne % al . L 1 4 2 9 : . LBE 1 4 8 1 : . LBE 1 4 8 0 : testb % al , % al jne . L 1 4 3 5 . LBE 1 4 7 7 : . LBE 1 4 7 6 : . LBB 1 4 8 2 : movq - 6 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jne . L 1 4 3 2 . LBB 1 4 8 3 : . LBB 1 4 8 4 : movq - 1 0 4 (% rbp ), % rax movq (% rax ), % rax leaq type ... 1 go . binaryTree . gbtElement (% rip ), % rdx movq % rdx , - 9 6 (% rbp ) movq % rax , - 8 8 (% rbp ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx jmp . L 1 4 3 3 . L 1 4 3 2 : . LBE 1 4 8 4 : . LBE 1 4 8 3 : . LBE 1 4 8 2 : . LBB 1 4 8 5 : movq - 6 4 (% rbp ), % rax movq 2 4 (% rax ), % rax leaq type ... 1 go . binaryTree . gbtElement (% rip ), % rdx movq % rdx , - 9 6 (% rbp ) movq % rax , - 8 8 (% rbp ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx . L 1 4 3 3 : . LBE 1 4 8 5 : . LBE 1 4 6 7 : addq $ 1 2 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 5 movl $ 2 8 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp subq $ 2 7 2 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq % rdx , - 2 7 2 (% rbp ) movq % rcx , - 2 6 4 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) . LBB 2 : movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movb $ 0 , - 1 (% rbp ) movq - 2 4 8 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) movq - 2 6 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 2 4 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 2 2 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 2 4 8 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 3 cmpq % rax , - 1 6 (% rbp ) jge . L 3 movq - 2 5 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 2 7 (% rbp ) movq - 2 6 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) jns . L 4 jmp . L 5 . L 3 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 : cmpq % rax , - 2 4 (% rbp ) jge . L 5 movq - 2 7 2 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movb % al , - 2 8 (% rbp ) movzbl - 2 7 (% rbp ), % edx movzbl - 2 8 (% rbp ), % eax addl % eax , % edx movzbl - 1 (% rbp ), % eax addl % edx , % eax subl $ 9 6 , % eax movb % al , - 2 9 (% rbp ) . LBB 7 : movzbl - 2 9 (% rbp ), % eax andl $ 1 , % eax addl $ 4 8 , % eax movzbl % al , % edx leaq - 1 9 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . intstring @ PLT movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movzbl - 2 9 (% rbp ), % ecx shrb % cl movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movb % cl , - 1 (% rbp ) . LBE 7 : . LBB 8 : movq - 1 6 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rdx , - 1 6 (% rbp ) movq % rax , - 2 4 (% rbp ) jmp . L 2 . L 5 : . LBE 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 6 : . LBB 9 : movq - 1 6 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax testb % al , % al je . L 6 . LBB 1 0 : movq - 2 4 (% rbp ), % rax notq % rax shrq $ 6 3 , % rax . L 6 : . LBE 1 0 : . LBE 9 : testb % al , % al jne . L 2 2 . LBE 4 : . LBE 3 : . LBB 1 1 : . LBB 1 2 : jmp . L 9 . L 2 3 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : movq - 2 4 8 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 0 cmpq % rax , - 1 6 (% rbp ) jge . L 1 0 movq - 2 5 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % edx movzbl - 1 (% rbp ), % eax addl % edx , % eax subl $ 4 8 , % eax movb % al , - 2 6 (% rbp ) . LBB 1 5 : movzbl - 2 6 (% rbp ), % eax andl $ 1 , % eax addl $ 4 8 , % eax movzbl % al , % edx leaq - 1 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . intstring @ PLT movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movzbl - 2 6 (% rbp ), % ecx shrb % cl movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movb % cl , - 1 (% rbp ) . LBE 1 5 : subq $ 1 , - 1 6 (% rbp ) jmp . L 9 . L 1 0 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 9 : . LBE 1 4 : cmpq $ 0 , - 1 6 (% rbp ) jns . L 2 3 . LBE 1 2 : . LBE 1 1 : . LBB 1 6 : . LBB 1 7 : jmp . L 1 3 . L 2 4 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : movq - 2 6 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 4 cmpq % rax , - 2 4 (% rbp ) jge . L 1 4 movq - 2 7 2 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % edx movzbl - 1 (% rbp ), % eax addl % edx , % eax subl $ 4 8 , % eax movb % al , - 2 5 (% rbp ) . LBB 2 0 : movzbl - 2 5 (% rbp ), % eax andl $ 1 , % eax addl $ 4 8 , % eax movzbl % al , % edx leaq - 1 0 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . intstring @ PLT movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) leaq - 9 6 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movzbl - 2 5 (% rbp ), % ecx shrb % cl movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movb % cl , - 1 (% rbp ) . LBE 2 0 : subq $ 1 , - 2 4 (% rbp ) jmp . L 1 3 . L 1 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : . LBE 1 9 : cmpq $ 0 , - 2 4 (% rbp ) jns . L 2 4 . LBE 1 7 : . LBE 1 6 : . LBB 2 1 : cmpb $ 1 , - 1 (% rbp ) jne . L 1 7 . LBB 2 2 : leaq . LC 0 (% rip ), % rax movq % rax , - 6 4 (% rbp ) movq $ 1 , - 5 6 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) leaq - 6 4 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . L 1 7 : . LBE 2 2 : . LBE 2 1 : . LBB 2 3 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx . LBE 2 3 : . LBE 2 : leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 9 0 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 0 : ret . L 9 0 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) . LBB 9 3 : movq $ 0 , - 8 (% rbp ) . LBB 9 4 : jmp . L 8 5 . L 8 9 : . LBB 9 5 : nop . LBE 9 5 : . LBB 9 6 : movl $ 5 , % esi movl $ 1 0 , % edi call go . power . RecursivePower . LBE 9 6 : . LBB 9 7 : addq $ 1 , - 8 (% rbp ) . L 8 5 : . LBE 9 7 : movq - 2 4 (% rbp ), % rax movq 2 7 2 (% rax ), % rax cmpq % rax , - 8 (% rbp ) jl . L 8 9 . LBE 9 4 : . LBE 9 3 : leave ret
leaq - 3 6 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 1 movl $ 3 6 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 : ret . L 5 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 1 2 , % rsp movq % rdi , - 3 1 2 (% rbp ) leaq - 2 8 8 (% rbp ), % rax movq % rax , % rdi call time . Now @ PLT leaq - 2 5 6 (% rbp ), % rax leaq - 2 8 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call time . Time . UTC @ PLT leaq - 2 5 6 (% rbp ), % rax movq % rax , % rdi call time . Time . UnixNano @ PLT movq % rax , - 6 4 (% rbp ) leaq int 6 4 .. d (% rip ), % rax movq % rax , - 3 5 2 (% rbp ) leaq int 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 2 4 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 1 6 (% rbp ) movdqa - 3 5 2 (% rbp ), % xmm 0 movups % xmm 0 , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 9 . LBB 3 3 : movq - 2 1 6 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 3 3 : jmp . L 4 0 . L 3 9 : . LBB 3 4 : movq - 2 1 6 (% rbp ), % rax leaq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 0 : . LBE 3 4 : movq - 2 1 6 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) leaq . LC 2 8 (% rip ), % r 1 4 movl $ 1 5 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 3 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Logf .. stub @ PLT addq $ 3 2 , % rsp movq - 6 4 (% rbp ), % rax movq % rax , % rdi call math .. z 2 frand . NewSource @ PLT movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call math .. z 2 frand . New @ PLT movq % rax , - 7 2 (% rbp ) . LBB 3 5 : movq $ 0 , - 5 6 (% rbp ) . LBB 3 6 : jmp . L 4 1 . L 5 0 : . LBB 3 7 : nop . LBE 3 7 : . LBB 3 8 : movq - 7 2 (% rbp ), % rax movq % rax , % rdi call go . word . randomPalindrome movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) . LBB 3 9 : movq - 3 0 4 (% rbp ), % rdx movq - 2 9 6 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . word . IsPalindrome xorl $ 1 , % eax testb % al , % al je . L 4 2 . LBB 4 0 : leaq string .. d (% rip ), % rax movq % rax , - 3 3 6 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 3 . LBB 4 1 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 1 : jmp . L 4 4 . L 4 3 : . LBB 4 2 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 4 : . LBE 4 2 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 3 2 8 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movdqa - 3 3 6 (% rbp ), % xmm 1 movups % xmm 1 , - 1 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 5 . LBB 4 3 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 3 : jmp . L 4 6 . L 4 5 : . LBB 4 4 : movq - 1 5 2 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 6 : . LBE 4 4 : movq - 1 5 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq . LC 2 9 (% rip ), % r 1 2 movl $ 2 4 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq - 3 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 4 2 : . LBE 4 0 : . LBE 3 9 : . LBE 3 8 : . LBB 4 5 : addq $ 1 , - 5 6 (% rbp ) . L 4 1 : . LBE 4 5 : cmpq $ 9 9 9 , - 5 6 (% rbp ) jle . L 5 0 . LBE 3 6 : . LBE 3 5 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 3 movl $ 3 1 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 subq $ 2 8 8 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 2 8 8 (% rbp ) movq % rdi , - 2 8 0 (% rbp ) movq % rdx , - 3 0 4 (% rbp ) movq % rcx , - 2 9 6 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) . LBB 2 : movq - 2 8 0 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 9 6 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . LBB 3 : movq - 3 2 (% rbp ), % rax cmpq - 2 4 (% rbp ), % rax jle . L 2 . LBB 4 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 2 8 0 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 9 6 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . L 2 : . LBE 4 : . LBE 3 : . LBB 5 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jle . L 3 . LBB 6 : . LBB 7 : movq - 2 4 (% rbp ), % rax subq - 3 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . LBB 8 : jmp . L 4 . L 2 1 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : leaq . LC 3 (% rip ), % rax movq % rax , - 2 2 4 (% rbp ) movq $ 1 , - 2 1 6 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) leaq - 2 2 4 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : subq $ 1 , - 4 8 (% rbp ) . L 4 : . LBE 1 1 : cmpq $ 0 , - 4 8 (% rbp ) jg . L 2 1 . L 3 : . LBE 8 : . LBE 7 : . LBE 6 : . LBE 5 : movq $ 0 , - 4 0 (% rbp ) leaq . LC 4 (% rip ), % r 1 2 movl $ 0 , % r 1 3 d movq % r 1 2 , - 2 5 6 (% rbp ) movq % r 1 3 , - 2 4 8 (% rbp ) . LBB 1 2 : movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 5 6 (% rbp ) . LBB 1 3 : jmp . L 6 . L 2 2 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : movq - 2 8 0 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 7 cmpq % rax , - 5 6 (% rbp ) jl . L 1 8 . L 7 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : movq - 2 9 6 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 9 cmpq % rax , - 5 6 (% rbp ) jl . L 1 9 . L 9 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : movq - 2 8 8 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % edx movq - 3 0 4 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax addq % rcx , % rax movzbl (% rax ), % eax movzbl % al , % eax addq % rax , % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax movq % rax , - 6 4 (% rbp ) . LBB 1 6 : cmpq $ 9 7 , - 6 4 (% rbp ) jle . L 1 1 . LBB 1 7 : movq - 6 4 (% rbp ), % rax leaq - 5 0 (% rax ), % rdx leaq - 1 8 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . intstring @ PLT movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) leaq - 1 7 6 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq $ 1 , - 4 0 (% rbp ) . LBE 1 7 : jmp . L 1 2 . L 1 1 : . LBB 1 8 : movq - 6 4 (% rbp ), % rax leaq - 4 8 (% rax ), % rdx leaq - 1 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . intstring @ PLT movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq - 1 2 8 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . L 1 2 : . LBE 1 8 : . LBE 1 6 : . LBE 1 5 : . LBB 1 9 : subq $ 1 , - 5 6 (% rbp ) . L 6 : . LBE 1 9 : cmpq $- 1 , - 5 6 (% rbp ) jne . L 2 2 . LBE 1 3 : . LBE 1 2 : . LBB 2 0 : cmpq $ 1 , - 4 0 (% rbp ) jne . L 1 5 . LBB 2 1 : leaq . LC 5 (% rip ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) leaq - 9 6 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) . L 1 5 : . LBE 2 1 : . LBE 2 0 : . LBB 2 2 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx . LBE 2 2 : . LBE 2 : addq $ 2 8 8 , % rsp popq % r 1 2 popq % r 1 3 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 3 1 movl $ 1 3 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 5 : ret . L 1 3 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 6 , % rsp movq % rdi , - 1 2 0 (% rbp ) movq % rsi , - 1 2 8 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 6 9 : movq $ 0 , - 4 0 (% rbp ) . LBB 7 0 : movq $ 0 , - 5 6 (% rbp ) . LBB 7 1 : . LBB 7 2 : . LBB 7 3 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 7 3 : jmp . L 1 0 4 . L 1 3 0 : . LBB 7 4 : nop . LBE 7 4 : . LBB 7 5 : movq % rbx , - 5 6 (% rbp ) . LBB 7 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 0 5 cmpq % rax , - 5 6 (% rbp ) jl . L 1 2 5 . L 1 0 5 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 5 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq $ 1 6 , % rax cmpq $ 0 , - 1 2 0 (% rbp ) jne . L 1 0 7 call runtime . panicmem @ PLT . L 1 0 7 : movq - 1 2 0 (% rbp ), % rdx addq $ 1 6 , % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 1 0 8 . LBB 7 7 : movq % rdx , (% rax ) . LBE 7 7 : jmp . L 1 0 9 . L 1 0 8 : . LBB 7 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 0 9 : . LBE 7 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 1 0 cmpq % rax , - 5 6 (% rbp ) jl . L 1 2 6 . L 1 1 0 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 6 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq - 1 2 0 (% rbp ), % rdx movq 1 6 (% rdx ), % rdx movq % rdx , 2 4 (% rax ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 1 2 cmpq % rax , - 5 6 (% rbp ) jl . L 1 2 7 . L 1 1 2 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 1 4 cmpq % rax , - 5 6 (% rbp ) jl . L 1 2 8 . L 1 1 4 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 8 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq 8 (% rax ), % rax addq % rdx , % rax addq % rax , - 4 0 (% rbp ) . LBE 7 6 : . LBE 7 5 : . LBB 7 9 : addq $ 1 , % rbx . L 1 0 4 : . LBE 7 9 : cmpq % r 1 2 , % rbx jl . L 1 3 0 . LBE 7 2 : . LBE 7 1 : . LBE 7 0 : . LBB 8 0 : movq - 1 2 8 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jle . L 1 1 8 . LBB 8 1 : movq - 1 2 0 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rdx , 2 4 (% rax ) . LBE 8 1 : jmp . L 1 1 9 . L 1 1 8 : . LBB 8 2 : movq - 1 2 0 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rdx , 2 4 (% rax ) . L 1 1 9 : . LBE 8 2 : . LBE 8 0 : . LBB 8 3 : movq - 1 2 0 (% rbp ), % r 1 4 movq - 1 2 0 (% rbp ), % r 1 3 subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) call go . greedy . newPreSchTaskList addq $ 3 2 , % rsp movq % rax , % r 1 2 leaq type ... 6 0 x . 7 . 1 go . greedy . task (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq - 8 8 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 0 , - 7 2 (% rbp ) movq $ 0 , - 6 4 (% rbp ) subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) call go . greedy . newRunningSchTaskList addq $ 3 2 , % rsp movq % rax , % rbx movq % r 1 4 , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 2 0 . LBB 8 4 : movq % r 1 2 , (% rax ) . LBE 8 4 : jmp . L 1 2 1 . L 1 2 0 : . LBB 8 5 : movq % r 1 2 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 2 1 : . LBE 8 5 : leaq 8 (% r 1 3 ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 2 2 . LBB 8 6 : movq % rbx , (% rax ) . LBE 8 6 : jmp . L 1 2 3 . L 1 2 2 : . LBB 8 7 : movq % rbx , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 2 3 : . LBE 8 7 : . LBE 8 3 : . LBB 8 8 : movq - 1 2 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax . LBE 8 8 : . LBE 6 9 : leaq - 3 2 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 8 movl $ 1 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 7 2 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 2 : . LBB 3 : movq - 8 8 (% rbp ), % rax testq % rax , % rax jne . L 2 movq - 9 6 (% rbp ), % rax leaq . LC 0 (% rip ), % rdx cmpq % rdx , % rax jne . L 3 movl $ 1 , % eax jmp . L 5 . L 3 : movl $ 1 , % eax jmp . L 5 . L 2 : movl $ 0 , % eax . L 5 : testb % al , % al je . L 6 . LBB 4 : . LBB 5 : movq $ 0 , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax jmp . L 7 . L 6 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 8 8 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) . LBB 6 : movq $ 1 , - 4 0 (% rbp ) . LBB 7 : jmp . L 8 . L 2 7 : . LBB 8 : nop . LBE 8 : . LBB 9 : movl $ 0 , % eax movq - 8 8 (% rbp ), % rdx cmpq $ 0 , - 4 0 (% rbp ) js . L 9 cmpq % rdx , - 4 0 (% rbp ) jg . L 9 testq % rax , % rax jns . L 1 0 jmp . L 1 1 . L 9 : movq - 4 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAlen @ PLT . L 1 0 : cmpq - 4 0 (% rbp ), % rax jg . L 1 1 movq - 9 6 (% rbp ), % rdx cmpq % rax , - 4 0 (% rbp ) jne . L 1 2 jmp . L 2 4 . L 1 1 : movq - 4 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 1 2 : movq % rax , % rcx jmp . L 1 4 . L 2 4 : movl $ 0 , % ecx . L 1 4 : addq % rcx , % rdx movq % rdx , - 8 0 (% rbp ) movq - 4 0 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 7 2 (% rbp ) . LBB 1 0 : movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq - 9 6 (% rbp ), % rdi movq - 8 8 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call strings . HasSuffix @ PLT testb % al , % al je . L 1 5 . LBB 1 1 : . LBB 1 2 : movq - 5 6 (% rbp ), % rax subq - 4 0 (% rbp ), % rax movq % rax , % rdi movq - 8 8 (% rbp ), % rax testq % rdi , % rdi js . L 1 6 cmpq % rax , % rdi jg . L 1 6 cmpq $ 0 , - 4 0 (% rbp ) jns . L 1 7 jmp . L 1 8 . L 1 6 : movq % rax , % rsi call runtime . goPanicSliceAlen @ PLT . L 1 7 : cmpq % rdi , - 4 0 (% rbp ) jg . L 1 8 movq - 9 6 (% rbp ), % rdx cmpq - 4 0 (% rbp ), % rdi jne . L 1 9 jmp . L 2 5 . L 1 8 : movq - 4 0 (% rbp ), % rax movq % rdi , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 1 9 : movq - 4 0 (% rbp ), % rax jmp . L 2 1 . L 2 5 : movl $ 0 , % eax . L 2 1 : addq % rdx , % rax movq % rax , % r 1 2 movq % rdi , % rax subq - 4 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call go . problem 1 1 4 7 . longestDecomposition addq $ 2 , % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax jmp . L 7 . L 1 5 : . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 1 3 : addq $ 1 , - 4 0 (% rbp ) . L 8 : . LBE 1 3 : movq - 4 0 (% rbp ), % rax addq % rax , % rax cmpq % rax , - 5 6 (% rbp ) jge . L 2 7 . LBE 7 : . LBE 6 : . LBB 1 4 : movq $ 1 , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax . L 7 : . LBE 1 4 : . LBE 2 : addq $ 7 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 9 movl $ 2 8 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 1 : ret . L 6 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 5 6 , % rsp movq % rdi , - 2 4 8 (% rbp ) movq % rdx , % rcx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) . LBB 6 5 : movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 4 0 (% rbp ) movq $ 0 , - 3 2 (% rbp ) subq $ 8 , % rsp pushq - 3 2 (% rbp ) pushq - 4 0 (% rbp ) pushq - 4 8 (% rbp ) call go . set . New addq $ 3 2 , % rsp movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) . LBB 6 6 : movq $ 0 , - 2 2 4 (% rbp ) movq $ 0 , - 2 1 6 (% rbp ) . LBB 6 7 : leaq - 1 7 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call go . set . set . GetItems . LBB 6 8 : . LBB 6 9 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 9 : jmp . L 5 6 . L 6 7 : . LBB 7 0 : nop . LBE 7 0 : . LBB 7 1 : . LBB 7 2 : movq - 1 3 6 (% rbp ), % rax testq % rbx , % rbx js . L 5 7 cmpq % rax , % rbx jge . L 5 7 movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 7 2 : . LBB 7 3 : movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) . LBE 7 3 : . LBB 7 4 : movq - 2 0 8 (% rbp ), % rax movq 8 (% rax ), % r 8 movq - 2 0 0 (% rbp ), % rax movq - 2 2 4 (% rbp ), % rcx movq - 2 1 6 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call *% r 8 . LVL 1 2 : . LBE 7 4 : . LBE 7 1 : . LBB 7 6 : addq $ 1 , % rbx jmp . L 5 6 . L 5 7 : . LBE 7 6 : . LBB 7 7 : . LBB 7 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 5 6 : . LBE 7 5 : . LBE 7 7 : cmpq % r 1 2 , % rbx jl . L 6 7 . LBE 6 8 : . LBE 6 7 : . LBE 6 6 : . LBB 7 8 : movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) . LBB 7 9 : movq - 2 7 2 (% rbp ), % rax movq 3 2 (% rax ), % rcx movq - 2 6 4 (% rbp ), % rdx leaq - 1 1 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call *% rcx . LVL 1 3 : . LBB 8 0 : . LBB 8 1 : movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 8 1 : jmp . L 6 0 . L 6 8 : . LBB 8 2 : nop . LBE 8 2 : . LBB 8 3 : . LBB 8 4 : movq - 7 2 (% rbp ), % rax testq % rbx , % rbx js . L 6 1 cmpq % rax , % rbx jge . L 6 1 movq - 8 0 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 8 4 : . LBB 8 5 : movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) . LBE 8 5 : . LBB 8 6 : movq - 2 0 8 (% rbp ), % rax movq 8 (% rax ), % r 8 movq - 2 0 0 (% rbp ), % rax movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rdx movq % rcx , % rsi movq % rax , % rdi call *% r 8 . LVL 1 4 : . LBE 8 6 : . LBE 8 3 : . LBB 8 8 : addq $ 1 , % rbx jmp . L 6 0 . L 6 1 : . LBE 8 8 : . LBB 8 9 : . LBB 8 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 0 : . LBE 8 7 : . LBE 8 9 : cmpq % r 1 2 , % rbx jl . L 6 8 . LBE 8 0 : . LBE 7 9 : . LBE 7 8 : . LBB 9 0 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx . LBE 9 0 : . LBE 6 5 : leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 8 movl $ 1 5 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 addq $- 1 2 8 , % rsp movq $ 1 1 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 2 : . LBB 3 : jmp . L 2 . L 7 : . LBB 4 : nop . LBE 4 : . LBB 5 : . LBB 6 : movq - 2 4 (% rbp ), % rax andl $ 1 , % eax testq % rax , % rax je . L 3 . LBB 7 : addq $ 1 , - 3 2 (% rbp ) . L 3 : . LBE 7 : . LBE 6 : sarq - 2 4 (% rbp ) . L 2 : . LBE 5 : cmpq $ 0 , - 2 4 (% rbp ) jg . L 7 . LBE 3 : . LBE 2 : leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 2 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq - 3 2 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 2 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 1 1 2 (% rbp ) movq % r 1 3 , - 1 0 4 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) leaq - 1 6 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 9 4 7 movl $ 2 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 7 8 : ret . L 9 4 7 : pushq % rbp movq % rsp , % rbp subq $ 1 6 , % rsp movq % rdi , - 8 (% rbp ) cmpq $ 0 , - 8 (% rbp ) jne . L 9 4 4 call runtime . panicmem @ PLT . L 9 4 4 : movq - 8 (% rbp ), % rax addq $ 8 , % rax movq % rax , % rdi call sync . Mutex . Lock @ PLT movq - 8 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rdi call container .. z 2 flist . List . Init @ PLT movq - 8 (% rbp ), % rax movb $ 1 , 2 4 (% rax ) movq - 8 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , % rdi call sync . Cond . Broadcast @ PLT cmpq $ 0 , - 8 (% rbp ) jne . L 9 4 5 call runtime . panicmem @ PLT . L 9 4 5 : movq - 8 (% rbp ), % rax addq $ 8 , % rax movq % rax , % rdi call sync . Mutex . Unlock @ PLT cmpq $ 0 , - 8 (% rbp ) jne . L 9 4 6 call runtime . panicmem @ PLT . L 9 4 6 : movq - 8 (% rbp ), % rax addq $ 2 8 , % rax movq % rax , % rdi call sync . WaitGroup . Wait @ PLT leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 3 movl $ 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 3 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movq $- 1 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 8 (% rbp ) movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . LBB 6 : . LBB 7 : jmp . L 4 . L 2 2 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq - 1 6 (% rbp ), % rax subq - 8 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , % rdx movq - 8 (% rbp ), % rax addq % rdx , % rax movq % rax , - 3 2 (% rbp ) . LBB 1 0 : . LBB 1 1 : movl $ 1 , % edx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 5 cmpq % rax , - 3 2 (% rbp ) jl . L 1 5 . L 5 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 5 : movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) setg % al cmpb % al , % dl jne . L 2 0 . LBB 1 2 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 8 (% rbp ) . LBE 1 2 : jmp . L 4 . L 2 0 : . LBB 1 3 : nop . LBE 1 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 9 cmpq % rax , - 3 2 (% rbp ) jl . L 1 7 . L 9 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) setl % al cmpb % al , % dl jne . L 2 1 . LBB 1 4 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . LBE 1 4 : jmp . L 4 . L 2 1 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 3 2 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 3 . L 4 : . LBE 1 7 : . LBE 1 6 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jle . L 2 2 . LBE 7 : . LBE 6 : . LBB 1 8 : movq $- 1 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 3 : . LBE 1 8 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 movl $ 4 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax leaq - 1 (% rax ), % rcx movq - 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdx movq % rcx , % rsi movl $ 0 , % edi call go . search_insert_position . searchInsertI addq $ 3 2 , % rsp movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . LBE 3 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 8 movl $ 2 3 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 8 4 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) . LBB 2 : leaq go . leetcode . reverseWords 3 .. func 1 .. f (% rip ), % rax movq % rax , - 6 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) . LBB 3 : movq $ 0 , - 7 2 (% rbp ) movl $ 0 , - 7 6 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 2 7 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 4 jmp . L 2 2 . L 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBB 1 0 : leaq 1 (% rbx ), % rdi movq % rdi , - 2 1 6 (% rbp ) . LBE 1 0 : jmp . L 6 . L 2 2 : . LBB 1 1 : movq - 2 0 8 (% rbp ), % rcx movq - 2 0 0 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rsi movq % rdx , % rdi movl % esi , % eax movq % rdi , - 2 1 6 (% rbp ) . L 6 : . LBE 1 1 : . LBE 9 : . LBB 1 2 : movq % rbx , - 7 2 (% rbp ) movl % eax , - 7 6 (% rbp ) . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : cmpl $ 3 2 , - 7 6 (% rbp ) jne . L 2 6 . LBE 1 4 : movq - 2 0 0 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 9 cmpq % rax , - 7 2 (% rbp ) jg . L 9 cmpq $ 0 , - 5 6 (% rbp ) jns . L 1 0 jmp . L 1 1 . L 9 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAlen @ PLT . L 1 0 : movq - 5 6 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jle . L 2 3 . L 1 1 : movq - 7 2 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 2 3 : movq - 6 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , % r 8 movq - 2 0 8 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax je . L 1 3 movq - 5 6 (% rbp ), % rax jmp . L 1 4 . L 1 3 : movl $ 0 , % eax . L 1 4 : addq % rdx , % rax movq % rax , % r 1 4 movq - 7 2 (% rbp ), % rax subq - 5 6 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax movq - 6 4 (% rbp ), % r 1 0 movq % rcx , % rdi movq % rax , % rsi call *% r 8 . LVL 1 : movq - 1 9 2 (% rbp ), % rcx movq - 1 8 4 (% rbp ), % rbx movq % rcx , - 1 6 0 (% rbp ) movq % rbx , - 1 5 2 (% rbp ) movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) leaq . LC 2 (% rip ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) leaq - 1 6 0 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 7 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 5 6 (% rbp ) jmp . L 8 . L 2 6 : . LBB 1 6 : . LBB 1 5 : nop . L 8 : . LBE 1 5 : . LBE 1 6 : . LBE 1 3 : . LBE 8 : . LBB 1 7 : movq - 2 1 6 (% rbp ), % rbx . L 2 : . LBE 1 7 : cmpq - 2 2 4 (% rbp ), % rbx jl . L 2 7 . LBE 5 : . LBE 4 : . LBE 3 : movq - 2 0 0 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 7 cmpq % rax , - 5 6 (% rbp ) jle . L 2 5 . L 1 7 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 2 5 : movq - 6 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , % r 8 movq - 2 0 8 (% rbp ), % rdx movq - 2 0 0 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) je . L 1 9 movq - 5 6 (% rbp ), % rax jmp . L 2 0 . L 1 9 : movl $ 0 , % eax . L 2 0 : addq % rdx , % rax movq % rax , % r 1 2 movq - 2 0 0 (% rbp ), % rax subq - 5 6 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq - 6 4 (% rbp ), % r 1 0 movq % rcx , % rdi movq % rax , % rsi call *% r 8 . LVL 2 : movq - 1 9 2 (% rbp ), % rcx movq - 1 8 4 (% rbp ), % rbx movq % rcx , - 1 1 2 (% rbp ) movq % rbx , - 1 0 4 (% rbp ) movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movl $ 2 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) . LBB 1 8 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx . LBE 1 8 : . LBE 2 : addq $ 1 8 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 4 : cmpq % fs : 1 1 2 , % rsp jnb . L 7 0 movl $ 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 6 : ret . L 7 0 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 5 0 : movq $ 0 , - 8 (% rbp ) . LBB 5 1 : movq $ 0 , - 1 6 (% rbp ) . LBB 5 2 : jmp . L 5 2 . L 6 9 : . LBB 5 3 : nop . LBE 5 3 : . LBB 5 4 : . LBB 5 5 : movq - 1 6 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 2 4 (% rbp ) . LBB 5 6 : jmp . L 5 3 . L 6 8 : . LBB 5 7 : nop . LBE 5 7 : . LBB 5 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 5 4 cmpq % rax , - 2 4 (% rbp ) jl . L 6 4 . L 5 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 5 6 cmpq % rax , - 1 6 (% rbp ) jl . L 6 5 . L 5 6 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 6 5 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq 1 6 (% rbp ), % rcx movq - 1 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx subq % rdx , % rax movq % rax , - 4 0 (% rbp ) . LBB 5 9 : movq - 4 0 (% rbp ), % rax cmpq - 8 (% rbp ), % rax jle . L 5 8 . LBB 6 0 : movq - 4 0 (% rbp ), % rax movq % rax , - 8 (% rbp ) . L 5 8 : . LBE 6 0 : . LBE 5 9 : . LBE 5 8 : . LBB 6 1 : addq $ 1 , - 2 4 (% rbp ) . L 5 3 : . LBE 6 1 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 6 8 . LBE 5 6 : . LBE 5 5 : . LBE 5 4 : . LBB 6 2 : addq $ 1 , - 1 6 (% rbp ) . L 5 2 : . LBE 6 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) jl . L 6 9 . LBE 5 2 : . LBE 5 1 : . LBB 6 3 : movq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . LBE 6 3 : . LBE 5 0 : leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 3 7 6 movl $ 2 3 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 6 6 : ret . L 3 7 6 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 1 6 , % rsp movq % rdi , - 2 1 6 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) . LBB 3 4 7 : leaq - 6 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call go . memcache . conn . readLine movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) . LBB 3 4 8 : movq - 2 0 8 (% rbp ), % rax testq % rax , % rax je . L 3 6 5 . LBB 3 4 9 : . LBB 3 5 0 : movq - 2 0 8 (% rbp ), % rcx movq - 2 0 0 (% rbp ), % rdx movq - 2 1 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . memcache . conn . fatal movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx jmp . L 3 7 1 . L 3 6 5 : . LBE 3 5 0 : . LBE 3 4 9 : . LBE 3 4 8 : . LBB 3 5 1 : . LBB 3 5 2 : movl $ 1 , % ebx pushq 1 6 + go . memcache . replyTouched (% rip ) pushq 8 + go . memcache . replyTouched (% rip ) pushq go . memcache . replyTouched (% rip ) pushq - 1 7 6 (% rbp ) pushq - 1 8 4 (% rbp ) pushq - 1 9 2 (% rbp ) call bytes . Equal @ PLT addq $ 4 8 , % rsp cmpb % al , % bl jne . L 3 7 4 . LBB 3 5 3 : . LBB 3 5 4 : movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx jmp . L 3 7 1 . L 3 7 4 : . LBE 3 5 4 : . LBE 3 5 3 : . LBB 3 5 5 : nop . LBE 3 5 5 : pushq 1 6 + go . memcache . replyNotFound (% rip ) pushq 8 + go . memcache . replyNotFound (% rip ) pushq go . memcache . replyNotFound (% rip ) pushq - 1 7 6 (% rbp ) pushq - 1 8 4 (% rbp ) pushq - 1 9 2 (% rbp ) call bytes . Equal @ PLT addq $ 4 8 , % rsp cmpb % al , % bl jne . L 3 7 5 . LBB 3 5 6 : . LBB 3 5 7 : movq go . memcache . ErrNotFound (% rip ), % rax movq 8 + go . memcache . ErrNotFound (% rip ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx jmp . L 3 7 1 . L 3 7 5 : . LBE 3 5 7 : . LBE 3 5 6 : . LBB 3 5 8 : nop . LBE 3 5 8 : . LBE 3 5 2 : . LBE 3 5 1 : . LBB 3 5 9 : leaq imt .. interface . 4 Error . 0 func . 8 . 9 . 8 string . 9 . 5 .. go . memcache . protocolError (% rip ), % rax movq % rax , - 1 6 0 (% rbp ) leaq go .. C 5 0 8 (% rip ), % rax movq % rax , - 1 5 2 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx . L 3 7 1 : . LBE 3 5 9 : . LBE 3 4 7 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 0 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 0 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , - 3 2 (% rbp ) jle . L 4 . LBB 7 : . LBB 8 : movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq - 4 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rcx movq % rcx , % rsi movq % rax , % rdi call go . problem 6 6 9 . trimBST movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 3 . L 4 : . LBE 8 : . LBE 7 : . LBE 6 : . LBB 9 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , - 4 0 (% rbp ) jge . L 5 . LBB 1 0 : . LBB 1 1 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq - 4 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rcx movq % rcx , % rsi movq % rax , % rdi call go . problem 6 6 9 . trimBST movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 3 . L 5 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq - 4 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rcx movq % rcx , % rsi movq % rax , % rdi call go . problem 6 6 9 . trimBST movq % rax , % rdx movq - 2 4 (% rbp ), % rax addq $ 8 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 6 . LBB 1 2 : movq % rdx , (% rax ) . LBE 1 2 : jmp . L 7 . L 6 : . LBB 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 7 : . LBE 1 3 : movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq - 4 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rcx movq % rcx , % rsi movq % rax , % rdi call go . problem 6 6 9 . trimBST movq % rax , % rdx movq - 2 4 (% rbp ), % rax addq $ 1 6 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 8 . LBB 1 4 : movq % rdx , (% rax ) . LBE 1 4 : jmp . L 9 . L 8 : . LBB 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 9 : . LBE 1 5 : . LBB 1 6 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 3 : . LBE 1 6 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 4 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) movb $ 0 , - 1 (% rbp ) . LBB 2 : . LBB 3 : . LBB 4 : jmp . L 2 . L 1 3 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rdx movq - 3 2 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx je . L 3 . LBB 8 : . LBB 9 : movb $ 0 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 4 . L 3 : . LBE 9 : . LBE 8 : . LBE 7 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 2 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 3 2 (% rbp ) . L 2 : . LBE 6 : . LBB 1 0 : cmpq $ 0 , - 2 4 (% rbp ) setne % al testb % al , % al je . L 5 . LBB 1 1 : cmpq $ 0 , - 3 2 (% rbp ) setne % al . L 5 : . LBE 1 1 : . LBE 1 0 : testb % al , % al jne . L 1 3 . LBE 4 : . LBE 3 : . LBB 1 2 : . LBB 1 3 : cmpq $ 0 , - 2 4 (% rbp ) sete % al testb % al , % al je . L 8 . LBB 1 4 : cmpq $ 0 , - 3 2 (% rbp ) setne % al . L 8 : . LBE 1 4 : . LBE 1 3 : testb % al , % al je . L 9 . LBB 1 5 : . LBB 1 6 : movb $ 0 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 4 . L 9 : . LBE 1 6 : . LBE 1 5 : . LBE 1 2 : . LBB 1 7 : . LBB 1 8 : cmpq $ 0 , - 2 4 (% rbp ) setne % al testb % al , % al je . L 1 0 . LBB 1 9 : cmpq $ 0 , - 3 2 (% rbp ) sete % al . L 1 0 : . LBE 1 9 : . LBE 1 8 : testb % al , % al je . L 1 1 . LBB 2 0 : . LBB 2 1 : movb $ 0 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax jmp . L 4 . L 1 1 : . LBE 2 1 : . LBE 2 0 : . LBE 1 7 : . LBB 2 2 : movb $ 1 , - 1 (% rbp ) movzbl - 1 (% rbp ), % eax . L 4 : . LBE 2 2 : . LBE 2 : popq % rbp ret
. LFB 0 : leaq - 3 1 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 0 movl $ 3 1 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 8 0 , % rsp movq % rdi , - 2 9 6 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 2 : movq - 2 9 6 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 8 8 (% rbp ) movq % rbx , - 2 8 0 (% rbp ) movq % rbx , - 2 7 2 (% rbp ) . LBB 3 : movq $ 0 , - 7 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 6 : jmp . L 2 . L 4 7 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq % r 1 2 , - 7 2 (% rbp ) . LBB 9 : movq 2 4 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 2 8 0 (% rbp ), % rax cmpq $ 0 , - 7 2 (% rbp ) js . L 3 cmpq % rax , - 7 2 (% rbp ) jl . L 3 4 . L 3 : movq - 7 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq - 2 8 8 (% rbp ), % rsi movq - 7 2 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 2 2 4 (% rbp ) movq % rbx , - 2 1 6 (% rbp ) movq % rbx , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 2 0 8 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 . LBB 1 0 : movq - 2 2 4 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 6 . L 5 : . LBE 1 0 : . LBB 1 1 : movq - 2 2 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 : . LBE 1 1 : . LBE 9 : . LBE 8 : . LBB 1 2 : addq $ 1 , % r 1 2 . L 2 : . LBE 1 2 : cmpq % r 1 3 , % r 1 2 jl . L 4 7 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 3 : movq $ 1 , - 4 0 (% rbp ) . LBB 1 4 : jmp . L 9 . L 4 9 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : movabsq $- 9 2 2 3 3 7 2 0 3 6 8 5 4 7 7 5 8 0 8 , % rax movq % rax , - 4 8 (% rbp ) . LBB 1 7 : movq $ 1 , - 5 6 (% rbp ) . LBB 1 8 : jmp . L 1 0 . L 4 8 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq - 2 8 0 (% rbp ), % rdx testq % rax , % rax js . L 1 1 cmpq % rdx , % rax jl . L 3 6 . L 1 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq - 2 8 8 (% rbp ), % rdx movq % rax , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 5 6 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 1 8 4 (% rbp ), % rax testq % rdx , % rdx js . L 1 3 cmpq % rax , % rdx jl . L 3 7 . L 1 3 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 5 6 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rcx testq % rax , % rax js . L 1 5 cmpq % rcx , % rax jl . L 3 8 . L 1 5 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 1 9 2 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax subq % rax , % rdx movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . day 4 0 8 . max movq % rax , - 4 8 (% rbp ) movq - 2 8 0 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 7 cmpq % rax , - 4 0 (% rbp ) jl . L 3 9 . L 1 7 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 2 8 8 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 5 6 (% rbp ), % rax subq $ 1 , % rax movq - 1 5 2 (% rbp ), % rdx testq % rax , % rax js . L 1 9 cmpq % rdx , % rax jl . L 4 0 . L 1 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 2 1 cmpq % rdx , - 5 6 (% rbp ) jl . L 4 1 . L 2 1 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 4 8 (% rbp ), % rdx addq % rcx , % rdx movq - 1 6 0 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax movq % rdx , % rsi movq % rax , % rdi call go . day 4 0 8 . max movq % rax , % rsi movq - 2 8 0 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 3 cmpq % rax , - 4 0 (% rbp ) jl . L 4 2 . L 2 3 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq - 2 8 8 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 2 5 cmpq % rax , - 5 6 (% rbp ) jge . L 2 5 movq - 1 2 8 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . LBE 2 0 : . LBB 2 1 : addq $ 1 , - 5 6 (% rbp ) jmp . L 1 0 . L 2 5 : . LBE 2 1 : . LBB 2 2 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : . LBE 2 2 : movq 2 4 (% rbp ), % rax cmpq % rax , - 5 6 (% rbp ) jl . L 4 8 . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 2 3 : addq $ 1 , - 4 0 (% rbp ) . L 9 : . LBE 2 3 : movq - 4 0 (% rbp ), % rax cmpq - 2 9 6 (% rbp ), % rax jle . L 4 9 . LBE 1 4 : . LBE 1 3 : . LBB 2 4 : movq 2 4 (% rbp ), % rsi movq - 2 8 0 (% rbp ), % rax cmpq $ 0 , - 2 9 6 (% rbp ) js . L 3 0 cmpq % rax , - 2 9 6 (% rbp ) jl . L 4 5 . L 3 0 : movq - 2 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : movq - 2 8 8 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 8 0 (% rbp ) leaq - 1 (% rsi ), % rax movq - 8 8 (% rbp ), % rdx testq % rax , % rax js . L 3 2 cmpq % rdx , % rax jge . L 3 2 movq - 9 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax jmp . L 4 6 . L 3 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : . LBE 2 4 : . LBE 2 : addq $ 2 8 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 4 : cmpq % fs : 1 1 2 , % rsp jnb . L 7 8 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 : ret . L 7 8 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq $ 0 , - 1 6 (% rbp ) . LBB 7 0 : . LBB 7 1 : . LBB 7 2 : cmpq $ 0 , - 2 4 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 6 8 . LBB 7 3 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax sete % al . L 6 8 : . LBE 7 3 : . LBE 7 2 : testb % al , % al je . L 6 9 . LBB 7 4 : . LBB 7 5 : movq - 2 4 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax jmp . L 7 0 . L 6 9 : . LBE 7 5 : . LBE 7 4 : . LBE 7 1 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) . LBB 7 6 : . LBB 7 7 : jmp . L 7 1 . L 7 7 : . LBB 7 8 : nop . LBE 7 8 : . LBB 7 9 : . LBB 8 0 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax movq (% rax ), % rdx movq - 8 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx jne . L 7 2 . LBB 8 1 : movq - 8 (% rbp ), % rax addq $ 8 , % rax movq - 8 (% rbp ), % rdx movq 8 (% rdx ), % rdx movq 8 (% rdx ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 7 3 . LBB 8 2 : movq % rdx , (% rax ) . LBE 8 2 : jmp . L 7 1 . L 7 3 : . LBB 8 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 7 1 . L 7 2 : . LBE 8 3 : . LBE 8 1 : . LBB 8 4 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) . L 7 1 : . LBE 8 4 : . LBE 8 0 : . LBE 7 9 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax jne . L 7 7 . LBE 7 7 : . LBE 7 6 : . LBB 8 5 : movq - 2 4 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq - 1 6 (% rbp ), % rax . L 7 0 : . LBE 8 5 : . LBE 7 0 : leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 8 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 8 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : movq - 4 0 (% rbp ), % rax movzbl 1 6 (% rax ), % eax testb % al , % al je . L 6 . LBB 4 : . LBB 5 : leaq - 3 2 (% rbp ), % rax movq % rax , % rdi call time . Now @ PLT leaq - 3 2 (% rbp ), % rax movq % rax , % rdi call time . Time . UnixNano @ PLT movq - 4 0 (% rbp ), % rdx movq (% rdx ), % rdx subq % rdx , % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 7 . L 6 : . LBE 5 : . LBE 4 : . LBB 6 : . LBB 7 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq (% rax ), % rcx movq % rdx , % rax subq % rcx , % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 7 : . LBE 7 : . LBE 6 : . LBE 3 : . LBE 2 : leave ret
. LFB 1 : leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 8 movl $ 2 6 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 4 0 , % rsp movq $ 0 , - 2 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) pxor % xmm 1 , % xmm 1 cvtsi 2 sdq - 3 2 (% rbp ), % xmm 1 movsd . LC 2 2 (% rip ), % xmm 0 mulsd % xmm 1 , % xmm 0 cvttsd 2 siq % xmm 0 , % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 4 8 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 2 6 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq go . day 3 2 3 . r (% rip ), % rax movq - 3 2 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call math .. z 2 frand . Rand . Intn @ PLT movq % rax , - 2 3 2 (% rbp ) leaq - 2 3 2 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT . L 2 : . LBE 7 : . LBE 6 : cmpq $ 0 , - 4 8 (% rbp ) je . L 3 movq - 4 8 (% rbp ), % rax movq (% rax ), % rax jmp . L 4 . L 3 : movl $ 0 , % eax . L 4 : cmpq - 4 0 (% rbp ), % rax jl . L 2 6 . LBE 4 : . LBE 3 : cmpq $ 0 , - 4 8 (% rbp ) je . L 7 movq - 4 8 (% rbp ), % rax movq (% rax ), % rbx jmp . L 8 . L 7 : movl $ 0 , % ebx . L 8 : movq % rbx , % rdx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq % rbx , - 2 4 0 (% rbp ) . LBB 8 : movq $ 0 , - 5 6 (% rbp ) . LBB 9 : . LBB 1 0 : . LBB 1 1 : leaq - 2 2 4 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 1 1 : jmp . L 9 . L 2 7 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq - 2 2 4 (% rbp ), % rax movq (% rax ), % rax . LBE 1 4 : movq % rax , - 5 6 (% rbp ) . LBB 1 5 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rbx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 0 cmpq % rax , - 5 6 (% rbp ) jl . L 2 2 . L 1 0 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 2 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 2 . LBB 1 6 : movq - 1 2 8 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) . LBE 1 6 : jmp . L 1 3 . L 1 2 : . LBB 1 7 : movq - 1 2 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rdx movq % rcx , - 2 5 6 (% rbp ) movq % rax , - 2 4 8 (% rbp ) movq % rdx , - 2 4 0 (% rbp ) . L 1 3 : . LBE 1 7 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) . LBE 1 5 : . LBE 1 3 : . LBB 1 8 : leaq - 2 2 4 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 9 : . LBE 1 8 : movq - 2 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 7 . LBE 1 0 : . LBE 9 : . LBE 8 : subq $ 8 , % rsp pushq - 2 4 0 (% rbp ) pushq - 2 4 8 (% rbp ) pushq - 2 5 6 (% rbp ) call sort . Ints @ PLT addq $ 3 2 , % rsp movq - 2 4 8 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , - 6 4 (% rbp ) . LBB 1 9 : movq - 2 4 8 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 6 cmpq % rax , - 6 4 (% rbp ) jl . L 2 4 . L 1 6 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : movq - 6 4 (% rbp ), % rax addq $ 1 , % rax movq - 2 4 8 (% rbp ), % rdx testq % rax , % rax js . L 1 8 cmpq % rdx , % rax jl . L 2 5 . L 1 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq - 2 5 6 (% rbp ), % rcx movq - 6 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq - 2 5 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax addq % rdx , % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . LBE 1 9 : . LBE 2 : leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 4 8 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 9 movl $ 4 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 4 0 , % rsp movq $ 1 0 0 , - 5 6 (% rbp ) pxor % xmm 0 , % xmm 0 cvtsi 2 sdq - 5 6 (% rbp ), % xmm 0 movsd % xmm 0 , - 6 4 (% rbp ) leaq float 6 4 .. d (% rip ), % r 1 4 leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 9 2 (% rbp ) movq - 3 9 2 (% rbp ), % rax movsd - 6 4 (% rbp ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 3 9 2 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call reflect . TypeOf @ PLT movq % rax , % rcx testq % rcx , % rcx jne . L 2 movl $ 0 , % ecx jmp . L 3 . L 2 : movq % rax , % rcx movq (% rcx ), % rcx . L 3 : movq % rcx , - 4 8 0 (% rbp ) movq % rdx , % rax movq % rax , - 4 7 2 (% rbp ) movdqa - 4 8 0 (% rbp ), % xmm 1 movups % xmm 1 , - 3 8 4 (% rbp ) leaq - 3 8 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq $ 1 , - 2 4 8 (% rbp ) movq $ 1 , - 2 4 0 (% rbp ) leaq - 2 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 2 4 0 (% rbp ) pushq - 2 4 8 (% rbp ) pushq - 2 5 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) leaq float 6 4 .. d (% rip ), % rax movq % rax , - 4 3 2 (% rbp ) leaq go .. C 6 (% rip ), % rax movq % rax , - 4 2 4 (% rbp ) movq - 4 3 2 (% rbp ), % rax leaq float 6 4 .. d (% rip ), % rdx cmpq % rdx , % rax je . L 4 movq - 4 3 2 (% rbp ), % rax leaq type .. interface . 4 . 5 (% rip ), % rdx movq % rax , % rsi leaq float 6 4 .. d (% rip ), % rdi call runtime . panicdottype @ PLT . L 4 : movq - 4 2 4 (% rbp ), % rax movsd (% rax ), % xmm 0 movsd % xmm 0 , - 7 2 (% rbp ) leaq float 6 4 .. d (% rip ), % r 1 2 leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movq - 3 4 4 (% rbp ), % rax movsd - 7 2 (% rbp ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 3 4 4 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call reflect . TypeOf @ PLT movq % rax , % rcx testq % rcx , % rcx jne . L 5 movl $ 0 , % ecx jmp . L 6 . L 5 : movq % rax , % rcx movq (% rcx ), % rcx . L 6 : movq % rcx , - 4 6 4 (% rbp ) movq % rdx , % rax movq % rax , - 4 5 6 (% rbp ) movdqa - 4 6 4 (% rbp ), % xmm 2 movups % xmm 2 , - 3 3 6 (% rbp ) leaq - 3 3 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq $ 1 , - 1 8 4 (% rbp ) movq $ 1 , - 1 7 6 (% rbp ) leaq - 1 6 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 7 6 (% rbp ) pushq - 1 8 4 (% rbp ) pushq - 1 9 2 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq - 5 6 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq string .. d (% rip ), % rax movq % rax , - 4 4 8 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 9 6 (% rbp ) movq % r 1 2 , - 2 8 8 (% rbp ) movq % r 1 3 , - 2 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 . LBB 2 : movq - 2 9 6 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 2 : jmp . L 8 . L 7 : . LBB 3 : movq - 2 9 6 (% rbp ), % rax leaq - 2 8 8 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 3 : movq - 2 9 6 (% rbp ), % rax movq % rax , - 4 4 0 (% rbp ) movdqa - 4 4 8 (% rbp ), % xmm 3 movups % xmm 3 , - 2 7 2 (% rbp ) leaq - 2 7 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) leaq - 9 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 4 movl $ 2 1 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 8 4 , % rsp movq $ 0 , - 6 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) . LBB 3 : cmpq $ 0 , - 7 2 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : leaq imt .. interface . 4 Len . 0 func . 8 . 9 . 8 int . 9 . 2 Less . 0 func . 8 int . 3 int . 9 . 8 bool . 9 . 2 Swap . 0 func . 8 int . 3 int . 9 . 8 . 9 . 5 .. go . problem 0 4 5 2 . balloons (% rip ), % r 1 2 leaq go . problem 0 4 5 2 .. go . problem 0 4 5 2 . balloons .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 6 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 : jmp . L 5 . L 4 : . LBB 7 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq go . problem 0 4 5 2 .. go . problem 0 4 5 2 . balloons .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 7 : movq - 2 0 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call sort . Sort @ PLT movq $ 0 , - 4 0 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 6 : movq 1 6 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax cmpq $ 1 , % rax jg . L 7 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 7 : movq - 1 6 0 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 8 (% rbp ) . LBB 8 : movq $ 1 , - 5 6 (% rbp ) . LBB 9 : jmp . L 8 . L 2 3 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 9 cmpq % rax , - 5 6 (% rbp ) jl . L 1 9 . L 9 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : movq 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rax testq % rax , % rax jg . L 1 1 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 1 : movq - 1 2 8 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , - 4 8 (% rbp ) jge . L 2 2 . LBE 1 2 : addq $ 1 , - 4 0 (% rbp ) movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 4 cmpq % rax , - 5 6 (% rbp ) jl . L 2 0 . L 1 4 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : movq 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 6 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 6 : movq - 9 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 4 8 (% rbp ) jmp . L 1 3 . L 2 2 : . LBB 1 4 : . LBB 1 3 : nop . L 1 3 : . LBE 1 3 : . LBE 1 4 : . LBE 1 1 : . LBB 1 5 : addq $ 1 , - 5 6 (% rbp ) . L 8 : . LBE 1 5 : movq - 5 6 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jl . L 2 3 . LBE 9 : . LBE 8 : addq $ 1 , - 4 0 (% rbp ) . LBB 1 6 : movq - 4 0 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax . L 3 : . LBE 1 6 : . LBE 2 : addq $ 1 8 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 5 movl $ 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) . LBB 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 2 3 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 cmpq % rax , - 2 4 (% rbp ) jl . L 1 8 . L 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq % rax , - 8 (% rbp ) . LBE 6 : . LBB 7 : addq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 7 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 2 3 . LBE 4 : . LBE 3 : . LBB 8 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 7 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 7 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , - 8 (% rbp ) jne . L 8 . LBB 9 : . LBB 1 0 : movq $ 0 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 9 . L 8 : . LBE 1 0 : . LBE 9 : . LBE 8 : movq $ 0 , - 1 6 (% rbp ) . LBB 1 1 : movq $ 1 , - 3 2 (% rbp ) . LBB 1 2 : jmp . L 1 0 . L 2 4 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 1 1 cmpq % rdx , % rax jl . L 2 0 . L 1 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq % rax , - 1 6 (% rbp ) . LBB 1 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 3 cmpq % rax , - 3 2 (% rbp ) jl . L 2 1 . L 1 3 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 8 (% rbp ), % rax subq % rdx , % rax subq - 1 6 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) jne . L 1 5 . LBB 1 6 : . LBB 1 7 : movq - 3 2 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 9 . L 1 5 : . LBE 1 7 : . LBE 1 6 : . LBE 1 5 : . LBE 1 4 : . LBB 1 8 : addq $ 1 , - 3 2 (% rbp ) . L 1 0 : . LBE 1 8 : movq 2 4 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) jl . L 2 4 . LBE 1 2 : . LBE 1 1 : . LBB 1 9 : movq $- 1 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 9 : . LBE 1 9 : . LBE 2 : leave ret
. LFB 1 7 : leaq - 1 0 0 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 4 9 movl $ 1 0 0 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 8 : ret . L 2 4 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 5 2 , % rsp movq % rdi , - 8 2 4 (% rbp ) movq - 8 2 4 (% rbp ), % rax movq % rax , % rdi call testing . T . Parallel @ PLT . LBB 1 4 7 : movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 7 6 8 (% rbp ) movq $ 0 , - 7 6 0 (% rbp ) movq $ 0 , - 7 5 2 (% rbp ) . LBB 1 4 8 : . LBB 1 4 9 : . LBB 1 5 0 : movq go . spacesaving . listOfTestVectors (% rip ), % rax movq 8 + go . spacesaving . listOfTestVectors (% rip ), % rdx movq % rax , - 6 7 2 (% rbp ) movq % rdx , - 6 6 4 (% rbp ) movq 1 6 + go . spacesaving . listOfTestVectors (% rip ), % rax movq % rax , - 6 5 6 (% rbp ) movq - 6 6 4 (% rbp ), % rax movq % rax , - 8 3 2 (% rbp ) movl $ 0 , % r 1 3 d . LBE 1 5 0 : jmp . L 2 2 2 . L 2 4 8 : . LBB 1 5 1 : nop . LBE 1 5 1 : . LBB 1 5 2 : . LBB 1 5 3 : movq - 6 6 4 (% rbp ), % rax testq % r 1 3 , % r 1 3 js . L 2 2 3 cmpq % rax , % r 1 3 jge . L 2 2 3 movq - 6 7 2 (% rbp ), % rcx movq % r 1 3 , % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 7 0 4 (% rbp ) movq % rdx , - 6 9 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 6 8 8 (% rbp ) . LBE 1 5 3 : . LBB 1 5 4 : movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 6 4 0 (% rbp ) movq % rdx , - 6 3 2 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq % rax , - 6 2 4 (% rbp ) movq % r 1 3 , - 5 6 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 7 6 8 (% rbp ) movq % rdx , - 7 6 0 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq % rax , - 7 5 2 (% rbp ) . LBE 1 5 4 : . LBB 1 5 5 : leaq - 7 3 6 (% rbp ), % rax movq % rax , % rdi call time . Now @ PLT leaq go . spacesaving . Rate .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 1 6 (% rbp ) movq $ 0 , - 6 0 8 (% rbp ) movq $ 0 , - 6 0 0 (% rbp ) movq $ 0 , - 5 9 2 (% rbp ) movq $ 0 , - 5 8 4 (% rbp ) movq $ 0 , - 5 7 6 (% rbp ) movq $ 0 , - 5 6 8 (% rbp ) movq $ 0 , - 5 6 0 (% rbp ) movq $ 0 , - 5 5 2 (% rbp ) movq $ 0 , - 5 4 4 (% rbp ) movq $ 0 , - 5 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 2 2 4 jmp . L 2 4 4 . L 2 2 3 : . LBE 1 5 5 : . LBB 1 8 9 : movq % rax , % rsi movq % r 1 3 , % rdi call runtime . goPanicIndex @ PLT . L 2 2 4 : . LBE 1 8 9 : . LBB 1 9 0 : . LBB 1 5 6 : movq - 6 1 6 (% rbp ), % rcx movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , 6 4 (% rcx ) movq % rdx , 7 2 (% rcx ) . LBE 1 5 6 : jmp . L 2 2 6 . L 2 4 4 : . LBB 1 5 7 : movq - 6 1 6 (% rbp ), % rcx leaq - 6 0 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq go . spacesaving . Rate .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 2 6 : . LBE 1 5 7 : movq - 6 1 6 (% rbp ), % rax movl $ 1 0 0 0 0 0 0 0 0 0 , % edx movl $ 2 , % esi movq % rax , % rdi call go . spacesaving . Rate . Init movq % rax , - 6 4 (% rbp ) . LBB 1 5 8 : movq $ 0 , - 7 2 (% rbp ) movq $ 0 , - 8 1 6 (% rbp ) movq $ 0 , - 8 0 8 (% rbp ) movq $ 0 , - 8 0 0 (% rbp ) movq $ 0 , - 7 9 2 (% rbp ) movq $ 0 , - 7 8 4 (% rbp ) movq $ 0 , - 7 7 6 (% rbp ) . LBB 1 5 9 : . LBB 1 6 0 : . LBB 1 6 1 : movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq % rax , - 4 6 4 (% rbp ) movq - 4 7 2 (% rbp ), % rax movq % rax , - 9 8 4 (% rbp ) movl $ 0 , % r 1 2 d . LBE 1 6 1 : jmp . L 2 2 7 . L 2 4 7 : . LBB 1 6 2 : nop . LBE 1 6 2 : . LBB 1 6 3 : . LBB 1 6 4 : movq - 4 7 2 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 2 2 8 cmpq % rax , % r 1 2 jge . L 2 2 8 movq - 4 8 0 (% rbp ), % rcx movq % r 1 2 , % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 4 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) . LBE 1 6 4 : . LBB 1 6 5 : movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 8 1 6 (% rbp ) movq % rdx , - 8 0 8 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 8 0 0 (% rbp ) movq % rdx , - 7 9 2 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 7 8 4 (% rbp ) movq % rdx , - 7 7 6 (% rbp ) . LBE 1 6 5 : . LBB 1 6 6 : movl $ 1 0 0 0 0 0 0 0 0 0 , % eax movq % rax , - 1 5 2 (% rbp ) leaq - 1 5 2 (% rbp ), % rax movq % rax , % rdi call time . Duration . Nanoseconds @ PLT movsd - 7 9 2 (% rbp ), % xmm 1 pxor % xmm 0 , % xmm 0 cvtsi 2 sdq % rax , % xmm 0 mulsd % xmm 1 , % xmm 0 cvttsd 2 siq % xmm 0 , % rdx leaq - 4 0 0 (% rbp ), % rcx leaq - 7 3 6 (% rbp ), % rax movq % rax , % rsi movq % rcx , % rdi call time . Time . Add @ PLT movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 7 3 6 (% rbp ) movq % rdx , - 7 2 8 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 7 2 0 (% rbp ) . LBB 1 6 7 : movzbl - 8 1 6 (% rbp ), % eax testb % al , % al jne . L 2 2 9 jmp . L 2 3 0 . L 2 2 8 : . LBE 1 6 7 : . LBE 1 6 6 : . LBB 1 8 6 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 2 2 9 : . LBE 1 8 6 : . LBB 1 8 7 : . LBB 1 6 9 : . LBB 1 6 8 : movq - 8 0 8 (% rbp ), % rcx movq - 8 0 0 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 7 2 0 (% rbp ) pushq - 7 2 8 (% rbp ) pushq - 7 3 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call go . spacesaving . Rate . Touch addq $ 3 2 , % rsp . L 2 3 0 : . LBE 1 6 8 : . LBE 1 6 9 : . LBB 1 7 0 : . LBB 1 7 1 : movsd - 7 8 4 (% rbp ), % xmm 0 movsd . LC 1 8 6 (% rip ), % xmm 1 ucomisd % xmm 1 , % xmm 0 setp % al movl $ 1 , % edx movsd . LC 1 8 6 (% rip ), % xmm 1 ucomisd % xmm 1 , % xmm 0 cmove % eax , % edx movl % edx , % eax xorl $ 1 , % eax testb % al , % al je . L 2 3 1 . LBB 1 7 2 : movsd - 7 7 6 (% rbp ), % xmm 0 movsd . LC 1 8 6 (% rip ), % xmm 1 ucomisd % xmm 1 , % xmm 0 setp % al movl $ 1 , % edx movsd . LC 1 8 6 (% rip ), % xmm 1 ucomisd % xmm 1 , % xmm 0 cmove % eax , % edx . L 2 3 1 : . LBE 1 7 2 : . LBE 1 7 1 : testb % dl , % dl je . L 2 3 2 . LBB 1 7 3 : movq - 8 0 8 (% rbp ), % rcx movq - 8 0 0 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 7 2 0 (% rbp ) pushq - 7 2 8 (% rbp ) pushq - 7 3 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call go . spacesaving . Rate . GetSingle addq $ 3 2 , % rsp movq % xmm 0 , % rcx movapd % xmm 1 , % xmm 0 movl $ 0 , % eax movl $ 0 , % edx movq % rcx , % rax movq % xmm 0 , % rdx movq % rax , % xmm 0 movsd % xmm 0 , - 8 0 (% rbp ) movq % rdx , % xmm 0 movsd % xmm 0 , - 8 8 (% rbp ) . LBB 1 7 4 : . LBB 1 7 5 : movsd - 7 8 4 (% rbp ), % xmm 0 movsd . LC 1 8 6 (% rip ), % xmm 1 ucomisd % xmm 1 , % xmm 0 setp % al movl $ 1 , % edx movsd . LC 1 8 6 (% rip ), % xmm 1 ucomisd % xmm 1 , % xmm 0 cmovne % edx , % eax testb % al , % al je . L 2 3 3 . LBB 1 7 6 : movsd - 7 8 4 (% rbp ), % xmm 0 ucomisd - 8 0 (% rbp ), % xmm 0 setp % al movl $ 1 , % edx ucomisd - 8 0 (% rbp ), % xmm 0 cmovne % edx , % eax . L 2 3 3 : . LBE 1 7 6 : . LBE 1 7 5 : testb % al , % al je . L 2 3 4 . LBB 1 7 7 : leaq int .. d (% rip ), % rbx movq % rbx , - 9 7 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 7 6 (% rbp ) movq - 3 7 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , (% rdx ) movq - 3 7 6 (% rbp ), % rax movq % rax , - 9 6 8 (% rbp ) movq % rbx , - 9 6 0 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 8 (% rbp ) movq - 3 6 8 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , (% rdx ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 9 5 2 (% rbp ) leaq float 6 4 .. d (% rip ), % rbx movq % rbx , - 9 4 4 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 6 0 (% rbp ) movq - 3 6 0 (% rbp ), % rax movsd - 7 8 4 (% rbp ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 3 6 0 (% rbp ), % rax movq % rax , - 9 3 6 (% rbp ) movq % rbx , - 9 2 8 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 5 2 (% rbp ) movq - 3 5 2 (% rbp ), % rax movsd - 8 0 (% rbp ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 9 2 0 (% rbp ) leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) movdqa - 9 7 6 (% rbp ), % xmm 2 movups % xmm 2 , - 3 3 6 (% rbp ) movdqa - 9 6 0 (% rbp ), % xmm 3 movups % xmm 3 , - 3 2 0 (% rbp ) movdqa - 9 4 4 (% rbp ), % xmm 4 movups % xmm 4 , - 3 0 4 (% rbp ) movdqa - 9 2 8 (% rbp ), % xmm 5 movups % xmm 5 , - 2 8 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 3 5 . LBB 1 7 8 : movq - 3 4 4 (% rbp ), % rcx movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) . LBE 1 7 8 : jmp . L 2 3 6 . L 2 3 5 : . LBB 1 7 9 : movq - 3 4 4 (% rbp ), % rcx leaq - 3 3 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 3 6 : . LBE 1 7 9 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 4 , - 1 3 6 (% rbp ) movq $ 4 , - 1 2 8 (% rbp ) leaq . LC 1 8 7 (% rip ), % rax movq % rax , - 8 4 8 (% rbp ) movq $ 4 2 , - 8 4 0 (% rbp ) movq - 8 4 8 (% rbp ), % rax movq - 8 4 0 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 8 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 2 3 4 : . LBE 1 7 7 : . LBE 1 7 4 : . LBB 1 8 0 : . LBB 1 8 1 : movsd - 7 7 6 (% rbp ), % xmm 0 movsd . LC 1 8 6 (% rip ), % xmm 1 ucomisd % xmm 1 , % xmm 0 setp % al movl $ 1 , % edx movsd . LC 1 8 6 (% rip ), % xmm 1 ucomisd % xmm 1 , % xmm 0 cmovne % edx , % eax testb % al , % al je . L 2 3 7 . LBB 1 8 2 : movsd - 7 7 6 (% rbp ), % xmm 0 ucomisd - 8 8 (% rbp ), % xmm 0 setp % al movl $ 1 , % edx ucomisd - 8 8 (% rbp ), % xmm 0 cmovne % edx , % eax . L 2 3 7 : . LBE 1 8 2 : . LBE 1 8 1 : testb % al , % al je . L 2 3 2 . LBB 1 8 3 : leaq int .. d (% rip ), % rbx movq % rbx , - 9 1 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq % rax , (% rdx ) movq - 2 6 4 (% rbp ), % rax movq % rax , - 9 0 4 (% rbp ) movq % rbx , - 8 9 6 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 5 6 (% rbp ) movq - 2 5 6 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , (% rdx ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 8 8 8 (% rbp ) leaq float 6 4 .. d (% rip ), % rbx movq % rbx , - 8 8 0 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq - 2 4 8 (% rbp ), % rax movsd - 7 7 6 (% rbp ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 2 4 8 (% rbp ), % rax movq % rax , - 8 7 2 (% rbp ) movq % rbx , - 8 6 4 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 0 (% rbp ) movq - 2 4 0 (% rbp ), % rax movsd - 8 8 (% rbp ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 8 5 6 (% rbp ) leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movdqa - 9 1 2 (% rbp ), % xmm 6 movups % xmm 6 , - 2 2 4 (% rbp ) movdqa - 8 9 6 (% rbp ), % xmm 7 movups % xmm 7 , - 2 0 8 (% rbp ) movdqa - 8 8 0 (% rbp ), % xmm 2 movups % xmm 2 , - 1 9 2 (% rbp ) movdqa - 8 6 4 (% rbp ), % xmm 3 movups % xmm 3 , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 3 8 . LBB 1 8 4 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , 4 8 (% rcx ) movq % rdx , 5 6 (% rcx ) . LBE 1 8 4 : jmp . L 2 3 9 . L 2 3 8 : . LBB 1 8 5 : movq - 2 3 2 (% rbp ), % rcx leaq - 2 2 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 4 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 3 9 : . LBE 1 8 5 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 4 , - 1 0 4 (% rbp ) movq $ 4 , - 9 6 (% rbp ) leaq . LC 1 8 8 (% rip ), % r 1 4 movl $ 4 2 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 8 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 2 3 2 : . LBE 1 8 3 : . LBE 1 8 0 : . LBE 1 7 3 : . LBE 1 7 0 : . LBE 1 8 7 : . LBE 1 6 3 : . LBB 1 8 8 : addq $ 1 , % r 1 2 . L 2 2 7 : . LBE 1 8 8 : cmpq - 9 8 4 (% rbp ), % r 1 2 jl . L 2 4 7 . LBE 1 6 0 : . LBE 1 5 9 : . LBE 1 5 8 : . LBE 1 9 0 : . LBE 1 5 2 : . LBB 1 9 1 : addq $ 1 , % r 1 3 . L 2 2 2 : . LBE 1 9 1 : cmpq - 8 3 2 (% rbp ), % r 1 3 jl . L 2 4 8 . LBE 1 4 9 : . LBE 1 4 8 : . LBE 1 4 7 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 2 8 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 7 movl $ 2 8 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 6 7 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 6 4 , % rsp movq % rdi , - 2 6 4 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 9 2 (% rbp ) movq % rbx , - 1 8 4 (% rbp ) movq % rbx , - 1 7 6 (% rbp ) movq - 4 0 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 2 4 (% rbp ) movq % rbx , - 2 1 6 (% rbp ) movq % rbx , - 2 0 8 (% rbp ) . LBB 3 : movq $ 0 , - 2 5 6 (% rbp ) movq $ 0 , - 2 4 8 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % rsi movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 6 6 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 8 8 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq - 9 6 (% rbp ), % rcx movq % rax , % rdi movq % rdi , % rdx addq % rdx , % rdx addq % rdi , % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq 8 (% rdx ), % rbx movq % rcx , - 1 2 8 (% rbp ) movq % rbx , - 1 2 0 (% rbp ) movq 1 6 (% rdx ), % rdx movq % rdx , - 1 1 2 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 1 2 8 (% rbp ), % rcx movq - 1 2 0 (% rbp ), % rbx movq % rcx , - 6 4 (% rbp ) movq % rbx , - 5 6 (% rbp ) movq - 1 1 2 (% rbp ), % rdx movq % rdx , - 4 8 (% rbp ) movq - 6 4 (% rbp ), % rcx movq - 5 6 (% rbp ), % rbx movq % rcx , - 2 5 6 (% rbp ) movq % rbx , - 2 4 8 (% rbp ) movq - 4 8 (% rbp ), % rdx movq % rdx , - 2 4 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 4 8 (% rbp ), % rdx testq % rdx , % rdx jg . L 4 jmp . L 4 8 . L 3 : . LBE 1 1 : . LBB 2 6 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : . LBE 2 6 : . LBB 2 7 : movq % rdx , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq - 2 5 6 (% rbp ), % rdx movq (% rdx ), % rdx subq $ 1 , % rdx movq % rdx , - 2 4 (% rbp ) . LBB 1 2 : . LBB 1 3 : jmp . L 6 . L 6 4 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : movq - 1 8 4 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) js . L 7 cmpq % rdx , - 2 4 (% rbp ) jl . L 4 9 . L 7 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : movq - 1 9 2 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx subq $ 1 , % rdx movq % rdx , - 2 4 (% rbp ) . L 6 : . LBE 1 5 : movq - 1 8 4 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) js . L 9 cmpq % rdx , - 2 4 (% rbp ) jl . L 5 0 . L 9 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 0 : movq - 1 9 2 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx testq % rdx , % rdx jne . L 6 4 . LBE 1 3 : . LBE 1 2 : movq - 2 4 8 (% rbp ), % rdx cmpq $ 1 , % rdx jg . L 1 3 movq % rdx , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 3 : movq - 2 5 6 (% rbp ), % rdx addq $ 8 , % rdx movq (% rdx ), % rdx subq $ 1 , % rdx movq % rdx , - 3 2 (% rbp ) . LBB 1 6 : . LBB 1 7 : jmp . L 1 4 . L 6 5 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : movq - 1 8 4 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 1 5 cmpq % rdx , - 3 2 (% rbp ) jl . L 5 2 . L 1 5 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : movq - 1 9 2 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx subq $ 1 , % rdx movq % rdx , - 3 2 (% rbp ) . L 1 4 : . LBE 1 9 : movq - 1 8 4 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 1 7 cmpq % rdx , - 3 2 (% rbp ) jl . L 5 3 . L 1 7 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 3 : movq - 1 9 2 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx testq % rdx , % rdx jne . L 6 5 . LBE 1 7 : . LBE 1 6 : . LBB 2 0 : movq - 2 4 (% rbp ), % rdx cmpq - 3 2 (% rbp ), % rdx jne . L 2 1 . LBB 2 1 : . LBB 2 2 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 2 6 4 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 1 : . LBE 2 2 : . LBE 2 1 : . LBE 2 0 : . LBB 2 3 : movq - 2 1 6 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) js . L 2 3 cmpq % rdx , - 2 4 (% rbp ) jl . L 5 5 . L 2 3 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 5 : movq - 2 1 6 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 2 5 cmpq % rdx , - 3 2 (% rbp ) jl . L 5 6 . L 2 5 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 6 : movq - 2 2 4 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 2 2 4 (% rbp ), % rdi movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rdi , % rdx movq (% rdx ), % rdx cmpq % rdx , % rcx jl . L 2 7 . LBB 2 4 : movq - 2 1 6 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) js . L 2 8 cmpq % rdx , - 2 4 (% rbp ) jge . L 2 8 movq - 2 1 6 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) jns . L 2 9 jmp . L 3 0 . L 2 8 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : cmpq % rdx , - 2 4 (% rbp ) jl . L 5 7 . L 3 0 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 7 : movq - 2 1 6 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 3 2 cmpq % rdx , - 3 2 (% rbp ) jl . L 5 8 . L 3 2 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 8 : movq - 2 2 4 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 2 2 4 (% rbp ), % rdi movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rdi , % rdx movq (% rdx ), % rdx addq % rdx , % rcx movq - 2 2 4 (% rbp ), % rdi movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rdi , % rdx addq $ 1 , % rcx movq % rcx , (% rdx ) movq - 1 8 4 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 3 4 cmpq % rdx , - 3 2 (% rbp ) jl . L 5 9 . L 3 4 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 9 : movq - 1 9 2 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq - 2 4 (% rbp ), % rcx addq $ 1 , % rcx movq % rcx , (% rdx ) . LBE 2 4 : jmp . L 3 6 . L 2 7 : . LBB 2 5 : movq - 2 1 6 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 3 7 cmpq % rdx , - 3 2 (% rbp ) jge . L 3 7 movq - 2 1 6 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) jns . L 3 8 jmp . L 3 9 . L 3 7 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : cmpq % rdx , - 3 2 (% rbp ) jl . L 6 0 . L 3 9 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 0 : movq - 2 1 6 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) js . L 4 1 cmpq % rdx , - 2 4 (% rbp ) jl . L 6 1 . L 4 1 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 1 : movq - 2 2 4 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 2 2 4 (% rbp ), % rdi movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rdi , % rdx movq (% rdx ), % rdx addq % rdx , % rcx movq - 2 2 4 (% rbp ), % rdi movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rdi , % rdx addq $ 1 , % rcx movq % rcx , (% rdx ) movq - 1 8 4 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) js . L 4 3 cmpq % rdx , - 2 4 (% rbp ) jl . L 6 2 . L 4 3 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 2 : movq - 1 9 2 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq - 3 2 (% rbp ), % rcx addq $ 1 , % rcx movq % rcx , (% rdx ) . L 3 6 : . LBE 2 5 : . LBE 2 3 : . LBE 2 7 : . LBE 8 : . LBB 2 8 : addq $ 1 , % rax . L 2 : . LBE 2 8 : cmpq % rsi , % rax jl . L 6 6 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 2 9 : movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) movq - 2 6 4 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 2 9 : . LBE 2 : movq - 2 6 4 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
cmpq % fs : 1 1 2 , % rsp jnb . L 4 8 3 movl $ 1 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 6 : ret . L 4 8 3 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 8 8 , % rsp movq % rdi , - 8 8 (% rbp ) movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 3 5 6 : movq - 8 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq uint 8 .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 8 0 (% rbp ) movq % rbx , - 7 2 (% rbp ) movq % rbx , - 6 4 (% rbp ) . LBB 3 5 7 : movq $ 0 , - 2 4 (% rbp ) . LBB 3 5 8 : jmp . L 4 7 4 . L 4 8 2 : . LBB 3 5 9 : nop . LBE 3 5 9 : . LBB 3 6 0 : movl $ 2 5 , % edi call math .. z 2 frand . Intn @ PLT movq % rax , % rdx movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 7 5 cmpq % rax , - 2 4 (% rbp ) jl . L 4 8 0 . L 4 7 5 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 8 0 : movl % edx , % eax leal 6 5 (% rax ), % ecx movq - 8 0 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movl % ecx , % edx movb % dl , (% rax ) . LBE 3 6 0 : . LBB 3 6 1 : addq $ 1 , - 2 4 (% rbp ) . L 4 7 4 : . LBE 3 6 1 : movq - 2 4 (% rbp ), % rax cmpq - 8 8 (% rbp ), % rax jl . L 4 8 2 . LBE 3 5 8 : . LBE 3 5 7 : . LBB 3 6 2 : subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movl $ 0 , % edi call runtime . slicebytetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx . LBE 3 6 2 : . LBE 3 5 6 : movq - 8 (% rbp ), % rbx leave ret
. LFB 3 : leaq - 6 1 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 7 movl $ 6 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 : ret . L 2 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 6 8 , % rsp movq % rdi , - 5 5 2 (% rbp ) movq $ 2 7 , - 4 8 0 (% rbp ) movb $ 1 , - 4 7 2 (% rbp ) movq $ 0 , - 4 6 4 (% rbp ) movb $ 0 , - 4 5 6 (% rbp ) movq $ 9 , - 4 4 8 (% rbp ) movb $ 1 , - 4 4 0 (% rbp ) movq $ 4 5 , - 4 3 2 (% rbp ) movb $ 0 , - 4 2 4 (% rbp ) leaq - 4 8 0 (% rbp ), % rcx movq % rcx , - 5 1 2 (% rbp ) movq $ 4 , - 5 0 4 (% rbp ) movq $ 4 , - 4 9 6 (% rbp ) movq $ 0 , - 2 4 0 (% rbp ) movq $ 0 , - 2 3 2 (% rbp ) movq $ 0 , - 2 2 4 (% rbp ) leaq . LC 3 0 (% rip ), % rax movl $ 6 9 , % edx leaq - 2 0 8 (% rbp ), % rcx movq % rax , % rsi movq % rdx , % rdi movq % rdx , % rax subq $ 8 , % rsp pushq - 2 2 4 (% rbp ) pushq - 2 3 2 (% rbp ) pushq - 2 4 0 (% rbp ) movq % rax , % rdx movq % rcx , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) . LBB 1 9 : movq $ 0 , - 5 2 8 (% rbp ) movq $ 0 , - 5 2 0 (% rbp ) . LBB 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 4 9 6 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 7 6 (% rbp ), % rax movq % rax , - 5 6 0 (% rbp ) movl $ 0 , % ebx . LBE 2 2 : jmp . L 2 1 . L 2 6 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movq - 3 7 6 (% rbp ), % rax testq % rbx , % rbx js . L 2 2 cmpq % rax , % rbx jge . L 2 2 movq - 3 8 4 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 2 5 : . LBB 2 6 : movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) . LBE 2 6 : . LBB 2 7 : movzbl - 5 2 0 (% rbp ), % eax movb % al , - 5 2 9 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq % rax , - 5 4 4 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq % rax , % rdi call go . leetcode . isPowerOfThree movb % al , - 5 9 3 (% rbp ) leaq go . leetcode .. go . leetcode . para 3 2 6 .. d (% rip ), % rcx movq % rcx , - 5 9 2 (% rbp ) leaq go . leetcode .. go . leetcode . para 3 2 6 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 0 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 5 4 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 3 2 0 (% rbp ), % rax movq % rax , - 5 8 4 (% rbp ) leaq bool .. d (% rip ), % rdi movq % rdi , - 5 7 6 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movzbl - 5 9 3 (% rbp ), % ecx movb % cl , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 5 6 8 (% rbp ) movdqa - 5 9 2 (% rbp ), % xmm 0 movups % xmm 0 , - 3 0 4 (% rbp ) movdqa - 5 7 6 (% rbp ), % xmm 1 movups % xmm 1 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 3 1 (% rip ), % r 1 4 movl $ 3 7 , % r 1 5 d leaq - 1 4 4 (% rbp ), % rax movq % r 1 4 , % r 8 movq % r 1 5 , % r 9 movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 8 , % rcx movq % rdi , % rdx subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) . LBE 2 7 : . LBE 2 4 : . LBB 2 9 : addq $ 1 , % rbx jmp . L 2 1 . L 2 2 : . LBE 2 9 : . LBB 3 0 : . LBB 2 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 1 : . LBE 2 8 : . LBE 3 0 : cmpq - 5 6 0 (% rbp ), % rbx jl . L 2 6 . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) movq $ 0 , - 9 6 (% rbp ) leaq . LC 3 2 (% rip ), % r 1 2 movl $ 3 , % r 1 3 d leaq - 8 0 (% rbp ), % rax movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % rbx , % rdx subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) movq % rax , % rdi call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 4 movl $ 2 3 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 4 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 1 6 , % rsp movq % rdi , - 2 1 6 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 0 8 (% rbp ) movq % rbx , - 2 0 0 (% rbp ) movq % rbx , - 1 9 2 (% rbp ) . LBB 3 : movq $ 0 , - 2 4 (% rbp ) . LBB 4 : jmp . L 3 . L 3 1 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 4 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , % rdx movq - 2 0 0 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 4 cmpq % rax , - 2 4 (% rbp ) jl . L 2 4 . L 4 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 4 : movq - 2 0 8 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rsi , % rax movq % rdx , - 1 4 4 (% rbp ) movq % rbx , - 1 3 6 (% rbp ) movq % rbx , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 2 8 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 6 . LBB 7 : movq - 1 4 4 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 7 . L 6 : . LBE 7 : . LBB 8 : movq - 1 4 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 7 : . LBE 8 : . LBE 6 : . LBB 9 : addq $ 1 , - 2 4 (% rbp ) . L 3 : . LBE 9 : movq - 2 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jl . L 3 1 . LBE 4 : . LBE 3 : . LBB 1 0 : movq $ 0 , - 3 2 (% rbp ) . LBB 1 1 : jmp . L 1 0 . L 3 3 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq $ 0 , - 4 0 (% rbp ) . LBB 1 5 : jmp . L 1 1 . L 3 2 : . LBB 1 6 : nop . LBE 1 6 : . LBB 1 7 : movq - 2 0 0 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 2 cmpq % rax , - 4 0 (% rbp ) jl . L 2 6 . L 1 2 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq - 2 0 8 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 4 cmpq % rax , - 3 2 (% rbp ) jl . L 2 7 . L 1 4 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 6 cmpq % rax , - 3 2 (% rbp ) jl . L 2 8 . L 1 6 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 8 cmpq % rax , - 4 0 (% rbp ) jge . L 1 8 movq - 8 0 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq - 1 1 2 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rax ), % rax movq % rax , (% rdx ) . LBE 1 7 : . LBB 1 8 : addq $ 1 , - 4 0 (% rbp ) jmp . L 1 1 . L 1 8 : . LBE 1 8 : . LBB 1 9 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 1 : . LBE 1 9 : movq - 4 0 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jl . L 3 2 . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 2 0 : addq $ 1 , - 3 2 (% rbp ) . L 1 0 : . LBE 2 0 : movq - 3 2 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 3 3 . LBE 1 1 : . LBE 1 0 : . LBB 2 1 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 2 1 6 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 1 : . LBE 2 : movq - 2 1 6 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 1 7 9 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 9 6 0 movl $ 2 3 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 2 2 8 : ret . L 4 9 6 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 0 0 , % rsp movb $ 0 , - 4 9 (% rbp ) . LBB 3 9 7 1 : call runtime . makemap_small @ PLT movq % rax , - 6 4 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 3 9 7 2 : movq $ 0 , - 7 2 (% rbp ) . LBB 3 9 7 3 : . LBB 3 9 7 4 : . LBB 3 9 7 5 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 3 9 7 5 : jmp . L 4 9 4 8 . L 4 9 5 8 : . LBB 3 9 7 6 : nop . LBE 3 9 7 6 : . LBB 3 9 7 7 : . LBB 3 9 7 8 : movq - 2 1 6 (% rbp ), % rax testq % rbx , % rbx js . L 4 9 4 9 cmpq % rax , % rbx jge . L 4 9 4 9 movq - 2 2 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 3 9 7 8 : . LBB 3 9 7 9 : movq % rax , - 7 2 (% rbp ) . LBE 3 9 7 9 : . LBB 3 9 8 0 : . LBB 3 9 8 1 : movq - 7 2 (% rbp ), % rax movq % rax , - 2 0 0 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) leaq - 9 6 (% rbp ), % rax movq (% rax ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 3 leaq - 2 0 0 (% rbp ), % rax movq (% rax ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . LBE 3 9 8 1 : movq - 7 2 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) leaq - 8 8 (% rbp ), % rax movq (% rax ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax movq % rax , - 4 0 (% rbp ) . LBE 3 9 8 0 : . LBE 3 9 7 7 : . LBB 3 9 8 3 : addq $ 1 , % rbx jmp . L 4 9 4 8 . L 4 9 4 9 : . LBE 3 9 8 3 : . LBB 3 9 8 4 : . LBB 3 9 8 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 9 4 8 : . LBE 3 9 8 2 : . LBE 3 9 8 4 : cmpq % r 1 2 , % rbx jl . L 4 9 5 8 . LBE 3 9 7 4 : . LBE 3 9 7 3 : . LBE 3 9 7 2 : movq - 4 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . LBB 3 9 8 5 : movq $ 0 , - 8 0 (% rbp ) . LBB 3 9 8 6 : . LBB 3 9 8 7 : . LBB 3 9 8 8 : leaq - 1 9 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapiterinit @ PLT . LBE 3 9 8 8 : jmp . L 4 9 5 2 . L 4 9 5 9 : . LBB 3 9 8 9 : nop . LBE 3 9 8 9 : . LBB 3 9 9 0 : . LBB 3 9 9 1 : movq - 1 9 2 (% rbp ), % rax movq (% rax ), % rax movq - 1 8 4 (% rbp ), % rax movq (% rax ), % rax . LBE 3 9 9 1 : . LBB 3 9 9 2 : movq % rax , - 8 0 (% rbp ) . LBE 3 9 9 2 : . LBB 3 9 9 3 : movq - 8 0 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . leetcode . gcd movq % rax , - 4 8 (% rbp ) . LBE 3 9 9 3 : . LBE 3 9 9 0 : . LBB 3 9 9 4 : leaq - 1 9 2 (% rbp ), % rax movq % rax , % rdi call runtime . mapiternext @ PLT . L 4 9 5 2 : . LBE 3 9 9 4 : movq - 1 9 2 (% rbp ), % rax testq % rax , % rax jne . L 4 9 5 9 . LBE 3 9 8 7 : . LBE 3 9 8 6 : . LBE 3 9 8 5 : . LBB 3 9 9 5 : cmpq $ 1 , - 4 8 (% rbp ) setg % al movb % al , - 4 9 (% rbp ) movzbl - 4 9 (% rbp ), % eax . LBE 3 9 9 5 : . LBE 3 9 7 1 : addq $ 2 0 0 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 2 4 2 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 4 : ret . L 2 4 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 3 6 , % rsp movq % rdi , - 1 3 6 (% rbp ) movq % rsi , - 1 4 4 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) . LBB 3 1 9 : movq $ 0 , - 4 0 (% rbp ) . LBB 3 2 0 : movq - 1 5 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) leaq - 8 0 (% rbp ), % rax movq (% rax ), % rdx movq - 1 3 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 go . graph . VertexId . 7 map . 6 go . graph . VertexId . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT leaq - 1 1 2 (% rbp ), % rdx movq (% rdx ), % rdx movq (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 go . graph . VertexId . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq (% rax ), % rax movq % rax , - 4 0 (% rbp ) . LBE 3 2 0 : movq $ 0 , - 4 8 (% rbp ) . LBB 3 2 1 : movq - 1 4 4 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) leaq - 7 2 (% rbp ), % rax movq (% rax ), % rdx movq - 1 3 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 go . graph . VertexId . 7 map . 6 go . graph . VertexId . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT leaq - 1 0 4 (% rbp ), % rdx movq (% rdx ), % rdx movq (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 go . graph . VertexId . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movq (% rax ), % rax movq % rax , - 4 8 (% rbp ) . LBE 3 2 1 : . LBB 3 2 2 : . LBB 3 2 3 : cmpq $- 1 , - 4 0 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 3 7 . LBB 3 2 4 : cmpq $- 1 , - 4 8 (% rbp ) sete % al . L 2 3 7 : . LBE 3 2 4 : . LBE 3 2 3 : testb % al , % al je . L 2 3 8 . LBB 3 2 5 : . LBB 3 2 6 : leaq . LC 1 5 6 (% rip ), % r 1 2 movl $ 1 8 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call errors . New @ PLT movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx jmp . L 2 4 1 . L 2 3 8 : . LBE 3 2 6 : . LBE 3 2 5 : . LBE 3 2 2 : . LBB 3 2 7 : movq - 1 3 6 (% rbp ), % rax movq (% rax ), % rax movq - 1 4 4 (% rbp ), % rdx movq - 1 5 2 (% rbp ), % rcx movq % rcx , - 9 6 (% rbp ) movq $- 1 , % rbx movq % rdx , - 6 4 (% rbp ) leaq - 6 4 (% rbp ), % rdx movq (% rdx ), % rdx movq % rax , % rsi leaq type .. map . 6 go . graph . VertexId . 7 map . 6 go . graph . VertexId . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT leaq - 9 6 (% rbp ), % rdx movq (% rdx ), % rdx movq (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 go . graph . VertexId . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % rbx , (% rax ) . LBE 3 2 7 : . LBB 3 2 8 : movq - 1 3 6 (% rbp ), % rax movzbl 1 6 (% rax ), % eax xorl $ 1 , % eax testb % al , % al je . L 2 4 0 . LBB 3 2 9 : . LBB 3 3 0 : movq - 1 3 6 (% rbp ), % rax movq (% rax ), % rax movq - 1 5 2 (% rbp ), % rdx movq - 1 4 4 (% rbp ), % rcx movq % rcx , - 8 8 (% rbp ) movq $- 1 , % rbx movq % rdx , - 5 6 (% rbp ) leaq - 5 6 (% rbp ), % rdx movq (% rdx ), % rdx movq % rax , % rsi leaq type .. map . 6 go . graph . VertexId . 7 map . 6 go . graph . VertexId . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT leaq - 8 8 (% rbp ), % rdx movq (% rdx ), % rdx movq (% rax ), % rax movq % rax , % rsi leaq type .. map . 6 go . graph . VertexId . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % rbx , (% rax ) . L 2 4 0 : . LBE 3 3 0 : . LBE 3 2 9 : . LBE 3 2 8 : . LBB 3 3 1 : movq - 1 3 6 (% rbp ), % rax movq 8 (% rax ), % rdx subq $ 1 , % rdx movq % rdx , 8 (% rax ) . LBE 3 3 1 : . LBB 3 3 2 : movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx . L 2 4 1 : . LBE 3 3 2 : . LBE 3 1 9 : addq $ 1 3 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 4 0 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 8 movl $ 4 0 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 6 8 , % rsp movq % rdi , - 3 9 2 (% rbp ) leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 string . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 5 2 (% rbp ) leaq . LC 2 1 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 2 5 6 (% rbp ) movq % r 1 3 , - 2 4 8 (% rbp ) movq $ 3 , - 2 4 0 (% rbp ) leaq type ... 6 5 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) leaq . LC 2 2 (% rip ), % rax movq % rax , - 3 3 6 (% rbp ) movq $ 6 , - 3 2 8 (% rbp ) leaq . LC 2 3 (% rip ), % rax movq % rax , - 3 2 0 (% rbp ) movq $ 6 , - 3 1 2 (% rbp ) leaq . LC 2 4 (% rip ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 6 , - 2 9 6 (% rbp ) leaq . LC 2 5 (% rip ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 6 , - 2 8 0 (% rbp ) leaq . LC 2 6 (% rip ), % rax movq % rax , - 2 7 2 (% rbp ) movq $ 6 , - 2 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 3 4 4 (% rbp ), % rax movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 3 4 4 (% rbp ), % rax leaq - 3 3 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 5 x . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 2 3 2 (% rbp ) movq $ 5 , - 2 2 4 (% rbp ) movq $ 5 , - 2 1 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 4 : movq - 3 5 2 (% rbp ), % rax movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 2 2 4 (% rbp ), % rcx movq - 2 1 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq - 3 5 2 (% rbp ), % rax leaq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 string . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 : . LBE 5 : movq - 3 5 2 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 1 , - 3 7 6 (% rbp ) movq $ 1 , - 3 6 8 (% rbp ) . LBB 6 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 string . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 (% rbp ) . LBB 7 : . LBB 8 : . LBB 9 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 9 : jmp . L 6 . L 1 7 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 7 cmpq % rax , % rbx jge . L 7 movq - 1 6 0 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 0 8 (% rbp ) movq % rdi , - 2 0 0 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 1 9 2 (% rbp ) movq % rdi , - 1 8 4 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) . LBE 1 2 : . LBB 1 3 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 4 0 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 8 jmp . L 1 5 . L 7 : . LBE 1 3 : . LBB 1 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 8 : . LBE 1 6 : . LBB 1 7 : . LBB 1 4 : movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 1 0 . L 1 5 : . LBE 1 4 : . LBB 1 5 : leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 string . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 5 : . LBE 1 7 : . LBB 1 8 : leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 4 0 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 string . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq % r 1 4 , - 6 4 (% rbp ) movq % r 1 2 , - 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 . LBB 1 9 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 9 : jmp . L 1 2 . L 1 1 : . LBB 2 0 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 int . 2 . go . Solution . expect . 0 . 6 . 7 string . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 : . LBE 2 0 : movq - 7 2 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 3 9 2 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 8 : . LBE 1 1 : . LBB 2 1 : addq $ 1 , % rbx . L 6 : . LBE 2 1 : cmpq % r 1 3 , % rbx jl . L 1 7 . LBE 8 : . LBE 7 : . LBE 6 : addq $ 3 6 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 0 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 6 , % rsp movq % rdi , - 2 4 (% rbp ) . LBB 2 : cmpq $ 0 , - 2 4 (% rbp ) je . L 9 . LBE 2 : . LBB 4 : . LBB 5 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax setne % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 4 . LBB 6 : movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax setne % al . L 4 : . LBE 6 : . LBE 5 : testb % al , % al je . L 5 . LBB 7 : . LBB 8 : movq - 2 4 (% rbp ), % rcx movq - 2 4 (% rbp ), % r 1 2 movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rdx movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rbx leaq 8 (% rcx ), % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 6 . LBB 9 : movq % rdx , (% rax ) . LBE 9 : jmp . L 7 . L 6 : . LBB 1 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 7 : . LBE 1 0 : leaq 1 6 (% r 1 2 ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 8 . LBB 1 1 : movq % rbx , (% rax ) . LBE 1 1 : jmp . L 5 . L 8 : . LBB 1 2 : movq % rbx , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 5 : . LBE 1 2 : . LBE 8 : . LBE 7 : . LBE 4 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , % rdi call main . reverseTree movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , % rdi call main . reverseTree jmp . L 1 . L 9 : . LBB 1 3 : . LBB 3 : nop . L 1 : . LBE 3 : . LBE 1 3 : addq $ 1 6 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 9 8 movl $ 2 4 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 3 : . LEHB 0 : ret . L 9 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 1 6 , % rsp . LEHE 0 : movq % rdi , - 2 3 2 (% rbp ) movq % rsi , - 2 4 0 (% rbp ) movb $ 0 , - 2 0 9 (% rbp ) . LBB 7 0 : cmpq $ 0 , - 2 3 2 (% rbp ) jne . L 8 1 . LEHB 1 : call runtime . panicmem @ PLT . L 8 1 : movq - 2 3 2 (% rbp ), % rax movq % rax , % rdi call sync . Mutex . Lock @ PLT . LBB 7 1 : cmpq $ 0 , - 2 3 2 (% rbp ) jne . L 8 2 call runtime . panicmem @ PLT . L 8 2 : movq - 2 3 2 (% rbp ), % rax movq % rax , % rdx movq $ 0 , - 1 4 4 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq % rdx , (% rax ) movq - 1 3 6 (% rbp ), % rdx leaq go . Solution . go . Solution .. thunk 0 (% rip ), % rdi leaq - 2 0 9 (% rbp ), % rsi leaq - 2 0 8 (% rbp ), % rax movq % rdx , % rcx movq % rdi , % rdx movq % rax , % rdi call runtime . deferprocStack @ PLT . LBE 7 1 : movq - 2 3 2 (% rbp ), % rcx movq 8 (% rcx ), % rax movq 1 6 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 2 4 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 8 3 . LBB 7 2 : movq - 2 3 2 (% rbp ), % rcx leaq 8 (% rcx ), % rbx movq - 1 2 8 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 go . Solution . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 8 0 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 4 . LBB 7 3 : movq - 9 6 (% rbp ), % rax movq % rax , (% rbx ) jmp . L 8 5 . L 8 4 : . LBE 7 3 : . LBB 7 4 : movq - 9 6 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 8 5 . L 8 3 : . LBE 7 4 : . LBE 7 2 : . LBB 7 5 : movq - 1 2 8 (% rbp ), % rsi movq - 1 1 2 (% rbp ), % rdx movq - 2 3 2 (% rbp ), % rcx movq % rsi , 8 (% rcx ) movq - 2 3 2 (% rbp ), % rcx movq % rax , 1 6 (% rcx ) movq - 2 3 2 (% rbp ), % rax movq % rdx , 2 4 (% rax ) . L 8 5 : . LBE 7 5 : movq - 2 3 2 (% rbp ), % rcx movq 8 (% rcx ), % rax movq 1 6 (% rcx ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 2 4 (% rcx ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 8 6 . LBB 7 6 : movq - 2 4 0 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 8 7 . L 8 6 : . LBE 7 6 : . LBB 7 7 : movq - 2 4 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . LEHE 1 : . L 8 7 : . LBE 7 7 : . LBE 7 0 : movl $ 1 , % ebx . L 9 3 : leaq - 2 0 9 (% rbp ), % rax movq % rax , % rdi . LEHB 2 : call runtime . deferreturn @ PLT . LEHE 2 : cmpl $ 1 , % ebx jne . L 8 8 jmp . L 9 7 . L 9 4 : leaq - 2 0 9 (% rbp ), % rax movq % rax , % rdi . LEHB 3 : call runtime . checkdefer @ PLT . LEHE 3 : jmp . L 8 7 . L 9 5 : movq % rax , % r 1 3 movl $ 0 , % ebx jmp . L 9 3 . L 8 8 : movq % r 1 3 , % rax movq % rax , % rdi . LEHB 4 : call _Unwind_Resume @ PLT . L 9 6 : leaq - 2 0 9 (% rbp ), % rax movq % rax , % rdi call runtime . checkdefer @ PLT jmp . L 9 3 . L 9 7 : addq $ 2 1 6 , % rsp . LEHE 4 : popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 2 movl $ 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 2 : pushq % rbp movq % rsp , % rbp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 : . LBB 3 : . LBB 4 : cmpq $ 0 , - 4 0 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 . LBB 5 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax sete % al . L 2 : . LBE 5 : . LBE 4 : testb % al , % al je . L 3 . LBB 6 : . LBB 7 : movq - 4 0 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 4 . L 3 : . LBE 7 : . LBE 6 : . LBE 3 : movq - 4 0 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 4 0 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) . LBB 8 : . LBB 9 : jmp . L 5 . L 1 1 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax je . L 1 0 . LBE 1 2 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) movq - 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 6 (% rbp ) . LBB 1 4 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax je . L 5 . LBB 1 5 : movq - 8 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 (% rbp ) . L 5 : . LBE 1 5 : . LBE 1 4 : . LBE 1 1 : cmpq $ 0 , - 8 (% rbp ) jne . L 1 1 jmp . L 7 . L 1 0 : . LBB 1 7 : . LBB 1 6 : . LBB 1 3 : nop . L 7 : . LBE 1 3 : . LBE 1 6 : . LBE 1 7 : . LBE 9 : . LBE 8 : . LBB 1 8 : movq - 1 6 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 4 : . LBE 1 8 : . LBE 2 : popq % rbp ret
. LFB 0 : leaq - 1 0 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 7 movl $ 1 0 6 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 7 : pushq % rbp movq % rsp , % rbp subq $ 1 0 5 6 , % rsp movq $ 0 , - 4 0 (% rbp ) . LBB 2 : leaq - 1 0 5 6 (% rbp ), % rdx movl $ 0 , % eax movl $ 1 2 1 , % ecx movq % rdx , % rdi rep stosq . LBB 3 : movq $ 0 , - 4 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rcx movl $ 0 , % eax . LBE 6 : jmp . L 2 . L 2 4 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 3 cmpq % rdx , % rax jge . L 3 movq - 8 0 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 9 : . LBB 1 0 : movq % rdx , - 4 8 (% rbp ) . LBE 1 0 : . LBB 1 1 : cmpq $ 0 , - 4 8 (% rbp ) jns . L 4 jmp . L 5 . L 3 : . LBE 1 1 : . LBB 1 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 2 : . LBB 1 3 : cmpq $ 1 2 0 , - 4 8 (% rbp ) jg . L 5 cmpq $ 0 , - 4 8 (% rbp ) jns . L 6 jmp . L 7 . L 5 : movq - 4 8 (% rbp ), % rax movl $ 1 2 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 : cmpq $ 1 2 0 , - 4 8 (% rbp ) jg . L 7 movq - 4 8 (% rbp ), % rdx movq - 1 0 5 6 (% rbp ,% rdx , 8 ), % rdx leaq 1 (% rdx ), % rsi movq - 4 8 (% rbp ), % rdx movq % rsi , - 1 0 5 6 (% rbp ,% rdx , 8 ) . LBE 1 3 : . LBE 8 : . LBB 1 5 : addq $ 1 , % rax jmp . L 2 . L 7 : . LBE 1 5 : . LBB 1 6 : . LBB 1 4 : movq - 4 8 (% rbp ), % rax movl $ 1 2 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 4 : . LBE 1 6 : cmpq % rcx , % rax jl . L 2 4 . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 8 (% rbp ) movq $ 1 5 , - 1 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 1 7 : movq $ 1 5 , - 3 2 (% rbp ) . LBB 1 8 : jmp . L 1 0 . L 2 6 : . LBB 1 9 : nop . LBE 1 9 : . LBB 2 0 : . LBB 2 1 : . LBB 2 2 : jmp . L 1 1 . L 2 5 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : cmpq $ 0 , - 1 6 (% rbp ) js . L 1 2 cmpq $ 1 2 0 , - 1 6 (% rbp ) jg . L 1 2 movq - 1 6 (% rbp ), % rax movq - 1 0 5 6 (% rbp ,% rax , 8 ), % rax subq % rax , - 8 (% rbp ) addq $ 1 , - 1 6 (% rbp ) jmp . L 1 1 . L 1 2 : movq - 1 6 (% rbp ), % rax movl $ 1 2 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 1 : . LBE 2 4 : movq - 3 2 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax addq $ 7 , % rax cmpq % rax , - 1 6 (% rbp ) jle . L 2 5 . LBE 2 2 : . LBE 2 1 : cmpq $ 0 , - 3 2 (% rbp ) js . L 1 5 cmpq $ 1 2 0 , - 3 2 (% rbp ) jg . L 1 5 movq - 3 2 (% rbp ), % rax movq - 1 0 5 6 (% rbp ,% rax , 8 ), % rax addq % rax , - 8 (% rbp ) cmpq $ 0 , - 3 2 (% rbp ) jns . L 1 6 jmp . L 1 7 . L 1 5 : movq - 3 2 (% rbp ), % rax movl $ 1 2 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 6 : cmpq $ 1 2 0 , - 3 2 (% rbp ) jg . L 1 7 movq - 3 2 (% rbp ), % rax movq - 1 0 5 6 (% rbp ,% rax , 8 ), % rax movq - 8 (% rbp ), % rdx subq $ 1 , % rdx imulq % rdx , % rax addq % rax , - 2 4 (% rbp ) . LBE 2 0 : . LBB 2 5 : addq $ 1 , - 3 2 (% rbp ) jmp . L 1 0 . L 1 7 : . LBE 2 5 : . LBB 2 6 : movq - 3 2 (% rbp ), % rax movl $ 1 2 1 , % esi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : . LBE 2 6 : cmpq $ 1 2 0 , - 3 2 (% rbp ) jle . L 2 6 . LBE 1 8 : . LBE 1 7 : . LBB 2 7 : movq - 2 4 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . LBE 2 7 : . LBE 2 : leave ret
. LFB 0 : leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 7 movl $ 2 6 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 7 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 3 2 , % rsp movq $ 0 , - 8 0 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movq $- 1 , - 8 0 (% rbp ) movq - 8 0 (% rbp ), % rax jmp . L 3 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq main .. main . lrSum .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 5 6 (% rbp ) movq % rbx , - 2 4 8 (% rbp ) movq % rbx , - 2 4 0 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 6 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 5 6 (% rbp ) . LBB 7 : jmp . L 4 . L 4 4 : . LBB 8 : nop . LBE 8 : . LBB 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 5 cmpq % rax , - 5 6 (% rbp ) jl . L 3 4 . L 5 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 4 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq % rax , - 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 7 cmpq % rax , - 5 6 (% rbp ) jl . L 3 5 . L 7 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 2 5 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 4 , % rax addq % rax , % rdx movq - 4 0 (% rbp ), % rax movq % rax , 8 (% rdx ) . LBE 9 : . LBB 1 0 : subq $ 1 , - 5 6 (% rbp ) . L 4 : . LBE 1 0 : cmpq $ 0 , - 5 6 (% rbp ) jns . L 4 4 . LBE 7 : . LBE 6 : movq $ 0 , - 4 8 (% rbp ) . LBB 1 1 : movq $ 0 , - 6 4 (% rbp ) . LBB 1 2 : jmp . L 1 1 . L 4 5 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 2 cmpq % rax , - 6 4 (% rbp ) jl . L 3 7 . L 1 2 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq 1 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax addq % rax , - 4 8 (% rbp ) movq - 2 4 8 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 1 4 cmpq % rax , - 6 4 (% rbp ) jl . L 3 8 . L 1 4 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 2 5 6 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 4 , % rax addq % rax , % rdx movq - 4 8 (% rbp ), % rax movq % rax , (% rdx ) . LBE 1 4 : . LBB 1 5 : addq $ 1 , - 6 4 (% rbp ) . L 1 1 : . LBE 1 5 : movq 2 4 (% rbp ), % rax cmpq % rax , - 6 4 (% rbp ) jl . L 4 5 . LBE 1 2 : . LBE 1 1 : leaq type ... 6 . 7 main . lrSum (% rip ), % r 1 2 leaq type ... 6 . 7 main . lrSum (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 8 . LBB 1 6 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 6 : jmp . L 1 9 . L 1 8 : . LBB 1 7 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 main . lrSum (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 9 : . LBE 1 7 : movq - 2 0 0 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 1 6 0 (% rbp ) movq % r 1 3 , - 1 5 2 (% rbp ) leaq - 1 6 0 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 1 , - 1 3 6 (% rbp ) movq $ 1 , - 1 2 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) . LBB 1 8 : movq - 2 4 8 (% rbp ), % rax cmpq $ 1 , % rax jg . L 2 0 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 2 0 : movq - 2 5 6 (% rbp ), % rax addq $ 1 6 , % rax movq 8 (% rax ), % rax testq % rax , % rax jne . L 2 1 . LBB 1 9 : . LBB 2 0 : movq $ 0 , - 8 0 (% rbp ) movq - 8 0 (% rbp ), % rax jmp . L 3 3 . L 2 1 : . LBE 2 0 : . LBE 1 9 : . LBE 1 8 : . LBB 2 1 : movq $ 1 , - 7 2 (% rbp ) . LBB 2 2 : jmp . L 2 2 . L 4 6 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movq - 7 2 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 2 4 8 (% rbp ), % rax testq % rdx , % rdx js . L 2 3 cmpq % rax , % rdx jl . L 4 0 . L 2 3 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq - 7 2 (% rbp ), % rax addq $ 1 , % rax movq - 2 4 8 (% rbp ), % rcx testq % rax , % rax js . L 2 5 cmpq % rcx , % rax jl . L 4 1 . L 2 5 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq - 2 5 6 (% rbp ), % rcx salq $ 4 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq - 2 5 6 (% rbp ), % rcx salq $ 4 , % rax addq % rcx , % rax movq 8 (% rax ), % rax cmpq % rax , % rdx jne . L 2 7 . LBB 2 6 : . LBB 2 7 : movq - 7 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 0 (% rbp ), % rax jmp . L 3 3 . L 2 7 : . LBE 2 7 : . LBE 2 6 : . LBE 2 5 : . LBE 2 4 : . LBB 2 8 : addq $ 1 , - 7 2 (% rbp ) . L 2 2 : . LBE 2 8 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 7 2 (% rbp ) jl . L 4 6 . LBE 2 2 : . LBE 2 1 : . LBB 2 9 : movq - 2 4 8 (% rbp ), % rax subq $ 2 , % rax movq - 2 4 8 (% rbp ), % rdx testq % rax , % rax js . L 3 0 cmpq % rdx , % rax jl . L 4 3 . L 3 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq - 2 5 6 (% rbp ), % rdx salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rax testq % rax , % rax jne . L 3 2 . LBB 3 0 : . LBB 3 1 : movq - 2 4 8 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 8 0 (% rbp ) movq - 8 0 (% rbp ), % rax jmp . L 3 3 . L 3 2 : . LBE 3 1 : . LBE 3 0 : . LBE 2 9 : . LBB 3 2 : movq $- 1 , - 8 0 (% rbp ) movq - 8 0 (% rbp ), % rax . L 3 3 : . LBE 3 2 : . LBE 2 : leaq - 2 4 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 8 8 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 0 movl $ 8 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 4 0 , % rsp movq % rdi , - 8 2 4 (% rbp ) movq $ 3 1 , - 7 5 2 (% rbp ) movq $ 8 , - 7 4 4 (% rbp ) movq $ 2 0 1 9 , - 7 3 6 (% rbp ) leaq . LC 1 5 (% rip ), % rax movl $ 8 , % edx movq % rax , - 7 2 8 (% rbp ) movq % rdx , - 7 2 0 (% rbp ) movq $ 1 5 , - 7 1 2 (% rbp ) movq $ 8 , - 7 0 4 (% rbp ) movq $ 1 9 9 3 , - 6 9 6 (% rbp ) leaq . LC 1 6 (% rip ), % r 1 2 movl $ 6 , % r 1 3 d movq % r 1 2 , - 6 8 8 (% rbp ) movq % r 1 3 , - 6 8 0 (% rbp ) movq $ 1 , - 6 7 2 (% rbp ) movq $ 1 , - 6 6 4 (% rbp ) movq $ 1 9 7 0 , - 6 5 6 (% rbp ) leaq . LC 1 7 (% rip ), % r 1 0 movl $ 8 , % r 1 1 d movq % r 1 0 , - 6 4 8 (% rbp ) movq % r 1 1 , - 6 4 0 (% rbp ) movq $ 2 5 , - 6 3 2 (% rbp ) movq $ 3 , - 6 2 4 (% rbp ) movq $ 1 9 9 3 , - 6 1 6 (% rbp ) leaq . LC 1 7 (% rip ), % r 8 movl $ 8 , % r 9 d movq % r 8 , - 6 0 8 (% rbp ) movq % r 9 , - 6 0 0 (% rbp ) movq $ 3 0 , - 5 9 2 (% rbp ) movq $ 6 , - 5 8 4 (% rbp ) movq $ 2 0 0 0 , - 5 7 6 (% rbp ) leaq . LC 1 8 (% rip ), % rcx movl $ 6 , % ebx movq % rcx , - 5 6 8 (% rbp ) movq % rbx , - 5 6 0 (% rbp ) . LBB 2 : movq $ 0 , - 8 1 6 (% rbp ) movq $ 0 , - 8 0 8 (% rbp ) movq $ 0 , - 8 0 0 (% rbp ) movq $ 0 , - 7 9 2 (% rbp ) movq $ 0 , - 7 8 4 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq - 7 2 8 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq - 6 9 6 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movl $ 5 , % r 1 2 d movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 1 9 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : testq % rbx , % rbx js . L 3 cmpq $ 4 , % rbx jg . L 3 movq % rbx , % rax salq $ 2 , % rax addq % rbx , % rax salq $ 3 , % rax leaq - 4 8 (% rbp ), % rdi addq % rdi , % rax subq $ 4 4 8 , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 5 4 4 (% rbp ) movq % rdi , - 5 3 6 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 5 2 8 (% rbp ) movq % rdi , - 5 2 0 (% rbp ) movq 3 2 (% rax ), % rax movq % rax , - 5 1 2 (% rbp ) . LBE 8 : . LBB 9 : movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 5 1 2 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 8 1 6 (% rbp ) movq % rdx , - 8 0 8 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 8 0 0 (% rbp ) movq % rdx , - 7 9 2 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 7 8 4 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 8 0 0 (% rbp ), % rdx movq - 8 0 8 (% rbp ), % rcx movq - 8 1 6 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call go . problem 1 1 8 5 . dayOfTheWeek movq % rax , - 7 6 8 (% rbp ) movq % rdx , - 7 6 0 (% rbp ) . LBB 1 1 : movq - 7 9 2 (% rbp ), % rax movq - 7 8 4 (% rbp ), % rdx movq - 7 6 0 (% rbp ), % rcx movq % rdx , % rsi cmpq % rsi , % rcx jne . L 4 jmp . L 1 7 . L 3 : . LBE 1 1 : . LBE 1 0 : . LBB 2 2 : movl $ 5 , % esi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : . LBE 2 2 : . LBB 2 3 : . LBB 2 1 : movq - 7 6 8 (% rbp ), % rcx movq % rax , % rsi cmpq % rsi , % rcx je . L 6 movq % rdx , % rcx movq % rcx , % rsi movq % rax , % rcx movq - 7 6 8 (% rbp ), % rax movq % rsi , % rdx movq % rcx , % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax je . L 6 . L 4 : . LBB 1 2 : leaq go . problem 1 1 8 5 .. go . problem 1 1 8 5 . testType .. d (% rip ), % rax movq % rax , - 8 8 0 (% rbp ) leaq go . problem 1 1 8 5 .. go . problem 1 1 8 5 . testType .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 . LBB 1 3 : movq - 2 4 8 (% rbp ), % rax movq - 2 4 0 (% rbp ), % rsi movq - 2 3 2 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 2 2 4 (% rbp ), % rsi movq - 2 1 6 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 2 0 8 (% rbp ), % rdx movq % rdx , 3 2 (% rax ) . LBE 1 3 : jmp . L 8 . L 7 : . LBB 1 4 : movq - 2 4 8 (% rbp ), % rax leaq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi leaq go . problem 1 1 8 5 .. go . problem 1 1 8 5 . testType .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 4 : movq - 2 4 8 (% rbp ), % rax movq % rax , - 8 7 2 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 8 6 4 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 7 6 8 (% rbp ), % rax movq - 7 6 0 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 5 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 5 : jmp . L 1 0 . L 9 : . LBB 1 6 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 6 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 8 5 6 (% rbp ) leaq string .. d (% rip ), % rax movq % rax , - 8 4 8 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 7 9 2 (% rbp ), % rax movq - 7 8 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 . LBB 1 7 : movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 2 . L 1 1 : . LBB 1 8 : movq - 1 6 8 (% rbp ), % rax leaq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 : . LBE 1 8 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 8 4 0 (% rbp ) leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 8 8 0 (% rbp ), % xmm 0 movups % xmm 0 , - 1 2 8 (% rbp ) movdqa - 8 6 4 (% rbp ), % xmm 1 movups % xmm 1 , - 1 1 2 (% rbp ) movdqa - 8 4 8 (% rbp ), % xmm 2 movups % xmm 2 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 3 . LBB 1 9 : movq - 1 3 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) . LBE 1 9 : jmp . L 1 4 . L 1 3 : . LBB 2 0 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 4 : . LBE 2 0 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 1 9 (% rip ), % r 1 4 movl $ 2 5 , % r 1 5 d movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rsi , % rcx movq - 8 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 6 : . LBE 1 2 : . LBE 2 1 : . LBE 2 3 : . LBE 7 : . LBB 2 4 : addq $ 1 , % rbx . L 2 : . LBE 2 4 : cmpq % r 1 2 , % rbx jl . L 1 9 . LBE 4 : . LBE 3 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 8 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 8 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 2 4 (% rbp ) movq % rsi , - 3 2 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : . LBB 6 : . LBB 7 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rdx movq - 3 2 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx setg % al testb % al , % al je . L 4 . LBB 8 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx setg % al . L 4 : . LBE 8 : . LBE 7 : testb % al , % al je . L 5 . LBB 9 : . LBB 1 0 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq - 4 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rcx movq % rcx , % rsi movq % rax , % rdi call go . lcaoabst . lowestCommonAncestor movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 3 . L 5 : . LBE 1 0 : . LBE 9 : . LBE 6 : . LBB 1 1 : . LBB 1 2 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rdx movq - 3 2 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx setl % al testb % al , % al je . L 6 . LBB 1 3 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rdx movq - 4 0 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx setl % al . L 6 : . LBE 1 3 : . LBE 1 2 : testb % al , % al je . L 7 . LBB 1 4 : . LBB 1 5 : movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq - 4 0 (% rbp ), % rdx movq - 3 2 (% rbp ), % rcx movq % rcx , % rsi movq % rax , % rdi call go . lcaoabst . lowestCommonAncestor movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 3 . L 7 : . LBE 1 5 : . LBE 1 4 : . LBE 1 1 : . LBB 1 6 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 3 : . LBE 1 6 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 1 movl $ 1 6 8 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 1 : pushq % rbp movq % rsp , % rbp subq $ 1 6 0 , % rsp movq % rdi , - 1 5 2 (% rbp ) movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) . LBB 2 : . LBB 3 : movq 1 6 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq $ 0 , - 8 (% rbp ) movq $ 0 , - 1 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 6 : movq $ 0 , - 3 2 (% rbp ) . LBB 7 : . LBB 8 : . LBB 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rcx movl $ 0 , % eax . LBE 9 : jmp . L 4 . L 1 9 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 1 0 4 (% rbp ), % rdx testq % rax , % rax js . L 5 cmpq % rdx , % rax jge . L 5 movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 1 2 : . LBB 1 3 : movq % rdx , - 3 2 (% rbp ) . LBE 1 3 : . LBB 1 4 : movq - 3 2 (% rbp ), % rdx xorq % rdx , - 2 4 (% rbp ) . LBE 1 4 : . LBE 1 1 : . LBB 1 6 : addq $ 1 , % rax jmp . L 4 . L 5 : . LBE 1 6 : . LBB 1 7 : . LBB 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 5 : . LBE 1 7 : cmpq % rcx , % rax jl . L 1 9 . LBE 8 : . LBE 7 : . LBE 6 : movq - 2 4 (% rbp ), % rax negq % rax andq % rax , - 2 4 (% rbp ) . LBB 1 8 : movq $ 0 , - 4 0 (% rbp ) . LBB 1 9 : . LBB 2 0 : . LBB 2 1 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % rcx movl $ 0 , % eax . LBE 2 1 : jmp . L 8 . L 2 0 : . LBB 2 2 : nop . LBE 2 2 : . LBB 2 3 : . LBB 2 4 : movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 9 cmpq % rdx , % rax jge . L 9 movq - 8 0 (% rbp ), % rdx movq % rax , % rsi salq $ 3 , % rsi addq % rsi , % rdx movq (% rdx ), % rdx . LBE 2 4 : . LBB 2 5 : movq % rdx , - 4 0 (% rbp ) . LBE 2 5 : . LBB 2 6 : . LBB 2 7 : movq - 4 0 (% rbp ), % rdx andq - 2 4 (% rbp ), % rdx cmpq % rdx , - 2 4 (% rbp ) je . L 1 0 jmp . L 1 7 . L 9 : . LBE 2 7 : . LBE 2 6 : . LBB 3 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : . LBE 3 1 : . LBB 3 2 : . LBB 3 0 : . LBB 2 8 : movq - 4 0 (% rbp ), % rdx xorq % rdx , - 8 (% rbp ) . LBE 2 8 : jmp . L 1 2 . L 1 7 : . LBB 2 9 : movq - 4 0 (% rbp ), % rdx xorq % rdx , - 1 6 (% rbp ) . L 1 2 : . LBE 2 9 : . LBE 3 0 : . LBE 3 2 : . LBE 2 3 : . LBB 3 3 : addq $ 1 , % rax . L 8 : . LBE 3 3 : cmpq % rcx , % rax jl . L 2 0 . LBE 2 0 : . LBE 1 9 : . LBE 1 8 : . LBB 3 4 : leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq - 8 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 6 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 2 , - 1 3 6 (% rbp ) movq $ 2 , - 1 2 8 (% rbp ) movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 : . LBE 3 4 : . LBE 2 : movq - 1 5 2 (% rbp ), % rax leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 3 movl $ 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 3 : pushq % rbp movq % rsp , % rbp subq $ 8 0 , % rsp movq % rdi , - 7 2 (% rbp ) movb $ 0 , - 3 3 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 7 2 (% rbp ) jns . L 2 . LBB 4 : . LBB 5 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq $ 1 , - 8 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) . L 6 : . LBB 6 : . LBB 7 : . LBB 8 : . LBB 9 : cmpq $ 9 , - 1 6 (% rbp ) jle . L 2 1 . LBE 9 : movq - 1 6 (% rbp ), % rcx movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 2 , % rax sarq $ 6 3 , % rcx movq % rcx , % rdx subq % rdx , % rax movq % rax , - 1 6 (% rbp ) addq $ 1 , - 8 (% rbp ) . LBE 8 : jmp . L 6 . L 2 1 : . LBB 1 2 : . LBB 1 1 : . LBB 1 0 : nop . LBE 1 0 : . LBE 1 1 : . LBE 1 2 : . LBE 7 : . LBE 6 : movq $ 1 , - 2 4 (% rbp ) movq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . LBB 1 3 : . LBB 1 4 : jmp . L 7 . L 2 2 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : movq - 2 4 (% rbp ), % rax movq % rax , % rdi call go . palindrome_number . divisor movq % rax , % rdi cmpq $- 1 , % rdi jne . L 8 movq - 7 2 (% rbp ), % rax negq % rax movq % rax , % rcx jmp . L 1 7 . L 8 : testq % rdi , % rdi jne . L 1 0 call runtime . panicdivide @ PLT . L 1 0 : movq - 7 2 (% rbp ), % rax cqto idivq % rdi movq % rax , % rcx . L 1 7 : movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 2 , % rax movq % rcx , % rsi sarq $ 6 3 , % rsi subq % rsi , % rax movq % rax , % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax subq % rax , % rcx movq % rcx , % rdx movq % rdx , - 4 8 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , % rdi call go . palindrome_number . divisor movq % rax , % rdi cmpq $- 1 , % rdi jne . L 1 1 movq - 7 2 (% rbp ), % rax negq % rax movq % rax , % rcx jmp . L 1 8 . L 1 1 : testq % rdi , % rdi jne . L 1 3 call runtime . panicdivide @ PLT . L 1 3 : movq - 7 2 (% rbp ), % rax cqto idivq % rdi movq % rax , % rcx . L 1 8 : movabsq $ 7 3 7 8 6 9 7 6 2 9 4 8 3 8 2 0 6 4 7 , % rdx movq % rcx , % rax imulq % rdx movq % rdx , % rax sarq $ 2 , % rax movq % rcx , % rsi sarq $ 6 3 , % rsi subq % rsi , % rax movq % rax , % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax subq % rax , % rcx movq % rcx , % rdx movq % rdx , - 5 6 (% rbp ) . LBB 1 7 : movq - 4 8 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax je . L 1 4 . LBB 1 8 : . LBB 1 9 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 3 . L 1 4 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBB 2 0 : movq - 2 4 (% rbp ), % rax leaq 1 (% rax ), % rdx movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rdx , - 2 4 (% rbp ) movq % rax , - 3 2 (% rbp ) . L 7 : . LBE 2 0 : . LBE 1 6 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jl . L 2 2 . LBE 1 4 : . LBE 1 3 : . LBB 2 1 : movb $ 1 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax . L 3 : . LBE 2 1 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 7 movl $ 1 2 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 7 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 0 4 , % rsp movq % rdi , - 1 0 4 (% rbp ) movq $ 0 , - 6 4 (% rbp ) movq $ 0 , - 5 6 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 9 6 (% rbp ) movq % rbx , - 8 8 (% rbp ) movq % rbx , - 8 0 (% rbp ) . LBB 3 : movq $ 1 , - 2 4 (% rbp ) . LBB 4 : jmp . L 2 . L 1 6 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 8 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 3 cmpq % rax , - 2 4 (% rbp ) jl . L 1 2 . L 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 : movq - 2 4 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 8 8 (% rbp ), % rax testq % rdx , % rdx js . L 5 cmpq % rax , % rdx jl . L 1 3 . L 5 : movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 3 : movq - 2 4 (% rbp ), % rax subq $ 1 , % rax movq 2 4 (% rbp ), % rcx testq % rax , % rax js . L 7 cmpq % rcx , % rax jl . L 1 4 . L 7 : movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : movq - 9 6 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq 1 6 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 9 6 (% rbp ), % rsi movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rsi , % rax addq % rcx , % rdx movq % rdx , (% rax ) . LBE 6 : . LBB 7 : addq $ 1 , - 2 4 (% rbp ) . L 2 : . LBE 7 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 2 4 (% rbp ) jl . L 1 6 . LBE 4 : . LBE 3 : . LBB 8 : movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 6 4 (% rbp ) movq % rdx , - 5 6 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 1 0 4 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 4 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 8 : . LBE 2 : movq - 1 0 4 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 1 movl $ 2 1 6 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 1 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 0 0 , % rsp movq $ 0 , - 2 4 (% rbp ) . LBB 2 : . LBB 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 3 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 4 : movq 1 6 (% rbp ), % rax movq (% rax ), % rbx leaq main . TreeNode .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq % rbx , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 . LBB 6 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 : jmp . L 6 . L 5 : . LBB 7 : movq - 2 0 0 (% rbp ), % rax leaq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi leaq main . TreeNode .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 : . LBE 7 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) . LBB 8 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jne . L 7 . LBB 9 : . LBB 1 0 : movq - 3 2 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 3 . L 7 : . LBE 1 0 : . LBE 9 : . LBE 8 : movq - 3 2 (% rbp ), % rax movq (% rax ), % rax subq $ 8 , % rsp pushq 5 6 (% rbp ) pushq 4 8 (% rbp ) pushq 4 0 (% rbp ) movq % rax , % rdi call main . buildTree .. func 1 addq $ 3 2 , % rsp movq % rax , - 4 0 (% rbp ) . LBB 1 1 : cmpq $- 1 , - 4 0 (% rbp ) jne . L 8 . LBB 1 2 : . LBB 1 3 : movq $ 0 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 3 . L 8 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : movq - 4 0 (% rbp ), % rax leaq 1 (% rax ), % rdi movq 3 2 (% rbp ), % rax testq % rdi , % rdi js . L 9 cmpq % rax , % rdi jg . L 9 testq % rdi , % rdi jg . L 1 0 jmp . L 2 7 . L 9 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 2 7 : movq % rdi , % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 1 0 : movq 5 6 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 1 2 cmpq % rax , - 4 0 (% rbp ) jg . L 1 2 cmpq $ 0 , - 4 0 (% rbp ) jns . L 1 3 jmp . L 2 8 . L 1 2 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 2 8 : movq - 4 0 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 3 : movq 4 0 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 4 0 (% rbp ), % rax movq % rax , - 1 5 2 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 3 , % rax addq % rdx , % rax movq % rax , - 1 2 8 (% rbp ) leaq - 1 (% rdi ), % rax movq % rax , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 1 2 (% rbp ) pushq - 1 4 4 (% rbp ) pushq - 1 5 2 (% rbp ) pushq - 1 6 0 (% rbp ) pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) call main . buildTree addq $ 4 8 , % rsp movq % rax , % rdx movq - 3 2 (% rbp ), % rax addq $ 8 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 1 5 . LBB 1 4 : movq % rdx , (% rax ) . LBE 1 4 : jmp . L 1 6 . L 1 5 : . LBB 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 6 : . LBE 1 5 : movq - 4 0 (% rbp ), % rax addq $ 1 , % rax movq 3 2 (% rbp ), % rdx testq % rax , % rax js . L 1 7 cmpq % rdx , % rax jle . L 2 9 . L 1 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 2 9 : movq - 4 0 (% rbp ), % rdx addq $ 1 , % rdx movq 5 6 (% rbp ), % rcx testq % rdx , % rdx js . L 1 9 cmpq % rcx , % rdx jle . L 3 0 . L 1 9 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 3 0 : movq 4 0 (% rbp ), % rsi movq 5 6 (% rbp ), % rcx cmpq % rcx , % rdx je . L 2 1 movq % rdx , % rcx salq $ 3 , % rcx jmp . L 2 2 . L 2 1 : movl $ 0 , % ecx . L 2 2 : addq % rsi , % rcx movq % rcx , - 9 6 (% rbp ) movq 4 8 (% rbp ), % rcx subq % rdx , % rcx movq % rcx , - 8 8 (% rbp ) movq 5 6 (% rbp ), % rcx subq % rdx , % rcx movq % rcx , - 8 0 (% rbp ) movq 1 6 (% rbp ), % rcx movq 3 2 (% rbp ), % rdx cmpq % rdx , % rax je . L 2 3 movq % rax , % rdx salq $ 3 , % rdx jmp . L 2 4 . L 2 3 : movl $ 0 , % edx . L 2 4 : addq % rcx , % rdx movq % rdx , - 6 4 (% rbp ) movq 2 4 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 5 6 (% rbp ) movq 3 2 (% rbp ), % rdx subq % rax , % rdx movq % rdx , - 4 8 (% rbp ) pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) pushq - 4 8 (% rbp ) pushq - 5 6 (% rbp ) pushq - 6 4 (% rbp ) call main . buildTree addq $ 4 8 , % rsp movq % rax , % rdx movq - 3 2 (% rbp ), % rax addq $ 1 6 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 2 5 . LBB 1 6 : movq % rdx , (% rax ) . LBE 1 6 : jmp . L 2 6 . L 2 5 : . LBB 1 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 2 6 : . LBE 1 7 : . LBB 1 8 : movq - 3 2 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 3 : . LBE 1 8 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 1 : leaq - 9 8 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 0 5 movl $ 9 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 1 0 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 9 3 6 , % rsp movq % rdi , - 8 8 8 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 7 6 (% rbp ) movq - 7 7 6 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq - 7 7 6 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) movq $ 4 , - 5 6 8 (% rbp ) movq $ 4 , - 5 6 0 (% rbp ) leaq type ... 6 1 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 6 8 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 6 0 (% rbp ) movq - 7 6 0 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq - 7 6 0 (% rbp ), % rax movq % rax , - 7 5 2 (% rbp ) movq $ 3 , - 7 4 4 (% rbp ) movq $ 3 , - 7 3 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 8 . LBB 4 1 : movq - 7 6 8 (% rbp ), % rcx movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 7 3 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 1 : jmp . L 7 9 . L 7 8 : . LBB 4 2 : movq - 7 6 8 (% rbp ), % rax leaq - 7 5 2 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 9 : . LBE 4 2 : movq - 7 6 8 (% rbp ), % rax movq % rax , - 5 5 2 (% rbp ) movq $ 1 , - 5 4 4 (% rbp ) movq $ 1 , - 5 3 6 (% rbp ) leaq type ... 6 6 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 0 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq $- 1 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 2 , 2 4 (% rax ) movq $- 1 , 3 2 (% rax ) movq $- 4 , 4 0 (% rax ) movq - 7 2 0 (% rbp ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 6 , - 5 2 0 (% rbp ) movq $ 6 , - 5 1 2 (% rbp ) leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 1 2 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 0 4 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq $- 1 , (% rax ) movq $- 1 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq - 7 0 4 (% rbp ), % rax movq % rax , - 6 8 8 (% rbp ) movq $ 3 , - 6 8 0 (% rbp ) movq $ 3 , - 6 7 2 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 9 6 (% rbp ) movq - 6 9 6 (% rbp ), % rax movq $- 1 , (% rax ) movq $ 0 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq - 6 9 6 (% rbp ), % rax movq % rax , - 6 6 4 (% rbp ) movq $ 3 , - 6 5 6 (% rbp ) movq $ 3 , - 6 4 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 0 . LBB 4 3 : movq - 7 1 2 (% rbp ), % rcx movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 4 3 : jmp . L 8 1 . L 8 0 : . LBB 4 4 : movq - 7 1 2 (% rbp ), % rax leaq - 6 8 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 1 : . LBE 4 4 : movq - 7 1 2 (% rbp ), % rax movq % rax , - 5 0 4 (% rbp ) movq $ 2 , - 4 9 6 (% rbp ) movq $ 2 , - 4 8 8 (% rbp ) leaq type ... 6 6 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 3 2 (% rbp ) movq - 6 3 2 (% rbp ), % rax movq $- 4 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 3 , 3 2 (% rax ) movq $ 1 , 4 0 (% rax ) movq - 6 3 2 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq $ 6 , - 4 7 2 (% rbp ) movq $ 6 , - 4 6 4 (% rbp ) leaq type ... 6 1 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 2 4 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 1 6 (% rbp ) movq - 6 1 6 (% rbp ), % rax movq $- 4 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq - 6 1 6 (% rbp ), % rax movq % rax , - 6 0 8 (% rbp ) movq $ 3 , - 6 0 0 (% rbp ) movq $ 3 , - 5 9 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 2 . LBB 4 5 : movq - 6 2 4 (% rbp ), % rcx movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 5 9 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 5 : jmp . L 8 3 . L 8 2 : . LBB 4 6 : movq - 6 2 4 (% rbp ), % rax leaq - 6 0 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 3 : . LBE 4 6 : movq - 6 2 4 (% rbp ), % rax movq % rax , - 4 5 6 (% rbp ) movq $ 1 , - 4 4 8 (% rbp ) movq $ 1 , - 4 4 0 (% rbp ) leaq - 5 7 6 (% rbp ), % rax movq % rax , - 8 0 0 (% rbp ) movq $ 3 , - 7 9 2 (% rbp ) movq $ 3 , - 7 8 4 (% rbp ) . LBB 4 7 : movq $ 0 , - 8 8 0 (% rbp ) movq $ 0 , - 8 7 2 (% rbp ) movq $ 0 , - 8 6 4 (% rbp ) movq $ 0 , - 8 5 6 (% rbp ) movq $ 0 , - 8 4 8 (% rbp ) movq $ 0 , - 8 4 0 (% rbp ) . LBB 4 8 : . LBB 4 9 : . LBB 5 0 : movq - 8 0 0 (% rbp ), % rax movq - 7 9 2 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 7 6 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 5 0 : jmp . L 8 4 . L 1 0 4 : . LBB 5 1 : nop . LBE 5 1 : . LBB 5 2 : . LBB 5 3 : movq - 3 7 6 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 8 5 cmpq % rax , % r 1 2 jge . L 8 5 movq - 3 8 4 (% rbp ), % rcx movq % r 1 2 , % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 4 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq 3 2 (% rcx ), % rax movq 4 0 (% rcx ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) . LBE 5 3 : . LBB 5 4 : movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 8 8 0 (% rbp ) movq % rdx , - 8 7 2 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq % rax , - 8 6 4 (% rbp ) movq % rdx , - 8 5 6 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 8 4 8 (% rbp ) movq % rdx , - 8 4 0 (% rbp ) . LBE 5 4 : . LBB 5 5 : leaq - 8 3 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 6 4 (% rbp ) pushq - 8 7 2 (% rbp ) pushq - 8 8 0 (% rbp ) movq % rax , % rdi call go . leetcode . threeSum addq $ 3 2 , % rsp . LBB 5 6 : leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rax movq % rax , - 9 2 8 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 8 5 6 (% rbp ), % rax movq - 8 4 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 8 4 0 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax je . L 8 6 jmp . L 1 0 2 . L 8 5 : . LBE 5 6 : . LBE 5 5 : . LBB 7 1 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 8 6 : . LBE 7 1 : . LBB 7 2 : . LBB 7 0 : . LBB 5 7 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 5 7 : jmp . L 8 8 . L 1 0 2 : . LBB 5 8 : movq - 2 6 4 (% rbp ), % rcx leaq - 2 5 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 8 : . LBE 5 8 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 9 2 0 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rax movq % rax , - 9 1 2 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 9 6 (% rbp ) movq - 8 3 2 (% rbp ), % rax movq - 8 2 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 8 1 6 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 9 . LBB 5 9 : movq - 2 9 6 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 7 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 5 9 : jmp . L 9 0 . L 8 9 : . LBB 6 0 : movq - 2 9 6 (% rbp ), % rcx leaq - 2 8 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 0 : . LBE 6 0 : movq - 2 9 6 (% rbp ), % rax movq % rax , - 9 0 4 (% rbp ) movq - 9 1 2 (% rbp ), % rax movq - 9 0 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rcx , % rsi movq % rdx , % rax movq - 9 2 8 (% rbp ), % rdx movq - 9 2 0 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT xorl $ 1 , % eax testb % al , % al je . L 9 1 . LBB 6 1 : leaq type ... 6 . 7 int (% rip ), % rax movq % rax , - 9 7 6 (% rbp ) leaq type ... 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq - 8 8 0 (% rbp ), % rax movq - 8 7 2 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 8 6 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 2 . LBB 6 2 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 2 : jmp . L 9 3 . L 9 2 : . LBB 6 3 : movq - 2 3 2 (% rbp ), % rcx leaq - 2 2 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 3 : . LBE 6 3 : movq - 2 3 2 (% rbp ), % rax movq % rax , - 9 6 8 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rax movq % rax , - 9 6 0 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq - 8 3 2 (% rbp ), % rax movq - 8 2 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq - 8 1 6 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 4 . LBB 6 4 : movq - 2 0 0 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 7 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 4 : jmp . L 9 5 . L 9 4 : . LBB 6 5 : movq - 2 0 0 (% rbp ), % rcx leaq - 1 9 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 5 : . LBE 6 5 : movq - 2 0 0 (% rbp ), % rax movq % rax , - 9 5 2 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rax movq % rax , - 9 4 4 (% rbp ) leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 8 (% rbp ) movq - 8 5 6 (% rbp ), % rax movq - 8 4 8 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 8 4 0 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 6 . LBB 6 6 : movq - 1 6 8 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 4 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 6 6 : jmp . L 9 7 . L 9 6 : . LBB 6 7 : movq - 1 6 8 (% rbp ), % rcx leaq - 1 6 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 7 : . LBE 6 7 : movq - 1 6 8 (% rbp ), % rax movq % rax , - 9 3 6 (% rbp ) leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 9 7 6 (% rbp ), % xmm 0 movups % xmm 0 , - 1 2 8 (% rbp ) movdqa - 9 6 0 (% rbp ), % xmm 1 movups % xmm 1 , - 1 1 2 (% rbp ) movdqa - 9 4 4 (% rbp ), % xmm 2 movups % xmm 2 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 8 . LBB 6 8 : movq - 1 3 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 6 8 : jmp . L 9 9 . L 9 8 : . LBB 6 9 : movq - 1 3 6 (% rbp ), % rcx leaq - 1 2 8 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 9 : . LBE 6 9 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 1 2 (% rip ), % r 1 4 movl $ 3 1 , % r 1 5 d movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq - 8 8 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 9 1 : . LBE 6 1 : . LBE 7 0 : . LBE 7 2 : . LBE 5 2 : . LBB 7 3 : addq $ 1 , % r 1 2 . L 8 4 : . LBE 7 3 : cmpq % r 1 3 , % r 1 2 jl . L 1 0 4 . LBE 4 9 : . LBE 4 8 : . LBE 4 7 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 3 movl $ 5 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 3 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 1 2 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 1 6 (% rbp ), % rdx movq - 8 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rdx , % rsi movq % rax , % rdi call main . partition addq $ 3 2 , % rsp movq % rax , - 3 2 (% rbp ) . LBB 7 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 3 2 (% rbp ) jne . L 3 . LBB 8 : . LBB 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 4 cmpq % rax , - 3 2 (% rbp ) jl . L 1 0 . L 4 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 : movq 1 6 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 6 . L 3 : . LBE 9 : . LBE 8 : . LBB 1 0 : . LBB 1 1 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax cmpq % rax , - 3 2 (% rbp ) jge . L 7 . LBB 1 2 : movq - 3 2 (% rbp ), % rax addq $ 1 , % rax movq % rax , - 8 (% rbp ) . LBE 1 2 : jmp . L 2 . L 7 : . LBB 1 3 : movq - 3 2 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 1 6 (% rbp ) . L 2 : . LBE 1 3 : . LBE 1 1 : . LBE 1 0 : . LBE 7 : . LBE 6 : movq - 8 (% rbp ), % rax cmpq - 1 6 (% rbp ), % rax jle . L 1 2 . LBE 4 : . LBE 3 : . LBB 1 4 : movq $ 0 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 6 : . LBE 1 4 : . LBE 2 : leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 2 movl $ 1 5 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 2 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 3 6 , % rsp . LBB 2 : movq 2 4 (% rbp ), % rax cmpq $ 1 , % rax jle . L 3 9 . LBE 2 : leaq go . leetcode 0 0 3 1 . nextPermutation .. func 1 (% rip ), % rdx leaq 1 6 (% rbp ), % rcx movq $ 0 , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq % rax , - 1 2 0 (% rbp ) movq - 1 2 0 (% rbp ), % rax movq % rdx , (% rax ) movq % rcx , 8 (% rax ) movq - 1 2 0 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq $- 1 , - 2 4 (% rbp ) . LBB 4 : movq 2 4 (% rbp ), % rax subq $ 2 , % rax movq % rax , - 4 0 (% rbp ) . LBB 5 : jmp . L 4 . L 4 0 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 5 cmpq % rax , - 4 0 (% rbp ) jl . L 2 9 . L 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq - 4 0 (% rbp ), % rax addq $ 1 , % rax movq 2 4 (% rbp ), % rdx testq % rax , % rax js . L 7 cmpq % rdx , % rax jl . L 3 0 . L 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq 1 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq 1 6 (% rbp ), % rcx salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jge . L 9 . LBB 9 : movq - 4 0 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) jmp . L 1 0 . L 9 : . LBE 9 : . LBE 8 : . LBE 7 : . LBB 1 0 : subq $ 1 , - 4 0 (% rbp ) . L 4 : . LBE 1 0 : cmpq $ 0 , - 4 0 (% rbp ) jns . L 4 0 . L 1 0 : . LBE 5 : . LBE 4 : . LBB 1 1 : cmpq $- 1 , - 2 4 (% rbp ) jne . L 1 2 . LBB 1 2 : movq 2 4 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rcx leaq - 1 (% rdx ), % rax movq - 5 6 (% rbp ), % r 1 0 movq % rax , % rsi movl $ 0 , % edi call *% rcx . LVL 1 : jmp . L 1 . L 1 2 : . LBE 1 2 : . LBE 1 1 : movq $ 0 , - 3 2 (% rbp ) . LBB 1 3 : movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 4 8 (% rbp ) . LBB 1 4 : jmp . L 1 3 . L 4 1 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 4 cmpq % rax , - 4 8 (% rbp ) jl . L 3 2 . L 1 4 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 6 cmpq % rax , - 2 4 (% rbp ) jl . L 3 3 . L 1 6 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : movq 1 6 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx jle . L 1 8 . LBB 1 8 : movq - 4 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) jmp . L 1 9 . L 1 8 : . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 1 9 : subq $ 1 , - 4 8 (% rbp ) . L 1 3 : . LBE 1 9 : cmpq $ 0 , - 4 8 (% rbp ) jns . L 4 1 . L 1 9 : . LBE 1 4 : . LBE 1 3 : . LBB 2 0 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 2 4 (% rbp ), % rdx movq 1 6 (% rbp ), % rcx movq 2 4 (% rbp ), % rbx movq % rcx , - 8 0 (% rbp ) movq % rbx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 3 2 (% rbp ) js . L 2 1 cmpq % rcx , - 3 2 (% rbp ) jl . L 3 5 . L 2 1 : movq - 3 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq 1 6 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rdi movq 2 4 (% rbp ), % rcx cmpq $ 0 , - 2 4 (% rbp ) js . L 2 3 cmpq % rcx , - 2 4 (% rbp ) jl . L 3 6 . L 2 3 : movq - 2 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq 1 6 (% rbp ), % rsi movq - 2 4 (% rbp ), % rcx salq $ 3 , % rcx addq % rsi , % rcx movq (% rcx ), % rsi movq - 1 0 4 (% rbp ), % rcx testq % rdx , % rdx js . L 2 5 cmpq % rcx , % rdx jl . L 3 7 . L 2 5 : movq % rcx , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 1 1 2 (% rbp ), % rcx salq $ 3 , % rdx addq % rcx , % rdx movq % rdi , (% rdx ) movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 2 7 cmpq % rdx , % rax jl . L 3 8 . L 2 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 8 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rsi , (% rax ) . LBE 2 0 : movq 2 4 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rcx subq $ 1 , % rdx movq - 2 4 (% rbp ), % rax addq $ 1 , % rax movq - 5 6 (% rbp ), % r 1 0 movq % rdx , % rsi movq % rax , % rdi call *% rcx . LVL 2 : jmp . L 1 . L 3 9 : . LBB 2 1 : . LBB 3 : nop . L 1 : . LBE 3 : . LBE 2 1 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 4 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : . LBB 4 : cmpq $ 0 , - 2 4 (% rbp ) sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 . LBB 5 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax sete % al . L 2 : . LBE 5 : . LBE 4 : testb % al , % al je . L 3 . LBB 6 : . LBB 7 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 4 . L 3 : . LBE 7 : . LBE 6 : . LBE 3 : . LBB 8 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rdx movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq (% rax ), % rax cmpq % rax , % rdx jne . L 5 . LBB 9 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 1 6 (% rbp ) movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq 8 (% rax ), % rax movq % rax , - 2 4 (% rbp ) . LBB 1 0 : . LBB 1 1 : jmp . L 6 . L 1 3 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 2 4 (% rbp ) . L 6 : . LBE 1 3 : . LBB 1 4 : cmpq $ 0 , - 2 4 (% rbp ) setne % al testb % al , % al je . L 7 . LBB 1 5 : movq - 2 4 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , - 1 6 (% rbp ) sete % al . L 7 : . LBE 1 5 : . LBE 1 4 : testb % al , % al jne . L 1 3 . LBE 1 1 : . LBE 1 0 : . LBB 1 6 : movq - 2 4 (% rbp ), % rax movq % rax , % rdi call go . leetcode 0 0 8 2 . deleteDuplicates movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 4 . L 5 : . LBE 1 6 : . LBE 9 : . LBE 8 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , % rdi call go . leetcode 0 0 8 2 . deleteDuplicates movq % rax , % rdx movq - 2 4 (% rbp ), % rax addq $ 8 , % rax leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 1 0 . LBB 1 7 : movq % rdx , (% rax ) . LBE 1 7 : jmp . L 1 1 . L 1 0 : . LBB 1 8 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 1 : . LBE 1 8 : . LBB 1 9 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 4 : . LBE 1 9 : . LBE 2 : leave ret
. LFB 0 : leaq - 3 6 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 3 6 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 2 8 , % rsp movq % rdi , - 3 4 4 (% rbp ) movq $ 0 , - 2 7 2 (% rbp ) movq $ 0 , - 2 6 4 (% rbp ) movq $ 0 , - 2 5 6 (% rbp ) . LBB 2 : leaq type ... 6 0 x . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 0 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) call runtime . makemap_small @ PLT movq % rax , - 3 1 2 (% rbp ) leaq go . leetcode 0 4 7 2 . findAllConcatenatedWordsInADict .. func 1 (% rip ), % rdx leaq 1 6 (% rbp ), % rcx movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 1 8 4 (% rbp ) leaq - 1 9 2 (% rbp ), % rax movq % rax , - 1 6 8 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq % rdx , (% rax ) movq % rcx , 8 (% rax ) movq - 1 6 8 (% rbp ), % rbx leaq type ... 6 . 7 string (% rip ), % r 1 2 leaq type ... 6 . 7 string (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 3 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 : jmp . L 3 . L 2 : . LBB 4 : movq - 2 3 2 (% rbp ), % rax leaq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 . 7 string (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 4 : movq - 2 3 2 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , % rsi movq % r 1 3 , % rdi movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rsi , % rcx movq % rdx , % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call sort . Slice @ PLT leaq go . leetcode 0 4 7 2 . findAllConcatenatedWordsInADict .. func 2 (% rip ), % rcx leaq - 3 1 2 (% rbp ), % rdx movq $ 0 , - 1 6 0 (% rbp ) movq $ 0 , - 1 5 2 (% rbp ) leaq - 1 6 0 (% rbp ), % rax movq % rax , - 1 3 6 (% rbp ) movq - 1 3 6 (% rbp ), % rax movq % rcx , (% rax ) movq % rdx , 8 (% rax ) movq - 1 3 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . LBB 5 : movq $ 0 , - 3 3 6 (% rbp ) movq $ 0 , - 3 2 8 (% rbp ) . LBB 6 : . LBB 7 : . LBB 8 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 8 : jmp . L 4 . L 1 5 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : . LBB 1 1 : movq - 1 2 0 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 1 2 8 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 1 1 : . LBB 1 2 : movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : movq - 4 0 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rcx movq - 3 3 6 (% rbp ), % rdx movq - 3 2 8 (% rbp ), % rax movq - 4 0 (% rbp ), % r 1 0 movq % rdx , % rdi movq % rax , % rsi call *% rcx . LVL 1 : testb % al , % al jne . L 6 . LBB 1 5 : jmp . L 7 . L 5 : . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 2 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 2 3 : . LBB 2 4 : . LBB 2 1 : . LBB 2 0 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 8 . LBB 1 6 : movq - 9 6 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq string .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 1 6 : jmp . L 9 . L 8 : . LBB 1 7 : movq - 9 6 (% rbp ), % rcx movq - 8 0 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 9 : . LBE 1 7 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 4 , % rdx addq % rdx , % rax movq - 3 2 8 (% rbp ), % rdx movq % rdx , 8 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 0 . LBB 1 8 : movq - 3 3 6 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 7 . L 1 0 : . LBE 1 8 : . LBB 1 9 : movq - 3 3 6 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 7 : . LBE 1 9 : . LBE 2 0 : . LBE 2 1 : . LBB 2 2 : movq - 3 3 6 (% rbp ), % rax movq - 3 2 8 (% rbp ), % rdx movq - 3 1 2 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapassign_faststr @ PLT . LBE 2 2 : . LBE 2 4 : . LBE 1 0 : . LBB 2 5 : addq $ 1 , % rbx . L 4 : . LBE 2 5 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 7 : . LBE 6 : . LBE 5 : . LBB 2 6 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 3 4 4 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 5 6 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 6 : . LBE 2 : movq - 3 4 4 (% rbp ), % rax addq $ 3 2 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
leaq - 3 9 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 2 movl $ 3 9 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 : ret . L 6 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 4 4 , % rsp movq % rdi , - 3 7 6 (% rbp ) leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 4 4 (% rbp ) leaq . LC 2 7 (% rip ), % r 1 4 movl $ 1 1 , % r 1 5 d movq % r 1 4 , - 3 2 0 (% rbp ) movq % r 1 5 , - 3 1 2 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 3 6 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 4 , - 2 9 6 (% rbp ) movq $ 4 , - 2 8 8 (% rbp ) movq $ 4 , - 2 8 0 (% rbp ) leaq . LC 2 7 (% rip ), % r 1 2 movl $ 1 1 , % r 1 3 d movq % r 1 2 , - 2 7 2 (% rbp ) movq % r 1 3 , - 2 6 4 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 8 (% rbp ) movq - 3 2 8 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 7 , 8 (% rax ) movq $ 9 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 1 , 3 2 (% rax ) movq - 3 2 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq $ 5 , - 2 4 8 (% rbp ) movq $ 5 , - 2 4 0 (% rbp ) movq $ 1 2 , - 2 3 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 8 . LBB 5 0 : movq - 3 4 4 (% rbp ), % rax movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) . LBE 5 0 : jmp . L 4 9 . L 4 8 : . LBB 5 1 : movq - 3 4 4 (% rbp ), % rax leaq - 3 2 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 2 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 9 : . LBE 5 1 : movq - 3 4 4 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq $ 2 , - 3 6 0 (% rbp ) movq $ 2 , - 3 5 2 (% rbp ) . LBB 5 2 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) . LBB 5 3 : . LBB 5 4 : . LBB 5 5 : movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 5 5 : jmp . L 5 0 . L 6 1 : . LBB 5 6 : nop . LBE 5 6 : . LBB 5 7 : . LBB 5 8 : movq - 1 6 8 (% rbp ), % rax testq % rbx , % rbx js . L 5 1 cmpq % rax , % rbx jge . L 5 1 movq - 1 7 6 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 2 4 (% rbp ) movq % rdi , - 2 1 6 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 0 8 (% rbp ) movq % rdi , - 2 0 0 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) . LBE 5 8 : . LBB 5 9 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 5 6 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 5 2 jmp . L 5 9 . L 5 1 : . LBE 5 9 : . LBB 6 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : . LBE 6 2 : . LBB 6 3 : . LBB 6 0 : movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 5 4 . L 5 9 : . LBE 6 0 : . LBB 6 1 : leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 4 : . LBE 6 1 : . LBE 6 3 : . LBB 6 4 : leaq go . Solution . TestSolution 3 .. func 1 (% rip ), % r 1 4 movq - 5 6 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 5 . LBB 6 5 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 6 5 : jmp . L 5 6 . L 5 5 : . LBB 6 6 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 6 : . LBE 6 6 : movq - 8 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 3 7 6 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 6 4 : . LBE 5 7 : . LBB 6 7 : addq $ 1 , % rbx . L 5 0 : . LBE 6 7 : cmpq % r 1 3 , % rbx jl . L 6 1 . LBE 5 4 : . LBE 5 3 : . LBE 5 2 : addq $ 3 4 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 5 5 2 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 2 movl $ 5 5 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 0 4 , % rsp pxor % xmm 0 , % xmm 0 movsd % xmm 0 , - 8 0 (% rbp ) . LBB 2 : movsd . LC 3 (% rip ), % xmm 0 movsd % xmm 0 , - 5 6 (% rbp ) . LBB 3 : movsd . LC 4 (% rip ), % xmm 0 movsd % xmm 0 , - 6 4 (% rbp ) . LBB 4 : jmp . L 2 . L 5 1 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movsd - 6 4 (% rbp ), % xmm 1 movsd . LC 3 (% rip ), % xmm 0 addsd % xmm 1 , % xmm 0 movsd % xmm 0 , - 7 2 (% rbp ) . LBB 8 : jmp . L 3 . L 5 0 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : movsd - 6 4 (% rbp ), % xmm 0 cvttsd 2 siq % xmm 0 , % rax movq % rax , % rdi call strconv . Itoa @ PLT movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movsd - 7 2 (% rbp ), % xmm 0 cvttsd 2 siq % xmm 0 , % rax movq % rax , % rdi call strconv . Itoa @ PLT movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) . LBB 1 1 : movl $ 1 , % ecx movl $ 2 , % esi movq % rsi , - 4 5 6 (% rbp ) movq - 3 9 2 (% rbp ), % rax testq % rsi , % rsi js . L 4 cmpq % rax , % rsi jg . L 4 testq % rcx , % rcx jns . L 5 jmp . L 6 . L 4 : movq % rax , % rsi movq - 4 5 6 (% rbp ), % rdi call runtime . goPanicSliceAlen @ PLT . L 5 : cmpq - 4 5 6 (% rbp ), % rcx jle . L 4 2 . L 6 : movq - 4 5 6 (% rbp ), % rsi movq % rcx , % rdi call runtime . goPanicSliceB @ PLT . L 4 2 : movl $ 0 , % edx movl $ 1 , % edi movq - 4 0 8 (% rbp ), % rax testq % rdi , % rdi js . L 8 cmpq % rax , % rdi jg . L 8 testq % rdx , % rdx jns . L 9 jmp . L 1 0 . L 8 : movq % rax , % rsi call runtime . goPanicSliceAlen @ PLT . L 9 : cmpq % rdi , % rdx jle . L 4 3 . L 1 0 : movq % rdi , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 4 3 : movq - 4 0 0 (% rbp ), % rsi cmpq % rcx , - 4 5 6 (% rbp ) je . L 1 2 movq % rcx , % rax jmp . L 1 3 . L 1 2 : movl $ 0 , % eax . L 1 3 : addq % rsi , % rax movq % rax , % r 1 4 movq - 4 5 6 (% rbp ), % rax subq % rcx , % rax movq % rax , % r 1 5 movq - 4 1 6 (% rbp ), % rcx cmpq % rdx , % rdi je . L 1 4 movq % rdx , % rax jmp . L 1 5 . L 1 4 : movl $ 0 , % eax . L 1 5 : addq % rcx , % rax movq % rax , % r 1 2 movq % rdi , % rax subq % rdx , % rax movq % rax , % r 1 3 movq % r 1 5 , % rdx movq % r 1 3 , % rax cmpq % rax , % rdx jne . L 4 8 movq % r 1 4 , % rdx movq % r 1 2 , % rax cmpq % rax , % rdx je . L 1 7 movq % r 1 3 , % rax movq % rax , % rdx movq % r 1 2 , % rcx movq % r 1 4 , % rax movq % rcx , % rsi movq % rax , % rdi call memcmp @ PLT testl % eax , % eax jne . L 4 8 . L 1 7 : . LBE 1 1 : movl $ 0 , % edx movl $ 1 , % edi movq - 3 9 2 (% rbp ), % rax testq % rdi , % rdi js . L 1 9 cmpq % rax , % rdi jg . L 1 9 testq % rdx , % rdx jns . L 2 0 jmp . L 2 1 . L 1 9 : movq % rax , % rsi call runtime . goPanicSliceAlen @ PLT . L 2 0 : cmpq % rdi , % rdx jg . L 2 1 movq - 4 0 0 (% rbp ), % rcx cmpq % rdx , % rdi jne . L 2 2 jmp . L 4 4 . L 2 1 : movq % rdi , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 2 2 : movq % rdx , % rax jmp . L 2 4 . L 4 4 : movl $ 0 , % eax . L 2 4 : addq % rcx , % rax movq % rax , - 5 1 2 (% rbp ) movq % rdi , % rax subq % rdx , % rax movq % rax , - 5 0 4 (% rbp ) leaq - 2 4 0 (% rbp ), % rdi movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rsi movq % rax , % rdx call strconv . Atoi @ PLT movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) movq - 3 7 6 (% rbp ), % rax movq - 3 6 8 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movl $ 1 , % edx movl $ 2 , % edi movq - 4 0 8 (% rbp ), % rax testq % rdi , % rdi js . L 2 5 cmpq % rax , % rdi jg . L 2 5 testq % rdx , % rdx jns . L 2 6 jmp . L 2 7 . L 2 5 : movq % rax , % rsi call runtime . goPanicSliceAlen @ PLT . L 2 6 : cmpq % rdi , % rdx jg . L 2 7 movq - 4 1 6 (% rbp ), % rcx cmpq % rdx , % rdi jne . L 2 8 jmp . L 4 5 . L 2 7 : movq % rdi , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 2 8 : movq % rdx , % rax jmp . L 3 0 . L 4 5 : movl $ 0 , % eax . L 3 0 : addq % rcx , % rax movq % rax , - 4 9 6 (% rbp ) movq % rdi , % rax subq % rdx , % rax movq % rax , - 4 8 8 (% rbp ) leaq - 2 0 8 (% rbp ), % rdi movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rsi movq % rax , % rdx call strconv . Atoi @ PLT movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 3 4 4 (% rbp ), % rax movq - 3 3 6 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) . LBB 1 3 : . LBB 1 4 : cmpq $ 0 , - 9 6 (% rbp ) sete % dl movl % edx , % eax xorl $ 1 , % eax testb % al , % al je . L 3 1 . LBB 1 5 : cmpq $ 0 , - 8 8 (% rbp ) sete % dl . L 3 1 : . LBE 1 5 : . LBE 1 4 : testb % dl , % dl jne . L 4 9 . LBE 1 3 : pxor % xmm 0 , % xmm 0 cvtsi 2 sdq - 8 8 (% rbp ), % xmm 0 movsd % xmm 0 , - 1 0 4 (% rbp ) pxor % xmm 0 , % xmm 0 cvtsi 2 sdq - 9 6 (% rbp ), % xmm 0 movsd % xmm 0 , - 1 1 2 (% rbp ) . LBB 1 7 : movsd - 6 4 (% rbp ), % xmm 0 divsd - 7 2 (% rbp ), % xmm 0 movsd - 1 0 4 (% rbp ), % xmm 1 divsd - 1 1 2 (% rbp ), % xmm 1 ucomisd % xmm 1 , % xmm 0 jp . L 3 5 ucomisd % xmm 1 , % xmm 0 jne . L 3 5 . LBB 1 8 : leaq float 6 4 .. d (% rip ), % rbx movq % rbx , - 5 4 4 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movsd - 6 4 (% rbp ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 5 3 6 (% rbp ) movq % rbx , - 5 2 8 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq - 2 8 0 (% rbp ), % rax movsd - 7 2 (% rbp ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 2 8 0 (% rbp ), % rax movq % rax , - 5 2 0 (% rbp ) movdqa - 5 4 4 (% rbp ), % xmm 2 movups % xmm 2 , - 2 7 2 (% rbp ) movdqa - 5 2 8 (% rbp ), % xmm 3 movups % xmm 3 , - 2 5 6 (% rbp ) leaq - 2 7 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 2 , - 1 6 8 (% rbp ) movq $ 2 , - 1 6 0 (% rbp ) leaq . LC 5 (% rip ), % rax movq % rax , - 4 8 0 (% rbp ) movq $ 1 0 , - 4 7 2 (% rbp ) leaq - 1 4 4 (% rbp ), % rdi movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdx call fmt . Printf @ PLT addq $ 3 2 , % rsp movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movsd - 6 4 (% rbp ), % xmm 0 divsd - 7 2 (% rbp ), % xmm 0 mulsd - 5 6 (% rbp ), % xmm 0 movsd % xmm 0 , - 5 6 (% rbp ) jmp . L 3 5 . L 4 8 : . LBE 1 8 : . LBE 1 7 : . LBB 1 9 : . LBB 1 2 : nop jmp . L 3 5 . L 4 9 : . LBE 1 2 : . LBE 1 9 : . LBB 2 0 : . LBB 1 6 : nop . L 3 5 : . LBE 1 6 : . LBE 2 0 : . LBE 1 0 : . LBB 2 1 : movsd - 7 2 (% rbp ), % xmm 1 movsd . LC 3 (% rip ), % xmm 0 addsd % xmm 1 , % xmm 0 movsd % xmm 0 , - 7 2 (% rbp ) . L 3 : . LBE 2 1 : movsd . LC 6 (% rip ), % xmm 0 comisd - 7 2 (% rbp ), % xmm 0 setnb % al testb % al , % al jne . L 5 0 . LBE 8 : . LBE 7 : . LBE 6 : . LBB 2 2 : movsd - 6 4 (% rbp ), % xmm 1 movsd . LC 3 (% rip ), % xmm 0 addsd % xmm 1 , % xmm 0 movsd % xmm 0 , - 6 4 (% rbp ) . L 2 : . LBE 2 2 : movsd . LC 6 (% rip ), % xmm 0 comisd - 6 4 (% rbp ), % xmm 0 seta % al testb % al , % al jne . L 5 1 . LBE 4 : . LBE 3 : . LBB 2 3 : movsd - 5 6 (% rbp ), % xmm 0 movsd % xmm 0 , - 8 0 (% rbp ) movsd - 8 0 (% rbp ), % xmm 0 movq % xmm 0 , % rax . LBE 2 3 : . LBE 2 : movq % rax , % xmm 0 leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 4 movl $ 3 4 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 4 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 3 2 8 , % rsp movq % rdi , - 3 2 8 (% rbp ) movb $ 0 , - 3 3 (% rbp ) . LBB 2 : movq $ 0 , - 3 0 4 (% rbp ) movq $ 0 , - 2 9 6 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movq $ 1 , - 3 2 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 6 4 (% rbp ), % rbx movq - 3 2 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 2 3 2 (% rbp ) leaq 1 (% rbx ), % rax movq - 2 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 . LBB 3 : movq - 2 7 2 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq main .. main . withNo .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 3 : jmp . L 3 . L 2 : . LBB 4 : movq - 2 7 2 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 3 : . LBE 4 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx leaq (% rax ,% rdx ), % rcx leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 . LBB 5 : movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) jmp . L 6 . L 4 : . LBE 5 : . LBB 6 : leaq - 2 4 0 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq main .. main . withNo .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . LBE 6 : . LBB 7 : . LBB 8 : jmp . L 6 . L 2 3 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : movq - 2 9 6 (% rbp ), % rax testq % rax , % rax jg . L 7 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 7 : movq - 3 0 4 (% rbp ), % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) . LBB 1 1 : movq - 2 4 (% rbp ), % rax leaq 1 (% rax ), % rdx movq - 3 1 2 (% rbp ), % rax cmpq % rax , % rdx je . L 8 . LBB 1 2 : . LBB 1 3 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 2 1 . L 8 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : movq - 2 8 8 (% rbp ), % rax testq % rax , % rax jg . L 1 0 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicSliceB @ PLT . L 1 0 : movq - 3 0 4 (% rbp ), % rdx movq - 2 8 8 (% rbp ), % rax cmpq $ 1 , % rax setne % al movzbl % al , % eax salq $ 4 , % rax leaq (% rdx ,% rax ), % rcx movq - 2 9 6 (% rbp ), % rax leaq - 1 (% rax ), % rdx movq - 2 8 8 (% rbp ), % rax subq $ 1 , % rax movq % rcx , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq % rax , - 2 8 8 (% rbp ) addq $ 1 , - 3 2 (% rbp ) . LBB 1 4 : movq - 3 2 0 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax je . L 1 1 . LBB 1 5 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rbx movq - 3 2 0 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 1 8 4 (% rbp ) leaq 1 (% rbx ), % rax movq - 2 0 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 2 . LBB 1 6 : movq - 2 2 4 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq main .. main . withNo .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 1 6 : jmp . L 1 3 . L 1 2 : . LBB 1 7 : movq - 2 2 4 (% rbp ), % rcx movq - 2 0 8 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 1 3 : . LBE 1 7 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx leaq (% rax ,% rdx ), % rcx leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 4 . LBB 1 8 : movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) jmp . L 1 1 . L 1 4 : . LBE 1 8 : . LBB 1 9 : leaq - 1 9 2 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq main .. main . withNo .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 1 : . LBE 1 9 : . LBE 1 5 : . LBE 1 4 : addq $ 1 , - 3 2 (% rbp ) . LBB 2 0 : movq - 3 2 0 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax je . L 1 5 . LBB 2 1 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rbx movq - 3 2 0 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 1 3 6 (% rbp ) leaq 1 (% rbx ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 6 . LBB 2 2 : movq - 1 7 6 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq main .. main . withNo .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 2 2 : jmp . L 1 7 . L 1 6 : . LBB 2 3 : movq - 1 7 6 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 1 7 : . LBE 2 3 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx leaq (% rax ,% rdx ), % rcx leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 8 . LBB 2 4 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) jmp . L 1 5 . L 1 8 : . LBE 2 4 : . LBB 2 5 : leaq - 1 4 4 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq main .. main . withNo .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 5 : . LBE 2 5 : . LBE 2 1 : . LBE 2 0 : movq - 3 1 2 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . L 6 : . LBE 1 0 : movq - 2 9 6 (% rbp ), % rax testq % rax , % rax jg . L 2 3 . LBE 8 : . LBE 7 : . LBB 2 6 : movb $ 1 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax . L 2 1 : . LBE 2 6 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 3 movl $ 1 3 6 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 3 : pushq % rbp movq % rsp , % rbp addq $- 1 2 8 , % rsp movq % rdi , - 1 2 0 (% rbp ) movq % rsi , - 1 2 8 (% rbp ) movq 3 2 (% rbp ), % rax cmpq $ 0 , - 1 2 8 (% rbp ) js . L 2 cmpq % rax , - 1 2 8 (% rbp ) jle . L 2 4 . L 2 : movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 2 4 : movq 1 6 (% rbp ), % rdx movq 3 2 (% rbp ), % rax cmpq % rax , - 1 2 8 (% rbp ) je . L 4 movq - 1 2 8 (% rbp ), % rax salq $ 3 , % rax jmp . L 5 . L 4 : movl $ 0 , % eax . L 5 : addq % rdx , % rax movq % rax , - 1 1 2 (% rbp ) movq 2 4 (% rbp ), % rax subq - 1 2 8 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) movq 3 2 (% rbp ), % rax subq - 1 2 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rax movq 2 4 (% rbp ), % rdx cmpq % rax , % rdx cmovle % rdx , % rax leaq 0 (,% rax , 8 ), % rdx movq 1 6 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memmove @ PLT movq $ 0 , - 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 1 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 : . LBB 3 : jmp . L 6 . L 3 2 : . LBB 4 : nop . LBE 4 : . LBB 5 : . LBB 6 : . LBB 7 : movq - 1 2 0 (% rbp ), % rdx movq - 1 2 8 (% rbp ), % rax addq % rdx , % rax cmpq % rax , - 1 6 (% rbp ) setl % al testb % al , % al je . L 7 . LBB 8 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 8 cmpq % rax , - 1 6 (% rbp ) jl . L 2 5 . L 8 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 5 : movq 4 8 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 0 cmpq % rax , - 2 4 (% rbp ) jl . L 2 6 . L 1 0 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 6 : movq 1 6 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 4 0 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax cmpq % rax , % rdx setl % al . L 7 : . LBE 8 : . LBE 7 : testb % al , % al je . L 1 2 . LBB 9 : . LBB 1 0 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 8 (% rbp ), % rax movq 2 4 (% rbp ), % rdx cmpq $ 0 , - 1 6 (% rbp ) js . L 1 3 cmpq % rdx , - 1 6 (% rbp ) jl . L 2 7 . L 1 3 : movq - 1 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 7 : movq 1 6 (% rbp ), % rcx movq - 1 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 1 6 (% rbp ), % rdx leaq 1 (% rdx ), % rsi movq - 7 2 (% rbp ), % rdx testq % rax , % rax js . L 1 5 cmpq % rdx , % rax jl . L 2 8 . L 1 5 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 8 : movq - 8 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rcx , (% rax ) movq % rsi , - 1 6 (% rbp ) . LBE 1 0 : . LBE 9 : jmp . L 1 7 . L 1 2 : . LBB 1 1 : . LBB 1 2 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 4 8 (% rbp ) movq % rdx , - 4 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 8 (% rbp ), % rax movq 4 8 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) js . L 1 8 cmpq % rdx , - 2 4 (% rbp ) jl . L 2 9 . L 1 8 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 2 9 : movq 4 0 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 2 4 (% rbp ), % rdx leaq 1 (% rdx ), % rsi movq - 4 0 (% rbp ), % rdx testq % rax , % rax js . L 2 0 cmpq % rdx , % rax jl . L 3 0 . L 2 0 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 0 : movq - 4 8 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq % rcx , (% rax ) movq % rsi , - 2 4 (% rbp ) . L 1 7 : . LBE 1 2 : . LBE 1 1 : . LBE 6 : addq $ 1 , - 8 (% rbp ) . L 6 : . LBE 5 : movq - 2 4 (% rbp ), % rax cmpq - 1 2 8 (% rbp ), % rax jl . L 3 2 . LBE 3 : . LBE 2 : leave ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 1 movl $ 1 6 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 3 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 1 4 4 , % rsp movq % rdi , - 1 5 2 (% rbp ) movq % rsi , - 1 6 0 (% rbp ) movq $ 0 , - 1 1 2 (% rbp ) movq $ 0 , - 1 0 4 (% rbp ) . LBB 1 6 : . LBB 1 7 : cmpq $ 1 , - 1 5 2 (% rbp ) jne . L 1 4 . LBB 1 8 : . LBB 1 9 : leaq . LC 3 8 (% rip ), % rax movl $ 1 0 , % edx movq % rax , % rcx movq % rdx , % rbx movl $ 0 , % eax movq % rbx , % rdx cmpq $ 0 , - 1 6 0 (% rbp ) js . L 1 5 cmpq % rdx , - 1 6 0 (% rbp ) jg . L 1 5 testq % rax , % rax jns . L 1 6 jmp . L 1 7 . L 1 5 : movq - 1 6 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceAlen @ PLT . L 1 6 : cmpq - 1 6 0 (% rbp ), % rax jg . L 1 7 cmpq % rax , - 1 6 0 (% rbp ) jne . L 1 8 jmp . L 2 8 . L 1 7 : movq - 1 6 0 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 1 8 : movq % rax , % rdx jmp . L 2 0 . L 2 8 : movl $ 0 , % edx . L 2 0 : addq % rdx , % rcx movq - 1 6 0 (% rbp ), % rdx subq % rax , % rdx movq % rcx , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx jmp . L 2 7 . L 1 4 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : movl $ 0 , % r 8 d movl $ 1 6 , % ecx movl $ 2 4 , % edx movl $ 0 , % esi leaq type .. map . 6 string . 7 bool (% rip ), % rdi call __go_construct_map @ PLT movq % rax , - 1 2 0 (% rbp ) pxor % xmm 0 , % xmm 0 cvtsi 2 sdq - 1 5 2 (% rbp ), % xmm 0 pxor % xmm 2 , % xmm 2 cvtsi 2 sdq - 1 6 0 (% rbp ), % xmm 2 movq % xmm 2 , % rax movapd % xmm 0 , % xmm 1 movq % rax , % xmm 0 call math . Pow @ PLT cvttsd 2 siq % xmm 0 , % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rdx movq - 1 5 2 (% rbp ), % rax addq % rdx , % rax leaq - 1 (% rax ), % rbx movq % rbx , % rdx movl $ 0 , % esi leaq uint 8 .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 4 4 (% rbp ) movq $ 0 , - 1 3 6 (% rbp ) movq % rbx , - 1 2 8 (% rbp ) . LBB 2 0 : movq $ 1 , - 2 4 (% rbp ) . LBB 2 1 : jmp . L 2 2 . L 3 0 : . LBB 2 2 : nop . LBE 2 2 : . LBB 2 3 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % rbx movl $ 4 8 , % r 1 2 d leaq 1 (% rbx ), % rax movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 3 . LBB 2 4 : movq - 9 6 (% rbp ), % rsi leaq - 6 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq uint 8 .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) . LBE 2 4 : jmp . L 2 4 . L 2 3 : . LBB 2 5 : movq - 9 6 (% rbp ), % rcx movq - 8 0 (% rbp ), % rdx movq % rcx , - 1 4 4 (% rbp ) movq % rax , - 1 3 6 (% rbp ) movq % rdx , - 1 2 8 (% rbp ) . L 2 4 : . LBE 2 5 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movb % r 1 2 b , (% rax ) . LBE 2 3 : . LBB 2 6 : addq $ 1 , - 2 4 (% rbp ) . L 2 2 : . LBE 2 6 : movq - 2 4 (% rbp ), % rax cmpq - 1 5 2 (% rbp ), % rax jne . L 3 0 . LBE 2 1 : . LBE 2 0 : leaq - 1 2 0 (% rbp ), % rdi leaq - 1 4 4 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rdx movq - 1 5 2 (% rbp ), % rsi movq - 3 2 (% rbp ), % rax movq % rdi , % r 8 movq % rax , % rdi call go . leetcode . dfsCrackSafe . LBB 2 7 : subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movl $ 0 , % edi call runtime . slicebytetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx . L 2 7 : . LBE 2 7 : . LBE 1 6 : leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 2 9 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 1 movl $ 2 9 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 4 8 , % rsp leaq type .. chan . 0 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rbx movl $ 0 , % esi leaq type .. chan . 0 int (% rip ), % rdi call runtime . makechan @ PLT leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 2 . LBB 2 : movq % rax , (% rbx ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . gcWriteBarrier @ PLT . L 3 : . LBE 3 : leaq type .. chan . 0 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rbx movl $ 0 , % esi leaq type .. chan . 0 int (% rip ), % rdi call runtime . makechan @ PLT leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 4 . LBB 4 : movq % rax , (% rbx ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . gcWriteBarrier @ PLT . L 5 : . LBE 5 : . LBB 6 : leaq main . main .. func 1 (% rip ), % r 1 4 movq - 5 6 (% rbp ), % rbx leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . main . naturals 1 . 0 . 1 chan . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 8 0 (% rbp ) movq % r 1 4 , - 2 7 2 (% rbp ) movq % rbx , - 2 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 7 : movq - 2 8 0 (% rbp ), % rcx movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 7 : jmp . L 7 . L 6 : . LBB 8 : movq - 2 8 0 (% rbp ), % rax leaq - 2 7 2 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . main . naturals 1 . 0 . 1 chan . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 8 : movq - 2 8 0 (% rbp ), % rbx testq % rbx , % rbx jne . L 8 call runtime . panicgonil @ PLT . L 8 : leaq type .. struct . 4 . 4 x . 5 fn . 0 func . 8 . 9 . 8 . 9 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq % rbx , - 2 4 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 9 : movq - 2 4 8 (% rbp ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 9 : jmp . L 1 0 . L 9 : . LBB 1 0 : movq - 2 4 0 (% rbp ), % rax movq % rax , % rdx movq - 2 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 0 : . LBE 1 0 : movq - 2 4 8 (% rbp ), % rax leaq main . main .. thunk 0 (% rip ), % rdx movq % rax , % rsi movq % rdx , % rdi call __go_go @ PLT . LBE 6 : . LBB 1 1 : leaq main . main .. func 2 (% rip ), % r 1 5 movq - 5 6 (% rbp ), % r 1 4 movq - 6 4 (% rbp ), % rbx leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . main . naturals 1 . 0 . 1 chan . 0 int . 2 . main . squares 2 . 0 . 1 chan . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 3 2 (% rbp ) movq % r 1 5 , - 2 2 4 (% rbp ) movq % r 1 4 , - 2 1 6 (% rbp ) movq % rbx , - 2 0 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 . LBB 1 2 : movq - 2 3 2 (% rbp ), % rcx movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 0 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 2 : jmp . L 1 2 . L 1 1 : . LBB 1 3 : movq - 2 3 2 (% rbp ), % rax leaq - 2 2 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . main . naturals 1 . 0 . 1 chan . 0 int . 2 . main . squares 2 . 0 . 1 chan . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 2 : . LBE 1 3 : movq - 2 3 2 (% rbp ), % rbx testq % rbx , % rbx jne . L 1 3 call runtime . panicgonil @ PLT . L 1 3 : leaq type .. struct . 4 . 4 x . 5 fn . 0 func . 8 . 9 . 8 . 9 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 0 0 (% rbp ) movq % rbx , - 1 9 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 4 . LBB 1 4 : movq - 2 0 0 (% rbp ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rdx , (% rax ) . LBE 1 4 : jmp . L 1 5 . L 1 4 : . LBB 1 5 : movq - 1 9 2 (% rbp ), % rax movq % rax , % rdx movq - 2 0 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 5 : . LBE 1 5 : movq - 2 0 0 (% rbp ), % rax leaq main . main .. thunk 1 (% rip ), % rdx movq % rax , % rsi movq % rdx , % rdi call __go_go @ PLT . LBE 1 1 : . LBB 1 6 : movq $ 0 , - 7 2 (% rbp ) . L 1 8 : . LBB 1 7 : . LBB 1 8 : . LBB 1 9 : . LBB 2 0 : . LBB 2 1 : movq - 6 4 (% rbp ), % rax movq (% rax ), % rax leaq - 1 8 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . chanrecv 2 @ PLT movl % eax , % edx movq - 1 8 4 (% rbp ), % rax . LBE 2 1 : xorl $ 1 , % edx testb % dl , % dl jne . L 2 0 . LBE 2 0 : movq % rax , - 7 2 (% rbp ) . LBB 2 3 : leaq int .. d (% rip ), % r 1 2 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 1 5 2 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rax , % r 1 3 movq % r 1 2 , - 1 4 4 (% rbp ) movq % r 1 3 , - 1 3 6 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) leaq - 9 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) . LBE 2 3 : . LBE 1 9 : jmp . L 1 8 . L 2 0 : . LBB 2 5 : . LBB 2 4 : . LBB 2 2 : nop . LBE 2 2 : . LBE 2 4 : . LBE 2 5 : . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 1 1 8 movl $ 2 3 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 4 : ret . L 1 1 8 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 8 4 , % rsp movq % rdi , - 2 0 0 (% rbp ) movl $ 1 0 0 0 0 0 0 0 0 0 , % edi call go . ewma . NewEwmaRate movq % rax , - 5 6 (% rbp ) . LBB 1 2 5 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call go . ewma . EwmaRate . CurrentNow movq % xmm 0 , % rax pxor % xmm 0 , % xmm 0 movq % rax , % xmm 2 ucomisd % xmm 0 , % xmm 2 jp . L 1 1 7 pxor % xmm 0 , % xmm 0 movq % rax , % xmm 3 comisd % xmm 0 , % xmm 3 je . L 1 0 9 . L 1 1 7 : . LBB 1 2 6 : leaq string .. d (% rip ), % r 1 4 leaq go .. C 1 4 7 (% rip ), % r 1 5 leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq % r 1 4 , - 1 7 6 (% rbp ) movq % r 1 5 , - 1 6 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 1 . LBB 1 2 7 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 2 7 : jmp . L 1 1 2 . L 1 1 1 : . LBB 1 2 8 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 1 2 : . LBE 1 2 8 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) movq - 2 0 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rax , % rdi call testing . T . Error .. stub @ PLT addq $ 3 2 , % rsp . L 1 0 9 : . LBE 1 2 6 : . LBE 1 2 5 : movq - 5 6 (% rbp ), % rax movq % rax , % rdi call go . ewma . EwmaRate . UpdateNow movq - 5 6 (% rbp ), % rax movq % rax , % rdi call go . ewma . EwmaRate . CurrentNow movq % xmm 0 , % rax movq % rax , - 6 4 (% rbp ) . LBB 1 2 9 : . LBB 1 3 0 : movsd - 6 4 (% rbp ), % xmm 0 pxor % xmm 1 , % xmm 1 comisd % xmm 1 , % xmm 0 setnb % al testb % al , % al je . L 1 1 3 . LBB 1 3 1 : movsd . LC 6 3 (% rip ), % xmm 0 comisd - 6 4 (% rbp ), % xmm 0 seta % al . L 1 1 3 : . LBE 1 3 1 : . LBE 1 3 0 : xorl $ 1 , % eax testb % al , % al je . L 1 0 8 . LBB 1 3 2 : leaq float 6 4 .. d (% rip ), % rax movq % rax , - 2 2 4 (% rbp ) leaq float 6 4 .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 6 0 (% rbp ) movq - 1 6 0 (% rbp ), % rax movsd - 6 4 (% rbp ), % xmm 0 movsd % xmm 0 , (% rax ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 2 1 6 (% rbp ) leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movdqa - 2 2 4 (% rbp ), % xmm 4 movups % xmm 4 , - 1 4 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 1 1 5 . LBB 1 3 3 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 3 3 : jmp . L 1 1 6 . L 1 1 5 : . LBB 1 3 4 : movq - 1 5 2 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 1 6 : . LBE 1 3 4 : movq - 1 5 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq . LC 6 4 (% rip ), % r 1 2 movl $ 1 8 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq - 2 0 0 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 1 0 8 : . LBE 1 3 2 : . LBE 1 2 9 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 3 1 0 : leaq - 6 4 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 7 8 5 movl $ 6 4 8 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 3 8 4 : ret . L 7 7 8 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 6 1 6 , % rsp movq $ 0 , - 6 4 (% rbp ) . LBB 6 4 1 6 : movq $ 0 , - 5 4 4 (% rbp ) movq $ 1 , - 5 3 6 (% rbp ) movq $ 1 , - 5 2 8 (% rbp ) movq $ 0 , - 5 2 0 (% rbp ) movq $ 0 , - 5 1 2 (% rbp ) movq $- 1 , - 5 0 4 (% rbp ) movq $- 1 , - 4 9 6 (% rbp ) movq $ 0 , - 4 8 8 (% rbp ) leaq - 5 4 4 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq $ 2 , - 4 7 2 (% rbp ) movq $ 2 , - 4 6 4 (% rbp ) leaq - 5 2 8 (% rbp ), % rax movq % rax , - 4 5 6 (% rbp ) movq $ 2 , - 4 4 8 (% rbp ) movq $ 2 , - 4 4 0 (% rbp ) leaq - 5 1 2 (% rbp ), % rax movq % rax , - 4 3 2 (% rbp ) movq $ 2 , - 4 2 4 (% rbp ) movq $ 2 , - 4 1 6 (% rbp ) leaq - 4 9 6 (% rbp ), % rax movq % rax , - 4 0 8 (% rbp ) movq $ 2 , - 4 0 0 (% rbp ) movq $ 2 , - 3 9 2 (% rbp ) leaq - 4 8 0 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) movq $ 4 , - 5 6 8 (% rbp ) movq $ 4 , - 5 6 0 (% rbp ) movq $ 0 , - 4 0 (% rbp ) call runtime . makemap_small @ PLT movq % rax , - 7 2 (% rbp ) . LBB 6 4 1 7 : movq $ 0 , - 6 2 4 (% rbp ) movq $ 0 , - 6 1 6 (% rbp ) movq $ 0 , - 6 0 8 (% rbp ) . LBB 6 4 1 8 : . LBB 6 4 1 9 : . LBB 6 4 2 0 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 3 3 6 (% rbp ) movq - 3 4 4 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 4 2 0 : jmp . L 7 7 4 8 . L 7 7 8 1 : . LBB 6 4 2 1 : nop . LBE 6 4 2 1 : . LBB 6 4 2 2 : . LBB 6 4 2 3 : movq - 3 4 4 (% rbp ), % rax testq % rbx , % rbx js . L 7 7 4 9 cmpq % rax , % rbx jge . L 7 7 4 9 movq - 3 5 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 6 8 (% rbp ) . LBE 6 4 2 3 : . LBB 6 4 2 4 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 6 0 8 (% rbp ) . LBE 6 4 2 4 : . LBB 6 4 2 5 : . LBB 6 4 2 6 : movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 8 0 (% rbp ), % rax testq % rax , % rax jg . L 7 7 5 0 jmp . L 7 7 7 4 . L 7 7 4 9 : . LBE 6 4 2 6 : . LBE 6 4 2 5 : . LBB 6 4 2 8 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 7 7 7 4 : . LBE 6 4 2 8 : . LBB 6 4 2 9 : . LBB 6 4 2 7 : movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 7 7 5 0 : movq - 2 4 8 (% rbp ), % rax cmpq $ 1 , % rax jg . L 7 7 5 2 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 7 7 5 2 : movq - 2 8 8 (% rbp ), % rax movq (% rax ), % rdx movq - 2 5 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rdx , - 2 2 4 (% rbp ) movq % rax , - 2 1 6 (% rbp ) movl $ 1 , % r 1 3 d leaq - 2 2 4 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 . 6 2 . 7 int . 7 bool (% rip ), % rdi call runtime . mapassign @ PLT movb % r 1 3 b , (% rax ) . LBE 6 4 2 7 : . LBE 6 4 2 9 : . LBE 6 4 2 2 : . LBB 6 4 3 0 : addq $ 1 , % rbx . L 7 7 4 8 : . LBE 6 4 3 0 : cmpq % r 1 2 , % rbx jl . L 7 7 8 1 . LBE 6 4 1 9 : . LBE 6 4 1 8 : . LBE 6 4 1 7 : movq $ 0 , - 5 9 2 (% rbp ) movq $ 0 , - 5 8 4 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 6 4 3 1 : movq $ 0 , - 8 0 (% rbp ) . LBB 6 4 3 2 : . LBB 6 4 3 3 : . LBB 6 4 3 4 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 4 3 4 : jmp . L 7 7 5 5 . L 7 7 8 4 : . LBB 6 4 3 5 : nop . LBE 6 4 3 5 : . LBB 6 4 3 6 : . LBB 6 4 3 7 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 7 7 5 6 cmpq % rax , % rbx jge . L 7 7 5 6 movq - 2 0 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 6 4 3 7 : . LBB 6 4 3 8 : movq % rax , - 8 0 (% rbp ) . LBE 6 4 3 8 : . LBB 6 4 3 9 : . LBB 6 4 4 0 : cmpq $- 1 , - 8 0 (% rbp ) je . L 7 7 5 7 jmp . L 7 7 7 6 . L 7 7 5 6 : . LBE 6 4 4 0 : . LBE 6 4 3 9 : . LBB 6 4 5 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 7 7 5 7 : . LBE 6 4 5 7 : . LBB 6 4 5 8 : . LBB 6 4 5 6 : . LBB 6 4 4 1 : movq - 4 0 (% rbp ), % rax addq $ 1 , % rax cqto shrq $ 6 2 , % rdx addq % rdx , % rax andl $ 3 , % eax subq % rdx , % rax movq % rax , - 4 0 (% rbp ) . LBE 6 4 4 1 : jmp . L 7 7 5 9 . L 7 7 7 6 : . LBB 6 4 4 2 : . LBB 6 4 4 3 : cmpq $- 2 , - 8 0 (% rbp ) jne . L 7 7 6 0 . LBB 6 4 4 4 : movq - 4 0 (% rbp ), % rax addq $ 3 , % rax cqto shrq $ 6 2 , % rdx addq % rdx , % rax andl $ 3 , % eax subq % rdx , % rax movq % rax , - 4 0 (% rbp ) . LBE 6 4 4 4 : jmp . L 7 7 5 9 . L 7 7 6 0 : . LBB 6 4 4 5 : . LBB 6 4 4 6 : movq $ 0 , - 5 6 (% rbp ) . LBB 6 4 4 7 : jmp . L 7 7 6 1 . L 7 7 8 3 : . LBB 6 4 4 8 : nop . LBE 6 4 4 8 : . LBB 6 4 4 9 : movq - 5 6 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 7 7 6 2 cmpq % rax , - 4 0 (% rbp ) jl . L 7 7 7 7 . L 7 7 6 2 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 7 7 7 : movq - 5 7 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rax testq % rax , % rax jg . L 7 7 6 4 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 7 7 6 4 : movq - 5 6 8 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 7 7 6 5 cmpq % rax , - 4 0 (% rbp ) jl . L 7 7 7 8 . L 7 7 6 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 7 7 7 8 : movq - 5 7 6 (% rbp ), % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rax cmpq $ 1 , % rax jg . L 7 7 6 7 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 7 7 6 7 : movq - 5 9 2 (% rbp ), % rdx movq - 1 7 6 (% rbp ), % rax movq (% rax ), % rax addq % rax , % rdx movq - 5 8 4 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax addq $ 8 , % rax movq (% rax ), % rax addq % rcx , % rax movq % rdx , - 6 4 0 (% rbp ) movq % rax , - 6 3 2 (% rbp ) . LBB 6 4 5 0 : movb $ 0 , - 8 1 (% rbp ) . LBB 6 4 5 1 : movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) leaq - 1 1 2 (% rbp ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 . 6 2 . 7 int . 7 bool (% rip ), % rdi call runtime . mapaccess 2 @ PLT movl % edx , % eax movb % al , - 8 1 (% rbp ) . LBE 6 4 5 1 : cmpb $ 0 , - 8 1 (% rbp ) jne . L 7 7 8 2 . LBE 6 4 5 0 : movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq - 5 9 2 (% rbp ), % rdx movq - 5 9 2 (% rbp ), % rax movq % rdx , % rcx imulq % rax , % rcx movq - 5 8 4 (% rbp ), % rdx movq - 5 8 4 (% rbp ), % rax imulq % rdx , % rax addq % rcx , % rax movq % rax , - 9 6 (% rbp ) pxor % xmm 0 , % xmm 0 cvtsi 2 sdq - 9 6 (% rbp ), % xmm 0 pxor % xmm 2 , % xmm 2 cvtsi 2 sdq - 4 8 (% rbp ), % xmm 2 movq % xmm 2 , % rax movapd % xmm 0 , % xmm 1 movq % rax , % xmm 0 call math . Max @ PLT cvttsd 2 siq % xmm 0 , % rax movq % rax , - 4 8 (% rbp ) . LBE 6 4 4 9 : . LBB 6 4 5 4 : addq $ 1 , - 5 6 (% rbp ) . L 7 7 6 1 : . LBE 6 4 5 4 : movq - 5 6 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jl . L 7 7 8 3 jmp . L 7 7 5 9 . L 7 7 8 2 : . LBB 6 4 5 5 : . LBB 6 4 5 3 : . LBB 6 4 5 2 : nop . L 7 7 5 9 : . LBE 6 4 5 2 : . LBE 6 4 5 3 : . LBE 6 4 5 5 : . LBE 6 4 4 7 : . LBE 6 4 4 6 : . LBE 6 4 4 5 : . LBE 6 4 4 3 : . LBE 6 4 4 2 : . LBE 6 4 5 6 : . LBE 6 4 5 8 : . LBE 6 4 3 6 : . LBB 6 4 5 9 : addq $ 1 , % rbx . L 7 7 5 5 : . LBE 6 4 5 9 : cmpq % r 1 2 , % rbx jl . L 7 7 8 4 . LBE 6 4 3 3 : . LBE 6 4 3 2 : . LBE 6 4 3 1 : . LBB 6 4 6 0 : movq - 4 8 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax . LBE 6 4 6 0 : . LBE 6 4 1 6 : addq $ 6 1 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 6 6 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 7 7 3 movl $ 2 3 2 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 8 2 : ret . L 1 7 7 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 0 8 , % rsp movq % rdi , - 2 1 6 (% rbp ) movq % rsi , - 2 2 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) . LBB 1 4 3 9 : leaq go . leetcode . searchRange .. func 1 .. f (% rip ), % rax movq % rax , - 2 4 (% rbp ) movl $ 0 , % edx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 0 8 (% rbp ) movq $ 0 , - 2 0 0 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq - 2 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rdx movq - 2 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq - 2 4 (% rbp ), % r 1 0 movl $ 1 , % esi movq % rax , % rdi call *% rdx . LVL 8 3 : addq $ 3 2 , % rsp movq % rax , % r 1 2 movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 7 6 8 . LBB 1 4 4 0 : movq - 1 4 4 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) . LBE 1 4 4 0 : jmp . L 1 7 6 9 . L 1 7 6 8 : . LBB 1 4 4 1 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq % rcx , - 2 0 8 (% rbp ) movq % rax , - 2 0 0 (% rbp ) movq % rdx , - 1 9 2 (% rbp ) . L 1 7 6 9 : . LBE 1 4 4 1 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) movq - 2 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , % rdx movq - 2 2 4 (% rbp ), % rax subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq - 2 4 (% rbp ), % r 1 0 movl $ 0 , % esi movq % rax , % rdi call *% rdx . LVL 8 4 : addq $ 3 2 , % rsp movq % rax , % r 1 2 movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 7 7 0 . LBB 1 4 4 2 : movq - 1 1 2 (% rbp ), % rsi leaq - 4 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) . LBE 1 4 4 2 : jmp . L 1 7 7 1 . L 1 7 7 0 : . LBB 1 4 4 3 : movq - 1 1 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rcx , - 2 0 8 (% rbp ) movq % rax , - 2 0 0 (% rbp ) movq % rdx , - 1 9 2 (% rbp ) . L 1 7 7 1 : . LBE 1 4 4 3 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) . LBB 1 4 4 4 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 2 1 6 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 4 4 4 : . LBE 1 4 3 9 : movq - 2 1 6 (% rbp ), % rax leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 4 movl $ 2 3 2 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 0 8 , % rsp movq % rdi , - 2 1 6 (% rbp ) movq % rsi , - 2 2 4 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) . LBB 2 : movq $ 0 , - 2 0 8 (% rbp ) movq $ 0 , - 2 0 0 (% rbp ) movq $ 0 , - 1 9 2 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 2 3 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : movq - 2 2 4 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax jne . L 3 . LBB 8 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rbx movq - 2 2 4 (% rbp ), % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 . LBB 9 : movq - 1 4 4 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) . LBE 9 : jmp . L 5 . L 4 : . LBB 1 0 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq % rcx , - 2 0 8 (% rbp ) movq % rax , - 2 0 0 (% rbp ) movq % rdx , - 1 9 2 (% rbp ) . L 5 : . LBE 1 0 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) movq - 2 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 2 2 4 (% rbp ) . LBE 8 : jmp . L 2 . L 3 : . LBB 1 1 : movq - 2 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 2 4 (% rbp ) . LBB 1 2 : . LBB 1 3 : jmp . L 6 . L 2 2 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 2 4 (% rbp ) . L 6 : . LBE 1 5 : . LBB 1 6 : movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax setne % al testb % al , % al je . L 7 . LBB 1 7 : movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax cmpq % rax , - 2 2 4 (% rbp ) setne % al . L 7 : . LBE 1 7 : . LBE 1 6 : testb % al , % al jne . L 2 2 . LBE 1 3 : . LBE 1 2 : . LBB 1 8 : movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax jne . L 1 0 . LBB 1 9 : movq - 2 4 (% rbp ), % rax addq $ 1 6 , % rax movq - 2 2 4 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 1 1 . LBB 2 0 : movq % rdx , (% rax ) jmp . L 1 2 . L 1 1 : . LBE 2 0 : . LBB 2 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 2 : . LBE 2 1 : movq - 2 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 2 2 4 (% rbp ) . LBE 1 9 : jmp . L 2 . L 1 0 : . LBB 2 2 : movq - 2 4 (% rbp ), % rax addq $ 1 6 , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 3 . LBB 2 3 : movq $ 0 , (% rax ) jmp . L 1 4 . L 1 3 : . LBE 2 3 : . LBB 2 4 : movl $ 0 , % esi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 4 : . LBE 2 4 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rbx movq - 2 2 4 (% rbp ), % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 5 . LBB 2 5 : movq - 1 1 2 (% rbp ), % rsi leaq - 4 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) . LBE 2 5 : jmp . L 1 6 . L 1 5 : . LBB 2 6 : movq - 1 1 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rcx , - 2 0 8 (% rbp ) movq % rax , - 2 0 0 (% rbp ) movq % rdx , - 1 9 2 (% rbp ) . L 1 6 : . LBE 2 6 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) movq - 2 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 2 2 4 (% rbp ) . L 2 : . LBE 2 2 : . LBE 1 8 : . LBE 1 1 : . LBE 7 : . LBE 6 : cmpq $ 0 , - 2 2 4 (% rbp ) jne . L 2 3 . LBE 4 : . LBE 3 : . LBB 2 7 : movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 2 1 6 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 7 : . LBE 2 : movq - 2 1 6 (% rbp ), % rax addq $ 2 0 8 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
cmpq % fs : 1 1 2 , % rsp jnb . L 9 9 movl $ 1 3 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 9 : ret . L 9 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 0 4 , % rsp movq $ 0 , - 5 6 (% rbp ) . LBB 1 0 1 : movq 2 4 (% rbp ), % rax movl $ 0 , % edx movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . makemap @ PLT movq % rax , - 6 4 (% rbp ) movq $ 0 , - 4 0 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 1 0 2 : movq $ 0 , - 7 2 (% rbp ) . LBB 1 0 3 : . LBB 1 0 4 : . LBB 1 0 5 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 0 5 : jmp . L 9 0 . L 9 8 : . LBB 1 0 6 : nop . LBE 1 0 6 : . LBB 1 0 7 : . LBB 1 0 8 : movq - 1 2 0 (% rbp ), % rax testq % rbx , % rbx js . L 9 1 cmpq % rax , % rbx jge . L 9 1 movq - 1 2 8 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 0 8 : . LBB 1 0 9 : movq % rax , - 7 2 (% rbp ) . LBE 1 0 9 : . LBB 1 1 0 : . LBB 1 1 1 : movb $ 0 , - 7 3 (% rbp ) . LBB 1 1 2 : movq - 7 2 (% rbp ), % rax movq % rax , - 1 0 4 (% rbp ) leaq - 1 0 4 (% rbp ), % rax movq (% rax ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movl % edx , % eax movb % al , - 7 3 (% rbp ) . LBE 1 1 2 : movzbl - 7 3 (% rbp ), % eax xorl $ 1 , % eax testb % al , % al jne . L 9 2 jmp . L 9 3 . L 9 1 : . LBE 1 1 1 : . LBE 1 1 0 : . LBB 1 1 6 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 9 2 : . LBE 1 1 6 : . LBB 1 1 7 : . LBB 1 1 5 : . LBB 1 1 3 : . LBB 1 1 4 : movq - 7 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) leaq - 8 8 (% rbp ), % rax movq (% rax ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % r 1 3 leaq - 9 6 (% rbp ), % rax movq (% rax ), % rdx movq - 6 4 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 int (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movq % r 1 3 , (% rax ) . LBE 1 1 4 : movq - 7 2 (% rbp ), % rax addq % rax , - 4 0 (% rbp ) . L 9 3 : . LBE 1 1 3 : . LBE 1 1 5 : movq - 7 2 (% rbp ), % rax addq % rax , - 4 8 (% rbp ) . LBE 1 1 7 : . LBE 1 0 7 : . LBB 1 1 8 : addq $ 1 , % rbx . L 9 0 : . LBE 1 1 8 : cmpq % r 1 2 , % rbx jl . L 9 8 . LBE 1 0 4 : . LBE 1 0 3 : . LBE 1 0 2 : . LBB 1 1 9 : movq - 4 0 (% rbp ), % rax addq % rax , % rax subq - 4 8 (% rbp ), % rax movq % rax , - 5 6 (% rbp ) movq - 5 6 (% rbp ), % rax . LBE 1 1 9 : . LBE 1 0 1 : addq $ 1 0 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 6 movl $ 3 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 3 6 , % rsp movq % rdi , - 3 6 0 (% rbp ) leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 2 0 (% rbp ) leaq . LC 2 0 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 0 4 (% rbp ) movq % r 1 3 , - 2 9 6 (% rbp ) leaq type ... 6 1 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 2 , 2 4 (% rax ) movq $ 1 , 3 2 (% rax ) movq $ 0 , 4 0 (% rax ) movq $ 1 , 4 8 (% rax ) movq $ 3 , 5 6 (% rax ) movq $ 2 , 6 4 (% rax ) movq $ 1 , 7 2 (% rax ) movq $ 2 , 8 0 (% rax ) movq $ 1 , 8 8 (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 1 2 , - 2 8 0 (% rbp ) movq $ 1 2 , - 2 7 2 (% rbp ) movq $ 6 , - 2 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 3 2 0 (% rbp ), % rax movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 3 2 0 (% rbp ), % rax leaq - 3 0 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 3 2 0 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 1 , - 3 4 4 (% rbp ) movq $ 1 , - 3 3 6 (% rbp ) . LBB 4 : movq $ 0 , - 4 0 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 (% rbp ) . LBB 5 : . LBB 6 : . LBB 7 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 7 : jmp . L 4 . L 1 5 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 0 8 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 4 0 (% rbp ) movq % rdi , - 2 3 2 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq % rbx , - 4 0 (% rbp ) movq - 4 8 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 6 jmp . L 1 3 . L 5 : . LBE 1 1 : . LBB 1 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 1 4 : . LBB 1 5 : . LBB 1 2 : movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 8 . L 1 3 : . LBE 1 2 : . LBB 1 3 : leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 3 : . LBE 1 5 : . LBB 1 6 : movq - 4 0 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 4 8 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 2 8 (% rbp ) movq % rdi , - 1 2 0 (% rbp ) leaq . LC 2 1 (% rip ), % rcx movq % rcx , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) leaq go . Solution . TestSolution .. func 1 (% rip ), % r 1 4 movq - 4 8 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq % r 1 4 , - 6 4 (% rbp ) movq % r 1 2 , - 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 9 . LBB 1 7 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 7 : jmp . L 1 0 . L 9 : . LBB 1 8 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 1 0 : . LBE 1 8 : movq - 7 2 (% rbp ), % r 1 2 leaq - 1 2 8 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 3 6 0 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 1 6 : . LBE 9 : . LBB 1 9 : addq $ 1 , % rbx . L 4 : . LBE 1 9 : cmpq % r 1 3 , % rbx jl . L 1 5 . LBE 6 : . LBE 5 : . LBE 4 : addq $ 3 3 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 0 movl $ 1 3 6 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 8 8 , % rsp movq $ 0 , - 9 6 (% rbp ) movq $ 0 , - 8 8 (% rbp ) . LBB 2 : subq $ 8 , % rsp pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) call sort . Strings @ PLT addq $ 3 2 , % rsp call runtime . makemap_small @ PLT movq % rax , - 5 6 (% rbp ) leaq . LC 1 9 (% rip ), % r 1 4 movl $ 0 , % r 1 5 d movq % r 1 4 , - 1 1 2 (% rbp ) movq % r 1 5 , - 1 0 4 (% rbp ) . LBB 3 : movq $ 0 , - 1 2 8 (% rbp ) movq $ 0 , - 1 2 0 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 8 0 (% rbp ) movq % rdx , - 7 2 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 7 2 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 9 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 7 2 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 8 0 (% rbp ), % rax movq % rbx , % rdx salq $ 4 , % rdx addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : . LBB 1 3 : movq - 1 2 0 (% rbp ), % rax cmpq $ 1 , % rax sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl jne . L 4 jmp . L 5 . L 3 : . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 2 1 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 2 1 : . LBB 2 2 : . LBB 2 0 : . LBB 1 5 : . LBB 1 4 : movq - 1 2 0 (% rbp ), % rdx movl $ 0 , % eax leaq - 1 (% rdx ), % rdi movq - 1 2 0 (% rbp ), % rdx testq % rdi , % rdi js . L 6 cmpq % rdx , % rdi jg . L 6 testq % rax , % rax jns . L 7 jmp . L 8 . L 6 : movq % rdx , % rsi call runtime . goPanicSliceAlen @ PLT . L 7 : cmpq % rdi , % rax jg . L 8 movq - 1 2 8 (% rbp ), % rdx cmpq % rax , % rdi jne . L 9 jmp . L 1 7 . L 8 : movq % rdi , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 9 : movq % rax , % rcx jmp . L 1 1 . L 1 7 : movl $ 0 , % ecx . L 1 1 : addq % rcx , % rdx movq % rdx , % r 1 2 subq % rax , % rdi movq % rdi , % rdx movq % rdx , % r 1 3 movq - 5 6 (% rbp ), % rax movq % r 1 2 , % rdx movq % r 1 3 , % rcx movq % rax , % rsi leaq type .. map . 6 string . 7 bool (% rip ), % rdi call runtime . mapaccess 1 _faststr @ PLT movzbl (% rax ), % eax . L 5 : . LBE 1 4 : . LBE 1 5 : testb % al , % al je . L 1 2 . LBB 1 6 : . LBB 1 7 : movq - 1 0 4 (% rbp ), % rdx movq - 1 2 0 (% rbp ), % rax cmpq % rax , % rdx jge . L 1 3 . LBB 1 8 : movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) . L 1 3 : . LBE 1 8 : . LBE 1 7 : . LBB 1 9 : movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movl $ 1 , % r 1 5 d movq - 5 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx leaq type .. map . 6 string . 7 bool (% rip ), % rdi call runtime . mapassign_faststr @ PLT movb % r 1 5 b , (% rax ) . L 1 2 : . LBE 1 9 : . LBE 1 6 : . LBE 2 0 : . LBE 2 2 : . LBE 8 : . LBB 2 3 : addq $ 1 , % rbx . L 2 : . LBE 2 3 : cmpq % r 1 4 , % rbx jl . L 1 9 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 2 4 : movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx . LBE 2 4 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 5 movl $ 1 8 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 3 6 , % rsp movq % rdi , - 1 6 8 (% rbp ) movq % rsi , - 1 7 6 (% rbp ) movq - 1 6 8 (% rbp ), % rbx leaq string .. d (% rip ), % r 1 2 leaq go .. C 6 2 (% rip ), % r 1 3 leaq main .. main . node .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq % r 1 2 , - 1 4 4 (% rbp ) movq % r 1 3 , - 1 3 6 (% rbp ) movq $ 0 , - 1 2 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 . LBB 2 : movq - 1 5 2 (% rbp ), % rcx movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 2 8 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 : jmp . L 3 . L 2 : . LBB 3 : movq - 1 5 2 (% rbp ), % rax leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq main .. main . node .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 : . LBE 3 : movq - 1 5 2 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 4 . LBB 4 : movq % rax , (% rbx ) . LBE 4 : jmp . L 5 . L 4 : . LBB 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . gcWriteBarrier @ PLT . L 5 : . LBE 5 : movq - 1 6 8 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 5 6 (% rbp ) . LBB 6 : movq $ 0 , - 6 4 (% rbp ) . LBB 7 : jmp . L 6 . L 1 4 : . LBB 8 : nop . LBE 8 : . LBB 9 : leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 1 2 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 1 1 2 (% rbp ), % rax movq % rax , % r 1 5 leaq main .. main . node .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 0 4 (% rbp ) movq % r 1 4 , - 9 6 (% rbp ) movq % r 1 5 , - 8 8 (% rbp ) movq $ 0 , - 8 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 7 . LBB 1 0 : movq - 1 0 4 (% rbp ), % rcx movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 8 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 1 0 : jmp . L 8 . L 7 : . LBB 1 1 : movq - 1 0 4 (% rbp ), % rax leaq - 9 6 (% rbp ), % rdx movq % rax , % rsi leaq main .. main . node .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 8 : . LBE 1 1 : movq - 1 0 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 5 6 (% rbp ), % rax addq $ 1 6 , % rax movq - 7 2 (% rbp ), % rdx leaq runtime . writeBarrier (% rip ), % rcx movl (% rcx ), % ecx testl % ecx , % ecx jne . L 9 . LBB 1 2 : movq % rdx , (% rax ) . LBE 1 2 : jmp . L 1 0 . L 9 : . LBB 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 0 : . LBE 1 3 : movq - 5 6 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 5 6 (% rbp ) . LBE 9 : . LBB 1 4 : addq $ 1 , - 6 4 (% rbp ) . L 6 : . LBE 1 4 : movq - 6 4 (% rbp ), % rax cmpq - 1 7 6 (% rbp ), % rax jl . L 1 4 . LBE 7 : . LBE 6 : addq $ 1 3 6 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 9 movl $ 1 0 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 8 0 , % rsp movq $ 0 , - 4 8 (% rbp ) . LBB 2 : movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) movq $- 2 1 4 7 4 8 3 6 4 8 , - 4 0 (% rbp ) . LBB 3 : movq $ 0 , - 5 6 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 8 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 8 8 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 9 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 9 : . LBB 1 0 : movq % rax , - 5 6 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 2 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 4 0 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax addq % rdx , % rax movq % rax , - 2 4 (% rbp ) movq - 3 2 (% rbp ), % rax subq - 5 6 (% rbp ), % rax movq % rax , % rdx movq - 4 0 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call main . mymax movq % rax , - 4 0 (% rbp ) movq - 6 4 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call main . mymax movq % rax , - 3 2 (% rbp ) . LBE 1 1 : . LBE 8 : . LBB 1 3 : addq $ 1 , % rbx jmp . L 2 . L 3 : . LBE 1 3 : . LBB 1 4 : . LBB 1 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 2 : . LBE 1 2 : . LBE 1 4 : cmpq % r 1 2 , % rbx jl . L 8 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 1 5 : movq - 2 4 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call main . mymax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax . LBE 1 5 : . LBE 2 : addq $ 8 0 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 4 2 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 3 movl $ 4 2 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 9 2 , % rsp movq % rdi , - 3 9 2 (% rbp ) movq % rdx , % rcx movq % rsi , % rax movq % rdi , % rdx movq % rcx , % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) movq $ 0 , - 2 7 2 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax leaq 1 (% rax ), % rbx movq % rbx , % rdx movl $ 1 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 2 0 (% rbp ) movq $ 1 , - 3 1 2 (% rbp ) movq % rbx , - 3 0 4 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 3 : movl $ 0 , - 5 2 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq - 4 0 8 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 4 1 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 4 0 8 (% rbp ), % rax testq % rbx , % rbx js . L 3 cmpq % rax , % rbx jge . L 3 movq - 4 1 6 (% rbp ), % rax movq % rbx , % rdx addq % rdx , % rax movzbl (% rax ), % eax movzbl % al , % eax cmpl $ 1 2 7 , % eax jle . L 4 jmp . L 3 3 . L 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBB 1 0 : addq $ 1 , % rbx . LBE 1 0 : jmp . L 6 . L 3 3 : . LBB 1 1 : movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rax movq % rbx , % rdx movq % rcx , % rdi movq % rax , % rsi call runtime . decoderune @ PLT movq % rdx , % rcx movq % rcx , % rdx movq % rax , % rcx movq % rdx , % rbx movl % ecx , % eax . L 6 : . LBE 1 1 : . LBE 9 : . LBB 1 2 : movl % eax , - 5 2 (% rbp ) . LBE 1 2 : . LBB 1 3 : movl - 5 2 (% rbp ), % eax subl $ 9 7 , % eax cltq cmpq $ 6 3 , % rax ja . L 7 movl $ 1 , % edx movl % eax , % ecx salq % cl , % rdx movq % rdx , % rax jmp . L 8 . L 7 : movl $ 0 , % eax . L 8 : xorq % rax , - 4 0 (% rbp ) movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 2 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 9 . LBB 1 4 : movq - 2 5 6 (% rbp ), % rsi leaq - 1 2 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) . LBE 1 4 : jmp . L 1 0 . L 9 : . LBB 1 5 : movq - 2 5 6 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rdx movq % rcx , - 3 2 0 (% rbp ) movq % rax , - 3 1 2 (% rbp ) movq % rdx , - 3 0 4 (% rbp ) . L 1 0 : . LBE 1 5 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 4 0 (% rbp ), % rax movq % rax , (% rdx ) . L 2 : . LBE 1 3 : . LBE 8 : cmpq % r 1 3 , % rbx jl . L 4 1 . LBE 5 : . LBE 4 : . LBE 3 : movq - 4 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq bool .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 5 2 (% rbp ) movq % rbx , - 3 4 4 (% rbp ) movq % rbx , - 3 3 6 (% rbp ) . LBB 1 6 : movq $ 0 , - 6 4 (% rbp ) movq $ 0 , - 3 8 4 (% rbp ) movq $ 0 , - 3 7 6 (% rbp ) movq $ 0 , - 3 6 8 (% rbp ) . LBB 1 7 : . LBB 1 8 : . LBB 1 9 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq - 1 8 4 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 9 : jmp . L 1 3 . L 4 2 : . LBB 2 0 : nop . LBE 2 0 : . LBB 2 1 : . LBB 2 2 : movq - 1 8 4 (% rbp ), % rax testq % rbx , % rbx js . L 1 4 cmpq % rax , % rbx jge . L 1 4 movq - 1 9 2 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 2 0 8 (% rbp ) . LBE 2 2 : . LBB 2 3 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq % rbx , - 6 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) . LBE 2 3 : . LBB 2 4 : movq - 3 7 6 (% rbp ), % rax testq % rax , % rax jg . L 1 5 jmp . L 3 5 . L 1 4 : . LBE 2 4 : . LBB 2 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : . LBE 2 7 : . LBB 2 8 : movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 1 5 : movq - 3 8 4 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 7 2 (% rbp ) movq - 3 7 6 (% rbp ), % rax cmpq $ 1 , % rax jg . L 1 7 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 1 7 : movq - 3 8 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 0 (% rbp ) movq - 3 7 6 (% rbp ), % rax cmpq $ 2 , % rax jg . L 1 8 movq % rax , % rsi movl $ 2 , % edi call runtime . goPanicIndex @ PLT . L 1 8 : movq - 3 8 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 8 8 (% rbp ) . LBB 2 5 : cmpq $ 1 2 , - 8 8 (% rbp ) jle . L 1 9 . LBB 2 6 : movq - 3 4 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 2 0 cmpq % rax , - 6 4 (% rbp ) jl . L 3 6 . L 2 0 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 6 : movq - 3 5 2 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax addq % rdx , % rax movb $ 1 , (% rax ) jmp . L 2 2 . L 1 9 : . LBE 2 6 : . LBE 2 5 : movq - 8 0 (% rbp ), % rax addq $ 1 , % rax movq - 3 1 2 (% rbp ), % rdx testq % rax , % rax js . L 2 3 cmpq % rdx , % rax jl . L 3 7 . L 2 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 3 1 2 (% rbp ), % rdx cmpq $ 0 , - 7 2 (% rbp ) js . L 2 5 cmpq % rdx , - 7 2 (% rbp ) jl . L 3 8 . L 2 5 : movq - 7 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 3 2 0 (% rbp ), % rdx salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 3 2 0 (% rbp ), % rcx movq - 7 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax xorq % rdx , % rax movq % rax , % rdi call go . problem 1 1 7 7 . bits movq % rax , - 9 6 (% rbp ) movq - 3 4 4 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 2 7 cmpq % rax , - 6 4 (% rbp ) jl . L 3 9 . L 2 7 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 9 6 (% rbp ), % rax movq % rax , % rdx shrq $ 6 3 , % rdx addq % rdx , % rax sarq % rax movq % rax , % rdx movq - 3 5 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax addq % rcx , % rax cmpq - 8 8 (% rbp ), % rdx setle % dl movb % dl , (% rax ) . L 2 2 : . LBE 2 8 : . LBE 2 1 : . LBB 2 9 : addq $ 1 , % rbx . L 1 3 : . LBE 2 9 : cmpq % r 1 2 , % rbx jl . L 4 2 . LBE 1 8 : . LBE 1 7 : . LBE 1 6 : . LBB 3 0 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 3 9 2 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 7 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 3 0 : . LBE 2 : movq - 3 9 2 (% rbp ), % rax addq $ 3 9 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 : pushq % rbp movq % rsp , % rbp subq $ 4 8 , % rsp movq % rdi , - 4 0 (% rbp ) cmpq $ 0 , - 4 0 (% rbp ) jne . L 2 call runtime . panicmem @ PLT . L 2 : movq - 4 0 (% rbp ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 2 (% rbp ) movq % rdx , - 2 4 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 6 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 2 : . LBB 3 : movq - 2 4 (% rbp ), % rax movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . LBE 3 : . LBE 2 : leave ret
. LFB 0 : leaq - 4 4 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 5 0 movl $ 4 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 0 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 4 2 4 , % rsp movq % rdi , % rcx movq % rsi , % rax movq % rax , % rbx movq % rcx , - 4 1 6 (% rbp ) movq % rbx , - 4 0 8 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq $ 0 , - 3 6 8 (% rbp ) movq $ 0 , - 3 6 0 (% rbp ) . LBB 2 : leaq - 1 1 2 (% rbp ), % rdi movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx leaq - 3 5 2 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . stringtoslicerune @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) . LBB 3 : movq - 3 9 2 (% rbp ), % rax cmpq % rax , - 4 2 4 (% rbp ) jl . L 2 . LBB 4 : . LBB 5 : subq $ 8 , % rsp pushq - 3 8 4 (% rbp ) pushq - 3 9 2 (% rbp ) pushq - 4 0 0 (% rbp ) movl $ 0 , % edi call runtime . slicerunetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx jmp . L 3 7 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : call runtime . makemap_small @ PLT movq % rax , - 5 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) movq $ 0 , - 4 0 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 6 : . LBB 7 : jmp . L 4 . L 4 9 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movb $ 0 , - 5 7 (% rbp ) . LBB 1 1 : movq - 3 9 2 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 5 cmpq % rax , - 4 0 (% rbp ) jl . L 3 8 . L 5 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 4 0 0 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 2 , % rax addq % rdx , % rax movl (% rax ), % eax movl % eax , - 2 1 2 (% rbp ) leaq - 2 1 2 (% rbp ), % rax movl (% rax ), % edx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 2 _fast 3 2 @ PLT movl % edx , % eax movb % al , - 5 7 (% rbp ) . LBE 1 1 : . LBB 1 2 : cmpq $ 0 , - 5 6 (% rbp ) je . L 7 movq - 5 6 (% rbp ), % rax movq (% rax ), % rax jmp . L 8 . L 7 : movl $ 0 , % eax . L 8 : cmpq - 4 2 4 (% rbp ), % rax setl % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 9 . LBB 1 3 : movzbl - 5 7 (% rbp ), % eax . L 9 : . LBE 1 3 : . LBE 1 2 : testb % al , % al je . L 1 5 . LBB 1 4 : . LBB 1 5 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 4 0 (% rbp ), % rax . LBB 1 6 : movq - 2 0 0 (% rbp ), % rdx testq % rax , % rax js . L 1 1 cmpq % rdx , % rax jl . L 3 9 . L 1 1 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 2 0 8 (% rbp ), % rdx movq % rax , % rcx salq $ 2 , % rcx addq % rcx , % rdx movl (% rdx ), % edx movl % edx , - 1 8 0 (% rbp ) movq - 2 0 0 (% rbp ), % rdx testq % rax , % rax js . L 1 3 cmpq % rdx , % rax jl . L 4 0 . L 1 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 0 : movq - 2 0 8 (% rbp ), % rdx salq $ 2 , % rax addq % rdx , % rax movl (% rax ), % eax movl % eax , - 8 8 (% rbp ) leaq - 8 8 (% rbp ), % rax movl (% rax ), % edx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax leaq 1 (% rax ), % rbx leaq - 1 8 0 (% rbp ), % rax movl (% rax ), % edx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapassign_fast 3 2 @ PLT movq % rbx , (% rax ) . LBE 1 6 : . LBE 1 5 : addq $ 1 , - 4 0 (% rbp ) . LBB 1 7 : movq - 4 0 (% rbp ), % rax subq - 2 4 (% rbp ), % rax movq % rax , % rdx movq - 4 8 (% rbp ), % rax subq - 3 2 (% rbp ), % rax cmpq % rax , % rdx jle . L 4 . LBB 1 8 : . LBB 1 9 : movq - 2 4 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax movq % rdx , - 3 2 (% rbp ) movq % rax , - 4 8 (% rbp ) jmp . L 4 . L 4 8 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBE 1 4 : . LBB 2 0 : . LBB 2 1 : . LBB 2 2 : . LBB 2 3 : nop . LBE 2 3 : . LBB 2 4 : . LBB 2 5 : movq - 3 9 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 6 cmpq % rax , - 2 4 (% rbp ) jl . L 4 1 . L 1 6 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq - 4 0 0 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 2 , % rax addq % rdx , % rax movl (% rax ), % eax movl % eax , - 8 4 (% rbp ) leaq - 8 4 (% rbp ), % rax movl (% rax ), % edx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax movq % rax , - 7 2 (% rbp ) cmpq $ 1 , - 7 2 (% rbp ) jne . L 1 8 . LBB 2 6 : movq - 3 9 2 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 9 cmpq % rax , - 2 4 (% rbp ) jl . L 4 2 . L 1 9 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq - 5 6 (% rbp ), % rax movq - 4 0 0 (% rbp ), % rcx movq - 2 4 (% rbp ), % rdx salq $ 2 , % rdx addq % rcx , % rdx movl (% rdx ), % edx movl % edx , - 8 0 (% rbp ) leaq - 8 0 (% rbp ), % rdx movl (% rdx ), % edx movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapdelete_fast 3 2 @ PLT jmp . L 2 1 . L 1 8 : . LBE 2 6 : . LBB 2 7 : . LBB 2 8 : movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 2 4 (% rbp ), % rax . LBB 2 9 : movq - 1 6 8 (% rbp ), % rdx testq % rax , % rax js . L 2 2 cmpq % rdx , % rax jl . L 4 3 . L 2 2 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq - 1 7 6 (% rbp ), % rdx movq % rax , % rcx salq $ 2 , % rcx addq % rcx , % rdx movl (% rdx ), % edx movl % edx , - 1 4 8 (% rbp ) movq - 1 6 8 (% rbp ), % rdx testq % rax , % rax js . L 2 4 cmpq % rdx , % rax jl . L 4 4 . L 2 4 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq - 1 7 6 (% rbp ), % rdx salq $ 2 , % rax addq % rdx , % rax movl (% rax ), % eax movl % eax , - 7 6 (% rbp ) leaq - 7 6 (% rbp ), % rax movl (% rax ), % edx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapaccess 1 _fast 3 2 @ PLT movq (% rax ), % rax leaq - 1 (% rax ), % rbx leaq - 1 4 8 (% rbp ), % rax movl (% rax ), % edx movq - 5 6 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int 3 2 . 7 int (% rip ), % rdi call runtime . mapassign_fast 3 2 @ PLT movq % rbx , (% rax ) . L 2 1 : . LBE 2 9 : . LBE 2 8 : . LBE 2 7 : . LBE 2 5 : addq $ 1 , - 2 4 (% rbp ) . L 1 5 : . LBE 2 4 : cmpq $ 0 , - 5 6 (% rbp ) je . L 2 6 movq - 5 6 (% rbp ), % rax movq (% rax ), % rax jmp . L 2 7 . L 2 6 : movl $ 0 , % eax . L 2 7 : cmpq - 4 2 4 (% rbp ), % rax jge . L 4 8 . L 4 : . LBE 2 2 : . LBE 2 1 : . LBE 2 0 : . LBE 1 0 : . LBE 9 : movq - 3 9 2 (% rbp ), % rax cmpq % rax , - 4 0 (% rbp ) jl . L 4 9 . LBE 7 : . LBE 6 : . LBB 3 0 : movq - 3 8 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 3 1 cmpq % rax , - 4 8 (% rbp ) jg . L 3 1 cmpq $ 0 , - 3 2 (% rbp ) jns . L 3 2 jmp . L 3 3 . L 3 1 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 3 2 : movq - 3 2 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jle . L 4 7 . L 3 3 : movq - 4 8 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicSliceB @ PLT . L 4 7 : movq - 4 0 0 (% rbp ), % rdx movq - 3 8 4 (% rbp ), % rax cmpq % rax , - 3 2 (% rbp ) je . L 3 5 movq - 3 2 (% rbp ), % rax salq $ 2 , % rax jmp . L 3 6 . L 3 5 : movl $ 0 , % eax . L 3 6 : addq % rdx , % rax movq % rax , - 1 4 4 (% rbp ) movq - 4 8 (% rbp ), % rax subq - 3 2 (% rbp ), % rax movq % rax , - 1 3 6 (% rbp ) movq - 3 8 4 (% rbp ), % rax subq - 3 2 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movl $ 0 , % edi call runtime . slicerunetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx . L 3 7 : . LBE 3 0 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 3 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 5 movl $ 3 4 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 0 4 , % rsp movq % rdi , - 3 2 8 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 3 2 8 (% rbp ) jg . L 2 . LBB 4 : leaq string .. d (% rip ), % rax leaq go .. C 6 (% rip ), % rdx movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rax movq % rcx , % rdi movq % rax , % rsi call runtime . gopanic @ PLT . L 2 : . LBE 4 : . LBE 3 : call runtime . makemap_small @ PLT movq % rax , - 7 2 (% rbp ) movq - 3 2 8 (% rbp ), % rax movq % rax , - 2 6 4 (% rbp ) leaq - 2 6 4 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 1 , - 2 8 0 (% rbp ) movq $ 1 , - 2 7 2 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 5 : . LBB 6 : jmp . L 3 . L 3 4 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq - 2 8 0 (% rbp ), % rax leaq (% rax ,% rax ), % rbx movq % rbx , % rdx movl $ 0 , % esi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) movq % rbx , - 3 0 4 (% rbp ) . LBB 9 : movq $ 0 , - 8 0 (% rbp ) . LBB 1 0 : . LBB 1 1 : . LBB 1 2 : movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 2 7 2 (% rbp ), % rax movq % rax , - 2 4 0 (% rbp ) movq - 2 4 8 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 1 2 : jmp . L 4 . L 3 3 : . LBB 1 3 : nop . LBE 1 3 : . LBB 1 4 : . LBB 1 5 : movq - 2 4 8 (% rbp ), % rax testq % rbx , % rbx js . L 5 cmpq % rax , % rbx jge . L 5 movq - 2 5 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 5 : . LBB 1 6 : movq % rax , - 8 0 (% rbp ) . LBE 1 6 : . LBB 1 7 : . LBB 1 8 : cmpq $ 1 , - 8 0 (% rbp ) je . L 6 jmp . L 2 8 . L 5 : . LBE 1 8 : . LBE 1 7 : . LBB 3 7 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 6 : . LBE 3 7 : . LBB 3 8 : . LBB 3 6 : . LBB 1 9 : movq $ 0 , - 3 2 0 (% rbp ) movq $ 0 , - 3 1 2 (% rbp ) movq $ 0 , - 3 0 4 (% rbp ) jmp . L 8 . L 2 8 : . LBE 1 9 : . LBB 2 0 : . LBB 2 1 : movb $ 0 , - 8 1 (% rbp ) . LBB 2 2 : movq - 8 0 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) leaq - 2 2 4 (% rbp ), % rax movq (% rax ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapaccess 2 _fast 6 4 @ PLT movl % edx , % eax movb % al , - 8 1 (% rbp ) . LBE 2 2 : movzbl - 8 1 (% rbp ), % eax xorl $ 1 , % eax testb % al , % al je . L 9 . LBB 2 3 : . LBB 2 4 : movq - 8 0 (% rbp ), % rax movq % rax , - 2 1 6 (% rbp ) leaq - 2 1 6 (% rbp ), % rax movq (% rax ), % rdx movq - 7 2 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 struct . 4 . 5 (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT . LBE 2 4 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 2 movq - 8 0 (% rbp ), % rax leaq - 1 (% rax ), % r 1 4 leaq 1 (% r 1 2 ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 0 . LBB 2 5 : movq - 2 0 8 (% rbp ), % rsi leaq - 1 4 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) . LBE 2 5 : jmp . L 1 1 . L 1 0 : . LBB 2 6 : movq - 2 0 8 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rdx movq % rcx , - 3 2 0 (% rbp ) movq % rax , - 3 1 2 (% rbp ) movq % rdx , - 3 0 4 (% rbp ) . L 1 1 : . LBE 2 6 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 4 , (% rax ) movq - 8 0 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . LBB 2 7 : pxor % xmm 1 , % xmm 1 cvtsi 2 sdq - 8 0 (% rbp ), % xmm 1 movq % xmm 1 , % rax movq % rax , % xmm 0 call math . Sqrt @ PLT cvttsd 2 siq % xmm 0 , % rax movq % rax , - 5 6 (% rbp ) . LBB 2 8 : jmp . L 1 2 . L 3 2 : . LBB 2 9 : nop . LBE 2 9 : . LBB 3 0 : . LBB 3 1 : cmpq $- 1 , - 5 6 (% rbp ) je . L 1 3 cmpq $ 0 , - 5 6 (% rbp ) jne . L 1 4 call runtime . panicdivide @ PLT . L 1 4 : movq - 8 0 (% rbp ), % rax cqto idivq - 5 6 (% rbp ) movq % rdx , % rax testq % rax , % rax sete % al jmp . L 1 5 . L 1 3 : movl $ 1 , % eax . L 1 5 : testb % al , % al je . L 1 6 . LBB 3 2 : cmpq $- 1 , - 5 6 (% rbp ) jne . L 1 7 movq - 8 0 (% rbp ), % rax negq % rax jmp . L 1 8 . L 1 7 : cmpq $ 0 , - 5 6 (% rbp ) jne . L 1 9 call runtime . panicdivide @ PLT . L 1 9 : movq - 8 0 (% rbp ), % rax cqto idivq - 5 6 (% rbp ) . L 1 8 : movq % rax , - 4 8 (% rbp ) jmp . L 2 0 . L 1 6 : . LBE 3 2 : . LBE 3 1 : . LBE 3 0 : . LBB 3 3 : subq $ 1 , - 5 6 (% rbp ) . L 1 2 : . LBE 3 3 : cmpq $ 0 , - 5 6 (% rbp ) jg . L 3 2 . L 2 0 : . LBE 2 8 : . LBE 2 7 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 2 . LBB 3 4 : movq - 1 7 6 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) . LBE 3 4 : jmp . L 2 3 . L 2 2 : . LBB 3 5 : movq - 1 7 6 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rdx movq % rcx , - 3 2 0 (% rbp ) movq % rax , - 3 1 2 (% rbp ) movq % rdx , - 3 0 4 (% rbp ) . L 2 3 : . LBE 3 5 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 4 8 (% rbp ), % rax movq % rax , (% rdx ) . L 9 : . LBE 2 3 : . LBE 2 1 : . LBE 2 0 : . LBE 3 6 : . LBE 3 8 : . LBE 1 4 : . LBB 3 9 : addq $ 1 , % rbx . L 4 : . LBE 3 9 : cmpq % r 1 3 , % rbx jl . L 3 3 . L 8 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : movq - 3 2 0 (% rbp ), % rax movq - 3 1 2 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) addq $ 1 , - 4 0 (% rbp ) . L 3 : . LBE 8 : movq - 2 8 0 (% rbp ), % rax testq % rax , % rax jne . L 3 4 . LBE 6 : . LBE 5 : . LBB 4 0 : movq - 4 0 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax . LBE 4 0 : . LBE 2 : addq $ 3 0 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
leaq - 5 0 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 4 3 movl $ 5 0 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 4 3 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 6 4 , % rsp movq % rdi , - 4 8 8 (% rbp ) leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 8 (% rbp ) leaq . LC 2 2 (% rip ), % r 1 2 movl $ 8 , % r 1 3 d movq % r 1 2 , - 3 0 4 (% rbp ) movq % r 1 3 , - 2 9 6 (% rbp ) leaq type ... 6 4 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 0 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 3 2 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq - 4 3 2 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 4 , - 3 9 2 (% rbp ) movq $ 4 , - 3 8 4 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 2 4 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 3 7 6 (% rbp ) movq $ 4 , - 3 6 8 (% rbp ) movq $ 4 , - 3 6 0 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 1 6 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq $ 0 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq - 4 1 6 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 4 , - 3 4 4 (% rbp ) movq $ 4 , - 3 3 6 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 8 (% rbp ) movq - 4 0 8 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 0 , 1 6 (% rax ) movq $ 0 , 2 4 (% rax ) movq - 4 0 8 (% rbp ), % rax movq % rax , - 3 2 8 (% rbp ) movq $ 4 , - 3 2 0 (% rbp ) movq $ 4 , - 3 1 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 7 . LBB 2 8 : movq - 4 4 0 (% rbp ), % rax movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) . LBE 2 8 : jmp . L 2 8 . L 2 7 : . LBB 2 9 : movq - 4 4 0 (% rbp ), % rax leaq - 4 0 0 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 . 6 . 7 int (% rip ), % rdi call runtime . typedmemmove @ PLT . L 2 8 : . LBE 2 9 : movq - 4 4 0 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) movq $ 4 , - 2 8 0 (% rbp ) movq $ 4 , - 2 7 2 (% rbp ) movq $ 1 6 , - 2 6 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 2 9 . LBB 3 0 : movq - 4 4 8 (% rbp ), % rax movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) . LBE 3 0 : jmp . L 3 0 . L 2 9 : . LBB 3 1 : movq - 4 4 8 (% rbp ), % rax leaq - 3 0 4 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 1 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 0 : . LBE 3 1 : movq - 4 4 8 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq $ 1 , - 4 7 2 (% rbp ) movq $ 1 , - 4 6 4 (% rbp ) . LBB 3 2 : movq $ 0 , - 4 0 (% rbp ) leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 (% rbp ) . LBB 3 3 : . LBB 3 4 : . LBB 3 5 : movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 3 5 : jmp . L 3 1 . L 4 2 : . LBB 3 6 : nop . LBE 3 6 : . LBB 3 7 : . LBB 3 8 : movq - 2 0 0 (% rbp ), % rax testq % rbx , % rbx js . L 3 2 cmpq % rax , % rbx jge . L 3 2 movq - 2 0 8 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 5 6 (% rbp ) movq % rdi , - 2 4 8 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 4 0 (% rbp ) movq % rdi , - 2 3 2 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) . LBE 3 8 : . LBB 3 9 : movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq % rbx , - 4 0 (% rbp ) movq - 4 8 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 3 3 jmp . L 4 0 . L 3 2 : . LBE 3 9 : . LBB 4 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 3 : . LBE 4 2 : . LBB 4 3 : . LBB 4 0 : movq - 1 7 6 (% rbp ), % rsi movq - 1 6 8 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 6 0 (% rbp ), % rsi movq - 1 5 2 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 3 5 . L 4 0 : . LBE 4 0 : . LBB 4 1 : leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 5 : . LBE 4 1 : . LBE 4 3 : . LBB 4 4 : movq - 4 0 (% rbp ), % rax movq % rax , % rdi call strconv . Itoa @ PLT movq - 4 8 (% rbp ), % rcx movq (% rcx ), % rsi movq 8 (% rcx ), % rdi movq % rsi , - 1 2 8 (% rbp ) movq % rdi , - 1 2 0 (% rbp ) leaq . LC 2 3 (% rip ), % rcx movq % rcx , - 1 1 2 (% rbp ) movq $ 1 , - 1 0 4 (% rbp ) movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) leaq go . Solution . TestSolution 2 .. func 1 (% rip ), % r 1 4 movq - 4 8 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 (% rbp ) movq % r 1 4 , - 6 4 (% rbp ) movq % r 1 2 , - 5 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 6 . LBB 4 5 : movq - 7 2 (% rbp ), % rcx movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 4 5 : jmp . L 3 7 . L 3 6 : . LBB 4 6 : movq - 7 2 (% rbp ), % rax leaq - 6 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 7 : . LBE 4 6 : movq - 7 2 (% rbp ), % r 1 2 leaq - 1 2 8 (% rbp ), % rax movl $ 3 , % edx movq % rax , % rsi movl $ 0 , % edi call runtime . concatstrings @ PLT movq % rax , % rsi movq % rdx , % rdi movq - 4 8 8 (% rbp ), % rax movq % r 1 2 , % rcx movq % rax , % rdi call testing . T . Run @ PLT . LBE 4 4 : . LBE 3 7 : . LBB 4 7 : addq $ 1 , % rbx . L 3 1 : . LBE 4 7 : cmpq % r 1 3 , % rbx jl . L 4 2 . LBE 3 4 : . LBE 3 3 : . LBE 3 2 : addq $ 4 6 4 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 7 movl $ 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 4 7 : pushq % rbp movq % rsp , % rbp subq $ 8 0 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 6 4 (% rbp ) movq % rdi , - 5 6 (% rbp ) movq % rdx , - 8 0 (% rbp ) movq % rcx , - 7 2 (% rbp ) movq $ 0 , - 4 0 (% rbp ) . LBB 2 : movq $ 0 , - 8 (% rbp ) movq $ 0 , - 1 6 (% rbp ) movq $ 0 , - 2 4 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 4 6 : . LBB 5 : nop . LBE 5 : . LBB 6 : . LBB 7 : . LBB 8 : jmp . L 3 . L 4 2 : . LBB 9 : nop . LBE 9 : . LBB 1 0 : . LBB 1 1 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 4 cmpq % rax , - 8 (% rbp ) jge . L 4 movq - 6 4 (% rbp ), % rdx movq - 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 6 , % al je . L 5 jmp . L 3 4 . L 4 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 : . LBB 1 2 : addq $ 1 , - 8 (% rbp ) jmp . L 7 . L 3 4 : . LBE 1 2 : . LBE 1 1 : . LBB 1 3 : . LBB 1 4 : cmpq $ 0 , - 2 4 (% rbp ) sete % al testb % al , % al je . L 8 . LBB 1 5 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 9 cmpq % rax , - 8 (% rbp ) jge . L 9 movq - 6 4 (% rbp ), % rdx movq - 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 8 , % al sete % al jmp . L 8 . L 9 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 8 : . LBE 1 5 : . LBE 1 4 : testb % al , % al jne . L 4 1 . LBE 1 3 : movq - 5 6 (% rbp ), % rax cmpq $ 0 , - 8 (% rbp ) js . L 1 2 cmpq % rax , - 8 (% rbp ) jl . L 3 5 . L 1 2 : movq - 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : movq - 2 4 (% rbp ), % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax movq % rax , % rcx movq - 6 4 (% rbp ), % rdx movq - 8 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax subl $ 4 8 , % eax movzbl % al , % eax addq % rcx , % rax movq % rax , - 2 4 (% rbp ) jmp . L 1 1 . L 4 1 : . LBB 1 7 : . LBB 1 6 : nop . L 1 1 : . LBE 1 6 : . LBE 1 7 : . LBE 1 0 : . LBB 1 8 : addq $ 1 , - 8 (% rbp ) . L 3 : . LBE 1 8 : movq - 5 6 (% rbp ), % rax cmpq % rax , - 8 (% rbp ) jl . L 4 2 . L 7 : . LBE 8 : . LBE 7 : . LBB 1 9 : . LBB 2 0 : jmp . L 1 5 . L 4 4 : . LBB 2 1 : nop . LBE 2 1 : . LBB 2 2 : . LBB 2 3 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 1 6 cmpq % rax , - 1 6 (% rbp ) jge . L 1 6 movq - 8 0 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 6 , % al je . L 1 7 jmp . L 3 7 . L 1 6 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : . LBB 2 4 : addq $ 1 , - 1 6 (% rbp ) jmp . L 1 9 . L 3 7 : . LBE 2 4 : . LBE 2 3 : . LBB 2 5 : . LBB 2 6 : cmpq $ 0 , - 3 2 (% rbp ) sete % al testb % al , % al je . L 2 0 . LBB 2 7 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 2 1 cmpq % rax , - 1 6 (% rbp ) jge . L 2 1 movq - 8 0 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb $ 4 8 , % al sete % al jmp . L 2 0 . L 2 1 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 2 0 : . LBE 2 7 : . LBE 2 6 : testb % al , % al jne . L 4 3 . LBE 2 5 : movq - 7 2 (% rbp ), % rax cmpq $ 0 , - 1 6 (% rbp ) js . L 2 4 cmpq % rax , - 1 6 (% rbp ) jl . L 3 8 . L 2 4 : movq - 1 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 3 2 (% rbp ), % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax movq % rax , % rcx movq - 8 0 (% rbp ), % rdx movq - 1 6 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax subl $ 4 8 , % eax movzbl % al , % eax addq % rcx , % rax movq % rax , - 3 2 (% rbp ) jmp . L 2 3 . L 4 3 : . LBB 2 9 : . LBB 2 8 : nop . L 2 3 : . LBE 2 8 : . LBE 2 9 : . LBE 2 2 : . LBB 3 0 : addq $ 1 , - 1 6 (% rbp ) . L 1 5 : . LBE 3 0 : movq - 7 2 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) jl . L 4 4 . L 1 9 : . LBE 2 0 : . LBE 1 9 : . LBB 3 1 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jne . L 4 5 . LBE 3 1 : . LBB 3 3 : movl $ 0 , % edx movl $ 0 , % eax movq % rdx , - 2 4 (% rbp ) movq % rax , - 3 2 (% rbp ) . L 2 : . LBE 3 3 : . LBE 6 : . LBB 3 5 : movq - 5 6 (% rbp ), % rax cmpq % rax , - 8 (% rbp ) setl % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 2 9 . LBB 3 6 : movq - 7 2 (% rbp ), % rax cmpq % rax , - 1 6 (% rbp ) setl % al . L 2 9 : . LBE 3 6 : . LBE 3 5 : testb % al , % al jne . L 4 6 jmp . L 2 8 . L 4 5 : . LBB 3 7 : . LBB 3 4 : . LBB 3 2 : nop . L 2 8 : . LBE 3 2 : . LBE 3 4 : . LBE 3 7 : . LBE 4 : . LBE 3 : . LBB 3 8 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jle . L 3 1 . LBB 3 9 : . LBB 4 0 : movq $ 1 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 3 2 . L 3 1 : . LBE 4 0 : . LBE 3 9 : . LBE 3 8 : . LBB 4 1 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jge . L 3 3 . LBB 4 2 : . LBB 4 3 : movq $- 1 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax jmp . L 3 2 . L 3 3 : . LBE 4 3 : . LBE 4 2 : . LBE 4 1 : . LBB 4 4 : movq $ 0 , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax . L 3 2 : . LBE 4 4 : . LBE 2 : leave ret
. LFB 0 : leaq - 3 2 8 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 5 movl $ 3 2 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 3 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 8 8 , % rsp movq % rdi , - 3 1 2 (% rbp ) movq $ 0 , - 7 2 (% rbp ) . LBB 2 : . LBB 3 : cmpq $ 0 , - 3 1 2 (% rbp ) jne . L 2 . LBB 4 : . LBB 5 : movq $ 0 , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax jmp . L 2 8 . L 2 : . LBE 5 : . LBE 4 : . LBE 3 : movq - 3 1 2 (% rbp ), % rax movq % rax , - 2 8 0 (% rbp ) leaq - 2 8 0 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 1 , - 2 9 6 (% rbp ) movq $ 1 , - 2 8 8 (% rbp ) movq $ 0 , - 4 0 (% rbp ) movq $ 0 , - 4 8 (% rbp ) movq $ 0 , - 5 6 (% rbp ) movabsq $- 9 2 2 3 3 7 2 0 3 6 8 5 4 7 7 5 8 0 8 , % rax movq % rax , - 6 4 (% rbp ) . L 2 7 : . LBB 6 : . LBB 7 : . LBB 8 : movq - 2 9 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) . LBB 9 : cmpq $ 0 , - 8 0 (% rbp ) je . L 3 3 . LBE 9 : addq $ 1 , - 4 8 (% rbp ) . LBB 1 1 : movq $ 0 , - 8 8 (% rbp ) . LBB 1 2 : movq - 2 8 8 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 6 cmpq % rax , - 8 0 (% rbp ) jg . L 6 cmpq $ 0 , - 8 0 (% rbp ) jns . L 7 jmp . L 3 0 . L 6 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceAcap @ PLT . L 3 0 : movq - 8 0 (% rbp ), % rax movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 7 : movq - 3 0 4 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 2 6 4 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) . LBB 1 3 : . LBB 1 4 : movq - 2 7 2 (% rbp ), % rax movq - 2 6 4 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 2 5 6 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % r 1 4 movl $ 0 , % ebx . LBE 1 4 : jmp . L 9 . L 3 4 : . LBB 1 5 : nop . LBE 1 5 : . LBB 1 6 : . LBB 1 7 : movq - 2 3 2 (% rbp ), % rax testq % rbx , % rbx js . L 1 0 cmpq % rax , % rbx jge . L 1 0 movq - 2 4 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 7 : . LBB 1 8 : movq % rax , - 8 8 (% rbp ) . LBE 1 8 : . LBB 1 9 : movq - 8 8 (% rbp ), % rax movq (% rax ), % rax addq % rax , - 5 6 (% rbp ) . LBB 2 0 : movq - 8 8 (% rbp ), % rax movq 8 (% rax ), % rax testq % rax , % rax jne . L 1 1 . LBB 2 1 : jmp . L 1 2 . L 1 0 : . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBB 3 4 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 1 : . LBE 3 4 : . LBB 3 5 : . LBB 2 7 : . LBB 2 6 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 2 movq - 8 8 (% rbp ), % rax movq 8 (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 3 . LBB 2 2 : movq - 2 0 8 (% rbp ), % rsi leaq - 1 4 4 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 main . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 2 2 : jmp . L 1 4 . L 1 3 : . LBB 2 3 : movq - 2 0 8 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 1 4 : . LBE 2 3 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 5 . LBB 2 4 : movq % r 1 3 , (% rax ) jmp . L 1 2 . L 1 5 : . LBE 2 4 : . LBB 2 5 : movq % r 1 3 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 2 : . LBE 2 5 : . LBE 2 6 : . LBE 2 7 : . LBB 2 8 : movq - 8 8 (% rbp ), % rax movq 1 6 (% rax ), % rax testq % rax , % rax je . L 1 6 . LBB 2 9 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 2 movq - 8 8 (% rbp ), % rax movq 1 6 (% rax ), % r 1 3 leaq 1 (% r 1 2 ), % rax movq - 1 6 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 7 . LBB 3 0 : movq - 1 7 6 (% rbp ), % rsi leaq - 1 1 2 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 1 main . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 8 8 (% rbp ) . LBE 3 0 : jmp . L 1 8 . L 1 7 : . LBB 3 1 : movq - 1 7 6 (% rbp ), % rcx movq - 1 6 0 (% rbp ), % rdx movq % rcx , - 3 0 4 (% rbp ) movq % rax , - 2 9 6 (% rbp ) movq % rdx , - 2 8 8 (% rbp ) . L 1 8 : . LBE 3 1 : movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 9 . LBB 3 2 : movq % r 1 3 , (% rax ) jmp . L 1 6 . L 1 9 : . LBE 3 2 : . LBB 3 3 : movq % r 1 3 , % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 6 : . LBE 3 3 : . LBE 2 9 : . LBE 2 8 : . LBE 3 5 : . LBE 1 6 : . LBB 3 6 : addq $ 1 , % rbx . L 9 : . LBE 3 6 : cmpq % r 1 4 , % rbx jl . L 3 4 . LBE 1 3 : . LBE 1 2 : . LBE 1 1 : . LBB 3 7 : movq - 6 4 (% rbp ), % rax cmpq - 5 6 (% rbp ), % rax jge . L 2 2 . LBB 3 8 : movq - 5 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) . L 2 2 : . LBE 3 8 : . LBE 3 7 : movq $ 0 , - 5 6 (% rbp ) movq - 2 8 8 (% rbp ), % rax cmpq $ 0 , - 8 0 (% rbp ) js . L 2 3 cmpq % rax , - 8 0 (% rbp ) jle . L 3 2 . L 2 3 : movq - 8 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicSliceB @ PLT . L 3 2 : movq - 3 0 4 (% rbp ), % rdx movq - 2 8 8 (% rbp ), % rax cmpq % rax , - 8 0 (% rbp ) je . L 2 5 movq - 8 0 (% rbp ), % rax salq $ 3 , % rax jmp . L 2 6 . L 2 5 : movl $ 0 , % eax . L 2 6 : leaq (% rdx ,% rax ), % rcx movq - 2 9 6 (% rbp ), % rax subq - 8 0 (% rbp ), % rax movq % rax , % rdx movq - 2 8 8 (% rbp ), % rax subq - 8 0 (% rbp ), % rax movq % rcx , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq % rax , - 2 8 8 (% rbp ) . LBE 8 : jmp . L 2 7 . L 3 3 : . LBB 4 0 : . LBB 3 9 : . LBB 1 0 : nop . LBE 1 0 : . LBE 3 9 : . LBE 4 0 : . LBE 7 : . LBE 6 : . LBB 4 1 : movq - 4 0 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq - 7 2 (% rbp ), % rax . L 2 8 : . LBE 4 1 : . LBE 2 : addq $ 2 8 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 3 4 movl $ 2 0 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 3 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 subq $ 1 6 0 , % rsp movq % rdi , - 1 8 4 (% rbp ) leaq . LC 2 (% rip ), % rax movl $ 2 7 , % edx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 7 6 (% rbp ), % rdx movq - 1 6 8 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . problem 5 5 7 . reverseWords movq % rax , % r 1 2 movq % rdx , % r 1 3 leaq string .. d (% rip ), % r 1 4 leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movq % r 1 2 , - 1 2 8 (% rbp ) movq % r 1 3 , - 1 2 0 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 2 . LBB 1 6 : movq - 1 3 6 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rax movq - 1 2 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 6 : jmp . L 3 3 . L 3 2 : . LBB 1 7 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 3 3 : . LBE 1 7 : movq - 1 3 6 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 1 1 2 (% rbp ) movq % r 1 5 , - 1 0 4 (% rbp ) leaq - 1 1 2 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq $ 1 , - 8 8 (% rbp ) movq $ 1 , - 8 0 (% rbp ) leaq - 6 4 (% rbp ), % rax subq $ 8 , % rsp pushq - 8 0 (% rbp ) pushq - 8 8 (% rbp ) pushq - 9 6 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) leaq - 3 2 (% rbp ), % rsp popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 4 8 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 2 8 7 9 movl $ 1 0 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 5 9 3 : ret . L 1 2 8 7 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 7 2 , % rsp movb $ 0 , - 3 3 (% rbp ) . LBB 1 0 3 6 0 : call runtime . makemap_small @ PLT movq % rax , - 4 8 (% rbp ) . LBB 1 0 3 6 1 : movq $ 0 , - 5 6 (% rbp ) . LBB 1 0 3 6 2 : . LBB 1 0 3 6 3 : . LBB 1 0 3 6 4 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 9 6 (% rbp ) movq % rdx , - 8 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 8 (% rbp ), % r 1 2 movl $ 0 , % ebx . LBE 1 0 3 6 4 : jmp . L 1 2 8 6 9 . L 1 2 8 7 8 : . LBB 1 0 3 6 5 : nop . LBE 1 0 3 6 5 : . LBB 1 0 3 6 6 : . LBB 1 0 3 6 7 : movq - 8 8 (% rbp ), % rax testq % rbx , % rbx js . L 1 2 8 7 0 cmpq % rax , % rbx jge . L 1 2 8 7 0 movq - 9 6 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 1 0 3 6 7 : . LBB 1 0 3 6 8 : movq % rax , - 5 6 (% rbp ) . LBE 1 0 3 6 8 : . LBB 1 0 3 6 9 : . LBB 1 0 3 7 0 : movq - 5 6 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) leaq - 6 4 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 bool (% rip ), % rdi call runtime . mapaccess 1 _fast 6 4 @ PLT movzbl (% rax ), % eax testb % al , % al jne . L 1 2 8 7 1 jmp . L 1 2 8 7 6 . L 1 2 8 7 0 : . LBE 1 0 3 7 0 : . LBE 1 0 3 6 9 : . LBB 1 0 3 7 5 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 1 2 8 7 1 : . LBE 1 0 3 7 5 : . LBB 1 0 3 7 6 : . LBB 1 0 3 7 3 : . LBB 1 0 3 7 1 : . LBB 1 0 3 7 2 : movb $ 1 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax jmp . L 1 2 8 7 3 . L 1 2 8 7 6 : . LBE 1 0 3 7 2 : . LBE 1 0 3 7 1 : . LBE 1 0 3 7 3 : . LBB 1 0 3 7 4 : movq - 5 6 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movl $ 1 , % r 1 3 d leaq - 7 2 (% rbp ), % rax movq (% rax ), % rdx movq - 4 8 (% rbp ), % rax movq % rax , % rsi leaq type .. map . 6 int . 7 bool (% rip ), % rdi call runtime . mapassign_fast 6 4 @ PLT movb % r 1 3 b , (% rax ) . LBE 1 0 3 7 4 : . LBE 1 0 3 7 6 : . LBE 1 0 3 6 6 : . LBB 1 0 3 7 7 : addq $ 1 , % rbx . L 1 2 8 6 9 : . LBE 1 0 3 7 7 : cmpq % r 1 2 , % rbx jl . L 1 2 8 7 8 . LBE 1 0 3 6 3 : . LBE 1 0 3 6 2 : . LBE 1 0 3 6 1 : . LBB 1 0 3 7 8 : movb $ 0 , - 3 3 (% rbp ) movzbl - 3 3 (% rbp ), % eax . L 1 2 8 7 3 : . LBE 1 0 3 7 8 : . LBE 1 0 3 6 0 : addq $ 7 2 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 4 movl $ 8 8 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 : ret . L 4 4 : pushq % rbp movq % rsp , % rbp subq $ 8 0 , % rsp movq % rsi , % rax movq % rdi , % r 8 movq % r 8 , % rsi movq % r 9 , % rdi movq % rax , % rdi movq % rsi , - 6 4 (% rbp ) movq % rdi , - 5 6 (% rbp ) movq % rdx , - 8 0 (% rbp ) movq % rcx , - 7 2 (% rbp ) movq $ 0 , - 3 2 (% rbp ) . LBB 1 2 : movq - 5 6 (% rbp ), % rax movq % rax , - 4 0 (% rbp ) movq - 7 2 (% rbp ), % rax movq % rax , - 4 8 (% rbp ) . LBB 1 3 : movq - 4 8 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jle . L 2 3 . LBB 1 4 : . LBB 1 5 : movq $- 1 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 2 4 . L 2 3 : . LBE 1 5 : . LBE 1 4 : . LBE 1 3 : . LBB 1 6 : movq $ 0 , - 8 (% rbp ) . LBB 1 7 : jmp . L 2 5 . L 4 3 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : movq $ 0 , - 1 6 (% rbp ) . LBB 2 0 : movq $ 0 , - 2 4 (% rbp ) . LBB 2 1 : jmp . L 2 6 . L 4 2 : . LBB 2 2 : nop . LBE 2 2 : . LBB 2 3 : . LBB 2 4 : movq - 8 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax addq % rdx , % rax movq - 5 6 (% rbp ), % rdx testq % rax , % rax js . L 2 7 cmpq % rdx , % rax jl . L 3 7 . L 2 7 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 7 : movq - 7 2 (% rbp ), % rdx cmpq $ 0 , - 2 4 (% rbp ) js . L 2 9 cmpq % rdx , - 2 4 (% rbp ) jl . L 3 8 . L 2 9 : movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 3 8 : movq - 6 4 (% rbp ), % rdx addq % rdx , % rax movzbl (% rax ), % edx movq - 8 0 (% rbp ), % rcx movq - 2 4 (% rbp ), % rax addq % rcx , % rax movzbl (% rax ), % eax cmpb % al , % dl jne . L 4 1 . LBE 2 4 : addq $ 1 , - 1 6 (% rbp ) . LBE 2 3 : . LBB 2 7 : addq $ 1 , - 2 4 (% rbp ) . L 2 6 : . LBE 2 7 : movq - 2 4 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jl . L 4 2 jmp . L 3 2 . L 4 1 : . LBB 2 8 : . LBB 2 6 : . LBB 2 5 : nop . L 3 2 : . LBE 2 5 : . LBE 2 6 : . LBE 2 8 : . LBE 2 1 : . LBE 2 0 : . LBB 2 9 : movq - 1 6 (% rbp ), % rax cmpq - 4 8 (% rbp ), % rax jne . L 3 4 . LBB 3 0 : . LBB 3 1 : movq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 2 4 . L 3 4 : . LBE 3 1 : . LBE 3 0 : . LBE 2 9 : . LBE 1 9 : . LBB 3 2 : addq $ 1 , - 8 (% rbp ) . L 2 5 : . LBE 3 2 : movq - 4 0 (% rbp ), % rax subq - 4 8 (% rbp ), % rax addq $ 1 , % rax cmpq % rax , - 8 (% rbp ) jl . L 4 3 . LBE 1 7 : . LBE 1 6 : . LBB 3 3 : movq $- 1 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 2 4 : . LBE 3 3 : . LBE 1 2 : leave ret
. LFB 0 : leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 1 movl $ 2 6 4 , % r 1 0 d movl $ 4 8 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 2 4 0 , % rsp movq % rdi , - 2 4 8 (% rbp ) movq 4 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 2 4 0 (% rbp ) movq % rbx , - 2 3 2 (% rbp ) movq % rbx , - 2 2 4 (% rbp ) movq - 2 3 2 (% rbp ), % rax movq 4 8 (% rbp ), % rdx cmpq % rax , % rdx cmovle % rdx , % rax leaq 0 (,% rax , 8 ), % rdx movq 4 0 (% rbp ), % rcx movq - 2 4 0 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memmove @ PLT movq main . subsetRes (% rip ), % rax movq 8 + main . subsetRes (% rip ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 + main . subsetRes (% rip ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 0 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 1 9 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 2 . LBB 2 : leaq main . subsetRes (% rip ), % rbx movq - 2 0 8 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq type ... 6 . 7 int (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % rax movq % rax , 8 (% rbx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rbx ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 3 . LBB 3 : movq - 1 7 6 (% rbp ), % rax movq % rax , (% rbx ) jmp . L 4 . L 3 : . LBE 3 : . LBB 4 : movq - 1 7 6 (% rbp ), % rax movq % rax , % rdx movq % rbx , % rax movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT jmp . L 4 . L 2 : . LBE 4 : . LBE 2 : . LBB 5 : movq - 2 0 8 (% rbp ), % rcx movq - 1 9 2 (% rbp ), % rdx movq % rcx , main . subsetRes (% rip ) movq % rax , 8 + main . subsetRes (% rip ) movq % rdx , 1 6 + main . subsetRes (% rip ) . L 4 : . LBE 5 : movq main . subsetRes (% rip ), % rax movq 8 + main . subsetRes (% rip ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq 1 6 + main . subsetRes (% rip ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rdx movq % r 1 2 , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 3 , % rax addq % rdx , % rax movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rbx movq % rcx , - 1 4 4 (% rbp ) movq % rbx , - 1 3 6 (% rbp ) movq - 2 2 4 (% rbp ), % rdx movq % rdx , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rdx movq % rdx , 8 (% rax ) movq - 1 2 8 (% rbp ), % rdx movq % rdx , 1 6 (% rax ) leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 . LBB 6 : movq - 1 4 4 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 6 . L 5 : . LBE 6 : . LBB 7 : movq - 1 4 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 : . LBE 7 : . LBB 8 : movq - 2 4 8 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . LBB 9 : jmp . L 7 . L 2 0 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rbx movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 8 cmpq % rax , - 2 4 (% rbp ) jl . L 1 7 . L 8 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 7 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % r 1 2 leaq 1 (% rbx ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 0 . LBB 1 2 : movq - 1 1 2 (% rbp ), % rsi leaq - 4 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , 4 0 (% rbp ) movq % rdx , 4 8 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , 5 6 (% rbp ) . LBE 1 2 : jmp . L 1 1 . L 1 0 : . LBB 1 3 : movq - 1 1 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rcx , 4 0 (% rbp ) movq % rax , 4 8 (% rbp ) movq % rdx , 5 6 (% rbp ) . L 1 1 : . LBE 1 3 : movq 4 0 (% rbp ), % rax movq 4 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq 5 6 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq % r 1 2 , (% rax ) movq - 2 4 (% rbp ), % rax addq $ 1 , % rax pushq 5 6 (% rbp ) pushq 4 8 (% rbp ) pushq 4 0 (% rbp ) pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rax , % rdi call main . traceBackSubset addq $ 4 8 , % rsp movq 4 8 (% rbp ), % rax leaq - 1 (% rax ), % rdi movq 5 6 (% rbp ), % rax testq % rdi , % rdi js . L 1 2 cmpq % rax , % rdi jg . L 1 2 testq % rdi , % rdi jns . L 1 3 jmp . L 1 8 . L 1 2 : movq % rax , % rsi call runtime . goPanicSliceAcap @ PLT . L 1 8 : movq % rdi , % rsi movl $ 0 , % edi call runtime . goPanicSliceB @ PLT . L 1 3 : movq 4 0 (% rbp ), % rdx movq 5 6 (% rbp ), % rax movq % rdx , 4 0 (% rbp ) movq % rdi , 4 8 (% rbp ) movq % rax , 5 6 (% rbp ) . LBE 1 1 : . LBB 1 4 : addq $ 1 , - 2 4 (% rbp ) . L 7 : . LBE 1 4 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 2 0 . LBE 9 : . LBE 8 : leaq - 1 6 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % rbp ret
leaq - 5 3 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 2 movl $ 5 3 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 4 : ret . L 6 2 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 8 8 , % rsp movq % rdi , - 4 8 8 (% rbp ) leaq type ... 6 4 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 5 6 (% rbp ) leaq . LC 2 7 (% rip ), % rax movq % rax , - 5 2 8 (% rbp ) movq $ 1 0 , - 5 2 0 (% rbp ) movdqa - 5 2 8 (% rbp ), % xmm 0 movups % xmm 0 , - 4 1 6 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 8 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq $ 2 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq $ 4 , 3 2 (% rax ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 4 0 0 (% rbp ) movq $ 5 , - 3 9 2 (% rbp ) movq $ 5 , - 3 8 4 (% rbp ) movq $ 2 , - 3 7 6 (% rbp ) leaq . LC 2 9 (% rip ), % rax movq % rax , - 5 1 2 (% rbp ) movq $ 1 0 , - 5 0 4 (% rbp ) movdqa - 5 1 2 (% rbp ), % xmm 1 movups % xmm 1 , - 3 6 8 (% rbp ) leaq type ... 6 1 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 4 0 (% rbp ) movq - 4 4 0 (% rbp ), % rax movq $ 2 , (% rax ) movq - 4 4 0 (% rbp ), % rax movq % rax , - 3 5 2 (% rbp ) movq $ 1 , - 3 4 4 (% rbp ) movq $ 1 , - 3 3 6 (% rbp ) movq $ 0 , - 3 2 8 (% rbp ) leaq . LC 3 0 (% rip ), % r 1 4 movl $ 1 0 , % r 1 5 d movq % r 1 4 , - 3 2 0 (% rbp ) movq % r 1 5 , - 3 1 2 (% rbp ) leaq type ... 6 3 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 3 2 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq $ 1 0 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 4 , 1 6 (% rax ) movq - 4 3 2 (% rbp ), % rax movq % rax , - 3 0 4 (% rbp ) movq $ 3 , - 2 9 6 (% rbp ) movq $ 3 , - 2 8 8 (% rbp ) movq $ 1 , - 2 8 0 (% rbp ) leaq . LC 2 8 (% rip ), % r 1 2 movl $ 1 0 , % r 1 3 d movq % r 1 2 , - 2 7 2 (% rbp ) movq % r 1 3 , - 2 6 4 (% rbp ) leaq type ... 6 7 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 2 4 (% rbp ) movq - 4 2 4 (% rbp ), % rax movq $ 4 , (% rax ) movq $ 1 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq $ 1 , 3 2 (% rax ) movq $ 1 , 4 0 (% rax ) movq $ 1 , 4 8 (% rax ) movq - 4 2 4 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) movq $ 7 , - 2 4 8 (% rbp ) movq $ 7 , - 2 4 0 (% rbp ) movq $ 2 , - 2 3 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 4 8 . LBB 5 0 : movq - 4 5 6 (% rbp ), % rax movq - 4 1 6 (% rbp ), % rcx movq - 4 0 8 (% rbp ), % rbx movq % rcx , (% rax ) movq % rbx , 8 (% rax ) movq - 4 0 0 (% rbp ), % rcx movq - 3 9 2 (% rbp ), % rbx movq % rcx , 1 6 (% rax ) movq % rbx , 2 4 (% rax ) movq - 3 8 4 (% rbp ), % rcx movq - 3 7 6 (% rbp ), % rbx movq % rcx , 3 2 (% rax ) movq % rbx , 4 0 (% rax ) movq - 3 6 8 (% rbp ), % rcx movq - 3 6 0 (% rbp ), % rbx movq % rcx , 4 8 (% rax ) movq % rbx , 5 6 (% rax ) movq - 3 5 2 (% rbp ), % rcx movq - 3 4 4 (% rbp ), % rbx movq % rcx , 6 4 (% rax ) movq % rbx , 7 2 (% rax ) movq - 3 3 6 (% rbp ), % rcx movq - 3 2 8 (% rbp ), % rbx movq % rcx , 8 0 (% rax ) movq % rbx , 8 8 (% rax ) movq - 3 2 0 (% rbp ), % rcx movq - 3 1 2 (% rbp ), % rbx movq % rcx , 9 6 (% rax ) movq % rbx , 1 0 4 (% rax ) movq - 3 0 4 (% rbp ), % rcx movq - 2 9 6 (% rbp ), % rbx movq % rcx , 1 1 2 (% rax ) movq % rbx , 1 2 0 (% rax ) movq - 2 8 8 (% rbp ), % rcx movq - 2 8 0 (% rbp ), % rbx movq % rcx , 1 2 8 (% rax ) movq % rbx , 1 3 6 (% rax ) movq - 2 7 2 (% rbp ), % rcx movq - 2 6 4 (% rbp ), % rbx movq % rcx , 1 4 4 (% rax ) movq % rbx , 1 5 2 (% rax ) movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq % rcx , 1 6 0 (% rax ) movq % rbx , 1 6 8 (% rax ) movq - 2 4 0 (% rbp ), % rcx movq - 2 3 2 (% rbp ), % rbx movq % rcx , 1 7 6 (% rax ) movq % rbx , 1 8 4 (% rax ) . LBE 5 0 : jmp . L 4 9 . L 4 8 : . LBB 5 1 : movq - 4 5 6 (% rbp ), % rax leaq - 4 1 6 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 4 x . 7 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 4 9 : . LBE 5 1 : movq - 4 5 6 (% rbp ), % rax movq % rax , - 4 8 0 (% rbp ) movq $ 4 , - 4 7 2 (% rbp ) movq $ 4 , - 4 6 4 (% rbp ) . LBB 5 2 : leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 5 6 (% rbp ) . LBB 5 3 : . LBB 5 4 : . LBB 5 5 : movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 5 5 : jmp . L 5 0 . L 6 1 : . LBB 5 6 : nop . LBE 5 6 : . LBB 5 7 : . LBB 5 8 : movq - 1 6 8 (% rbp ), % rax testq % rbx , % rbx js . L 5 1 cmpq % rax , % rbx jge . L 5 1 movq - 1 7 6 (% rbp ), % rdx movq % rbx , % rcx movq % rcx , % rax addq % rax , % rax addq % rcx , % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rsi movq 8 (% rax ), % rdi movq % rsi , - 2 2 4 (% rbp ) movq % rdi , - 2 1 6 (% rbp ) movq 1 6 (% rax ), % rsi movq 2 4 (% rax ), % rdi movq % rsi , - 2 0 8 (% rbp ) movq % rdi , - 2 0 0 (% rbp ) movq 4 0 (% rax ), % rdx movq 3 2 (% rax ), % rax movq % rax , - 1 9 2 (% rbp ) movq % rdx , - 1 8 4 (% rbp ) . LBE 5 8 : . LBB 5 9 : movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq - 1 8 4 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 5 6 (% rbp ), % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx je . L 5 2 jmp . L 5 9 . L 5 1 : . LBE 5 9 : . LBB 6 2 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 5 2 : . LBE 6 2 : . LBB 6 3 : . LBB 6 0 : movq - 1 4 4 (% rbp ), % rsi movq - 1 3 6 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) jmp . L 5 4 . L 5 9 : . LBE 6 0 : . LBB 6 1 : leaq - 1 4 4 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 4 : . LBE 6 1 : . LBE 6 3 : . LBB 6 4 : leaq go . Solution . TestSolution 3 .. func 1 (% rip ), % r 1 4 movq - 5 6 (% rbp ), % r 1 2 leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 8 (% rbp ) movq % r 1 4 , - 8 0 (% rbp ) movq % r 1 2 , - 7 2 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 5 5 . LBB 6 5 : movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 6 5 : jmp . L 5 6 . L 5 5 : . LBB 6 6 : movq - 8 8 (% rbp ), % rax leaq - 8 0 (% rbp ), % rdx movq % rax , % rsi leaq type .. struct . 4 . 4 x . 5 . f . f . 0 . 1 . 4 void . 5 . 2 . go . Solution . c 1 . 0 . 1 struct . 4 . go . Solution . name . 0 string . 2 . go . Solution . inputs . 0 . 6 . 7 int . 2 . go . Solution . expect . 0 int . 5 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 5 6 : . LBE 6 6 : movq - 8 8 (% rbp ), % rcx movq - 5 6 (% rbp ), % rax movq (% rax ), % rsi movq 8 (% rax ), % rdx movq - 4 8 8 (% rbp ), % rax movq % rax , % rdi call testing . T . Run @ PLT . LBE 6 4 : . LBE 5 7 : . LBB 6 7 : addq $ 1 , % rbx . L 5 0 : . LBE 6 7 : cmpq % r 1 3 , % rbx jl . L 6 1 . LBE 5 4 : . LBE 5 3 : . LBE 5 2 : addq $ 4 8 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 3 9 7 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 0 3 9 5 movl $ 1 0 4 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 4 9 4 : ret . L 1 0 3 9 5 : pushq % rbp movq % rsp , % rbp pushq % r 1 2 pushq % rbx subq $ 8 0 , % rsp movq % rdi , - 8 8 (% rbp ) movq % rsi , - 9 6 (% rbp ) movq $ 0 , - 8 0 (% rbp ) movq $ 0 , - 7 2 (% rbp ) movq $ 0 , - 6 4 (% rbp ) . LBB 8 3 0 6 : . LBB 8 3 0 7 : movq $ 0 , - 2 4 (% rbp ) movq 2 4 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 3 2 (% rbp ) . LBB 8 3 0 8 : jmp . L 1 0 3 7 4 . L 1 0 3 9 4 : . LBB 8 3 0 9 : nop . LBE 8 3 0 9 : . LBB 8 3 1 0 : . LBB 8 3 1 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 0 3 7 5 cmpq % rax , - 2 4 (% rbp ) jl . L 1 0 3 8 9 . L 1 0 3 7 5 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 3 8 9 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 0 3 7 7 cmpq % rax , - 3 2 (% rbp ) jl . L 1 0 3 9 0 . L 1 0 3 7 7 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 3 9 0 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax addq % rdx , % rax cmpq % rax , - 9 6 (% rbp ) jne . L 1 0 3 7 9 . LBB 8 3 1 2 : . LBB 8 3 1 3 : movq - 2 4 (% rbp ), % rax leaq 1 (% rax ), % r 1 2 movq - 3 2 (% rbp ), % rax leaq 1 (% rax ), % rbx leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 8 (% rbp ) movq - 4 8 (% rbp ), % rax movq % r 1 2 , (% rax ) movq % rbx , 8 (% rax ) movq - 4 8 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 6 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) jmp . L 1 0 3 7 3 . L 1 0 3 7 9 : . LBE 8 3 1 3 : . LBE 8 3 1 2 : . LBE 8 3 1 1 : . LBB 8 3 1 4 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 0 3 8 1 cmpq % rax , - 2 4 (% rbp ) jl . L 1 0 3 9 1 . L 1 0 3 8 1 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 3 9 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 1 0 3 8 3 cmpq % rax , - 3 2 (% rbp ) jl . L 1 0 3 9 2 . L 1 0 3 8 3 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 0 3 9 2 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq 1 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax movq (% rax ), % rax addq % rdx , % rax cmpq % rax , - 9 6 (% rbp ) jge . L 1 0 3 8 5 . LBB 8 3 1 5 : subq $ 1 , - 3 2 (% rbp ) . LBE 8 3 1 5 : jmp . L 1 0 3 7 4 . L 1 0 3 8 5 : . LBB 8 3 1 6 : addq $ 1 , - 2 4 (% rbp ) . L 1 0 3 7 4 : . LBE 8 3 1 6 : . LBE 8 3 1 4 : . LBE 8 3 1 0 : movq - 2 4 (% rbp ), % rax cmpq - 3 2 (% rbp ), % rax jl . L 1 0 3 9 4 . LBE 8 3 0 8 : . LBE 8 3 0 7 : . LBB 8 3 1 7 : leaq type ... 6 2 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 4 0 (% rbp ) movq - 4 0 (% rbp ), % rax movq $- 1 , (% rax ) movq $- 1 , 8 (% rax ) movq - 4 0 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 2 , - 7 2 (% rbp ) movq $ 2 , - 6 4 (% rbp ) movq - 8 8 (% rbp ), % rcx movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 6 4 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . L 1 0 3 7 3 : . LBE 8 3 1 7 : . LBE 8 3 0 6 : movq - 8 8 (% rbp ), % rax addq $ 8 0 , % rsp popq % rbx popq % r 1 2 popq % rbp ret
. LFB 0 : leaq - 5 2 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 2 movl $ 5 2 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 7 2 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 5 0 4 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq $ 0 , - 4 3 2 (% rbp ) movq $ 0 , - 4 2 4 (% rbp ) . LBB 2 : leaq - 9 6 (% rbp ), % rdi movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx leaq - 4 1 6 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . stringtoslicerune @ PLT movq - 8 8 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int 3 2 .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 6 4 (% rbp ) movq % rbx , - 4 5 6 (% rbp ) movq % rbx , - 4 4 8 (% rbp ) leaq - 6 4 (% rbp ), % rdi movq - 5 1 2 (% rbp ), % rax movq - 5 0 4 (% rbp ), % rdx leaq - 2 8 8 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . stringtoslicerune @ PLT movq - 6 4 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 4 8 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 4 5 6 (% rbp ), % rax movq - 1 5 2 (% rbp ), % rdx cmpq % rax , % rdx cmovle % rdx , % rax leaq 0 (,% rax , 4 ), % rdx movq - 1 6 0 (% rbp ), % rcx movq - 4 6 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memmove @ PLT movq - 4 5 6 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int 3 2 .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 4 9 6 (% rbp ) movq % rbx , - 4 8 8 (% rbp ) movq % rbx , - 4 8 0 (% rbp ) movb $ 1 , - 1 7 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 7 1 : . LBB 5 : nop . LBE 5 : . LBB 6 : movb $ 0 , - 1 7 (% rbp ) . LBB 7 : movq $ 0 , - 3 2 (% rbp ) movl $ 0 , - 3 6 (% rbp ) . LBB 8 : . LBB 9 : . LBB 1 0 : movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % rdi movl $ 0 , % eax . LBE 1 0 : jmp . L 3 . L 7 0 : . LBB 1 1 : nop . LBE 1 1 : . LBB 1 2 : . LBB 1 3 : movq - 1 2 0 (% rbp ), % rdx testq % rax , % rax js . L 4 cmpq % rdx , % rax jge . L 4 movq - 1 2 8 (% rbp ), % rdx movq % rax , % rcx salq $ 2 , % rcx addq % rcx , % rdx movl (% rdx ), % edx . LBE 1 3 : . LBB 1 4 : movq % rax , - 3 2 (% rbp ) movl % edx , - 3 6 (% rbp ) . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : cmpl $ 4 6 , - 3 6 (% rbp ) je . L 5 jmp . L 4 9 . L 4 : . LBE 1 6 : . LBE 1 5 : . LBB 3 9 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 : . LBE 3 9 : . LBB 4 0 : . LBB 3 8 : . LBB 1 7 : . LBB 1 8 : . LBB 1 9 : movl $ 1 , % ecx . LBB 2 0 : . LBB 2 1 : . LBB 2 2 : cmpq $ 0 , - 3 2 (% rbp ) setne % dl testb % dl , % dl je . L 7 . LBB 2 3 : movq - 4 5 6 (% rbp ), % rdx subq $ 1 , % rdx cmpq % rdx , - 3 2 (% rbp ) setne % dl . L 7 : . LBE 2 3 : . LBE 2 2 : testb % dl , % dl je . L 8 . LBB 2 4 : movq - 3 2 (% rbp ), % rdx subq $ 1 , % rdx movq - 4 5 6 (% rbp ), % rsi testq % rdx , % rdx js . L 9 cmpq % rsi , % rdx jl . L 5 0 . L 9 : movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 0 : movq - 4 6 4 (% rbp ), % rsi salq $ 2 , % rdx addq % rsi , % rdx movl (% rdx ), % edx cmpl $ 8 2 , % edx sete % dl . L 8 : . LBE 2 4 : . LBE 2 1 : testb % dl , % dl je . L 1 1 . LBB 2 5 : movq - 3 2 (% rbp ), % rdx addq $ 1 , % rdx movq - 4 5 6 (% rbp ), % rsi testq % rdx , % rdx js . L 1 2 cmpq % rsi , % rdx jl . L 5 1 . L 1 2 : movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : movq - 4 6 4 (% rbp ), % rsi salq $ 2 , % rdx addq % rsi , % rdx movl (% rdx ), % edx cmpl $ 7 6 , % edx sete % dl . L 1 1 : . LBE 2 5 : . LBE 2 0 : cmpb % dl , % cl jne . L 6 7 . LBB 2 6 : movq - 4 8 8 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 1 6 cmpq % rdx , - 3 2 (% rbp ) jl . L 5 3 . L 1 6 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 3 : movq - 4 5 6 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 1 8 cmpq % rdx , - 3 2 (% rbp ) jl . L 5 4 . L 1 8 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : movq - 4 6 4 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 2 , % rdx addq % rcx , % rdx movq - 4 9 6 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx salq $ 2 , % rcx addq % rsi , % rcx movl (% rdx ), % edx movl % edx , (% rcx ) . LBE 2 6 : jmp . L 3 9 . L 6 7 : . LBB 2 7 : nop . LBE 2 7 : . LBB 2 8 : cmpq $ 0 , - 3 2 (% rbp ) setne % dl testb % dl , % dl je . L 2 1 . LBB 2 9 : movq - 3 2 (% rbp ), % rdx subq $ 1 , % rdx movq - 4 5 6 (% rbp ), % rsi testq % rdx , % rdx js . L 2 2 cmpq % rsi , % rdx jl . L 5 5 . L 2 2 : movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 5 : movq - 4 6 4 (% rbp ), % rsi salq $ 2 , % rdx addq % rsi , % rdx movl (% rdx ), % edx cmpl $ 8 2 , % edx sete % dl . L 2 1 : . LBE 2 9 : . LBE 2 8 : cmpb % dl , % cl jne . L 6 8 . LBB 3 0 : movq - 4 8 8 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 2 6 cmpq % rdx , - 3 2 (% rbp ) jl . L 5 7 . L 2 6 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 7 : movq - 4 9 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 2 , % rdx addq % rcx , % rdx movl $ 8 2 , (% rdx ) movb $ 1 , - 1 7 (% rbp ) . LBE 3 0 : jmp . L 3 9 . L 6 8 : . LBB 3 1 : nop . LBE 3 1 : . LBB 3 2 : movq - 4 5 6 (% rbp ), % rdx subq $ 1 , % rdx cmpq % rdx , - 3 2 (% rbp ) setne % dl testb % dl , % dl je . L 2 8 . LBB 3 3 : movq - 3 2 (% rbp ), % rdx addq $ 1 , % rdx movq - 4 5 6 (% rbp ), % rsi testq % rdx , % rdx js . L 2 9 cmpq % rsi , % rdx jl . L 5 8 . L 2 9 : movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 8 : movq - 4 6 4 (% rbp ), % rsi salq $ 2 , % rdx addq % rsi , % rdx movl (% rdx ), % edx cmpl $ 7 6 , % edx sete % dl . L 2 8 : . LBE 3 3 : . LBE 3 2 : cmpb % dl , % cl jne . L 6 9 . LBB 3 4 : movq - 4 8 8 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 3 3 cmpq % rdx , - 3 2 (% rbp ) jl . L 6 0 . L 3 3 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 0 : movq - 4 9 6 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 2 , % rdx addq % rcx , % rdx movl $ 7 6 , (% rdx ) movb $ 1 , - 1 7 (% rbp ) . LBE 3 4 : jmp . L 3 9 . L 6 9 : . LBB 3 5 : nop . LBE 3 5 : . LBB 3 6 : movq - 4 8 8 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 3 5 cmpq % rdx , - 3 2 (% rbp ) jl . L 6 1 . L 3 5 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 1 : movq - 4 5 6 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 3 7 cmpq % rdx , - 3 2 (% rbp ) jl . L 6 2 . L 3 7 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 2 : movq - 4 6 4 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 2 , % rdx addq % rcx , % rdx movq - 4 9 6 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx salq $ 2 , % rcx addq % rsi , % rcx movl (% rdx ), % edx movl % edx , (% rcx ) . LBE 3 6 : jmp . L 3 9 . L 4 9 : . LBE 1 9 : . LBE 1 8 : . LBE 1 7 : . LBB 3 7 : movq - 4 8 8 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 4 0 cmpq % rdx , - 3 2 (% rbp ) jl . L 6 3 . L 4 0 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 3 : movq - 4 5 6 (% rbp ), % rdx cmpq $ 0 , - 3 2 (% rbp ) js . L 4 2 cmpq % rdx , - 3 2 (% rbp ) jl . L 6 4 . L 4 2 : movq - 3 2 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 6 4 : movq - 4 6 4 (% rbp ), % rcx movq - 3 2 (% rbp ), % rdx salq $ 2 , % rdx addq % rcx , % rdx movq - 4 9 6 (% rbp ), % rsi movq - 3 2 (% rbp ), % rcx salq $ 2 , % rcx addq % rsi , % rcx movl (% rdx ), % edx movl % edx , (% rcx ) . L 3 9 : . LBE 3 7 : . LBE 3 8 : . LBE 4 0 : . LBE 1 2 : . LBB 4 1 : addq $ 1 , % rax . L 3 : . LBE 4 1 : cmpq % rdi , % rax jl . L 7 0 . LBE 9 : . LBE 8 : . LBE 7 : movq - 4 5 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx cmpq % rax , % rdx cmovle % rdx , % rax leaq 0 (,% rax , 4 ), % rdx movq - 4 9 6 (% rbp ), % rcx movq - 4 6 4 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call memmove @ PLT . L 2 : . LBE 6 : cmpb $ 0 , - 1 7 (% rbp ) jne . L 7 1 . LBE 4 : . LBE 3 : . LBB 4 2 : subq $ 8 , % rsp pushq - 4 8 0 (% rbp ) pushq - 4 8 8 (% rbp ) pushq - 4 9 6 (% rbp ) movl $ 0 , % edi call runtime . slicerunetostring @ PLT addq $ 3 2 , % rsp movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx . LBE 4 2 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 4 4 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 6 1 movl $ 4 4 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 6 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 4 0 8 , % rsp movq % rdi , - 4 2 4 (% rbp ) movq $ 0 , - 2 8 8 (% rbp ) movq $ 0 , - 2 8 0 (% rbp ) movq $ 0 , - 2 7 2 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 2 0 (% rbp ) movq % rbx , - 3 1 2 (% rbp ) movq % rbx , - 3 0 4 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 3 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 3 5 2 (% rbp ) movq % rbx , - 3 4 4 (% rbp ) movq % rbx , - 3 3 6 (% rbp ) leaq type ... 6 0 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movq - 2 6 4 (% rbp ), % rax movq % rax , - 3 8 4 (% rbp ) movq $ 0 , - 3 7 6 (% rbp ) movq $ 0 , - 3 6 8 (% rbp ) . LBB 3 : movq $ 0 , - 4 1 6 (% rbp ) movq $ 0 , - 4 0 8 (% rbp ) movq $ 0 , - 4 0 0 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 2 2 4 (% rbp ) movq % rdx , - 2 1 6 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq - 2 1 6 (% rbp ), % rsi movl $ 0 , % eax . LBE 6 : jmp . L 4 . L 5 9 : . LBB 7 : nop . LBE 7 : . LBB 8 : . LBB 9 : movq - 2 1 6 (% rbp ), % rdx testq % rax , % rax js . L 5 cmpq % rdx , % rax jge . L 5 movq - 2 2 4 (% rbp ), % rcx movq % rax , % rdi movq % rdi , % rdx addq % rdx , % rdx addq % rdi , % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq 8 (% rdx ), % rbx movq % rcx , - 2 5 6 (% rbp ) movq % rbx , - 2 4 8 (% rbp ) movq 1 6 (% rdx ), % rdx movq % rdx , - 2 4 0 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 2 5 6 (% rbp ), % rcx movq - 2 4 8 (% rbp ), % rbx movq % rcx , - 1 9 2 (% rbp ) movq % rbx , - 1 8 4 (% rbp ) movq - 2 4 0 (% rbp ), % rdx movq % rdx , - 1 7 6 (% rbp ) movq - 1 9 2 (% rbp ), % rcx movq - 1 8 4 (% rbp ), % rbx movq % rcx , - 4 1 6 (% rbp ) movq % rbx , - 4 0 8 (% rbp ) movq - 1 7 6 (% rbp ), % rdx movq % rdx , - 4 0 0 (% rbp ) . LBE 1 0 : . LBB 1 1 : movq - 4 0 8 (% rbp ), % rdx testq % rdx , % rdx jg . L 6 jmp . L 4 5 . L 5 : . LBE 1 1 : . LBB 2 3 : movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 5 : . LBE 2 3 : . LBB 2 4 : movq % rdx , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 6 : movq - 4 1 6 (% rbp ), % rdx movq (% rdx ), % rdx movq % rdx , - 4 0 (% rbp ) movq $ 0 , - 4 8 (% rbp ) . LBB 1 2 : movq $ 0 , - 5 6 (% rbp ) . LBB 1 3 : jmp . L 8 . L 5 8 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 4 0 8 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 9 cmpq % rdx , - 5 6 (% rbp ) jl . L 4 6 . L 9 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq - 4 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx cmpq % rdx , - 4 0 (% rbp ) jle . L 1 1 . LBB 1 7 : movq - 4 0 8 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 1 2 cmpq % rdx , - 5 6 (% rbp ) jl . L 4 7 . L 1 2 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : movq - 4 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx movq % rdx , - 4 0 (% rbp ) movq - 5 6 (% rbp ), % rdx movq % rdx , - 4 8 (% rbp ) . L 1 1 : . LBE 1 7 : . LBE 1 6 : . LBB 1 8 : movq - 3 1 2 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 1 4 cmpq % rdx , - 5 6 (% rbp ) jl . L 4 8 . L 1 4 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : movq - 4 0 8 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 1 6 cmpq % rdx , - 5 6 (% rbp ) jl . L 4 9 . L 1 6 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : movq - 3 2 0 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rcx movq - 4 1 6 (% rbp ), % rdi movq - 5 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rdi , % rdx movq (% rdx ), % rdx cmpq % rdx , % rcx jge . L 1 8 . LBB 1 9 : movq - 3 1 2 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 1 9 cmpq % rdx , - 5 6 (% rbp ) jl . L 5 0 . L 1 9 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 0 : movq - 4 0 8 (% rbp ), % rdx cmpq $ 0 , - 5 6 (% rbp ) js . L 2 1 cmpq % rdx , - 5 6 (% rbp ) jl . L 5 1 . L 2 1 : movq - 5 6 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : movq - 4 1 6 (% rbp ), % rcx movq - 5 6 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq - 3 2 0 (% rbp ), % rdi movq - 5 6 (% rbp ), % rcx salq $ 3 , % rcx addq % rdi , % rcx movq (% rdx ), % rdx movq % rdx , (% rcx ) . L 1 8 : . LBE 1 9 : . LBE 1 8 : . LBE 1 5 : . LBB 2 0 : addq $ 1 , - 5 6 (% rbp ) . L 8 : . LBE 2 0 : movq 2 4 (% rbp ), % rdx testq % rdx , % rdx jg . L 2 3 movq % rdx , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 3 : movq 1 6 (% rbp ), % rdx movq 8 (% rdx ), % rdx cmpq % rdx , - 5 6 (% rbp ) jl . L 5 8 . LBE 1 3 : . LBE 1 2 : . LBB 2 1 : movq - 3 1 2 (% rbp ), % rdx cmpq $ 0 , - 4 8 (% rbp ) js . L 2 6 cmpq % rdx , - 4 8 (% rbp ) jl . L 5 3 . L 2 6 : movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 3 : movq - 3 2 0 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx cmpq % rdx , - 4 0 (% rbp ) jne . L 2 8 . LBB 2 2 : movq - 3 4 4 (% rbp ), % rdx cmpq $ 0 , - 4 8 (% rbp ) js . L 2 9 cmpq % rdx , - 4 8 (% rbp ) jl . L 5 4 . L 2 9 : movq - 4 8 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 5 4 : movq - 3 5 2 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rdx , % rcx movq - 4 0 (% rbp ), % rdx movq % rdx , (% rcx ) . L 2 8 : . LBE 2 2 : . LBE 2 1 : . LBE 2 4 : . LBE 8 : . LBB 2 5 : addq $ 1 , % rax . L 4 : . LBE 2 5 : cmpq % rsi , % rax jl . L 5 9 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 2 6 : movq $ 0 , - 6 4 (% rbp ) movq $ 0 , - 7 2 (% rbp ) . LBB 2 7 : . LBB 2 8 : . LBB 2 9 : movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 1 6 0 (% rbp ) movq % rdx , - 1 5 2 (% rbp ) movq - 3 3 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq - 1 5 2 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 2 9 : jmp . L 3 3 . L 6 0 : . LBB 3 0 : nop . LBE 3 0 : . LBB 3 1 : . LBB 3 2 : movq - 1 5 2 (% rbp ), % rax testq % rbx , % rbx js . L 3 4 cmpq % rax , % rbx jge . L 3 4 movq - 1 6 0 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax movq (% rax ), % rax . LBE 3 2 : . LBB 3 3 : movq % rbx , - 6 4 (% rbp ) movq % rax , - 7 2 (% rbp ) . LBE 3 3 : . LBB 3 4 : . LBB 3 5 : . LBB 3 6 : cmpq $ 0 , - 7 2 (% rbp ) setg % al testb % al , % al jne . L 3 5 jmp . L 3 6 . L 3 4 : . LBE 3 6 : . LBE 3 5 : . LBE 3 4 : . LBB 4 3 : movq % rax , % rsi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 3 5 : . LBE 4 3 : . LBB 4 4 : . LBB 4 2 : . LBB 3 8 : . LBB 3 7 : movq - 3 1 2 (% rbp ), % rax cmpq $ 0 , - 6 4 (% rbp ) js . L 3 7 cmpq % rax , - 6 4 (% rbp ) jl . L 5 6 . L 3 7 : movq - 6 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 6 : movq - 3 2 0 (% rbp ), % rdx movq - 6 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 7 2 (% rbp ) sete % al . L 3 6 : . LBE 3 7 : . LBE 3 8 : testb % al , % al je . L 3 9 . LBB 3 9 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 0 (% rbp ), % r 1 2 leaq 1 (% r 1 2 ), % rax movq - 1 1 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 4 0 . LBB 4 0 : movq - 1 2 8 (% rbp ), % rsi leaq - 9 6 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % r 1 2 , % rcx movq % rsi , % rdx leaq int .. d (% rip ), % rsi call runtime . growslice @ PLT movq - 9 6 (% rbp ), % rax movq - 8 8 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) movq - 8 0 (% rbp ), % rax movq % rax , - 3 6 8 (% rbp ) . LBE 4 0 : jmp . L 4 1 . L 4 0 : . LBB 4 1 : movq - 1 2 8 (% rbp ), % rcx movq - 1 1 2 (% rbp ), % rdx movq % rcx , - 3 8 4 (% rbp ) movq % rax , - 3 7 6 (% rbp ) movq % rdx , - 3 6 8 (% rbp ) . L 4 1 : . LBE 4 1 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 1 2 8 (% rbp ) movq % rdx , - 1 2 0 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % r 1 2 , % rdx salq $ 3 , % rdx addq % rax , % rdx movq - 7 2 (% rbp ), % rax movq % rax , (% rdx ) . L 3 9 : . LBE 3 9 : . LBE 4 2 : . LBE 4 4 : . LBE 3 1 : . LBB 4 5 : addq $ 1 , % rbx . L 3 3 : . LBE 4 5 : cmpq % r 1 3 , % rbx jl . L 6 0 . LBE 2 8 : . LBE 2 7 : . LBE 2 6 : . LBB 4 6 : movq - 3 8 4 (% rbp ), % rax movq - 3 7 6 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 3 6 8 (% rbp ), % rax movq % rax , - 2 7 2 (% rbp ) movq - 4 2 4 (% rbp ), % rcx movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 7 2 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 4 6 : . LBE 2 : movq - 4 2 4 (% rbp ), % rax addq $ 4 0 8 , % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 5 8 movl $ 1 2 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 5 8 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 1 0 4 , % rsp movq $ 0 , - 6 4 (% rbp ) . LBB 2 : movq 2 4 (% rbp ), % rax movq % rax , - 7 2 (% rbp ) movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 2 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 2 : movq 1 6 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 8 0 (% rbp ) movq - 8 0 (% rbp ), % rax subq $ 1 , % rax movq % rax , - 2 4 (% rbp ) movq - 8 0 (% rbp ), % rbx movq % rbx , % rdx movq % rbx , % rsi leaq int .. d (% rip ), % rdi call runtime . makeslice @ PLT movq % rax , - 1 1 2 (% rbp ) movq % rbx , - 1 0 4 (% rbp ) movq % rbx , - 9 6 (% rbp ) . LBB 3 : movq $ 0 , - 3 2 (% rbp ) . LBB 4 : jmp . L 3 . L 5 3 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 3 2 (% rbp ) js . L 4 cmpq % rax , - 3 2 (% rbp ) jl . L 3 9 . L 4 : movq - 3 2 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 3 9 : movq - 1 1 2 (% rbp ), % rdx movq - 3 2 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq $ 1 , (% rax ) . LBE 6 : . LBB 7 : addq $ 1 , - 3 2 (% rbp ) . L 3 : . LBE 7 : movq - 3 2 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jl . L 5 3 . LBE 4 : . LBE 3 : . LBB 8 : movq $ 0 , - 4 0 (% rbp ) . LBB 9 : jmp . L 8 . L 5 7 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : movq $ 0 , - 4 8 (% rbp ) . LBB 1 3 : jmp . L 9 . L 5 6 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : movq $ 0 , - 5 6 (% rbp ) . LBB 1 6 : . LBB 1 7 : jmp . L 1 0 . L 5 5 : . LBB 1 8 : nop . LBE 1 8 : . LBB 1 9 : . LBB 2 0 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 1 cmpq % rax , - 5 6 (% rbp ) jl . L 4 1 . L 1 1 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 1 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq (% rax ), % rcx movq 8 (% rax ), % rbx movq % rbx , % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 1 3 cmpq % rax , - 4 8 (% rbp ) jl . L 4 2 . L 1 3 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 2 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 5 6 (% rbp ) js . L 1 5 cmpq % rax , - 5 6 (% rbp ) jl . L 4 3 . L 1 5 : movq - 5 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 3 : movq 1 6 (% rbp ), % rdx movq - 5 6 (% rbp ), % rax salq $ 4 , % rax addq % rdx , % rax movq 8 (% rax ), % rdx movq (% rax ), % rax movq % rdx , % rsi cmpq $ 0 , - 4 0 (% rbp ) js . L 1 7 cmpq % rsi , - 4 0 (% rbp ) jl . L 4 4 . L 1 7 : movq - 4 0 (% rbp ), % rax movq % rax , % rdi call runtime . goPanicIndex @ PLT . L 4 4 : movq % rcx , % rsi movq - 4 8 (% rbp ), % rcx addq % rsi , % rcx movzbl (% rcx ), % ecx movq % rax , % rdx movq - 4 0 (% rbp ), % rax addq % rdx , % rax movzbl (% rax ), % eax cmpb % al , % cl ja . L 5 4 . LBE 2 0 : . LBE 1 9 : . LBB 2 3 : addq $ 1 , - 5 6 (% rbp ) . L 1 0 : . LBE 2 3 : movq - 5 6 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax jl . L 5 5 jmp . L 2 0 . L 5 4 : . LBB 2 4 : . LBB 2 2 : . LBB 2 1 : nop . L 2 0 : . LBE 2 1 : . LBE 2 2 : . LBE 2 4 : . LBE 1 7 : . LBE 1 6 : . LBB 2 5 : . LBB 2 6 : movq - 5 6 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax sete % al testb % al , % al je . L 2 2 . LBB 2 7 : movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 3 cmpq % rax , - 4 0 (% rbp ) jl . L 4 6 . L 2 3 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 6 : movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 2 5 cmpq % rax , - 4 8 (% rbp ) jl . L 4 7 . L 2 5 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 7 : movq - 1 1 2 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq - 1 1 2 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx salq $ 3 , % rdx addq % rcx , % rdx movq (% rdx ), % rdx addq $ 1 , % rdx cmpq % rdx , % rax setl % al . L 2 2 : . LBE 2 7 : . LBE 2 6 : testb % al , % al je . L 2 7 . LBB 2 8 : movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 2 8 cmpq % rax , - 4 0 (% rbp ) jl . L 4 8 . L 2 8 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 8 : movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 3 0 cmpq % rax , - 4 8 (% rbp ) jl . L 4 9 . L 3 0 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 4 9 : movq - 1 1 2 (% rbp ), % rdx movq - 4 8 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rdx movq - 1 1 2 (% rbp ), % rcx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rcx , % rax addq $ 1 , % rdx movq % rdx , (% rax ) . L 2 7 : . LBE 2 8 : . LBE 2 5 : . LBE 1 5 : . LBB 2 9 : addq $ 1 , - 4 8 (% rbp ) . L 9 : . LBE 2 9 : movq - 4 8 (% rbp ), % rax cmpq - 4 0 (% rbp ), % rax jl . L 5 6 . LBE 1 3 : . LBE 1 2 : movq - 1 0 4 (% rbp ), % rax cmpq $ 0 , - 4 0 (% rbp ) js . L 3 4 cmpq % rax , - 4 0 (% rbp ) jl . L 5 1 . L 3 4 : movq - 4 0 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 5 1 : movq - 1 1 2 (% rbp ), % rdx movq - 4 0 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rcx movq - 8 0 (% rbp ), % rax subq % rcx , % rax movq % rax , % rdx movq - 2 4 (% rbp ), % rax movq % rdx , % rsi movq % rax , % rdi call go . problem 0 9 6 0 . min movq % rax , - 2 4 (% rbp ) . LBE 1 1 : . LBB 3 0 : addq $ 1 , - 4 0 (% rbp ) . L 8 : . LBE 3 0 : movq - 4 0 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax jl . L 5 7 . LBE 9 : . LBE 8 : . LBB 3 1 : movq - 2 4 (% rbp ), % rax movq % rax , - 6 4 (% rbp ) movq - 6 4 (% rbp ), % rax . LBE 3 1 : . LBE 2 : movq - 8 (% rbp ), % rbx leave ret
. LFB 2 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 5 movl $ 5 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 : ret . L 2 5 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 4 0 , % rsp movq % rdi , - 4 0 (% rbp ) movq $ 0 , - 2 4 (% rbp ) . LBB 2 4 : . LBB 2 5 : cmpq $ 0 , - 4 0 (% rbp ) jne . L 2 3 . LBB 2 6 : . LBB 2 7 : movq $ 0 , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax jmp . L 2 4 . L 2 3 : . LBE 2 7 : . LBE 2 6 : . LBE 2 5 : . LBB 2 8 : movq - 4 0 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , % rdi call go . Solution . maxDepth movq % rax , % rbx movq - 4 0 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , % rdi call go . Solution . maxDepth movq % rax , % rsi movq % rbx , % rdi call go . Solution . Max addq $ 1 , % rax movq % rax , - 2 4 (% rbp ) movq - 2 4 (% rbp ), % rax . L 2 4 : . LBE 2 8 : . LBE 2 4 : movq - 8 (% rbp ), % rbx leave ret
. LFB 1 7 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 4 7 7 8 movl $ 4 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 2 1 8 : ret . L 4 7 7 8 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq % rdi , - 2 4 (% rbp ) movq $ 0 , - 8 (% rbp ) . LBB 3 8 2 9 : . LBB 3 8 3 0 : cmpq $ 0 , - 2 4 (% rbp ) jne . L 4 7 7 6 . LBB 3 8 3 1 : . LBB 3 8 3 2 : movq $ 0 , - 8 (% rbp ) movq - 8 (% rbp ), % rax jmp . L 4 7 7 7 . L 4 7 7 6 : . LBE 3 8 3 2 : . LBE 3 8 3 1 : . LBE 3 8 3 0 : . LBB 3 8 3 3 : movq - 2 4 (% rbp ), % rax movq % rax , % rdi call go . leetcode . sumOfLeafChildren movq % rax , - 8 (% rbp ) movq - 8 (% rbp ), % rax . L 4 7 7 7 : . LBE 3 8 3 3 : . LBE 3 8 2 9 : leave ret
. LFB 1 1 9 : leaq - 2 6 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 3 0 7 6 movl $ 2 6 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 1 5 3 : ret . L 3 0 7 6 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 2 1 6 , % rsp movq % rdi , % rcx movq % rsi , % rbx movq % rcx , - 2 2 4 (% rbp ) movq % rbx , - 2 1 6 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) . LBB 2 4 8 9 : leaq . LC 3 5 6 (% rip ), % rax movl $ 1 , % edx leaq - 2 0 8 (% rbp ), % rdi movq % rax , % rcx movq % rdx , % rbx movq % rdx , % rsi movq - 2 2 4 (% rbp ), % rdx movq - 2 1 6 (% rbp ), % rax movq % rsi , % r 8 movq % rdx , % rsi movq % rax , % rdx call strings . Split @ PLT movq - 2 0 0 (% rbp ), % rax testq % rax , % rax jg . L 3 0 6 6 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 3 0 6 6 : movq - 2 0 8 (% rbp ), % rax movq (% rax ), % rdx movq 8 (% rax ), % rax movq % rdx , % rdi movq % rax , % rsi call go . leetcode . normalize movq % rax , % rcx movq % rcx , - 5 6 (% rbp ) movq % rdx , % rax movq % rax , - 6 4 (% rbp ) movq - 2 0 0 (% rbp ), % rax cmpq $ 1 , % rax jg . L 3 0 6 7 movq % rax , % rsi movl $ 1 , % edi call runtime . goPanicIndex @ PLT . L 3 0 6 7 : movq - 2 0 8 (% rbp ), % rax addq $ 1 6 , % rax movq (% rax ), % rdx movq 8 (% rax ), % rax movq % rdx , % rdi movq % rax , % rsi call go . leetcode . normalize movq % rax , % rcx movq % rcx , - 7 2 (% rbp ) movq % rdx , % rax movq % rax , - 8 0 (% rbp ) movq - 5 6 (% rbp ), % rax subq - 7 2 (% rbp ), % rax movq % rax , - 8 8 (% rbp ) movq - 8 0 (% rbp ), % rax subq - 6 4 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) . LBB 2 4 9 0 : . LBB 2 4 9 1 : cmpq $ 0 , - 8 8 (% rbp ) sete % al testb % al , % al je . L 3 0 6 8 . LBB 2 4 9 2 : cmpq $ 0 , - 9 6 (% rbp ) sete % al . L 3 0 6 8 : . LBE 2 4 9 2 : . LBE 2 4 9 1 : testb % al , % al je . L 3 0 6 9 . LBB 2 4 9 3 : . LBB 2 4 9 4 : leaq . LC 3 5 7 (% rip ), % rax movq % rax , - 2 5 6 (% rbp ) movq $ 1 8 , - 2 4 8 (% rbp ) movdqa - 2 5 6 (% rbp ), % xmm 0 movups % xmm 0 , - 1 7 6 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx jmp . L 3 0 7 5 . L 3 0 6 9 : . LBE 2 4 9 4 : . LBE 2 4 9 3 : . LBE 2 4 9 0 : . LBB 2 4 9 5 : cmpq $ 0 , - 8 8 (% rbp ) jne . L 3 0 7 1 . LBB 2 4 9 6 : . LBB 2 4 9 7 : leaq . LC 3 5 8 (% rip ), % rax movq % rax , - 2 4 0 (% rbp ) movq $ 1 1 , - 2 3 2 (% rbp ) movdqa - 2 4 0 (% rbp ), % xmm 1 movups % xmm 1 , - 1 7 6 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx jmp . L 3 0 7 5 . L 3 0 7 1 : . LBE 2 4 9 7 : . LBE 2 4 9 6 : . LBE 2 4 9 5 : . LBB 2 4 9 8 : leaq int .. d (% rip ), % r 1 4 leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) cmpq $- 1 , - 8 8 (% rbp ) jne . L 3 0 7 2 movq - 9 6 (% rbp ), % rax negq % rax movq % rax , % rdx jmp . L 3 0 7 3 . L 3 0 7 2 : cmpq $ 0 , - 8 8 (% rbp ) jne . L 3 0 7 4 call runtime . panicdivide @ PLT . L 3 0 7 4 : movq - 9 6 (% rbp ), % rax cqto idivq - 8 8 (% rbp ) movq % rax , % rdx . L 3 0 7 3 : movq - 1 5 2 (% rbp ), % rax movq % rdx , (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rax , % r 1 5 movq % r 1 4 , - 1 4 4 (% rbp ) movq % r 1 5 , - 1 3 6 (% rbp ) leaq - 1 4 4 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq $ 1 , - 1 2 0 (% rbp ) movq $ 1 , - 1 1 2 (% rbp ) leaq . LC 3 5 9 (% rip ), % r 1 2 movl $ 4 , % r 1 3 d movq % r 1 2 , % rcx movq % r 1 3 , % rbx movq % r 1 2 , % rax movq % r 1 3 , % rdx movq % rdx , % rax subq $ 8 , % rsp pushq - 1 1 2 (% rbp ) pushq - 1 2 0 (% rbp ) pushq - 1 2 8 (% rbp ) movq % rcx , % rdi movq % rax , % rsi call fmt . Sprintf @ PLT addq $ 3 2 , % rsp movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx . L 3 0 7 5 : . LBE 2 4 9 8 : . LBE 2 4 8 9 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : leaq - 3 6 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 9 movl $ 3 6 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 9 : pushq % rbp movq % rsp , % rbp pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 2 0 , % rsp movq % rdi , % rax movq % rsi , % rcx movq % rcx , % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) movb $ 0 , - 3 4 (% rbp ) . LBB 2 : leaq - 8 0 (% rbp ), % rdi movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx leaq - 3 0 4 (% rbp ), % rsi movq % rdx , % rcx movq % rax , % rdx call runtime . stringtoslicerune @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movb $ 0 , - 3 3 (% rbp ) . LBB 3 : movq $ 0 , - 4 8 (% rbp ) . LBB 4 : . LBB 5 : . LBB 6 : movq 1 6 (% rbp ), % rax movq 2 4 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq 3 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) movq - 1 6 8 (% rbp ), % r 1 3 movl $ 0 , % ebx . LBE 6 : jmp . L 2 . L 1 8 : . LBB 7 : nop . LBE 7 : . LBB 8 : movq % rbx , - 4 8 (% rbp ) . LBB 9 : . LBB 1 0 : movq $ 0 , - 5 6 (% rbp ) . LBB 1 1 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 4 8 (% rbp ) js . L 3 cmpq % rax , - 4 8 (% rbp ) jl . L 1 4 . L 3 : movq - 4 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 4 : movq 1 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rdx movq % rdx , % rax addq % rax , % rax addq % rdx , % rax salq $ 3 , % rax addq % rax , % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 1 2 8 (% rbp ) . LBB 1 2 : . LBB 1 3 : movq - 1 4 4 (% rbp ), % rax movq - 1 3 6 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 2 8 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % r 1 4 movl $ 0 , % r 1 2 d . LBE 1 3 : jmp . L 5 . L 1 7 : . LBB 1 4 : nop . LBE 1 4 : . LBB 1 5 : movq % r 1 2 , - 5 6 (% rbp ) . LBB 1 6 : . LBB 1 7 : movzbl - 3 3 (% rbp ), % eax movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 6 . LBB 1 8 : call runtime . makemap_small @ PLT movq % rax , % rdx movq - 5 6 (% rbp ), % rcx movq - 4 8 (% rbp ), % rax pushq - 3 2 0 (% rbp ) pushq - 3 2 8 (% rbp ) pushq - 3 3 6 (% rbp ) pushq 3 2 (% rbp ) pushq 2 4 (% rbp ) pushq 1 6 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call go . day 9 8 . search addq $ 4 8 , % rsp . L 6 : . LBE 1 8 : . LBE 1 7 : movb % al , - 3 3 (% rbp ) . LBB 1 9 : cmpb $ 0 , - 3 3 (% rbp ) je . L 7 . LBB 2 0 : . LBB 2 1 : movb $ 1 , - 3 4 (% rbp ) movzbl - 3 4 (% rbp ), % eax jmp . L 1 3 . L 7 : . LBE 2 1 : . LBE 2 0 : . LBE 1 9 : . LBE 1 6 : . LBE 1 5 : . LBB 2 2 : addq $ 1 , % r 1 2 . L 5 : . LBE 2 2 : cmpq % r 1 4 , % r 1 2 jl . L 1 7 . LBE 1 2 : . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBE 8 : . LBB 2 3 : addq $ 1 , % rbx . L 2 : . LBE 2 3 : cmpq % r 1 3 , % rbx jl . L 1 8 . LBE 5 : . LBE 4 : . LBE 3 : . LBB 2 4 : movb $ 0 , - 3 4 (% rbp ) movzbl - 3 4 (% rbp ), % eax . L 1 3 : . LBE 2 4 : . LBE 2 : leaq - 3 2 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % rbp ret
. LFB 5 : leaq - 1 1 4 4 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 7 1 movl $ 1 1 4 4 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 5 : ret . L 7 1 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 1 0 9 6 , % rsp movq % rdi , - 1 0 4 8 (% rbp ) movq $ 1 , - 9 7 6 (% rbp ) movq $ 2 , - 9 6 8 (% rbp ) movq $ 3 , - 9 6 0 (% rbp ) movq $ 4 , - 9 5 2 (% rbp ) leaq - 9 7 6 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 4 , - 2 0 0 (% rbp ) movq $ 4 , - 1 9 2 (% rbp ) subq $ 8 , % rsp pushq - 1 9 2 (% rbp ) pushq - 2 0 0 (% rbp ) pushq - 2 0 8 (% rbp ) call go . leetcode . newList addq $ 3 2 , % rsp movq % rax , % r 1 2 movq $- 1 , - 9 4 4 (% rbp ) movq $ 0 , - 9 3 6 (% rbp ) movq $ 3 , - 9 2 8 (% rbp ) movq $ 4 , - 9 2 0 (% rbp ) movq $ 5 , - 9 1 2 (% rbp ) leaq - 9 4 4 (% rbp ), % rax movq % rax , - 1 7 6 (% rbp ) movq $ 5 , - 1 6 8 (% rbp ) movq $ 5 , - 1 6 0 (% rbp ) subq $ 8 , % rsp pushq - 1 6 0 (% rbp ) pushq - 1 6 8 (% rbp ) pushq - 1 7 6 (% rbp ) call go . leetcode . newList addq $ 3 2 , % rsp movq % rax , - 1 0 5 6 (% rbp ) movq $ 1 , - 8 9 6 (% rbp ) movq $ 2 , - 8 8 8 (% rbp ) movq $ 3 , - 8 8 0 (% rbp ) movq $ 4 , - 8 7 2 (% rbp ) leaq - 8 9 6 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 4 , - 1 3 6 (% rbp ) movq $ 4 , - 1 2 8 (% rbp ) subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) call go . leetcode . newList addq $ 3 2 , % rsp movq % rax , % r 1 3 movq $ 1 , - 8 6 4 (% rbp ) movq $ 2 , - 8 5 6 (% rbp ) movq $ 3 , - 8 4 8 (% rbp ) movq $ 4 , - 8 4 0 (% rbp ) leaq - 8 6 4 (% rbp ), % rax movq % rax , - 1 1 2 (% rbp ) movq $ 4 , - 1 0 4 (% rbp ) movq $ 4 , - 9 6 (% rbp ) subq $ 8 , % rsp pushq - 9 6 (% rbp ) pushq - 1 0 4 (% rbp ) pushq - 1 1 2 (% rbp ) call go . leetcode . newList addq $ 3 2 , % rsp movq % rax , % rbx leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 8 2 4 (% rbp ) movq - 8 2 4 (% rbp ), % rax movq $ 4 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 1 , 1 6 (% rax ) movq $ 3 , 2 4 (% rax ) movq - 8 2 4 (% rbp ), % rax movq % rax , - 8 1 6 (% rbp ) movq $ 4 , - 8 0 8 (% rbp ) movq $ 4 , - 8 0 0 (% rbp ) leaq type ... 6 5 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 9 2 (% rbp ) movq - 7 9 2 (% rbp ), % rax movq $- 1 , (% rax ) movq $ 5 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq $ 0 , 3 2 (% rax ) movq - 7 9 2 (% rbp ), % rax movq % rax , - 7 8 4 (% rbp ) movq $ 5 , - 7 7 6 (% rbp ) movq $ 5 , - 7 6 8 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 6 0 (% rbp ) movq - 7 6 0 (% rbp ), % rax movq $ 1 , (% rax ) movq $ 2 , 8 (% rax ) movq $ 3 , 1 6 (% rax ) movq $ 4 , 2 4 (% rax ) movq - 7 6 0 (% rbp ), % rax movq % rax , - 7 5 2 (% rbp ) movq $ 4 , - 7 4 4 (% rbp ) movq $ 4 , - 7 3 6 (% rbp ) leaq type ... 6 4 x . 7 int (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 7 2 8 (% rbp ) movq - 7 2 8 (% rbp ), % rax movq $ 4 , (% rax ) movq $ 3 , 8 (% rax ) movq $ 2 , 1 6 (% rax ) movq $ 1 , 2 4 (% rax ) movq - 7 2 8 (% rbp ), % rax movq % rax , - 7 2 0 (% rbp ) movq $ 4 , - 7 1 2 (% rbp ) movq $ 4 , - 7 0 4 (% rbp ) movq - 8 1 6 (% rbp ), % rax movq - 8 0 8 (% rbp ), % rdx movq % rax , - 6 8 8 (% rbp ) movq % rdx , - 6 8 0 (% rbp ) movq - 8 0 0 (% rbp ), % rax movq % rax , - 6 7 2 (% rbp ) movq % r 1 2 , - 6 6 4 (% rbp ) movq - 7 8 4 (% rbp ), % rax movq - 7 7 6 (% rbp ), % rdx movq % rax , - 6 5 6 (% rbp ) movq % rdx , - 6 4 8 (% rbp ) movq - 7 6 8 (% rbp ), % rax movq % rax , - 6 4 0 (% rbp ) movq - 1 0 5 6 (% rbp ), % rax movq % rax , - 6 3 2 (% rbp ) movq - 7 5 2 (% rbp ), % rax movq - 7 4 4 (% rbp ), % rdx movq % rax , - 6 2 4 (% rbp ) movq % rdx , - 6 1 6 (% rbp ) movq - 7 3 6 (% rbp ), % rax movq % rax , - 6 0 8 (% rbp ) movq % r 1 3 , - 6 0 0 (% rbp ) movq - 7 2 0 (% rbp ), % rax movq - 7 1 2 (% rbp ), % rdx movq % rax , - 5 9 2 (% rbp ) movq % rdx , - 5 8 4 (% rbp ) movq - 7 0 4 (% rbp ), % rax movq % rax , - 5 7 6 (% rbp ) movq % rbx , - 5 6 8 (% rbp ) movq $ 0 , - 5 6 0 (% rbp ) movq $ 0 , - 5 5 2 (% rbp ) movq $ 0 , - 5 4 4 (% rbp ) movq $ 0 , - 5 3 6 (% rbp ) movq - 6 8 8 (% rbp ), % rax movq - 6 8 0 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 6 7 2 (% rbp ), % rax movq - 6 6 4 (% rbp ), % rdx movq % rax , - 5 1 2 (% rbp ) movq % rdx , - 5 0 4 (% rbp ) movq - 6 5 6 (% rbp ), % rax movq - 6 4 8 (% rbp ), % rdx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movq - 6 4 0 (% rbp ), % rax movq - 6 3 2 (% rbp ), % rdx movq % rax , - 4 8 0 (% rbp ) movq % rdx , - 4 7 2 (% rbp ) movq - 6 2 4 (% rbp ), % rax movq - 6 1 6 (% rbp ), % rdx movq % rax , - 4 6 4 (% rbp ) movq % rdx , - 4 5 6 (% rbp ) movq - 6 0 8 (% rbp ), % rax movq - 6 0 0 (% rbp ), % rdx movq % rax , - 4 4 8 (% rbp ) movq % rdx , - 4 4 0 (% rbp ) movq - 5 9 2 (% rbp ), % rax movq - 5 8 4 (% rbp ), % rdx movq % rax , - 4 3 2 (% rbp ) movq % rdx , - 4 2 4 (% rbp ) movq - 5 7 6 (% rbp ), % rax movq - 5 6 8 (% rbp ), % rdx movq % rax , - 4 1 6 (% rbp ) movq % rdx , - 4 0 8 (% rbp ) movq - 5 6 0 (% rbp ), % rax movq - 5 5 2 (% rbp ), % rdx movq % rax , - 4 0 0 (% rbp ) movq % rdx , - 3 9 2 (% rbp ) movq - 5 4 4 (% rbp ), % rax movq - 5 3 6 (% rbp ), % rdx movq % rax , - 3 8 4 (% rbp ) movq % rdx , - 3 7 6 (% rbp ) leaq - 5 2 8 (% rbp ), % rax movq % rax , - 1 0 0 8 (% rbp ) movq $ 5 , - 1 0 0 0 (% rbp ) movq $ 5 , - 9 9 2 (% rbp ) . LBB 7 0 : movq $ 0 , - 1 0 4 0 (% rbp ) movq $ 0 , - 1 0 3 2 (% rbp ) movq $ 0 , - 1 0 2 4 (% rbp ) movq $ 0 , - 1 0 1 6 (% rbp ) . LBB 7 1 : . LBB 7 2 : . LBB 7 3 : movq - 1 0 0 8 (% rbp ), % rax movq - 1 0 0 0 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 9 9 2 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) movq - 3 2 8 (% rbp ), % r 1 3 movl $ 0 , % r 1 2 d . LBE 7 3 : jmp . L 6 1 . L 7 0 : . LBB 7 4 : nop . LBE 7 4 : . LBB 7 5 : . LBB 7 6 : movq - 3 2 8 (% rbp ), % rax testq % r 1 2 , % r 1 2 js . L 6 2 cmpq % rax , % r 1 2 jge . L 6 2 movq - 3 3 6 (% rbp ), % rdx movq % r 1 2 , % rax salq $ 5 , % rax leaq (% rdx ,% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq 1 6 (% rcx ), % rax movq 2 4 (% rcx ), % rdx movq % rax , - 3 5 2 (% rbp ) movq % rdx , - 3 4 4 (% rbp ) . LBE 7 6 : . LBB 7 7 : movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq - 3 4 4 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 3 0 4 (% rbp ), % rax movq - 2 9 6 (% rbp ), % rdx movq % rax , - 1 0 4 0 (% rbp ) movq % rdx , - 1 0 3 2 (% rbp ) movq - 2 8 8 (% rbp ), % rax movq - 2 8 0 (% rbp ), % rdx movq % rax , - 1 0 2 4 (% rbp ) movq % rdx , - 1 0 1 6 (% rbp ) . LBE 7 7 : . LBB 7 8 : subq $ 8 , % rsp pushq - 1 0 2 4 (% rbp ) pushq - 1 0 3 2 (% rbp ) pushq - 1 0 4 0 (% rbp ) call go . leetcode . newList addq $ 3 2 , % rsp movq % rax , % rdi call go . leetcode . sortList movq % rax , - 5 6 (% rbp ) . LBB 7 9 : leaq type ... 1 go . leetcode . ListNode (% rip ), % rax movq % rax , - 1 0 8 8 (% rbp ) movq - 1 0 1 6 (% rbp ), % rax movq % rax , - 1 0 8 0 (% rbp ) leaq type ... 1 go . leetcode . ListNode (% rip ), % r 1 4 movq - 5 6 (% rbp ), % r 1 5 movq % r 1 4 , % rcx movq % r 1 5 , % rbx movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rcx , % rsi movq % rdx , % rax movq - 1 0 8 8 (% rbp ), % rdx movq - 1 0 8 0 (% rbp ), % rcx movq % rsi , % rdi movq % rax , % rsi call reflect . DeepEqual @ PLT xorl $ 1 , % eax testb % al , % al jne . L 6 3 jmp . L 6 4 . L 6 2 : . LBE 7 9 : . LBE 7 8 : . LBB 8 4 : movq % rax , % rsi movq % r 1 2 , % rdi call runtime . goPanicIndex @ PLT . L 6 3 : . LBE 8 4 : . LBB 8 5 : . LBB 8 3 : . LBB 8 0 : subq $ 8 , % rsp pushq - 1 0 2 4 (% rbp ) pushq - 1 0 3 2 (% rbp ) pushq - 1 0 4 0 (% rbp ) call go . leetcode . newList addq $ 3 2 , % rsp leaq type ... 1 go . leetcode . ListNode (% rip ), % rbx movq % rbx , - 1 1 3 6 (% rbp ) movq % rax , - 1 1 2 8 (% rbp ) movq % rbx , % rax movq % rax , - 1 1 2 0 (% rbp ) movq - 5 6 (% rbp ), % rsi movq % rsi , - 1 1 1 2 (% rbp ) movq % rax , - 1 1 0 4 (% rbp ) movq - 1 0 1 6 (% rbp ), % rax movq % rax , - 1 0 9 6 (% rbp ) leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 6 4 (% rbp ) movdqa - 1 1 3 6 (% rbp ), % xmm 0 movups % xmm 0 , - 2 5 6 (% rbp ) movdqa - 1 1 2 0 (% rbp ), % xmm 1 movups % xmm 1 , - 2 4 0 (% rbp ) movdqa - 1 1 0 4 (% rbp ), % xmm 2 movups % xmm 2 , - 2 2 4 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 5 . LBB 8 1 : movq - 2 6 4 (% rbp ), % rcx movq - 2 5 6 (% rbp ), % rax movq - 2 4 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 2 4 0 (% rbp ), % rax movq - 2 3 2 (% rbp ), % rdx movq % rax , 1 6 (% rcx ) movq % rdx , 2 4 (% rcx ) movq - 2 2 4 (% rbp ), % rax movq - 2 1 6 (% rbp ), % rdx movq % rax , 3 2 (% rcx ) movq % rdx , 4 0 (% rcx ) . LBE 8 1 : jmp . L 6 6 . L 6 5 : . LBB 8 2 : movq - 2 6 4 (% rbp ), % rcx leaq - 2 5 6 (% rbp ), % rax movq % rax , % rdx movq % rcx , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 6 6 : . LBE 8 2 : movq - 2 6 4 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 2 2 (% rip ), % rax movq % rax , - 1 0 7 2 (% rbp ) movq $ 3 1 , - 1 0 6 4 (% rbp ) movq - 1 0 7 2 (% rbp ), % rax movq - 1 0 6 4 (% rbp ), % rdx movq % rax , % rcx movq % rdx , % rbx movq - 1 0 4 8 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Errorf .. stub @ PLT addq $ 3 2 , % rsp . L 6 4 : . LBE 8 0 : . LBE 8 3 : . LBE 8 5 : . LBE 7 5 : . LBB 8 6 : addq $ 1 , % r 1 2 . L 6 1 : . LBE 8 6 : cmpq % r 1 3 , % r 1 2 jl . L 7 0 . LBE 7 2 : . LBE 7 1 : . LBE 7 0 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 1 : cmpq % fs : 1 1 2 , % rsp jnb . L 2 2 movl $ 4 0 , % r 1 0 d movl $ 2 4 , % r 1 1 d call __morestack . LVL 1 : ret . L 2 2 : pushq % rbp movq % rsp , % rbp subq $ 3 2 , % rsp movq $ 0 , - 3 2 (% rbp ) . LBB 2 : . LBB 3 : . LBB 4 : movq 1 6 (% rbp ), % rax testq % rax , % rax sete % al movl % eax , % edx xorl $ 1 , % edx testb % dl , % dl je . L 4 . LBB 5 : movq 2 4 (% rbp ), % rax testq % rax , % rax setle % al . L 4 : . LBE 5 : . LBE 4 : testb % al , % al je . L 5 . LBB 6 : . LBB 7 : movq $ 0 , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax jmp . L 6 . L 5 : . LBE 7 : . LBE 6 : . LBE 3 : movq 2 4 (% rbp ), % rax testq % rax , % rax jg . L 7 movq % rax , % rsi movl $ 0 , % edi call runtime . goPanicIndex @ PLT . L 7 : movq 1 6 (% rbp ), % rax movq (% rax ), % rax movq % rax , - 8 (% rbp ) movq $ 1 , - 1 6 (% rbp ) . LBB 8 : movq $ 1 , - 2 4 (% rbp ) . LBB 9 : jmp . L 8 . L 2 1 : . LBB 1 0 : nop . LBE 1 0 : . LBB 1 1 : . LBB 1 2 : cmpq $ 0 , - 1 6 (% rbp ) jne . L 9 . LBB 1 3 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 0 cmpq % rax , - 2 4 (% rbp ) jl . L 1 8 . L 1 0 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 8 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax movq % rax , - 8 (% rbp ) movq $ 1 , - 1 6 (% rbp ) . LBE 1 3 : jmp . L 1 2 . L 9 : . LBB 1 4 : . LBB 1 5 : movq 2 4 (% rbp ), % rax cmpq $ 0 , - 2 4 (% rbp ) js . L 1 3 cmpq % rax , - 2 4 (% rbp ) jl . L 1 9 . L 1 3 : movq - 2 4 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rdi call runtime . goPanicIndex @ PLT . L 1 9 : movq 1 6 (% rbp ), % rdx movq - 2 4 (% rbp ), % rax salq $ 3 , % rax addq % rdx , % rax movq (% rax ), % rax cmpq % rax , - 8 (% rbp ) jne . L 1 5 . LBB 1 6 : addq $ 1 , - 1 6 (% rbp ) . LBE 1 6 : jmp . L 1 2 . L 1 5 : . LBB 1 7 : subq $ 1 , - 1 6 (% rbp ) . L 1 2 : . LBE 1 7 : . LBE 1 5 : . LBE 1 4 : . LBE 1 2 : . LBE 1 1 : . LBB 1 8 : addq $ 1 , - 2 4 (% rbp ) . L 8 : . LBE 1 8 : movq 2 4 (% rbp ), % rax cmpq % rax , - 2 4 (% rbp ) jl . L 2 1 . LBE 9 : . LBE 8 : . LBB 1 9 : movq - 8 (% rbp ), % rax movq % rax , - 3 2 (% rbp ) movq - 3 2 (% rbp ), % rax . L 6 : . LBE 1 9 : . LBE 2 : leave ret
. LFB 0 : leaq - 3 7 6 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 2 0 movl $ 3 7 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 2 0 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 3 2 8 , % rsp movq $ 1 , - 5 6 (% rbp ) movq $ 1 , - 6 4 (% rbp ) . LBB 2 : movq $ 1 , - 7 2 (% rbp ) . LBB 3 : jmp . L 2 . L 1 9 : . LBB 4 : nop . LBE 4 : . LBB 5 : . LBB 6 : movq $ 1 , - 8 0 (% rbp ) . LBB 7 : jmp . L 3 . L 1 8 : . LBB 8 : nop . LBE 8 : . LBB 9 : . LBB 1 0 : movq $ 1 , - 8 8 (% rbp ) . LBB 1 1 : jmp . L 4 . L 1 7 : . LBB 1 2 : nop . LBE 1 2 : . LBB 1 3 : . LBB 1 4 : . LBB 1 5 : . LBB 1 6 : movq - 8 8 (% rbp ), % rax cmpq - 8 0 (% rbp ), % rax setne % al testb % al , % al je . L 5 . LBB 1 7 : movq - 8 8 (% rbp ), % rax cmpq - 7 2 (% rbp ), % rax setne % al . L 5 : . LBE 1 7 : . LBE 1 6 : testb % al , % al je . L 6 . LBB 1 8 : movq - 8 8 (% rbp ), % rdx movq - 8 0 (% rbp ), % rcx movq - 7 2 (% rbp ), % rax movq % rcx , % rsi movq % rax , % rdi call main . isSpecial . L 6 : . LBE 1 8 : . LBE 1 5 : testb % al , % al je . L 7 . LBB 1 9 : movq - 7 2 (% rbp ), % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax movq % rax , % rdx movq - 8 8 (% rbp ), % rax addq % rax , % rdx movq - 5 6 (% rbp ), % rax imulq % rdx , % rax movq % rax , - 5 6 (% rbp ) movq - 8 8 (% rbp ), % rdx movq % rdx , % rax salq $ 2 , % rax addq % rdx , % rax addq % rax , % rax movq % rax , % rdx movq - 8 0 (% rbp ), % rax addq % rax , % rdx movq - 6 4 (% rbp ), % rax imulq % rdx , % rax movq % rax , - 6 4 (% rbp ) . L 7 : . LBE 1 9 : . LBE 1 4 : . LBE 1 3 : . LBB 2 0 : addq $ 1 , - 8 8 (% rbp ) . L 4 : . LBE 2 0 : cmpq $ 9 , - 8 8 (% rbp ) jle . L 1 7 . LBE 1 1 : . LBE 1 0 : . LBE 9 : . LBB 2 1 : addq $ 1 , - 8 0 (% rbp ) . L 3 : . LBE 2 1 : cmpq $ 9 , - 8 0 (% rbp ) jle . L 1 8 . LBE 7 : . LBE 6 : . LBE 5 : . LBB 2 2 : addq $ 1 , - 7 2 (% rbp ) . L 2 : . LBE 2 2 : cmpq $ 9 , - 7 2 (% rbp ) jle . L 1 9 . LBE 3 : . LBE 2 : leaq string .. d (% rip ), % r 1 4 leaq go .. C 6 (% rip ), % r 1 5 leaq int .. d (% rip ), % rbx movq % rbx , - 3 6 8 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 3 1 2 (% rbp ) movq - 3 1 2 (% rbp ), % rax movq - 5 6 (% rbp ), % rdx movq % rdx , (% rax ) movq - 3 1 2 (% rbp ), % rax movq % rax , - 3 6 0 (% rbp ) movq % r 1 4 , - 3 0 4 (% rbp ) movq % r 1 5 , - 2 9 6 (% rbp ) movdqa - 3 6 8 (% rbp ), % xmm 0 movups % xmm 0 , - 2 8 8 (% rbp ) leaq - 3 0 4 (% rbp ), % rax movq % rax , - 2 0 8 (% rbp ) movq $ 2 , - 2 0 0 (% rbp ) movq $ 2 , - 1 9 2 (% rbp ) leaq - 1 7 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 9 2 (% rbp ) pushq - 2 0 0 (% rbp ) pushq - 2 0 8 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 3 2 0 (% rbp ) leaq string .. d (% rip ), % r 1 2 leaq go .. C 1 2 (% rip ), % r 1 3 movq % rbx , - 3 5 2 (% rbp ) leaq int .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 2 4 8 (% rbp ) movq - 2 4 8 (% rbp ), % rax movq - 6 4 (% rbp ), % rdx movq % rdx , (% rax ) movq - 2 4 8 (% rbp ), % rax movq % rax , - 3 4 4 (% rbp ) movq % r 1 2 , - 2 4 0 (% rbp ) movq % r 1 3 , - 2 3 2 (% rbp ) movdqa - 3 5 2 (% rbp ), % xmm 1 movups % xmm 1 , - 2 2 4 (% rbp ) leaq - 2 4 0 (% rbp ), % rax movq % rax , - 1 4 4 (% rbp ) movq $ 2 , - 1 3 6 (% rbp ) movq $ 2 , - 1 2 8 (% rbp ) leaq - 1 1 2 (% rbp ), % rax subq $ 8 , % rsp pushq - 1 2 8 (% rbp ) pushq - 1 3 6 (% rbp ) pushq - 1 4 4 (% rbp ) movq % rax , % rdi call fmt . Println @ PLT addq $ 3 2 , % rsp movq - 1 1 2 (% rbp ), % rax movq - 1 0 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 9 6 (% rbp ), % rax movq % rax , - 2 5 6 (% rbp ) leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
. LFB 0 : cmpq % fs : 1 1 2 , % rsp jnb . L 1 7 movl $ 2 1 6 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 7 : pushq % rbp movq % rsp , % rbp pushq % rbx subq $ 2 0 0 , % rsp movq % rdi , - 1 8 4 (% rbp ) movq % rsi , - 1 9 2 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq $ 0 , - 1 7 6 (% rbp ) movq $ 0 , - 1 6 8 (% rbp ) movq $ 0 , - 1 6 0 (% rbp ) . LBB 2 : movq - 1 9 2 (% rbp ), % rax movq % rax , - 2 4 (% rbp ) . LBB 3 : . LBB 4 : jmp . L 2 . L 1 6 : . LBB 5 : nop . LBE 5 : . LBB 6 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 3 6 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 3 . LBB 7 : movq - 1 4 4 (% rbp ), % rsi leaq - 8 0 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 1 main . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 8 0 (% rbp ), % rax movq - 7 2 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 6 4 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) . LBE 7 : jmp . L 4 . L 3 : . LBB 8 : movq - 1 4 4 (% rbp ), % rcx movq - 1 2 8 (% rbp ), % rdx movq % rcx , - 1 7 6 (% rbp ) movq % rax , - 1 6 8 (% rbp ) movq % rdx , - 1 6 0 (% rbp ) . L 4 : . LBE 8 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 4 4 (% rbp ) movq % rdx , - 1 3 6 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 1 2 8 (% rbp ) movq - 1 4 4 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 5 . LBB 9 : movq - 2 4 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 6 . L 5 : . LBE 9 : . LBB 1 0 : movq - 2 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 6 : . LBE 1 0 : . LBB 1 1 : movq - 2 0 0 (% rbp ), % rax movq (% rax ), % rdx movq - 2 4 (% rbp ), % rax movq (% rax ), % rax cmpq % rax , % rdx jge . L 7 . LBB 1 2 : movq - 2 4 (% rbp ), % rax movq 8 (% rax ), % rax movq % rax , - 2 4 (% rbp ) . LBE 1 2 : jmp . L 2 . L 7 : . LBB 1 3 : movq - 2 4 (% rbp ), % rax movq 1 6 (% rax ), % rax movq % rax , - 2 4 (% rbp ) . L 2 : . LBE 1 3 : . LBE 1 1 : . LBE 6 : movq - 2 4 (% rbp ), % rax cmpq - 2 0 0 (% rbp ), % rax jne . L 1 6 . LBE 4 : . LBE 3 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 0 4 (% rbp ), % rbx leaq 1 (% rbx ), % rax movq - 9 6 (% rbp ), % rdx movq % rax , % rsi movq % rdx , % rcx cmpq % rcx , % rsi jbe . L 1 0 . LBB 1 4 : movq - 1 1 2 (% rbp ), % rsi leaq - 4 8 (% rbp ), % rdi movq % rax , % r 9 movq % rdx , % r 8 movq % rbx , % rcx movq % rsi , % rdx leaq type ... 1 main . TreeNode (% rip ), % rsi call runtime . growslice @ PLT movq - 4 8 (% rbp ), % rax movq - 4 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) movq - 3 2 (% rbp ), % rax movq % rax , - 1 6 0 (% rbp ) . LBE 1 4 : jmp . L 1 1 . L 1 0 : . LBB 1 5 : movq - 1 1 2 (% rbp ), % rcx movq - 9 6 (% rbp ), % rdx movq % rcx , - 1 7 6 (% rbp ) movq % rax , - 1 6 8 (% rbp ) movq % rdx , - 1 6 0 (% rbp ) . L 1 1 : . LBE 1 5 : movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , - 1 1 2 (% rbp ) movq % rdx , - 1 0 4 (% rbp ) movq - 1 6 0 (% rbp ), % rax movq % rax , - 9 6 (% rbp ) movq - 1 1 2 (% rbp ), % rax movq % rbx , % rdx salq $ 3 , % rdx addq % rdx , % rax leaq runtime . writeBarrier (% rip ), % rdx movl (% rdx ), % edx testl % edx , % edx jne . L 1 2 . LBB 1 6 : movq - 2 4 (% rbp ), % rdx movq % rdx , (% rax ) jmp . L 1 3 . L 1 2 : . LBE 1 6 : . LBB 1 7 : movq - 2 4 (% rbp ), % rdx movq % rdx , % rsi movq % rax , % rdi call runtime . gcWriteBarrier @ PLT . L 1 3 : . LBE 1 7 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) movq - 1 6 0 (% rbp ), % rax movq % rax , 1 6 (% rcx ) . LBE 2 : movq - 1 8 4 (% rbp ), % rax movq - 8 (% rbp ), % rbx leave ret
. LFB 0 : leaq - 6 0 0 (% rsp ), % r 1 1 cmpq % fs : 1 1 2 , % r 1 1 jnb . L 1 4 movl $ 6 0 0 , % r 1 0 d movl $ 0 , % r 1 1 d call __morestack . LVL 0 : ret . L 1 4 : pushq % rbp movq % rsp , % rbp pushq % r 1 5 pushq % r 1 4 pushq % r 1 3 pushq % r 1 2 pushq % rbx subq $ 5 5 2 , % rsp movq % rdi , - 5 3 6 (% rbp ) leaq . LC 1 3 (% rip ), % rax movl $ 3 , % edx movq % rax , - 4 9 6 (% rbp ) movq % rdx , - 4 8 8 (% rbp ) movb $ 1 , - 4 8 0 (% rbp ) leaq . LC 1 4 (% rip ), % r 1 2 movl $ 4 , % r 1 3 d movq % r 1 2 , - 4 7 2 (% rbp ) movq % r 1 3 , - 4 6 4 (% rbp ) movb $ 1 , - 4 5 6 (% rbp ) leaq . LC 1 5 (% rip ), % r 1 0 movl $ 5 , % r 1 1 d movq % r 1 0 , - 4 4 8 (% rbp ) movq % r 1 1 , - 4 4 0 (% rbp ) movb $ 0 , - 4 3 2 (% rbp ) leaq . LC 1 6 (% rip ), % r 8 movl $ 8 , % r 9 d movq % r 8 , - 4 2 4 (% rbp ) movq % r 9 , - 4 1 6 (% rbp ) movb $ 1 , - 4 0 8 (% rbp ) leaq . LC 1 7 (% rip ), % rcx movl $ 1 0 , % ebx movq % rcx , - 4 0 0 (% rbp ) movq % rbx , - 3 9 2 (% rbp ) movb $ 0 , - 3 8 4 (% rbp ) . LBB 2 : movq $ 0 , - 5 2 8 (% rbp ) movq $ 0 , - 5 2 0 (% rbp ) movq $ 0 , - 5 1 2 (% rbp ) . LBB 3 : . LBB 4 : . LBB 5 : movq - 4 9 6 (% rbp ), % rax movq - 4 8 8 (% rbp ), % rdx movq % rax , - 3 3 6 (% rbp ) movq % rdx , - 3 2 8 (% rbp ) movq - 4 8 0 (% rbp ), % rax movq - 4 7 2 (% rbp ), % rdx movq % rax , - 3 2 0 (% rbp ) movq % rdx , - 3 1 2 (% rbp ) movq - 4 6 4 (% rbp ), % rax movq - 4 5 6 (% rbp ), % rdx movq % rax , - 3 0 4 (% rbp ) movq % rdx , - 2 9 6 (% rbp ) movq - 4 4 8 (% rbp ), % rax movq - 4 4 0 (% rbp ), % rdx movq % rax , - 2 8 8 (% rbp ) movq % rdx , - 2 8 0 (% rbp ) movq - 4 3 2 (% rbp ), % rax movq - 4 2 4 (% rbp ), % rdx movq % rax , - 2 7 2 (% rbp ) movq % rdx , - 2 6 4 (% rbp ) movq - 4 1 6 (% rbp ), % rax movq - 4 0 8 (% rbp ), % rdx movq % rax , - 2 5 6 (% rbp ) movq % rdx , - 2 4 8 (% rbp ) movq - 4 0 0 (% rbp ), % rax movq - 3 9 2 (% rbp ), % rdx movq % rax , - 2 4 0 (% rbp ) movq % rdx , - 2 3 2 (% rbp ) movq - 3 8 4 (% rbp ), % rax movq % rax , - 2 2 4 (% rbp ) movl $ 5 , % r 1 2 d movl $ 0 , % ebx . LBE 5 : jmp . L 2 . L 1 3 : . LBB 6 : nop . LBE 6 : . LBB 7 : . LBB 8 : testq % rbx , % rbx js . L 3 cmpq $ 4 , % rbx jg . L 3 movq % rbx , % rax addq % rax , % rax addq % rbx , % rax salq $ 3 , % rax leaq - 4 8 (% rbp ), % rcx addq % rcx , % rax leaq - 2 8 8 (% rax ), % rcx movq (% rcx ), % rax movq 8 (% rcx ), % rdx movq % rax , - 3 6 8 (% rbp ) movq % rdx , - 3 6 0 (% rbp ) movq 1 6 (% rcx ), % rax movq % rax , - 3 5 2 (% rbp ) . LBE 8 : . LBB 9 : movq - 3 6 8 (% rbp ), % rax movq - 3 6 0 (% rbp ), % rdx movq % rax , - 2 0 8 (% rbp ) movq % rdx , - 2 0 0 (% rbp ) movq - 3 5 2 (% rbp ), % rax movq % rax , - 1 9 2 (% rbp ) movq - 2 0 8 (% rbp ), % rax movq - 2 0 0 (% rbp ), % rdx movq % rax , - 5 2 8 (% rbp ) movq % rdx , - 5 2 0 (% rbp ) movq - 1 9 2 (% rbp ), % rax movq % rax , - 5 1 2 (% rbp ) . LBE 9 : . LBB 1 0 : movq - 5 2 8 (% rbp ), % rdx movq - 5 2 0 (% rbp ), % rax movq % rdx , % rdi movq % rax , % rsi call go . problem 6 8 0 . validPalindrome movb % al , - 4 9 (% rbp ) . LBB 1 1 : movzbl - 5 1 2 (% rbp ), % eax cmpb % al , - 4 9 (% rbp ) jne . L 4 jmp . L 5 . L 3 : . LBE 1 1 : . LBE 1 0 : . LBB 1 8 : movl $ 5 , % esi movq % rbx , % rdi call runtime . goPanicIndex @ PLT . L 4 : . LBE 1 8 : . LBB 1 9 : . LBB 1 7 : . LBB 1 2 : leaq string .. d (% rip ), % rax movq % rax , - 5 9 2 (% rbp ) leaq string .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 8 4 (% rbp ) movq - 5 2 8 (% rbp ), % rax movq - 5 2 0 (% rbp ), % rdx movq % rax , - 1 7 6 (% rbp ) movq % rdx , - 1 6 8 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 6 . LBB 1 3 : movq - 1 8 4 (% rbp ), % rcx movq - 1 7 6 (% rbp ), % rax movq - 1 6 8 (% rbp ), % rdx movq % rax , (% rcx ) movq % rdx , 8 (% rcx ) . LBE 1 3 : jmp . L 7 . L 6 : . LBB 1 4 : movq - 1 8 4 (% rbp ), % rax leaq - 1 7 6 (% rbp ), % rdx movq % rax , % rsi leaq string .. d (% rip ), % rdi call runtime . typedmemmove @ PLT . L 7 : . LBE 1 4 : movq - 1 8 4 (% rbp ), % rax movq % rax , - 5 8 4 (% rbp ) leaq bool .. d (% rip ), % r 1 3 movq % r 1 3 , - 5 7 6 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 5 2 (% rbp ) movq - 1 5 2 (% rbp ), % rax movzbl - 4 9 (% rbp ), % edx movb % dl , (% rax ) movq - 1 5 2 (% rbp ), % rax movq % rax , - 5 6 8 (% rbp ) movq % r 1 3 , - 5 6 0 (% rbp ) leaq bool .. d (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 4 4 (% rbp ) movq - 1 4 4 (% rbp ), % rax movzbl - 5 1 2 (% rbp ), % edx movb % dl , (% rax ) movq - 1 4 4 (% rbp ), % rax movq % rax , - 5 5 2 (% rbp ) leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . newobject @ PLT movq % rax , - 1 3 6 (% rbp ) movdqa - 5 9 2 (% rbp ), % xmm 0 movups % xmm 0 , - 1 2 8 (% rbp ) movdqa - 5 7 6 (% rbp ), % xmm 1 movups % xmm 1 , - 1 1 2 (% rbp ) movdqa - 5 6 0 (% rbp ), % xmm 2 movups % xmm 2 , - 9 6 (% rbp ) leaq runtime . writeBarrier (% rip ), % rax movl (% rax ), % eax testl % eax , % eax jne . L 8 . LBB 1 5 : movq - 1 3 6 (% rbp ), % rax movq - 1 2 8 (% rbp ), % rsi movq - 1 2 0 (% rbp ), % rdi movq % rsi , (% rax ) movq % rdi , 8 (% rax ) movq - 1 1 2 (% rbp ), % rsi movq - 1 0 4 (% rbp ), % rdi movq % rsi , 1 6 (% rax ) movq % rdi , 2 4 (% rax ) movq - 9 6 (% rbp ), % rsi movq - 8 8 (% rbp ), % rdi movq % rsi , 3 2 (% rax ) movq % rdi , 4 0 (% rax ) . LBE 1 5 : jmp . L 9 . L 8 : . LBB 1 6 : movq - 1 3 6 (% rbp ), % rax leaq - 1 2 8 (% rbp ), % rdx movq % rax , % rsi leaq type ... 6 3 x . 7 interface . 4 . 5 (% rip ), % rdi call runtime . typedmemmove @ PLT . L 9 : . LBE 1 6 : movq - 1 3 6 (% rbp ), % rax movq % rax , - 8 0 (% rbp ) movq $ 3 , - 7 2 (% rbp ) movq $ 3 , - 6 4 (% rbp ) leaq . LC 1 8 (% rip ), % r 1 4 movl $ 2 5 , % r 1 5 d movq % r 1 4 , % rsi movq % r 1 5 , % rdi movq % r 1 4 , % rax movq % r 1 5 , % rdx movq % rsi , % rcx movq - 5 3 6 (% rbp ), % rax subq $ 8 , % rsp pushq - 6 4 (% rbp ) pushq - 7 2 (% rbp ) pushq - 8 0 (% rbp ) movq % rcx , % rsi movq % rax , % rdi call testing . T . Fatalf .. stub @ PLT addq $ 3 2 , % rsp . L 5 : . LBE 1 2 : . LBE 1 7 : . LBE 1 9 : . LBE 7 : . LBB 2 0 : addq $ 1 , % rbx . L 2 : . LBE 2 0 : cmpq % r 1 2 , % rbx jl . L 1 3 . LBE 4 : . LBE 3 : . LBE 2 : leaq - 4 0 (% rbp ), % rsp popq % rbx popq % r 1 2 popq % r 1 3 popq % r 1 4 popq % r 1 5 popq % rbp ret
